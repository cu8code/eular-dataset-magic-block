[
  {
    "question": "N tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\nThe i-th tile from the left is painted black if the i-th character of S is 0, and painted white if that character is 1.\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\nAt least how many tiles need to be repainted to satisfy the condition?\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5\n - S_i is 0 or 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the minimum number of tiles that need to be repainted to satisfy the condition.\n\n-----Sample Input-----\n000\n\n-----Sample Output-----\n1\n\nThe condition can be satisfied by repainting the middle tile white.",
    "solutions": "[\"s = input()\\nmae = ''\\ncnt = 0\\nfor i in range(len(s)):\\n\\tif mae == s[i]:\\n\\t\\tcnt += 1\\n\\t\\tif s[i] == '0':\\n\\t\\t\\tmae = '1'\\n\\t\\telse:\\n\\t\\t\\tmae = '0'\\n\\telse:\\n\\t\\tmae = s[i]\\nprint(cnt)\\n\", \"ans = 0\\nS = input()\\nfor (i, j) in enumerate(S):\\n\\tj = int(j)\\n\\tif i % 2 == j:\\n\\t\\tans += 1\\nprint(min(ans, len(S) - ans))\\n\", \"s = input()\\n(t, u) = ('', '')\\nfor i in range(len(s)):\\n\\tt += '1' if i % 2 == 0 else '0'\\n\\tu += '0' if i % 2 == 0 else '1'\\ns = int(s, 2)\\nt = int(t, 2)\\nu = int(u, 2)\\nprint(min(bin(s ^ t).count('1'), bin(s ^ u).count('1')))\\n\", \"S = input()\\na = S[0::2].count('0') + S[1::2].count('1')\\nb = S[0::2].count('1') + S[1::2].count('0')\\nprint(min(a, b))\\n\", \"s = input()\\nn = len(s)\\nw = 0\\nfor i in range(n):\\n\\tw += (s[i] == '0') * (i % 2) + (s[i] == '1') * ((i + 1) % 2)\\nprint(min(w, n - w))\\n\", \"S = input()\\nans = sum([1 if i % 2 != int(S[i]) else 0 for i in range(len(S))])\\nans = min(ans, len(S) - ans)\\nprint(ans)\\n\", \"S = input()\\nans = 0\\na = S[0]\\nfor i in range(1, len(S)):\\n\\tif a == S[i]:\\n\\t\\tans += 1\\n\\tif a == '0':\\n\\t\\ta = '1'\\n\\telse:\\n\\t\\ta = '0'\\nprint(ans)\\n\", \"S = input()\\na = ['0', '1']\\ncount = 0\\nn = len(S)\\nfor i in range(n):\\n\\tif S[i] == a[i % 2]:\\n\\t\\tcount += 1\\nprint(min(count, n - count))\\n\", \"S = input()\\ncnt = 0\\nfor i in range(len(S)):\\n\\tif i % 2 == int(S[i]):\\n\\t\\tcnt += 1\\nprint(min(cnt, len(S) - cnt))\\n\", \"from collections import Counter\\nmoji = str(input())\\nguall = len(moji) // 2\\nkiall = guall + len(moji) % 2\\ngucount = dict(Counter(moji[1::2]))\\nkicount = dict(Counter(moji[0::2]))\\nif len(moji) == 1:\\n\\tans = 0\\nelif max(gucount, key=gucount.get) != max(kicount, key=kicount.get):\\n\\tans = guall - max(gucount.values()) + kiall - max(kicount.values())\\nelif kiall - max(kicount.values()) > guall - max(gucount.values()):\\n\\tans = max(kicount.values()) + guall - max(gucount.values())\\nelse:\\n\\tans = max(gucount.values()) + kiall - max(kicount.values())\\nprint(ans)\\n\", \"s = input()\\ne = s[::2]\\no = s[1::2]\\nprint(min(e.count('1') + o.count('0'), e.count('0') + o.count('1')))\\n\", \"S = input()\\nx = S[::2].count('0') + S[1::2].count('1')\\nprint(min(x, len(S) - x))\\n\", \"(*s,) = map(int, input())\\na = 0\\nfor i in range(1, len(s)):\\n\\ta += s[i] == s[i - 1]\\n\\ts[i] = 1 - s[i - 1]\\nprint(a)\\n\", \"a = list(input())\\nb = list(reversed(a))\\nans_f = 0\\nans_r = 0\\nfor i in range(len(a) - 1):\\n\\tif a[i] == a[i + 1]:\\n\\t\\ta[i + 1] = str(abs(int(a[i]) - 1))\\n\\t\\tans_f += 1\\nfor i in range(len(a) - 1):\\n\\tif b[i] == b[i + 1]:\\n\\t\\tb[i + 1] = str(abs(int(b[i]) - 1))\\n\\t\\tans_r += 1\\nprint(min(ans_f, ans_r))\\n\", \"s = input()\\nn = len(s)\\na = '10' * (n // 2) + '1' * (n % 2)\\np = 0\\nfor i in range(n):\\n\\tif s[i] != a[i]:\\n\\t\\tp += 1\\nprint(min(p, n - p))\\n\", \"s = list(input())\\nprint(min(s[::2].count('0') + s[1::2].count('1'), s[::2].count('1') + s[1::2].count('0')))\\n\", \"s = input()\\nx = ''\\ny = ''\\nx_con = 0\\ny_con = 0\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\tx += '0'\\n\\t\\ty += '1'\\n\\telse:\\n\\t\\tx += '1'\\n\\t\\ty += '0'\\nfor i in range(len(s)):\\n\\tif s[i] != x[i]:\\n\\t\\tx_con += 1\\n\\tif s[i] != y[i]:\\n\\t\\ty_con += 1\\nprint(min(x_con, y_con))\\n\", \"s = input()\\nif len(s) == 1:\\n\\tans = 0\\nelse:\\n\\tans_w = sum([1 for i in s[::2] if i != '1']) + sum([1 for i in s[1::2] if i != '0'])\\n\\tans_b = sum([1 for i in s[::2] if i != '0']) + sum([1 for i in s[1::2] if i != '1'])\\n\\tans = min([ans_w, ans_b])\\nprint(ans)\\n\", \"a = 0\\nfor (i, s) in enumerate(input()):\\n\\ta += i % 2 ^ int(s)\\nprint(min(a, i - a + 1))\\n\", \"S = input()\\nN = len(S)\\n(s1, s2) = ('', '')\\nfor i in range(N):\\n\\tif i % 2 == 0:\\n\\t\\ts1 += '1'\\n\\t\\ts2 += '0'\\n\\telse:\\n\\t\\ts1 += '0'\\n\\t\\ts2 += '1'\\n(a1, a2) = (0, 0)\\nfor i in range(N):\\n\\tif s1[i] != S[i]:\\n\\t\\ta1 += 1\\n\\tif s2[i] != S[i]:\\n\\t\\ta2 += 1\\nans = min(a1, a2)\\nprint(ans)\\n\", \"s = input()\\na = s[::2].count('0') + s[1::2].count('1')\\nprint(min(a, len(s) - a))\\n\", \"S = input()\\n(idx1, idx2) = (0, 1)\\n(cnt1, cnt2) = (0, 0)\\nfor s in S:\\n\\ts = int(s)\\n\\tif s != idx1:\\n\\t\\tcnt1 += 1\\n\\tif s != idx2:\\n\\t\\tcnt2 += 1\\n\\t(idx1, idx2) = (abs(idx1 - 1), abs(idx2 - 1))\\nprint(min(cnt1, cnt2))\\n\", \"s = input()\\na = s[::2].count('0') + s[1::2].count('1')\\nb = s[::2].count('1') + s[1::2].count('0')\\nprint(min(a, b))\\n\", \"s = input()\\nif s[0] == '1':\\n\\tans = 0\\n\\tfor i in range(len(s)):\\n\\t\\tif i % 2 == 0 and s[i] != '1':\\n\\t\\t\\tans += 1\\n\\t\\telif i % 2 == 1 and s[i] != '0':\\n\\t\\t\\tans += 1\\nelse:\\n\\tans = 0\\n\\tfor i in range(len(s)):\\n\\t\\tif i % 2 == 0 and s[i] != '0':\\n\\t\\t\\tans += 1\\n\\t\\telif i % 2 == 1 and s[i] != '1':\\n\\t\\t\\tans += 1\\nprint(ans)\\n\", \"s = input()\\nz = sum([int(s[i]) == i % 2 for i in range(len(s))])\\nprint(min(z, len(s) - z))\\n\", \"s = input()\\nans = [0, 0]\\nfor i in range(len(s)):\\n\\tnow = int(s[i])\\n\\tans[0] += now ^ 0 ^ i % 2\\n\\tans[1] += now ^ 1 ^ i % 2\\nprint(min(ans))\\n\", \"S = input()\\nn = S[::2].count('0') + S[1::2].count('1')\\nprint(min(n, len(S) - n))\\n\", \"s = list(input())\\na = s[::2].count('0') + s[1::2].count('1')\\nb = s[::2].count('1') + s[1::2].count('0')\\nprint(len(s) - max(a, b))\\n\", \"s = str(input())\\nn = s[::2].count('0') + s[1::2].count('1')\\nprint(min(n, len(s) - n))\\n\", \"s = input()\\nn = len(s)\\nli = [0] * n\\nfor i in range(n):\\n\\tif s[i] == '1':\\n\\t\\tli[i] = 1\\nb = [0] * n\\nw = [1] * n\\nfor i in range(n):\\n\\tif i % 2 == 1:\\n\\t\\tb[i] = 1\\n\\t\\tw[i] = 0\\ncnt_1 = 0\\ncnt_2 = 0\\nfor i in range(n):\\n\\tcnt_1 += li[i] ^ b[i]\\n\\tcnt_2 += li[i] ^ w[i]\\nans = min(cnt_1, cnt_2)\\nprint(ans)\\n\", \"S = input()\\nc = S[::2].count('0') + S[1::2].count('1')\\nprint(min(c, len(S) - c))\\n\", \"s = input()\\nc = s[::2].count('0') + s[1::2].count('1')\\nprint(min(c, len(s) - c))\\n\", \"S = input()\\nN = len(S)\\n(a1, a2) = (0, 0)\\nfor i in range(N):\\n\\tif i % 2 == 0 and S[i] == '1':\\n\\t\\ta1 += 1\\n\\tif i % 2 == 1 and S[i] == '0':\\n\\t\\ta1 += 1\\nfor i in range(N):\\n\\tif i % 2 == 0 and S[i] == '0':\\n\\t\\ta2 += 1\\n\\tif i % 2 == 1 and S[i] == '1':\\n\\t\\ta2 += 1\\nprint(min(a1, a2))\\n\", \"s = input()\\nn = s[::2].count('0') + s[1::2].count('1')\\nans = min(n, len(s) - n)\\nprint(ans)\\n\", \"s = list(input())\\na = ['0', '1']\\ncnt = 0\\nfor i in range(len(s)):\\n\\tif s[i] != a[i % 2]:\\n\\t\\tcnt += 1\\nprint(min(cnt, len(s) - cnt))\\n\", \"s = input()\\nres = s[::2].count('0') + s[1::2].count('1')\\nprint(min(res, len(s) - res))\\n\", \"s = input()\\nBW = s[::2]\\nWB = s[1::2]\\nx = BW.count('0') + WB.count('1')\\ny = BW.count('1') + WB.count('0')\\nprint(min(x, y))\\n\", \"s = list(map(int, input()))\\nans1 = 0\\nans2 = 0\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\tif s[i] == 0:\\n\\t\\t\\tans1 += 1\\n\\t\\telse:\\n\\t\\t\\tans2 += 1\\n\\telif s[i] == 0:\\n\\t\\tans2 += 1\\n\\telse:\\n\\t\\tans1 += 1\\nans = min(ans1, ans2)\\nprint(ans)\\n\", \"s = input()\\na = int(('10' * 10 ** 5)[:len(s)], 2)\\ns = int(s, 2)\\nc = lambda x: str(bin(x ^ s)).count('1')\\nprint(min(c(a), c(a >> 1)))\\n\", \"S = input()\\ne = S[::2].count('0')\\no = S[1::2].count('1')\\nprint(min(e + o, len(S) - (e + o)))\\n\", \"S = list(input())\\na = S[::2].count('0') + S[1::2].count('1')\\nprint(min(a, len(S) - a))\\n\", \"S = input()\\nb = 1\\nB = 0\\nfor i in S:\\n\\tif int(i) != int(b):\\n\\t\\tB += 1\\n\\tb = not b\\nl = len(S)\\nprint(min(B, l - B))\\n\", \"S = input()\\nprint(min(S[::2].count('1') + S[1::2].count('0'), S[::2].count('0') + S[1::2].count('1')))\\n\", \"s = input()\\nt = s[0::2].count('0') + s[1::2].count('1')\\nprint(min(t, len(s) - t))\\n\", \"s = input()\\nx = s[::2]\\ny = s[1::2]\\nprint(min(x.count('0') + y.count('1'), x.count('1') + y.count('0')))\\n\", \"s = str(input())\\nn = len(s)\\ndif = 0\\nfor i in range(n):\\n\\tif s[i] != str(i % 2):\\n\\t\\tdif += 1\\nprint(min(dif, n - dif))\\n\", \"c = 0\\nfor (i, n) in enumerate(input()):\\n\\tc += i % 2 ^ int(n)\\nprint(min(c, i - c + 1))\\n\", \"s = input()\\na = '01'\\nb = x = y = 0\\nfor i in s:\\n\\tif i == a[b]:\\n\\t\\tx += 1\\n\\tif i == a[~b]:\\n\\t\\ty += 1\\n\\tb = ~b\\nprint(len(s) - max(x, y))\\n\", \"s = [int(i) for i in input()]\\na = s[1::2]\\nb = s[::2]\\nprint(min(a.count(0) + sum(b), sum(a) + b.count(0)))\\n\", \"S = [int(i) for i in list(input())]\\nS2 = len([1 for i in range(len(S)) if S[i] == i % 2])\\nans = min(S2, len(S) - S2)\\nprint(ans)\\n\", \"s = input()\\ntmp1 = ''\\ntmp2 = ''\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\ttmp1 += '0'\\n\\t\\ttmp2 += '1'\\n\\telse:\\n\\t\\ttmp1 += '1'\\n\\t\\ttmp2 += '0'\\ndiff_tmp1 = 0\\ndiff_tmp2 = 0\\nfor i in range(len(s)):\\n\\tif tmp1[i] != s[i]:\\n\\t\\tdiff_tmp1 += 1\\n\\telif tmp2[i] != s[i]:\\n\\t\\tdiff_tmp2 += 1\\nprint(min(diff_tmp1, diff_tmp2))\\n\", \"s = input()\\ncnt = 0\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\tif s[i] == '0':\\n\\t\\t\\tcnt += 1\\n\\telif s[i] == '1':\\n\\t\\tcnt += 1\\nprint(min(cnt, len(s) - cnt))\\n\", \"s = input()\\nc = 0\\nnums = ['0', '1']\\nfor (i, v) in enumerate(s):\\n\\tif v == nums[i % 2]:\\n\\t\\tc += 1\\nprint(min(c, len(s) - c))\\n\", \"s = list(input())\\nfor i in range(0, len(s), 2):\\n\\ts[i] = str(int(s[i]) + 1 & 1)\\nprint(min(s.count('0'), s.count('1')))\\n\", \"S = input()\\na1 = 0\\na2 = 0\\np1 = '1'\\np2 = '0'\\nfor s in S:\\n\\tif s != p1:\\n\\t\\ta1 += 1\\n\\telse:\\n\\t\\ta2 += 1\\n\\tp = p1\\n\\tp1 = p2\\n\\tp2 = p\\nprint(min(a1, a2))\\n\", \"S = input()\\ntemp = 0\\nfor i in range(len(S)):\\n\\tif S[i] != '0' and i % 2 == 0:\\n\\t\\ttemp += 1\\n\\tif S[i] != '1' and i % 2 == 1:\\n\\t\\ttemp += 1\\nans = temp\\ntemp = 0\\nfor i in range(len(S)):\\n\\tif S[i] != '0' and i % 2 == 1:\\n\\t\\ttemp += 1\\n\\tif S[i] != '1' and i % 2 == 0:\\n\\t\\ttemp += 1\\nif temp < ans:\\n\\tans = temp\\nprint(ans)\\n\", \"s = input()\\nZ = 0\\nW = 0\\nfor i in range(len(s)):\\n\\tif int(s[i]) == i % 2:\\n\\t\\tZ += 1\\n\\telse:\\n\\t\\tW += 1\\nprint(min(Z, W))\\n\", \"s = input()\\na1 = s[::2].count('1') + s[1::2].count('0')\\na2 = s[::2].count('0') + s[1::2].count('1')\\nprint(min(a1, a2))\\n\", \"import copy\\nS_0 = list(input())\\nS = [int(n) for n in S_0]\\nS_1 = copy.copy(S)\\nS_1[0] = 1 - S_1[0]\\nl = len(S)\\ni = 0\\ncnt_0 = 0\\ncnt_1 = 1\\nfor i in range(l - 1):\\n\\tif S[i + 1] == S[i]:\\n\\t\\tcnt_0 += 1\\n\\t\\tS[i + 1] = 1 - S[i]\\nfor i in range(l - 1):\\n\\tif S_1[i + 1] == S_1[i]:\\n\\t\\tcnt_1 += 1\\n\\t\\tS_1[i + 1] = 1 - S_1[i]\\nprint(min([cnt_0, cnt_1]))\\n\", \"s = input()\\nev = s[0::2]\\nod = s[1::2]\\nprint(min(ev.count('1') + od.count('0'), ev.count('0') + od.count('1')))\\n\", \"s = list(input())\\n(odd, even) = (s[1::2], s[0::2])\\nprint(min(even.count('0') + odd.count('1'), even.count('1') + odd.count('0')))\\n\", \"s = input()\\nc1 = s[::2].count('0') + s[1::2].count('1')\\nc2 = s[::2].count('1') + s[1::2].count('0')\\nprint(min(c1, c2))\\n\", \"s = input()\\nodd_0 = 0\\nodd_1 = 0\\neven_0 = 0\\neven_1 = 0\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\tif s[i] == '0':\\n\\t\\t\\todd_0 += 1\\n\\t\\telse:\\n\\t\\t\\todd_1 += 1\\n\\telif s[i] == '0':\\n\\t\\teven_0 += 1\\n\\telse:\\n\\t\\teven_1 += 1\\na = odd_0 + even_1\\nb = odd_1 + even_0\\nans = min(a, b)\\nprint(ans)\\n\", \"s = input()\\nodd = s[::2]\\neven = s[1::2]\\nans = odd.count('0') + even.count('1')\\nans = min(ans, len(s) - ans)\\nprint(ans)\\n\", \"s = input()\\ncnt1 = 0\\ncnt2 = 0\\nfor (i, c) in enumerate(s):\\n\\tcnt1 += int(c) != i % 2\\n\\tcnt2 += int(c) != (i + 1) % 2\\nprint(min(cnt1, cnt2))\\n\", \"S = input()\\nd0 = 0\\nd1 = 0\\nfor i in range(len(S)):\\n\\td0 += int(S[i]) != i % 2\\n\\td1 += int(S[i]) != (i + 1) % 2\\nprint(min(d0, d1))\\n\", \"s = input()\\nn = sum(((i + int(c)) % 2 for (i, c) in enumerate(s)))\\nprint(min(n, len(s) - n))\\n\", \"s = list(map(int, list(str(input()))))\\na = s[::2]\\nb = s[1::2]\\nc = a.count(1) + b.count(0)\\nd = a.count(0) + b.count(1)\\nprint(min(c, d))\\n\", \"s = input()\\nn = len(s)\\ncount = 0\\nfor i in range(n):\\n\\tif i & 1 ^ int(s[i]):\\n\\t\\tcount += 1\\nprint(min(count, n - count))\\n\", \"s = input()\\nb = l = r = 0\\nfor i in s:\\n\\tl += int(i) == b\\n\\tr += int(i) != b\\n\\tb ^= 1\\nprint(min(l, r))\\n\", \"s = input()\\ncnt = 0\\nfor (i, ss) in enumerate(s):\\n\\tif ss == str(i % 2):\\n\\t\\tcnt += 1\\nprint(min(cnt, len(s) - cnt))\\n\", \"s = input()\\nl = '1' + '01' * (len(s) // 2)\\nans = 0\\nfor i in range(len(s)):\\n\\tif s[i] == l[i]:\\n\\t\\tans += 1\\nprint(min(ans, len(s) - ans))\\n\", \"def resolve():\\n\\tS = input()\\n\\tans1 = 0\\n\\tres1 = 0\\n\\tans2 = 1\\n\\tres2 = 0\\n\\tfor item in S:\\n\\t\\titem = int(item)\\n\\t\\tif ans1 % 2 != item:\\n\\t\\t\\tres1 += 1\\n\\t\\tif ans2 % 2 != item:\\n\\t\\t\\tres2 += 1\\n\\t\\tans1 += 1\\n\\t\\tans2 += 1\\n\\tprint(min(res2, res1))\\n\\ndef __starting_point():\\n\\tresolve()\\n__starting_point()\\n\", \"s = input()\\nans = 0\\nfor i in range(len(s)):\\n\\tif s[i] == str(i % 2):\\n\\t\\tans += 1\\nprint(min(ans, len(s) - ans))\\n\", \"S = input()\\n\\ndef s(a):\\n\\treturn sum([(i ^ a ^ int(S[i])) & 1 for i in range(len(S))])\\nprint(min(s(0), s(1)))\\n\", \"S = input()\\nA = S[0::2].count('1') + S[1::2].count('0')\\nB = S[0::2].count('0') + S[1::2].count('1')\\nprint(min(A, B))\\n\", \"s = list(input())\\nans = 100000.0\\nfor i0 in range(2):\\n\\tsum = 0\\n\\tfor i in range(len(s)):\\n\\t\\tx = i + i0\\n\\t\\tif str(x % 2) == s[i]:\\n\\t\\t\\tsum += 1\\n\\tans = min(sum, ans)\\nprint(ans)\\n\", \"tile = list(map(int, input()))\\nn = len(tile)\\nsum = 0\\nfor i in range(n):\\n\\tsum += (i - tile[i]) % 2\\nprint(min(sum, n - sum))\\n\", \"def change(W):\\n\\tif S[W] == 0:\\n\\t\\tS[W] = 1\\n\\telse:\\n\\t\\tS[W] = 0\\nS = list(map(int, input()))\\nR = len(S)\\nB = R\\nZ = list(S)\\nfor K in range(2):\\n\\tA = 0\\n\\tif S[0] == K:\\n\\t\\tA += 1\\n\\t\\tchange(0)\\n\\tfor L in range(R - 1):\\n\\t\\tif S[L] == S[L + 1]:\\n\\t\\t\\tA += 1\\n\\t\\t\\tchange(L + 1)\\n\\tif B >= A:\\n\\t\\tB = A\\n\\tS = Z\\nprint(B)\\n\", \"S = list(map(int, list(input())))\\nfirst_letter = S[0]\\nsecond_letter = 0 if first_letter else 1\\nres = 0\\nres += len([i for i in S[0::2] if i != first_letter])\\nres += len([i for i in S[1::2] if i != second_letter])\\nprint(res)\\n\", \"a = input()\\nn = len(a)\\nb = '01' * (n // 2) + '0' * (n % 2)\\nk = s = 0\\nfor i in range(n):\\n\\tif b[i] == a[i]:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tk += 1\\nprint(min(k, s))\\n\", \"import sys\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nsys.setrecursionlimit(10 ** 9)\\nINF = 1 << 60\\nMOD = 1000000007\\n\\ndef main():\\n\\tS = readline().strip()\\n\\tcount = 0\\n\\tfor (i, c) in enumerate(S):\\n\\t\\tif i % 2 == int(c):\\n\\t\\t\\tcount += 1\\n\\tprint(min(count, len(S) - count))\\n\\treturn\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"import sys\\ninput = sys.stdin.readline\\nimport numpy as np\\n\\ndef main():\\n\\tS = np.array(list(map(int, input().rstrip())))\\n\\tL = len(S)\\n\\tA = np.arange(L) & 1\\n\\tB = 1 - A\\n\\tx1 = (A != S).sum()\\n\\tx2 = (B != S).sum()\\n\\tprint(min(x1, x2))\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"s = list(str(input()))\\ncnt = 0\\nif len(s) > 1 and s[0] == s[1]:\\n\\tif s[0] == '1':\\n\\t\\ts[1] = '0'\\n\\telse:\\n\\t\\ts[1] = '1'\\n\\tcnt += 1\\nfor i in range(1, len(s) - 1):\\n\\tif s[i] == s[i + 1]:\\n\\t\\ts[i + 1] = s[i - 1]\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"n = list(input())\\ncnt1 = 0\\ncnt2 = 0\\nfor i in range(len(n)):\\n\\tif i % 2 == 0:\\n\\t\\tif n[i] == '0':\\n\\t\\t\\tcnt1 += 1\\n\\t\\telse:\\n\\t\\t\\tcnt2 += 1\\n\\telif n[i] == '1':\\n\\t\\tcnt1 += 1\\n\\telse:\\n\\t\\tcnt2 += 1\\nprint(min(cnt1, cnt2))\\n\", \"s = input()\\nwords = [w for w in s]\\ncnt = 0\\nfor r in range(len(words) - 1):\\n\\tif words[r + 1] == words[r]:\\n\\t\\tif words[r + 1] == '0':\\n\\t\\t\\twords[r + 1] = '1'\\n\\t\\telse:\\n\\t\\t\\twords[r + 1] = '0'\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"s = input()\\nos = s[1::2]\\nes = s[::2]\\nl = os.count('0') + es.count('1')\\nprint(min(l, len(s) - l))\\n\", \"s = input()\\np = int(''.join(map(str, [i % 2 for i in range(1, len(s) + 1)])), 2)\\nprint(min((bin(int(s, 2) ^ n).count('1') for n in [p, p >> 1])))\\n\", \"n = input()\\nsum = 0\\nfor i in range(len(n)):\\n\\tif int(n[i]) == i % 2:\\n\\t\\tsum += 1\\nprint(min(sum, len(n) - sum))\\n\", \"t = list(input())\\nans = min(t[::2].count('0') + t[1::2].count('1'), t[::2].count('1') + t[1::2].count('0'))\\nprint(ans)\\n\", \"S = list(map(int, list(input())))\\nans = 0\\nfor i in range(len(S)):\\n\\tif S[i] != i % 2:\\n\\t\\tans += 1\\nprint(min(ans, len(S) - ans))\\n\", \"s = str(input())\\ncon = 0\\ncon2 = 0\\nans = 0\\nans2 = 0\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\tans += 1\\n\\t\\tif s[i] == '0':\\n\\t\\t\\tcon += 1\\n\\telse:\\n\\t\\tans2 += 1\\n\\t\\tif s[i] == '1':\\n\\t\\t\\tcon2 += 1\\nL = [con + con2, ans - con + (ans2 - con2)]\\nprint(min(L))\\n\", \"s = input()\\na = 0\\nb = 0\\nfor (index, i) in enumerate(s):\\n\\tif int(i) == index % 2:\\n\\t\\ta += 1\\n\\telse:\\n\\t\\tb += 1\\nprint(min(a, b))\\n\", \"S = input()\\ncnt = 0\\nfor (i, s) in enumerate(S):\\n\\tcnt += int(s) == i % 2\\nprint(min(cnt, len(S) - cnt))\\n\", \"s = input()\\nc = 0\\nfor i in range(len(s)):\\n\\tif int(s[i]) != i % 2:\\n\\t\\tc += 1\\nprint(min(c, len(s) - c))\\n\", \"s = list(input())\\nans = 0\\nfor i in range(1, len(s)):\\n\\tif s[i] == s[i - 1]:\\n\\t\\ts[i] = str(1 - int(s[i]))\\n\\t\\tans += 1\\nprint(ans)\\n\", \"S = input()\\nN = len(S)\\n(O, E) = (0, 0)\\nfor (i, s) in enumerate(S):\\n\\tO += i % 2 ^ int(s)\\n\\tE += i % 2 ^ (not int(s))\\nprint(min(O, E))\\n\", \"S = input()\\ncount = sum((int(s) != i % 2 for (i, s) in enumerate(S)))\\nprint(min(count, len(S) - count))\\n\", \"S = input()\\nN = len(S)\\na = 0\\nfor i in range(N):\\n\\tif S[i] == str(i % 2):\\n\\t\\ta += 1\\nprint(min(a, N - a))\\n\", \"import sys\\nimport math\\nfrom collections import defaultdict, deque, Counter\\nfrom copy import deepcopy\\nfrom bisect import bisect, bisect_right, bisect_left\\nfrom heapq import heapify, heappop, heappush\\ninput = sys.stdin.readline\\n\\ndef RD():\\n\\treturn input().rstrip()\\n\\ndef F():\\n\\treturn float(input().rstrip())\\n\\ndef I():\\n\\treturn int(input().rstrip())\\n\\ndef MI():\\n\\treturn map(int, input().split())\\n\\ndef MF():\\n\\treturn map(float, input().split())\\n\\ndef LI():\\n\\treturn list(map(int, input().split()))\\n\\ndef TI():\\n\\treturn tuple(map(int, input().split()))\\n\\ndef LF():\\n\\treturn list(map(float, input().split()))\\n\\ndef Init(H, W, num):\\n\\treturn [[num for i in range(W)] for j in range(H)]\\n\\ndef main():\\n\\tS = input().rstrip()\\n\\tl = len(S)\\n\\ta1 = 0\\n\\ta0 = 0\\n\\tfor i in range(l):\\n\\t\\tif i % 2 == 0:\\n\\t\\t\\tif S[i] == '1':\\n\\t\\t\\t\\ta1 += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\ta0 += 1\\n\\t\\telif S[i] == '0':\\n\\t\\t\\ta1 += 1\\n\\t\\telse:\\n\\t\\t\\ta0 += 1\\n\\tprint(min(a0, a1))\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"S = input()\\nnorm = 0\\nfor (i, s) in enumerate(S):\\n\\tif i % 2 == int(s):\\n\\t\\tnorm += 1\\nprint(min(norm, len(S) - norm))\\n\", \"s = input()\\nn = len(s)\\na = ''\\nfor x in range(n):\\n\\tif x % 2 == 0:\\n\\t\\ta = a + '1'\\n\\telse:\\n\\t\\ta = a + '0'\\ncount = 0\\nfor y in range(n):\\n\\tif s[y] != a[y]:\\n\\t\\tcount += 1\\nprint(min(count, n - count))\\n\", \"import sys\\nimport copy\\nimport math\\nimport itertools\\nimport numpy as np\\nS = input()\\ncnt = [0, 0]\\nfor i in range(len(S)):\\n\\tif i % 2 == 0 and int(S[i]) == 1:\\n\\t\\tcnt[0] += 1\\n\\telif i % 2 == 1 and int(S[i]) == 0:\\n\\t\\tcnt[0] += 1\\n\\tif i % 2 == 0 and int(S[i]) == 0:\\n\\t\\tcnt[1] += 1\\n\\telif i % 2 == 1 and int(S[i]) == 1:\\n\\t\\tcnt[1] += 1\\nif cnt[0] <= cnt[1]:\\n\\tprint(cnt[0])\\nelse:\\n\\tprint(cnt[1])\\n\", \"s = input()\\nc = 0\\nfor x in range(len(s)):\\n\\tc += 1 if s[x] != str(x % 2) else 0\\nprint(c if c < x + 1 - c else x + 1 - c)\\n\", \"s = input()\\nchanges = len([i for (i, tile) in enumerate(s) if i % 2 != int(tile)])\\nprint(min(changes, len(s) - changes))\\n\", \"s = input()\\no1 = s[::2].count('1')\\no0 = len(s[::2]) - o1\\ne1 = s[1::2].count('1')\\ne0 = len(s[1::2]) - e1\\nprint(min(o1 + e0, o0 + e1))\\n\", \"S = input()\\nS0 = S[::2]\\nS1 = S[1::2]\\nprint(min(len(S) - S0.count('0') - S1.count('1'), len(S) - S0.count('1') - S1.count('0')))\\n\", \"S = list(input())\\ns = S[::2].count('1') + S[1::2].count('0')\\nu = S[::2].count('0') + S[1::2].count('1')\\nprint(min(s, u))\\n\", \"S = input()\\nN = len(S)\\nans = 0\\nif S[0] == '0':\\n\\tfor i in range(1, N):\\n\\t\\tif i % 2 == 0 and S[i] == '1':\\n\\t\\t\\tans += 1\\n\\t\\tif i % 2 == 1 and S[i] == '0':\\n\\t\\t\\tans += 1\\nelse:\\n\\tfor i in range(1, N):\\n\\t\\tif i % 2 == 0 and S[i] == '0':\\n\\t\\t\\tans += 1\\n\\t\\tif i % 2 == 1 and S[i] == '1':\\n\\t\\t\\tans += 1\\nprint(ans)\\n\", \"s = input()\\ns_length = len(s)\\nkeep = '01' * 100000\\nkeep_1 = keep[:s_length]\\nkeep_2 = keep[1:s_length + 1]\\nans_1 = 0\\nans_2 = 0\\nfor i in range(s_length):\\n\\tif s[i] != keep_1[i]:\\n\\t\\tans_1 += 1\\n\\telse:\\n\\t\\tans_2 += 1\\nprint(min(ans_1, ans_2))\\n\", \"s = input()\\nS = len(s)\\nli_0 = []\\nfor i in s:\\n\\tli_0.append(int(i))\\nli = [0, 1] * 10 ** 5\\nli_1 = []\\nli_2 = []\\ncnt1 = 0\\ncnt2 = 0\\nfor i in range(S):\\n\\tli_1.append(li[i])\\n\\tli_2.append(li[i + 1])\\nfor i in range(S):\\n\\tif li_0[i] == li_1[i]:\\n\\t\\tcnt1 += 1\\n\\tif li_0[i] == li_2[i]:\\n\\t\\tcnt2 += 1\\nif cnt1 >= cnt2:\\n\\tprint(S - cnt1)\\nelse:\\n\\tprint(S - cnt2)\\n\", \"s = input()\\na = '10' * 10 ** 5\\nb = '01' * 10 ** 5\\n(aa, bb) = (0, 0)\\nfor i in range(len(s)):\\n\\tif s[i] == a[i]:\\n\\t\\tbb += 1\\n\\telse:\\n\\t\\taa += 1\\nprint(min(aa, bb))\\n\", \"S = str(input())\\nN = len(S)\\ncnt = 0\\nfor i in range(N):\\n\\tif S[0] == '0':\\n\\t\\tif i % 2 == 0 and S[i] != '0':\\n\\t\\t\\tcnt += 1\\n\\t\\telif i % 2 == 1 and S[i] == '0':\\n\\t\\t\\tcnt += 1\\n\\telif i % 2 == 0 and S[i] != '1':\\n\\t\\tcnt += 1\\n\\telif i % 2 == 1 and S[i] == '1':\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"s = input()\\nn = len(s)\\na = s[0::2].count('0')\\nb = s[1::2].count('0')\\nprint(min((n + 1) // 2 - a + b, a + n // 2 - b))\\n\", \"S = input()\\nl = len(S)\\nA = '01' * (l // 2) + '0' * (l % 2)\\nc = 0\\nfor i in range(l):\\n\\tif A[i] == S[i]:\\n\\t\\tc += 1\\nprint(min(c, l - c))\\n\", \"S = list(input())\\ncnt1 = 0\\nfor (i, s) in enumerate(S):\\n\\tif i % 2 == 0:\\n\\t\\tif s != '0':\\n\\t\\t\\tcnt1 += 1\\n\\telif s != '1':\\n\\t\\tcnt1 += 1\\ncnt2 = 0\\nfor (i, s) in enumerate(S):\\n\\tif i % 2 == 0:\\n\\t\\tif s != '1':\\n\\t\\t\\tcnt2 += 1\\n\\telif s != '0':\\n\\t\\tcnt2 += 1\\nprint(min(cnt1, cnt2))\\n\", \"S = input()\\ncount1 = S[::2].count('0') + S[1::2].count('1')\\ncount2 = len(S) - count1\\nprint(min(count1, count2))\\n\", \"S = list(input())\\nn = len(S)\\nlens = n // 2\\nplus = False\\nif n % 2 != 0:\\n\\tplus = True\\ntest1 = '01' * lens\\ntest2 = '10' * lens\\nif plus:\\n\\ttest1 += '0'\\n\\ttest2 += '1'\\n(test1, test2) = (list(test1), list(test2))\\n(count1, count2) = (0, 0)\\nfor i in range(n):\\n\\tif S[i] != test1[i]:\\n\\t\\tcount1 += 1\\n\\tif S[i] != test2[i]:\\n\\t\\tcount2 += 1\\nprint(min(count1, count2))\\n\", \"S = input()\\nans = [0] * 2\\nfor (i, s) in enumerate(S):\\n\\ti %= 2\\n\\tif int(s) == i:\\n\\t\\tans[1] += 1\\n\\telse:\\n\\t\\tans[0] += 1\\nprint(min(ans))\\n\", \"s = input()\\nn = len(s)\\na = sum((i % 2 ^ int(s[i]) for i in range(n)))\\nprint(min(a, n - a))\\n\", \"s = input()\\na = [0] * len(s)\\nprint(len(a) - s[1::2].count('0') - s[::2].count('1') if s[0] == '1' else len(a) - s[1::2].count('1') - s[::2].count('0'))\\n\", \"S = list(map(int, input()))\\nN = len(S)\\nprint(min([sum([(i % 2 - S[i] + m) % 2 for i in range(N)]) for m in range(2)]))\\n\", \"w = list(input())\\nans = 0\\nfor i in range(len(w) - 1):\\n\\tif w[i] == w[i + 1]:\\n\\t\\tif w[i] == '0':\\n\\t\\t\\tw[i + 1] = '1'\\n\\t\\telse:\\n\\t\\t\\tw[i + 1] = '0'\\n\\t\\tans += 1\\nprint(ans)\\n\", \"s = list(map(int, input()))\\no = s[0::2]\\ne = s[1::2]\\na = o.count(0) + e.count(1)\\nb = o.count(1) + e.count(0)\\nprint(min(a, b))\\n\", \"s = input()\\ns1 = []\\ns2 = []\\nans1 = 0\\nans2 = 0\\nfor i in range(len(s)):\\n\\tif i % 2 != 0:\\n\\t\\ts1.append('0')\\n\\telse:\\n\\t\\ts1.append('1')\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\ts2.append('0')\\n\\telse:\\n\\t\\ts2.append('1')\\nfor (x, y) in zip(s, s1):\\n\\tif x != y:\\n\\t\\tans1 += 1\\nfor (x, y) in zip(s, s2):\\n\\tif x != y:\\n\\t\\tans2 += 1\\nprint(min(ans1, ans2))\\n\", \"S = input()\\nodd = S[1::2]\\neven = S[::2]\\nprint(min(odd.count('1') + even.count('0'), even.count('1') + odd.count('0')))\\n\", \"s = input()\\nstart = ['0', '1']\\nans = 10 ** 6\\nfor offset in [0, 1]:\\n\\tnow = 0\\n\\tfor i in range(len(s)):\\n\\t\\tj = (i + offset) % 2\\n\\t\\tif s[i] != start[j]:\\n\\t\\t\\tnow += 1\\n\\tans = min(ans, now)\\nprint(ans)\\n\", \"s = input()\\nl = len(s)\\n(a, b) = ('', '')\\nfor i in range(l):\\n\\tif i % 2 == 0:\\n\\t\\ta += '1'\\n\\t\\tb += '0'\\n\\telse:\\n\\t\\ta += '0'\\n\\t\\tb += '1'\\n(diff_a, diff_b) = (0, 0)\\nfor i in range(l):\\n\\tif a[i] != s[i]:\\n\\t\\tdiff_a += 1\\n\\tif b[i] != s[i]:\\n\\t\\tdiff_b += 1\\nprint(min(diff_a, diff_b))\\n\", \"s = [*input()]\\nn = len(s)\\nt = ['1' if i % 2 == 0 else '0' for i in range(n)]\\nr = [i == j for (i, j) in zip(s, t)]\\nprint(min(sum(r), n - sum(r)))\\n\", \"S = [int(c) for c in input()]\\nT = [i % 2 for i in range(len(S))]\\nq = 0\\nfor (s, t) in zip(S, T):\\n\\tq += s != t\\nprint(min(q, len(S) - q))\\n\", \"s = list(map(int, input()))\\ncnt = 0\\nfor i in range(0, len(s) - 1):\\n\\tif s[i] == s[i + 1]:\\n\\t\\ts[i + 1] = abs(s[i + 1] * 1 - 1)\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"N = list(map(int, list(input())))\\np1 = 0\\np2 = 0\\nflag = 0\\nfor i in N:\\n\\tif i == flag:\\n\\t\\tp1 += 1\\n\\telse:\\n\\t\\tp2 += 1\\n\\tflag = 1 - flag\\nprint(min(p1, p2))\\n\", \"S = input()\\na = 0\\nb = 0\\nfor i in range(len(S)):\\n\\tif int(S[i]) == i % 2:\\n\\t\\ta += 1\\n\\telse:\\n\\t\\tb += 1\\nprint(min(a, b))\\n\", \"s = input()\\nret = [0, 0]\\nfor i in range(len(s)):\\n\\tret[(int(s[i]) + i) % 2] += 1\\nprint(min(ret))\\n\", \"S = input()\\nN = len(S)\\nm = 0\\nfor i in range(N):\\n\\tif int(S[i]) == i % 2:\\n\\t\\tm += 1\\nprint(min(m, N - m))\\n\", \"S = list(input())\\nl = len(S)\\ns = 0\\nfor i in range(l - 1):\\n\\tif S[i] == S[i + 1] and S[i] == '0':\\n\\t\\ts += 1\\n\\t\\tS[i + 1] = '1'\\n\\telif S[i] == S[i + 1] and S[i] == '1':\\n\\t\\ts += 1\\n\\t\\tS[i + 1] = '0'\\nprint(s)\\n\", \"s = input()\\nstart_0 = 0\\nstart_1 = 0\\nfor (i, j) in enumerate(s):\\n\\tif i % 2 == 0 and j == '1':\\n\\t\\tstart_0 += 1\\n\\telif i % 2 != 0 and j == '0':\\n\\t\\tstart_0 += 1\\n\\telif i % 2 == 0 and j == '0':\\n\\t\\tstart_1 += 1\\n\\telif i % 2 != 0 and j == '1':\\n\\t\\tstart_1 += 1\\nprint(min(start_0, start_1))\\n\", \"s = list(input())\\na = s[::2]\\nb = s[1::2]\\nx = a.count('0')\\ny = b.count('0')\\nprint(min(x + len(b) - y, len(a) - x + y))\\n\", \"s = input()\\nn = len(s)\\nl = [0 for _ in range(n)]\\nfor i in range(n):\\n\\tif s[i] == '1':\\n\\t\\tl[i] = 1\\nbrack = [0 if i % 2 == 1 else 1 for i in range(n)]\\nwhite = [1 if i % 2 == 1 else 0 for i in range(n)]\\n(cnt_1, cnt_2) = (0, 0)\\nfor i in range(n):\\n\\tcnt_1 += l[i] ^ brack[i]\\n\\tcnt_2 += l[i] ^ white[i]\\nprint(min(cnt_1, cnt_2))\\n\", \"S = input()\\nc = S[::2].count('0') + S[1::2].count('1')\\nd = S[::2].count('1') + S[1::2].count('0')\\nprint(min(c, d))\\n\", \"S = input()\\nN = len(S)\\neven_1 = S[1::2].count('1')\\nodd_0 = S[::2].count('0')\\nprint(min(even_1 + odd_0, N - even_1 - odd_0))\\n\", \"import sys\\ns = sys.stdin.buffer.readline().rstrip()\\nn = len(s)\\na = 0\\nfor i in range(n):\\n\\ta += s[i] % 2 == i % 2\\nprint(min(a, n - a))\\n\", \"S = input()\\nc = 0\\nx = 0\\nfor i in S:\\n\\tif i == str(c):\\n\\t\\tx += 1\\n\\tc = (c + 1) % 2\\nprint(min(x, len(S) - x))\\n\", \"S = input()\\nN = len(S)\\nc1 = S[1::2].count('0')\\nc2 = S[0::2].count('1')\\nsum1 = N - c1 - c2\\nsum2 = c1 + c2\\nprint(min(sum1, sum2))\\n\", \"S = input()\\nans = 0\\nif S[0] == '0':\\n\\tans += S[0::2].count('1')\\n\\tans += S[1::2].count('0')\\nelse:\\n\\tans += S[0::2].count('0')\\n\\tans += S[1::2].count('1')\\nprint(ans)\\n\", \"S = input()\\nn = len(S)\\nans1 = ('01' * 10 ** 6)[:n]\\nans2 = ('10' * 10 ** 6)[:n]\\ncount = 0\\nfor (i, j) in zip(S, ans1):\\n\\tif i != j:\\n\\t\\tcount += 1\\nprint(min(count, n - count))\\n\", \"result1 = 0\\nS = input()\\nl = len(S)\\nfor i in range(l):\\n\\tif i % 2 == 0:\\n\\t\\tif S[i] == '0':\\n\\t\\t\\tresult1 += 1\\n\\telif S[i] == '1':\\n\\t\\tresult1 += 1\\nprint(min(result1, l - result1))\\n\", \"S = list(input())\\nans1 = 0\\nans2 = 0\\nfor i in range(len(S)):\\n\\tif i % 2 == 0:\\n\\t\\tif S[i] == '0':\\n\\t\\t\\tans1 += 1\\n\\t\\telse:\\n\\t\\t\\tans2 += 1\\n\\telif i % 2 == 1:\\n\\t\\tif S[i] == '0':\\n\\t\\t\\tans2 += 1\\n\\t\\telse:\\n\\t\\t\\tans1 += 1\\nprint(min(ans1, ans2))\\n\", \"S = list(input())\\nf = S[0]\\nc = 0\\nfor i in range(1, len(S)):\\n\\tif i % 2 == 1:\\n\\t\\tif f == S[i]:\\n\\t\\t\\tc += 1\\n\\telif f != S[i]:\\n\\t\\tc += 1\\nprint(c)\\n\", \"(*s,) = map(int, input())\\nn = len(s)\\na = sum(s[::2]) + n // 2 - sum(s[1::2])\\nprint(min(a, n - a))\\n\", \"S = input()\\ns = []\\ntotal = 0\\nfor i in range(len(S)):\\n\\ts.append(int(S[i]))\\nfor i in range(0, len(s) - 1):\\n\\tif s[i] == s[i + 1]:\\n\\t\\ttotal += 1\\n\\t\\ts[i + 1] = abs(1 - s[i])\\nprint(total)\\n\", \"S = input()\\nN = len(S)\\nA = len([i for i in range(N) if str(i % 2) == S[i]])\\nprint(min(A, N - A))\\n\", \"s = list(input())\\ncount = 0\\nfor i in range(1, len(s)):\\n\\tif s[i] == s[i - 1]:\\n\\t\\tcount += 1\\n\\t\\tif s[i] == '1':\\n\\t\\t\\ts[i] = '0'\\n\\t\\telse:\\n\\t\\t\\ts[i] = '1'\\nprint(count)\\n\", \"S = input()\\nA = [1 if i % 2 == 0 else 0 for i in range(len(S))]\\nB = [1 if i % 2 != 0 else 0 for i in range(len(S))]\\nA_cost = 0\\nB_cost = 0\\ni = 0\\nfor i in range(len(S)):\\n\\tif int(S[i]) != A[i]:\\n\\t\\tA_cost += 1\\n\\tif int(S[i]) != B[i]:\\n\\t\\tB_cost += 1\\nprint(min(A_cost, B_cost))\\n\", \"n = input()\\nr = n[0::2].count('0') + n[1::2].count('1')\\nprint(min(r, len(n) - r))\\n\", \"s = input()\\nprint(len(s) - max(s[0::2].count('0') + s[1::2].count('1'), s[0::2].count('1') + s[1::2].count('0')))\\n\", \"s = input()\\nn = len(s)\\ng = s[::2].count('0')\\nk = s[1::2].count('1')\\nprint(min(g + k, n - g - k))\\n\", \"s = input()\\nn = len(s)\\ntemp = len([i for i in range(n) if int(s[i]) == i % 2])\\nprint(min(temp, n - temp))\\n\", \"s = input()\\nn1 = s[::2].count('0') + s[1::2].count('1')\\nn2 = s[::2].count('1') + s[1::2].count('0')\\nprint(min(n1, n2))\\n\", \"(*S,) = map(int, input())\\n(f, g) = (S[::2], S[1::2])\\nu = sum(f) - sum(g)\\nprint(min(len(g) + u, len(f) - u))\\n\", \"s = list(input())\\nr1 = 0\\nr2 = 0\\nfor (ii, ss) in enumerate(s):\\n\\tif ii % 2 == 0:\\n\\t\\tif ss == '0':\\n\\t\\t\\tr1 += 1\\n\\t\\telse:\\n\\t\\t\\tr2 += 1\\n\\telif ss == '1':\\n\\t\\tr1 += 1\\n\\telse:\\n\\t\\tr2 += 1\\nprint(min(r1, r2))\\n\", \"S = [int(i) for i in input()]\\nprint(min(S[0::2].count(0) + S[1::2].count(1), S[0::2].count(1) + S[1::2].count(0)))\\n\", \"S = input()\\nSE = S[::2]\\nSO = S[1::2]\\nprint(min(SE.count('1') + SO.count('0'), SE.count('0') + SO.count('1')))\\n\", \"n = input()\\nn1 = n[::2]\\nn2 = n[1::2]\\nnc = n1.count('0') + n2.count('1')\\nprint(min(nc, len(n) - nc))\\n\", \"s = input()\\nn = len(s)\\n(x, y) = (0, 0)\\nfor i in range(n):\\n\\tif i % 2 == 0:\\n\\t\\tif s[i] == '0':\\n\\t\\t\\ty += 1\\n\\t\\telse:\\n\\t\\t\\tx += 1\\n\\telif s[i] == '0':\\n\\t\\tx += 1\\n\\telse:\\n\\t\\ty += 1\\nprint(min(x, y))\\n\", \"s = input()\\ncanw = 0\\ncanb = 0\\nfor i in range(len(s)):\\n\\tif i % 2 == 1:\\n\\t\\tif s[i] == '1':\\n\\t\\t\\tcanw += 1\\n\\t\\telse:\\n\\t\\t\\tcanb += 1\\n\\telif i % 2 == 0:\\n\\t\\tif s[i] == '1':\\n\\t\\t\\tcanb += 1\\n\\t\\telse:\\n\\t\\t\\tcanw += 1\\nprint(min(canb, canw))\\n\", \"s = input()\\ns = list(s)\\nc = 0\\nfor i in range(0, len(s), 2):\\n\\tif s[i] == '0':\\n\\t\\tc += 1\\nfor i in range(1, len(s), 2):\\n\\tif s[i] == '1':\\n\\t\\tc += 1\\nd = 0\\nfor i in range(0, len(s), 2):\\n\\tif s[i] == '1':\\n\\t\\td += 1\\nfor i in range(1, len(s), 2):\\n\\tif s[i] == '0':\\n\\t\\td += 1\\nprint(min(c, d))\\n\", \"S = [int(x) for x in list(input())]\\nbw = [0, 1]\\nwb = [1, 0]\\nans1 = 0\\nans2 = 0\\nfor i in range(len(S)):\\n\\tif S[i] != bw[i % 2]:\\n\\t\\tans1 += 1\\n\\tif S[i] != wb[i % 2]:\\n\\t\\tans2 += 1\\nprint(min(ans1, ans2))\\n\", \"s = [int(x) for x in list(input())]\\nx = len(s)\\ny = [0 if i % 2 == 0 else 1 for i in range(x)]\\nz = [1 if i % 2 == 0 else 0 for i in range(x)]\\ncount1 = 0\\ncount2 = 0\\nans1 = list(zip(s, y))\\nans2 = list(zip(s, z))\\nfor a in ans1:\\n\\tif a[0] != a[1]:\\n\\t\\tcount1 += 1\\nfor a in ans2:\\n\\tif a[0] != a[1]:\\n\\t\\tcount2 += 1\\nprint(min(count1, count2))\\n\", \"s = input()\\nl = len(s)\\nt = 0\\nfor i in range(l):\\n\\tt = t + (int(s[i]) * 2 - 1) * (-1) ** i\\nif t < 0:\\n\\tt = -t\\nprint(int((l - t) / 2))\\n\", \"S = input()\\nN = S[::2].count('0') + S[1::2].count('1')\\nprint(min(N, len(S) - N))\\n\", \"S = str(input())\\nc = 0\\nfor (i, s) in enumerate(S):\\n\\tc += ord(s) - ord('0') ^ i % 2\\nprint(min(c, len(S) - c))\\n\", \"s = input()\\nprint(s[0::2].count(str(1 - int(s[0]))) + s[1::2].count(s[0]))\\n\", \"S = input()\\nn = len(S)\\nprint(min(sum((x != y for (x, y) in zip(S, ('01' * (n // 2 + 1))[:n]))), sum((x != y for (x, y) in zip(S, ('10' * (n // 2 + 1))[:n])))))\\n\", \"S = input()\\ncount = 0\\nfor i in range(len(S)):\\n\\tif i % 2 == 0:\\n\\t\\tif S[i] == '0':\\n\\t\\t\\tcount += 1\\n\\telif S[i] == '1':\\n\\t\\tcount += 1\\nprint(min(len(S) - count, count))\\n\", \"s = input()\\nprint(min(sum([s[0::2].count('1'), s[1::2].count('0')]), sum([s[0::2].count('0'), s[1::2].count('1')])))\\n\", \"S = list(input())\\nctr = S[::2].count('0') + S[1::2].count('1')\\nanswer = min(ctr, len(S) - ctr)\\nprint(answer)\\n\", \"import os\\nimport sys\\n\\ndef main():\\n\\tS = input()\\n\\tans_1 = 0\\n\\tans_2 = 0\\n\\tfor (i, s) in enumerate(S):\\n\\t\\tif i % 2 == 0 and s == '1':\\n\\t\\t\\tans_1 += 1\\n\\t\\telif i % 2 == 1 and s == '0':\\n\\t\\t\\tans_1 += 1\\n\\t\\tif i % 2 == 0 and s == '0':\\n\\t\\t\\tans_2 += 1\\n\\t\\telif i % 2 == 1 and s == '1':\\n\\t\\t\\tans_2 += 1\\n\\tprint(min(ans_1, ans_2))\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"c = list(input())\\na = c[::2]\\nb = c[1::2]\\nprint(min(a.count('0') + b.count('1'), a.count('1') + b.count('0')))\\n\", \"s = input()\\nl1 = s[::2]\\nl2 = s[1::2]\\nc1 = l1.count('0') + l2.count('1')\\nc2 = l1.count('1') + l2.count('0')\\nprint(min(c1, c2))\\n\", \"s = list(input())\\ncount = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == s[i + 1] and s[i] == '0':\\n\\t\\ts[i + 1] = '1'\\n\\t\\tcount += 1\\n\\telif s[i] == s[i + 1] and s[i] == '1':\\n\\t\\ts[i + 1] = '0'\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tpass\\nprint(count)\\n\", \"S = input()\\nb = 1\\nB = 0\\nfor i in S:\\n\\tif i != str(b):\\n\\t\\tB += 1\\n\\tb = 1 - b\\nl = len(S)\\nprint(min(B, l - B))\\n\", \"n = input()\\nprint(min(n[0::2].count('0') + n[1::2].count('1'), n[0::2].count('1') + n[1::2].count('0')))\\n\", \"s = input()\\ncnt = s[::2].count('0') + s[1::2].count('1')\\nprint(min(cnt, len(s) - cnt))\\n\", \"a = list(input())\\ns = 0\\nfor i in range(len(a)):\\n\\tif i % 2 == int(a[i]):\\n\\t\\ts = s + 1\\nm = min(s, len(a) - s)\\nprint(m)\\n\", \"S = input()\\n(a, c) = (0, True)\\nfor i in range(len(S)):\\n\\tif int(S[i]) != c:\\n\\t\\ta += 1\\n\\tc = not c\\nprint(min(a, len(S) - a))\\n\", \"S = input()\\nchecker = '01' * 100001\\nkeep1 = checker[:len(S)]\\nkeep2 = checker[1:len(S) + 1]\\nans_1 = 0\\nans_2 = 0\\nfor i in range(len(S)):\\n\\tif S[i] != keep1[i]:\\n\\t\\tans_1 += 1\\n\\telse:\\n\\t\\tans_2 += 1\\nprint(min(ans_1, ans_2))\\n\", \"s = input()\\nn = len(s)\\ns0 = '01' * (n // 2)\\ns1 = '10' * (n // 2)\\nif n % 2 == 1:\\n\\ts0 += '0'\\n\\ts1 += '1'\\na0 = 0\\na1 = 0\\nfor i in range(n):\\n\\tif s[i] != s0[i]:\\n\\t\\ta0 += 1\\n\\tif s[i] != s1[i]:\\n\\t\\ta1 += 1\\nprint(min(a0, a1))\\n\", \"import copy\\nS = input()\\nListS = list(S)\\nrevListS = copy.deepcopy(ListS)\\nnorm = 0\\nrev = 0\\nN = len(ListS)\\nfor i in range(1, N):\\n\\tif ListS[i] == ListS[i - 1]:\\n\\t\\tListS[i] = str(abs(int(ListS[i]) - 1))\\n\\t\\tnorm += 1\\n\\tif revListS[N - i - 1] == revListS[N - i]:\\n\\t\\trevListS[N - i - 1] = str(abs(int(revListS[N - i - 1]) - 1))\\n\\t\\trev += 1\\nres = min(norm, rev)\\nprint(res)\\n\", \"h = str(input())\\nr = 0\\nfor (i, x) in enumerate(h):\\n\\tif i % 2 != int(x):\\n\\t\\tr += 1\\nprint(min(r, len(h) - r))\\n\", \"S = input()\\nres1 = S[::2].count('0') + S[1::2].count('1')\\nres2 = S[1::2].count('0') + S[::2].count('1')\\nprint(min(res1, res2))\\n\", \"s = input()\\nptn1 = s[::2].count('0') + s[1::2].count('1')\\nptn2 = s[::2].count('1') + s[1::2].count('0')\\nprint(min(ptn1, ptn2))\\n\", \"S = input()\\na = S[::2]\\nb = S[1::2]\\nA = a.count('0') + b.count('1')\\nprint(min(A, len(S) - A))\\n\", \"S = input()\\nt = S[0::2].count('0') + S[1::2].count('1')\\nprint(min(t, len(S) - t))\\n\", \"s = input()\\nn = len(s)\\ncount = 0\\nfor i in range(n):\\n\\tcount += int(int(s[i]) != i % 2)\\nprint(min(count, n - count))\\n\", \"s = input()\\nn = len(s)\\nres1 = 0\\nres2 = 0\\nfor i in range(n):\\n\\tif i % 2 == 0:\\n\\t\\tif s[i] == '0':\\n\\t\\t\\tres1 += 1\\n\\t\\telse:\\n\\t\\t\\tres2 += 1\\n\\telif s[i] == '1':\\n\\t\\tres1 += 1\\n\\telse:\\n\\t\\tres2 += 1\\nprint(min(res1, res2))\\n\", \"S = input()\\nleft = S[0]\\nans = 0\\nfor i in range(1, len(S)):\\n\\tif left == '1' and S[i] == '1':\\n\\t\\tleft = '0'\\n\\t\\tans += 1\\n\\t\\tcontinue\\n\\telif left == '0' and S[i] == '0':\\n\\t\\tleft = '1'\\n\\t\\tans += 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tleft = S[i]\\nprint(ans)\\n\", \"S = input()\\neven = S[0::2].count('0') + S[1::2].count('1')\\nprint(min([even, len(S) - even]))\\n\", \"s = input()\\nb = c = 0\\nfor i in s:\\n\\tc += int(i) == b\\n\\tb ^= 1\\nprint(min(c, len(s) - c))\\n\", \"s = input()\\nc1 = s[::2].count('1')\\nc2 = s[1::2].count('0')\\ntotal = c1 + c2\\nprint(min(total, len(s) - total))\\n\", \"S = input()\\ns = int(S[0])\\nprint(sum((1 for i in range(len(S)) if (i + s) % 2 != int(S[i]))))\\n\", \"S = input()\\ncnt1 = 0\\ncnt2 = 0\\nfor i in range(len(S)):\\n\\tif i % 2:\\n\\t\\tif S[i] != '1':\\n\\t\\t\\tcnt1 += 1\\n\\t\\tif S[i] != '0':\\n\\t\\t\\tcnt2 += 1\\n\\telse:\\n\\t\\tif S[i] != '0':\\n\\t\\t\\tcnt1 += 1\\n\\t\\tif S[i] != '1':\\n\\t\\t\\tcnt2 += 1\\nans = min(cnt1, cnt2)\\nprint(ans)\\n\", \"S = list(input())\\nprint(len(S) - max(S[1::2].count('0') + S[0::2].count('1'), S[1::2].count('1') + S[0::2].count('0')))\\n\", \"s = input()\\ni = 0\\nans = 0\\nwhile i < len(s):\\n\\tif int(s[i]) == i % 2:\\n\\t\\tans += 1\\n\\ti += 1\\nprint(min(ans, i - ans))\\n\", \"s = [int(i) for i in input()]\\nans = 0\\nfor i in range(1, len(s)):\\n\\tans += s[~-i] == s[i]\\n\\ts[i] = not s[~-i]\\nprint(ans)\\n\", \"S = input()\\nans = 0\\nflag = 0\\nfor i in S:\\n\\tif int(i) == flag:\\n\\t\\tans += 1\\n\\tflag = abs(flag - 1)\\nprint(min(ans, len(S) - ans))\\n\", \"(str10, str01) = ('', '')\\nfor i in range(5 * 10 ** 4 + 1):\\n\\tstr10 += '10'\\n\\tstr01 += '01'\\ns = str(input())\\nlen_s = len(s)\\nstr10 = str10[:len_s]\\nstr01 = str01[:len_s]\\n(cnt10, cnt01) = (0, 0)\\nfor i in range(len_s):\\n\\tif s[i] != str10[i]:\\n\\t\\tcnt10 += 1\\n\\tif s[i] != str01[i]:\\n\\t\\tcnt01 += 1\\nprint(min(cnt10, cnt01))\\n\", \"S = input()\\nans1 = S[::2].count('1') + S[1::2].count('0')\\nans2 = S[::2].count('0') + S[1::2].count('1')\\nprint(min(ans1, ans2))\\n\", \"S = input()\\nc = S[::2].count('1')\\nc += S[1::2].count('0')\\nif c > len(S) / 2:\\n\\tc = len(S) - c\\nprint(c)\\n\", \"s = input()\\n(b, w) = (0, 0)\\nfor i in range(len(s)):\\n\\tif i % 2 == 0:\\n\\t\\tif s[i] == '0':\\n\\t\\t\\tw += 1\\n\\t\\telse:\\n\\t\\t\\tb += 1\\n\\telif s[i] == '0':\\n\\t\\tb += 1\\n\\telse:\\n\\t\\tw += 1\\nprint(min(b, w))\\n\", \"import copy\\nS = list(input())\\nS_ = copy.deepcopy(S)\\nN = len(S)\\nans = N\\ncnt = 0\\nfor i in range(N - 1):\\n\\tif S[i] == S[i + 1]:\\n\\t\\tcnt += 1\\n\\t\\tif S[i + 1] == '0':\\n\\t\\t\\tS[i + 1] = '1'\\n\\t\\telse:\\n\\t\\t\\tS[i + 1] = '0'\\nprint(min(cnt, ans))\\n\", \"a = input()\\nb = int(len(a))\\nc = 0\\nd = 0\\nif b % 2 == 0:\\n\\tfor i in range(b // 2):\\n\\t\\tif a[2 * i] == '1':\\n\\t\\t\\tc = c + 1\\n\\t\\tif a[2 * i + 1] == '0':\\n\\t\\t\\tc = c + 1\\n\\tfor i in range(b // 2):\\n\\t\\tif a[2 * i] == '0':\\n\\t\\t\\td = d + 1\\n\\t\\tif a[2 * i + 1] == '1':\\n\\t\\t\\td = d + 1\\n\\tif c > d:\\n\\t\\tprint(d)\\n\\telse:\\n\\t\\tprint(c)\\nif b % 2 == 1:\\n\\tfor i in range(b // 2):\\n\\t\\tif a[2 * i] == '1':\\n\\t\\t\\tc = c + 1\\n\\t\\tif a[2 * i + 1] == '0':\\n\\t\\t\\tc = c + 1\\n\\tif a[-1] == '1':\\n\\t\\tc = c + 1\\n\\tfor i in range(b // 2):\\n\\t\\tif a[2 * i] == '0':\\n\\t\\t\\td = d + 1\\n\\t\\tif a[2 * i + 1] == '1':\\n\\t\\t\\td = d + 1\\n\\tif a[-1] == '0':\\n\\t\\td = d + 1\\n\\tif c > d:\\n\\t\\tprint(d)\\n\\telse:\\n\\t\\tprint(c)\\n\", \"S = input()\\nL = len(S)\\nc = 0\\nj = 0\\nfor i in range(L):\\n\\tc += abs(j - int(S[i]))\\n\\tj ^= 1\\nprint(min(c, L - c))\\n\", \"Sarr = tuple(map(int, list(input())))\\nx = 0\\nc = 0\\nfor i in Sarr:\\n\\tc += x ^ i\\n\\tx = x ^ 1\\nprint(min(len(Sarr) - c, c))\\n\", \"S = input()\\nN = len(S)\\ncnt_1 = 0\\ncnt_2 = 0\\nfor i in range(N):\\n\\tif i % 2 == 0:\\n\\t\\tif S[i] == '0':\\n\\t\\t\\tcnt_1 += 1\\n\\telif S[i] == '1':\\n\\t\\tcnt_1 += 1\\nfor j in range(N):\\n\\tif j % 2 == 0:\\n\\t\\tif S[j] == '1':\\n\\t\\t\\tcnt_2 += 1\\n\\telif S[j] == '0':\\n\\t\\tcnt_2 += 1\\nprint(min(cnt_1, cnt_2))\\n\", \"import sys\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\ndef resolve():\\n\\tS = input().rstrip()\\n\\tn = len(S)\\n\\tres1 = res2 = 0\\n\\tfor i in range(n):\\n\\t\\tif i % 2 == 0:\\n\\t\\t\\tif S[i] == '0':\\n\\t\\t\\t\\tres1 += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tres2 += 1\\n\\t\\telif S[i] == '1':\\n\\t\\t\\tres1 += 1\\n\\t\\telse:\\n\\t\\t\\tres2 += 1\\n\\tprint(min(res1, res2))\\n\\ndef __starting_point():\\n\\tresolve()\\n__starting_point()\\n\", \"S = list(input())\\ncnt = 0\\nfor i in range(len(S) - 1):\\n\\tif S[i] == S[i + 1] == '0':\\n\\t\\tS[i + 1] = '1'\\n\\t\\tcnt += 1\\n\\telif S[i] == S[i + 1] == '1':\\n\\t\\tS[i + 1] = '0'\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tpass\\nprint(cnt)\\n\", \"s = input()\\nh = s[::2].count('1') + s[1::2].count('0')\\nprint(min(h, len(s) - h))\\n\", \"S = input()\\nc = 0\\nl = len(S)\\nfor i in range(l):\\n\\tif S[i] == str(i % 2):\\n\\t\\tc += 1\\nprint(min(c, l - c))\\n\", \"s = input()\\nresult = 10 ** 9\\ntmp = 0\\nfor (i, c) in enumerate(s):\\n\\tif i & 1:\\n\\t\\tif c == '0':\\n\\t\\t\\ttmp += 1\\n\\telif c == '1':\\n\\t\\ttmp += 1\\nresult = min(result, tmp)\\ntmp = 0\\nfor (i, c) in enumerate(s):\\n\\tif i & 1:\\n\\t\\tif c == '1':\\n\\t\\t\\ttmp += 1\\n\\telif c == '0':\\n\\t\\ttmp += 1\\nresult = min(result, tmp)\\nprint(result)\\n\", \"s = [int(x) for x in input()]\\ns1 = s[::2]\\ns0 = s[1::2]\\nprint(min(len(s1) - sum(s1) + sum(s0), len(s0) - sum(s0) + sum(s1)))\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"000\\n\", \"10010010\\n\", \"0\\n\", \"\\nn\", \"\\n\", \"\\nnnnn\", \"1\\n\", \"\\n\", \"\\nnn\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"10110010\", \"010\", \"10110110\", \"00110110\", \"100\", \"10100110\", \"01110110\", \"01110111\", \"10011010\", \"1\", \"10111010\", \"10100111\", \"10100010\", \"01100110\", \"01100111\", \"101\", \"10111000\", \"10100101\", \"10100011\", \"00110111\", \"011\", \"10011000\", \"00110101\", \"111\", \"00011000\", \"00111101\", \"00011101\", \"00111111\", \"00111001\", \"10000010\", \"10111110\", \"10010110\", \"00010110\", \"11110110\", \"01111111\", \"10011011\", \"10110011\", \"10110111\", \"10000111\", \"11100110\", \"11100111\", \"11111010\", \"10100100\", \"00110011\", \"10011100\", \"00110001\", \"00011001\", \"10111101\", \"01111101\", \"00011111\", \"10001010\", \"10010000\", \"00010111\", \"01110100\", \"01111011\", \"10011001\", \"10010011\", \"00010010\", \"01000111\", \"11100010\", \"11000110\", \"11111110\", \"10100001\", \"00100001\", \"10001100\", \"01110011\", \"00011011\", \"01111100\", \"10101010\", \"00011110\", \"01110000\", \"01110101\", \"10001001\", \"11011010\", \"01011010\", \"01000101\", \"11110010\", \"11001110\", \"11101110\", \"10101001\", \"10000100\", \"01100011\", \"00110100\", \"01111110\", \"10101110\", \"00011100\", \"01110010\", \"00010101\", \"10001011\", \"11011000\", \"01000001\", \"11001111\", \"10110001\", \"00000100\", \"01110001\", \"00110000\", \"10101111\", \"01011101\", \"11001010\", \"11001000\", \"10010010\", \"0\", \"000\"], \"outputs\": [\"1\\n\", \"3\\n\", \"0\\n\", \"30257\\n\", \"23795\\n\", \"49959\\n\", \"49995\\n\", \"50000\\n\", \"50000\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"50000\\n\", \"50000\\n\", \"49999\\n\", \"49999\\n\", \"9380\\n\", \"6874\\n\", \"9785\\n\", \"7349\\n\", \"2\\n\", \"0\\n\", \"3\\n\", \"4\\n\", \"1\\n\", \"2\\n\", \"3\\n\", \"2\\n\", \"2\\n\", \"0\\n\", \"1\\n\", \"3\\n\", \"1\\n\", \"4\\n\", \"3\\n\", \"0\\n\", \"2\\n\", \"4\\n\", \"2\\n\", \"3\\n\", \"1\\n\", \"3\\n\", \"2\\n\", \"1\\n\", \"4\\n\", \"3\\n\", \"2\\n\", \"4\\n\", \"4\\n\", \"2\\n\", \"2\\n\", \"4\\n\", \"3\\n\", \"4\\n\", \"3\\n\", \"3\\n\", \"3\\n\", \"4\\n\", \"4\\n\", \"3\\n\", \"4\\n\", \"2\\n\", \"3\\n\", \"4\\n\", \"4\\n\", \"3\\n\", \"3\\n\", \"4\\n\", \"2\\n\", \"3\\n\", \"1\\n\", \"4\\n\", \"2\\n\", \"2\\n\", \"4\\n\", \"4\\n\", \"4\\n\", \"4\\n\", \"2\\n\", \"2\\n\", \"4\\n\", \"3\\n\", \"3\\n\", \"4\\n\", \"3\\n\", \"3\\n\", \"4\\n\", \"3\\n\", \"0\\n\", \"4\\n\", \"3\\n\", \"1\\n\", \"3\\n\", \"3\\n\", \"4\\n\", \"1\\n\", \"3\\n\", \"3\\n\", \"2\\n\", \"2\\n\", \"4\\n\", \"4\\n\", \"3\\n\", \"4\\n\", \"1\\n\", \"3\\n\", \"4\\n\", \"1\\n\", \"2\\n\", \"4\\n\", \"2\\n\", \"4\\n\", \"4\\n\", \"3\\n\", \"2\\n\", \"4\\n\", \"2\\n\", \"1\\n\", \"2\\n\", \"3\\n\", \"3\", \"0\", \"1\"]}",
    "difficulty": "EASY",
    "raw_tags": "[]",
    "name": "AtCoder Beginner Contest 124 - Coloring Colorfully",
    "source": "atcoder",
    "tags": "[]",
    "skill_types": "[]",
    "url": "https://atcoder.jp/contests/abc124/tasks/abc124_c",
    "Expected Auxiliary Space": null,
    "time_limit": "2.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "1024.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N, and a positive integer K.\nFind the number of non-empty contiguous subsequences in A such that the remainder when dividing the sum of its elements by K is equal to the number of its elements. We consider two subsequences different if they are taken from different positions, even if they are equal sequences.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq K \\leq 10^9\n - 1 \\leq A_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint the number of subsequences that satisfy the condition.\n\n-----Sample Input-----\n5 4\n1 4 2 3 5\n\n-----Sample Output-----\n4\n\nFour sequences satisfy the condition: (1), (4,2), (1,4,2), and (5).",
    "solutions": "[\"import sys\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nread = sys.stdin.read\\n(N, K, *A) = map(int, read().split())\\na = list(accumulate([0] + A))\\na = [(a[i] - i) % K for i in range(N + 1)]\\nanswer = 0\\ndic = defaultdict(int)\\nfor (i, x) in enumerate(a):\\n\\tanswer += dic[x]\\n\\tdic[x] += 1\\n\\tif i >= K - 1:\\n\\t\\tdic[a[i - K + 1]] -= 1\\nprint(answer)\\n\", \"from collections import defaultdict\\nfrom itertools import accumulate\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = list(accumulate([0] + a))\\nb = [(s[i] - i) % k for i in range(n + 1)]\\nd = defaultdict(int)\\nfor i in range(min(k - 1, n + 1)):\\n\\td[b[i]] += 1\\nans = 0\\nfor i in range(n):\\n\\td[b[i]] -= 1\\n\\tif i + k - 1 <= n:\\n\\t\\td[b[i + k - 1]] += 1\\n\\tans += d[b[i]]\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] + list(accumulate(A))\\nS = [s % K for s in S]\\nans = 0\\ncounter = defaultdict(int)\\nqueue = []\\nfor (i, s) in enumerate(S):\\n\\tt = (s - i) % K\\n\\tans += counter[t]\\n\\tcounter[t] += 1\\n\\tqueue.append(t)\\n\\tif len(queue) >= K:\\n\\t\\tcounter[queue[0]] -= 1\\n\\t\\tqueue.pop(0)\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\ncum = [0] * (N + 1)\\nfor i in range(1, N + 1):\\n\\tcum[i] = cum[i - 1] + A[i - 1]\\nans = 0\\ndic = defaultdict(int)\\nv_by_indx = defaultdict(int)\\nfor i in range(N + 1):\\n\\tif i - K >= 0:\\n\\t\\tdic[v_by_indx[i - K]] -= 1\\n\\tdiff = (cum[i] - i) % K\\n\\tans += dic[diff]\\n\\tdic[diff] += 1\\n\\tv_by_indx[i] = diff\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(lambda x: (int(x) - 1) % k, input().split()))\\ns = [0]\\nfor i in a:\\n\\ts.append((s[-1] + i) % k)\\nmp = {}\\nans = 0\\nfor i in range(len(s)):\\n\\tif i - k >= 0:\\n\\t\\tmp[s[i - k]] -= 1\\n\\tif s[i] in mp:\\n\\t\\tans += mp[s[i]]\\n\\tif s[i] in mp:\\n\\t\\tmp[s[i]] += 1\\n\\telse:\\n\\t\\tmp[s[i]] = 1\\nprint(ans)\\n\", \"from collections import deque\\nfrom collections import defaultdict\\n\\ndef p_e():\\n\\t(n, k) = map(int, input().split())\\n\\ta = [0] + list(map(int, input().split()))\\n\\tfor i in range(n):\\n\\t\\ta[i + 1] = (a[i + 1] + a[i] - 1) % k\\n\\td = defaultdict(int)\\n\\td[0] = 1\\n\\tq = deque()\\n\\tans = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i - k >= 0:\\n\\t\\t\\td[a[i - k]] -= 1\\n\\t\\tans += d[a[i]]\\n\\t\\td[a[i]] += 1\\n\\tprint(ans)\\np_e()\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\na = [0]\\nfor i in A:\\n\\ta.append((a[-1] + i - 1) % K)\\nd = defaultdict(int)\\nans = 0\\nfor i in range(N + 1):\\n\\tif i >= K:\\n\\t\\td[a[i - K]] -= 1\\n\\tans += d[a[i]]\\n\\td[a[i]] += 1\\nprint(ans)\\n\", \"import sys\\n\\ndef main():\\n\\tinput = sys.stdin.readline\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\taccum = [0] * n\\n\\taccum[0] = a[0]\\n\\td = dict()\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\taccum[i] += a[i] + accum[i - 1]\\n\\taccum = [0] + accum\\n\\tfor j in range(n + 1):\\n\\t\\tif j - k >= 0:\\n\\t\\t\\td[(accum[j - k] - (j - k)) % k] -= 1\\n\\t\\tif (accum[j] - j) % k not in d:\\n\\t\\t\\td[(accum[j] - j) % k] = 1\\n\\t\\telse:\\n\\t\\t\\tans += d[(accum[j] - j) % k]\\n\\t\\t\\td[(accum[j] - j) % k] += 1\\n\\treturn print(ans)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nB = [a % K for a in A]\\ncs = [0]\\nfor b in B:\\n\\tc = (cs[-1] + b - 1) % K\\n\\tcs.append(c)\\nfrom collections import deque\\nfrom collections import defaultdict\\nqs = defaultdict(lambda : deque())\\nans = 0\\nfor (i, c) in enumerate(cs):\\n\\twhile qs[c] and qs[c][0] + K <= i:\\n\\t\\tqs[c].popleft()\\n\\tans += len(qs[c])\\n\\tqs[c].append(i)\\nprint(ans)\\n\", \"from collections import defaultdict\\n\\ndef main():\\n\\t(N, K) = map(int, input().split())\\n\\tA = list(map(int, input().split()))\\n\\tX = [0] * (N + 1)\\n\\tfor (i, a) in enumerate(A):\\n\\t\\tX[i + 1] = (X[i] + a - 1) % K\\n\\tcnt = defaultdict(int)\\n\\tans = 0\\n\\tfor i in range(N + 1):\\n\\t\\tif i >= K:\\n\\t\\t\\tcnt[X[i - K]] -= 1\\n\\t\\tans += cnt[X[i]]\\n\\t\\tcnt[X[i]] += 1\\n\\tprint(ans)\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nr = 0\\ns = {0: [0]}\\nfor i in range(n):\\n\\tr = (r + a[i] - 1) % k\\n\\tif r in s:\\n\\t\\ts[r].append(i + 1)\\n\\telse:\\n\\t\\ts[r] = [i + 1]\\nret = 0\\nfor key in s:\\n\\ta = s[key]\\n\\ten = 0\\n\\tfor st in range(len(a)):\\n\\t\\twhile en < len(a) and a[en] - a[st] < k:\\n\\t\\t\\ten += 1\\n\\t\\tret += en - st - 1\\nprint(ret)\\n\", \"from itertools import accumulate\\n(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] + list(accumulate(A))\\nR = [(S[i] - i) % k for i in range(n + 1)]\\nr_dict = {}\\nans = 0\\nfor i in range(n + 1):\\n\\tif R[i] in r_dict:\\n\\t\\tans += r_dict[R[i]]\\n\\t\\tr_dict[R[i]] += 1\\n\\telse:\\n\\t\\tr_dict[R[i]] = 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tr_dict[R[i - k + 1]] -= 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import Counter\\n(N, K, *A) = map(int, open(0).read().split())\\nS = [0] + [a % K for a in accumulate((a - 1 for a in A))]\\nC = Counter()\\nans = 0\\nfor (i, s) in enumerate(S):\\n\\tans += C[s]\\n\\tC[s] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tC[S[i - K + 1]] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict, Counter\\nfrom itertools import product, groupby, count, permutations, combinations\\nfrom math import pi, sqrt\\nfrom collections import deque\\nfrom bisect import bisect, bisect_left, bisect_right\\nfrom string import ascii_lowercase\\nfrom functools import lru_cache\\nimport sys\\nsys.setrecursionlimit(10000)\\nINF = float('inf')\\n(YES, Yes, yes, NO, No, no) = ('YES', 'Yes', 'yes', 'NO', 'No', 'no')\\n(dy4, dx4) = ([0, 1, 0, -1], [1, 0, -1, 0])\\n(dy8, dx8) = ([0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1])\\n\\ndef inside(y, x, H, W):\\n\\treturn 0 <= y < H and 0 <= x < W\\n\\ndef ceil(a, b):\\n\\treturn (a + b - 1) // b\\n\\ndef sum_of_arithmetic_progression(s, d, n):\\n\\treturn n * (2 * s + (n - 1) * d) // 2\\n\\ndef gcd(a, b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\treturn gcd(b, a % b)\\n\\ndef lcm(a, b):\\n\\tg = gcd(a, b)\\n\\treturn a / g * b\\n\\ndef solve():\\n\\t(N, K) = list(map(int, input().split()))\\n\\tA = list(map(int, input().split()))\\n\\tif K == 1:\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tdp = [0]\\n\\tfor i in range(N):\\n\\t\\tdp.append(dp[-1] + (A[i] - 1))\\n\\tdp = [d % K for d in dp]\\n\\tans = 0\\n\\td = defaultdict(int)\\n\\td[0] = 1\\n\\tfor i in range(1, N + 1):\\n\\t\\tans += d[dp[i]]\\n\\t\\td[dp[i]] += 1\\n\\t\\tif i - K + 1 >= 0:\\n\\t\\t\\td[dp[i - K + 1]] -= 1\\n\\tprint(ans)\\n\\ndef main():\\n\\tsolve()\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"from collections import defaultdict\\n\\ndef main():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tacca = [0]\\n\\tfor _a in a:\\n\\t\\tacca.append(acca[-1] + _a)\\n\\tans = 0\\n\\tcnt = defaultdict(lambda : 0)\\n\\tfor (i, ac) in enumerate(acca):\\n\\t\\tans += cnt[(ac - i) % k]\\n\\t\\tcnt[(ac - i) % k] += 1\\n\\t\\tif i >= k - 1:\\n\\t\\t\\tcnt[(acca[i - k + 1] - (i - k + 1)) % k] -= 1\\n\\tprint(ans)\\nmain()\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\nfrom collections import defaultdict\\n\\ndef main():\\n\\t(N, K) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\td = defaultdict(int)\\n\\tcum = [0]\\n\\tfor i in range(N):\\n\\t\\tcum.append((cum[-1] + a[i] - 1) % K)\\n\\tans = 0\\n\\tfor i in range(N + 1):\\n\\t\\tans += d[cum[i]]\\n\\t\\td[cum[i]] += 1\\n\\t\\tif i >= K - 1:\\n\\t\\t\\td[cum[i - K + 1]] -= 1\\n\\tprint(ans)\\nmain()\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nDP = dict()\\nif K == 1:\\n\\tprint(0)\\n\\texit()\\nDP[0] = 1\\nP = 0\\nY = [0] * (N + 1)\\nfor i in range(N):\\n\\tY[i + 1] = (Y[i] + A[i] - 1) % K\\n\\tP += DP.get(Y[i + 1], 0)\\n\\tDP[Y[i + 1]] = DP.get(Y[i + 1], 0) + 1\\n\\tif i >= K - 2:\\n\\t\\tDP[Y[i - K + 2]] -= 1\\nprint(P)\\n\", \"def shaku(K, lists):\\n\\tans = 0\\n\\tSUMS = 0\\n\\tindex = 0\\n\\tfor l in range(len(lists)):\\n\\t\\twhile index < l or (index < len(lists) and SUMS + lists[index] < K):\\n\\t\\t\\tSUMS += lists[index]\\n\\t\\t\\tindex += 1\\n\\t\\tans += index - l\\n\\t\\tSUMS -= lists[l]\\n\\treturn ans\\n(n, k) = map(int, input().split())\\nlists = list(map(int, input().split()))\\nuselist = [0 for i in range(n + 1)]\\nfor i in range(n):\\n\\tuselist[i + 1] = uselist[i] + lists[i]\\nanslist = [0 for i in range(n + 1)]\\nfor j in range(1, n + 1):\\n\\tanslist[j] = (uselist[j] - j) % k\\ndic = {}\\nfor i in range(n + 1):\\n\\tif anslist[i] in dic.keys():\\n\\t\\tdic[anslist[i]].append(i + 1)\\n\\telse:\\n\\t\\tdic[anslist[i]] = [1 + i]\\nanswer = 0\\nfor lis in dic.values():\\n\\tsublis = [lis[0]]\\n\\tfor a in range(1, len(lis)):\\n\\t\\tsublis.append(lis[a] - lis[a - 1])\\n\\tP = shaku(k, sublis)\\n\\tfor some in lis:\\n\\t\\tif some < k:\\n\\t\\t\\tanswer -= 1\\n\\tanswer += P\\nprint(answer)\\n\", \"def main():\\n\\tfrom collections import defaultdict, deque\\n\\t(N, K) = list(map(int, input().split()))\\n\\ta = list(map(int, input().split()))\\n\\n\\tdef accumulate(a, mod):\\n\\t\\ts = 0\\n\\t\\tyield s\\n\\t\\tfor x in a:\\n\\t\\t\\ts = (s + x - 1) % mod\\n\\t\\t\\tyield s\\n\\t(*acc,) = accumulate(a, mod=K)\\n\\td = defaultdict(int)\\n\\tdq = deque()\\n\\tans = 0\\n\\tfor x in acc:\\n\\t\\tans += d[x]\\n\\t\\td[x] += 1\\n\\t\\tdq.append(x)\\n\\t\\tif len(dq) >= K:\\n\\t\\t\\tr = dq.popleft()\\n\\t\\t\\td[r] -= 1\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"(n, k, *a) = map(int, open(0).read().split())\\nb = [0] * -~n\\nfor i in range(n):\\n\\tb[i + 1] = (a[i] + b[i] - 1) % k\\nd = {k: 0}\\na = 0\\nfor (l, r) in zip([k] * min(k, n + 1) + b, b):\\n\\td[l] -= 1\\n\\tt = d.get(r, 0)\\n\\ta += t\\n\\td[r] = t + 1\\nprint(a)\\n\", \"import sys\\n(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nvalues = dict()\\nvaluelist = [0] * (n + 1)\\nvalues[0] = 1\\ns = 0\\nans = 0\\nif k == 1:\\n\\tprint(0)\\n\\treturn\\nfor i in range(n):\\n\\ts += a[i] - 1\\n\\ts %= k\\n\\tif s in values:\\n\\t\\tans += values[s]\\n\\t\\tvalues[s] += 1\\n\\telse:\\n\\t\\tvalues[s] = 1\\n\\tvaluelist[i + 1] = s\\n\\tif i >= k - 2:\\n\\t\\tvalues[valuelist[i - k + 2]] -= 1\\nprint(ans)\\n\", \"import itertools, collections\\n(N, K) = [int(_) for _ in input().split()]\\nA = [int(_) for _ in input().split()]\\nC = list(itertools.accumulate([0] + A))\\nD = [(v - i) % K for (i, v) in enumerate(C)]\\ndp = collections.Counter(D[:K])\\nans = 0\\nfor i in range(N):\\n\\tdp[D[i]] -= 1\\n\\tans += dp[D[i]]\\n\\tif i + K < len(D):\\n\\t\\tdp[D[i + K]] += 1\\nprint(ans)\\n\", \"from collections import Counter\\n(N, K) = map(int, input().split())\\nAs = list(map(int, input().split()))\\nSs = [0]\\nS = 0\\nfor A in As:\\n\\tS += A - 1\\n\\tS %= K\\n\\tSs.append(S)\\nans = 0\\ncnt = Counter()\\nfor i in range(N + 1):\\n\\tans += cnt[Ss[i]]\\n\\tcnt[Ss[i]] += 1\\n\\tif i >= K - 1:\\n\\t\\tcnt[Ss[i - K + 1]] -= 1\\nprint(ans)\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, copy, functools\\nimport time, random\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\nmod2 = 998244353\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef LLI():\\n\\treturn [list(map(int, l.split())) for l in sys.stdin.readlines()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef pe(s):\\n\\treturn print(str(s), file=sys.stderr)\\n\\ndef JA(a, sep):\\n\\treturn sep.join(map(str, a))\\n\\ndef JAA(a, s, t):\\n\\treturn s.join((t.join(map(str, b)) for b in a))\\n\\ndef main():\\n\\t(n, k) = LI()\\n\\taa = LI()\\n\\tc = collections.defaultdict(int)\\n\\tc[0] = 1\\n\\tt = [0]\\n\\tr = 0\\n\\tfor i in range(n):\\n\\t\\ta = aa[i]\\n\\t\\ttt = (t[-1] + a - 1) % k\\n\\t\\tt.append(tt)\\n\\t\\tif i >= k - 1:\\n\\t\\t\\tc[t[i - k + 1]] -= 1\\n\\t\\tr += c[tt]\\n\\t\\tc[tt] += 1\\n\\treturn r\\nprint(main())\\n\", \"(n, k) = [int(j) for j in input().split()]\\na = [int(j) for j in input().split()]\\nfrom itertools import accumulate\\nl = [0] + list(accumulate(a))\\nll = []\\nfor i in range(n + 1):\\n\\tll.append((i - l[i]) % k)\\nimport collections\\nc = collections.Counter()\\nans = 0\\nfor i in range(n + 1):\\n\\tans += c[ll[i]]\\n\\tc[ll[i]] += 1\\n\\tif i >= k - 1:\\n\\t\\tc[ll[i - k + 1]] -= 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nL = list(map(int, input().split()))\\nR = list()\\nif K >= N:\\n\\tsums = 0\\n\\tc = dict()\\n\\tfor i in range(N):\\n\\t\\tsums += L[i]\\n\\t\\tsums %= K\\n\\t\\ta = (sums - i - 1) % K\\n\\t\\tif a in c:\\n\\t\\t\\tc[a] += 1\\n\\t\\telse:\\n\\t\\t\\tc[a] = 1\\n\\tans = 0\\n\\tfor i in c:\\n\\t\\tans += (c[i] - 1) * c[i] // 2\\n\\tif 0 in c:\\n\\t\\tprint(ans + c[0])\\n\\telse:\\n\\t\\tprint(ans)\\nelse:\\n\\tans = 0\\n\\tc = [0] * K\\n\\tsums = 0\\n\\tfor i in range(N):\\n\\t\\tsums += L[i]\\n\\t\\tsums %= K\\n\\t\\ta = (sums - i - 1) % K\\n\\t\\tR.append(a)\\n\\tfor i in range(K - 1):\\n\\t\\tc[R[i]] += 1\\n\\tans += c[0]\\n\\tc[R[K - 1]] += 1\\n\\tfor i in range(N):\\n\\t\\tif i < N - K:\\n\\t\\t\\tans += c[R[i]] - 1\\n\\t\\t\\tc[R[i]] -= 1\\n\\t\\t\\tc[R[i + K]] += 1\\n\\t\\telse:\\n\\t\\t\\tans += c[R[i]] - 1\\n\\t\\t\\tc[R[i]] -= 1\\n\\tprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(lambda x: int(x) - 1, input().split()))\\ns = [0] * (n + 1)\\nfor i in range(n):\\n\\ts[i + 1] = (s[i] + a[i]) % k\\nmp = defaultdict(int)\\nans = 0\\nfor i in range(n + 1):\\n\\tans += mp[s[i]]\\n\\tmp[s[i]] += 1\\n\\tif i >= k - 1:\\n\\t\\tmp[s[i - k + 1]] -= 1\\nprint(ans)\\n\", \"from collections import Counter, deque\\n(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nINF = 10 ** 18\\ncnt = Counter()\\ncnt[0] = 1\\nque = deque([0])\\nsumR = 0\\nans = 0\\nfor (right, a) in enumerate(A, start=1):\\n\\tif len(que) >= K:\\n\\t\\tcnt[que.popleft()] -= 1\\n\\tsumR = (a + sumR) % K\\n\\tD = (sumR - right) % K\\n\\tans += cnt[D]\\n\\tcnt[D] += 1\\n\\tque.append(D)\\nprint(ans)\\n\", \"from collections import defaultdict\\nimport bisect\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] * N\\nfor i in range(N):\\n\\tS[i] = S[i - 1] + A[i]\\n\\tS[i] %= K\\nd = defaultdict(list)\\nfor i in range(N):\\n\\td[(S[i] - i) % K].append(i)\\nans = 0\\nfor k in d:\\n\\tl = d[k]\\n\\tfor i in range(len(l)):\\n\\t\\tn = l[i]\\n\\t\\tj = bisect.bisect_left(l, n + K)\\n\\t\\tans += j - i - 1\\n\\tif k == 1:\\n\\t\\tj = bisect.bisect_left(l, K - 1)\\n\\t\\tans += j\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = [int(c) % K - 1 for c in input().split()]\\nB = [0]\\nfor c in A:\\n\\tB += [B[-1] + c]\\ndic = defaultdict(int)\\nldic = defaultdict(int)\\nfor i in range(min(K, N + 1)):\\n\\tc = B[i]\\n\\tdic[c % K] += 1\\nans = 0\\nfor i in range(1, N + 1):\\n\\tx = B[i - 1]\\n\\tldic[x % K] += 1\\n\\tans += dic[x % K] - ldic[x % K]\\n\\tif K + i - 1 <= N:\\n\\t\\tdic[B[K + i - 1] % K] += 1\\nprint(ans)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\nal = list(map(int, input().split()))\\nval_cnt = {}\\nval_cnt[0] = 1\\nval_q = deque([0])\\nif k == 1:\\n\\tprint(0)\\n\\texit()\\nans = 0\\ncurr_sum = 0\\nfor i in range(n):\\n\\tcurr_sum += al[i]\\n\\tcurr_sum %= k\\n\\tval = (curr_sum - (i + 1)) % k\\n\\tval_cnt.setdefault(val, 0)\\n\\tans += val_cnt[val]\\n\\tval_cnt[val] += 1\\n\\tval_q.append(val)\\n\\tif len(val_q) >= k:\\n\\t\\tpoped = val_q.popleft()\\n\\t\\tval_cnt[poped] -= 1\\nprint(ans)\\n\", \"from itertools import accumulate\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nB = accumulate([0] + A)\\nC = [(b - i) % K for (i, b) in enumerate(B)]\\ncnt = dict()\\ncnt[C[0]] = 1\\nres = 0\\nfor i in range(1, N + 1):\\n\\tif i >= K:\\n\\t\\tcnt[C[i - K]] = cnt.get(C[i - K], 0) - 1\\n\\tres += cnt.get(C[i], 0)\\n\\tcnt[C[i]] = cnt.get(C[i], 0) + 1\\nprint(res)\\n\", \"from collections import Counter\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA = list(map(lambda x: x % K - 1, A))\\nsa = [0] * (N + 1)\\nfor i in range(1, N + 1):\\n\\tsa[i] = (sa[i - 1] + A[i - 1]) % K\\nc = Counter(sa[:K - 1])\\nans = 0\\nfor i in c.values():\\n\\tans += i * (i - 1) // 2\\nfor i in range(K - 1, N + 1):\\n\\tans += c[sa[i]]\\n\\tc[sa[i - (K - 1)]] -= 1\\n\\tc[sa[i]] += 1\\nprint(ans)\\n\", \"import queue\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] * (N + 1)\\nfor i in range(N):\\n\\tS[i + 1] = (S[i] + A[i] - 1) % K\\nv_set = set(S)\\nmp = {v: 0 for v in v_set}\\nans = 0\\nq = queue.Queue()\\nfor i in range(N + 1):\\n\\tans += mp[S[i]]\\n\\tmp[S[i]] += 1\\n\\tq.put(S[i])\\n\\tif q.qsize() == K:\\n\\t\\tmp[q.get()] -= 1\\nprint(ans)\\n\", \"import bisect\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(n - 1):\\n\\ta[i] -= 1\\n\\ta[i + 1] += a[i]\\na[n - 1] -= 1\\nmemo = {0: []}\\nfor i in range(n):\\n\\tif a[i] % k not in memo.keys():\\n\\t\\tmemo[a[i] % k] = [i]\\n\\telse:\\n\\t\\tmemo[a[i] % k].append(i)\\nans = bisect.bisect_left(memo[0], k - 1)\\nfor i in memo.keys():\\n\\tfor j in range(len(memo[i]) - 1):\\n\\t\\tans += bisect.bisect_left(memo[i], memo[i][j] + k) - 1 - j\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i] -= 1\\n\\ta[i] %= k\\nb = [0]\\nfor i in range(n):\\n\\tb.append((b[-1] + a[i]) % k)\\nans = 0\\nnow = {}\\nfor i in range(n + 1):\\n\\ttmp = b[i]\\n\\tif tmp in now:\\n\\t\\tans += now[tmp]\\n\\t\\tnow[tmp] += 1\\n\\telse:\\n\\t\\tnow[tmp] = 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tnow[b[i - k + 1]] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict as dd\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] * (N + 1)\\nfor i in range(1, N + 1):\\n\\tS[i] = S[i - 1] + A[i - 1] - 1\\n\\tS[i] %= K\\nB = dd(int)\\ncnt = 0\\nfor j in range(1, N + 1):\\n\\tB[S[j - 1]] += 1\\n\\tif j - K >= 0:\\n\\t\\tB[S[j - K]] -= 1\\n\\tcnt += B[S[j]]\\nprint(cnt)\\n\", \"import sys\\nimport numpy as np\\nfrom collections import defaultdict\\nsr = lambda : sys.stdin.readline().rstrip()\\nir = lambda : int(sr())\\nlr = lambda : list(map(int, sr().split()))\\n(N, K) = lr()\\nA = np.array([1] + lr())\\nA = (A - 1) % K\\nAcum = A.cumsum() % K\\ncounter = defaultdict(int)\\nanswer = 0\\nfor i in range(len(Acum)):\\n\\tx = Acum[i]\\n\\tanswer += counter[x]\\n\\tcounter[x] += 1\\n\\tif i >= K - 1:\\n\\t\\tcounter[Acum[i - (K - 1)]] -= 1\\nprint(answer)\\n\", \"import collections\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nsa = [0]\\nfor i in range(n):\\n\\tsa.append(sa[i] + a[i])\\n\\tsa[i + 1] -= 1\\n\\tsa[i + 1] %= k\\ncd = collections.defaultdict(lambda : 0)\\nres = 0\\nfor i in range(n + 1):\\n\\tcd[sa[i]] += 1\\n\\tif i >= k:\\n\\t\\tcd[sa[i - k]] -= 1\\n\\tres += cd[sa[i]] - 1\\nprint(res)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(lambda x: int(x) % K, input().split()))\\ncum = [0] * (N + 1)\\nfor i in range(N):\\n\\tcum[i + 1] = cum[i] + A[i]\\nx = [(cum[i] - i) % K for i in range(N + 1)]\\ndic = {}\\nans = 0\\nfor i in range(N + 1):\\n\\tif i >= K:\\n\\t\\tdic[x[i - K]] -= 1\\n\\tans += dic.get(x[i], 0)\\n\\tif not x[i] in dic:\\n\\t\\tdic[x[i]] = 1\\n\\telse:\\n\\t\\tdic[x[i]] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\nnums = [int(i) for i in input().split()]\\nnums = [0] + nums\\nfor i in range(n):\\n\\tnums[i + 1] = (nums[i] + nums[i + 1] + k - 1) % k\\nans = 0\\nd = defaultdict(int)\\nfor i in range(n + 1):\\n\\tans += d[nums[i]]\\n\\td[nums[i]] += 1\\n\\tif i - (k - 1) >= 0:\\n\\t\\td[nums[i - (k - 1)]] -= 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = [0] + [a - 1 for a in map(int, input().split())]\\nA_cum = list(accumulate(A))\\nA_cum = [a % K for a in A_cum]\\nans = 0\\ndd = defaultdict(int)\\nq = []\\nfor j in range(N + 1):\\n\\tans += dd[A_cum[j]]\\n\\tdd[A_cum[j]] += 1\\n\\tq.append(A_cum[j])\\n\\tif len(q) == K:\\n\\t\\tdd[q[0]] -= 1\\n\\t\\tq.pop(0)\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\n(*A,) = map(int, input().split())\\nA = [0] + A\\nd = []\\nc = defaultdict(int)\\nx = 0\\nans = 0\\nfor (i, a) in enumerate(A):\\n\\tx += a - 1\\n\\tx %= K\\n\\td.append(x)\\n\\tif i - K >= 0:\\n\\t\\tc[d[i - K]] -= 1\\n\\tans += c[x]\\n\\tc[x] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom collections import deque\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nfor i in range(N):\\n\\tA[i] -= 1\\ns = [0 for _ in range(N + 1)]\\nfor i in range(N):\\n\\ts[i + 1] = (s[i] + A[i]) % K\\nd = defaultdict(int)\\nans = 0\\nq = deque()\\nfor j in range(N + 1):\\n\\tans += d[s[j]]\\n\\td[s[j]] += 1\\n\\tq.append(s[j])\\n\\tif len(q) == K:\\n\\t\\td[q[0]] -= 1\\n\\t\\tq.popleft()\\nprint(ans)\\n\", \"import itertools\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA = [0] + [x - 1 for x in A]\\nAcum = list(itertools.accumulate(A))\\nAcum = [x % K for x in Acum]\\ncounter = defaultdict(int)\\nanswer = 0\\nfor (i, x) in enumerate(Acum):\\n\\tanswer += counter[x]\\n\\tcounter[x] += 1\\n\\tif i >= K - 1:\\n\\t\\tcounter[Acum[i - K + 1]] -= 1\\nprint(answer)\\n\", \"(M, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nans = 0\\naccum = [0]\\nd = {0: 1}\\nfor (i, a) in enumerate(A):\\n\\taccum.append((accum[-1] + a - 1) % K)\\n\\tif i >= K - 1:\\n\\t\\td[accum[i - K + 1]] -= 1\\n\\tif accum[-1] in d:\\n\\t\\tans += d[accum[-1]]\\n\\t\\td[accum[-1]] += 1\\n\\telse:\\n\\t\\td[accum[-1]] = 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n\\ndef main():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\truiseki = [0]\\n\\td = defaultdict(int)\\n\\td[0] = 1\\n\\tfor i in range(n):\\n\\t\\tif i - k + 1 >= 0:\\n\\t\\t\\td[ruiseki[i - k + 1]] -= 1\\n\\t\\truiseki.append((ruiseki[i] + a[i] - 1) % k)\\n\\t\\tans += d[ruiseki[i + 1]]\\n\\t\\td[ruiseki[i + 1]] += 1\\n\\tprint(ans)\\nmain()\\n\", \"import bisect\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0 for i in range(N + 1)]\\nfor i in range(N):\\n\\tS[i + 1] = S[i] + A[i]\\n\\tS[i + 1] %= K\\nX = [(S[i] - i) % K for i in range(N + 1)]\\nD = dict()\\nfor i in range(N + 1):\\n\\tif X[i] in D:\\n\\t\\tD[X[i]].append(i)\\n\\telse:\\n\\t\\tD[X[i]] = [i]\\nans = 0\\nfor k in D:\\n\\tfor i in D[k]:\\n\\t\\tL = bisect.bisect_left(D[k], i - K + 1)\\n\\t\\tR = bisect.bisect_right(D[k], i + K - 1)\\n\\t\\tans += R - L - 1\\nprint(ans // 2)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\nimport bisect\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na = [0] + list(accumulate([(i - 1) % k for i in a]))\\na = [i % k for i in a]\\nans = 0\\nmaps = defaultdict(list)\\nfor (k1, v) in enumerate(a):\\n\\tmaps[v].append(k1)\\nfor i in range(n):\\n\\tv = a[i]\\n\\tans += bisect.bisect_right(maps[v], i + k - 1) - bisect.bisect_right(maps[v], i)\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nB = [a - 1 for a in A]\\nS = [0]\\nfor b in B:\\n\\tS.append((S[-1] + b) % K)\\nfrom collections import Counter\\nC = Counter()\\nANS = 0\\nfor i in range(N + 1):\\n\\tANS += C[S[i]]\\n\\tC[S[i]] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tC[S[i - K + 1]] -= 1\\nprint(ANS)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nif k == 1:\\n\\tprint(0)\\n\\texit()\\ns = [0]\\nfor i in a:\\n\\ts.append((s[-1] + i - 1) % k)\\nd = defaultdict(int)\\nd[0] = 1\\nans = 0\\nfor r in range(1, n + 1):\\n\\tsr = s[r]\\n\\tif d[sr] > 0:\\n\\t\\tans += d[sr]\\n\\td[sr] += 1\\n\\tl = r - k + 1\\n\\tif l >= 0:\\n\\t\\td[s[l]] -= 1\\nprint(ans)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na = [i - 1 for i in a]\\nacc_a = [0 for i in range(n + 1)]\\nacc_a[0] = 0\\nacc_a[1] = a[0] % k\\nfor i in range(2, len(a) + 1):\\n\\tacc_a[i] = (a[i - 1] + acc_a[i - 1]) % k\\nans = 0\\ncount = {}\\nq = deque()\\nfor i in acc_a:\\n\\tif i not in count:\\n\\t\\tcount[i] = 0\\n\\tans += count[i]\\n\\tcount[i] += 1\\n\\tq.append(i)\\n\\tif len(q) == k:\\n\\t\\tcount[q.popleft()] -= 1\\nprint(ans)\\n\", \"(n, k) = [int(_) for _ in input().split()]\\na = [int(_) for _ in input().split()]\\ns = [0]\\nfor i in range(len(a)):\\n\\ts.append(s[-1] + a[i])\\nfor i in range(len(s)):\\n\\ts[i] = (s[i] - i) % k\\nd = {0: 1}\\nans = 0\\nfor j in range(1, n + 1):\\n\\tif s[j] in d:\\n\\t\\td[s[j]] += 1\\n\\telse:\\n\\t\\td[s[j]] = 1\\n\\tif j >= k:\\n\\t\\td[s[j - k]] -= 1\\n\\tans += d[s[j]] - 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nimport bisect\\n(n, k) = list(map(int, input().split()))\\na = [1] + list(map(int, input().split()))\\nd = defaultdict(list)\\nfor i in range(n + 1):\\n\\ta[i] -= 1\\nd[a[0] % k].append(0)\\nfor i in range(n):\\n\\ta[i + 1] += a[i]\\n\\td[a[i + 1] % k].append(i + 1)\\nans = 0\\nfor l in list(d.values()):\\n\\tfor (i, idx) in enumerate(l):\\n\\t\\tans += bisect.bisect_left(l, idx + k) - i - 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n\\ndef main():\\n\\t(N, K) = list(map(int, input().split()))\\n\\tA = list(map(int, input().split()))\\n\\tS = [0] * (N + 1)\\n\\tfor i in range(1, N + 1):\\n\\t\\tS[i] = S[i - 1] + A[i - 1]\\n\\tT = [(s - i) % K for (i, s) in enumerate(S)]\\n\\tcounter = defaultdict(int)\\n\\tans = 0\\n\\tfor j in range(N + 1):\\n\\t\\tif j >= K:\\n\\t\\t\\tcounter[T[j - K]] -= 1\\n\\t\\tans += counter[T[j]]\\n\\t\\tcounter[T[j]] += 1\\n\\tprint(ans)\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ndp = [0]\\nmp = {0: 1}\\nans = 0\\nfor t in range(n):\\n\\ti = a[t]\\n\\tif t >= k - 1:\\n\\t\\tmp[dp[-k]] -= 1\\n\\tnum = (dp[-1] + i - 1) % k\\n\\tif num in mp.keys():\\n\\t\\tans += mp[num]\\n\\t\\tmp[num] += 1\\n\\telse:\\n\\t\\tmp[num] = 1\\n\\tdp.append(num)\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(lambda x: (int(x) - 1) % k, input().split()))\\na_ = 0\\ncs_a = [0]\\nfor ai in a:\\n\\ta_ += ai\\n\\ta_ %= k\\n\\tcs_a.append(a_)\\nans = 0\\nfrom collections import defaultdict\\nd = defaultdict(int)\\nfor i in range(n + 1):\\n\\tans += d[cs_a[i]]\\n\\td[cs_a[i]] += 1\\n\\tif i >= k - 1:\\n\\t\\td[cs_a[i - k + 1]] -= 1\\nprint(ans)\\n\", \"(n, k) = list(map(int, input().split()))\\na = [0] + list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i + 1] += a[i]\\n\\ta[i + 1] %= k\\ncnt = {}\\nans = 0\\nfor i in range(n + 1):\\n\\tleft = i - k\\n\\tif left >= 0:\\n\\t\\tldiff = (a[left] - left) % k\\n\\t\\tcnt[ldiff] -= 1\\n\\tx = (a[i] - i) % k\\n\\tif x < 0:\\n\\t\\tx += k\\n\\tif x not in cnt:\\n\\t\\tcnt[x] = 0\\n\\tans += cnt[x]\\n\\tcnt[x] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom bisect import bisect_right\\n(n, k) = list(map(int, input().split()))\\nalst = list(map(int, input().split()))\\ndd = defaultdict(list)\\ndd[0].append(0)\\ntotal = 0\\nfor (i, num) in enumerate(alst, start=1):\\n\\ttotal += num\\n\\ttotal %= k\\n\\tapp = total - i\\n\\tapp %= k\\n\\tdd[app].append(i)\\nans = 0\\nfor (_, lst) in list(dd.items()):\\n\\tfor (i, num) in enumerate(lst):\\n\\t\\tnum2 = num + k - 1\\n\\t\\tpos = bisect_right(lst, num2)\\n\\t\\tans += pos - i - 1\\nprint(ans)\\n\", \"import collections\\n\\ndef main():\\n\\t(N, K) = map(int, input().split())\\n\\tA = list(map(int, input().split()))\\n\\td = collections.defaultdict(int)\\n\\tprefix = [0]\\n\\tfor i in range(N):\\n\\t\\tprefix.append(prefix[-1] + A[i])\\n\\tans = 0\\n\\tfor j in range(N + 1):\\n\\t\\tv = (prefix[j] - j) % K\\n\\t\\tans += d[v]\\n\\t\\td[v] += 1\\n\\t\\tif j >= K - 1:\\n\\t\\t\\td[(prefix[j - K + 1] - (j - K + 1)) % K] -= 1\\n\\treturn ans\\nprint(main())\\n\", \"def main():\\n\\t(N, K) = list(map(int, input().split()))\\n\\tA = list(map(int, input().split()))\\n\\ts = 0\\n\\td = {}\\n\\td[0] = {0}\\n\\tr = 0\\n\\tl = [0] * (N + 1)\\n\\tfor (i, v) in enumerate(A, start=1):\\n\\t\\tif i - K >= 0:\\n\\t\\t\\tx = l[i - K]\\n\\t\\t\\td[x].remove(i - K)\\n\\t\\ts += v % K\\n\\t\\ts %= K\\n\\t\\tt = (s - i) % K\\n\\t\\tl[i] = t\\n\\t\\tif t in d:\\n\\t\\t\\tr += len(d[t])\\n\\t\\t\\td[t].add(i)\\n\\t\\telse:\\n\\t\\t\\td[t] = {i}\\n\\treturn r\\nprint(main())\\n\", \"from bisect import *\\n(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\ns = 0\\nsl = {0: [0]}\\nfor i in range(n):\\n\\ts += A[i] - 1\\n\\ts %= k\\n\\tif s not in sl.keys():\\n\\t\\tsl[s] = []\\n\\tsl[s].append(i + 1)\\nans = 0\\nfor ls in sl.values():\\n\\tfor (i, l) in enumerate(ls):\\n\\t\\tx = bisect_right(ls, l + k - 1)\\n\\t\\tans += x - i - 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K, *A) = map(int, open(0).read().split())\\nx = [0] * (N + 1)\\nfor i in range(N):\\n\\tx[i + 1] = x[i] + A[i]\\ny = [(x[i] - i) % K for i in range(N + 1)]\\nctr = defaultdict(int)\\nans = 0\\nfor j in range(N + 1):\\n\\tans += ctr[y[j]]\\n\\tctr[y[j]] += 1\\n\\tif j - K + 1 >= 0:\\n\\t\\tctr[y[j - K + 1]] -= 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import Counter\\n(n, k, *a) = map(int, open(0).read().split())\\na = [x % k - 1 for x in a]\\na = [0] + [x % k for x in accumulate(a)]\\nd = Counter()\\nans = 0\\nfor (l, r) in zip([k] * min(k, n + 1) + a, a):\\n\\td[l] -= 1\\n\\tans += d[r]\\n\\td[r] += 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(lambda x: int(x) - 1, input().split()))\\nsa = [0]\\nfor a in A:\\n\\tsa.append((sa[-1] + a) % K)\\nd = {0: 1}\\nans = 0\\nfor i in range(1, N + 1):\\n\\tif i >= K:\\n\\t\\td[sa[i - K]] -= 1\\n\\tv = d.get(sa[i], 0)\\n\\tans += v\\n\\td[sa[i]] = v + 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i] -= 1\\nmods = defaultdict(int)\\ncnt = 0\\ntmp = 0\\nfor i in range(min(k - 1, n)):\\n\\ttmp = (tmp + a[i]) % k\\n\\tmods[tmp] += 1\\n\\tcnt += 1\\nans = 0\\ntmp2 = 0\\nfor i in range(n):\\n\\tans += mods[tmp2]\\n\\ttmp2 = (tmp2 + a[i]) % k\\n\\tmods[tmp2] -= 1\\n\\tif cnt < n:\\n\\t\\ttmp = (tmp + a[cnt]) % k\\n\\t\\tmods[tmp] += 1\\n\\t\\tcnt += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncum_sum = [0] * (n + 1)\\nfor i in range(n):\\n\\tcum_sum[i + 1] = (cum_sum[i] + a[i] - 1) % k\\nD = defaultdict(int)\\ncount = 0\\nfor i in range(n + 1):\\n\\tcount += D[cum_sum[i]]\\n\\tD[cum_sum[i]] += 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tD[cum_sum[i - k + 1]] -= 1\\nprint(count)\\n\", \"from collections import defaultdict\\nimport bisect\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\naa = [0]\\ncur = 0\\nfor i in a:\\n\\tcur = (cur + i - 1) % k\\n\\taa.append(cur)\\nd = defaultdict(list)\\nfor i in range(n + 1):\\n\\td[aa[i]].append(i)\\nans = 0\\nfor i in d.values():\\n\\tfor j in i:\\n\\t\\tans += bisect.bisect_right(i, j + k - 1) - bisect.bisect_right(i, j)\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] * (n + 1)\\nfor i in range(n):\\n\\tS[i + 1] = S[i] + A[i]\\nf = lambda n: (S[n] - n) % k\\nC = defaultdict(int)\\nans = 0\\nfor i in range(n):\\n\\tC[f(i)] += 1\\n\\tj = i - k + 1\\n\\tif 0 <= j:\\n\\t\\tC[f(j)] -= 1\\n\\tans += C[f(i + 1)]\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import *\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nacc = [0]\\nfor Ai in A:\\n\\tacc.append(acc[-1] + Ai)\\ncnt = defaultdict(int)\\nans = 0\\nfor i in range(N + 1):\\n\\tans += cnt[(acc[i] - i) % K]\\n\\tcnt[(acc[i] - i) % K] += 1\\n\\tif i >= K - 1:\\n\\t\\tj = i - (K - 1)\\n\\t\\tcnt[(acc[j] - j) % K] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict as dd\\nfrom itertools import accumulate\\n(N, K) = map(int, input().split())\\nAs = [0] + list(map(int, input().split()))\\nS = list(accumulate(As))\\nans = 0\\ncounts = dd(int)\\ncounts[0] = 1\\nfor j in range(1, N + 1):\\n\\tif j >= K:\\n\\t\\tcounts[(S[j - K] - (j - K)) % K] -= 1\\n\\tt = (S[j] - j) % K\\n\\tans += counts[t]\\n\\tcounts[t] += 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA = [a - 1 for a in A]\\nS = [0] + list(accumulate(A))\\nS = [s % K for s in S]\\nans = 0\\ncounter = defaultdict(int)\\nfor (i, s) in enumerate(S):\\n\\tans += counter[s]\\n\\tcounter[s] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tcounter[S[i - K + 1]] -= 1\\nprint(ans)\\n\", \"from collections import deque, defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nSi_m_i = [0]\\ntotal = 0\\ntemp = 0\\nfor i in range(N):\\n\\ttotal += A[i]\\n\\ttemp = (total - i - 1) % K\\n\\tSi_m_i.append(temp)\\nret = 0\\nd = defaultdict(deque)\\nfor i in range(N + 1):\\n\\tpair = Si_m_i[i]\\n\\ttemp = d[pair]\\n\\twhile temp and i - temp[0] >= K:\\n\\t\\ttemp.popleft()\\n\\tret += len(temp)\\n\\td[Si_m_i[i]].append(i)\\nprint(ret)\\n\", \"import numpy as np\\nfrom collections import defaultdict, deque\\n(N, K) = list(map(int, input().split()))\\nA = np.array([1] + list(map(int, input().split()))) - 1\\nAcs = np.cumsum(A)\\nAcs %= K\\nans = 0\\ncnt = defaultdict(deque)\\nfor (i, c) in enumerate(Acs):\\n\\tcnt[c].append(i)\\n\\twhile cnt[c]:\\n\\t\\tif i - cnt[c][0] > K - 1:\\n\\t\\t\\tcnt[c].popleft()\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tans += len(cnt[c]) - 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom itertools import accumulate\\n\\ndef solve():\\n\\t(N, K, *A) = list(map(int, open(0).read().split()))\\n\\tAcumsum = [0] + list(accumulate(A))\\n\\tsi = [(Acumsum[i] - i) % K for i in range(N + 1)]\\n\\tcounter = defaultdict(int)\\n\\tans = 0\\n\\tfor j in range(N):\\n\\t\\tcounter[si[j]] += 1\\n\\t\\tif 0 <= j - K + 1:\\n\\t\\t\\tcounter[si[j - K + 1]] -= 1\\n\\t\\tans += counter[si[j + 1]]\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tsolve()\\n__starting_point()\\n\", \"import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nimport itertools\\nfrom collections import defaultdict\\n(N, K, *A) = map(int, read().split())\\nA = [0] + [x - 1 for x in A]\\nAcum = list(itertools.accumulate(A))\\nAcum = [x % K for x in Acum]\\ncounter = defaultdict(int)\\nanswer = 0\\nfor (i, x) in enumerate(Acum):\\n\\tanswer += counter[x]\\n\\tcounter[x] += 1\\n\\tif i >= K - 1:\\n\\t\\tcounter[Acum[i - K + 1]] -= 1\\nprint(answer)\\n\", \"(N, K) = map(int, input().split())\\nA = [0] + [int(a) - 1 for a in input().split()]\\nfor i in range(1, N + 1):\\n\\tA[i] = (A[i] + A[i - 1]) % K\\nD = {0: 1}\\nans = 0\\nfor i in range(1, N + 1):\\n\\tif i >= K:\\n\\t\\tD[A[i - K]] -= 1\\n\\ta = A[i]\\n\\tif a not in D:\\n\\t\\tD[a] = 0\\n\\tans += D[a]\\n\\tD[a] += 1\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import deque\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nB = [0]\\nfor a in A:\\n\\tb = (B[-1] + (a - 1)) % K\\n\\tB.append(b)\\nans = 0\\ndic = {}\\nfor (i, b) in enumerate(B):\\n\\tif b in dic:\\n\\t\\tdic[b].append(i)\\n\\telse:\\n\\t\\tdic[b] = deque()\\n\\t\\tdic[b].append(i)\\n\\twhile len(dic[b]) > 0 and dic[b][0] <= i - K:\\n\\t\\tdic[b].popleft()\\n\\tans += len(dic[b]) - 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nacc = [0] + list(accumulate(a))\\nsm = [(e - i) % k for (i, e) in enumerate(acc)]\\nd = defaultdict(int)\\nans = 0\\nfor r in range(1, n + 1):\\n\\tif r - k >= 0:\\n\\t\\te = sm[r - k]\\n\\t\\td[e] -= 1\\n\\te = sm[r - 1]\\n\\td[e] += 1\\n\\te = sm[r]\\n\\tans += d[e]\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nd = defaultdict(int)\\nsa = [0] * (n + 1)\\nfor i in range(n):\\n\\tsa[i + 1] = sa[i] + a[i]\\n\\tsa[i + 1] %= k\\nans = 0\\nfor i in range(n + 1):\\n\\tv = sa[i] - i\\n\\tv %= k\\n\\tans += d[v]\\n\\td[v] += 1\\n\\tif 0 <= i - k + 1:\\n\\t\\tvv = sa[i - k + 1] - (i - k + 1)\\n\\t\\tvv %= k\\n\\t\\td[vv] -= 1\\nprint(ans)\\n\", \"(n, k, *a) = map(int, open(0).read().split())\\na = [0] + a\\nfor i in range(n):\\n\\ta[i + 1] = (a[i + 1] - 1 + a[i]) % k\\nd = {}\\nc = 0\\nfor (i, b) in enumerate(a):\\n\\tv = d.get(b, 0)\\n\\tc += v\\n\\td[b] = v + 1\\n\\tj = i - k + 1\\n\\tif j >= 0:\\n\\t\\td[a[j]] = d.get(a[j], 0) - 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nA = [int(i) for i in input().split()]\\nans = 0\\nAA = [(A[0] - 1) % k]\\nfor i in range(1, n):\\n\\tAA.append((AA[-1] + A[i] - 1) % k)\\nimport collections\\nd = collections.defaultdict(int)\\nd[0] += 1\\nfor i in range(n):\\n\\tif i + 1 == k:\\n\\t\\td[0] -= 1\\n\\telif i + 1 >= k:\\n\\t\\td[AA[i - k]] = max(0, d[AA[i - k]] - 1)\\n\\tans += d[AA[i]]\\n\\td[AA[i]] += 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nfor i in range(1, N):\\n\\tA[i] += A[i - 1]\\nfor i in range(N):\\n\\tA[i] -= i + 1\\n\\tA[i] %= K\\nA = [0] + A\\nD = {}\\nans = 0\\nfor j in range(1, N + 1):\\n\\tD[A[j - 1]] = D.get(A[j - 1], 0) + 1\\n\\tif j - K >= 0:\\n\\t\\tD[A[j - K]] -= 1\\n\\tans += D.get(A[j], 0)\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0 for i in range(N + 1)]\\nfor i in range(1, N + 1):\\n\\tS[i] = S[i - 1] + A[i - 1]\\ncnt = 0\\ndict1 = {}\\ndict1[0] = 1\\nfor j in range(1, N + 1):\\n\\tif j - K >= 0:\\n\\t\\tdict1[(S[j - K] - j + K) % K] -= 1\\n\\tif (S[j] - j) % K in dict1:\\n\\t\\tcnt += dict1[(S[j] - j) % K]\\n\\t\\tdict1[(S[j] - j) % K] += 1\\n\\telse:\\n\\t\\tdict1[(S[j] - j) % K] = 1\\nprint(cnt)\\n\", \"from queue import Queue\\nfrom collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i] -= 1\\ns = [0] * (n + 1)\\nfor i in range(n):\\n\\ts[i + 1] = (s[i] + a[i]) % k\\nd = defaultdict(int)\\nans = 0\\nq = Queue()\\nfor j in range(n + 1):\\n\\tans += d[s[j]]\\n\\td[s[j]] += 1\\n\\tq.put(s[j])\\n\\tif q.qsize() == k:\\n\\t\\td[q.get()] -= 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nnums = list(map(int, input().split()))\\nsums = [0]\\nfor x in nums:\\n\\tsums.append(sums[-1] + x)\\na = [(sums[i] - i) % k for i in range(len(sums))]\\nres = 0\\nmemo = {}\\ni = 0\\nfor j in range(len(a)):\\n\\tmemo[a[j]] = memo.get(a[j], 0) + 1\\n\\tif j - i + 1 > k:\\n\\t\\tmemo[a[i]] -= 1\\n\\t\\ti += 1\\n\\tres += memo[a[j]] - 1\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\nl = [0] + [i % k - 1 for i in list(map(int, input().split()))]\\nfrom itertools import accumulate\\nl = list(accumulate(l))\\nimport collections\\nd = collections.defaultdict(int)\\nd[0] += 1\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif i >= k:\\n\\t\\td[l[i - k] % k] -= 1\\n\\tans += d[l[i] % k]\\n\\td[l[i] % k] += 1\\nprint(ans)\\n\", \"import sys\\nsys.setrecursionlimit(2147483647)\\nINF = float('inf')\\nMOD = 10 ** 9 + 7\\ninput = lambda : sys.stdin.readline().rstrip()\\nfrom collections import defaultdict\\n\\ndef resolve():\\n\\t(n, k) = map(int, input().split())\\n\\tA = list(map(lambda x: int(x) - 1, input().split()))\\n\\tS = [0] * (n + 1)\\n\\tfor i in range(n):\\n\\t\\tS[i + 1] = S[i] + A[i]\\n\\t\\tS[i + 1] %= k\\n\\tC = defaultdict(int)\\n\\tans = 0\\n\\tfor i in range(n + 1):\\n\\t\\tans += C[S[i]]\\n\\t\\tC[S[i]] += 1\\n\\t\\tif i - k + 1 >= 0:\\n\\t\\t\\tC[S[i - k + 1]] -= 1\\n\\tprint(ans)\\nresolve()\\n\", \"(n, k) = map(int, input().split())\\na = [0] + list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i + 1] = (a[i] + a[i + 1] - 1) % k\\nd = dict()\\nans = 0\\nfor i in range(n + 1):\\n\\tif i >= k:\\n\\t\\td[a[i - k]] -= 1\\n\\tif a[i] in d:\\n\\t\\tans += d[a[i]]\\n\\t\\td[a[i]] += 1\\n\\telse:\\n\\t\\td[a[i]] = 1\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom itertools import accumulate\\n(N, K) = map(int, input().split())\\nA = map(int, input().split())\\nB = accumulate(A)\\nC = [0] + [(b - i) % K for (i, b) in enumerate(B, start=1)]\\ncnt = dict()\\ncnt[C[0]] = 1\\nres = 0\\nfor i in range(1, N + 1):\\n\\tif i >= K:\\n\\t\\tcnt[C[i - K]] = cnt.get(C[i - K], 0) - 1\\n\\tres += cnt.get(C[i], 0)\\n\\tcnt[C[i]] = cnt.get(C[i], 0) + 1\\nprint(res)\\n\", \"def main():\\n\\t(N, K) = map(int, input().split())\\n\\tA = list(map(int, input().split()))\\n\\tB = [0] * (N + 1)\\n\\tb = 0\\n\\tfor (i, a) in enumerate(A):\\n\\t\\tb += a - 1\\n\\t\\tb %= K\\n\\t\\tB[i + 1] = b\\n\\tQ = {}\\n\\tX = 0\\n\\tfor (i, b) in enumerate(B):\\n\\t\\tif i >= K:\\n\\t\\t\\tQ[B[i - K]] -= 1\\n\\t\\tif b in Q:\\n\\t\\t\\tX += Q[b]\\n\\t\\t\\tQ[b] += 1\\n\\t\\telse:\\n\\t\\t\\tQ[b] = 1\\n\\tprint(X)\\nmain()\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nmod = [0]\\nfor i in range(n):\\n\\ta = (l[i] - 1) % k\\n\\tmod.append((mod[-1] + a) % k)\\ndic = defaultdict(int)\\nans = 0\\nfor i in range(n + 1):\\n\\tif i < k:\\n\\t\\tans += dic[mod[i]]\\n\\t\\tdic[mod[i]] += 1\\n\\telse:\\n\\t\\tdic[mod[i - k]] -= 1\\n\\t\\tans += dic[mod[i]]\\n\\t\\tdic[mod[i]] += 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA_cum = [0] + list(accumulate(A))\\nans = 0\\ndd = defaultdict(int)\\nq = []\\nfor (i, a) in enumerate(A_cum):\\n\\ta -= i\\n\\ta %= K\\n\\tif i - K >= 0:\\n\\t\\tdd[q[i - K]] -= 1\\n\\tans += dd[a]\\n\\tdd[a] += 1\\n\\tq.append(a)\\nprint(ans)\\n\", \"from itertools import accumulate\\n(n, k) = map(int, input().split())\\nA = [int(i) for i in input().split()]\\nS = list(accumulate(A))\\nS.insert(0, 0)\\nL = [(s - i) % k for (i, s) in enumerate(S)]\\n\\ndef f(l):\\n\\treturn sum([x * (x - 1) // 2 for x in l])\\nfrom collections import Counter\\nans = 0\\nd = Counter(L[1:k])\\nfor i in range(n):\\n\\tans += d[L[i]]\\n\\td[L[i + 1]] -= 1\\n\\tif i + k <= n:\\n\\t\\td[L[i + k]] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na_cs = [0] * (n + 1)\\nfor i in range(n):\\n\\ta_cs[i + 1] = a_cs[i] + a[i]\\nans = 0\\nd = defaultdict(int)\\nfor j in range(n + 1):\\n\\tif j - k >= 0:\\n\\t\\td[(a_cs[j - k] - (j - k)) % k] -= 1\\n\\tans += d[(a_cs[j] - j) % k]\\n\\td[(a_cs[j] - j) % k] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nAm = [a - 1 for a in A]\\nAcc = [0] * (N + 1)\\nfor i in range(N):\\n\\tAcc[i + 1] = (Acc[i] + Am[i]) % K\\nd = defaultdict(int)\\n(l, r) = (0, 0)\\nans = 0\\nwhile r <= N:\\n\\ta = Acc[r]\\n\\tans += d[a]\\n\\td[a] += 1\\n\\tr += 1\\n\\tif r - l >= K:\\n\\t\\td[Acc[l]] -= 1\\n\\t\\tl += 1\\nprint(ans)\\n\", \"from itertools import accumulate\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = [0] + list(accumulate(a))\\n\\ndef f(x):\\n\\treturn (x + n * k) % k\\nans = 0\\ndic = {}\\nfor i in range(n + 1):\\n\\tif i >= k:\\n\\t\\tprev = f(s[i - k] - (i - k))\\n\\t\\tdic[prev] -= 1\\n\\tcur = f(s[i] - i)\\n\\tif cur in dic:\\n\\t\\tans += dic[cur]\\n\\t\\tdic[cur] += 1\\n\\telse:\\n\\t\\tdic[cur] = 1\\nprint(ans)\\n\", \"from bisect import bisect_right\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nfor i in range(N):\\n\\tA[i] = (A[i] - 1) % K\\nB = [0]\\nfor a in A:\\n\\tB.append((B[-1] + a) % K)\\ndic = {}\\nfor (i, b) in enumerate(B):\\n\\tif not b in dic.keys():\\n\\t\\tdic[b] = [i]\\n\\telse:\\n\\t\\tdic[b].append(i)\\nans = 0\\nfor L in dic.values():\\n\\tfor i in range(len(L)):\\n\\t\\tj = bisect_right(L, L[i] + K - 1)\\n\\t\\tans += j - i - 1\\nprint(ans)\\n\", \"import itertools\\nfrom collections import defaultdict\\n(n, k) = map(int, input().split())\\nlis = list(map(int, input().split()))\\nlis = [0] + [lis[i] - 1 for i in range(n)]\\nruiseki = list(itertools.accumulate(lis))\\nruiseki = [x % k for x in ruiseki]\\ncounter = defaultdict(int)\\nans = 0\\nfor (i, x) in enumerate(ruiseki):\\n\\tans += counter[x]\\n\\tcounter[x] += 1\\n\\tif i >= k - 1:\\n\\t\\tcounter[ruiseki[i - k + 1]] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K, *A) = map(int, open(0).read().split())\\nS = [0] * (N + 1)\\nfor i in range(N):\\n\\tS[i + 1] = S[i] + A[i]\\nd = defaultdict(int)\\nans = 0\\nfor j in range(N + 1):\\n\\tv = (S[j] - j) % K\\n\\tans += d[v]\\n\\td[v] += 1\\n\\tif j >= K - 1:\\n\\t\\td[(S[j - K + 1] - (j - K + 1)) % K] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nimport numpy as np\\n(N, K) = list(map(int, input().split()))\\nA = [0] + list(map(int, input().split()))\\nA = np.array(A)\\nA %= K\\nA = A.cumsum()\\ntmp = np.arange(N + 1)\\nB = (A - tmp) % K\\nans = 0\\nd = defaultdict(int)\\nfor i in range(min(K, N + 1)):\\n\\tx = B[i]\\n\\tans += d[x]\\n\\td[x] += 1\\nif N > K:\\n\\tfor i in range(K, N + 1):\\n\\t\\tx = B[i]\\n\\t\\ty = B[i - K]\\n\\t\\td[y] -= 1\\n\\t\\tans += d[x]\\n\\t\\td[x] += 1\\nprint(ans)\\n\", \"from itertools import accumulate\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nx = [0] + list(accumulate(a))\\nmods = dict()\\nfor i in range(n + 1):\\n\\tnow = (x[i] - i) % k\\n\\tif now in mods:\\n\\t\\tmods[now].append(i)\\n\\telse:\\n\\t\\tmods[now] = [i]\\nans = 0\\nfrom bisect import bisect_left\\nfor i in mods:\\n\\tl = len(mods[i])\\n\\tfor j in range(l):\\n\\t\\tb = bisect_left(mods[i], mods[i][j] + k) - 1\\n\\t\\tans += b - j\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nS = []\\nd = {}\\nA = list(map(int, input().split()))\\nans = 0\\nsum = 0\\nfor i in range(1, N + 1):\\n\\tsum += A[i - 1] % K\\n\\ts = (sum - i) % K\\n\\tif i > K:\\n\\t\\tx = S.pop(0)\\n\\t\\td[x] -= 1\\n\\telif i < K:\\n\\t\\tif s == 0:\\n\\t\\t\\tans += 1\\n\\tif s not in d:\\n\\t\\td[s] = 0\\n\\tans += d[s]\\n\\td[s] += 1\\n\\tS.append(s)\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [0] + list(map(int, input().split()))\\ncnt = {0: 1}\\nans = 0\\nfor i in range(1, n + 1):\\n\\tleft = i - k\\n\\tif left >= 0:\\n\\t\\tldif = (a[left] - left) % k\\n\\t\\tif ldif < 0:\\n\\t\\t\\tldif += k\\n\\t\\tcnt[ldif] -= 1\\n\\ta[i] += a[i - 1]\\n\\tdif = (a[i] - i) % k\\n\\tif dif < 0:\\n\\t\\tdif += k\\n\\tif dif not in cnt:\\n\\t\\tcnt[dif] = 0\\n\\tans += cnt[dif]\\n\\tcnt[dif] += 1\\nprint(ans)\\n\", \"from collections import *\\nimport copy\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nlst = [0]\\nfor i in range(0, N):\\n\\tlst.append((A[i] % K + lst[i]) % K)\\nfor i in range(len(lst)):\\n\\tlst[i] -= i\\n\\tlst[i] %= K\\ndic = {}\\ncount = 0\\nfor i in range(0, len(lst)):\\n\\tif lst[i] in dic:\\n\\t\\tcount += dic[lst[i]]\\n\\t\\tdic[lst[i]] += 1\\n\\telse:\\n\\t\\tdic.update({lst[i]: 1})\\n\\ta = i - K + 1\\n\\tif a >= 0:\\n\\t\\tdic[lst[a]] -= 1\\nprint(count)\\n\", \"from collections import Counter\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] * (N + 1)\\nfor (i, a) in enumerate(A):\\n\\tS[i + 1] = (S[i] + a - 1) % K\\nC = Counter()\\nans = 0\\nfor j in range(1, N + 1):\\n\\tC[S[j - 1]] += 1\\n\\tif j - K >= 0:\\n\\t\\tC[S[j - K]] -= 1\\n\\tans += C[S[j]]\\nprint(ans)\\n\", \"import sys\\nfrom itertools import accumulate\\nfrom collections import defaultdict\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\ndef resolve():\\n\\t(n, k) = list(map(int, input().split()))\\n\\tA = list([int(x) - 1 for x in input().split()])\\n\\tS = [0] + list(accumulate(A))\\n\\tS = [s % k for s in S]\\n\\tcnt = defaultdict(int)\\n\\tres = 0\\n\\tfor i in range(n + 1):\\n\\t\\tif i >= k:\\n\\t\\t\\tcnt[S[i - k]] -= 1\\n\\t\\tres += cnt[S[i]]\\n\\t\\tcnt[S[i]] += 1\\n\\tprint(res)\\n\\ndef __starting_point():\\n\\tresolve()\\n__starting_point()\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i] -= 1\\n\\ta[i] %= k\\nS = [0]\\nfor i in range(n):\\n\\tS.append((S[-1] + a[i]) % k)\\nans = 0\\ndic = defaultdict(int)\\ndic[0] = 1\\nfor i in range(1, n + 1):\\n\\tif i >= k:\\n\\t\\tdic[S[i - k]] -= 1\\n\\tans += max(0, dic[S[i]])\\n\\tdic[S[i]] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nd = [0]\\nfor i in a:\\n\\ta_i = (d[-1] + i) % k\\n\\td.append(a_i)\\nans = 0\\ncounter = defaultdict(int)\\nfor (i, s) in enumerate(d):\\n\\tans += counter[(s - i) % k]\\n\\tcounter[(s - i) % k] += 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tcounter[(d[i - k + 1] - i + k - 1) % k] -= 1\\nprint(ans)\\n\", \"from collections import Counter\\n(N, K) = list(map(int, input().split()))\\n(*A,) = list(map(int, input().split()))\\nMOD = 10 ** 9 + 7\\nS = [0] * (N + 1)\\nc = Counter()\\nc[0] = 1\\nans = 0\\nfor i in range(N):\\n\\tS[i + 1] = (S[i] + A[i] - 1) % K\\n\\tif i + 1 - K >= 0:\\n\\t\\tc[S[i + 1 - K]] -= 1\\n\\tans += c[S[i + 1]]\\n\\tc[S[i + 1]] += 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nfor i in range(1, N):\\n\\tA[i] += A[i - 1]\\nA.append(0)\\nA.sort()\\nA = [((A[i] - i) % K, i) for i in range(0, N + 1)]\\nA.sort()\\ncount = 0\\ns = 0\\nt = 1\\nwhile N >= t and N >= s:\\n\\tif A[t][0] == A[s][0] and K > A[t][1] - A[s][1]:\\n\\t\\tt += 1\\n\\t\\tif t == N + 1:\\n\\t\\t\\tcount += (t - s) * (t - s - 1) // 2\\n\\telse:\\n\\t\\tcount += t - s - 1\\n\\t\\ts += 1\\n\\t\\tif s == t:\\n\\t\\t\\tt += 1\\nprint(count)\\n\", \"def main():\\n\\t(N, K) = [int(i) for i in input().split()]\\n\\tA = [int(i) for i in input().split()]\\n\\tv = {0: 1}\\n\\tn = [0]\\n\\tr = 0\\n\\tt = 0\\n\\tfor (i, a) in enumerate(A, 1):\\n\\t\\tif i >= K:\\n\\t\\t\\tv[n[i - K]] -= 1\\n\\t\\tt += a\\n\\t\\tj = (t - i) % K\\n\\t\\tr += v.get(j, 0)\\n\\t\\tv[j] = v.get(j, 0) + 1\\n\\t\\tn.append(j)\\n\\treturn r\\nprint(main())\\n\", \"import sys\\nimport bisect\\ninput = lambda : sys.stdin.readline().rstrip()\\n\\ndef solve():\\n\\t(N, K) = list(map(int, input().split()))\\n\\tA = list(map(int, input().split()))\\n\\tS = [0 for _ in range(N + 1)]\\n\\tfor i in range(N):\\n\\t\\tS[i + 1] = S[i] + A[i] - 1\\n\\td = dict()\\n\\tfor i in range(N + 1):\\n\\t\\tk = S[i] % K\\n\\t\\tif k in d:\\n\\t\\t\\td[k].append(i)\\n\\t\\telse:\\n\\t\\t\\td[k] = [i]\\n\\tans = 0\\n\\tfor (k, v) in list(d.items()):\\n\\t\\tif len(v) <= 1:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tfor i in range(len(v)):\\n\\t\\t\\t\\ts = v[i] + K - 1\\n\\t\\t\\t\\tsi = bisect.bisect_right(v, s)\\n\\t\\t\\t\\tans += si - i - 1\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tsolve()\\n__starting_point()\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA = [a - 1 for a in A]\\nAcum = [0]\\nfor a in A:\\n\\tAcum.append((Acum[-1] + a) % K)\\nanswer = 0\\ncounter = defaultdict(int)\\nfor (i, ai) in enumerate(Acum):\\n\\tanswer += counter[ai]\\n\\tcounter[ai] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tcounter[Acum[i - K + 1]] -= 1\\nprint(answer)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\narr = [i - 1 for i in arr]\\nacum = [0]\\nfor i in range(n):\\n\\tacum.append(acum[-1] + arr[i])\\nacum = [i % k for i in acum]\\nans = 0\\ndic = {}\\nfor i in range(n + 1):\\n\\tif acum[i] % k not in dic:\\n\\t\\tdic[acum[i]] = 1\\n\\telse:\\n\\t\\tans += dic[acum[i]]\\n\\t\\tdic[acum[i]] += 1\\n\\tif i >= k - 1:\\n\\t\\tdic[acum[i - k + 1]] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom itertools import accumulate\\nimport sys\\nsys.setrecursionlimit(10 ** 9)\\ninput = sys.stdin.readline\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA_acc = [0] + list(accumulate(A))\\nans = 0\\nD = defaultdict(int)\\nfor l in range(N + 1):\\n\\tt = (A_acc[l] - l) % K\\n\\tif l >= K:\\n\\t\\tr = A_acc[l - K] - (l - K)\\n\\t\\tD[r % K] -= 1\\n\\tans += D[t]\\n\\tD[t] += 1\\nprint(ans)\\n\", \"import math\\nimport numpy as np\\nimport decimal\\nimport collections\\nimport itertools\\nimport sys\\nimport random\\n\\nclass UnionFind:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.n = n\\n\\t\\tself.par = [-1 for i in range(self.n)]\\n\\n\\tdef find(self, x):\\n\\t\\tif self.par[x] < 0:\\n\\t\\t\\treturn x\\n\\t\\telse:\\n\\t\\t\\tself.par[x] = self.find(self.par[x])\\n\\t\\t\\treturn self.par[x]\\n\\n\\tdef unite(self, x, y):\\n\\t\\tp = self.find(x)\\n\\t\\tq = self.find(y)\\n\\t\\tif p == q:\\n\\t\\t\\treturn None\\n\\t\\tif p > q:\\n\\t\\t\\t(p, q) = (q, p)\\n\\t\\tself.par[p] += self.par[q]\\n\\t\\tself.par[q] = p\\n\\n\\tdef same(self, x, y):\\n\\t\\treturn self.find(x) == self.find(y)\\n\\n\\tdef size(self, x):\\n\\t\\treturn -self.par[self.find(x)]\\n\\ndef prime_numbers(x):\\n\\tif x < 2:\\n\\t\\treturn []\\n\\tprime_numbers = [i for i in range(x)]\\n\\tprime_numbers[1] = 0\\n\\tfor prime_number in prime_numbers:\\n\\t\\tif prime_number > math.sqrt(x):\\n\\t\\t\\tbreak\\n\\t\\tif prime_number == 0:\\n\\t\\t\\tcontinue\\n\\t\\tfor composite_number in range(2 * prime_number, x, prime_number):\\n\\t\\t\\tprime_numbers[composite_number] = 0\\n\\treturn [prime_number for prime_number in prime_numbers if prime_number != 0]\\n\\ndef is_prime(x):\\n\\tif x < 2:\\n\\t\\treturn False\\n\\tif x == 2 or x == 3 or x == 5:\\n\\t\\treturn True\\n\\tif x % 2 == 0 or x % 3 == 0 or x % 5 == 0:\\n\\t\\treturn False\\n\\tprime_number = 7\\n\\tdifference = 4\\n\\twhile prime_number <= math.sqrt(x):\\n\\t\\tif x % prime_number == 0:\\n\\t\\t\\treturn False\\n\\t\\tprime_number += difference\\n\\t\\tdifference = 6 - difference\\n\\treturn True\\n\\ndef prime_factorize(n):\\n\\tres = []\\n\\twhile n % 2 == 0:\\n\\t\\tres.append(2)\\n\\t\\tn //= 2\\n\\tf = 3\\n\\twhile f ** 2 <= n:\\n\\t\\tif n % f == 0:\\n\\t\\t\\tres.append(f)\\n\\t\\t\\tn //= f\\n\\t\\telse:\\n\\t\\t\\tf += 2\\n\\tif n != 1:\\n\\t\\tres.append(n)\\n\\treturn res\\nmod = 10 ** 9 + 7\\n\\nclass nCr:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.n = n\\n\\t\\tself.fa = [1] * (self.n + 1)\\n\\t\\tself.fi = [1] * (self.n + 1)\\n\\t\\tfor i in range(1, self.n + 1):\\n\\t\\t\\tself.fa[i] = self.fa[i - 1] * i % mod\\n\\t\\t\\tself.fi[i] = pow(self.fa[i], mod - 2, mod)\\n\\n\\tdef comb(self, n, r):\\n\\t\\tif n < r:\\n\\t\\t\\treturn 0\\n\\t\\tif n < 0 or r < 0:\\n\\t\\t\\treturn 0\\n\\t\\treturn self.fa[n] * self.fi[r] % mod * self.fi[n - r] % mod\\n\\ndef extgcd(a, b, d=0):\\n\\tg = a\\n\\tif b == 0:\\n\\t\\t(x, y) = (1, 0)\\n\\telse:\\n\\t\\t(x, y, g) = extgcd(b, a % b)\\n\\t\\t(x, y) = (y, x - a // b * y)\\n\\treturn (x, y, g)\\n\\nclass BinaryIndexedTree:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.n = n\\n\\t\\tself.BIT = [0] * (self.n + 1)\\n\\n\\tdef add(self, i, x):\\n\\t\\twhile i <= self.n:\\n\\t\\t\\tself.BIT[i] += x\\n\\t\\t\\ti += i & -i\\n\\n\\tdef query(self, i):\\n\\t\\tres = 0\\n\\t\\twhile i > 0:\\n\\t\\t\\tres += self.BIT[i]\\n\\t\\t\\ti -= i & -i\\n\\t\\treturn res\\n\\nclass AssociativeArray:\\n\\n\\tdef __init__(self, q):\\n\\t\\tself.dic = dict()\\n\\t\\tself.q = q\\n\\n\\tdef solve(self):\\n\\t\\tfor i in range(self.q):\\n\\t\\t\\tQuery = list(map(int, input().split()))\\n\\t\\t\\tif Query[0] == 0:\\n\\t\\t\\t\\t(x, y, z) = Query\\n\\t\\t\\t\\tself.dic[y] = z\\n\\t\\t\\telse:\\n\\t\\t\\t\\t(x, y) = Query\\n\\t\\t\\t\\tif y in self.dic:\\n\\t\\t\\t\\t\\tprint(self.dic[y])\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(0)\\n\\ndef floor_sum(n, m, a, b):\\n\\tres = 0\\n\\tif a >= m:\\n\\t\\tres += (n - 1) * n * (a // m) // 2\\n\\t\\ta %= m\\n\\tif b >= m:\\n\\t\\tres += n * (b // m)\\n\\t\\tb %= m\\n\\ty_max = (a * n + b) // m\\n\\tx_max = y_max * m - b\\n\\tif y_max == 0:\\n\\t\\treturn res\\n\\tres += y_max * (n + -x_max // a)\\n\\tres += floor_sum(y_max, a, m, (a - x_max % a) % a)\\n\\treturn res\\n\\ndef z_algorithm(s):\\n\\tstr_len = len(s)\\n\\tres = [0] * str_len\\n\\tres[str_len - 1] = str_len\\n\\t(i, j) = (1, 0)\\n\\twhile i < str_len:\\n\\t\\twhile i + j < str_len and s[i + j] == s[j]:\\n\\t\\t\\tj += 1\\n\\t\\tres[i] = j\\n\\t\\tif j == 0:\\n\\t\\t\\ti += 1\\n\\t\\t\\tcontinue\\n\\t\\tk = 1\\n\\t\\twhile i + k < str_len and j > res[k] + k:\\n\\t\\t\\tres[i + k] = res[k]\\n\\t\\t\\tk += 1\\n\\t\\ti += k\\n\\t\\tj -= k\\n\\treturn res\\n\\nclass Manacher:\\n\\n\\tdef __init__(self, s):\\n\\t\\tself.s = s\\n\\n\\tdef coustruct(self):\\n\\t\\t(i, j) = (0, 0)\\n\\t\\ts_len = len(self.s)\\n\\t\\tres = [0] * s_len\\n\\t\\twhile i < s_len:\\n\\t\\t\\twhile i - j >= 0 and i + j < s_len and (self.s[i - j] == self.s[i + j]):\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\tres[i] = j\\n\\t\\t\\tk = 1\\n\\t\\t\\twhile i - k >= 0 and k + res[i - k] < j:\\n\\t\\t\\t\\tk += 1\\n\\t\\t\\ti += k\\n\\t\\t\\tj -= k\\n\\ndef mod_sqrt(a, p):\\n\\tif a == 0:\\n\\t\\treturn 0\\n\\tif p == 2:\\n\\t\\treturn 1\\n\\tk = (p - 1) // 2\\n\\tif pow(a, k, p) != 1:\\n\\t\\treturn -1\\n\\twhile True:\\n\\t\\tn = random.randint(2, p - 1)\\n\\t\\tr = (n ** 2 - a) % p\\n\\t\\tif r == 0:\\n\\t\\t\\treturn n\\n\\t\\tif pow(r, k, p) == p - 1:\\n\\t\\t\\tbreak\\n\\tk += 1\\n\\t(w, x, y, z) = (n, 1, 1, 0)\\n\\twhile k:\\n\\t\\tif k % 2:\\n\\t\\t\\t(y, z) = (w * y + r * x * z, x * y + w * z)\\n\\t\\t(w, x) = (w * w + r * x * x, 2 * w * x)\\n\\t\\tw %= p\\n\\t\\tx %= p\\n\\t\\ty %= p\\n\\t\\tz %= p\\n\\t\\tk >>= 1\\n\\treturn y\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(1, n):\\n\\ta[i] += a[i - 1]\\nfor i in range(n):\\n\\ta[i] -= i + 1\\n\\ta[i] %= k\\na = [0] + a\\ndic = {}\\nans = 0\\nfor i in range(n):\\n\\tdic[a[i]] = dic.get(a[i], 0) + 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tdic[a[i - k + 1]] -= 1\\n\\tans += dic.get(a[i + 1], 0)\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\n(N, K) = map(int, input().strip().split(' '))\\nA = list(map(int, input().strip().split(' ')))\\nA = [0] + A\\nfor i in range(1, N + 1):\\n\\tA[i] += A[i - 1]\\n\\tA[i - 1] -= i - 1\\nA[N] -= N\\nrem_count = {}\\nrem_count[0] = 1\\nans = 0\\nfor i in range(1, N + 1):\\n\\tif i - K >= 0:\\n\\t\\trem_count[A[i - K] % K] -= 1\\n\\tif A[i] % K in rem_count:\\n\\t\\tans += rem_count[A[i] % K]\\n\\t\\trem_count[A[i] % K] += 1\\n\\telse:\\n\\t\\trem_count[A[i] % K] = 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom itertools import accumulate\\n(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] + list(accumulate(A))\\nQ = [(S[i] - i) % k for i in range(n + 1)]\\nd = defaultdict(int)\\nans = 0\\nfor j in range(n):\\n\\td[Q[j]] += 1\\n\\tif j - k + 1 >= 0:\\n\\t\\td[Q[j - k + 1]] -= 1\\n\\tans += d[Q[j + 1]]\\nprint(ans)\\n\", \"(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\ns = 0\\nB = [0]\\nC = {0: [0]}\\nfor (i, a) in enumerate(A):\\n\\ts = (s + a) % K\\n\\tn = (s - i - 1) % K\\n\\tB.append(n)\\n\\tif n not in C:\\n\\t\\tC[n] = []\\n\\tC[n].append(i + 1)\\nans = 0\\nfor (k, v) in C.items():\\n\\tif len(v) <= 1:\\n\\t\\tcontinue\\n\\tans_k = 0\\n\\tir = 0\\n\\tfor il in range(0, len(v) - 1):\\n\\t\\tl = v[il]\\n\\t\\twhile ir < len(v) and v[ir] - l <= K - 1:\\n\\t\\t\\tir += 1\\n\\t\\tans_k += ir - 1 - il\\n\\tans += ans_k\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncurrent = [0]\\ndic = {}\\ndic[0] = 1\\nans = 0\\nfor i in range(n):\\n\\tcurrent.append((current[-1] + a[i] - 1) % k)\\n\\tif i >= k - 1:\\n\\t\\tdic[current[-k - 1]] -= 1\\n\\tif current[-1] in dic:\\n\\t\\tans += dic[current[-1]]\\n\\t\\tdic[current[-1]] += 1\\n\\telse:\\n\\t\\tdic[current[-1]] = 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\na = list(map(int, input().split()))\\nA = [0]\\nfor i in range(N):\\n\\tA.append(A[-1] + a[i] - 1)\\nfor i in range(len(A)):\\n\\tA[i] %= K\\nD = {}\\nD[0] = 1\\nans = 0\\nfor i in range(1, N + 1):\\n\\tif A[i] in D:\\n\\t\\tans += D[A[i]]\\n\\t\\tD[A[i]] += 1\\n\\telse:\\n\\t\\tD[A[i]] = 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tD[A[i - K + 1]] -= 1\\nif K == 1:\\n\\tprint(0)\\nelse:\\n\\tprint(ans)\\n\", \"from itertools import accumulate, chain\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = accumulate(chain((0,), map(lambda x: int(x) - 1, input().split())))\\nd = defaultdict(list)\\nfor (i, a) in enumerate(A):\\n\\td[a % K].append(i)\\ncnt = 0\\nfor l in d.values():\\n\\tif len(l) == 1:\\n\\t\\tcontinue\\n\\tj = 0\\n\\tfor (i, li) in enumerate(l):\\n\\t\\tli += K\\n\\t\\twhile j < len(l) and l[j] < li:\\n\\t\\t\\tj += 1\\n\\t\\tcnt += j - i - 1\\nprint(cnt)\\n\", \"from itertools import accumulate\\nfrom collections import Counter\\n(N, K, *A) = map(int, open(0).read().split())\\nA = [a - 1 for a in A]\\nB = [0] + [b % K for b in accumulate(A)]\\nif K > N:\\n\\tCnt = Counter(B)\\n\\tans = sum((v * (v - 1) // 2 for v in Cnt.values()))\\nelse:\\n\\tCnt = Counter(B[:K])\\n\\tans = sum((v * (v - 1) // 2 for v in Cnt.values()))\\n\\tfor i in range(N + 1 - K):\\n\\t\\tCnt[B[i]] -= 1\\n\\t\\tans += Cnt[B[i + K]]\\n\\t\\tCnt[B[i + K]] += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [0] + list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i + 1] = (a[i + 1] + a[i] - 1) % k\\nfrom collections import defaultdict\\nd = defaultdict(int)\\nx = 0\\nd[0] = 1\\nfor i in range(1, n + 1):\\n\\tif i - k >= 0:\\n\\t\\td[a[i - k]] -= 1\\n\\tx += d[a[i]]\\n\\td[a[i]] += 1\\nprint(x)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict, deque\\n\\ndef resolve():\\n\\t(N, K) = list(map(int, input().split()))\\n\\tA = list(map(int, input().split()))\\n\\tA = accumulate([a % K for a in A])\\n\\tA = [0] + list(A)\\n\\tcnt = defaultdict(int)\\n\\tq = deque()\\n\\tans = 0\\n\\tfor r in range(N + 1):\\n\\t\\tt = (A[r] - r) % K\\n\\t\\tans += cnt[t]\\n\\t\\tcnt[t] += 1\\n\\t\\tq.append(t)\\n\\t\\tif len(q) == K:\\n\\t\\t\\tleft = q.popleft()\\n\\t\\t\\tcnt[left] -= 1\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tresolve()\\n__starting_point()\\n\", \"from collections import Counter\\n\\ndef solve():\\n\\tans = 0\\n\\t(N, K) = map(int, input().split())\\n\\tA = list(map(int, input().split()))\\n\\tcum = [0] * (N + 1)\\n\\tfor i in range(N):\\n\\t\\tcum[i + 1] = (cum[i] + A[i]) % K\\n\\tfor i in range(N):\\n\\t\\tcum[i + 1] = (i + 1 - cum[i + 1]) % K\\n\\tif N < K:\\n\\t\\tc = Counter(cum)\\n\\t\\tfor v in c.values():\\n\\t\\t\\tans += v * (v - 1) // 2\\n\\telse:\\n\\t\\tc = Counter(cum[:K - 1])\\n\\t\\tfor i in range(N):\\n\\t\\t\\tc[cum[i]] -= 1\\n\\t\\t\\tif i + K - 1 <= N:\\n\\t\\t\\t\\tc[cum[i + K - 1]] += 1\\n\\t\\t\\tans += c[cum[i]]\\n\\treturn ans\\nprint(solve())\\n\", \"from collections import defaultdict\\nimport numpy as np\\n(n, k) = map(int, input().split())\\na = [0] + list(np.cumsum(list(map(int, input().split()))))\\ndic = defaultdict(int)\\nc = 0\\nfor i in range(len(a)):\\n\\tp = (a[i] - i) % k\\n\\tc += dic[p]\\n\\tdic[p] += 1\\n\\tif i >= k - 1:\\n\\t\\tdic[(a[i - k + 1] - (i - k + 1)) % k] -= 1\\nprint(c)\\n\", \"from collections import defaultdict as dd\\n(N, K) = map(int, input().split())\\na = list(map(int, input().split()))\\nb = [val - 1 for val in a]\\nc = [0] * (N + 1)\\nfor (i, val) in enumerate(a):\\n\\tc[i + 1] = (c[i] + val - 1) % K\\ndic = dd(int)\\nK2 = min(N, K - 1)\\nright = K2\\nfor (k, val) in enumerate(c[1:K2 + 1]):\\n\\tdic[val] += 1\\nres = 0\\nprev = 0\\nfor val in c[1:]:\\n\\ttgt = prev\\n\\tres += dic[tgt]\\n\\tif right != N:\\n\\t\\tright += 1\\n\\t\\tdic[c[right]] += 1\\n\\tdic[val] = max(0, dic[val] - 1)\\n\\tprev = val\\nprint(res)\\n\", \"from collections import defaultdict\\n(n, k) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\naccm = [0] * (n + 1)\\nfor i in range(n):\\n\\taccm[i + 1] = accm[i] + A[i]\\nli = [(val - itr) % k for (itr, val) in enumerate(accm)]\\nans = 0\\nbox = defaultdict(int)\\nfor i in range(n + 1):\\n\\tif i >= k:\\n\\t\\tbox[li[i - k]] -= 1\\n\\tans += box[li[i]]\\n\\tbox[li[i]] += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [int(i) for i in input().split()]\\nans = 0\\ndp = dict()\\ndp[0] = 1\\npref = [0 for i in range(n + 1)]\\npre = 0\\nfor i in range(n):\\n\\tpre += a[i] - 1\\n\\tpre %= k\\n\\tpref[i + 1] = pre\\n\\tif i >= k - 1:\\n\\t\\tdp[pref[i - k + 1]] -= 1\\n\\ttry:\\n\\t\\tans += dp[pre]\\n\\t\\tdp[pre] += 1\\n\\texcept:\\n\\t\\tdp[pre] = 1\\nprint(ans)\\n\", \"import collections\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nm = [0]\\nfor i in range(n):\\n\\tm.append(m[-1] + a[i])\\nfor i in range(n + 1):\\n\\tm[i] -= i\\n\\tm[i] %= k\\nans = 0\\ndict = collections.defaultdict(int)\\nfor i in range(1, n + 1):\\n\\tx = m[i]\\n\\tif i <= k - 1:\\n\\t\\tdict[m[i - 1]] += 1\\n\\telse:\\n\\t\\tdict[m[i - 1]] += 1\\n\\t\\tdict[m[i - k]] -= 1\\n\\tans += dict[x]\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nfor i in range(N):\\n\\tA[i] -= 1\\n\\tA[i] %= K\\nhm = {}\\nhm[A[0]] = 1\\nout = 0\\nfor i in range(1, N):\\n\\tA[i] += A[i - 1]\\n\\tA[i] %= K\\nfor i in range(min(K - 1, N)):\\n\\tif A[i] == 0 and K != 1:\\n\\t\\tout += 1\\nfor i in range(1, min(N, K)):\\n\\tif A[i] in hm:\\n\\t\\thm[A[i]] += 1\\n\\telse:\\n\\t\\thm[A[i]] = 1\\n\\tout += hm[A[i]] - 1\\nfor i in range(min(K, N), N):\\n\\tif A[i] in hm:\\n\\t\\thm[A[i]] += 1\\n\\telse:\\n\\t\\thm[A[i]] = 1\\n\\thm[A[i - K]] -= 1\\n\\tout += hm[A[i]] - 1\\nprint(int(out))\\n\", \"import bisect\\n(n, k) = map(int, input().split())\\na = [0] + list(map(int, input().split()))\\nfor i in range(n):\\n\\ta[i + 1] += a[i]\\nans = 0\\nfor i in range(n):\\n\\ta[i + 1] -= i + 1\\n\\ta[i + 1] %= k\\nd = dict()\\nfor (i, x) in enumerate(a):\\n\\tif x in d:\\n\\t\\td[x].append(i)\\n\\telse:\\n\\t\\td[x] = [i]\\nans = 0\\nfor v in d.values():\\n\\tfor (i, x) in enumerate(v):\\n\\t\\tt = bisect.bisect_right(v, x + k - 1) - i - 1\\n\\t\\tans += t\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nm = list(map(int, input().split()))\\nT = [0] * (n + 1)\\nb = 0\\nfor (i, a) in enumerate(m):\\n\\tb += a - 1\\n\\tb %= k\\n\\tT[i + 1] = b\\ntmp = {}\\ncount = 0\\nfor (i, b) in enumerate(T):\\n\\tif i >= k:\\n\\t\\ttmp[T[i - k]] -= 1\\n\\tif b in tmp:\\n\\t\\tcount += tmp[b]\\n\\t\\ttmp[b] += 1\\n\\telse:\\n\\t\\ttmp[b] = 1\\nprint(count)\\n\", \"from collections import defaultdict\\nfrom itertools import accumulate\\nimport bisect\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = list(accumulate([0] + a))\\nb = [s[i] - i for i in range(n + 1)]\\nd = defaultdict(list)\\nfor i in range(n + 1):\\n\\td[b[i] % k].append(i)\\nans = 0\\nfor x in d.keys():\\n\\tl = d[x]\\n\\tfor j in range(len(l)):\\n\\t\\ty = l[j]\\n\\t\\tans += max(0, bisect.bisect_right(l, k + y - 1) - j - 1)\\nprint(ans)\\n\", \"from collections import defaultdict, deque\\n(n, k) = map(int, input().split())\\na = tuple(map(int, input().split()))\\nacc = [0]\\nt = 0\\nfor a_ in a:\\n\\tt = (t + a_ - 1) % k\\n\\tacc.append(t)\\nd = defaultdict(int)\\nret = 0\\ncount = 0\\ndq = deque()\\nfor acc_ in acc:\\n\\tret += d[acc_]\\n\\td[acc_] += 1\\n\\tdq.append(acc_)\\n\\tif len(dq) >= k:\\n\\t\\tv = dq.popleft()\\n\\t\\td[v] -= 1\\nprint(ret)\\n\", \"import sys\\nfrom itertools import accumulate\\nfrom collections import defaultdict\\ninput = sys.stdin.readline\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na = [i - 1 for i in a]\\nsuma = [0] + list(accumulate(a))\\nsuma = [i % k for i in suma]\\nrem = defaultdict(int)\\nans = 0\\nif k > n:\\n\\tfor i in range(n + 1):\\n\\t\\tx = suma[i]\\n\\t\\trem[x] += 1\\n\\tfor s in rem.values():\\n\\t\\tans += s * (s - 1) // 2\\n\\tprint(ans)\\n\\treturn\\nfor i in range(k):\\n\\tx = suma[i]\\n\\trem[x] += 1\\nfor s in rem.values():\\n\\tans += s * (s - 1) // 2\\nfor i in range(n - k + 1):\\n\\trem[suma[i] % k] -= 1\\n\\trem[suma[i + k] % k] += 1\\n\\tans += rem[suma[i + k]] - 1\\nprint(ans)\\n\", \"MOD = 10 ** 9 + 7\\nINF = 10 ** 10\\nimport sys\\nsys.setrecursionlimit(100000000)\\ndy = (-1, 0, 1, 0)\\ndx = (0, 1, 0, -1)\\n\\ndef main():\\n\\t(n, k) = list(map(int, input().split()))\\n\\ta = list(map(int, input().split()))\\n\\tcum = [0] * (n + 1)\\n\\tdic = {0: 1}\\n\\tans = 0\\n\\tfor i in range(min(n, k - 1)):\\n\\t\\tcum[i + 1] = (cum[i] + a[i]) % k\\n\\t\\ttmp = (cum[i + 1] - i - 1) % k\\n\\t\\tif tmp in dic:\\n\\t\\t\\tdic[tmp] += 1\\n\\t\\telse:\\n\\t\\t\\tdic[tmp] = 1\\n\\tfor v in list(dic.values()):\\n\\t\\tans += v * (v - 1) // 2\\n\\tfor i in range(max(n - k + 1, 0)):\\n\\t\\tdic[(cum[i] - i) % k] -= 1\\n\\t\\tcum[i + k] = (cum[i + k - 1] + a[i + k - 1]) % k\\n\\t\\ttmp = (cum[i + k] - i - k) % k\\n\\t\\tif tmp in dic:\\n\\t\\t\\tans += dic[tmp]\\n\\t\\t\\tdic[tmp] += 1\\n\\t\\telse:\\n\\t\\t\\tdic[tmp] = 1\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"import collections\\n(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\ntable = collections.defaultdict(int)\\nans = 0\\ns = [0] * (N + 1)\\na = set()\\nfor i in range(N):\\n\\ts[i + 1] = s[i] + A[i]\\ns = [(s[i] - i) % K for i in range(N + 1)]\\nfor i in range(N + 1):\\n\\tans += table[s[i]]\\n\\ttable[s[i]] += 1\\n\\tif i >= K - 1:\\n\\t\\ttable[s[i - K + 1]] -= 1\\nprint(ans)\\n\", \"import numpy as np\\nfrom collections import defaultdict\\n(N, K) = list(map(int, input().split()))\\nAs = np.array([0] + list(map(int, input().split())))\\nmods = As % K\\ncsum_mods = np.cumsum(mods)\\nmagic_array = (csum_mods - np.arange(0, N + 1)) % K\\nindices = defaultdict(list)\\nfor (i, m) in enumerate(magic_array.tolist()):\\n\\tindices[m].append(i)\\nans = 0\\nfor ls in list(indices.values()):\\n\\tj = 1\\n\\tfor i in range(len(ls)):\\n\\t\\twhile j < len(ls):\\n\\t\\t\\tif ls[j] - ls[i] < K:\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tans += j - i - 1\\nprint(ans)\\n\", \"import sys, queue, math, copy, itertools, bisect, collections, heapq\\n\\ndef main():\\n\\tLI = lambda : [int(x) for x in sys.stdin.readline().split()]\\n\\t(N, K) = LI()\\n\\tA = LI()\\n\\tc = 0\\n\\td = collections.Counter()\\n\\td[0] = 1\\n\\tans = 0\\n\\tr = [0] * (N + 1)\\n\\tfor (i, x) in enumerate(A):\\n\\t\\tif i >= K - 1:\\n\\t\\t\\td[r[i - (K - 1)]] -= 1\\n\\t\\tc = (c + x - 1) % K\\n\\t\\tans += d[c]\\n\\t\\td[c] += 1\\n\\t\\tr[i + 1] = c\\n\\tprint(ans)\\nmain()\\n\", \"(N, K) = (int(i) for i in input().split())\\nA = [int(i) for i in input().split()]\\ns = [0] * (N + 1)\\nfor i in range(N):\\n\\ts[i + 1] = s[i] + A[i]\\n\\ts[i + 1] %= K\\ns.reverse()\\nfor i in range(N + 1):\\n\\ts[i] += i % K\\n\\ts[i] %= K\\nd = {}\\nans = 0\\nfor i in range(N + 1):\\n\\tif s[i] not in d:\\n\\t\\td[s[i]] = 0\\n\\tif i >= K:\\n\\t\\td[s[i - K]] -= 1\\n\\tans += d[s[i]]\\n\\td[s[i]] += 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nB = [0] * (N + 1)\\nfor i in range(N):\\n\\tB[i + 1] = (B[i] + A[i] - 1) % K\\nr = 0\\nfrom collections import defaultdict\\nd = defaultdict(int)\\nfor i in range(N + 1):\\n\\tr += d[B[i]]\\n\\td[B[i]] += 1\\n\\tif K - 1 <= i:\\n\\t\\td[B[i - K + 1]] -= 1\\nprint(r)\\n\", \"import sys\\nfrom collections import defaultdict\\nimport bisect\\nsys.setrecursionlimit(10 ** 9)\\n(N, K) = map(int, input().split())\\nA = list(map(lambda x: int(x) - 1, input().split()))\\nS = [0] * (N + 1)\\nR = defaultdict(list)\\nR[0].append(0)\\nfor i in range(N):\\n\\tS[i + 1] = (S[i] + A[i]) % K\\n\\tR[S[i + 1]].append(i + 1)\\nans = 0\\nfor i in range(N + 1):\\n\\ta = bisect.bisect_right(R[S[i]], i)\\n\\tb = bisect.bisect_left(R[S[i]], i + K)\\n\\tans += b - a\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nal = list(map(int, input().split()))\\nimport itertools\\nal_ac = [0] + list(itertools.accumulate(al))\\nfor i in range(n + 1):\\n\\tal_ac[i] = (al_ac[i] - i) % k\\nfrom collections import defaultdict\\ndic = defaultdict(int)\\nans = 0\\nfor i in range(n + 1):\\n\\tans += dic[al_ac[i]]\\n\\tdic[al_ac[i]] += 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tdic[al_ac[i - k + 1]] -= 1\\nprint(ans)\\n\", \"def main():\\n\\t(n, k) = map(int, input().split())\\n\\tb = list(map(int, input().split()))\\n\\ta = [0] * (n + 1)\\n\\tfor i in range(n):\\n\\t\\ta[i + 1] = b[i]\\n\\tfor i in range(n + 1):\\n\\t\\tif 0 < i:\\n\\t\\t\\ta[i] += a[i - 1]\\n\\t\\ta[i] %= k\\n\\tfor i in range(1, n + 1):\\n\\t\\ta[i] = (a[i] - i % k + k) % k\\n\\tdic = {}\\n\\tans = 0\\n\\t(l, r) = (0, 0)\\n\\twhile r < n + 1:\\n\\t\\tx = a[r]\\n\\t\\tif k <= r - l:\\n\\t\\t\\tdic[a[l]] -= 1\\n\\t\\t\\tl += 1\\n\\t\\tif x in dic.keys():\\n\\t\\t\\tans += dic[x]\\n\\t\\t\\tdic[x] += 1\\n\\t\\telse:\\n\\t\\t\\tdic[x] = 1\\n\\t\\tr += 1\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"from collections import defaultdict\\nimport bisect\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\ns = 0\\nS = [0]\\nfor (i, a) in enumerate(A):\\n\\ts += a\\n\\tS.append(s % K)\\ncnt = 0\\ndic = {}\\nfor (i, s) in enumerate(S):\\n\\tx = (s - i) % K\\n\\tif x in dic:\\n\\t\\tcnt += dic[x]\\n\\t\\tdic[x] += 1\\n\\telse:\\n\\t\\tdic[x] = 1\\n\\tK_prev = i - K + 1\\n\\tif K_prev >= 0:\\n\\t\\ty = (S[K_prev] - K_prev) % K\\n\\t\\tdic[y] -= 1\\nprint(cnt)\\n\", \"import sys\\nfrom itertools import accumulate\\nfrom collections import Counter\\nINF = float('inf')\\n\\ndef solve(N: int, K: int, A: 'List[int]'):\\n\\tans = 0\\n\\tacc = [0] + list(accumulate(A))\\n\\tcnt = Counter()\\n\\tfor j in range(1, N + 1):\\n\\t\\tif j - 1 >= 0:\\n\\t\\t\\tcnt[(acc[j - 1] - (j - 1)) % K] += 1\\n\\t\\tif j - K >= 0:\\n\\t\\t\\tcnt[(acc[j - K] - (j - K)) % K] -= 1\\n\\t\\tans += cnt[(acc[j] - j) % K]\\n\\tprint(ans)\\n\\treturn\\n\\ndef main():\\n\\n\\tdef iterate_tokens():\\n\\t\\tfor line in sys.stdin:\\n\\t\\t\\tfor word in line.split():\\n\\t\\t\\t\\tyield word\\n\\ttokens = iterate_tokens()\\n\\tN = int(next(tokens))\\n\\tK = int(next(tokens))\\n\\tA = [int(next(tokens)) for _ in range(N)]\\n\\tsolve(N, K, A)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nl = [c - 1 for c in l]\\nl = [0] + l\\nfrom itertools import accumulate\\ncum = list(accumulate(l))\\ncum = [c % k for c in cum]\\nfrom collections import deque\\nans = 0\\nd = {}\\nq = deque()\\nfor i in range(n + 1):\\n\\tif cum[i] not in d:\\n\\t\\td[cum[i]] = 1\\n\\telse:\\n\\t\\tans += d[cum[i]]\\n\\t\\td[cum[i]] += 1\\n\\tq.append(cum[i])\\n\\tif len(q) == k:\\n\\t\\trem = q.popleft()\\n\\t\\td[rem] -= 1\\nprint(ans)\\n\", \"from collections import Counter\\n(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nS = [0] * (N + 1)\\nfor i in range(N):\\n\\tS[i + 1] = S[i] + A[i]\\ncnt = 0\\nC = Counter()\\nfor r in range(N + 1):\\n\\tR = (S[r] - r) % K\\n\\tcnt += C[R]\\n\\tC[R] += 1\\n\\tl = r - (K - 1)\\n\\tif l >= 0:\\n\\t\\tL = (S[l] - l) % K\\n\\t\\tC[L] -= 1\\nprint(cnt)\\n\", \"(n, k) = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nmo = [0]\\nmod = [0]\\nfor i in range(n):\\n\\ta = l[i] % k\\n\\tmo.append((a + mo[-1]) % k)\\n\\tmod.append((mo[-1] - (i + 1)) % k)\\ndic = {0: 1}\\nle = 1\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif le < k:\\n\\t\\tif mod[i] in dic:\\n\\t\\t\\tans += dic[mod[i]]\\n\\t\\t\\tdic[mod[i]] += 1\\n\\t\\telse:\\n\\t\\t\\tdic[mod[i]] = 1\\n\\t\\tle += 1\\n\\telse:\\n\\t\\tdic[mod[i - k]] -= 1\\n\\t\\tif mod[i] in dic:\\n\\t\\t\\tans += dic[mod[i]]\\n\\t\\t\\tdic[mod[i]] += 1\\n\\t\\telse:\\n\\t\\t\\tdic[mod[i]] = 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = [0] + list(map(int, input().split()))\\nfrom bisect import bisect_right as br\\n\\ndef main():\\n\\tdic = {}\\n\\tfor i in range(1, N + 1):\\n\\t\\tA[i] += A[i - 1]\\n\\tfor j in range(N + 1):\\n\\t\\tif (A[j] - j) % K in dic:\\n\\t\\t\\tdic[(A[j] - j) % K].append(j)\\n\\t\\telse:\\n\\t\\t\\tdic[(A[j] - j) % K] = [j]\\n\\tans = 0\\n\\tfor i in range(1, N + 1):\\n\\t\\ttmp = dic[(A[i] - i) % K]\\n\\t\\tleft = br(tmp, i - K)\\n\\t\\tright = br(tmp, i) - 1\\n\\t\\tans += right - left\\n\\tprint(ans)\\n\\treturn\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\nseq = list(map(int, input().split()))\\ncount = defaultdict(int)\\ncount[0] = 1\\nprefix = [0] * (n + 1)\\nans = 0\\nfor i in range(n):\\n\\tpre = prefix[i + 1] = (prefix[i] + seq[i] - 1) % k\\n\\tif i >= k - 1:\\n\\t\\tcount[prefix[i - k + 1]] -= 1\\n\\tans += count[pre]\\n\\tcount[pre] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom bisect import bisect_left, bisect_right\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na_cs = [0] * (n + 1)\\nfor i in range(n):\\n\\ta_cs[i + 1] = a_cs[i] + a[i]\\nd = defaultdict(list)\\nfor i in range(n + 1):\\n\\td[(a_cs[i] - i) % k].append(i)\\nans = 0\\nfor l in range(n):\\n\\tidx_1 = bisect_right(d[(a_cs[l] - l) % k], l)\\n\\tidx_2 = bisect_left(d[(a_cs[l] - l) % k], l + k)\\n\\tans += idx_2 - idx_1\\nprint(ans)\\n\", \"from collections import defaultdict\\nimport sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 5)\\n(N, K) = map(int, input().split())\\nA = [int(i) for i in input().split()]\\ns = [0]\\nfor i in range(N):\\n\\ts.append((s[-1] + A[i]) % K)\\nfor i in range(N + 1):\\n\\ts[i] = (s[i] - i) % K\\nd = defaultdict(int)\\nret = 0\\nfor i in range(min(K, N + 1)):\\n\\tret += d[s[i]]\\n\\td[s[i]] += 1\\nfor i in range(K, N + 1):\\n\\td[s[i - K]] -= 1\\n\\tret += d[s[i]]\\n\\td[s[i]] += 1\\nprint(ret)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nruisekiwa = [0 for _ in range(n + 1)]\\nfor i in range(n):\\n\\truisekiwa[i + 1] = (ruisekiwa[i] + a[i] - 1) % k\\ndp = defaultdict(lambda : 0)\\nans = 0\\ntmp = 0\\nfor i in range(n + 1):\\n\\ttmp += 1\\n\\tif tmp > k:\\n\\t\\tdp[ruisekiwa[i - k]] -= 1\\n\\tans += dp[ruisekiwa[i]]\\n\\tdp[ruisekiwa[i]] += 1\\nprint(ans)\\n\", \"def solve():\\n\\tfrom itertools import accumulate\\n\\tfrom sys import stdin\\n\\tf_i = stdin\\n\\t(N, K) = map(int, f_i.readline().split())\\n\\tA = map(int, f_i.readline().split())\\n\\tS = accumulate((a - 1 for a in A))\\n\\tS = (0,) + tuple((s % K for s in S))\\n\\trec = {}\\n\\tans = 0\\n\\tfor (j, S_j) in enumerate(S):\\n\\t\\tif j >= K:\\n\\t\\t\\trec[S[j - K]] -= 1\\n\\t\\tif S_j in rec:\\n\\t\\t\\tans += rec[S_j]\\n\\t\\t\\trec[S_j] += 1\\n\\t\\telse:\\n\\t\\t\\trec[S_j] = 1\\n\\tprint(ans)\\nsolve()\\n\", \"(N, K) = [int(n) for n in input().split()]\\nA = [int(n) for n in input().split()]\\ncount = 0\\nfor i in range(1, N + 1):\\n\\tA[i - 1] = A[i - 1] - 1\\ncheck = {0: [0, 1, [0]]}\\ns = 0\\nfor i in range(1, N + 1):\\n\\ts = (s + A[i - 1]) % K\\n\\tif s in check:\\n\\t\\tj = check[s][0]\\n\\t\\tl = check[s][1]\\n\\t\\twhile j < l and i - check[s][2][j] >= K:\\n\\t\\t\\tj += 1\\n\\t\\tcheck[s][0] = j\\n\\t\\tcount += l - j\\n\\t\\tcheck[s][2].append(i)\\n\\t\\tcheck[s][1] = l + 1\\n\\telse:\\n\\t\\tcheck[s] = [0, 1, [i]]\\nprint(count)\\n\", \"from collections import Counter\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA = list(map(lambda x: x % K, A))\\nS = [0 for _ in range(N + 1)]\\nfor i in range(N):\\n\\tS[i + 1] = (S[i] + A[i] - 1) % K\\nans = 0\\nC = Counter(S[:K])\\nfor (k, v) in C.items():\\n\\tans += v * (v - 1) // 2\\nfor i in range(K, N + 1):\\n\\tdeln = S[i - K]\\n\\tC[deln] -= 1\\n\\taddn = S[i]\\n\\tif addn in C:\\n\\t\\tans += C[addn]\\n\\t\\tC[addn] += 1\\n\\telse:\\n\\t\\tC[addn] = 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nX = list(map(int, input().split()))\\ncs = [0] * (N + 1)\\nfor i in range(N):\\n\\tcs[i + 1] = cs[i] + X[i]\\ny = [(cs[i] - i) % K for i in range(N + 1)]\\nctr = defaultdict(int)\\nans = 0\\nfor i in range(N + 1):\\n\\tans += ctr[y[i]]\\n\\tctr[y[i]] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tctr[y[i - K + 1]] -= 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nc = 0\\nfrom collections import Counter\\nd = Counter()\\nd[0] = 1\\nans = 0\\nr = [0] * (n + 1)\\nfor (i, x) in enumerate(A):\\n\\tif i >= k - 1:\\n\\t\\td[r[i - (k - 1)]] -= 1\\n\\tc = (c + x - 1) % k\\n\\tans += d[c]\\n\\td[c] += 1\\n\\tr[i + 1] = c\\nprint(ans)\\n\", \"from collections import defaultdict\\nd = defaultdict(int)\\n(N, K) = map(int, input().split())\\nA = [0] + list(map(int, input().split()))\\nS = [None] * (N + 1)\\nS[0] = 0\\ncnt = 0\\nd[0] = 1\\nfor i in range(1, N + 1):\\n\\tS[i] = (S[i - 1] + A[i] - 1) % K\\nfor i in range(1, N + 1):\\n\\tif i - K >= 0:\\n\\t\\td[S[i - K]] -= 1\\n\\tcnt += d[S[i]]\\n\\td[S[i]] += 1\\nprint(cnt)\\n\", \"import sys\\nfrom bisect import bisect_left\\n\\ndef solve():\\n\\tinput = sys.stdin.readline\\n\\t(N, K) = map(int, input().split())\\n\\tA = [int(a) % K - 1 for a in input().split()]\\n\\tsum_A = [0 for _ in range(N + 1)]\\n\\tcount = 0\\n\\tmodK = dict()\\n\\tmodK[0] = [0]\\n\\tfor i in range(N):\\n\\t\\tsum_A[i + 1] = (sum_A[i] + A[i]) % K\\n\\t\\tif sum_A[i + 1] not in modK:\\n\\t\\t\\tmodK[sum_A[i + 1]] = [i + 1]\\n\\t\\telse:\\n\\t\\t\\tmodK[sum_A[i + 1]].append(i + 1)\\n\\tfor key in modK:\\n\\t\\tlenK = len(modK[key])\\n\\t\\tfor (i, a) in enumerate(modK[key]):\\n\\t\\t\\tcount += bisect_left(modK[key], a + K, i, lenK) - i - 1\\n\\tprint(count)\\n\\treturn 0\\n\\ndef __starting_point():\\n\\tsolve()\\n__starting_point()\\n\", \"from collections import defaultdict\\n\\ndef gets():\\n\\treturn list(map(int, input().split()))\\n(N, K) = gets()\\nA = gets()\\nS = [0] * (N + 1)\\nfor i in range(N):\\n\\tS[i + 1] = (S[i] + A[i] - 1) % K\\ncnt = defaultdict(int)\\nans = 0\\ncnt[0] += 1\\nfor i in range(1, N + 1):\\n\\tif i - K >= 0:\\n\\t\\tcnt[S[i - K]] -= 1\\n\\tans += cnt[S[i]]\\n\\tcnt[S[i]] += 1\\nprint(ans)\\n\", \"def main():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\ta = [i - 1 for i in a]\\n\\tfrom itertools import accumulate\\n\\timport bisect\\n\\ta = [0] + list(accumulate(a))\\n\\td = dict()\\n\\ta = [i % k for i in a]\\n\\tcnt = 0\\n\\tfor (j, i) in enumerate(a):\\n\\t\\tif i not in d.keys():\\n\\t\\t\\td[i] = [j]\\n\\t\\telse:\\n\\t\\t\\td[i].append(j)\\n\\tfor l in d.values():\\n\\t\\tfor (j, i) in enumerate(l):\\n\\t\\t\\tcnt += bisect.bisect_left(l, i + k) - j - 1\\n\\tprint(cnt)\\nmain()\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0]\\nfor i in range(N):\\n\\tS.append((S[-1] + A[i] - 1) % K)\\nD = defaultdict(int)\\ncount = 0\\nfor i in range(N + 1):\\n\\tcount += D[S[i]]\\n\\tD[S[i]] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\tD[S[i - K + 1]] -= 1\\nprint(count)\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nalist = list(map(int, input().split()))\\nslist = [0]\\nfor i in range(N):\\n\\tslist.append(slist[-1] + alist[i])\\nsslist = []\\nfor i in range(N + 1):\\n\\tsslist.append((slist[i] - i) % K)\\nanswer = 0\\nsi_dic = defaultdict(int)\\nfor i in range(N + 1):\\n\\tif i - K >= 0:\\n\\t\\tsi_dic[sslist[i - K]] -= 1\\n\\tanswer += si_dic[sslist[i]]\\n\\tsi_dic[sslist[i]] += 1\\nprint(answer)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = [0]\\nfor i in range(len(a)):\\n\\ts.append(s[-1] + a[i])\\nss = []\\nfor i in range(len(s)):\\n\\tss.append((s[i] - i) % k)\\nans = 0\\nfrom collections import Counter\\nc = Counter(ss[1:min(k, len(ss))])\\nfor i in range(len(ss)):\\n\\tans += c[ss[i]]\\n\\tif i + 1 < len(ss):\\n\\t\\tc[ss[i + 1]] -= 1\\n\\tif i + k < len(ss):\\n\\t\\tc[ss[i + k]] += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na2 = [0]\\nfor i in range(n):\\n\\ta2.append(a2[-1] + a[i] - 1)\\na2 = [a2[i] % k for i in range(n + 1)]\\ncount = {}\\ntemp = a2[:min(k, len(a2))]\\nfor i in temp:\\n\\tcount.setdefault(i, 0)\\n\\tcount[i] += 1\\nans = 0\\nfor i in count.values():\\n\\tans += i * (i - 1) // 2\\nfor i in range(1, len(a2) - len(temp) + 1):\\n\\ttemp = a2[i:i + len(temp)]\\n\\ttemp2 = temp[:-1]\\n\\tans += temp2.count(temp[-1])\\nprint(ans)\\n\", \"from collections import Counter\\nfrom itertools import accumulate\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nd = Counter()\\nA = [0] + list(accumulate(A))\\nA = [a % K for a in A]\\nans = 0\\nfor i in range(N + 1):\\n\\tans += d[(A[i] - i) % K]\\n\\td[(A[i] - i) % K] += 1\\n\\tif i - K + 1 >= 0:\\n\\t\\td[(A[i - K + 1] - (i - K + 1)) % K] -= 1\\nprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nif K == 1:\\n\\tprint(0)\\nelse:\\n\\t(S, LUT, ans) = ([0], {0: 1}, 0)\\n\\tfor a in A:\\n\\t\\tS.append(S[-1] + a)\\n\\tfor i in range(1, N + 1):\\n\\t\\tp = (S[i] - i) % K\\n\\t\\tans += LUT.get(p, 0)\\n\\t\\tLUT[p] = LUT.get(p, 0) + 1\\n\\t\\tif i - K + 1 >= 0:\\n\\t\\t\\tLUT[(S[i - K + 1] - i + K - 1) % K] -= 1\\n\\tprint(ans)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nX = [0 for _ in range(N)]\\nD = {0: [-1]}\\nE = {0: 1}\\nX[0] = (A[0] - 1) % K\\nif X[0] in D:\\n\\tD[X[0]].append(0)\\n\\tE[X[0]] += 1\\nelse:\\n\\tD[X[0]] = [0]\\n\\tE[X[0]] = 1\\nfor i in range(1, N):\\n\\tX[i] = (X[i - 1] + A[i] - 1) % K\\n\\tif X[i] in D:\\n\\t\\tD[X[i]].append(i)\\n\\t\\tE[X[i]] += 1\\n\\telse:\\n\\t\\tD[X[i]] = [i]\\n\\t\\tE[X[i]] = 1\\nS = 0\\nfor i in D:\\n\\tn = E[i]\\n\\tif n > 1:\\n\\t\\tL = D[i][:]\\n\\t\\tm = L[-1]\\n\\t\\tfor j in range(n - 1):\\n\\t\\t\\tx = L[j]\\n\\t\\t\\tif m - x < K:\\n\\t\\t\\t\\tS += n - 1 - j\\n\\t\\t\\telse:\\n\\t\\t\\t\\t(l, r) = (j, n)\\n\\t\\t\\t\\td = (l + r) // 2\\n\\t\\t\\t\\ttmp = 2 * n\\n\\t\\t\\t\\twhile tmp != 0:\\n\\t\\t\\t\\t\\tif L[d] - x <= K - 1:\\n\\t\\t\\t\\t\\t\\tl = d\\n\\t\\t\\t\\t\\t\\td = (l + r) // 2\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tr = d\\n\\t\\t\\t\\t\\t\\td = (l + r) // 2\\n\\t\\t\\t\\t\\ttmp //= 2\\n\\t\\t\\t\\tS += d - j\\nprint(S)\\n\", \"from collections import defaultdict as d\\nfrom itertools import accumulate as ac\\n(n, k) = map(int, input().split())\\na = [0] + list(ac(list(map(int, input().split()))))\\nb = d(int)\\nc = 0\\nfor i in range(n + 1):\\n\\tp = (a[i] - i) % k\\n\\tc += b[p]\\n\\tb[p] += 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tb[(a[i - k + 1] - i + k - 1) % k] -= 1\\nprint(c)\\n\", \"import sys\\nimport numpy as np\\nfrom collections import defaultdict\\nsr = lambda : sys.stdin.readline().rstrip()\\nir = lambda : int(sr())\\nlr = lambda : list(map(int, sr().split()))\\n(N, K) = lr()\\nA = np.array([1] + lr())\\nA = (A - 1) % K\\nN += 1\\nAcum = (A.cumsum() % K).tolist()\\nanswer = 0\\ndic = defaultdict(int)\\nfor (i, cur) in enumerate(Acum):\\n\\tanswer += dic[cur]\\n\\tdic[cur] += 1\\n\\tif i >= K - 1:\\n\\t\\tvanish = Acum[i - (K - 1)]\\n\\t\\tdic[vanish] -= 1\\nprint(answer)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS = [0] * (N + 1)\\nS2 = [0] * (N + 1)\\ndict = {}\\nfor i in range(N):\\n\\tS[i + 1] = S[i] + A[i]\\n\\tS2[i + 1] = (S[i + 1] - i - 1) % K\\nans = 0\\nfor i in range(N + 1):\\n\\tif dict.get(S2[i], 0):\\n\\t\\tans += dict[S2[i]]\\n\\tdict[S2[i]] = dict.get(S2[i], 0) + 1\\n\\tif i >= K - 1:\\n\\t\\tdict[S2[i - (K - 1)]] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nans = 0\\nS = [0] * (N + 1)\\nT = [0] * (N + 1)\\nfor i in range(N):\\n\\tS[i + 1] = (S[i] + A[i]) % K\\n\\tT[i + 1] = (S[i + 1] - (i + 1)) % K\\nrest = defaultdict(int)\\nfor i in range(N + 1):\\n\\tif i < K:\\n\\t\\tans += rest[T[i]]\\n\\t\\trest[T[i]] += 1\\n\\telse:\\n\\t\\trest[T[i - K]] -= 1\\n\\t\\tans += rest[T[i]]\\n\\t\\trest[T[i]] += 1\\nprint(ans)\\n\", \"from collections import Counter\\n(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nans = 0\\nc = Counter()\\nc[0] = 1\\nS = [0] * (N + 1)\\ns = 0\\nfor (idx, a) in enumerate(A):\\n\\tidx += 1\\n\\tif idx >= K:\\n\\t\\tc[S[idx - K]] -= 1\\n\\ts = (s + a) % K\\n\\tb = (s - idx) % K\\n\\tS[idx] = b\\n\\tans += c[b]\\n\\tc[b] += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n\\ndef cnt_func(X):\\n\\tres = 0\\n\\tright = 0\\n\\tL = len(X)\\n\\tfor i in range(L):\\n\\t\\twhile right + 1 < L and X[right + 1] < K + X[i]:\\n\\t\\t\\tright += 1\\n\\t\\tres += right - i\\n\\treturn res\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA.insert(0, 0)\\nfor i in range(1, N + 1):\\n\\tA[i] += A[i - 1]\\nB = [0 for i in range(N + 1)]\\nfor i in range(N + 1):\\n\\tB[i] = (A[i] - i) % K\\nans = 0\\nMod = defaultdict(list)\\nfor i in range(N + 1):\\n\\tMod[B[i]].append(i)\\nfor X in Mod.values():\\n\\tans += cnt_func(X)\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nans = 0\\nshukei = defaultdict(int)\\nS = [0] * (n + 1)\\nT = [0] * (n + 1)\\nfor i in range(1, n + 1):\\n\\tS[i] = S[i - 1] + A[i - 1]\\n\\tS[i] %= k\\n\\tT[i] = S[i] - i\\n\\tT[i] %= k\\nans = 0\\nif k > n + 1:\\n\\tfor i in range(n + 1):\\n\\t\\tshukei[T[i]] += 1\\n\\tfor (key, num) in list(shukei.items()):\\n\\t\\tans += num * (num - 1) // 2\\nelse:\\n\\tshukei = defaultdict(int)\\n\\tfor i in range(k):\\n\\t\\tshukei[T[i]] += 1\\n\\tfor (key, num) in list(shukei.items()):\\n\\t\\tans += num * (num - 1) // 2\\n\\tfor i in range(k, n + 1):\\n\\t\\tj = i - k\\n\\t\\tshukei[T[j]] -= 1\\n\\t\\ttemp = T[i]\\n\\t\\tnum = shukei[temp]\\n\\t\\tans += num\\n\\t\\tshukei[temp] += 1\\nprint(ans)\\n\", \"from collections import defaultdict, deque\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\ncumA = [0] * (N + 1)\\nfor i in range(1, N + 1):\\n\\tcumA[i] = cumA[i - 1] + A[i - 1]\\ncnt = defaultdict(int)\\nque = deque([])\\nans = 0\\nfor (i, c) in enumerate(cumA):\\n\\twhile que and que[0][0] <= i - K:\\n\\t\\tcnt[que.popleft()[1]] -= 1\\n\\tdiff = (i - c) % K\\n\\tans += cnt[diff]\\n\\tcnt[diff] += 1\\n\\tque.append((i, diff))\\nprint(ans)\\n\", \"from itertools import *\\nfrom collections import defaultdict\\n\\ndef ints():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef readi():\\n\\treturn int(input())\\n(N, K) = ints()\\nA = ints()\\nS = [0] + list(accumulate(A))\\n\\ndef f(i):\\n\\treturn (S[i] - i) % K\\ns = 0\\nmemo = defaultdict(int)\\nfor j in range(1, N + 1):\\n\\tfj = f(j)\\n\\tif j - K >= 0:\\n\\t\\tmemo[f(j - K)] -= 1\\n\\tmemo[f(j - 1)] += 1\\n\\ts += memo[fj]\\nprint(s)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\na = [int(i) - 1 for i in input().split()]\\ntotal = 0\\ns = [0] * (n + 1)\\nfor i in range(n):\\n\\ttotal += a[i]\\n\\ts[i + 1] = total % k\\nqueue = deque()\\nmp = {}\\nans = 0\\nfor j in range(n + 1):\\n\\trem = s[j]\\n\\tqueue.append(rem)\\n\\tif rem in mp:\\n\\t\\tans += mp[rem]\\n\\t\\tmp[rem] += 1\\n\\telse:\\n\\t\\tmp[rem] = 1\\n\\tif len(queue) == k:\\n\\t\\tmp[queue.popleft()] -= 1\\nprint(ans)\\n\", \"from itertools import accumulate\\nfrom collections import defaultdict\\n(N, K) = map(int, input().split())\\nXs = list(accumulate([0] + [int(x) for x in input().split()]))\\nXs = [(x - i) % K for (i, x) in enumerate(Xs)]\\n(d, r) = (defaultdict(int), 0)\\nfor (i, x) in enumerate(Xs):\\n\\td[x] += 1\\n\\tif i >= K:\\n\\t\\td[Xs[i - K]] -= 1\\n\\tr += d[x] - 1\\nprint(r)\\n\", \"import sys\\nfrom collections import defaultdict\\nfrom collections import deque\\nimport numpy as np\\nimport heapq\\nfrom heapq import heappush, heappop\\nimport itertools\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nsys.setrecursionlimit(10 ** 7)\\n(N, K) = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nA = [0] + A\\nA = list(itertools.accumulate(A))\\nA = [x % K for x in A]\\ncnt = defaultdict(int)\\nans = 0\\nfor (i, a) in enumerate(A):\\n\\tx = (a - i) % K\\n\\tans += cnt[x]\\n\\tcnt[x] += 1\\n\\tif i >= K - 1:\\n\\t\\ty = (A[i - K + 1] - (i - K + 1)) % K\\n\\t\\tcnt[y] -= 1\\nprint(ans)\\n\", \"from collections import Counter\\n(N, K) = map(int, input().split())\\nA = list(map(lambda s: int(s) % K, input().split()))\\ncumAm1 = [1] + A\\nfor i in range(1, N + 1):\\n\\tcumAm1[i] = (-1 + cumAm1[i - 1] + cumAm1[i]) % K\\ncounts = Counter()\\nans = 0\\nfor i in range(N + 1):\\n\\tif i >= K:\\n\\t\\tcounts[cumAm1[i - K]] -= 1\\n\\tcur = cumAm1[i]\\n\\tans += counts[cur]\\n\\tcounts[cur] += 1\\nprint(ans)\\n\", \"import sys\\nfrom itertools import accumulate\\nfrom collections import defaultdict\\ninput = sys.stdin.readline\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nS_ = list(map(lambda t: (t[1] - t[0]) % K, enumerate(accumulate([0] + A))))\\ncount = 0\\nC = defaultdict(int)\\nfor t in range(1, N + 1):\\n\\tC[S_[t - 1]] += 1\\n\\tif t - K >= 0:\\n\\t\\tC[S_[t - K]] -= 1\\n\\tcount += C[S_[t]]\\nprint(count)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nA = [(a - 1) % K for a in A]\\nS = [0 for i in range(N + 1)]\\nfor i in range(1, N + 1):\\n\\tS[i] = (S[i - 1] + A[i - 1]) % K\\nkinds = set(S)\\ncounts = {}\\nans = 0\\nfor k in kinds:\\n\\tcounts[k] = 0\\nfor i in range(N + 1):\\n\\tcounts[S[i]] += 1\\n\\tif i >= K:\\n\\t\\tcounts[S[i - K]] -= 1\\n\\tans += counts[S[i]] - 1\\nprint(ans)\\n\", \"def add(x):\\n\\tif x in dic:\\n\\t\\tdic[x] += 1\\n\\telse:\\n\\t\\tdic[x] = 1\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nb = [0]\\nfor i in range(n):\\n\\tb.append((b[-1] + a[i] - 1) % k)\\ndic = {}\\nans = 0\\nfor i in range(n + 1):\\n\\tadd(b[i])\\n\\tans += dic[b[i]] - 1\\n\\tif i - k + 1 >= 0:\\n\\t\\tdic[b[i - k + 1]] -= 1\\nprint(ans)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\ns = [0] + list(map(int, input().split()))\\nfor i in range(n):\\n\\ts[i + 1] += s[i]\\ndic = defaultdict(int)\\nans = 0\\nfor i in range(n + 1):\\n\\tx = (s[i] - i) % k\\n\\tans += dic[x]\\n\\tdic[x] += 1\\n\\tif i >= k - 1:\\n\\t\\ty = (s[i - k + 1] - (i - k + 1)) % k\\n\\t\\tdic[y] -= 1\\nprint(ans)\\n\", \"import sys\\nfrom collections import defaultdict as dd\\nfrom bisect import bisect_left as bl\\ninput = sys.stdin.readline\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nres = 0\\ncs = [0] * (N + 1)\\nd = dd(list)\\nd[0].append(0)\\nfor i in range(N):\\n\\tcs[i + 1] = cs[i] + A[i] - 1\\n\\tcs[i + 1] %= K\\n\\td[cs[i + 1]].append(i + 1)\\nfor i in range(N):\\n\\tx = bl(d[cs[i]], i) + 1\\n\\ty = bl(d[cs[i]], i + K)\\n\\tres += y - x\\nprint(res)\\n\", \"from collections import defaultdict\\n(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\ndelta_count = defaultdict(int)\\nsum = [0]\\ndelta_count[0] += 1\\nfor i in range(n):\\n\\tsum.append(sum[i] + A[i])\\nans = 0\\nfor i in range(1, min(n + 1, k)):\\n\\tx = (sum[i] - i) % k\\n\\tans += delta_count[x]\\n\\tdelta_count[x] += 1\\nfor i in range(min(n + 1, k), n + 1):\\n\\tdelta_count[(sum[i - k] - i - k) % k] -= 1\\n\\tx = (sum[i] - i) % k\\n\\tans += delta_count[x]\\n\\tdelta_count[x] += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [0] + list(map(int, input().split()))\\nfor i in range(1, n + 1):\\n\\ta[i] += a[i - 1]\\nfor i in range(1, n + 1):\\n\\ta[i] = (a[i] - i) % k\\nb = [[] for i in range(n + 1)]\\nfor i in range(n + 1):\\n\\tb[i] = [a[i], i]\\nb.sort()\\nleft = 0\\nright = 0\\nans = 0\\nwhile left < n:\\n\\twhile right < n:\\n\\t\\tif b[left][0] == b[right + 1][0] and b[right + 1][1] - b[left][1] < k:\\n\\t\\t\\tright += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tans += right - left\\n\\tleft += 1\\nprint(ans)\\n\", \"from collections import defaultdict\\nfrom bisect import bisect_left\\n(n, k) = map(int, input().split())\\na = [0] + list(map(int, input().split()))\\nfor i in range(1, n + 1):\\n\\ta[i] -= 1\\nfor i in range(n):\\n\\ta[i + 1] += a[i]\\n\\ta[i] %= k\\na[i + 1] %= k\\nc = defaultdict(list)\\nfor i in range(n + 1):\\n\\tc[a[i]].append(i)\\nans = 0\\nfor v in c.values():\\n\\tfor i in range(len(v)):\\n\\t\\tans += bisect_left(v, v[i] + k) - i - 1\\nprint(ans)\\n\", \"from bisect import bisect_left\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n\\ta[i] -= 1\\nsm = 0\\na_sm = [0]\\nfor i in range(n):\\n\\tsm += a[i]\\n\\tsm %= k\\n\\ta_sm.append(sm)\\ndic = {}\\nfor i in range(n + 1):\\n\\tif a_sm[i] in dic:\\n\\t\\tdic[a_sm[i]].append(i)\\n\\telse:\\n\\t\\tdic[a_sm[i]] = [i]\\nfor t in dic:\\n\\tfor j in range(len(dic[t]) - 1):\\n\\t\\tdm = bisect_left(dic[t], dic[t][j] + k)\\n\\t\\tans += dm - j - 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na[0] = (a[0] - 1) % k\\nfor i in range(1, n):\\n\\ta[i] = (a[i] + a[i - 1] - 1) % k\\nans = 0\\nb = {0: 1}\\nfor i in range(n):\\n\\tif i > 0:\\n\\t\\tb[a[i - 1]] = b.get(a[i - 1], 0) + 1\\n\\tif i >= k:\\n\\t\\tb[a[i - k]] -= 1\\n\\tif i == k - 1:\\n\\t\\tb[0] -= 1\\n\\tans += b.get(a[i], 0)\\nprint(ans)\\n\", \"import sys\\nfrom collections import defaultdict\\nstdin = sys.stdin\\nni = lambda : int(ns())\\nna = lambda : list(map(int, stdin.readline().split()))\\nns = lambda : stdin.readline().rstrip()\\n(n, k) = na()\\na = na()\\ncum = [0] * (n + 1)\\nfor i in range(n):\\n\\tcum[i + 1] = (cum[i] + a[i] + k - 1) % k\\ndic = defaultdict(int)\\nans = 0\\nfor i in range(n + 1):\\n\\tans += dic[cum[i]]\\n\\tdic[cum[i]] += 1\\n\\tif i - (k - 1) >= 0:\\n\\t\\tdic[cum[i - (k - 1)]] -= 1\\nprint(ans)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"5 4\\n1 4 2 3 5\\n\", \"8 4\\n4 2 4 2 4 2 4 2\\n\", \"10 7\\n14 15 92 65 35 89 79 32 38 46\\n\", \"5 1\\n1 4 2 3 5\", \"10 7\\n14 15 101 65 35 89 79 32 38 46\", \"10 8\\n14 26 111 65 35 89 95 32 38 46\", \"10 3\\n14 26 111 65 35 89 95 32 38 46\", \"5 8\\n1 4 2 3 5\", \"10 7\\n18 15 92 65 35 89 79 32 38 46\", \"10 3\\n14 26 111 65 35 89 184 32 38 46\", \"10 2\\n40 2 100 26 22 15 2 19 8 46\", \"10 7\\n18 15 92 65 35 89 79 12 38 46\", \"8 4\\n4 1 4 2 4 2 4 2\", \"8 3\\n4 1 4 2 4 1 4 2\", \"10 11\\n14 26 111 0 35 27 95 13 38 63\", \"10 6\\n1 7 92 130 3 89 79 12 11 46\", \"5 1\\n1 4 2 4 5\", \"10 8\\n14 15 101 65 35 89 79 32 38 46\", \"0 1\\n1 4 2 4 5\", \"10 8\\n14 15 101 65 35 89 95 32 38 46\", \"0 1\\n1 4 2 6 5\", \"10 8\\n14 26 101 65 35 89 95 32 38 46\", \"0 1\\n1 0 2 6 5\", \"0 1\\n0 0 2 6 5\", \"0 1\\n0 0 2 6 3\", \"10 3\\n14 26 111 26 35 89 95 32 38 46\", \"0 1\\n0 0 0 6 3\", \"10 1\\n14 26 111 26 35 89 95 32 38 46\", \"0 2\\n0 0 0 6 3\", \"10 1\\n14 26 111 26 13 89 95 32 38 46\", \"0 2\\n0 1 0 6 3\", \"10 1\\n14 26 111 26 13 89 55 32 38 46\", \"0 1\\n0 1 0 6 3\", \"10 1\\n14 26 111 26 22 89 55 32 38 46\", \"0 1\\n0 2 0 6 3\", \"10 1\\n14 26 111 26 22 89 55 36 38 46\", \"0 1\\n0 2 0 6 0\", \"10 1\\n14 26 111 26 22 89 0 36 38 46\", \"0 1\\n-1 2 0 6 0\", \"10 1\\n14 9 111 26 22 89 0 36 38 46\", \"0 1\\n-1 2 1 6 0\", \"10 1\\n14 9 111 26 22 89 1 36 38 46\", \"0 1\\n-1 4 1 6 0\", \"10 1\\n14 9 111 26 22 89 1 19 38 46\", \"0 1\\n-1 4 1 0 0\", \"10 1\\n27 9 111 26 22 89 1 19 38 46\", \"0 1\\n-1 4 1 0 1\", \"10 1\\n27 9 111 26 22 89 1 19 30 46\", \"0 1\\n-1 4 1 1 1\", \"10 1\\n27 9 110 26 22 89 1 19 30 46\", \"1 1\\n-1 4 1 1 1\", \"10 1\\n27 9 110 26 22 89 1 19 40 46\", \"1 1\\n-1 4 1 1 0\", \"10 1\\n27 9 110 26 22 15 1 19 40 46\", \"1 1\\n-1 8 1 1 0\", \"10 1\\n40 9 110 26 22 15 1 19 40 46\", \"1 1\\n-1 8 1 1 1\", \"10 1\\n40 9 110 26 22 15 2 19 40 46\", \"1 1\\n-1 15 1 1 1\", \"10 1\\n40 16 110 26 22 15 2 19 40 46\", \"0 1\\n-1 15 1 1 1\", \"10 1\\n40 2 110 26 22 15 2 19 40 46\", \"0 1\\n-1 15 1 2 1\", \"10 1\\n40 2 110 26 22 15 2 19 8 46\", \"0 1\\n0 15 1 2 1\", \"10 1\\n40 2 100 26 22 15 2 19 8 46\", \"0 1\\n0 1 1 2 1\", \"10 1\\n40 2 100 26 22 15 2 19 13 46\", \"0 1\\n0 1 1 4 1\", \"10 1\\n39 2 100 26 22 15 2 19 13 46\", \"0 2\\n0 1 1 4 1\", \"10 1\\n69 2 100 26 22 15 2 19 13 46\", \"10 1\\n69 2 100 22 22 15 2 19 13 46\", \"8 4\\n4 4 4 2 4 2 4 2\", \"5 1\\n1 0 2 3 5\", \"10 7\\n14 15 101 65 35 89 79 18 38 46\", \"3 8\\n14 15 101 65 35 89 79 32 38 46\", \"0 1\\n0 4 2 4 5\", \"10 13\\n14 15 101 65 35 89 95 32 38 46\", \"0 1\\n1 4 0 6 5\", \"10 8\\n14 26 101 65 35 89 95 32 38 42\", \"1 1\\n1 0 2 6 5\", \"10 8\\n14 26 111 65 35 59 95 32 38 46\", \"1 1\\n0 0 2 6 5\", \"0 1\\n0 0 2 5 3\", \"10 3\\n4 26 111 26 35 89 95 32 38 46\", \"-1 1\\n0 0 0 6 3\", \"4 1\\n14 26 111 26 35 89 95 32 38 46\", \"0 2\\n1 0 0 6 3\", \"10 1\\n14 26 111 26 13 89 95 35 38 46\", \"0 2\\n0 1 1 6 3\", \"10 1\\n14 26 111 26 13 89 55 32 38 66\", \"1 1\\n0 1 0 6 3\", \"10 1\\n14 26 111 26 30 89 55 32 38 46\", \"0 1\\n-1 2 0 6 3\", \"10 1\\n14 26 111 26 22 89 55 41 38 46\", \"10 1\\n14 26 111 26 36 89 0 36 38 46\", \"0 1\\n-1 2 0 1 0\", \"10 1\\n14 9 111 26 22 89 -1 36 38 46\", \"0 1\\n-1 2 1 6 1\", \"10 1\\n14 9 101 26 22 89 1 36 38 46\", \"0 1\\n-1 4 1 10 0\", \"10 1\\n14 11 111 26 22 89 1 19 38 46\", \"5 4\\n1 4 2 3 5\", \"10 7\\n14 15 92 65 35 89 79 32 38 46\", \"8 4\\n4 2 4 2 4 2 4 2\"], \"outputs\": [\"4\\n\", \"7\\n\", \"8\\n\", \"0\\n\", \"5\\n\", \"6\\n\", \"3\\n\", \"1\\n\", \"8\\n\", \"4\\n\", \"2\\n\", \"9\\n\", \"7\\n\", \"10\\n\", \"12\\n\", \"11\\n\", \"0\\n\", \"5\\n\", \"0\\n\", \"5\\n\", \"0\\n\", \"5\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"3\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"5\\n\", \"0\\n\", \"5\\n\", \"0\\n\", \"0\\n\", \"6\\n\", \"0\\n\", \"5\\n\", \"0\\n\", \"6\\n\", \"0\\n\", \"0\\n\", \"4\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"4\", \"8\", \"7\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "[]",
    "name": "AtCoder Beginner Contest 146 - Rem of Sum is Num",
    "source": "atcoder",
    "tags": "[]",
    "skill_types": "[]",
    "url": "https://atcoder.jp/contests/abc146/tasks/abc146_e",
    "Expected Auxiliary Space": null,
    "time_limit": "2.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "1024.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "Heidi is terrified by your estimate and she found it unrealistic that her friends would collaborate to drive her into debt. She expects that, actually, each person will just pick a random friend to send Heidi to. (This randomness assumption implies, however, that she can now visit the same friend an arbitrary number of times...) Moreover, if a person only has one friend in common with Heidi (i.e., if that person is in a leaf of the tree), then that person will not send Heidi back (so that Heidi's travel will end at some point).\n\nHeidi also found unrealistic the assumption that she can make all the travels in one day. Therefore now she assumes that every time she travels a route between two friends, she needs to buy a new ticket. She wants to know: how much should she expect to spend on the trips?\n\nFor what it's worth, Heidi knows that Jenny has at least two friends.\n\nInput\n\nThe first line contains the number of friends n (3 ≤ n ≤ 105). The next n - 1 lines each contain three space-separated integers u, v and c (0 ≤ u, v ≤ n - 1, 1 ≤ c ≤ 104) meaning that u and v are friends and the cost for traveling between u and v is c (paid every time!).\n\nIt is again guaranteed that the social network of the input forms a tree.\n\nOutput\n\nAssume that the expected cost of the trips is written as an irreducible fraction a / b (that is, a and b are coprime). Then Heidi, the weird cow that she is, asks you to output <image>. (Output a single integer between 0 and 109 + 6.)\n\nExamples\n\nInput\n\n3\n0 1 10\n0 2 20\n\n\nOutput\n\n15\n\n\nInput\n\n4\n0 1 3\n0 2 9\n0 3 27\n\n\nOutput\n\n13\n\n\nInput\n\n7\n0 1 3\n0 5 7\n1 2 2\n1 3 1\n1 4 5\n5 6 8\n\n\nOutput\n\n400000019\n\n\nInput\n\n11\n1 0 6646\n2 0 8816\n3 2 9375\n4 2 5950\n5 1 8702\n6 2 2657\n7 2 885\n8 7 2660\n9 2 5369\n10 6 3798\n\n\nOutput\n\n153869806\n\n\nInput\n\n6\n0 1 8\n0 2 24\n1 3 40\n1 4 16\n4 5 8\n\n\nOutput\n\n39\n\nNote\n\nIn the first example, with probability 1 / 2 Heidi will go to 1 from 0, and with probability 1 / 2 she will go to 2. In the first case the cost would be 10, and in the second it would be 20. After reaching 1 or 2 she will stop, as 1 and 2 are leaves of the social tree. Hence, the expected cost she has to pay is 10·1 / 2 + 20·1 / 2 = 15.\n\nIn the third example, the expected cost is 81 / 5. You should output 400000019.\n\nIn her travels, Heidi has learned an intriguing fact about the structure of her social network. She tells you the following: The mysterious determinant that you might be wondering about is such that it does not cause strange errors in your reasonable solution... Did we mention that Heidi is a weird cow?",
    "solutions": "[]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"6\\n0 1 8\\n0 2 42\\n1 3 40\\n1 4 16\\n4 5 8\\n\", \"3\\n0 1 2\\n0 2 20\\n\", \"7\\n0 1 3\\n0 5 6\\n1 2 2\\n1 3 1\\n1 4 5\\n5 6 8\\n\", \"4\\n0 1 6\\n0 2 9\\n0 3 27\\n\", \"6\\n0 1 8\\n0 2 24\\n1 3 40\\n1 4 16\\n4 5 12\\n\", \"7\\n0 1 3\\n0 5 7\\n1 2 2\\n1 3 1\\n1 4 5\\n5 6 2\\n\", \"6\\n0 1 8\\n0 2 42\\n1 3 41\\n1 4 16\\n4 5 8\\n\", \"3\\n0 1 2\\n0 2 15\\n\", \"7\\n0 1 3\\n0 5 6\\n1 2 0\\n1 3 1\\n1 4 5\\n5 6 8\\n\", \"7\\n0 1 3\\n0 5 7\\n1 2 2\\n1 3 1\\n1 4 5\\n2 6 2\\n\", \"6\\n0 1 8\\n0 2 42\\n1 3 41\\n1 4 26\\n4 5 8\\n\", \"11\\n1 0 6646\\n2 0 8816\\n3 2 9375\\n4 2 5950\\n5 1 8702\\n6 0 2657\\n7 2 885\\n8 7 2660\\n9 2 5369\\n10 6 3798\\n\", \"6\\n0 1 8\\n0 2 24\\n1 3 40\\n0 4 16\\n4 5 8\\n\", \"3\\n0 1 15\\n0 2 20\\n\", \"6\\n0 1 8\\n0 2 42\\n1 3 40\\n1 4 14\\n4 5 8\\n\", \"7\\n0 1 3\\n0 5 6\\n1 2 2\\n1 3 1\\n1 4 5\\n5 6 14\\n\", \"4\\n0 1 6\\n0 2 9\\n0 3 5\\n\", \"6\\n0 1 8\\n0 2 24\\n1 3 40\\n2 4 16\\n4 5 12\\n\", \"6\\n0 1 8\\n0 2 42\\n1 3 41\\n1 4 40\\n4 5 8\\n\", \"7\\n0 1 3\\n0 6 9\\n1 2 0\\n1 3 1\\n1 4 5\\n5 6 8\\n\", \"11\\n1 0 6646\\n2 0 8816\\n3 2 9375\\n4 2 5950\\n5 1 8702\\n6 0 2657\\n7 2 439\\n8 7 2660\\n9 2 5369\\n10 6 3798\\n\", \"6\\n0 1 8\\n0 2 24\\n1 3 40\\n0 4 9\\n4 5 8\\n\", \"3\\n0 1 9\\n0 2 20\\n\", \"4\\n0 1 6\\n1 2 9\\n0 3 5\\n\", \"6\\n0 1 8\\n0 2 42\\n1 3 77\\n1 4 40\\n4 5 8\\n\", \"6\\n0 1 9\\n0 2 24\\n1 3 40\\n0 4 9\\n4 5 8\\n\", \"4\\n0 1 3\\n0 2 9\\n0 3 34\\n\", \"3\\n0 1 12\\n0 2 20\\n\", \"7\\n0 1 3\\n0 5 7\\n2 2 2\\n1 3 1\\n1 4 5\\n5 6 8\\n\", \"6\\n0 1 8\\n0 2 42\\n2 3 40\\n1 4 16\\n4 5 8\\n\", \"6\\n0 1 12\\n0 2 24\\n1 3 40\\n1 4 16\\n4 5 12\\n\", \"7\\n0 1 3\\n0 5 7\\n1 2 2\\n1 3 1\\n1 4 0\\n2 6 2\\n\", \"6\\n0 1 8\\n0 2 42\\n1 3 80\\n1 4 26\\n4 5 8\\n\", \"6\\n0 1 10\\n0 2 24\\n1 3 40\\n1 4 16\\n4 5 8\\n\", \"3\\n0 1 23\\n0 2 20\\n\", \"6\\n0 1 15\\n0 2 42\\n1 3 40\\n1 4 14\\n4 5 8\\n\", \"4\\n0 1 6\\n0 2 4\\n0 3 5\\n\", \"6\\n0 1 3\\n0 2 24\\n1 3 40\\n2 4 16\\n4 5 12\\n\", \"6\\n0 1 8\\n0 2 58\\n1 3 41\\n1 4 40\\n4 5 8\\n\", \"6\\n0 1 8\\n0 2 76\\n1 3 80\\n1 4 26\\n4 5 8\\n\", \"6\\n0 1 10\\n0 2 2\\n1 3 40\\n1 4 16\\n4 5 8\\n\", \"3\\n0 1 23\\n0 2 13\\n\", \"6\\n0 1 15\\n0 2 42\\n1 3 40\\n1 4 14\\n4 5 2\\n\", \"4\\n0 1 6\\n1 2 4\\n0 3 5\\n\", \"6\\n0 1 1\\n0 2 24\\n1 3 40\\n2 4 16\\n4 5 12\\n\", \"6\\n0 1 8\\n0 2 58\\n1 3 7\\n1 4 40\\n4 5 8\\n\", \"6\\n0 1 9\\n1 2 24\\n1 3 40\\n0 4 8\\n4 5 8\\n\", \"3\\n0 1 42\\n0 2 13\\n\", \"6\\n0 1 15\\n0 2 83\\n1 3 40\\n1 4 14\\n4 5 2\\n\", \"6\\n0 1 8\\n0 2 15\\n1 3 7\\n1 4 40\\n4 5 8\\n\", \"7\\n0 1 3\\n0 6 6\\n1 2 0\\n1 3 1\\n1 4 5\\n5 6 8\\n\", \"7\\n0 1 3\\n0 6 9\\n1 2 0\\n1 3 1\\n1 4 5\\n5 6 0\\n\", \"6\\n0 1 9\\n0 2 24\\n1 3 40\\n0 4 8\\n4 5 8\\n\", \"3\\n0 1 12\\n0 2 23\\n\", \"6\\n0 1 12\\n0 2 24\\n1 3 40\\n1 5 16\\n4 5 12\\n\", \"11\\n1 0 6646\\n2 0 8816\\n3 2 9375\\n4 2 5950\\n5 1 8702\\n6 2 2657\\n7 2 885\\n8 7 2660\\n9 2 5369\\n10 6 3798\\n\", \"4\\n0 1 3\\n0 2 9\\n0 3 27\\n\", \"6\\n0 1 8\\n0 2 24\\n1 3 40\\n1 4 16\\n4 5 8\\n\", \"3\\n0 1 10\\n0 2 20\\n\", \"7\\n0 1 3\\n0 5 7\\n1 2 2\\n1 3 1\\n1 4 5\\n5 6 8\\n\"], \"outputs\": [\"250000052\\n\", \"11\\n\", \"15\\n\", \"14\\n\", \"500000043\\n\", \"600000018\\n\", \"500000054\\n\", \"500000012\\n\", \"200000016\\n\", \"8\\n\", \"250000056\\n\", \"718770350\\n\", \"42\\n\", \"500000021\\n\", \"500000053\\n\", \"800000023\\n\", \"666666678\\n\", \"800000116\\n\", \"500000063\\n\", \"400000021\\n\", \"93770262\\n\", \"750000042\\n\", \"500000018\\n\", \"333333348\\n\", \"500000072\\n\", \"500000041\\n\", \"333333351\\n\", \"16\\n\", \"571428593\\n\", \"138\\n\", \"43\\n\", \"166666675\\n\", \"64\\n\", \"750000046\\n\", \"500000025\\n\", \"625000060\\n\", \"5\\n\", \"800000107\\n\", \"500000073\\n\", \"250000087\\n\", \"27\\n\", \"18\\n\", \"875000061\\n\", \"666666682\\n\", \"600000102\\n\", \"61\\n\", \"285714330\\n\", \"500000031\\n\", \"500000084\\n\", \"125000035\\n\", \"200000016\\n\", \"15\\n\", \"750000042\\n\", \"500000021\\n\", \"43\\n\", \"153869806\\n\", \"13\\n\", \"39\\n\", \"15\\n\", \"400000019\\n\"]}",
    "difficulty": "VERY_HARD",
    "raw_tags": "['trees', 'dfs and similar', 'math', 'dp']",
    "name": null,
    "source": "codeforces",
    "tags": "['Tree algorithms', 'Dynamic programming', 'Graph traversal', 'Mathematics']",
    "skill_types": "['Dynamic programming']",
    "url": "https://codeforces.com/problemset/problem/802/L",
    "Expected Auxiliary Space": null,
    "time_limit": "2.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "There are $n$ slimes in a row. Each slime has an integer value (possibly negative or zero) associated with it.\n\nAny slime can eat its adjacent slime (the closest slime to its left or to its right, assuming that this slime exists). \n\nWhen a slime with a value $x$ eats a slime with a value $y$, the eaten slime disappears, and the value of the remaining slime changes to $x - y$.\n\nThe slimes will eat each other until there is only one slime left. \n\nFind the maximum possible value of the last slime.\n\n\n-----Input-----\n\nThe first line of the input contains an integer $n$ ($1 \\le n \\le 500\\,000$) denoting the number of slimes.\n\nThe next line contains $n$ integers $a_i$ ($-10^9 \\le a_i \\le 10^9$), where $a_i$ is the value of $i$-th slime.\n\n\n-----Output-----\n\nPrint an only integer — the maximum possible value of the last slime.\n\n\n-----Examples-----\nInput\n4\n2 1 2 1\n\nOutput\n4\nInput\n5\n0 -1 -1 -1 -1\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first example, a possible way of getting the last slime with value $4$ is:\n\n  Second slime eats the third slime, the row now contains slimes $2, -1, 1$\n\n Second slime eats the third slime, the row now contains slimes $2, -2$\n\n First slime eats the second slime, the row now contains $4$ \n\nIn the second example, the first slime can keep eating slimes to its right to end up with a value of $4$.",
    "solutions": "[\"import sys\\nimport os\\n\\ndef solve(slimes):\\n\\tif len(slimes) == 1:\\n\\t\\treturn slimes[0]\\n\\thavePos = False\\n\\thaveNeg = False\\n\\tfor s in slimes:\\n\\t\\tif s > 0:\\n\\t\\t\\thavePos = True\\n\\t\\telif s < 0:\\n\\t\\t\\thaveNeg = True\\n\\tif havePos and haveNeg:\\n\\t\\treturn sum(map(abs, slimes))\\n\\telif not havePos:\\n\\t\\tm = max(slimes)\\n\\t\\treturn sum(list(map(abs, slimes))) + 2 * m\\n\\telif not haveNeg:\\n\\t\\tm = min(slimes)\\n\\t\\treturn sum(list(map(abs, slimes))) - 2 * m\\n\\telse:\\n\\t\\treturn 0\\n\\ndef main():\\n\\tn = int(input())\\n\\tslimes = list(map(int, input().split()))\\n\\tprint(solve(slimes))\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\t(p, e) = (0, 0)\\n\\tfor i in range(n):\\n\\t\\tif a[i] >= 0:\\n\\t\\t\\tp = p + 1\\n\\t\\telse:\\n\\t\\t\\te = e + 1\\n\\tif p > 0 and e > 0:\\n\\t\\tans = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tans = ans + abs(a[i])\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\td = -2 * 10 ** 9\\n\\t\\tans = abs(a[0])\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tans = ans + abs(a[i])\\n\\t\\t\\tif d < abs(a[i] - a[i - 1]) - (abs(a[i]) + abs(a[i - 1])):\\n\\t\\t\\t\\td = abs(a[i] - a[i - 1]) - (abs(a[i]) + abs(a[i - 1]))\\n\\t\\tans = ans + d\\n\\t\\tprint(ans)\\n\", \"def f(a):\\n\\tif len(a) == 1:\\n\\t\\treturn a[0]\\n\\tpos = 0\\n\\tneg = 0\\n\\tans = 0\\n\\ta = sorted(a)\\n\\tfor i in a[1:len(a) - 1]:\\n\\t\\tans += abs(i)\\n\\tans -= a[0]\\n\\tans += a[-1]\\n\\treturn ans\\ns = input()\\na = list(map(int, input().strip().split()))\\nprint(f(a))\\n\", \"import sys\\n\\ndef input():\\n\\treturn sys.stdin.readline().rstrip()\\n\\ndef slv():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\t\\treturn\\n\\telif all((a[i] <= 0 for i in range(n))):\\n\\t\\tminabs = 1 << 128\\n\\t\\ts = 0\\n\\t\\tfor v in a:\\n\\t\\t\\tminabs = min(minabs, abs(v))\\n\\t\\t\\ts += abs(v)\\n\\t\\tprint(s - 2 * minabs)\\n\\telif all((a[i] >= 0 for i in range(n))):\\n\\t\\tminabs = 1 << 128\\n\\t\\ts = 0\\n\\t\\tfor v in a:\\n\\t\\t\\tminabs = min(minabs, abs(v))\\n\\t\\t\\ts += abs(v)\\n\\t\\tprint(s - 2 * minabs)\\n\\telse:\\n\\t\\tans = sum((abs(v) for v in a))\\n\\t\\tprint(ans)\\n\\treturn\\n\\ndef main():\\n\\tt = 1\\n\\tfor i in range(t):\\n\\t\\tslv()\\n\\treturn\\nmain()\\n\", \"import collections, atexit, math, sys, bisect\\nsys.setrecursionlimit(1000000)\\n\\ndef getIntList():\\n\\treturn list(map(int, input().split()))\\ntry:\\n\\timport numpy\\n\\n\\tdef dprint(*args, **kwargs):\\n\\t\\tprint(*args, **kwargs, file=sys.stderr)\\n\\tdprint('debug mode')\\nexcept ModuleNotFoundError:\\n\\n\\tdef dprint(*args, **kwargs):\\n\\t\\tpass\\ninId = 0\\noutId = 0\\nif inId > 0:\\n\\tdprint('use input', inId)\\n\\tsys.stdin = open('input' + str(inId) + '.txt', 'r')\\nif outId > 0:\\n\\tdprint('use output', outId)\\n\\tsys.stdout = open('stdout' + str(outId) + '.txt', 'w')\\n\\tatexit.register(lambda : sys.stdout.close())\\n(N,) = getIntList()\\nza = getIntList()\\nif N == 1:\\n\\tprint(za[0])\\n\\treturn\\nt1 = max(za)\\nt2 = min(za)\\nif t2 >= 0:\\n\\tprint(sum(za) - 2 * t2)\\n\\treturn\\nif t1 <= 0:\\n\\tprint(2 * t1 - sum(za))\\n\\treturn\\nres = 0\\nfor x in za:\\n\\tres += abs(x)\\nprint(res)\\n\", \"import sys, math\\nn = int(input())\\na = list(map(int, sys.stdin.readline().split()))\\nif n == 1:\\n\\tprint(sum(a))\\nelse:\\n\\tminn = 10 ** 9\\n\\tneg = 0\\n\\tpos = 0\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tminn = min(minn, abs(a[i]))\\n\\t\\tif a[i] >= 0:\\n\\t\\t\\tpos += 1\\n\\t\\tif a[i] <= 0:\\n\\t\\t\\tneg += 1\\n\\t\\tans += abs(a[i])\\n\\tif pos > 0 and neg > 0:\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(ans - 2 * minn)\\n\", \"tot = int(input())\\narr = [int(x) for x in input().split()]\\n(n, p, z) = (0, 0, 0)\\nfor i in arr:\\n\\tif i > 0:\\n\\t\\tp += 1\\n\\telif i < 0:\\n\\t\\tn += 1\\n\\telse:\\n\\t\\tz += 1\\nans = 0\\nfor i in arr:\\n\\tans += abs(i)\\nif tot == 1:\\n\\tprint(arr[0])\\nelif p == 0 or n == 0:\\n\\tmi = min(arr)\\n\\tif mi < 0:\\n\\t\\tmi = max(arr)\\n\\tif mi > 0:\\n\\t\\tprint(ans - 2 * mi)\\n\\telse:\\n\\t\\tprint(ans + 2 * mi)\\nelse:\\n\\tprint(ans)\\n\", \"N = int(input())\\nA = [int(x) for x in input().split()]\\nB = [abs(x) for x in A]\\nif N == 1:\\n\\tprint(A[0])\\n\\texit(0)\\ns = sum(B)\\nif any((x >= 0 for x in A)) and any((x <= 0 for x in A)):\\n\\tprint(s)\\nelse:\\n\\tprint(s - 2 * min(B))\\n\", \"import sys\\nn = int(input())\\nl = list(map(int, input().split()))\\nf = 0\\nf1 = 0\\nans = 0\\nif n == 1:\\n\\tprint(l[0])\\n\\tsys.exit()\\nfor i in range(n):\\n\\tif l[i] <= 0:\\n\\t\\tf = 1\\n\\t\\tans += abs(l[i])\\n\\telse:\\n\\t\\tf1 = 1\\nif f == 1:\\n\\tans = sum(l) + 2 * ans\\n\\tif f1 == 0:\\n\\t\\tans -= abs(max(l) * 2)\\n\\tprint(ans)\\nelse:\\n\\tans = -999999999999999999999999999999999\\n\\tfor i in range(1, n):\\n\\t\\tans = max(-2 * min(l[i], l[i - 1]), ans)\\n\\tans = sum(l) + ans\\n\\tprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit(0)\\n(hasp, hasn) = (False, False)\\nfor aa in a:\\n\\thasp = hasp or aa > 0\\n\\thasn = hasn or aa < 0\\nif hasn and hasp:\\n\\tprint(sum(list(map(abs, a))))\\nelif hasn or hasp:\\n\\tprint(sum(list(map(abs, a))) - 2 * min(list(map(abs, a))))\\nelse:\\n\\tprint(0)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nsum = 0\\nfor i in range(n):\\n\\tsum += abs(arr[i])\\nans = 0\\nif n == 1:\\n\\tprint(arr[0])\\nelse:\\n\\tfor i in range(n - 1):\\n\\t\\tans = max(ans, sum - abs(arr[i]) - abs(arr[i + 1]) + abs(arr[i] - arr[i + 1]))\\n\\tprint(ans)\\n\", \"n = int(input())\\na = [int(el) for el in input().split()]\\na.sort()\\nkotr = 0\\nk0 = 0\\nfor i in a:\\n\\tif i < 0:\\n\\t\\tkotr += 1\\n\\telif i == 0:\\n\\t\\tk0 += 1\\nif n == 1:\\n\\tprint(a[0])\\n\\traise SystemExit\\nif n == 2:\\n\\tprint(abs(a[0] - a[1]))\\n\\traise SystemExit\\nif kotr == n:\\n\\tout = a[n - 1]\\n\\tfor i in range(n - 1):\\n\\t\\tout = out + abs(a[i])\\nelse:\\n\\tout = -a[0]\\n\\tfor i in range(1, n):\\n\\t\\tout = out + abs(a[i])\\nprint(out)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\na.sort()\\nif a[0] < 0 and a[n - 1] >= 0:\\n\\tsuma = 0\\n\\tfor i in range(n):\\n\\t\\tsuma += abs(a[i])\\n\\tprint(suma)\\n\\texit()\\nsuma = 0\\nmina = 9999999999\\nfor i in range(n):\\n\\tsuma += abs(a[i])\\n\\tmina = min(mina, abs(a[i]))\\nprint(suma - 2 * mina)\\n\", \"import sys, os\\nfrom math import sqrt, gcd, ceil, log, floor\\nfrom bisect import bisect, bisect_left\\nfrom collections import defaultdict, Counter, deque\\nfrom heapq import heapify, heappush, heappop\\nfrom itertools import permutations\\ninput = sys.stdin.readline\\nread = lambda : list(map(int, input().strip().split()))\\nMOD = 10 ** 9 + 7\\ndic = defaultdict(int)\\n\\ndef f(n):\\n\\tif n in dic:\\n\\t\\treturn dic[n]\\n\\tif n < 5:\\n\\t\\treturn n\\n\\tif n // 2 + n // 3 + n // 4 <= n:\\n\\t\\treturn n\\n\\tans = f(n // 2) + f(n // 3) + f(n // 4)\\n\\tdic[n] = ans\\n\\treturn ans\\n\\ndef main():\\n\\tn = int(input())\\n\\tarr = read()\\n\\t(x, y) = (0, 0)\\n\\t(s, r) = (0, 0)\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tx += arr[i] < 0\\n\\t\\ty += arr[i] >= 0\\n\\t\\ts += abs(arr[i])\\n\\t\\tr += arr[i]\\n\\t\\tarr[i] = abs(arr[i])\\n\\tif x + y == 1:\\n\\t\\tprint(r)\\n\\telif x == n or y == n:\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\t(a, b) = (arr[i], arr[i + 1])\\n\\t\\t\\tans = max(ans, s - abs(a + b) + abs(a - b))\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(s)\\nmain()\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nif n == 1:\\n\\tprint(arr[0])\\n\\texit()\\nsum = sum((abs(x) for x in arr))\\nif not any((x < 0 for x in arr)):\\n\\tsum = sum - 2 * min(arr)\\nif not any((x >= 0 for x in arr)):\\n\\tsum = sum - 2 * abs(max(arr))\\nprint(sum)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(sum(a))\\n\\treturn\\nmn = min(a)\\nmx = max(a)\\ns = 0\\nfor i in a:\\n\\ts += abs(i)\\nprint(s - abs(mn) - abs(mx) + mx - mn)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nif n != 1:\\n\\ttotal = a[0]\\n\\tfor i in range(1, n - 1):\\n\\t\\tif total < 0 and a[i] < 0:\\n\\t\\t\\ttotal += a[i]\\n\\t\\telse:\\n\\t\\t\\ttotal = min(total - a[i], a[i] - total)\\n\\tprint(max(total - a[n - 1], a[n - 1] - total))\\nelse:\\n\\tprint(a[0])\\n\", \"n = int(input())\\nans = 0\\ni = 0\\nl = list(map(int, input().split()))\\nt = 0\\nif n == 1:\\n\\tprint(l[0])\\nelse:\\n\\twhile i < n:\\n\\t\\tif l[i] >= 0:\\n\\t\\t\\tc = 0\\n\\t\\t\\tt += 1\\n\\t\\t\\twhile l[i] >= 0:\\n\\t\\t\\t\\tc += l[i]\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tif i == n:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tans += c\\n\\t\\telse:\\n\\t\\t\\tc = 0\\n\\t\\t\\tt += 1\\n\\t\\t\\twhile l[i] < 0:\\n\\t\\t\\t\\tc -= l[i]\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tif i == n:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tans += c\\n\\tif t > 1:\\n\\t\\tprint(ans)\\n\\telif l[0] >= 0:\\n\\t\\tprint(ans - 2 * min(l))\\n\\telse:\\n\\t\\tprint(ans + 2 * max(l))\\n\", \"def abs_sum(lis):\\n\\tans = 0\\n\\tfor item in lis:\\n\\t\\tans += abs(item)\\n\\treturn ans\\nimport sys\\nn = int(input())\\nlis = [int(x) for x in input().split()]\\nif n == 1:\\n\\tprint(lis[0])\\n\\tsys.exit()\\na = abs_sum(lis)\\nb = sum(lis)\\nif a != b and a != -b:\\n\\tprint(a)\\nelif b >= 0:\\n\\tminn = min(lis)\\n\\tprint(a - 2 * minn)\\nelse:\\n\\tmaxx = max(lis)\\n\\tprint(a + 2 * maxx)\\n\", \"if input() == '1':\\n\\tprint(input())\\nelse:\\n\\t(x, *a, y) = sorted(map(int, input().split()))\\n\\tprint(y - x + sum(map(abs, a)))\\n\", \"n = int(input())\\nH = list(map(int, input().split()))\\nd = 0\\nf = 0\\nm = 10 ** 9 + 7\\nif n > 1:\\n\\tfor i in range(n):\\n\\t\\tif H[i] < 0:\\n\\t\\t\\tf += 1\\n\\t\\td += abs(H[i])\\n\\t\\tif abs(H[i]) < m:\\n\\t\\t\\tm = abs(H[i])\\n\\tif f == 0 or f == n:\\n\\t\\tprint(d - m * 2)\\n\\telse:\\n\\t\\tprint(d)\\nelse:\\n\\tprint(H[0])\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\n(m, M) = (min(a), max(a))\\nif m >= 0:\\n\\tprint(sum(a) - 2 * m)\\nelif M < 0:\\n\\tprint(-sum(a) + 2 * M)\\nelse:\\n\\tprint(sum((abs(ai) for ai in a)))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\ti = 0\\n\\twhile i < n and a[i] <= 0:\\n\\t\\ti += 1\\n\\tif i == 0:\\n\\t\\tprint(sum(a) - 2 * a[0])\\n\\telif i == n:\\n\\t\\tprint(2 * a[-1] - sum(a))\\n\\telse:\\n\\t\\tprint(sum(a[i:]) - sum(a[:i]))\\n\", \"from math import ceil, sqrt, log, gcd\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef si():\\n\\treturn input()\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(mi())\\n\\ndef main():\\n\\tn = ii()\\n\\ta = li()\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\t\\texit(0)\\n\\tpos = 0\\n\\tans = 0\\n\\tneg = 0\\n\\tminv = 1000000000.0 + 7\\n\\tfor i in a:\\n\\t\\tif i < 0:\\n\\t\\t\\tneg = 1\\n\\t\\telse:\\n\\t\\t\\tpos = 1\\n\\t\\tminv = min(minv, abs(i))\\n\\t\\tans += abs(i)\\n\\tif pos and neg:\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(ans - 2 * minv)\\nmain()\\n\", \"from math import inf as inf\\nfrom math import *\\nfrom collections import *\\nimport sys\\ninput = sys.stdin.readline\\nt = 1\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\t\\texit(0)\\n\\t(p, n1) = (0, 0)\\n\\ts = 0\\n\\tm = float('inf')\\n\\tfor i in a:\\n\\t\\tif i >= 0:\\n\\t\\t\\tp = 1\\n\\t\\tif i < 0:\\n\\t\\t\\tn1 = 1\\n\\t\\ts += abs(i)\\n\\t\\tm = min(m, abs(i))\\n\\tif p and n1:\\n\\t\\tprint(s)\\n\\telse:\\n\\t\\tprint(s - 2 * m)\\n\", \"n = int(input())\\nx = [int(x) for x in input().split()]\\nresult = 0\\ni = 1\\nj = n - 2\\nk = 0\\nl = 0\\nx.sort()\\n\\ndef check(x):\\n\\ta = 0\\n\\tfor i in range(0, n):\\n\\t\\tif x[i] >= 0:\\n\\t\\t\\ta = x[i]\\n\\t\\t\\treturn a\\nif x[0] < 0 and x[n - 1] <= 0:\\n\\tresult = x[n - 1]\\n\\twhile j >= 0:\\n\\t\\tresult = result - x[j]\\n\\t\\tj -= 1\\nelif x[0] < 0 and x[n - 1] >= 0:\\n\\tresult = check(x)\\n\\tk = x.index(result)\\n\\twhile k != 0:\\n\\t\\tresult = result - x[k - 1]\\n\\t\\tk -= 1\\n\\tx.append(result)\\n\\tk = x.index(check(x))\\n\\twhile k != n:\\n\\t\\tl = l - x[k + 1]\\n\\t\\tk += 1\\n\\tresult = abs(l)\\nelse:\\n\\tresult = x[0]\\n\\twhile i <= n - 1:\\n\\t\\tresult = result - x[i]\\n\\t\\ti += 1\\n\\tresult = abs(result)\\nprint(result)\\n\", \"def solve(a):\\n\\tif len(a) == 1:\\n\\t\\treturn a[0]\\n\\tif max(a) < 0:\\n\\t\\treturn 2 * max(a) - sum(a)\\n\\telif min(a) >= 0:\\n\\t\\treturn sum(a) - 2 * min(a)\\n\\telse:\\n\\t\\treturn sum((abs(x) for x in a))\\nn = int(input())\\na = list(map(int, input().split()))\\nprint(solve(a))\\n\", \"import sys\\nn = int(input())\\nA = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(A[0])\\n\\tsys.exit(0)\\nsuma = 0\\nmine = 1000000001\\nd = False\\nfor i in range(0, n):\\n\\tmine = min(mine, abs(A[i]))\\n\\tsuma += abs(A[i])\\n\\tif i > 0 and (A[i] >= 0 and A[i - 1] < 0 or (A[i] < 0 and A[i - 1] >= 0)):\\n\\t\\td = True\\nif d:\\n\\tprint(suma)\\nelse:\\n\\tprint(suma - 2 * mine)\\n\", \"N = int(input())\\nslimes = [int(s) for s in input().split()]\\nall_same = True\\nfor i in range(N - 1):\\n\\tif (slimes[i] > 0) != (slimes[i + 1] > 0):\\n\\t\\tall_same = False\\nif N == 1:\\n\\tprint(slimes[0])\\nelse:\\n\\tslimes = [abs(x) for x in slimes]\\n\\tprint(sum(slimes) - (2 * min(slimes) if all_same else 0))\\n\", \"n = int(input())\\nlis = [int(x) for x in input().split()]\\ntotal = 0\\nl_negative = -1000000000000\\ns_positive = 1000000000000\\nfor i in lis:\\n\\tif i <= 0:\\n\\t\\tl_negative = max(l_negative, i)\\n\\tif i >= 0:\\n\\t\\ts_positive = min(s_positive, i)\\n\\ttotal += abs(i)\\nif l_negative == -1000000000000:\\n\\ttotal -= 2 * s_positive\\nif s_positive == 1000000000000:\\n\\ttotal += 2 * l_negative\\nif n == 1:\\n\\tprint(lis[0])\\nelse:\\n\\tprint(total)\\n\", \"import sys\\nimport math as mt\\ninput = sys.stdin.buffer.readline\\nt = 1\\nfor ___ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tsuma = 0\\n\\t(pos, neg) = (0, 0)\\n\\tfor i in range(n):\\n\\t\\tif l[i] >= 0:\\n\\t\\t\\tpos = 1\\n\\t\\telse:\\n\\t\\t\\tneg = 1\\n\\t\\tsuma += abs(l[i])\\n\\tif pos & neg:\\n\\t\\tprint(suma)\\n\\telse:\\n\\t\\tans = 0\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tsub = abs(l[i]) + abs(l[i - 1])\\n\\t\\t\\tdiff = abs(l[i]) - abs(l[i - 1])\\n\\t\\t\\tcompare = suma + abs(diff) - sub\\n\\t\\t\\tif compare > ans:\\n\\t\\t\\t\\tans = compare\\n\\t\\tif n == 1:\\n\\t\\t\\tif l[0] < 0:\\n\\t\\t\\t\\tsuma = l[0]\\n\\t\\t\\tprint(suma)\\n\\t\\telse:\\n\\t\\t\\tprint(ans)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(arr[0])\\nelse:\\n\\tbrr = [abs(i) for i in arr]\\n\\tfl = False\\n\\tfor i in range(n - 1):\\n\\t\\tif arr[i] * arr[i + 1] < 0:\\n\\t\\t\\tfl = True\\n\\tif not fl:\\n\\t\\tprint(sum(brr) - 2 * min(brr))\\n\\telse:\\n\\t\\tprint(sum(brr))\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nfrom collections import Counter\\nimport math as mt\\nMAXN = int(10000000.0 + 1)\\nspf = [0 for i in range(MAXN)]\\n\\ndef sieve():\\n\\tspf[1] = 1\\n\\tfor i in range(2, MAXN):\\n\\t\\tspf[i] = i\\n\\tfor i in range(4, MAXN, 2):\\n\\t\\tspf[i] = 2\\n\\tfor i in range(3, mt.ceil(mt.sqrt(MAXN))):\\n\\t\\tif spf[i] == i:\\n\\t\\t\\tfor j in range(i * i, MAXN, i):\\n\\t\\t\\t\\tif spf[j] == j:\\n\\t\\t\\t\\t\\tspf[j] = i\\n\\ndef getFactorization(x):\\n\\tret = 0\\n\\twhile x != 1:\\n\\t\\tk = spf[x]\\n\\t\\tret += 1\\n\\t\\twhile x % k == 0:\\n\\t\\t\\tx //= k\\n\\treturn ret\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b % a, a)\\n\\ndef lcm(a, b):\\n\\treturn a * b / gcd(a, b)\\n\\ndef totalPrimeFactors(n):\\n\\tcount = 0\\n\\tif n % 2 == 0:\\n\\t\\tcount += 1\\n\\t\\twhile n % 2 == 0:\\n\\t\\t\\tn //= 2\\n\\ti = 3\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\tcount += 1\\n\\t\\t\\twhile n % i == 0:\\n\\t\\t\\t\\tn //= i\\n\\t\\ti += 2\\n\\tif n > 2:\\n\\t\\tcount += 1\\n\\treturn count\\n\\ndef countPairs(G, L):\\n\\tif L % G != 0:\\n\\t\\treturn 0\\n\\tdiv = int(L / G)\\n\\treturn 1 << getFactorization(div)\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ta.sort()\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\t\\treturn\\n\\tif a[0] >= 0:\\n\\t\\tprint(sum(a) - 2 * a[0])\\n\\telif a[-1] <= 0:\\n\\t\\tprint(-1 * sum(a) + 2 * a[-1])\\n\\telse:\\n\\t\\tans = 0\\n\\t\\tfor i in a:\\n\\t\\t\\tans += abs(i)\\n\\t\\tprint(ans)\\n\\treturn\\nmain()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelif all((ele > 0 for ele in a)):\\n\\ts = sum(a) - 2 * min(a)\\n\\tprint(s)\\nelif all((ele < 0 for ele in a)):\\n\\ts = abs(sum(a)) - 2 * abs(max(a))\\n\\tprint(s)\\nelse:\\n\\tans = 0\\n\\tfor ele in a:\\n\\t\\tans += abs(ele)\\n\\tprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nx = 0\\ny = 0\\ns = 0\\nif n == 1:\\n\\tprint(a[0])\\n\\texit(0)\\nfor i in a:\\n\\tif i > 0:\\n\\t\\tx += 1\\n\\tif i < 0:\\n\\t\\ty += 1\\n\\ts = s + abs(i)\\nif x == n or y == n:\\n\\tif x == n:\\n\\t\\tprint(s - 2 * a[0])\\n\\tif y == n:\\n\\t\\tprint(s + 2 * a[n - 1])\\nelse:\\n\\tprint(s)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nfl = 0\\nf = 0\\ns = 0\\nfor i in l:\\n\\tif i <= 0:\\n\\t\\tfl = 1\\n\\tif i >= 0:\\n\\t\\tf = 1\\n\\ts = s + abs(i)\\nx = min(l)\\ny = max(l)\\nif n == 1:\\n\\tprint(l[0])\\nelif f == 1 and fl == 1:\\n\\tprint(s)\\nelif fl == 1:\\n\\tprint(s - 2 * abs(y))\\nelse:\\n\\tprint(s - 2 * x)\\n\", \"from collections import *\\nn = int(input())\\nl = [*map(int, input().split())]\\nflag = False\\nflag1 = False\\nif n == 1:\\n\\tprint(l[0])\\n\\texit()\\nfor i in range(n):\\n\\tif l[i] <= 0:\\n\\t\\tflag = True\\n\\tif l[i] >= 0:\\n\\t\\tflag1 = True\\nif flag and flag1:\\n\\ttotal = 0\\n\\tfor i in range(n):\\n\\t\\ttotal += abs(l[i])\\n\\tprint(total)\\nelif not flag and flag1:\\n\\tprint(sum(l) - 2 * min(l))\\nelse:\\n\\tprint(-sum(l) + 2 * max(l))\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\nif min(a) > 0:\\n\\tprint(sum(a) - 2 * min(a))\\nelif max(a) < 0:\\n\\tprint(-sum(a) + 2 * max(a))\\nelse:\\n\\tx = 0\\n\\tfor i in range(n):\\n\\t\\tx += abs(a[i])\\n\\tprint(x)\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tminval = 10000000000.0\\n\\tans = 0\\n\\tcheckpos = False\\n\\tcheckneg = False\\n\\tfor i in range(n):\\n\\t\\tminval = min(abs(a[i]), minval)\\n\\t\\tif a[i] >= 0:\\n\\t\\t\\tcheckpos = True\\n\\t\\telif a[i] <= 0:\\n\\t\\t\\tcheckneg = True\\n\\t\\tans += abs(a[i])\\n\\tif checkpos and checkneg:\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(ans - 2 * minval)\\n\", \"import sys\\nfrom sys import stdout\\ninput = lambda : sys.stdin.readline().strip()\\nP = lambda : list(map(int, input().split()))\\nfrom math import factorial as f, gcd, ceil\\nfrom collections import deque, defaultdict as dd, Counter as C\\nfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace, merge\\nfrom random import randint, choice, sample\\nfrom operator import itemgetter as ig, attrgetter as ag, methodcaller as mc\\nimport time\\nmod = 10 ** 9 + 7\\na = ord('a')\\n\\nclass FT:\\n\\n\\tdef __init__(self, N):\\n\\t\\tself.ft = [0] * (N + 1)\\n\\t\\tself.N = N\\n\\n\\tdef ls(self, x):\\n\\t\\treturn x & -x\\n\\n\\tdef fenwick_update(self, p, v):\\n\\t\\twhile p <= self.N:\\n\\t\\t\\tself.ft[p] += v\\n\\t\\t\\tp += self.ls(p)\\n\\n\\tdef fenwick_query(self, p):\\n\\t\\ts = 0\\n\\t\\twhile p:\\n\\t\\t\\ts += self.ft[p]\\n\\t\\t\\tp -= self.ls(p)\\n\\t\\treturn s\\nstart = time.time()\\n\\ndef fast_exp(x, exp):\\n\\tans = 1\\n\\tbase = x\\n\\twhile exp:\\n\\t\\tif exp & 1:\\n\\t\\t\\tans *= base\\n\\t\\tbase *= base\\n\\t\\tbase %= mod\\n\\t\\tans %= mod\\n\\t\\texp >>= 1\\n\\treturn ans\\n\\ndef countBits(n):\\n\\tcount = 0\\n\\twhile n:\\n\\t\\tcount += n & 1\\n\\t\\tn >>= 1\\n\\treturn count\\n\\ndef submasks(n):\\n\\torg = n\\n\\twhile n:\\n\\t\\tyield n\\n\\t\\tn = n - 1 & org\\n\\ndef solve():\\n\\tn = int(input())\\n\\tl = P()\\n\\tif n == 1:\\n\\t\\treturn l[0]\\n\\telif any((i > 0 for i in l)) and any((i < 0 for i in l)):\\n\\t\\treturn sum(map(abs, l))\\n\\telse:\\n\\t\\treturn sum(map(abs, l)) - 2 * min(map(abs, l))\\nprint(solve())\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelif max(a) < 0:\\n\\tans = -sum(a)\\n\\tans += 2 * max(a)\\n\\tprint(ans)\\nelif min(a) > 0:\\n\\tans = sum(a)\\n\\tans -= 2 * min(a)\\n\\tprint(ans)\\nelse:\\n\\tsum1 = 0\\n\\tfor i in range(n):\\n\\t\\tsum1 += abs(a[i])\\n\\tprint(sum1)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nmina = abs(a[0])\\nsumm = 0\\nokeye = False\\nmosbat = 0\\nfor adad in a:\\n\\tif abs(adad) < mina:\\n\\t\\tmina = abs(adad)\\n\\tsumm += abs(adad)\\n\\tif adad == 0:\\n\\t\\tokeye = True\\n\\telif adad > 0:\\n\\t\\tmosbat += 1\\nif n == 1:\\n\\tprint(a[0])\\nelif okeye or 0 < mosbat < n:\\n\\tprint(summ)\\nelse:\\n\\tprint(summ - 2 * mina)\\n\", \"n = int(input())\\nx = list(map(int, input().split()))\\n(ans, mi) = (0, 1234567654321)\\nfor i in range(n):\\n\\tans += abs(x[i])\\n\\tif i > 0:\\n\\t\\tmi = min(mi, abs(x[i]) + abs(x[i - 1]) - abs(x[i] - x[i - 1]))\\nif n == 1:\\n\\tprint(x[i])\\nelse:\\n\\tprint(ans - mi)\\n\", \"n = int(input())\\nif n == 1:\\n\\ta = input()\\n\\tprint(a)\\nelse:\\n\\ta = list(map(int, input().split()))\\n\\tb = [abs(i) for i in a]\\n\\tif min(a) * max(a) > 0:\\n\\t\\tprint(sum(b) - 2 * min(b))\\n\\telse:\\n\\t\\tprint(sum(b))\\n\", \"n = int(input())\\nif n == 1:\\n\\tprint(input())\\nelse:\\n\\ta = [int(x) for x in input().split()]\\n\\tb = [abs(x) for x in a]\\n\\tif min(a) >= 0:\\n\\t\\tprint(sum(b) - 2 * min(a))\\n\\telif max(a) <= 0:\\n\\t\\tprint(sum(b) + 2 * max(a))\\n\\telse:\\n\\t\\tprint(sum(b))\\n\", \"def mi():\\n\\treturn map(int, input().split())\\nn = int(input())\\na = list(mi())\\n(cp, cn) = (0, 0)\\nfor i in a:\\n\\tif i >= 0:\\n\\t\\tcp += 1\\n\\tif i <= 0:\\n\\t\\tcn += 1\\ns = 0\\nif n == 1:\\n\\tprint(a[0])\\n\\texit(0)\\nfor i in a:\\n\\ts += abs(i)\\nif cn and cp:\\n\\tprint(s)\\nelse:\\n\\tm = -1e+100\\n\\tfor i in a:\\n\\t\\tm = max(m, s - 2 * abs(i))\\n\\tprint(m)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na = sorted(a)\\nmx = max(a)\\nmn = min(a)\\ns = 0\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\nfor i in range(1, n - 1):\\n\\ts += abs(a[i])\\nprint(s + mx - mn)\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nif n == 1:\\n\\tprint(arr[0])\\nelse:\\n\\tallpos = True\\n\\tallneg = True\\n\\tfor i in arr:\\n\\t\\tif i > 0:\\n\\t\\t\\tallneg = False\\n\\t\\telif i < 0:\\n\\t\\t\\tallpos = False\\n\\tif allpos:\\n\\t\\tprint(sum(arr) - min(arr) * 2)\\n\\telif allneg:\\n\\t\\tprint(-sum(arr) - -(max(arr) * 2))\\n\\telse:\\n\\t\\tans = 0\\n\\t\\tfor i in arr:\\n\\t\\t\\tans += abs(i)\\n\\t\\tprint(ans)\\n\", \"import sys, os, io\\nfrom sys import stdin\\nfrom math import log, gcd, ceil\\nfrom collections import defaultdict, deque, Counter\\nfrom heapq import heappush, heappop\\nimport math\\nif os.path.exists('input.txt'):\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\n\\ndef ncr(n, r, p):\\n\\tnum = den = 1\\n\\tfor i in range(r):\\n\\t\\tnum = num * (n - i) % p\\n\\t\\tden = den * (i + 1) % p\\n\\treturn num * pow(den, p - 2, p) % p\\n\\ndef primeFactors(n):\\n\\tl = []\\n\\twhile n % 2 == 0:\\n\\t\\tl.append(2)\\n\\t\\tn = n / 2\\n\\tfor i in range(3, int(math.sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tl.append(int(i))\\n\\t\\t\\tn = n / i\\n\\tif n > 2:\\n\\t\\tl.append(n)\\n\\treturn list(set(l))\\n\\ndef power(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef SieveOfEratosthenes(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\treturn prime\\n\\ndef countdig(n):\\n\\tc = 0\\n\\twhile n > 0:\\n\\t\\tn //= 10\\n\\t\\tc += 1\\n\\treturn c\\n\\ndef prefix_sum(arr):\\n\\tr = [0] * (len(arr) + 1)\\n\\tfor (i, el) in enumerate(arr):\\n\\t\\tr[i + 1] = r[i] + el\\n\\treturn r\\n\\ndef divideCeil(n, x):\\n\\tif n % x == 0:\\n\\t\\treturn n // x\\n\\treturn n // x + 1\\n\\ndef si():\\n\\treturn input()\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef li():\\n\\treturn list(map(int, input().split()))\\n\\ndef ws(s):\\n\\tsys.stdout.write(s + '\\\\n')\\n\\ndef wi(n):\\n\\tsys.stdout.write(str(n) + '\\\\n')\\n\\ndef wia(a):\\n\\tsys.stdout.write(' '.join([str(x) for x in a]) + '\\\\n')\\nt = 1\\nfor _ in range(t):\\n\\tn = ii()\\n\\ta = li()\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\t\\tcontinue\\n\\tmi = a.index(min(a))\\n\\ta1 = [abs(i) for i in a]\\n\\tif min(a) >= 0 and a == a1:\\n\\t\\tprint(sum(a) - a[mi] - a[mi])\\n\\telif max(a) < 0:\\n\\t\\tprint(sum(a1) - 2 * min(a1))\\n\\telse:\\n\\t\\tprint(sum(a1))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\nans = sum(map(abs, a))\\npos = sum((x > 0 for x in a))\\nneg = n - pos\\nif pos == n:\\n\\tans -= min(a) * 2\\nif neg == n:\\n\\tans += max(a) * 2\\nprint(ans)\\n\", \"n = int(input())\\nx = 0\\ncp = 0\\ncn = 0\\na = [int(i) for i in input().split()]\\nsum1 = 0\\nfor i in range(n):\\n\\tsum1 += abs(a[i])\\n\\tif i == 0:\\n\\t\\tx = abs(a[i])\\n\\telse:\\n\\t\\tx = min(x, abs(a[i]))\\n\\tif a[i] > 0:\\n\\t\\tcp = 1\\n\\telif a[i] < 0:\\n\\t\\tcn = 1\\n\\telse:\\n\\t\\tcp = 1\\n\\t\\tcn = 1\\nif n == 1:\\n\\tprint(a[0])\\nelif cp == 1 and cn == 1:\\n\\tprint(sum1)\\nelse:\\n\\tprint(sum1 - 2 * x)\\n\", \"n = int(input())\\nq = d = 0\\np = False\\nar = list(map(int, input().split()))\\nmin = 10000000000\\nr = max(ar)\\nfor i in ar:\\n\\tif i >= 0:\\n\\t\\tif i < min:\\n\\t\\t\\tmin = i\\n\\t\\tq += i\\n\\telse:\\n\\t\\tp = True\\n\\t\\td += -i\\nif r >= 0:\\n\\tif p:\\n\\t\\tmax = q + d\\n\\telse:\\n\\t\\tmax = q - min - min\\nelse:\\n\\tmax = d + r + r\\nif len(ar) == 1:\\n\\tprint(ar[0])\\nelse:\\n\\tprint(max)\\n\", \"import math\\nn = int(input())\\narr = list(map(int, input().split()))\\ncp = 0\\ncn = 0\\nfor i in range(len(arr)):\\n\\tif arr[i] >= 0:\\n\\t\\tcp += 1\\n\\telse:\\n\\t\\tcn += 1\\nb = []\\nfor i in range(len(arr)):\\n\\tb.append(abs(arr[i]))\\nm = min(b)\\nif n == 1:\\n\\tprint(arr[0])\\nelif cp > 0 and cn > 0:\\n\\tprint(sum(b))\\nelse:\\n\\tnrt = 2 * min(b)\\n\\tprint(sum(b) - nrt)\\n\", \"from math import *\\nfrom collections import *\\nimport sys\\nsys.setrecursionlimit(10 ** 9)\\nn = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tans += abs(a[i])\\n\\tm = max(a)\\n\\tif m < 0:\\n\\t\\tans += 2 * m\\n\\tm = min(a)\\n\\tif m > 0:\\n\\t\\tans -= 2 * m\\n\\tprint(ans)\\n\", \"from collections import Counter, defaultdict, deque\\nget = lambda : int(input())\\nread = lambda : list(map(int, input().split()))\\nmod = 10 ** 9 + 7\\ninf = float('inf')\\nn = get()\\na = read()\\nif n == 1:\\n\\tprint(a[0])\\nelif all((a[i] > 0 for i in range(n))):\\n\\tprint(sum(a) - 2 * min(a))\\nelif all((a[i] < 0 for i in range(n))):\\n\\tprint(-sum(a) + 2 * max(a))\\nelse:\\n\\tres = 0\\n\\tfor i in range(n):\\n\\t\\tres += abs(a[i])\\n\\tprint(res)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit(0)\\nmin_idx = 0\\nmin_res = a[0]\\nmax_idx = 0\\nmax_res = a[0]\\nfor i in range(1, n):\\n\\tif a[i] < min_res:\\n\\t\\t(min_idx, min_res) = (i, a[i])\\n\\tif a[i] > max_res:\\n\\t\\t(max_idx, max_res) = (i, a[i])\\nres = 0\\nfor i in range(n):\\n\\tif i != min_idx and i != max_idx:\\n\\t\\tres += abs(a[i])\\nif min_res == max_res:\\n\\tres -= abs(min_res)\\nprint(max_res + res - min_res)\\n\", \"import math\\nfrom decimal import *\\ngetcontext().prec = 30\\nn = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\tquit()\\nans = 0\\nneg = 0\\npos = 0\\ni = 0\\nfor val in a:\\n\\tans += abs(val)\\n\\tif val < 0:\\n\\t\\tneg += 1\\n\\t\\ta[i] *= -1\\n\\telse:\\n\\t\\tpos += 1\\n\\ti += 1\\nif neg == n or pos == n:\\n\\tans -= abs(min(a)) * 2\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\nar = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(ar[0])\\nelif n == 2:\\n\\tprint(abs(ar[0] - ar[1]))\\nelse:\\n\\tflag = False\\n\\tfor i in range(1, n):\\n\\t\\tif ar[i] * ar[i - 1] <= 0:\\n\\t\\t\\tflag = True\\n\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tans = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tans += abs(ar[i])\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tmi = float('inf')\\n\\t\\tans = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tmi = min(mi, abs(ar[i]))\\n\\t\\t\\tans += abs(ar[i])\\n\\t\\tprint(abs(ans - mi * 2))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\ndp = [[[0, 0], [0, 0]] for i in range(n + 1)]\\ndp[1][0][1] = -a[0]\\ndp[1][1][0] = a[0]\\ndp[1][1][1] = -10 ** 18\\nfor i in range(2, n + 1):\\n\\tdp[i][0][1] = -a[i - 1] + dp[i - 1][0][1]\\n\\tdp[i][1][0] = a[i - 1] + dp[i - 1][1][0]\\n\\tdp[i][1][1] = max(a[i - 1] + dp[i - 1][0][1], -a[i - 1] + dp[i - 1][1][0], a[i - 1] + dp[i - 1][1][1], -a[i - 1] + dp[i - 1][1][1])\\nprint(dp[-1][1][1])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(l[0])\\n\\texit(0)\\npos = 0\\nneg = 0\\nfor i in l:\\n\\tif i >= 0:\\n\\t\\tpos -= -1\\n\\telse:\\n\\t\\tneg -= -1\\nif neg > 0 and pos > 0:\\n\\tsm = 0\\n\\tfor i in l:\\n\\t\\tsm += abs(i)\\n\\tprint(sm)\\nelif neg == 0:\\n\\tprint(sum(l) - 2 * min(l))\\nelse:\\n\\tprint(abs(sum(l)) - 2 * abs(max(l)))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\n(mx, mxi) = (-10 ** 10, -1)\\n(mn, mni) = (10 ** 10, -1)\\nfor i in range(n):\\n\\tif a[i] > mx:\\n\\t\\t(mx, mxi) = (a[i], i)\\n\\tif a[i] < mn:\\n\\t\\t(mn, mni) = (a[i], i)\\nif mn < 0:\\n\\tif mx < 0:\\n\\t\\tprint(-sum(a) + 2 * mx)\\n\\telse:\\n\\t\\tprint(sum([abs(i) for i in a]))\\nelse:\\n\\tprint(sum(a) - 2 * mn)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tprod_minus = False\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i] * a[i + 1] <= 0:\\n\\t\\t\\tprod_minus = True\\n\\t\\t\\tbreak\\n\\tMin_abs = float('inf')\\n\\tSum = 0\\n\\tfor num in a:\\n\\t\\tSum += abs(num)\\n\\t\\tif abs(num) < Min_abs:\\n\\t\\t\\tMin_abs = abs(num)\\n\\tif prod_minus:\\n\\t\\tprint(Sum)\\n\\telse:\\n\\t\\tprint(Sum - 2 * Min_abs)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nans = 0\\nck = 0\\nd1 = -10000000000\\nd2 = 10000000000\\nfor i in a:\\n\\tans += abs(i)\\n\\td1 = max(d1, i)\\n\\td2 = min(d2, i)\\n\\tif i == 0:\\n\\t\\tck = 1\\nif ck == 1:\\n\\tprint(ans)\\nelif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tans -= abs(d1) + abs(d2)\\n\\tans += abs(d1 - d2)\\n\\tprint(ans)\\n\", \"from sys import stdin\\ninput = lambda : stdin.readline().strip()\\nlin = lambda : list(map(int, input().split()))\\niin = lambda : int(input())\\nmain = lambda : map(int, input().split())\\nfrom math import ceil, sqrt, factorial, log\\nfrom collections import deque\\nfrom bisect import bisect_left\\n\\ndef gcd(a, b):\\n\\t(a, b) = (max(a, b), min(a, b))\\n\\twhile a % b != 0:\\n\\t\\t(a, b) = (b, a % b)\\n\\treturn b\\nmod = 998244353\\n\\ndef solve():\\n\\tn = iin()\\n\\tl = lin()\\n\\ta = []\\n\\tb = []\\n\\tfor i in l:\\n\\t\\tif i >= 0:\\n\\t\\t\\ta.append(i)\\n\\t\\telse:\\n\\t\\t\\tb.append(i)\\n\\tif n == 1:\\n\\t\\tprint(l[0])\\n\\telse:\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tt = max(b)\\n\\t\\t\\ta.append(t)\\n\\t\\t\\tb.remove(t)\\n\\t\\telif len(b) == 0:\\n\\t\\t\\tt = min(a)\\n\\t\\t\\tb.append(t)\\n\\t\\t\\ta.remove(t)\\n\\t\\tprint(sum(a) - sum(b))\\nqwe = 1\\nfor _ in range(qwe):\\n\\tsolve()\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\npos = 0\\nneg = 0\\nw = []\\nfor i in range(n):\\n\\tif l[i] >= 0:\\n\\t\\tpos += 1\\n\\telse:\\n\\t\\tneg += 1\\n\\tw.append(abs(l[i]))\\nif n == 1:\\n\\tprint(l[0])\\nelif neg != 0 and pos == 0:\\n\\tprint(sum(w) - min(w) * 2)\\nelif pos != 0 and neg == 0:\\n\\tprint(sum(w) - min(w) * 2)\\nelse:\\n\\tprint(sum(w))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\np = 0\\nif n <= 1:\\n\\tprint(a[0])\\nelse:\\n\\tfor j in range(n):\\n\\t\\tif a[j] < 0:\\n\\t\\t\\tp += 1\\n\\tif p == 0:\\n\\t\\tprint(sum(a) - 2 * min(a))\\n\\telif p == n:\\n\\t\\tprint(abs(sum(a)) - 2 * abs(max(a)))\\n\\telse:\\n\\t\\ts = 0\\n\\t\\tfor j in range(n):\\n\\t\\t\\ts += abs(a[j])\\n\\t\\tprint(s)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\narr1 = []\\narr2 = []\\nval1 = 0\\nfor i in range(n - 1):\\n\\tval1 += arr[i]\\n\\tarr1.append(val1)\\nval1 = 0\\nfor i in range(n - 1, 0, -1):\\n\\tval1 += arr[i]\\n\\tarr2.append(val1)\\nfans = -10000000000000000000000\\nfor i in range(n - 1):\\n\\tfans = max(fans, arr2[n - 2 - i] - arr1[i])\\nif n == 1:\\n\\tprint(arr[0])\\nelse:\\n\\tprint(fans)\\n\", \"from math import inf\\nn = int(input())\\na = [int(c) for c in input().split()]\\nc = 0\\nfor i in range(n):\\n\\tif a[i] >= 0:\\n\\t\\tc += 1\\nif n == 1:\\n\\tprint(a[0])\\nelif c == n:\\n\\ts = sum(a)\\n\\tm = -inf\\n\\tfor i in range(1, n):\\n\\t\\ts -= a[i] + a[i - 1]\\n\\t\\ts += abs(a[i] - a[i - 1])\\n\\t\\tm = max(s, m)\\n\\t\\ts -= abs(a[i] - a[i - 1])\\n\\t\\ts += a[i] + a[i - 1]\\n\\tprint(m)\\nelif c == 0:\\n\\ts = abs(sum(a))\\n\\tm = -inf\\n\\tfor i in range(1, n):\\n\\t\\ts += a[i] + a[i - 1]\\n\\t\\ts += abs(a[i] - a[i - 1])\\n\\t\\tm = max(s, m)\\n\\t\\ts -= abs(a[i] - a[i - 1])\\n\\t\\ts -= a[i] + a[i - 1]\\n\\tprint(m)\\nelse:\\n\\tan = 0\\n\\tfor i in range(n):\\n\\t\\tan += abs(a[i])\\n\\tprint(an)\\n\", \"import sys\\nimport math\\nimport collections\\nimport heapq\\nimport decimal\\ninput = sys.stdin.readline\\nn = int(input())\\nl = [int(i) for i in input().split()]\\nif len(l) == 1:\\n\\tprint(*l)\\nelse:\\n\\tmi = min(l)\\n\\tma = max(l)\\n\\tif mi >= 0:\\n\\t\\tprint(sum(l) - 2 * mi)\\n\\telif ma <= 0:\\n\\t\\tprint(-sum(l) + 2 * ma)\\n\\telse:\\n\\t\\ts = 0\\n\\t\\tfor i in l:\\n\\t\\t\\ts += abs(i)\\n\\t\\tprint(s)\\n\", \"R = lambda : map(int, input().split())\\nn = int(input())\\na = list(R())\\nif n == 1:\\n\\tprint(a[0])\\nelif any((x >= 0 for x in a)) and any((x <= 0 for x in a)):\\n\\tprint(sum((abs(x) for x in a)))\\nelse:\\n\\tprint(sum((abs(x) for x in a)) - 2 * min((abs(x) for x in a)))\\n\", \"n = int(input())\\nb = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(b[0])\\n\\texit(0)\\nmin1 = min(b)\\nmax1 = max(b)\\ns = 0\\nfor i in range(n):\\n\\ts = s + abs(b[i])\\nprint(s + max1 - min1 - abs(max1) - abs(min1))\\n\", \"import os\\nimport sys\\nimport math\\nfrom io import BytesIO, IOBase\\nfrom fractions import Fraction\\nimport collections\\nfrom itertools import permutations\\nfrom collections import defaultdict\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nn = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nif n == 1:\\n\\tprint(a[0])\\nelif a[0] <= 0 and a[-1] >= 0:\\n\\tr = 0\\n\\tfor i in a:\\n\\t\\tr += abs(i)\\n\\tprint(r)\\nelif a[0] >= 0:\\n\\tr = -a[0]\\n\\tfor i in range(1, n):\\n\\t\\tr += a[i]\\n\\tprint(r)\\nelse:\\n\\tr = a[-1]\\n\\tfor i in range(n - 1):\\n\\t\\tr -= a[i]\\n\\tprint(r)\\n\", \"from math import ceil, sqrt\\n\\ndef mod_expo(n, p, m):\\n\\tresult = 1\\n\\twhile p != 0:\\n\\t\\tif p % 2 == 1:\\n\\t\\t\\tresult = result * n % m\\n\\t\\tp //= 2\\n\\t\\tn = n * n % m\\n\\treturn result\\n\\ndef find_product(n, m, arr):\\n\\tproduct = 1\\n\\tif n <= m:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tfor j in range(i + 1, n):\\n\\t\\t\\t\\tproduct = product * abs(arr[i] - arr[j]) % m\\n\\t\\treturn product\\n\\treturn 0\\n\\ndef count_tables(l):\\n\\tcount = 0\\n\\tl.sort()\\n\\ta = l[1] - l[0]\\n\\tb = l[2] - l[0]\\n\\tif a % 3 > 0 and a % 3 + (b - (a - a % 3)) >= 3:\\n\\t\\tcount += 1\\n\\tcount += l[0] + 2 * a // 3\\n\\treturn int(min(sum(l) / 3, l[0] + l[1]))\\n\\ndef no_vacancy(n, arr):\\n\\thotel = {}\\n\\tfor i in range(n):\\n\\t\\troom = (i + arr[i]) % n\\n\\t\\tif room in hotel:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\thotel[room] = 1\\n\\treturn True\\n\\ndef find_height(n):\\n\\treturn int((-1 + sqrt(1 + 8 * n)) // 2)\\n\\ndef find_cost(n, arr):\\n\\treturn min(arr) * (n - 1)\\n\\ndef find_moves(n, s):\\n\\ta = 0\\n\\tb = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == 'b':\\n\\t\\t\\tb += 1\\n\\t\\telse:\\n\\t\\t\\ta += 1\\n\\treturn min(a, b)\\n\\ndef ratio_function(l, b):\\n\\tP = 2 * (l + b)\\n\\tS = l * b\\n\\treturn P * P / S\\n\\ndef find_max_val(n, slime):\\n\\tmn = pow(10, 9) + 1\\n\\ts = 0\\n\\thas_positive = False\\n\\thas_negative = False\\n\\tif n == 1:\\n\\t\\treturn slime[0]\\n\\tfor i in range(n):\\n\\t\\tif slime[i] > 0:\\n\\t\\t\\thas_positive = True\\n\\t\\telif slime[i] < 0:\\n\\t\\t\\thas_negative = True\\n\\t\\ts += abs(slime[i])\\n\\t\\tmn = min(mn, abs(slime[i]))\\n\\tif has_positive and has_negative:\\n\\t\\treturn s\\n\\treturn s - 2 * mn\\nt = 1\\nwhile t:\\n\\tt = t - 1\\n\\tn = int(input())\\n\\tl = list(map(int, input().strip().split()))[:n]\\n\\tprint(find_max_val(n, l))\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\npos = []\\nneg = []\\nfor i in lis:\\n\\tif i >= 0:\\n\\t\\tpos.append(i)\\n\\telse:\\n\\t\\tneg.append(i)\\npos.sort(reverse=True)\\nneg.sort(reverse=True)\\nif n == 1:\\n\\tprint(lis[0])\\n\\texit()\\nif len(pos) > 0:\\n\\tif len(neg) > 0:\\n\\t\\tprint(sum(pos) - sum(neg))\\n\\telse:\\n\\t\\tprint(sum(pos) - 2 * min(pos))\\nelse:\\n\\tprint(2 * max(neg) - sum(neg))\\n\", \"import sys, os, io\\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\\nn = int(input())\\na = [int(i) for i in input().split()]\\nmi = min(a)\\nma = max(a)\\nb = [abs(i) for i in a]\\nm = min(b)\\nif n == 1:\\n\\tprint(a[0])\\nelif mi <= 0 and ma >= 0:\\n\\tprint(sum(b))\\nelse:\\n\\tprint(sum(b) - 2 * m)\\n\", \"import sys\\nimport bisect\\nfrom collections import Counter\\nread_int = lambda : int(sys.stdin.readline())\\nread_ints = lambda : map(int, sys.stdin.readline().split())\\nread_int_list = lambda : list(read_ints())\\nread = lambda : sys.stdin.readline().strip()\\nread_list = lambda : sys.stdin.readline().split()\\n\\ndef main():\\n\\tn = read_int()\\n\\ta = read_int_list()\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\t\\treturn\\n\\t(ma, mi, ze) = (max(0, max(a)), min(0, min(a)), 0 in a)\\n\\tall_neg = ma == 0 and (not ze)\\n\\tall_pos = mi == 0 and (not ze)\\n\\tif all_neg:\\n\\t\\tprint(-sum(a) + 2 * max(a))\\n\\telif all_pos:\\n\\t\\tprint(sum(a) - 2 * min(a))\\n\\telse:\\n\\t\\tprint(sum(map(abs, a)))\\nmain()\\n\", \"(n, minus) = (int(input()), 100000000000000000000)\\nx = [int(x) for x in input().split()]\\nif n == 1:\\n\\tprint(x[0])\\n\\texit(0)\\nif min(x) > 0:\\n\\tfor i in range(1, n):\\n\\t\\tif x[i] - x[i - 1] <= 0 or x[i - 1] - x[i] <= 0:\\n\\t\\t\\tminus = min(minus, abs(x[i]) + abs(x[i - 1]) - abs(x[i] - x[i - 1]))\\nif max(x) < 0:\\n\\tfor i in range(1, n):\\n\\t\\tif x[i] - x[i - 1] >= 0 or x[i - 1] - x[i] >= 0:\\n\\t\\t\\tminus = min(minus, abs(x[i]) + abs(x[i - 1]) - abs(x[i] - x[i - 1]))\\nif min(x) <= 0 and max(x) >= 0:\\n\\tminus = 0\\nprint(sum(map(abs, x)) - minus)\\n\", \"def ii():\\n\\treturn int(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(mi())\\nn = ii()\\na = li()\\nb = [abs(x) for x in a]\\nif n == 1:\\n\\tans = a[0]\\nelif all((x > 0 for x in a)) or all((x < 0 for x in a)):\\n\\tb.sort()\\n\\tans = sum(b) - 2 * b[0]\\nelse:\\n\\tans = sum(b)\\nprint(ans)\\n\", \"N = int(input())\\nA = list(map(int, input().split()))\\np = 0\\nn = 0\\nfor i in A:\\n\\tif i >= 0:\\n\\t\\tp += 1\\n\\telif i < 0:\\n\\t\\tn += 1\\nif N == 0:\\n\\tprint(0)\\nelif N == 1:\\n\\tprint(A[0])\\nelif p > 0 and n > 0:\\n\\tfor i in range(N):\\n\\t\\tif A[i] < 0:\\n\\t\\t\\tA[i] = -1 * A[i]\\n\\tprint(sum(A))\\nelif p == len(A):\\n\\tx = A.index(min(A))\\n\\tif x == 0:\\n\\t\\tprint(sum(A) - 2 * A[0])\\n\\telif x == N - 1:\\n\\t\\tprint(sum(A) - 2 * A[-1])\\n\\telse:\\n\\t\\tprint(sum(A) - 2 * min(A))\\nelif n == len(A):\\n\\tfor i in range(N):\\n\\t\\tA[i] = -1 * A[i]\\n\\tx = A.index(min(A))\\n\\tif x == 0:\\n\\t\\tprint(sum(A) - 2 * A[0])\\n\\telif x == N - 1:\\n\\t\\tprint(sum(A) - 2 * A[-1])\\n\\telse:\\n\\t\\tprint(sum(A) - 2 * min(A))\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(A[0])\\nelif n == 2:\\n\\tprint(abs(A[0] - A[1]))\\nelse:\\n\\tSUM = 0\\n\\tfor i in range(n):\\n\\t\\tSUM += abs(A[i])\\n\\tANS = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif ANS < SUM - abs(A[i]) - abs(A[i + 1]) + abs(A[i] - A[i + 1]):\\n\\t\\t\\tANS = SUM - abs(A[i]) - abs(A[i + 1]) + abs(A[i] - A[i + 1])\\n\\tprint(ANS)\\n\", \"n = int(input())\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tsm = 0\\n\\thavePositive = False\\n\\thaveNegative = False\\n\\tfor c in a:\\n\\t\\tif c == 0:\\n\\t\\t\\thaveNegative = True\\n\\t\\t\\thavePositive = True\\n\\t\\telif c > 0:\\n\\t\\t\\thavePositive = True\\n\\t\\t\\tsm += c\\n\\t\\telse:\\n\\t\\t\\thaveNegative = True\\n\\t\\t\\tsm -= c\\n\\tif haveNegative and havePositive:\\n\\t\\tprint(sm)\\n\\telse:\\n\\t\\tfor i in range(n):\\n\\t\\t\\ta[i] = abs(a[i])\\n\\t\\tans = sum(a)\\n\\t\\tlow = a[0]\\n\\t\\tfor c in a:\\n\\t\\t\\tlow = min(low, c)\\n\\t\\tprint(ans - 2 * low)\\n\", \"n = input()\\nls = [int(x) for x in input().split()]\\nif n == '1':\\n\\tprint(ls[0])\\nelse:\\n\\tls = sorted(ls)\\n\\tstart = ls[0]\\n\\tend = ls[-1]\\n\\tmid = ls[1:-1]\\n\\tres = end - start + sum([abs(x) for x in mid])\\n\\tprint(res)\\n\", \"import sys\\nimport string\\n\\ndef ria():\\n\\treturn [int(i) for i in input().split()]\\nn = ria()[0]\\nar = ria()\\nif n == 1:\\n\\tprint(ar[0])\\n\\texit(0)\\nonlyNegs = True\\nonlyPos = True\\nif max(ar) >= 0:\\n\\tonlyNegs = False\\nif min(ar) <= 0:\\n\\tonlyPos = False\\nif onlyNegs:\\n\\tprint(abs(sum(ar)) + max(ar) * 2)\\n\\texit(0)\\nif onlyPos:\\n\\tprint(abs(sum(ar)) - min(ar) * 2)\\n\\texit(0)\\nprint(sum([abs(i) for i in ar]))\\n\", \"n = int(input())\\nl1 = list(map(int, input().split()))\\nx = l1[0]\\nflag1 = 0\\nflag2 = 0\\nans = 0\\nfor item in l1:\\n\\tans += abs(item)\\n\\tif item < 0:\\n\\t\\tflag1 = 1\\n\\telse:\\n\\t\\tflag2 = 1\\nfor i in range(0, n):\\n\\tl1[i] = abs(l1[i])\\nif flag1 == 1 and flag2 == 1:\\n\\tprint(ans)\\nelif n != 1:\\n\\tprint(sum(l1) - 2 * min(l1))\\nelse:\\n\\tprint(x)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\texit(print(*a))\\n(pos, neg) = (False, False)\\nmn = 10 ** 9 + 5\\nans = 0\\nfor i in a:\\n\\tpos |= i >= 0\\n\\tneg |= i <= 0\\n\\tans += abs(i)\\n\\tmn = min(abs(i), mn)\\nif pos and neg:\\n\\tprint(ans)\\nelse:\\n\\tprint(ans - 2 * mn)\\n\", \"n = int(input())\\na = [int(x) for x in input().split(' ')]\\nif len(a) == 1:\\n\\tprint(a[0])\\n\\texit()\\na.sort()\\nif all((x > 0 for x in a)):\\n\\tprint(sum(a) - a[0] * 2)\\n\\texit()\\nif all((x < 0 for x in a)):\\n\\tprint(-sum(a) + a[-1] * 2)\\n\\texit()\\nprint(sum((abs(x) for x in a)))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\ts = 0\\n\\ta.sort()\\n\\tpos = 0\\n\\tneg = 0\\n\\tk = 1\\n\\tfor i in range(n):\\n\\t\\tif a[i] > 0:\\n\\t\\t\\tpos += 1\\n\\t\\tif a[i] < 0:\\n\\t\\t\\tneg += 1\\n\\t\\ts += abs(a[i])\\n\\tif pos == n:\\n\\t\\tprint(s - 2 * a[0])\\n\\telif neg == n:\\n\\t\\tprint(s + 2 * a[n - 1])\\n\\telse:\\n\\t\\tprint(s)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nminval = abs(a[0])\\nhavepos = 0\\nhaveneg = 0\\nans = 0\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tfor i in range(n):\\n\\t\\tminval = min(abs(a[i]), minval)\\n\\t\\thavepos = havepos or a[i] >= 0\\n\\t\\thaveneg = haveneg or a[i] <= 0\\n\\t\\tans += abs(a[i])\\n\\tif haveneg and havepos:\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(ans - 2 * minval)\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\nif n == 1:\\n\\texit(print(s[0]))\\nf = []\\nif any((i <= 0 for i in s)) and any((i >= 0 for i in s)):\\n\\texit(print(sum(map(abs, s))))\\ns.sort(key=abs)\\ncs = s[0]\\nfor i in s[1:]:\\n\\tcs -= i\\nprint(abs(cs))\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\nans = 0\\nsmax = -10 ** 9\\nsmin = 10 ** 9\\nfor i in s:\\n\\tif i > smax:\\n\\t\\tsmax = i\\n\\tif i < smin:\\n\\t\\tsmin = i\\nf1 = False\\nf2 = False\\nfor i in s:\\n\\tif not f1 and i == smax:\\n\\t\\tans += smax\\n\\t\\tf1 = True\\n\\t\\tcontinue\\n\\tif not f2 and i == smin:\\n\\t\\tans -= smin\\n\\t\\tf2 = True\\n\\t\\tcontinue\\n\\tif i > 0:\\n\\t\\tans += i\\n\\telse:\\n\\t\\tans -= i\\nprint(ans)\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\ns.sort()\\nans = 0\\nif n == 1:\\n\\tans = s[0]\\nelif s[0] >= 0:\\n\\tans = sum(s[1:]) - s[0]\\nelif s[-1] < 0:\\n\\tans = -sum(s[0:n - 1]) + s[-1]\\nelse:\\n\\tfor i in range(n):\\n\\t\\ts[i] = abs(s[i])\\n\\tans = sum(s)\\nprint(ans)\\n\", \"n = int(input())\\nval = sorted(map(int, input().split()))\\nsval = sum(map(abs, val))\\nif n == 1:\\n\\tprint(val[0])\\nelif val[0] > 0:\\n\\tprint(sval - val[0] * 2)\\nelif val[-1] < 0:\\n\\tprint(val[-1] * 2 + sval)\\nelse:\\n\\tprint(sval)\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\nv = list(sorted(map(int, input().split())))\\nif n == 1:\\n\\tprint(v[0])\\nelse:\\n\\tprint(v[n - 1] - v[0] + sum(map(abs, v)) - (abs(v[0]) + abs(v[n - 1])))\\n\", \"from sys import stdin\\nn = int(input())\\na = [int(x) for x in stdin.readline().split()]\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tcnt = 0\\n\\tb = [0] * n\\n\\tli1 = [0] * n\\n\\tli2 = [0] * n\\n\\tfor i in range(n):\\n\\t\\tb[i] = abs(a[i])\\n\\tfor i in range(n):\\n\\t\\tif b[i] == a[i]:\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tcnt = cnt\\n\\tans = float('-inf')\\n\\tif cnt == n or cnt == 0:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif i == 0:\\n\\t\\t\\t\\tli1[i] = b[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tli1[i] = li1[i - 1] + b[i]\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tif i == n - 1:\\n\\t\\t\\t\\tli2[i] = b[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tli2[i] = li2[i + 1] + b[i]\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tsu = 0\\n\\t\\t\\ts = a[i] - a[i + 1]\\n\\t\\t\\tsu += abs(s)\\n\\t\\t\\tif i != 0:\\n\\t\\t\\t\\tsu += li1[i - 1]\\n\\t\\t\\tif i != n - 2:\\n\\t\\t\\t\\tsu += li2[i + 2]\\n\\t\\t\\tif su > ans:\\n\\t\\t\\t\\tans = su\\n\\t\\t\\t\\tpos = i\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tans = sum(b)\\n\\t\\tprint(ans)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nabsArr = list(map(abs, arr))\\n(positiveCount, negativeCount) = (0, 0)\\nfor num in arr:\\n\\tif num > 0:\\n\\t\\tpositiveCount += 1\\n\\telif num < 0:\\n\\t\\tnegativeCount += 1\\nif n == 1:\\n\\tprint(arr[0])\\nelif positiveCount == n or negativeCount == n:\\n\\tprint(sum(absArr) - 2 * min(absArr))\\nelse:\\n\\tprint(sum(absArr))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(l[0])\\n\\texit()\\nl = sorted(l)\\ns = abs(l[0] - l[-1])\\nfor i in range(1, n - 1):\\n\\ts += abs(l[i])\\nprint(s)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nmx = max(l)\\nmn = min(l)\\nlx = l.index(mx)\\nlm = l.index(mn)\\nif lx == lm and n != 1:\\n\\tlm = l.index(mn, lx + 1)\\ns = sum([abs(x) for (i, x) in enumerate(l) if i != lx and i != lm])\\nif n == 1:\\n\\tprint(mn)\\n\\texit()\\nif n == 2:\\n\\tprint(mx - mn)\\n\\texit()\\nprint(s + mx - mn)\\n\", \"import sys\\nn = int(sys.stdin.readline())\\na = list(map(int, sys.stdin.readline().split()))\\na.sort()\\nc = a[n - 1]\\nf = a[0]\\nif n > 1:\\n\\tfor i in range(1, n - 1):\\n\\t\\tif a[i] >= 0:\\n\\t\\t\\tf -= a[i]\\n\\t\\telif a[i] < 0:\\n\\t\\t\\tf += a[i]\\n\\tprint(c - f)\\nelse:\\n\\tprint(a[0])\\n\", \"n = int(input())\\nif n == 1:\\n\\tprint(int(input()))\\n\\texit(0)\\n(a, b) = ([], [])\\nfor i in map(int, input().split()):\\n\\tif i > 0:\\n\\t\\ta.append(i)\\n\\telif i < 0:\\n\\t\\tb.append(i)\\nif len(a) != 0 and len(b) != 0:\\n\\tprint(sum(a) - sum(b))\\nelif len(a) + len(b) != n:\\n\\tprint(sum(a) - sum(b))\\nelif len(a) == 0:\\n\\tprint(max(b) * 2 - sum(b))\\nelse:\\n\\tprint(sum(a) - min(a) * 2)\\n\", \"import sys\\nn = int(input())\\nl = list(map(int, sys.stdin.readline().split()))\\nif len(l) == 1:\\n\\texit(print(l[0]))\\nif all((i > 0 for i in l)):\\n\\tprint(sum(l) - 2 * min(l))\\nelif all((i < 0 for i in l)):\\n\\tprint(abs(sum(l)) + 2 * max(l))\\nelse:\\n\\ts = 0\\n\\tfor i in l:\\n\\t\\ts = s + abs(i)\\n\\tprint(s)\\n\", \"ans = []\\na = int(input())\\nans = []\\nimport math\\nz = list(map(int, input().split()))\\ncount = 1\\nfor i in range(1, len(z)):\\n\\tif z[i] >= 0 and z[i - 1] >= 0 or (z[i] <= 0 and z[i - 1] <= 0):\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tans.append(count)\\n\\t\\tcount = 1\\nans.append(count)\\nif len(ans) > 1:\\n\\ttt = 0\\n\\tfor i in range(len(z)):\\n\\t\\ttt += abs(z[i])\\n\\tprint(tt)\\nelif len(z) == 1:\\n\\tprint(z[0])\\n\\texit()\\nelse:\\n\\ttt = 0\\n\\tmini = math.inf\\n\\tfor i in range(len(z)):\\n\\t\\tz[i] = abs(z[i])\\n\\t\\tmini = min(z[i], mini)\\n\\t\\ttt += z[i]\\n\\tprint(tt - 2 * mini)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ns = 0\\nif max(a) <= 0:\\n\\tprint(abs(sum(a)) + 2 * max(a))\\nelif min(a) >= 0:\\n\\tprint(abs(abs(sum(a)) - 2 * min(a)))\\nelse:\\n\\tfor i in a:\\n\\t\\ts += abs(i)\\n\\tprint(s)\\n\", \"def f(arr, N):\\n\\tif N == 1:\\n\\t\\treturn arr[0]\\n\\ta = 0\\n\\ta_min = 10 ** 9 + 1\\n\\tb = 0\\n\\tc = False\\n\\td = False\\n\\tb_min = -1 * a_min\\n\\tfor i in arr:\\n\\t\\tif i >= 0:\\n\\t\\t\\tc = True\\n\\t\\t\\ta += i\\n\\t\\t\\ta_min = min(a_min, i)\\n\\t\\telse:\\n\\t\\t\\td = True\\n\\t\\t\\tb += i\\n\\t\\t\\tb_min = max(i, b_min)\\n\\tif c:\\n\\t\\tif d:\\n\\t\\t\\treturn a - b\\n\\t\\treturn a - 2 * a_min\\n\\treturn 2 * b_min - b\\nN = int(input())\\narr = list(map(int, input().strip().split()))\\nprint(f(arr, N))\\n\", \"n = int(input())\\na = [int(s) for s in input().split()]\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\n(mi, po, sum, mix) = (0, 0, 0, 1000000000.0 + 1)\\nfor i in a:\\n\\tif i < 0:\\n\\t\\tmi += 1\\n\\tif i >= 0:\\n\\t\\tpo += 1\\n\\tsum += abs(i)\\n\\tmix = min(mix, abs(i))\\nif mi and po:\\n\\tprint(sum)\\nelse:\\n\\tprint(sum - mix * 2)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nall_positive = True\\nall_negative = True\\nmin_positive_index = None\\nmax_negative_index = None\\nmin_abs_value = abs(a[0])\\ntotal = 0\\nif n == 1:\\n\\tprint(a[0])\\nelse:\\n\\tfor i in range(n):\\n\\t\\tvalue = a[i]\\n\\t\\tall_positive &= value > 0\\n\\t\\tall_negative &= value < 0\\n\\t\\tmin_abs_value = min(min_abs_value, abs(value))\\n\\t\\ttotal += abs(value)\\n\\tif all_positive or all_negative:\\n\\t\\tprint(total - 2 * min_abs_value)\\n\\telse:\\n\\t\\tprint(total)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\nif max(a) > 1 and min(a) < 1:\\n\\tprint(sum((abs(x) for x in a)))\\nelse:\\n\\tprint(sum((abs(x) for x in a)) - 2 * min((abs(x) for x in a)))\\n\", \"n = int(input().strip())\\narr = [int(__) for __ in input().strip().split()]\\nif n == 1:\\n\\tprint(arr[0])\\nelse:\\n\\tne = 0\\n\\tfor i in arr:\\n\\t\\tif i < 0:\\n\\t\\t\\tne += 1\\n\\tif ne == len(arr):\\n\\t\\tarr = [abs(i) for i in arr]\\n\\t\\tprint(sum(arr) - 2 * min(arr))\\n\\telse:\\n\\t\\tmi = min(arr)\\n\\t\\tarr = [abs(i) for i in arr]\\n\\t\\tif mi < 0:\\n\\t\\t\\tprint(sum(arr))\\n\\t\\telse:\\n\\t\\t\\tprint(sum(arr) - 2 * mi)\\n\", \"from sys import stdin\\nfrom collections import deque\\nmod = 10 ** 9 + 7\\nimport sys\\nsys.setrecursionlimit(10 ** 5)\\nfrom queue import PriorityQueue\\nfrom bisect import bisect_right\\nfrom bisect import bisect_left\\nfrom collections import defaultdict\\nfrom math import sqrt, factorial, gcd, log2, inf, ceil\\nimport heapq\\ninput = lambda : sys.stdin.readline().rstrip()\\nfrom sys import stdin, stdout\\nfrom heapq import heapify, heappush, heappop\\nn = int(input())\\nl = list(map(int, input().split()))\\nif max(l) <= 0:\\n\\tprint(abs(sum(l)) + 2 * max(l))\\nelif min(l) >= 0:\\n\\tprint(abs(abs(sum(l)) - 2 * min(l)))\\nelse:\\n\\tans = 0\\n\\tfor i in l:\\n\\t\\tans += abs(i)\\n\\tprint(ans)\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\nif len(lis) == 1:\\n\\tprint(lis[0])\\nelse:\\n\\tlis.sort()\\n\\ta = -lis[0] + lis[-1]\\n\\tlis = list(map(abs, lis))\\n\\tprint(a + sum(lis[1:-1]))\\n\", \"import sys\\nn = int(input())\\nline = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(line[0])\\n\\tsys.exit(0)\\nsum = 0\\nminNum = 10 ** 9\\nmaxNum = -10 ** 9\\nfor i in line:\\n\\tif minNum > i:\\n\\t\\tminNum = i\\n\\tif maxNum < i:\\n\\t\\tmaxNum = i\\n\\tsum += abs(i)\\nif minNum * maxNum < 0:\\n\\tprint(sum)\\nelif minNum < 0:\\n\\tprint(sum - 2 * abs(maxNum))\\nelse:\\n\\tprint(sum - 2 * abs(minNum))\\n\", \"def solve():\\n\\tn = int(input())\\n\\tworms = list(map(int, input().split()))\\n\\tif n == 1:\\n\\t\\treturn worms[0]\\n\\tif len(list(filter(lambda x: x >= 0, worms))) == 0:\\n\\t\\tworms = list(map(abs, worms))\\n\\t\\tminimum = min(worms)\\n\\t\\treturn sum(worms) - 2 * minimum\\n\\tminimum = min(worms)\\n\\tworms_sum = abs(sum(list(map(abs, worms)))) - abs(minimum)\\n\\treturn abs(worms_sum - minimum)\\nprint(solve())\\n\", \"def abs(a):\\n\\tif a < 0:\\n\\t\\treturn -a\\n\\treturn a\\n\\ndef min(a, b):\\n\\tif a < b:\\n\\t\\treturn a\\n\\treturn b\\n\\ndef max(a, b):\\n\\tif b > a:\\n\\t\\treturn b\\n\\treturn a\\nn = int(input())\\na = input()\\na = list(map(int, a.split(' ')))\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\npos = int(0)\\nneg = int(0)\\nmn = int(10000000010)\\nmx = int(-1000000010)\\ns = int(0)\\nfor i in range(n):\\n\\tif a[i] >= 0:\\n\\t\\tpos += 1\\n\\telif a[i] <= 0:\\n\\t\\tneg += 1\\n\\tmn = min(mn, abs(a[i]))\\n\\tmx = max(mx, abs(a[i]))\\n\\ts += abs(a[i])\\nif pos == n or n == neg:\\n\\tprint(s - 2 * mn)\\nelse:\\n\\tprint(s)\\n\", \"from collections import defaultdict\\nn = int(input())\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\nans = 0\\nMax = max(a)\\nMin = min(a)\\nans = 0\\nif n == 1:\\n\\tprint(a[0])\\n\\texit()\\nfor i in range(n):\\n\\tif a[i] > 0:\\n\\t\\tans += a[i]\\n\\telse:\\n\\t\\tans -= a[i]\\nif Min > 0:\\n\\tans -= Min * 2\\n\\tprint(ans)\\n\\texit()\\nelif Max < 0:\\n\\tans += Max * 2\\n\\tprint(ans)\\nelse:\\n\\tprint(ans)\\n\", \"I = lambda : map(int, input().split())\\nn = int(input())\\na = list(I())\\ns = 0\\nif n == 1:\\n\\texit(print(a[0]))\\nif all((i > 0 for i in a)):\\n\\tprint(sum(a) - 2 * min(a))\\nelif all((i < 0 for i in a)):\\n\\tprint(-(sum(a) - 2 * max(a)))\\nelse:\\n\\tfor i in a:\\n\\t\\ts += abs(i)\\n\\tprint(s)\\n\", \"n = int(input())\\na = [int(w) for w in input().split()]\\ns = sum((abs(x) for x in a))\\nif len(a) == 1:\\n\\tprint(a[0])\\nelif all((x > 0 for x in a)) or all((x < 0 for x in a)):\\n\\tprint(max((abs(s - 2 * abs(x)) for x in a)))\\nelse:\\n\\tprint(s)\\n\", \"import math\\nimport sys\\n\\ndef main(arr):\\n\\tneg = 0\\n\\tpos = 0\\n\\tif len(arr) == 1:\\n\\t\\treturn arr[0]\\n\\tif len(arr) == 2:\\n\\t\\treturn abs(arr[0] - arr[1])\\n\\tfor e in arr:\\n\\t\\tif e > 0:\\n\\t\\t\\tpos += e\\n\\t\\telse:\\n\\t\\t\\tneg += -1 * e\\n\\tif pos == 0:\\n\\t\\treturn pos + neg + 2 * max(arr)\\n\\tif neg == 0:\\n\\t\\treturn pos + neg - 2 * min(arr)\\n\\telse:\\n\\t\\treturn pos + neg\\nn = int(input())\\narr = list(map(int, input().split()))\\nprint(main(arr))\\n\", \"import sys\\nimport math\\nlines = sys.stdin.read().splitlines()\\nn = [int(x) for x in lines[0].split()][0]\\nslizni = [int(x) for x in lines[1].split()]\\nsmall_slizen = min(slizni)\\nbig_slizen = max(slizni)\\nif n == 1:\\n\\tprint(small_slizen)\\nelif small_slizen <= 0 and big_slizen >= 0:\\n\\tprint(sum([abs(x) for x in slizni]))\\nelif small_slizen >= 0:\\n\\tprint(sum([abs(x) for x in slizni]) - 2 * small_slizen)\\nelse:\\n\\tprint(sum([abs(x) for x in slizni]) + 2 * big_slizen)\\n\", \"from sys import stdin, stdout\\ntot = int(stdin.readline())\\narr = [int(x) for x in stdin.readline().split()]\\n(n, p, z) = (0, 0, 0)\\nfor i in arr:\\n\\tif i > 0:\\n\\t\\tp += 1\\n\\telif i < 0:\\n\\t\\tn += 1\\n\\telse:\\n\\t\\tz += 1\\nans = 0\\nfor i in arr:\\n\\tans += abs(i)\\nif tot == 1:\\n\\tstdout.write(str(arr[0]))\\nelif p == 0 or n == 0:\\n\\tmi = min(arr)\\n\\tif mi < 0:\\n\\t\\tmi = max(arr)\\n\\tif mi > 0:\\n\\t\\tprint(ans - 2 * mi)\\n\\telse:\\n\\t\\tprint(ans + 2 * mi)\\nelse:\\n\\tstdout.write(str(ans))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif n == 1:\\n\\tprint(a[0])\\nelif n == 2:\\n\\tprint(max(a[0] - a[1], a[1] - a[0]))\\nelse:\\n\\tx = min(a)\\n\\ty = max(a)\\n\\ta = list(map(abs, a))\\n\\tprint(sum(a) - (2 * min(a) if x * y > 0 else 0))\\n\", \"for _ in range(1):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\ts = 0\\n\\tfor i in range(n):\\n\\t\\ts += abs(arr[i])\\n\\tif min(arr) < 0 and max(arr) >= 0:\\n\\t\\tprint(s)\\n\\t\\tcontinue\\n\\tif n == 1:\\n\\t\\tprint(arr[0])\\n\\t\\tcontinue\\n\\td = 999999999999999\\n\\tfor i in range(1, n):\\n\\t\\td = min(d, abs(arr[i]) + abs(arr[i - 1]) - abs(arr[i] - arr[i - 1]))\\n\\tprint(s - d)\\n\", \"n = int(input())\\nxs = [int(x) for x in input().split()]\\nprefix = [-1 for i in range(n)]\\nsuffix = [-1 for i in range(n)]\\nprefix[0] = 0\\npre_has_neg = [False for i in range(n)]\\nsuffix[-1] = 0\\nsuf_has_neg = [False for i in range(n)]\\nfor i in range(n):\\n\\tif i == 0:\\n\\t\\tprefix[i] = xs[i]\\n\\telse:\\n\\t\\tprefix[i] = prefix[i - 1] + xs[i]\\nfor i in reversed(range(n)):\\n\\tif i == n - 1:\\n\\t\\tsuffix[i] = xs[i]\\n\\telse:\\n\\t\\tsuffix[i] = suffix[i + 1] + xs[i]\\nfor i in range(n):\\n\\tif i == 0:\\n\\t\\tpre_has_neg[i] = xs[i] <= 0\\n\\telse:\\n\\t\\tpre_has_neg[i] = pre_has_neg[i - 1] or xs[i] <= 0\\nfor i in reversed(range(n)):\\n\\tif i == n - 1:\\n\\t\\tsuf_has_neg[i] = xs[i] <= 0\\n\\telse:\\n\\t\\tsuf_has_neg[i] = suf_has_neg[i + 1] or xs[i] <= 0\\nprebignum = [None for i in range(n)]\\nsufbignum = [None for i in range(n)]\\nfor i in range(n):\\n\\tif i == 0:\\n\\t\\tprebignum[i] = xs[i]\\n\\telse:\\n\\t\\tprebignum[i] = min(prebignum[i - 1], xs[i])\\nfor i in reversed(range(n)):\\n\\tif i == n - 1:\\n\\t\\tsufbignum[i] = xs[i]\\n\\telse:\\n\\t\\tsufbignum[i] = min(sufbignum[i + 1], xs[i])\\nneg_pre = [100000 for i in range(n)]\\nneg_suf = [100000 for i in range(n)]\\nfor i in range(n):\\n\\tif i == 0:\\n\\t\\tneg_pre[i] = min(xs[i], -xs[i])\\n\\telse:\\n\\t\\tneg_pre[i] = neg_pre[i - 1] + min(xs[i], -xs[i])\\nfor i in reversed(range(n)):\\n\\tif i == n - 1:\\n\\t\\tneg_suf[i] = min(xs[i], -xs[i])\\n\\telse:\\n\\t\\tneg_suf[i] = neg_suf[i + 1] + min(xs[i], -xs[i])\\nans = -100000000000000000\\nfor i in range(n):\\n\\ttans = xs[i]\\n\\tif i == 0:\\n\\t\\tpass\\n\\telif pre_has_neg[i - 1]:\\n\\t\\ttans -= neg_pre[i - 1]\\n\\telse:\\n\\t\\ttans += prefix[i - 1]\\n\\t\\ttans -= prebignum[i - 1] * 2\\n\\tif i == n - 1:\\n\\t\\tpass\\n\\telif suf_has_neg[i + 1]:\\n\\t\\ttans -= neg_suf[i + 1]\\n\\telse:\\n\\t\\ttans += suffix[i + 1]\\n\\t\\ttans -= sufbignum[i + 1] * 2\\n\\tans = max(ans, tans)\\nprint(ans)\\n\", \"n = int(input())\\np = 0\\nm = []\\nfor s in input().split():\\n\\tx = int(s)\\n\\tp += abs(x)\\n\\tm.append(x)\\n\\tm.sort()\\n\\tif len(m) > 2:\\n\\t\\tm.pop(1)\\nif n == 1:\\n\\tprint(m[0])\\nelif m[0] > 0:\\n\\tprint(p - 2 * m[0])\\nelif m[1] < 0:\\n\\tprint(p + 2 * m[1])\\nelse:\\n\\tprint(p)\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\nif len(lis) == 1:\\n\\tprint(*lis)\\n\\texit()\\nmi = min(lis)\\nma = max(lis)\\nif mi >= 0:\\n\\tprint(sum(lis) - 2 * mi)\\nelif ma <= 0:\\n\\tprint(-sum(lis) + 2 * ma)\\nelse:\\n\\ts = 0\\n\\tfor i in lis:\\n\\t\\ts += abs(i)\\n\\tprint(s)\\n\", \"import math\\nn = int(input())\\nif n == 1:\\n\\tprint(input())\\n\\texit(0)\\ns = 0\\nl = math.inf\\nr = -math.inf\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\ts += abs(a[i])\\n\\tif a[i] > r:\\n\\t\\tr = a[i]\\n\\tif a[i] < l:\\n\\t\\tl = a[i]\\nif r < 0:\\n\\ts += r * 2\\nelif l > 0:\\n\\ts -= l * 2\\nprint(s)\\n\", \"import sys\\nfrom collections import defaultdict\\nimport math\\nmod = 998244353\\nn = int(sys.stdin.readline())\\narr = list(map(int, sys.stdin.readline().split()))\\nans = 0\\nnin = abs(arr[0])\\nallneg = True\\nallpos = True\\nfor i in range(n):\\n\\tif arr[i] <= 0:\\n\\t\\tallpos = False\\n\\tif arr[i] >= 0:\\n\\t\\tallneg = False\\nfor i in range(n):\\n\\tans += abs(arr[i])\\n\\tnin = min(nin, abs(arr[i]))\\nif n == 1:\\n\\tprint(arr[0])\\n\\tsys.exit()\\nif allneg or allpos:\\n\\tprint(ans - 2 * nin)\\nelse:\\n\\tprint(ans)\\n\", \"from sys import stdin\\ninput = stdin.buffer.readline\\nn = int(input())\\n(*a,) = map(int, input().split())\\nx = max(a)\\nans = x\\na.remove(x)\\nif n > 1:\\n\\tx = min(a)\\n\\tans -= x\\n\\ta.remove(x)\\nfor i in a:\\n\\tans += abs(i)\\nprint(ans)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tif n == 1:\\n\\t\\tprint(a[0])\\n\\telse:\\n\\t\\t(p, nn) = (0, 0)\\n\\t\\tfor i in range(n):\\n\\t\\t\\tp += a[i] >= 0\\n\\t\\t\\tnn += a[i] < 0\\n\\t\\t\\ta[i] = abs(a[i])\\n\\t\\tif p == 0 or nn == 0:\\n\\t\\t\\tprint(sum(a) - 2 * min(a))\\n\\t\\telse:\\n\\t\\t\\tprint(sum(a))\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"import os\\nimport sys\\nfrom math import *\\nfrom collections import *\\nfrom bisect import *\\nfrom io import BytesIO, IOBase\\n\\ndef vsInput():\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nALPHA = 'abcdefghijklmnopqrstuvwxyz'\\nM = 10 ** 1119 + 7\\nEPS = 1e-06\\n\\ndef Ceil(a, b):\\n\\treturn a // b + int(a % b > 0)\\n\\ndef value():\\n\\treturn tuple(map(int, input().split()))\\n\\ndef array():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef Int():\\n\\treturn int(input())\\n\\ndef Str():\\n\\treturn input()\\n\\ndef arrayS():\\n\\treturn [i for i in input().split()]\\nn = Int()\\na = array()\\na.sort()\\npos = [abs(i) for i in a]\\nans = sum(pos)\\nif a[0] > 0:\\n\\tans -= 2 * a[0]\\nif a[-1] < 0:\\n\\tans += 2 * a[-1]\\nif n == 1:\\n\\tans = a[0]\\nprint(ans)\\n\", \"from sys import stdin, stdout, setrecursionlimit\\nn = int(input())\\na = sorted([int(i) for i in input().split()])\\nminus = plus = 0\\nfor x in a:\\n\\tif x <= 0:\\n\\t\\tminus += 1\\n\\telse:\\n\\t\\tplus += 1\\nif n == 1:\\n\\tprint(a[0])\\nelif plus > 0 and minus > 0:\\n\\ta = [abs(x) for x in a]\\n\\tprint(sum(a))\\nelif plus == 0:\\n\\tprint(-sum(a) + max(a) * 2)\\nelif minus == 0:\\n\\tprint(sum(a) - min(a) * 2)\\n\", \"l = int(input())\\na = [*map(int, input().split())]\\np = n = 0\\nfor i in a:\\n\\tif i > 0:\\n\\t\\tp += 1\\n\\telse:\\n\\t\\tn += 1\\nans = 0\\nif p and n:\\n\\ta.sort()\\n\\tfor i in a:\\n\\t\\tif i < 0:\\n\\t\\t\\tans -= i\\n\\t\\telse:\\n\\t\\t\\tans += i\\nelif p:\\n\\ta.sort()\\n\\tans -= a[0]\\n\\tfor i in a[1:]:\\n\\t\\tans += i\\nelse:\\n\\ta.sort(reverse=True)\\n\\tans += a[0]\\n\\tfor i in a[1:]:\\n\\t\\tans -= i\\nprint(ans if l > 1 else a[0])\\n\", \"import sys\\nfrom array import array\\nimport typing as Tp\\n\\ndef input():\\n\\treturn sys.stdin.buffer.readline().decode('utf-8')\\n\\ndef output(*args):\\n\\tsys.stdout.buffer.write(('\\\\n'.join(map(str, args)) + '\\\\n').encode('utf-8'))\\n\\ndef main():\\n\\tfrom itertools import accumulate\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tacc = tuple(accumulate(map(abs, a)))\\n\\tleft_min = tuple(accumulate(a, min))\\n\\tright_min = tuple(accumulate(a[::-1], min))[::-1]\\n\\tans = -10 ** 9 * 2\\n\\tfor i in range(n):\\n\\t\\tval = a[i]\\n\\t\\tif i > 0:\\n\\t\\t\\tif left_min[i - 1] < 0:\\n\\t\\t\\t\\tval += acc[i - 1]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tval += acc[i - 1] - left_min[i - 1] * 2\\n\\t\\tif i < n - 1:\\n\\t\\t\\tif right_min[i + 1] < 0:\\n\\t\\t\\t\\tval += acc[-1] - acc[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tval += acc[-1] - acc[i] - right_min[i + 1] * 2\\n\\t\\tans = max(ans, val)\\n\\tprint(ans)\\nmain()\\n\", \"import sys\\ninput = sys.stdin.readline\\nimport bisect\\nn = int(input())\\nl = input().split()\\nli = [int(i) for i in l]\\nposs = 1\\nif n == 1:\\n\\tprint(li[0])\\n\\tquit()\\nfor i in li:\\n\\tif i <= 0:\\n\\t\\tposs = 0\\n\\t\\tbreak\\nif poss:\\n\\tprint(sum(li) - 2 * min(li))\\n\\tquit()\\nposs = 1\\nfor i in li:\\n\\tif i >= 0:\\n\\t\\tposs = 0\\n\\t\\tbreak\\nif poss:\\n\\tprint(-sum(li) + 2 * max(li))\\n\\tquit()\\nans = 0\\nfor i in li:\\n\\tans += abs(i)\\nprint(ans)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\ns = 0\\nif n == 1:\\n\\ts = arr[0]\\nelif arr[-1] < 0:\\n\\ts = abs(sum(arr)) - abs(arr[-1]) * 2\\nelif arr[0] < 0:\\n\\tfor i in range(len(arr)):\\n\\t\\ts += abs(arr[i])\\nelse:\\n\\ts = sum(arr) - 2 * arr[0]\\nprint(s)\\n\", \"from sys import stdin\\ninput = stdin.readline\\nn = int(input())\\nlst = sorted(map(int, input().split()))\\nif n == 1:\\n\\tprint(lst[0])\\n\\texit()\\nelif lst[-1] <= 0:\\n\\ts = abs(sum(lst)) + 2 * lst[-1]\\nelif lst[0] >= 0:\\n\\ts = sum(lst) - 2 * lst[0]\\nelse:\\n\\ts = 0\\n\\tfor i in lst:\\n\\t\\ts += abs(i)\\nprint(s)\\n\", \"n = int(input())\\narr = list(map(int, input().strip().split()))\\nk = min(arr)\\nh = max(arr)\\ns = 0\\nfor i in arr:\\n\\tif i >= 0:\\n\\t\\ts += i\\n\\telse:\\n\\t\\ts -= i\\nif n == 1:\\n\\tprint(arr[0])\\nelif k < 0 and h >= 0:\\n\\tprint(s)\\nelif k >= 0:\\n\\tprint(s - 2 * k)\\nelse:\\n\\tprint(s + 2 * h)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"4\\n2 1 2 1\\n\", \"5\\n0 -1 -1 -1 -1\\n\", \"2\\n10 8\\n\", \"5\\n-14 -2 0 -19 -12\\n\", \"6\\n-15 2 -19 20 0 9\\n\", \"3\\n17 4 -1\\n\", \"4\\n20 3 -15 7\\n\", \"1\\n11\\n\", \"1\\n-10\\n\", \"7\\n-8 9 0 -10 -20 -8 3\\n\", \"9\\n2 4 -4 15 1 11 15 -7 -20\\n\", \"10\\n-20 0 3 -5 -18 15 -3 -9 -7 9\\n\", \"8\\n-1 5 -19 4 -12 20 1 -12\\n\", \"1\\n-1000000000\\n\", \"3\\n-1 -2 -3\\n\", \"3\\n-1 -1 -1\\n\", \"2\\n-9 -3\\n\", \"5\\n-1 -1 -1 -1 -1\\n\", \"2\\n-1 -1\\n\", \"5\\n-7 -1 -1 -1 -1\\n\", \"2\\n-5 -5\\n\", \"2\\n-1 -2\\n\", \"4\\n-1 -1 -1 -1\\n\", \"2\\n-2 -2\\n\", \"4\\n-1 -2 -3 -4\\n\", \"3\\n-2 -4 -6\\n\", \"2\\n-10 -5\\n\", \"2\\n-2 -1\\n\", \"2\\n-2 -4\\n\", \"2\\n1 2\\n\", \"2\\n-4 -5\\n\", \"2\\n-2 -3\\n\", \"2\\n-1 -5\\n\", \"5\\n-1 -2 -3 -2 -1\\n\", \"2\\n-4 -5\\n\", \"10\\n-20 0 3 -5 -18 15 -3 -9 -7 9\\n\", \"2\\n-2 -2\\n\", \"8\\n-1 5 -19 4 -12 20 1 -12\\n\", \"1\\n-10\\n\", \"3\\n-2 -4 -6\\n\", \"2\\n10 8\\n\", \"9\\n2 4 -4 15 1 11 15 -7 -20\\n\", \"2\\n-2 -3\\n\", \"2\\n-1 -5\\n\", \"3\\n-1 -2 -3\\n\", \"2\\n-1 -1\\n\", \"1\\n11\\n\", \"2\\n-10 -5\\n\", \"2\\n-1 -2\\n\", \"3\\n17 4 -1\\n\", \"4\\n20 3 -15 7\\n\", \"3\\n-1 -1 -1\\n\", \"5\\n-7 -1 -1 -1 -1\\n\", \"4\\n-1 -2 -3 -4\\n\", \"2\\n-2 -1\\n\", \"4\\n-1 -1 -1 -1\\n\", \"5\\n-14 -2 0 -19 -12\\n\", \"2\\n1 2\\n\", \"2\\n-5 -5\\n\", \"2\\n-2 -4\\n\", \"5\\n-1 -2 -3 -2 -1\\n\", \"7\\n-8 9 0 -10 -20 -8 3\\n\", \"5\\n-1 -1 -1 -1 -1\\n\", \"6\\n-15 2 -19 20 0 9\\n\", \"2\\n-9 -3\\n\", \"1\\n-1000000000\\n\", \"2\\n-2 -5\\n\", \"10\\n-20 0 3 -5 -27 15 -3 -9 -7 9\\n\", \"2\\n-1 -3\\n\", \"8\\n-1 5 -19 4 -8 20 1 -12\\n\", \"1\\n-8\\n\", \"3\\n-1 -4 -6\\n\", \"2\\n8 8\\n\", \"9\\n2 4 -4 15 1 7 15 -7 -20\\n\", \"3\\n-1 -4 -3\\n\", \"2\\n-6 -5\\n\", \"3\\n27 4 -1\\n\", \"4\\n20 3 -21 7\\n\", \"5\\n-7 -1 0 -1 -1\\n\", \"5\\n-28 -2 0 -19 -12\\n\", \"2\\n0 -5\\n\", \"2\\n-2 -6\\n\", \"5\\n-1 -2 -3 -2 0\\n\", \"7\\n-8 9 0 -10 -26 -8 3\\n\", \"6\\n-30 2 -19 20 0 9\\n\", \"2\\n-17 -3\\n\", \"10\\n-20 1 3 -5 -27 15 -3 -9 -7 9\\n\", \"8\\n-1 5 -19 4 -8 0 1 -12\\n\", \"1\\n-4\\n\", \"9\\n2 4 -4 15 1 7 15 -7 -30\\n\", \"3\\n24 4 -1\\n\", \"4\\n20 3 -7 7\\n\", \"5\\n-28 -2 1 -19 -12\\n\", \"2\\n-2 -9\\n\", \"7\\n-8 9 0 -13 -26 -8 3\\n\", \"10\\n-20 1 3 -5 -27 18 -3 -9 -7 9\\n\", \"8\\n-1 5 -19 4 -8 0 1 -16\\n\", \"1\\n-3\\n\", \"3\\n0 -4 -7\\n\", \"2\\n28 8\\n\", \"9\\n2 5 -4 15 1 7 15 -7 -30\\n\", \"3\\n7 4 -1\\n\", \"4\\n20 3 -4 7\\n\", \"5\\n-28 -2 1 -19 -19\\n\", \"2\\n-2 -17\\n\", \"7\\n-8 9 0 -2 -26 -8 3\\n\", \"6\\n-30 2 -14 3 0 9\\n\", \"10\\n-20 1 3 -5 -27 7 -3 -9 -7 9\\n\", \"2\\n0 -2\\n\", \"2\\n-3 -5\\n\", \"2\\n1 -2\\n\", \"1\\n6\\n\", \"2\\n-1 0\\n\", \"3\\n-1 -1 -2\\n\", \"4\\n-1 -2 -3 -6\\n\", \"2\\n-2 0\\n\", \"4\\n-1 -1 0 -1\\n\", \"2\\n0 2\\n\", \"5\\n-1 0 -1 -1 -1\\n\", \"5\\n0 -1 -2 -1 -1\\n\", \"4\\n2 0 2 1\\n\", \"2\\n-2 -8\\n\", \"2\\n-1 -6\\n\", \"3\\n-1 -4 -7\\n\", \"2\\n14 8\\n\", \"2\\n1 -3\\n\", \"2\\n-6 -9\\n\", \"3\\n-2 -2 -3\\n\", \"2\\n1 0\\n\", \"1\\n10\\n\", \"2\\n-6 -8\\n\", \"2\\n-1 1\\n\", \"3\\n-1 -2 -2\\n\", \"5\\n-7 0 0 -1 -1\\n\", \"4\\n-1 -2 -3 -5\\n\", \"2\\n-2 1\\n\", \"4\\n-1 -1 0 -2\\n\", \"2\\n0 1\\n\", \"2\\n1 -5\\n\", \"5\\n-1 -3 -3 -2 0\\n\", \"5\\n-2 0 -1 -1 -1\\n\", \"6\\n-30 2 -14 20 0 9\\n\", \"2\\n0 -3\\n\", \"5\\n-1 -1 -2 -1 -1\\n\", \"4\\n2 1 2 0\\n\", \"2\\n-4 -8\\n\", \"2\\n0 -6\\n\", \"2\\n0 0\\n\", \"2\\n-6 -3\\n\", \"3\\n-2 -2 -4\\n\", \"2\\n0 -1\\n\", \"1\\n20\\n\", \"2\\n-6 -15\\n\", \"2\\n-1 2\\n\", \"3\\n0 -2 -2\\n\", \"5\\n-2 0 0 -1 -1\\n\", \"4\\n-1 -2 -5 -5\\n\", \"2\\n-1 -4\\n\", \"4\\n-1 -1 1 -2\\n\", \"2\\n1 1\\n\", \"2\\n2 -2\\n\", \"5\\n-2 -3 -3 -2 0\\n\", \"5\\n-3 0 -1 -1 -1\\n\", \"2\\n-3 -4\\n\", \"5\\n-1 -2 -2 -1 -1\\n\", \"4\\n3 1 2 0\\n\", \"5\\n0 -1 -1 -1 -1\\n\", \"4\\n2 1 2 1\\n\"], \"outputs\": [\"4\", \"4\", \"2\", \"47\", \"65\", \"22\", \"45\", \"11\", \"-10\", \"58\", \"79\", \"89\", \"74\", \"-1000000000\", \"4\", \"1\", \"6\", \"3\", \"0\", \"9\", \"0\", \"1\", \"2\", \"0\", \"8\", \"8\", \"5\", \"1\", \"2\", \"1\", \"1\", \"1\", \"4\", \"7\", \"1\\n\", \"89\\n\", \"0\\n\", \"74\\n\", \"-10\\n\", \"8\\n\", \"2\\n\", \"79\\n\", \"1\\n\", \"4\\n\", \"4\\n\", \"0\\n\", \"11\\n\", \"5\\n\", \"1\\n\", \"22\\n\", \"45\\n\", \"1\\n\", \"9\\n\", \"8\\n\", \"1\\n\", \"2\\n\", \"47\\n\", \"1\\n\", \"0\\n\", \"2\\n\", \"7\\n\", \"58\\n\", \"3\\n\", \"65\\n\", \"6\\n\", \"-1000000000\\n\", \"3\\n\", \"98\\n\", \"2\\n\", \"70\\n\", \"-8\\n\", \"9\\n\", \"0\\n\", \"75\\n\", \"6\\n\", \"1\\n\", \"32\\n\", \"51\\n\", \"10\\n\", \"61\\n\", \"5\\n\", \"4\\n\", \"8\\n\", \"64\\n\", \"80\\n\", \"14\\n\", \"99\\n\", \"50\\n\", \"-4\\n\", \"85\\n\", \"29\\n\", \"37\\n\", \"62\\n\", \"7\\n\", \"67\\n\", \"102\\n\", \"54\\n\", \"-3\\n\", \"11\\n\", \"20\\n\", \"86\\n\", \"12\\n\", \"34\\n\", \"69\\n\", \"15\\n\", \"56\\n\", \"58\\n\", \"91\\n\", \"2\\n\", \"2\\n\", \"3\\n\", \"6\\n\", \"1\\n\", \"2\\n\", \"10\\n\", \"2\\n\", \"3\\n\", \"2\\n\", \"4\\n\", \"5\\n\", \"5\\n\", \"6\\n\", \"5\\n\", \"10\\n\", \"6\\n\", \"4\\n\", \"3\\n\", \"3\\n\", \"1\\n\", \"10\\n\", \"2\\n\", \"2\\n\", \"3\\n\", \"9\\n\", \"9\\n\", \"3\\n\", \"4\\n\", \"1\\n\", \"6\\n\", \"9\\n\", \"5\\n\", \"75\\n\", \"3\\n\", \"4\\n\", \"5\\n\", \"4\\n\", \"6\\n\", \"0\\n\", \"3\\n\", \"4\\n\", \"1\\n\", \"20\\n\", \"9\\n\", \"3\\n\", \"4\\n\", \"4\\n\", \"11\\n\", \"3\\n\", \"5\\n\", \"0\\n\", \"4\\n\", \"10\\n\", \"6\\n\", \"1\\n\", \"5\\n\", \"6\\n\", \"4\\n\", \"4\\n\"]}",
    "difficulty": "MEDIUM_HARD",
    "raw_tags": "['greedy', 'implementation', 'dp']",
    "name": null,
    "source": "codeforces",
    "tags": "['Dynamic programming', 'Implementation', 'Greedy algorithms']",
    "skill_types": "['Dynamic programming', 'Greedy algorithms']",
    "url": "https://codeforces.com/problemset/problem/1038/D",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": "2019-12-31",
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": "O(N)"
  },
  {
    "question": "The sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\\{1\\} + \\{4, 3, 2, 1\\}$ and $\\{1,4,3,2\\} + \\{1\\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\\{2,4,1,3\\} + \\{2,1\\}$.\n\nIn the third example, there are no possible ways.",
    "solutions": "[\"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tmass = [int(x) for x in input().split()]\\n\\tanswer = 0\\n\\tq = []\\n\\tMax = 0\\n\\tind = 0\\n\\tfor j in range(n):\\n\\t\\tif Max < mass[j]:\\n\\t\\t\\tMax = mass[j]\\n\\tind = Max - 1\\n\\ta1 = mass[:n - ind - 1]\\n\\ta2 = mass[n - ind - 1:]\\n\\ta3 = mass[:ind + 1]\\n\\ta4 = mass[ind + 1:]\\n\\ta1.sort()\\n\\ta2.sort()\\n\\ta3.sort()\\n\\ta4.sort()\\n\\tf1 = True\\n\\tf2 = True\\n\\tfor i in range(n - ind - 1):\\n\\t\\tif a1[i] != i + 1:\\n\\t\\t\\tf1 = False\\n\\tif f1:\\n\\t\\tfor i in range(ind + 1):\\n\\t\\t\\tif a2[i] != i + 1:\\n\\t\\t\\t\\tf1 = False\\n\\tif f1:\\n\\t\\tanswer += 1\\n\\t\\tq.append((n - ind - 1, ind + 1))\\n\\tfor i in range(ind + 1):\\n\\t\\tif a3[i] != i + 1:\\n\\t\\t\\tf2 = False\\n\\tif f2:\\n\\t\\tfor i in range(n - ind - 1):\\n\\t\\t\\tif a4[i] != i + 1:\\n\\t\\t\\t\\tf2 = False\\n\\tif f2 and n - ind - 1 != ind + 1:\\n\\t\\tanswer += 1\\n\\t\\tq.append((ind + 1, n - ind - 1))\\n\\tprint(answer)\\n\\tfor l in q:\\n\\t\\tprint(*l)\\n\", \"for t in range(int(input())):\\n\\tn = int(input())\\n\\tar = list(map(int, input().split()))\\n\\tmx = max(ar)\\n\\td = []\\n\\tfor c in range(2):\\n\\t\\tif set(ar[:mx]) == set(range(1, mx + 1)) and set(ar[mx:]) == set(range(1, n - mx + 1)):\\n\\t\\t\\td.append(mx)\\n\\t\\tmx = n - mx\\n\\tp = set(d)\\n\\tprint(len(p))\\n\\tfor x in p:\\n\\t\\tprint(x, n - x)\\n\", \"def possible(a):\\n\\tans = set()\\n\\ts = set()\\n\\tlmax = 0\\n\\tfor i in range(len(a)):\\n\\t\\tlmax = max(lmax, a[i])\\n\\t\\ts.add(a[i])\\n\\t\\tif lmax == i + 1 and len(s) == i + 1:\\n\\t\\t\\tans.add(i + 1)\\n\\treturn ans\\nt = int(input())\\nfor case_num in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split(' ')))\\n\\tleft = possible(a)\\n\\ta.reverse()\\n\\tright = possible(a)\\n\\tans = []\\n\\tfor l in left:\\n\\t\\tif n - l in right:\\n\\t\\t\\tans.append(l)\\n\\tprint(len(ans))\\n\\tfor l in ans:\\n\\t\\tprint(l, n - l)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\tp1 = a[:mx]\\n\\tp2 = a[mx:]\\n\\ttest = 0\\n\\ttest1 = 0\\n\\tif len(set(p1)) == mx and max(p1) == mx and (len(set(p2)) == n - mx) and (max(p2) == n - mx):\\n\\t\\ttest = 1\\n\\tp1 = a[:n - mx]\\n\\tp2 = a[n - mx:]\\n\\tif len(set(p1)) == n - mx and max(p1) == n - mx and (len(set(p2)) == mx) and (max(p2) == mx):\\n\\t\\ttest1 = 1\\n\\tif mx == n // 2 and test:\\n\\t\\tprint(1)\\n\\t\\tprint(mx, n - mx)\\n\\telif test and test1:\\n\\t\\tprint(2)\\n\\t\\tprint(mx, n - mx)\\n\\t\\tprint(n - mx, mx)\\n\\telif test:\\n\\t\\tprint(1)\\n\\t\\tprint(mx, n - mx)\\n\\telif test1:\\n\\t\\tprint(1)\\n\\t\\tprint(n - mx, mx)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for case in range(int(input())):\\n\\tn = int(input())\\n\\tseries = [int(x) for x in input().split()]\\n\\tno_of_ways = 0\\n\\tset_a = set()\\n\\tset_b = set(series)\\n\\tletter_freq = {}\\n\\tfor l in series:\\n\\t\\ttry:\\n\\t\\t\\tletter_freq[l] += 1\\n\\t\\texcept KeyError:\\n\\t\\t\\tletter_freq[l] = 1\\n\\tanswers = []\\n\\tindices_to_end_a = set()\\n\\tvisited = {}\\n\\tcurr_max = -1\\n\\tfor i in range(1, n + 1):\\n\\t\\tnum = series[i - 1]\\n\\t\\tif num in visited:\\n\\t\\t\\tbreak\\n\\t\\tvisited[num] = True\\n\\t\\tcurr_max = max(curr_max, num)\\n\\t\\tif curr_max == i:\\n\\t\\t\\tindices_to_end_a.add(i)\\n\\tvisited = {}\\n\\tcurr_max = -1\\n\\tseries2 = series[::-1]\\n\\tindices_to_end_b = set()\\n\\tfor i in range(1, n + 1):\\n\\t\\tnum = series2[i - 1]\\n\\t\\tif num in visited:\\n\\t\\t\\tbreak\\n\\t\\tvisited[num] = True\\n\\t\\tcurr_max = max(curr_max, num)\\n\\t\\tif curr_max == i:\\n\\t\\t\\tindices_to_end_b.add(n - i)\\n\\tfor i in indices_to_end_a:\\n\\t\\tif i in indices_to_end_b:\\n\\t\\t\\tanswers.append([i, n - i])\\n\\tprint(len(answers))\\n\\tfor a in answers:\\n\\t\\tprint(a[0], a[1])\\n\", \"import sys\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\tnums = list(map(int, sys.stdin.readline().split()))\\n\\t\\tleftSet = set()\\n\\t\\trightSet = set()\\n\\t\\tans = []\\n\\t\\tflag = True\\n\\t\\tvalidFlag = True\\n\\t\\tfor i in range(len(nums)):\\n\\t\\t\\tif flag:\\n\\t\\t\\t\\tif nums[i] in leftSet:\\n\\t\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\t\\tif max(leftSet) != len(leftSet):\\n\\t\\t\\t\\t\\t\\tvalidFlag = False\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tleftSet.add(nums[i])\\n\\t\\t\\tif not flag:\\n\\t\\t\\t\\tif nums[i] in rightSet:\\n\\t\\t\\t\\t\\tvalidFlag = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\trightSet.add(nums[i])\\n\\t\\tif validFlag:\\n\\t\\t\\tif leftSet and rightSet and (max(leftSet) == len(leftSet)) and (max(rightSet) == len(rightSet)):\\n\\t\\t\\t\\tans.append([len(leftSet), len(rightSet)])\\n\\t\\tflag = True\\n\\t\\tvalidFlag = True\\n\\t\\tleftSet = set()\\n\\t\\trightSet = set()\\n\\t\\tfor i in reversed(range(len(nums))):\\n\\t\\t\\tif flag:\\n\\t\\t\\t\\tif nums[i] in rightSet:\\n\\t\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\t\\tif max(rightSet) != len(rightSet):\\n\\t\\t\\t\\t\\t\\tvalidFlag = False\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\trightSet.add(nums[i])\\n\\t\\t\\tif not flag:\\n\\t\\t\\t\\tif nums[i] in leftSet:\\n\\t\\t\\t\\t\\tvalidFlag = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tleftSet.add(nums[i])\\n\\t\\tif validFlag:\\n\\t\\t\\tif leftSet and rightSet and (max(leftSet) == len(leftSet)) and (max(rightSet) == len(rightSet)):\\n\\t\\t\\t\\tif [len(leftSet), len(rightSet)] not in ans:\\n\\t\\t\\t\\t\\tans.append([len(leftSet), len(rightSet)])\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i[0], i[1])\\n\\treturn\\nmain()\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tl = max(a)\\n\\ty = {}\\n\\tu = 0\\n\\tfor i in a:\\n\\t\\tif i in y:\\n\\t\\t\\ty[i] += 1\\n\\t\\telse:\\n\\t\\t\\ty[i] = 1\\n\\t\\tif y[i] >= 3:\\n\\t\\t\\tu += 1\\n\\t\\t\\tbreak\\n\\tif u == 1:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tz = 0\\n\\tb = set()\\n\\tx = 0\\n\\tfor i in range(l):\\n\\t\\tif a[i] in b:\\n\\t\\t\\tx += 1\\n\\t\\telse:\\n\\t\\t\\tb.add(a[i])\\n\\tc = a[l:]\\n\\tc.sort()\\n\\tfor i in range(n - l):\\n\\t\\tif c[i] != i + 1:\\n\\t\\t\\tx = x + 1\\n\\tif x == 0:\\n\\t\\tz += 1\\n\\t\\tp = l\\n\\t\\tq = n - l\\n\\tu = 0\\n\\tb = set()\\n\\tx = 0\\n\\tfor i in range(n - 1, n - l - 1, -1):\\n\\t\\tif a[i] in b:\\n\\t\\t\\tx += 1\\n\\t\\telse:\\n\\t\\t\\tb.add(a[i])\\n\\tc = a[:n - l]\\n\\tc.sort()\\n\\tfor i in range(n - l):\\n\\t\\tif c[i] != i + 1:\\n\\t\\t\\tx = x + 1\\n\\tif x == 0:\\n\\t\\tu += 1\\n\\t\\tz += 1\\n\\t\\tr = n - l\\n\\t\\ts = l\\n\\tif z == 0:\\n\\t\\tprint(0)\\n\\telif z == 1:\\n\\t\\tprint(1)\\n\\t\\tif u == 1:\\n\\t\\t\\tprint(r, s)\\n\\t\\telse:\\n\\t\\t\\tprint(p, q)\\n\\telif p == q:\\n\\t\\tprint(1)\\n\\t\\tprint(r, s)\\n\\telse:\\n\\t\\tprint(2)\\n\\t\\tprint(r, s)\\n\\t\\tprint(p, q)\\n\", \"t = int(int(input()))\\nfor x in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tma = max(a)\\n\\tList = []\\n\\tif set(range(1, ma + 1)) == set(a[:ma]) and set(range(1, n - ma + 1)) == set(a[ma:]):\\n\\t\\tList.append([ma, n - ma])\\n\\tif ma != n - ma:\\n\\t\\tif set(range(1, n - ma + 1)) == set(a[:n - ma]) and set(range(1, ma + 1)) == set(a[n - ma:]):\\n\\t\\t\\tList.append([n - ma, ma])\\n\\tprint(len(List))\\n\\tif len(List):\\n\\t\\tfor item in List:\\n\\t\\t\\tprint(*item)\\n\", \"t = int(input())\\nans = []\\nfor i in range(t):\\n\\tn = int(input())\\n\\tnums = list(map(int, input().split()))\\n\\tsumm_all = sum(nums)\\n\\tcounter = 0\\n\\tvariants = []\\n\\tnums_index = [-1] * n\\n\\tL = 0\\n\\tR = n - 1\\n\\tfor j in range(n):\\n\\t\\tif nums_index[nums[j] - 1] != -1:\\n\\t\\t\\tL = max(L, nums_index[nums[j] - 1] + 1)\\n\\t\\t\\tR = min(R, j)\\n\\t\\tnums_index[nums[j] - 1] = j\\n\\tif L > R:\\n\\t\\tans.append([0])\\n\\telse:\\n\\t\\tsum1 = sum(nums[:L])\\n\\t\\tfor j in range(L, R + 1):\\n\\t\\t\\tif sum1 == (j + 1) * j // 2 and summ_all - sum1 == (n - j) * (n - j + 1) // 2:\\n\\t\\t\\t\\tvariants.append(str(j) + ' ' + str(n - j))\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\tsum1 += nums[j]\\n\\t\\tans.append([counter, variants])\\nfor i in ans:\\n\\tprint(i[0])\\n\\tif i[0] != 0:\\n\\t\\tfor j in range(i[0]):\\n\\t\\t\\tprint(i[1][j])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\t(cnt, l, r, t) = ([0] * n, [0] * n, [0] * n, 0)\\n\\tfor i in range(n):\\n\\t\\tcnt[a[i]] += 1\\n\\t\\tif cnt[a[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\tt = max(t, a[i])\\n\\t\\tif t == i + 1:\\n\\t\\t\\tl[i] = 1\\n\\t(cnt, t) = ([0] * n, 0)\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tcnt[a[i]] += 1\\n\\t\\tif cnt[a[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\tt = max(t, a[i])\\n\\t\\tif t == n - i:\\n\\t\\t\\tr[i] = 1\\n\\tres = []\\n\\tfor i in range(n - 1):\\n\\t\\tif l[i] + r[i + 1] == 2:\\n\\t\\t\\tres.append((i + 1, n - i - 1))\\n\\tprint(len(res))\\n\\tfor x in res:\\n\\t\\tprint(*x)\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(j) for j in input().split()]\\n\\tpos = []\\n\\tb = [0 for j in range(n)]\\n\\t(maxb, countb) = (-1, 0)\\n\\tfor j in range(n):\\n\\t\\tif b[a[j] - 1] == 1:\\n\\t\\t\\tbreak\\n\\t\\tb[a[j] - 1] = 1\\n\\t\\tmaxb = max(maxb, a[j])\\n\\t\\tcountb += 1\\n\\t\\tif maxb == countb:\\n\\t\\t\\tpos.append(j + 1)\\n\\t(maxc, countc) = (-1, 0)\\n\\tk = len(pos) - 1\\n\\t(ans1, ans2) = (0, [])\\n\\tc = [0 for j in range(n)]\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tif c[a[j] - 1] == 1:\\n\\t\\t\\tbreak\\n\\t\\tc[a[j] - 1] = 1\\n\\t\\tmaxc = max(maxc, a[j])\\n\\t\\tcountc += 1\\n\\t\\twhile k > 0 and j < pos[k]:\\n\\t\\t\\tk -= 1\\n\\t\\tif maxc == countc:\\n\\t\\t\\tif k < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif j == pos[k]:\\n\\t\\t\\t\\tans1 += 1\\n\\t\\t\\t\\tans2.append(j)\\n\\tprint(ans1)\\n\\tfor j in range(ans1):\\n\\t\\tprint(ans2[j], n - ans2[j])\\n\", \"from collections import Counter\\nq = int(input())\\nfor _ in range(q):\\n\\tn = int(input())\\n\\tdat = list(map(int, input().split()))\\n\\tc = Counter(dat)\\n\\tm = 0\\n\\trealmax = max(dat)\\n\\tf = True\\n\\tmode = 2\\n\\tmaxval = -1\\n\\tfor i in range(1, realmax + 1):\\n\\t\\tif i not in c:\\n\\t\\t\\tf = False\\n\\t\\t\\tbreak\\n\\t\\tif c[i] == 2:\\n\\t\\t\\tmaxval = i\\n\\t\\t\\tcontinue\\n\\t\\tif c[i] != 1:\\n\\t\\t\\tf = False\\n\\t\\t\\tbreak\\n\\tif n != maxval + realmax or f is False:\\n\\t\\tprint('0')\\n\\telse:\\n\\t\\tlmax = dat[:maxval]\\n\\t\\trmax = dat[-maxval:]\\n\\t\\tlreal = dat[:realmax]\\n\\t\\trreal = dat[-realmax:]\\n\\t\\tlmax.sort()\\n\\t\\trmax.sort()\\n\\t\\tlreal.sort()\\n\\t\\trreal.sort()\\n\\t\\tansm = list(range(1, maxval + 1))\\n\\t\\tansr = list(range(1, realmax + 1))\\n\\t\\tres = []\\n\\t\\tif lmax == ansm and rreal == ansr:\\n\\t\\t\\tres.append('{0} {1}'.format(maxval, realmax))\\n\\t\\tif lreal == ansr and rmax == ansm:\\n\\t\\t\\tres.append('{0} {1}'.format(realmax, maxval))\\n\\t\\tif len(res) == 2:\\n\\t\\t\\tif res[0] == res[1]:\\n\\t\\t\\t\\tres = [res[0]]\\n\\t\\tprint(len(res))\\n\\t\\tif len(res) > 0:\\n\\t\\t\\tprint('\\\\n'.join(res))\\n\", \"def main():\\n\\tn = int(input())\\n\\tlst = list(map(int, input().split()))\\n\\tmx = max(lst)\\n\\tind1 = lst.index(mx)\\n\\tfst = set()\\n\\tif mx > len(lst) - 1 or mx < len(lst) // 2 + len(lst) % 2:\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tfor i in range(0, mx):\\n\\t\\tfst.add(lst[i])\\n\\tsecond = set()\\n\\tfor i in range(mx, len(lst)):\\n\\t\\tsecond.add(lst[i])\\n\\tcan_be = 1\\n\\tfor i in range(1, mx + 1):\\n\\t\\tif not i in fst:\\n\\t\\t\\tcan_be = 0\\n\\t\\t\\tbreak\\n\\tfor i in range(1, len(lst) - mx + 1):\\n\\t\\tif not i in second:\\n\\t\\t\\tcan_be = 0\\n\\t\\t\\tbreak\\n\\tif can_be:\\n\\t\\tto_print = str(mx) + ' ' + str(len(lst) - mx)\\n\\tfst = set()\\n\\tfor i in range(0, len(lst) - mx):\\n\\t\\tfst.add(lst[i])\\n\\tsecond = set()\\n\\tfor i in range(len(lst) - mx, len(lst)):\\n\\t\\tsecond.add(lst[i])\\n\\tif can_be and len(lst) - len(fst) == len(fst):\\n\\t\\tprint(1)\\n\\t\\tprint(to_print)\\n\\t\\treturn\\n\\tcan_be1 = 1\\n\\tfor i in range(1, len(lst) - mx + 1):\\n\\t\\tif not i in fst:\\n\\t\\t\\tcan_be1 = 0\\n\\t\\t\\tbreak\\n\\tfor i in range(1, mx + 1):\\n\\t\\tif not i in second:\\n\\t\\t\\tcan_be1 = 0\\n\\t\\t\\tbreak\\n\\tif can_be1:\\n\\t\\tif can_be:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(mx, len(lst) - mx)\\n\\t\\t\\tprint(len(lst) - mx, mx)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(lst) - mx, mx)\\n\\telif can_be:\\n\\t\\tprint(1)\\n\\t\\tprint(mx, len(lst) - mx)\\n\\telse:\\n\\t\\tprint(0)\\nt = int(input())\\nfor i in range(t):\\n\\tmain()\\n\", \"for t in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tcnt = 0\\n\\tp = set()\\n\\t(l, r) = (0, sum(a))\\n\\t(left, right) = ({}, {})\\n\\tfor i in a:\\n\\t\\tright[i] = right.get(i, 0) + 1\\n\\tfor i in range(n - 1):\\n\\t\\tl += a[i]\\n\\t\\tleft[a[i]] = left.get(a[i], 0) + 1\\n\\t\\tr -= a[i]\\n\\t\\tright[a[i]] = right.get(a[i], 0) - 1\\n\\t\\tif not right[a[i]]:\\n\\t\\t\\tdel right[a[i]]\\n\\t\\tj = n - i - 1\\n\\t\\tif (2 + i) * (i + 1) // 2 == l and (j + 1) * j // 2 == r:\\n\\t\\t\\tif len(left) == i + 1 and len(right) == j:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\t\\tp.add((i + 1, n - i - 1))\\n\\tprint(cnt)\\n\\tif cnt:\\n\\t\\tfor el in p:\\n\\t\\t\\tprint(*el)\\n\", \"import sys\\nr = int(input())\\nt = -1\\n\\ndef input():\\n\\tglobal t\\n\\tt += 1\\n\\treturn data[t]\\ndata = sys.stdin.readlines()\\nfor _ in range(r):\\n\\tk = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = 0\\n\\ts = set()\\n\\tleft = [False] * k\\n\\tfor i in range(k):\\n\\t\\ts.add(a[i])\\n\\t\\tm = max(a[i], m)\\n\\t\\tif m == len(s) == i + 1:\\n\\t\\t\\tleft[i] = True\\n\\tm = 0\\n\\ts = set()\\n\\tright = [False] * k\\n\\tfor i in range(k - 1, -1, -1):\\n\\t\\ts.add(a[i])\\n\\t\\tm = max(a[i], m)\\n\\t\\tif m == len(s) == k - i:\\n\\t\\t\\tright[i] = True\\n\\tcount = 0\\n\\tanswer = []\\n\\tfor i in range(k - 1):\\n\\t\\tif left[i] and right[i + 1]:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tanswer.append((i + 1, k - i - 1))\\n\\tprint(count)\\n\\tfor i in answer:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor test in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tz = set(a)\\n\\tif len(list(z)) == 1 and len(a) != 2:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tm = max(a)\\n\\t\\tif m < n:\\n\\t\\t\\ts1 = set(a[0:m])\\n\\t\\t\\ts2 = set(a[len(a) - m:len(a)])\\n\\t\\t\\tx = list(s1)\\n\\t\\t\\ty = list(s2)\\n\\t\\t\\tif len(x) != m and len(y) != m:\\n\\t\\t\\t\\tprint(0)\\n\\t\\t\\telif len(x) == m and len(y) == m:\\n\\t\\t\\t\\ts1 = set(a[m:])\\n\\t\\t\\t\\ts2 = set(a[0:n - m])\\n\\t\\t\\t\\tl1 = []\\n\\t\\t\\t\\tcount = 1\\n\\t\\t\\t\\tfor i in range(m, n):\\n\\t\\t\\t\\t\\tl1.append(count)\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tif n - m != m and set(l1) == s1 and (set(l1) == s2):\\n\\t\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\t\\tprint(n - m, '', m)\\n\\t\\t\\t\\t\\tprint(m, '', n - m)\\n\\t\\t\\t\\telif n - m == m and set(l1) == s1 and (set(l1) == s2):\\n\\t\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\t\\tprint(n - m, '', m)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(0)\\n\\t\\t\\telif len(x) == m and len(y) != m:\\n\\t\\t\\t\\tl = list(a[m:])\\n\\t\\t\\t\\tl1 = []\\n\\t\\t\\t\\tcount = 1\\n\\t\\t\\t\\tfor i in range(m, n):\\n\\t\\t\\t\\t\\tl1.append(count)\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tif set(l) != set(l1):\\n\\t\\t\\t\\t\\tprint(0)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\t\\tprint(m, '', n - m)\\n\\t\\t\\telif len(x) != m and len(y) == m:\\n\\t\\t\\t\\tl = list(a[0:n - m])\\n\\t\\t\\t\\tl1 = []\\n\\t\\t\\t\\tcount = 1\\n\\t\\t\\t\\tfor i in range(0, n - m):\\n\\t\\t\\t\\t\\tl1.append(count)\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tif set(l) != set(l1):\\n\\t\\t\\t\\t\\tprint(0)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\t\\tprint(n - m, '', m)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"from collections import defaultdict\\n\\ndef solve():\\n\\tN = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tsplits = []\\n\\tl_dict = defaultdict(lambda : 0)\\n\\tl_dict_sum = 0\\n\\tr_dict = defaultdict(lambda : 0)\\n\\tfor item in arr:\\n\\t\\tr_dict[item] += 1\\n\\tr_dict_sum = sum(r_dict.keys())\\n\\tfor i in range(N):\\n\\t\\tleft_len = i + 1\\n\\t\\tright_len = N - (i + 1)\\n\\t\\tl_e_s = left_len * (left_len + 1) // 2\\n\\t\\tr_e_s = right_len * (right_len + 1) // 2\\n\\t\\tr_dict[arr[i]] -= 1\\n\\t\\tif r_dict[arr[i]] == 0:\\n\\t\\t\\tdel r_dict[arr[i]]\\n\\t\\t\\tr_dict_sum -= arr[i]\\n\\t\\tl_dict[arr[i]] += 1\\n\\t\\tif l_dict[arr[i]] == 1:\\n\\t\\t\\tl_dict_sum += arr[i]\\n\\t\\tif l_dict_sum == l_e_s and len(l_dict) == left_len and (r_dict_sum == r_e_s) and (len(r_dict) == right_len):\\n\\t\\t\\tsplits.append((left_len, right_len))\\n\\tprint(len(splits))\\n\\tfor (l, r) in splits:\\n\\t\\tprint('{} {}'.format(l, r))\\nT = int(input())\\nfor t in range(T):\\n\\tsolve()\\n\", \"def somme_raison_1(n):\\n\\treturn n * (n + 1) // 2\\nfor _ in range(0, int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tx = 0\\n\\tmy_set = set()\\n\\th = [0] * n\\n\\ts = 0\\n\\tmax_set = 0\\n\\tfor i in range(0, len(l) - 1):\\n\\t\\ts += l[i]\\n\\t\\tmy_set.add(l[i])\\n\\t\\tmax_set = max(max_set, l[i])\\n\\t\\tif s == somme_raison_1(i + 1) and len(my_set) == i + 1 and (max_set == i + 1):\\n\\t\\t\\th[i] += 1\\n\\tr = [0]\\n\\tmy_set = set()\\n\\tmax_set = 0\\n\\ts = 0\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\ts += l[i]\\n\\t\\tmy_set.add(l[i])\\n\\t\\tmax_set = max(max_set, l[i])\\n\\t\\tif h[i - 1] == 1:\\n\\t\\t\\tif s == somme_raison_1(n - i) and len(my_set) == n - i and (max_set == n - i):\\n\\t\\t\\t\\tr[0] += 1\\n\\t\\t\\t\\tr.append(str(i) + ' ' + str(n - i))\\n\\tfor i in r:\\n\\t\\tprint(i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tseen = [False] * (n + 1)\\n\\tans = set()\\n\\tfor (i, x) in enumerate(a):\\n\\t\\tif seen[x]:\\n\\t\\t\\tif sorted(a[:i]) == list(range(1, i + 1)) and sorted(a[i:]) == list(range(1, n - i + 1)):\\n\\t\\t\\t\\tans.add((i, n - i))\\n\\t\\t\\tbreak\\n\\t\\tseen[x] = True\\n\\tseen = [False] * (n + 1)\\n\\tfor (i, x) in list(enumerate(a))[::-1]:\\n\\t\\tif seen[x]:\\n\\t\\t\\tif sorted(a[:i + 1]) == list(range(1, i + 2)) and sorted(a[i + 1:]) == list(range(1, n - i)):\\n\\t\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\t\\t\\tbreak\\n\\t\\tseen[x] = True\\n\\tprint(len(ans))\\n\\tfor (l1, l2) in ans:\\n\\t\\tprint(l1, l2)\\n\", \"get_int = lambda : int(input())\\nget_list = lambda : list(map(int, input().split()))\\n\\ndef main():\\n\\tfor _ in range(get_int()):\\n\\t\\tn = get_int()\\n\\t\\ta = get_list()\\n\\t\\tmx = max(a)\\n\\t\\ta1 = [i for i in range(1, mx + 1)]\\n\\t\\ta2 = [i for i in range(1, len(a) - mx + 1)]\\n\\t\\tflag1 = 1\\n\\t\\tflag2 = 1\\n\\t\\tans = 0\\n\\t\\tif sorted(a[:mx]) == a1 and sorted(a[mx:]) == a2:\\n\\t\\t\\tans += 1\\n\\t\\t\\tflag1 = 0\\n\\t\\tif sorted(a[:len(a) - mx]) == a2 and sorted(a[len(a) - mx:]) == a1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tflag2 = 0\\n\\t\\tif ans == 2:\\n\\t\\t\\tif mx == n - mx:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(mx, n - mx, sep=' ')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(mx, n - mx, sep=' ')\\n\\t\\t\\t\\tprint(n - mx, mx, sep=' ')\\n\\t\\telif ans == 1:\\n\\t\\t\\tif flag1 == 0:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(mx, n - mx, sep=' ')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(n - mx, mx, sep=' ')\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\nmain()\\n\", \"I = input\\nfor _ in [0] * int(I()):\\n\\tn = int(I())\\n\\ta = (*map(int, I().split()),)\\n\\tm = max(a)\\n\\tr = [(k, n - k) for k in {m, n - m} if sorted(a[:k]) + sorted(a[k:]) == [*range(1, k + 1), *range(1, n - k + 1)]]\\n\\tprint(len(r))\\n\\tfor x in r:\\n\\t\\tprint(*x)\\n\", \"T = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tv = max(A)\\n\\tif v < (n + 1) // 2 or v == n:\\n\\t\\ta = 0\\n\\t\\tprint(a)\\n\\telif n % 2 == 0 and v == n // 2:\\n\\t\\tB = [0 for i in range(v + 1)]\\n\\t\\ta = 1\\n\\t\\tfor i in range(v):\\n\\t\\t\\tB[A[i]] = B[A[i]] + 1\\n\\t\\t\\tif B[A[i]] > 1:\\n\\t\\t\\t\\ta = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif a != 0:\\n\\t\\t\\tfor i in range(v, n):\\n\\t\\t\\t\\tB[A[i]] = B[A[i]] + 1\\n\\t\\t\\t\\tif B[A[i]] != 2:\\n\\t\\t\\t\\t\\ta = 0\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tprint(a)\\n\\t\\tfor i in range(a):\\n\\t\\t\\tprint(v, v)\\n\\telse:\\n\\t\\tB = [0 for i in range(v + 1)]\\n\\t\\ta = 1\\n\\t\\tV = []\\n\\t\\tfor i in range(v):\\n\\t\\t\\tB[A[i]] = B[A[i]] + 1\\n\\t\\t\\tif B[A[i]] > 1:\\n\\t\\t\\t\\ta = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif a != 0:\\n\\t\\t\\tfor i in range(v, n):\\n\\t\\t\\t\\tB[A[i]] = B[A[i]] + 1\\n\\t\\t\\t\\tif A[i] > n - v or B[A[i]] != 2:\\n\\t\\t\\t\\t\\ta = 0\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif a == 1:\\n\\t\\t\\tV.append([v, n - v])\\n\\t\\tA = A[::-1]\\n\\t\\tB = [0 for i in range(v + 1)]\\n\\t\\ta = 1\\n\\t\\tfor i in range(v):\\n\\t\\t\\tB[A[i]] = B[A[i]] + 1\\n\\t\\t\\tif B[A[i]] > 1:\\n\\t\\t\\t\\ta = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif a != 0:\\n\\t\\t\\tfor i in range(v, n):\\n\\t\\t\\t\\tB[A[i]] = B[A[i]] + 1\\n\\t\\t\\t\\tif A[i] > n - v or B[A[i]] != 2:\\n\\t\\t\\t\\t\\ta = 0\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif a == 1:\\n\\t\\t\\tV.append([n - v, v])\\n\\t\\tprint(len(V))\\n\\t\\tfor i in V:\\n\\t\\t\\tprint(*i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tans = 0\\n\\tl1 = max(a)\\n\\tl2 = n - l1\\n\\tif l1 == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tp11 = sorted(a[:l1])\\n\\t\\tp21 = sorted(a[l1:])\\n\\t\\tp12 = sorted(a[:l2])\\n\\t\\tp22 = sorted(a[l2:])\\n\\t\\tp1 = [i + 1 for i in range(l1)]\\n\\t\\tp2 = [j + 1 for j in range(l2)]\\n\\t\\tk = 0\\n\\t\\tif p11 == p1 and p21 == p2:\\n\\t\\t\\tans += 1\\n\\t\\t\\tk = l1\\n\\t\\tif p12 == p2 and p22 == p1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tk = l2\\n\\t\\tif l1 == l2 and ans > 0:\\n\\t\\t\\tans = 1\\n\\t\\tprint(ans)\\n\\t\\tif ans == 1:\\n\\t\\t\\tprint(k, n - k)\\n\\t\\tif ans == 2:\\n\\t\\t\\tprint(l1, l2)\\n\\t\\t\\tprint(l2, l1)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = max(a)\\n\\tlast = n - m\\n\\tli = []\\n\\tif m >= n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tleft = set(a[:m])\\n\\t\\tright = set(a[m:])\\n\\t\\tif len(left) == m and max(left) == m and (len(right) == last) and (max(right) == last):\\n\\t\\t\\tli.append([m, last])\\n\\t\\tleft = set(a[:last])\\n\\t\\tright = set(a[last:])\\n\\t\\tif m != last and len(left) == last and (max(left) == last) and (len(right) == m) and (max(right) == m):\\n\\t\\t\\tli.append([last, m])\\n\\t\\tif len(li) == 2:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(*li[0])\\n\\t\\t\\tprint(*li[1])\\n\\t\\telif len(li) == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(*li[0])\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tr = 0\\n\\ta = list(map(int, input().split()))\\n\\tif n <= 2 * max(a):\\n\\t\\tmaxx = max(a)\\n\\t\\tb = [0] * maxx\\n\\t\\tfor i in range(n):\\n\\t\\t\\tb[a[i] - 1] += 1\\n\\t\\tflag = 1\\n\\t\\tfor i in range(0, maxx - 1):\\n\\t\\t\\tif b[i] == 1 and b[i + 1] == 1:\\n\\t\\t\\t\\tpass\\n\\t\\t\\telif b[i] == 2 and b[i + 1] == 2:\\n\\t\\t\\t\\tpass\\n\\t\\t\\telif b[i] == 2 and b[i + 1] == 1:\\n\\t\\t\\t\\tr = i + 1\\n\\t\\t\\t\\tflag = 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 1:\\n\\t\\t\\tif b.count(1) == n:\\n\\t\\t\\t\\tflag = 0\\n\\t\\t\\telif b.count(2) == n // 2:\\n\\t\\t\\t\\tr = n // 2\\n\\telse:\\n\\t\\tflag = 0\\n\\tif flag == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\trr = []\\n\\t\\taa = [i + 1 for i in range(r)]\\n\\t\\tif sorted(a[0:r]) == aa:\\n\\t\\t\\trr.append([r, n - r])\\n\\t\\tif flag != 1:\\n\\t\\t\\tif sorted(a[n - r:n]) == aa:\\n\\t\\t\\t\\trr.append([n - r, r])\\n\\t\\tprint(len(rr))\\n\\t\\tif len(rr) > 0:\\n\\t\\t\\tfor x in rr:\\n\\t\\t\\t\\tprint(*x)\\n\", \"import heapq\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarray = list(map(int, input().split()))\\n\\tLeftHalf = [False] * n\\n\\trightHalf = [False] * n\\n\\tHighestelement = 0\\n\\tSum = 0\\n\\td = {}\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tif array[i] > Highestelement:\\n\\t\\t\\tHighestelement = array[i]\\n\\t\\tSum += array[i]\\n\\t\\tif array[i] in d:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[array[i]] = 0\\n\\t\\tif Sum == (i + 1) * (i + 2) // 2 and Highestelement == i + 1:\\n\\t\\t\\tLeftHalf[i] = True\\n\\tHighestelement = 0\\n\\tSum = 0\\n\\td = {}\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif array[i] > Highestelement:\\n\\t\\t\\tHighestelement = array[i]\\n\\t\\tSum += array[i]\\n\\t\\tif array[i] in d:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[array[i]] = 0\\n\\t\\tif Sum == (n - i) * (n - i + 1) // 2 and Highestelement == n - i:\\n\\t\\t\\trightHalf[i] = True\\n\\tansArray = []\\n\\tfor i in range(n - 1):\\n\\t\\tif LeftHalf[i] and rightHalf[i + 1]:\\n\\t\\t\\tans += 1\\n\\t\\t\\tansArray.append([i + 1, n - (i + 1)])\\n\\tprint(ans)\\n\\tfor i in ansArray:\\n\\t\\tprint(*i)\\n\", \"def solve():\\n\\tn = int(input())\\n\\tarr = [int(v) for v in input().split()]\\n\\tst = set()\\n\\tans = set()\\n\\tfor i in range(n):\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tlfst = set(arr[:i])\\n\\t\\t\\trfst = set(arr[i:])\\n\\t\\t\\tif set(range(1, i + 1)) == lfst and set(range(1, n - i + 1)) == rfst:\\n\\t\\t\\t\\tans.add((i, n - i))\\n\\t\\t\\tbreak\\n\\t\\tst.add(arr[i])\\n\\tst = set()\\n\\tfor i in reversed(range(n)):\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tlfst = set(arr[:i + 1])\\n\\t\\t\\trfst = set(arr[i:])\\n\\t\\t\\tif lfst == set(range(1, i + 2)) and rfst == set(range(1, n - i)):\\n\\t\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\t\\t\\tbreak\\n\\t\\tst.add(arr[i])\\n\\tprint(len(ans))\\n\\tif len(ans):\\n\\t\\tprint('\\\\n'.join(['%s %s' % (u, v) for (u, v) in ans]))\\n\\ndef solve1():\\n\\tn = int(input())\\n\\tarr = [int(v) for v in input().split()]\\n\\tst = set()\\n\\tans = set()\\n\\tfor i in range(n):\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tgood = True\\n\\t\\t\\tlfst = set(arr[:i])\\n\\t\\t\\trfst = set(arr[i:])\\n\\t\\t\\tfor j in range(1, i + 1):\\n\\t\\t\\t\\tif j not in lfst:\\n\\t\\t\\t\\t\\tgood = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tfor j in range(1, n - i + 1):\\n\\t\\t\\t\\tif j not in rfst:\\n\\t\\t\\t\\t\\tgood = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif good:\\n\\t\\t\\t\\tans.add((i, n - i))\\n\\t\\t\\tbreak\\n\\t\\tst.add(arr[i])\\n\\tst = set()\\n\\tfor i in reversed(range(n)):\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tgood = True\\n\\t\\t\\tlfst = set(arr[:i + 1])\\n\\t\\t\\trfst = set(arr[i:])\\n\\t\\t\\tfor j in range(1, i + 2):\\n\\t\\t\\t\\tif j not in lfst:\\n\\t\\t\\t\\t\\tgood = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tfor j in range(1, n - i):\\n\\t\\t\\t\\tif j not in rfst:\\n\\t\\t\\t\\t\\tgood = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif good:\\n\\t\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\t\\t\\tbreak\\n\\t\\tst.add(arr[i])\\n\\tprint(len(ans))\\n\\tif len(ans):\\n\\t\\tprint('\\\\n'.join(['%s %s' % (u, v) for (u, v) in ans]))\\nt = int(input())\\nfor _ in range(t):\\n\\tsolve1()\\n\", \"t = int(input())\\nres = ''\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmax_l = max(a)\\n\\tsecond_l = n - max_l\\n\\tk = 0\\n\\tsub_res = ''\\n\\tif max_l * second_l != 0:\\n\\t\\tleft = set(a[:max_l])\\n\\t\\tright = set(a[max_l:])\\n\\t\\tif len(left) == max_l and max(left) == max_l and (max(right) == second_l) and (len(right) == second_l):\\n\\t\\t\\tk = 1\\n\\t\\t\\tsub_res = str(max_l) + ' ' + str(second_l) + '\\\\n'\\n\\t\\tleft = set(a[:second_l])\\n\\t\\tright = set(a[second_l:])\\n\\t\\tif max_l != second_l and len(right) == max_l and (len(left) == second_l) and (max(left) == second_l) and (max(right) == max_l):\\n\\t\\t\\tk += 1\\n\\t\\t\\tsub_res += str(second_l) + ' ' + str(max_l) + '\\\\n'\\n\\tres += str(k) + '\\\\n' + sub_res\\nprint(res)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tf = 0\\n\\tans = []\\n\\tm = max(A)\\n\\tif m >= n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tp1a = A[:m]\\n\\t\\tp2a = A[m:]\\n\\t\\tp1b = A[:n - m]\\n\\t\\tp2b = A[n - m:]\\n\\t\\tif len(set(p1a)) == m == max(p1a) and len(set(p2a)) == n - m == max(p2a):\\n\\t\\t\\tans.append(m)\\n\\t\\tif len(set(p1b)) == n - m == max(p1b) and len(set(p2b)) == m == max(p2b) and (m != n - m):\\n\\t\\t\\tans.append(n - m)\\n\\t\\tprint(len(ans))\\n\\t\\tfor a in ans:\\n\\t\\t\\tprint(a, n - a)\\n\", \"def func(arr):\\n\\tnombers = set()\\n\\tfor i in range(len(arr)):\\n\\t\\tif arr[i] in nombers:\\n\\t\\t\\treturn i\\n\\t\\telse:\\n\\t\\t\\tnombers.add(arr[i])\\n\\treturn -1\\n\\ndef test(arr):\\n\\tnew_arr = sorted(arr)\\n\\tfor i in range(1, len(arr) + 1):\\n\\t\\tif new_arr[i - 1] != i:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = [int(i) for i in input().split()]\\n\\tans = 0\\n\\tans_output = []\\n\\ts = func(arr)\\n\\tif s != -1:\\n\\t\\tif test(arr[:s]) and test(arr[s:]):\\n\\t\\t\\tans += 1\\n\\t\\t\\tans_output.append((s, n - s))\\n\\tarr.reverse()\\n\\ts = func(arr)\\n\\tif s != -1:\\n\\t\\tif test(arr[:s]) and test(arr[s:]):\\n\\t\\t\\tdop = (n - s, s)\\n\\t\\t\\tif ans == 0 or ans_output[0] != dop:\\n\\t\\t\\t\\tans_output.append(dop)\\n\\t\\t\\t\\tans += 1\\n\\tprint(ans)\\n\\tfor i in ans_output:\\n\\t\\tprint(*i)\\n\", \"check = lambda s, n: all((i + 1 in s for i in range(max(n, 1))))\\nfor _ in range(int(input())):\\n\\ta = [list(map(int, input().split())) for i in '..'][1]\\n\\t(mx, n, res) = (max(a), len(a), set())\\n\\tif check(set(a[:mx]), mx) and check(set(a[mx:]), n - mx):\\n\\t\\tres.add((mx, n - mx))\\n\\tif check(set(a[:n - mx]), n - mx) and check(set(a[n - mx:]), mx):\\n\\t\\tres.add((n - mx, mx))\\n\\tprint(len(res))\\n\\tfor r in res:\\n\\t\\tprint(*r)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tgood = []\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = max(a)\\n\\ts = set(a[0:m])\\n\\tsc = set(a[m:n])\\n\\tif len(s) == m and max(sc) == n - m and (len(sc) == n - m):\\n\\t\\tgood.append(str(m) + ' ' + str(n - m))\\n\\tp = set(a[-m:n])\\n\\tpc = set(a[0:-m])\\n\\tif len(p) == m and max(pc) == n - m and (len(pc) == n - m):\\n\\t\\tgood.append(str(n - m) + ' ' + str(m))\\n\\tif len(good) == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(good[0])\\n\\telif len(good) == 2 and m * 2 != n:\\n\\t\\tprint(2)\\n\\t\\tprint(good[0])\\n\\t\\tprint(good[1])\\n\\telif len(good) == 2 and m * 2 == n:\\n\\t\\tprint(1)\\n\\t\\tprint(good[0])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import heapq\\nt = input()\\nt = int(t)\\n\\ndef cek(lst):\\n\\tnn = len(lst)\\n\\tdct = {}\\n\\tfor i in lst:\\n\\t\\ttry:\\n\\t\\t\\tdct[i] += 1\\n\\t\\t\\treturn False\\n\\t\\texcept:\\n\\t\\t\\tdct[i] = 1\\n\\tfor i in range(1, nn + 1):\\n\\t\\ttry:\\n\\t\\t\\tb = dct[i]\\n\\t\\texcept:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor case in range(t):\\n\\ta = input().split()\\n\\tn = int(a[0])\\n\\ta = input().split()\\n\\tlst = [int(i) for i in a]\\n\\tans = []\\n\\tmaxi = max(lst)\\n\\tl = lst[:maxi]\\n\\tr = lst[maxi:]\\n\\tif cek(l) and cek(r):\\n\\t\\tans.append([maxi, n - maxi])\\n\\tif n - maxi != maxi:\\n\\t\\tmaxi = n - maxi\\n\\t\\tl = lst[:maxi]\\n\\t\\tr = lst[maxi:]\\n\\t\\tif cek(l) and cek(r):\\n\\t\\t\\tans.append([maxi, n - maxi])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"def check(a, b, n, m):\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i not in a:\\n\\t\\t\\treturn False\\n\\tfor i in range(1, m + 1):\\n\\t\\tif i not in b:\\n\\t\\t\\treturn False\\n\\treturn True\\nfrom math import *\\nT = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tArr = [0] * max(arr)\\n\\tfor i in arr:\\n\\t\\tArr[i - 1] += 1\\n\\tflag = 0\\n\\tfor i in range(1, len(Arr)):\\n\\t\\tif Arr[i] > Arr[i - 1]:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\t\\tif Arr[i] == 0 or Arr[i - 1] == 0:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tMax = max(Arr)\\n\\tMin = min(Arr)\\n\\tif flag == 0 and Max == 2:\\n\\t\\ta = max(arr)\\n\\t\\tb = n - a\\n\\t\\tDict1 = {arr[i]: 1 for i in range(a)}\\n\\t\\tDict2 = {arr[i]: 1 for i in range(a, n)}\\n\\t\\tDict3 = {arr[i]: 1 for i in range(b)}\\n\\t\\tDict4 = {arr[i]: 1 for i in range(b, n)}\\n\\t\\tA = check(Dict1, Dict2, a, b)\\n\\t\\tB = check(Dict3, Dict4, b, a)\\n\\t\\tif A == True and B == True and (a != b):\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(a, b)\\n\\t\\t\\tprint(b, a)\\n\\t\\telif A == True:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(a, b)\\n\\t\\telif B == True:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(b, a)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ts = set()\\n\\tm = 0\\n\\tans = set()\\n\\tfor i in range(n):\\n\\t\\tif a[i] > m and a[i] in s:\\n\\t\\t\\tm = a[i]\\n\\t\\ts.add(a[i])\\n\\tif sorted(a[:m]) == list(range(1, m + 1)) and sorted(a[m:]) == list(range(1, n - m + 1)):\\n\\t\\tans.add(m)\\n\\tif sorted(a[:n - m]) == list(range(1, n - m + 1)) and sorted(a[n - m:]) == list(range(1, m + 1)):\\n\\t\\tans.add(n - m)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i, n - i)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tb = list(map(int, input().split()))\\n\\ts = max(b)\\n\\tp = n - s\\n\\tq = b.copy()\\n\\tq.reverse()\\n\\ta = [-1] * n\\n\\tc = [-1] * n\\n\\tfor j in range(n):\\n\\t\\tif a[b[j]] == -1:\\n\\t\\t\\ta[b[j]] = j\\n\\tfor j in range(n):\\n\\t\\tif c[q[j]] == -1:\\n\\t\\t\\tc[q[j]] = j\\n\\tl = -1\\n\\tf = 0\\n\\tfor j in range(1, s + 1):\\n\\t\\tif a[j] == -1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\t\\tl = max(l, a[j])\\n\\tif f == 0:\\n\\t\\tif l == s - 1:\\n\\t\\t\\tf = 0\\n\\t\\telse:\\n\\t\\t\\tf = 1\\n\\tif f == 0:\\n\\t\\tl = -1\\n\\t\\tfor j in range(1, p + 1):\\n\\t\\t\\tif c[j] == -1:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tl = max(l, c[j])\\n\\t\\tif f == 0:\\n\\t\\t\\tif l == p - 1:\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tf = 1\\n\\tl = -1\\n\\tg = 0\\n\\tfor j in range(1, s + 1):\\n\\t\\tif c[j] == -1:\\n\\t\\t\\tg = 1\\n\\t\\t\\tbreak\\n\\t\\tl = max(l, c[j])\\n\\tif g == 0:\\n\\t\\tif l == s - 1:\\n\\t\\t\\tg = 0\\n\\t\\telse:\\n\\t\\t\\tg = 1\\n\\tif g == 0:\\n\\t\\tl = -1\\n\\t\\tfor j in range(1, p + 1):\\n\\t\\t\\tif a[j] == -1:\\n\\t\\t\\t\\tg = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tl = max(l, a[j])\\n\\t\\tif g == 0:\\n\\t\\t\\tif l == p - 1:\\n\\t\\t\\t\\tg = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tg = 1\\n\\tif f == 1 and g == 1:\\n\\t\\tprint(0)\\n\\telif f == 1 and g == 0:\\n\\t\\tprint(1)\\n\\t\\tprint(n - s, s)\\n\\telif f == 0 and g == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(s, n - s)\\n\\telif f == 0 and g == 0:\\n\\t\\tif s != n - s:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(s, n - s)\\n\\t\\t\\tprint(n - s, s)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(s, n - s)\\n\", \"t = int(input())\\nwhile t != 0:\\n\\tn = int(input())\\n\\tlist1 = list(map(int, input().split()))\\n\\tp = max(list1)\\n\\tp1 = set(list1[:p])\\n\\tans = list()\\n\\tif p1 == set(range(1, p + 1)):\\n\\t\\tq1 = set(list1[p:])\\n\\t\\tif q1 == set(range(1, n - p + 1)):\\n\\t\\t\\tans.append(p)\\n\\tp2 = set(list1[:n - p])\\n\\tif p2 == set(range(1, n - p + 1)):\\n\\t\\tq2 = set(list1[n - p:])\\n\\t\\tif q2 == set(range(1, p + 1)):\\n\\t\\t\\tans.append(n - p)\\n\\tans = set(ans)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i, n - i)\\n\\tt -= 1\\n\", \"def naive():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tval = 0\\n\\t\\tcase = []\\n\\t\\tfor l1 in range(1, n):\\n\\t\\t\\tstring_1 = sorted(a[0:l1])\\n\\t\\t\\tstring_2 = sorted(a[l1:])\\n\\t\\t\\tif [x for x in range(1, l1 + 1)] == string_1:\\n\\t\\t\\t\\tif string_2 == [x for x in range(1, n - l1 + 1)]:\\n\\t\\t\\t\\t\\tval += 1\\n\\t\\t\\t\\t\\tcase.append((l1, n - l1))\\n\\t\\tprint(val)\\n\\t\\tfor c in case:\\n\\t\\t\\tprint(c[0], c[1])\\n\\ndef fast():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tm = max(a)\\n\\t\\tif n == m:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tl1 = [m, n - m]\\n\\t\\t\\tcase = set()\\n\\t\\t\\tfor i in l1:\\n\\t\\t\\t\\tif sorted(a[:i]) == [x for x in range(1, i + 1)]:\\n\\t\\t\\t\\t\\tif sorted(a[i:]) == [x for x in range(1, n - i + 1)]:\\n\\t\\t\\t\\t\\t\\tcase.add((i, n - i))\\n\\t\\t\\tprint(len(case))\\n\\t\\t\\tfor c in case:\\n\\t\\t\\t\\tprint(c[0], c[1])\\nfast()\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tsp = list(map(int, input().split()))\\n\\tma = max(sp)\\n\\tcount = 0\\n\\tans = []\\n\\tif len(set(sp[:ma])) == ma and len(set(sp[ma:])) == n - ma and (max(sp[:ma]) == ma) and (max(sp[ma:]) == n - ma):\\n\\t\\tcount += 1\\n\\t\\tans.append((ma, n - ma))\\n\\tif len(set(sp[:n - ma])) == n - ma and len(set(sp[n - ma:])) == ma and (max(sp[:n - ma]) == n - ma) and (max(sp[n - ma:]) == ma):\\n\\t\\tcount += 1\\n\\t\\tans.append((n - ma, ma))\\n\\tans = set(ans)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"cases = int(input())\\nfor case in range(cases):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tv = set()\\n\\tpos = set()\\n\\tmaxi = 0\\n\\tfor i in range(n):\\n\\t\\tmaxi = max(maxi, l[i])\\n\\t\\tv.add(l[i])\\n\\t\\tif len(v) == i + 1 and maxi == i + 1:\\n\\t\\t\\tpos.add(i + 1)\\n\\tposf = []\\n\\tv = set()\\n\\tmaxi = 0\\n\\tl = l[::-1]\\n\\tfor i in range(n):\\n\\t\\tmaxi = max(maxi, l[i])\\n\\t\\tv.add(l[i])\\n\\t\\tif n - i - 1 in pos and len(v) == i + 1 and (maxi == i + 1):\\n\\t\\t\\tposf.append(n - i - 1)\\n\\tprint(len(posf))\\n\\tfor p in posf:\\n\\t\\tprint(p, n - p)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tk = [0] * n\\n\\tf = False\\n\\tp = 1\\n\\tr = 0\\n\\tfor i in range(n):\\n\\t\\tk[a[i] - 1] += 1\\n\\tif k[0] != 2:\\n\\t\\tf = True\\n\\telse:\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif k[i] > k[i - 1]:\\n\\t\\t\\t\\tf = True\\n\\t\\t\\tif k[i] == 2:\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\tif k[i] == 1:\\n\\t\\t\\t\\tr += 1\\n\\tc = 0\\n\\tb = []\\n\\tmaxi = -1\\n\\tused = [0] * n\\n\\tfor i in range(n - 1):\\n\\t\\tif used[a[i] - 1] != 0:\\n\\t\\t\\tbreak\\n\\t\\tused[a[i] - 1] = 1\\n\\t\\tif k[i] == 2:\\n\\t\\t\\tp -= 1\\n\\t\\tif k[i] == 1:\\n\\t\\t\\tr -= 1\\n\\t\\tif a[i] > maxi:\\n\\t\\t\\tmaxi = a[i]\\n\\t\\tif maxi == i + 1:\\n\\t\\t\\tif n - i - 1 > i:\\n\\t\\t\\t\\tif k[i] == 2 and p == 0:\\n\\t\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\t\\tb.append(i + 1)\\n\\t\\t\\telif k[n - i - 2] == 2 and p == 0:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\tb.append(i + 1)\\n\\tif f:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(c)\\n\\t\\tfor i in b:\\n\\t\\t\\tprint(i, n - i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tv = [0] * n\\n\\ti = 1\\n\\ts = 0\\n\\tr = 1\\n\\tr1 = 1\\n\\tfor x in a:\\n\\t\\tv[x] += 1\\n\\tif v[1] <= 1:\\n\\t\\tprint(0)\\n\\telif n == 2:\\n\\t\\tif a[0] == 1 and a[1] == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint('1 1')\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\twhile v[i] >= 2:\\n\\t\\t\\ts += 1\\n\\t\\t\\ti += 1\\n\\t\\tb = sorted(a[0:s])\\n\\t\\te = sorted(a[s:])\\n\\t\\tb1 = sorted(a[n - s:])\\n\\t\\te1 = sorted(a[0:n - s])\\n\\t\\tfor i in range(len(b)):\\n\\t\\t\\tif b[i] != i + 1:\\n\\t\\t\\t\\tr = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(e)):\\n\\t\\t\\tif e[i] != i + 1:\\n\\t\\t\\t\\tr = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(b1)):\\n\\t\\t\\tif b1[i] != i + 1:\\n\\t\\t\\t\\tr1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(e1)):\\n\\t\\t\\tif e1[i] != i + 1:\\n\\t\\t\\t\\tr1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif r == 0 and r1 == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telif r == 1 and r1 == 1:\\n\\t\\t\\tif len(b) != len(e):\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(len(b), len(e))\\n\\t\\t\\t\\tprint(len(e1), len(b1))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(len(b), len(e))\\n\\t\\telif r == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(b), len(e))\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(e1), len(b1))\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tx = list(map(int, input().split()))\\n\\t(check, yes1, yes2) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\\n\\t(ans, ma) = (0, 0)\\n\\tans2 = []\\n\\tfor i in range(n):\\n\\t\\tif check[x[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tma = max(ma, x[i])\\n\\t\\t\\tif i == ma - 1:\\n\\t\\t\\t\\tyes1[i] = 1\\n\\t\\t\\tcheck[x[i]] = 1\\n\\t(check, ma) = ([0] * (n + 1), 0)\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif check[x[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tma = max(ma, x[i])\\n\\t\\t\\tif n - i == ma:\\n\\t\\t\\t\\tyes2[i] = 1\\n\\t\\t\\tcheck[x[i]] = 1\\n\\tfor i in range(n - 1):\\n\\t\\tif yes1[i] == 1 and yes2[i + 1] == 1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tans2.append(i + 1)\\n\\tprint(ans)\\n\\tfor i in range(ans):\\n\\t\\tprint(ans2[i], n - ans2[i])\\n\", \"def per(X):\\n\\tS = set(X)\\n\\tif not len(X) == len(S):\\n\\t\\treturn False\\n\\tfor i in range(1, len(X) + 1):\\n\\t\\tif i not in S:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor y in range(int(input())):\\n\\tn = int(input())\\n\\tL = list(map(int, input().split()))\\n\\tm = max(L)\\n\\tr = []\\n\\tif n != m:\\n\\t\\tif per(L[:m]) and per(L[m:]):\\n\\t\\t\\tr.append((m, n - m))\\n\\t\\tif per(L[-m:]) and per(L[:-m]):\\n\\t\\t\\tr.append((n - m, m))\\n\\tr = list(set(r))\\n\\tprint(len(r))\\n\\tfor (a, b) in r:\\n\\t\\tprint(a, b)\\n\", \"from sys import stdin\\nfrom collections import deque\\nmod = 10 ** 9 + 7\\nimport sys\\nimport random\\nfrom queue import PriorityQueue\\nfrom bisect import bisect_right\\nfrom bisect import bisect_left\\nfrom collections import defaultdict\\nfrom math import sqrt, factorial, gcd, log2, inf, ceil\\nimport heapq\\ninput = lambda : sys.stdin.readline().rstrip()\\nfrom sys import stdin, stdout\\nfrom heapq import heapify, heappush, heappop\\nfrom itertools import permutations\\nfrom math import factorial as f\\n\\ndef ncr(n, r, p):\\n\\tnum = den = 1\\n\\tfor i in range(r):\\n\\t\\tnum = num * (n - i) % p\\n\\t\\tden = den * (i + 1) % p\\n\\treturn num * pow(den, p - 2, p) % p\\n\\ndef solve(n):\\n\\treturn n * (n + 1) // 2\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tl1 = []\\n\\tl2 = []\\n\\tmax1 = 0\\n\\tmin1 = inf\\n\\thash = []\\n\\tset1 = set()\\n\\tfor i in range(n):\\n\\t\\thash.append(True)\\n\\t\\tif l[i] > max1:\\n\\t\\t\\tmax1 = l[i]\\n\\t\\tset1.add(l[i])\\n\\t\\tif len(set1) != i + 1:\\n\\t\\t\\thash[i] = False\\n\\t\\tif l[i] < min1:\\n\\t\\t\\tmin1 = l[i]\\n\\t\\tl1.append([min1, max1])\\n\\tmax1 = 0\\n\\tmin1 = inf\\n\\tset1 = set()\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif l[i] > max1:\\n\\t\\t\\tmax1 = l[i]\\n\\t\\tif l[i] < min1:\\n\\t\\t\\tmin1 = l[i]\\n\\t\\tset1.add(l[i])\\n\\t\\tif len(set1) != n - i:\\n\\t\\t\\thash[i - 1] = False\\n\\t\\tl2.append([min1, max1])\\n\\tl2.pop()\\n\\tl1.pop()\\n\\tans = []\\n\\tfor i in range(len(l1)):\\n\\t\\t(a, b) = l1[i]\\n\\t\\t(c, d) = l2[len(l1) - i - 1]\\n\\t\\tlen1 = i + 1\\n\\t\\tlen2 = n - i - 1\\n\\t\\tif b - a + 1 == len1 and d - c + 1 == len2 and (a == 1) and (c == 1) and (hash[i] == True):\\n\\t\\t\\tans.append(str(len1) + ' ' + str(len2))\\n\\tprint(len(ans))\\n\\tprint('\\\\n'.join(ans))\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td = set()\\n\\tm = 0\\n\\tk = 0\\n\\tans = []\\n\\tfor i in range(n):\\n\\t\\tif not a[i] in d:\\n\\t\\t\\td.add(a[i])\\n\\t\\t\\tm = max(m, a[i])\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif m != len(d) or len(d) == n:\\n\\t\\tk = 0\\n\\telse:\\n\\t\\td = set()\\n\\t\\tp = m\\n\\t\\tm = 0\\n\\t\\tfor i in range(p, n):\\n\\t\\t\\tif not a[i] in d:\\n\\t\\t\\t\\td.add(a[i])\\n\\t\\t\\t\\tm = max(m, a[i])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tif m != len(d) or len(d) == n or p + m != n:\\n\\t\\t\\tk = 0\\n\\t\\telse:\\n\\t\\t\\tk = 1\\n\\t\\t\\tans.append([p, n - p])\\n\\td = set()\\n\\tm = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif not a[i] in d:\\n\\t\\t\\td.add(a[i])\\n\\t\\t\\tm = max(m, a[i])\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif m != len(d) or len(d) == n:\\n\\t\\tm = 0\\n\\telse:\\n\\t\\ts = [n - m, m]\\n\\t\\td = set()\\n\\t\\tm = 0\\n\\t\\tif len(ans) == 0 or s != ans[-1]:\\n\\t\\t\\tfor i in range(s[0] - 1, -1, -1):\\n\\t\\t\\t\\tif not a[i] in d:\\n\\t\\t\\t\\t\\td.add(a[i])\\n\\t\\t\\t\\t\\tm = max(m, a[i])\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif m != len(d) or len(d) == n or s[1] + m != n:\\n\\t\\t\\t\\tm = 0\\n\\t\\t\\telif k == 1:\\n\\t\\t\\t\\tk = 2\\n\\t\\t\\t\\tans.append(s)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tk = 1\\n\\t\\t\\t\\tans.append(s)\\n\\tif k == 0:\\n\\t\\tprint(k)\\n\\telif k == 1:\\n\\t\\tprint(k)\\n\\t\\tprint(*ans[-1])\\n\\telse:\\n\\t\\tprint(k)\\n\\t\\tprint(*ans[0])\\n\\t\\tprint(*ans[1])\\n\", \"def sol(p):\\n\\tarr = sorted(p)\\n\\tfor i in range(len(arr)):\\n\\t\\tif arr[i] != i + 1:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\tres = []\\n\\t(p1, p2) = (a[0:n - mx], a[n - mx:n])\\n\\tif sol(p1) and sol(p2):\\n\\t\\tres.append(n - mx)\\n\\t(p1, p2) = (a[0:mx], a[mx:n])\\n\\tif sol(p1) and sol(p2):\\n\\t\\tres.append(mx)\\n\\tres = set(res)\\n\\tprint(len(res))\\n\\tfor a in res:\\n\\t\\tprint(a, n - a)\\n\", \"import math\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\tarr = [int(i) for i in input().split()]\\n\\t\\tcounters = {}\\n\\t\\trepeated = set()\\n\\t\\tfor el in arr:\\n\\t\\t\\tif el not in counters:\\n\\t\\t\\t\\tcounters[el] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcounters[el] += 1\\n\\t\\t\\t\\trepeated.add(el)\\n\\t\\treverse_max = list(arr)\\n\\t\\tfor i in range(n - 2, -1, -1):\\n\\t\\t\\treverse_max[i] = max(reverse_max[i], reverse_max[i + 1])\\n\\t\\tcurrent = set()\\n\\t\\tbig = -math.inf\\n\\t\\tanswer = []\\n\\t\\tfor index in range(n - 1):\\n\\t\\t\\tel = arr[index]\\n\\t\\t\\tif el in current:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcurrent.add(el)\\n\\t\\t\\tcounters[el] -= 1\\n\\t\\t\\tif counters[el] == 1 and el in repeated:\\n\\t\\t\\t\\trepeated.remove(el)\\n\\t\\t\\tbig = max(big, el)\\n\\t\\t\\tif big != len(current):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif len(repeated) != 0 or reverse_max[index + 1] != n - index - 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tanswer.append((index + 1, n - index - 1))\\n\\t\\tprint(len(answer))\\n\\t\\tfor part in answer:\\n\\t\\t\\tprint(*part)\\nmain()\\n\", \"import sys\\ninput = sys.stdin.readline\\ninputr = lambda : range(int(input()))\\ninputi = lambda : map(int, input().split())\\ninputl = lambda : list(inputi())\\nfrom math import *\\nfrom heapq import *\\nfrom bisect import *\\nfrom functools import reduce, lru_cache\\nfrom collections import Counter, defaultdict\\nfor _ in inputr():\\n\\t(n,) = inputi()\\n\\tA = inputl()\\n\\tt = []\\n\\tm1 = max(A)\\n\\tm2 = n - m1\\n\\tfor (i, z) in enumerate(sorted(A[:m1]), 1):\\n\\t\\tif i != z:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tfor (i, z) in enumerate(sorted(A[m1:n]), 1):\\n\\t\\t\\tif i != z:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tt.append((m1, m2))\\n\\tfor (i, z) in enumerate(sorted(A[:m2]), 1):\\n\\t\\tif i != z:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tfor (i, z) in enumerate(sorted(A[m2:n]), 1):\\n\\t\\t\\tif i != z:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tt.append((m2, m1))\\n\\tif len(t) == 2 and t[0] == t[1]:\\n\\t\\tprint(1)\\n\\t\\tprint(*t[0])\\n\\telse:\\n\\t\\tprint(len(t))\\n\\t\\tfor l in t:\\n\\t\\t\\tprint(*l)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tk = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ta_c = [0] * (max(a) + 1)\\n\\tfor i in range(k):\\n\\t\\ta_c[a[i]] += 1\\n\\tif a_c[1] != 2:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tflag = True\\n\\tu = int(100000000.0)\\n\\tfor i in range(2, len(a_c)):\\n\\t\\tif a_c[i] == 2 and a_c[i - 1] >= a_c[i]:\\n\\t\\t\\tpass\\n\\t\\telif a_c[i] == 1 and a_c[i - 1] >= a_c[i]:\\n\\t\\t\\tu = min(u, i)\\n\\t\\telse:\\n\\t\\t\\tflag = False\\n\\tif not flag:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\telif a_c[-1] == 2:\\n\\t\\tif len(a_c) - 1 == len(set(a[0:len(a_c) - 1])):\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(a_c) - 1, len(a_c) - 1)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tans_l = []\\n\\t\\tif u - 1 == max(a[0:u - 1]) and len(set(a[0:u - 1])) == u - 1:\\n\\t\\t\\tans_l.append([u - 1, k - u + 1])\\n\\t\\tif u - 1 == max(a[k - u + 1:]) and len(set(a[k - u + 1:])) == u - 1:\\n\\t\\t\\tans_l.append([k - u + 1, u - 1])\\n\\t\\tprint(len(ans_l))\\n\\t\\tfor i in range(len(ans_l)):\\n\\t\\t\\tprint(*ans_l[i])\\n\", \"testCases = int(input())\\nfor _ in range(testCases):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\tmx_ = n - mx\\n\\trange1 = set(range(1, mx + 1))\\n\\trange2 = set(range(1, mx_ + 1))\\n\\td = set()\\n\\tif set(a[:mx]) == range1 and set(a[mx:]) == range2:\\n\\t\\td.add(mx)\\n\\tif set(a[:mx_]) == range2 and set(a[mx_:]) == range1:\\n\\t\\td.add(mx_)\\n\\tprint(len(d))\\n\\tfor x in d:\\n\\t\\tprint(x, n - x)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef solution(arr, n):\\n\\tarr.insert(0, 0)\\n\\t(seen, res) = (set(), set())\\n\\tseen_end = set()\\n\\t(pre, use_s, use_e) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\\n\\tsums = [0] * (n + 1)\\n\\tuse_s[0] = -1\\n\\tuse_e[0] = -1\\n\\tfor i in range(1, n + 1):\\n\\t\\tpre[i] = pre[i - 1] + arr[i]\\n\\t\\tseen.add(arr[i])\\n\\t\\tuse_s[i] = len(seen)\\n\\t\\tsums[i] = i * (i + 1) // 2\\n\\tfor i in range(1, n + 1):\\n\\t\\tseen_end.add(arr[n - i + 1])\\n\\t\\tuse_e[i] = len(seen_end)\\n\\tfor i in range(1, n):\\n\\t\\tif pre[i] == sums[i] and pre[n] - pre[i] == sums[n - i]:\\n\\t\\t\\tif use_s[i] == i and use_e[n - i] == n - i:\\n\\t\\t\\t\\tres.add((i, n - i))\\n\\tif res:\\n\\t\\twrite(len(res))\\n\\t\\tfor (a, b) in res:\\n\\t\\t\\twrite(a, b)\\n\\telse:\\n\\t\\twrite(0)\\n\\ndef main():\\n\\tfor _ in range(r_int()):\\n\\t\\tn = r_int()\\n\\t\\tarr = r_array()\\n\\t\\tsolution(arr, n)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\n\\ndef input():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef write(*args, end='\\\\n'):\\n\\tfor x in args:\\n\\t\\tsys.stdout.write(str(x) + ' ')\\n\\tsys.stdout.write(end)\\n\\ndef r_array():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef r_int():\\n\\treturn int(input())\\nmain()\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = []\\n\\tmx = max(a)\\n\\t(l1, l2) = (a[0:mx], a[mx:])\\n\\ts1 = set(l1)\\n\\ts2 = set(l2)\\n\\tif len(s1) == len(l1) and len(s1) == max(s1) and (len(s2) == len(l2)) and (len(s2) == max(s2)):\\n\\t\\tans.append([mx, n - mx])\\n\\t(l1, l2) = (a[0:n - mx], a[n - mx:])\\n\\ts1 = set(l1)\\n\\ts2 = set(l2)\\n\\tif len(s1) == len(l1) and len(s1) == max(s1) and (len(s2) == len(l2)) and (len(s2) == max(s2)):\\n\\t\\tif [n - mx, mx] != [mx, n - mx]:\\n\\t\\t\\tans.append([n - mx, mx])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"def check(lst):\\n\\tlst.sort()\\n\\treturn len(lst) > 0 and all((i + 1 == lst[i] for i in range(len(lst))))\\nfor j in range(int(input())):\\n\\tn = int(input())\\n\\tlsta = list(map(int, input().split()))\\n\\tif lsta.count(1) == 2:\\n\\t\\tresult = set()\\n\\t\\tmx = max(lsta)\\n\\t\\tif check(lsta[:mx]) and check(lsta[mx:]):\\n\\t\\t\\tresult.add((mx, n - mx))\\n\\t\\tif check(lsta[:n - mx]) and check(lsta[n - mx:]):\\n\\t\\t\\tresult.add((n - mx, mx))\\n\\t\\tprint(len(result))\\n\\t\\tfor i in result:\\n\\t\\t\\tprint(*i)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"from collections import defaultdict\\nimport sys, math\\nf = None\\ntry:\\n\\tf = open('q1.input', 'r')\\nexcept IOError:\\n\\tf = sys.stdin\\nif 'xrange' in dir(__builtins__):\\n\\trange = xrange\\nsys.setrecursionlimit(10 ** 2)\\n\\ndef print_case_iterable(case_num, iterable):\\n\\tprint('Case #{}: {}'.format(case_num, ' '.join(map(str, iterable))))\\n\\ndef print_case_number(case_num, iterable):\\n\\tprint('Case #{}: {}'.format(case_num, iterable))\\n\\ndef print_iterable(A):\\n\\tprint(' '.join(A))\\n\\ndef read_int():\\n\\treturn int(f.readline().strip())\\n\\ndef read_int_array():\\n\\treturn [int(x) for x in f.readline().strip().split(' ')]\\n\\ndef rns():\\n\\ta = [x for x in f.readline().split(' ')]\\n\\treturn (int(a[0]), a[1].strip())\\n\\ndef read_string():\\n\\treturn list(f.readline().strip())\\n\\ndef ri():\\n\\treturn int(f.readline().strip())\\n\\ndef ria():\\n\\treturn [int(x) for x in f.readline().strip().split(' ')]\\n\\ndef rns():\\n\\ta = [x for x in f.readline().split(' ')]\\n\\treturn (int(a[0]), a[1].strip())\\n\\ndef rs():\\n\\treturn list(f.readline().strip())\\n\\ndef bi(x):\\n\\treturn bin(x)[2:]\\nfrom collections import deque\\nimport math\\nNUMBER = 10 ** 9 + 7\\n\\ndef factorial(n):\\n\\tM = NUMBER\\n\\tf = 1\\n\\tfor i in range(1, n + 1):\\n\\t\\tf = f * i % M\\n\\treturn f\\n\\ndef mult(a, b):\\n\\treturn a * b % NUMBER\\n\\ndef minus(a, b):\\n\\treturn (a - b) % NUMBER\\n\\ndef plus(a, b):\\n\\treturn (a + b) % NUMBER\\n\\ndef egcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn (b, 0, 1)\\n\\telse:\\n\\t\\t(g, y, x) = egcd(b % a, a)\\n\\t\\treturn (g, x - b // a * y, y)\\n\\ndef modinv(a):\\n\\tm = NUMBER\\n\\t(g, x, y) = egcd(a, m)\\n\\tif g != 1:\\n\\t\\traise Exception('modular inverse does not exist')\\n\\telse:\\n\\t\\treturn x % m\\n\\ndef choose(n, k):\\n\\tif n < k:\\n\\t\\tassert false\\n\\treturn mult(factorial(n), modinv(mult(factorial(k), factorial(n - k))))\\nfrom collections import deque, defaultdict\\nimport heapq\\n\\ndef solution(a, n):\\n\\td = defaultdict(int)\\n\\tfor x in a:\\n\\t\\td[x] += 1\\n\\t\\tif d[x] == 3:\\n\\t\\t\\treturn 0\\n\\tfirst_perm = list(set(a))\\n\\tsecond_perm = [x for x in d if d[x] == 2]\\n\\tn1 = len(first_perm)\\n\\tn2 = len(second_perm)\\n\\tif n1 * n2 == 0:\\n\\t\\treturn 0\\n\\tif sorted(first_perm) != sorted(range(1, n1 + 1)):\\n\\t\\treturn 0\\n\\tif sorted(second_perm) != sorted(range(1, n2 + 1)):\\n\\t\\treturn 0\\n\\tsol = []\\n\\tif set(a[:n1]) == set(first_perm):\\n\\t\\tsol.append([n1, n2])\\n\\tif set(a[:n2]) == set(second_perm):\\n\\t\\tsol.append([n2, n1])\\n\\tif not sol:\\n\\t\\treturn 0\\n\\tif n1 == n2:\\n\\t\\tsol = [[n1, n2]]\\n\\tprint(len(sol))\\n\\treturn '\\\\n'.join([' '.join(map(str, x)) for x in sol])\\n\\ndef main():\\n\\tT = ri()\\n\\tfor i in range(T):\\n\\t\\tn = ri()\\n\\t\\ta = ria()\\n\\t\\tx = solution(a, n)\\n\\t\\tif 'xrange' not in dir(__builtins__):\\n\\t\\t\\tprint(x)\\n\\t\\telse:\\n\\t\\t\\t(print >> output, str(x))\\n\\tif 'xrange' in dir(__builtins__):\\n\\t\\tprint(output.getvalue())\\n\\t\\toutput.close()\\nif 'xrange' in dir(__builtins__):\\n\\timport cStringIO\\n\\toutput = cStringIO.StringIO()\\nmain()\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tst = []\\n\\tvis1 = [0] * n\\n\\tvis2 = [0] * n\\n\\twhile a:\\n\\t\\tif vis1[a[-1]] == 0:\\n\\t\\t\\tst.append(a.pop())\\n\\t\\t\\tvis1[st[-1]] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfl = 0\\n\\tfor i in a:\\n\\t\\tif vis2[i] == 0:\\n\\t\\t\\tvis2[i] += 1\\n\\t\\telse:\\n\\t\\t\\tfl = 1\\n\\t\\t\\tbreak\\n\\tans = []\\n\\tif sum(vis2) == max(a) and sum(vis1) == max(st) and (fl == 0):\\n\\t\\tans.append([len(a), len(st)])\\n\\ta += st[::-1]\\n\\ta = a[::-1]\\n\\tst = []\\n\\tvis1 = [0] * n\\n\\tvis2 = [0] * n\\n\\twhile a:\\n\\t\\tif vis1[a[-1]] == 0:\\n\\t\\t\\tst.append(a.pop())\\n\\t\\t\\tvis1[st[-1]] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfl = 0\\n\\tfor i in a:\\n\\t\\tif vis2[i] == 0:\\n\\t\\t\\tvis2[i] += 1\\n\\t\\telse:\\n\\t\\t\\tfl = 1\\n\\t\\t\\tbreak\\n\\tif sum(vis2) == max(a) and sum(vis1) == max(st) and (fl == 0) and (not ans or ans[-1] != [len(st), len(a)]):\\n\\t\\tans.append([len(st), len(a)])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = [int(x) for x in input().split()][0]\\n\\tar = [int(x) for x in input().split()]\\n\\td = {}\\n\\tinvalid = False\\n\\tfor element in ar:\\n\\t\\td[element] = d.get(element, 0) + 1\\n\\t\\tif d[element] > 3:\\n\\t\\t\\tinvalid = True\\n\\tmax1 = 0\\n\\tmax2 = 0\\n\\tfor key in d:\\n\\t\\tif d[key] > 1 and key > max2:\\n\\t\\t\\tmax2 = key\\n\\t\\tif key > max1:\\n\\t\\t\\tmax1 = key\\n\\t\\tif d[key] < 1 or 2 < d[key]:\\n\\t\\t\\tinvalid = True\\n\\tif max2 < 1:\\n\\t\\tinvalid = True\\n\\tfor i in range(1, max2 + 1):\\n\\t\\tif d.get(i, 0) != 2:\\n\\t\\t\\tinvalid = True\\n\\t\\t\\tbreak\\n\\tfor i in range(max2 + 1, max1 + 1):\\n\\t\\tif d.get(i, 0) != 1:\\n\\t\\t\\tinvalid = True\\n\\t\\t\\tbreak\\n\\tif invalid:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\td = {}\\n\\t\\tfor element in ar[:max2]:\\n\\t\\t\\td[element] = d.get(element, 0) + 1\\n\\t\\tval1 = True\\n\\t\\tfor i in range(1, max2 + 1):\\n\\t\\t\\tif d.get(i, 0) != 1:\\n\\t\\t\\t\\tval1 = False\\n\\t\\t\\t\\tbreak\\n\\t\\td = {}\\n\\t\\tfor element in ar[::-1][:max2]:\\n\\t\\t\\td[element] = d.get(element, 0) + 1\\n\\t\\tval2 = True\\n\\t\\tfor i in range(1, max2 + 1):\\n\\t\\t\\tif d.get(i, 0) != 1:\\n\\t\\t\\t\\tval2 = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif val1 and val2:\\n\\t\\t\\tif max1 == max2:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(max1, max2)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(max1, max2)\\n\\t\\t\\t\\tprint(max2, max1)\\n\\t\\telif val1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(max2, max1)\\n\\t\\telif val2:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(max1, max2)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tfwd = set()\\n\\tmissing = set()\\n\\textra = set()\\n\\tpassed = set()\\n\\tfor (i, x) in enumerate(a, 1):\\n\\t\\tif x in passed:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tpassed.add(x)\\n\\t\\tif i in extra:\\n\\t\\t\\textra.remove(i)\\n\\t\\telse:\\n\\t\\t\\tmissing.add(i)\\n\\t\\tif x in missing:\\n\\t\\t\\tmissing.remove(x)\\n\\t\\telse:\\n\\t\\t\\textra.add(x)\\n\\t\\tif len(missing) == 0 and len(extra) == 0:\\n\\t\\t\\tfwd.add((i, n - i))\\n\\trev = set()\\n\\tmissing = set()\\n\\textra = set()\\n\\tpassed = set()\\n\\tfor (i, x) in enumerate(reversed(a), 1):\\n\\t\\tif x in passed:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tpassed.add(x)\\n\\t\\tif i in extra:\\n\\t\\t\\textra.remove(i)\\n\\t\\telse:\\n\\t\\t\\tmissing.add(i)\\n\\t\\tif x in missing:\\n\\t\\t\\tmissing.remove(x)\\n\\t\\telse:\\n\\t\\t\\textra.add(x)\\n\\t\\tif len(missing) == 0 and len(extra) == 0:\\n\\t\\t\\trev.add((n - i, i))\\n\\tvars = fwd & rev\\n\\tprint(len(vars))\\n\\tfor (l1, l2) in vars:\\n\\t\\tprint(l1, l2)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = [int(i) for i in input().split()]\\n\\ta = [0] * n\\n\\tb = [0] * n\\n\\tc = dict()\\n\\td = dict()\\n\\tc1 = 0\\n\\tc2 = 0\\n\\tcount = 0\\n\\tp = []\\n\\tmax1 = 0\\n\\tmax2 = 0\\n\\tfor i in range(n):\\n\\t\\tif l[i] not in c:\\n\\t\\t\\tc[l[i]] = 1\\n\\t\\t\\tc1 += 1\\n\\t\\t\\tif l[i] > max1:\\n\\t\\t\\t\\tmax1 = l[i]\\n\\t\\t\\tif max1 == c1:\\n\\t\\t\\t\\ta[i] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif l[i] not in d:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\t\\tc2 += 1\\n\\t\\t\\tif l[i] > max2:\\n\\t\\t\\t\\tmax2 = l[i]\\n\\t\\t\\tif c2 == max2:\\n\\t\\t\\t\\tb[i] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i] == 1 and b[i + 1] == 1:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tp.append([i + 1, n - i - 1])\\n\\tprint(count)\\n\\tfor i in p:\\n\\t\\tprint(*i)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\toccur1 = set()\\n\\tpos1 = set()\\n\\tmax1 = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] in occur1:\\n\\t\\t\\tbreak\\n\\t\\toccur1.add(a[i])\\n\\t\\tmax1 = max(max1, a[i])\\n\\t\\tif len(occur1) == max1:\\n\\t\\t\\tpos1.add(i)\\n\\toccur2 = set()\\n\\tpos2 = set()\\n\\tmax2 = 0\\n\\tfor j in range(n):\\n\\t\\ti = n - j - 1\\n\\t\\tif a[i] in occur2:\\n\\t\\t\\tbreak\\n\\t\\toccur2.add(a[i])\\n\\t\\tmax2 = max(max2, a[i])\\n\\t\\tif len(occur2) == max2:\\n\\t\\t\\tpos2.add(i - 1)\\n\\tans = 0\\n\\tpointer = []\\n\\tfor i in pos1:\\n\\t\\tif i in pos2:\\n\\t\\t\\tans += 1\\n\\t\\t\\tpointer.append(i)\\n\\tprint(ans)\\n\\tfor i in pointer:\\n\\t\\tprint(i + 1, n - i - 1)\\n\", \"for t in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split(' ', n - 1)))\\n\\tma = int(max(a))\\n\\ti = 0\\n\\tlogic1 = sorted(a[:ma]) == [k for k in range(1, ma + 1)] and sorted(a[ma:]) == [j for j in range(1, n - ma + 1)]\\n\\tlogic2 = sorted(a[:n - ma]) == [p for p in range(1, n - ma + 1)] and sorted(a[n - ma:]) == [q for q in range(1, ma + 1)]\\n\\tif logic1:\\n\\t\\ti = i + 1\\n\\tif ma == n - ma:\\n\\t\\tlogic2 = False\\n\\tif logic2:\\n\\t\\ti = i + 1\\n\\tprint(i)\\n\\tif logic1:\\n\\t\\tprint(ma, n - ma)\\n\\tif logic2:\\n\\t\\tprint(n - ma, ma)\\n\", \"def check(arr, n):\\n\\tf = arr[0:n]\\n\\tl = arr[n:]\\n\\tfreqf = [False] * n\\n\\tfreql = [False] * (len(arr) - n)\\n\\tfor i in f:\\n\\t\\ttry:\\n\\t\\t\\tfreqf[i - 1] = True\\n\\t\\texcept:\\n\\t\\t\\tpass\\n\\tfor i in l:\\n\\t\\ttry:\\n\\t\\t\\tfreql[i - 1] = True\\n\\t\\texcept:\\n\\t\\t\\tpass\\n\\tfor i in freqf:\\n\\t\\tif not i:\\n\\t\\t\\treturn False\\n\\tfor i in freql:\\n\\t\\tif not i:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = [int(s) for s in input().split()]\\n\\tmax = 0\\n\\tfor i in arr:\\n\\t\\tif i > max:\\n\\t\\t\\tmax = i\\n\\tcount = 0\\n\\tans = ''\\n\\tif check(arr, max):\\n\\t\\tcount += 1\\n\\t\\tans += str(max) + ' ' + str(n - max) + '\\\\n'\\n\\tif max != n - max and check(arr, n - max):\\n\\t\\tcount += 1\\n\\t\\tans += str(n - max) + ' ' + str(max) + '\\\\n'\\n\\tprint(count)\\n\\tprint(ans, end='')\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\t(d, c, f, g) = ([], [], [], [])\\n\\tfor i in range(max(a)):\\n\\t\\td.append(a[i])\\n\\tfor j in range(max(a), n):\\n\\t\\tc.append(a[j])\\n\\td = list(set(d))\\n\\tc = list(set(c))\\n\\tfor i in range(len(c)):\\n\\t\\tf.append(a[i])\\n\\tfor j in range(len(c), n):\\n\\t\\tg.append(a[j])\\n\\tf = list(set(f))\\n\\tg = list(set(g))\\n\\tr = 0\\n\\tif max(d) == len(d) and max(c) == len(c) and (len(c) + len(d) == n):\\n\\t\\tr = 1\\n\\t\\tif len(d) == len(c):\\n\\t\\t\\tr = 4\\n\\tif max(f) == len(f) and max(g) == len(g) and (len(f) + len(g) == n):\\n\\t\\tif r == 1:\\n\\t\\t\\tr = 2\\n\\t\\telse:\\n\\t\\t\\tr = 3\\n\\tif r == 0:\\n\\t\\tprint(0)\\n\\telif r == 4:\\n\\t\\tprint(1)\\n\\t\\tprint(len(d, len(c)))\\n\\telif r == 3:\\n\\t\\tprint(1)\\n\\t\\tprint(len(f), len(g))\\n\\telif r == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(len(d), len(c))\\n\\telif r == 2:\\n\\t\\tprint(2)\\n\\t\\tprint(len(d), len(c))\\n\\t\\tprint(len(c), len(d))\\n\", \"tc = int(input())\\nfor _ in range(int(tc)):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\td = []\\n\\tif set(a[:mx]) == set(range(1, mx + 1)) and set(a[mx:n]) == set(range(1, n - mx + 1)):\\n\\t\\td.append(mx)\\n\\tif set(a[:n - mx]) == set(range(1, n - mx + 1)) and set(a[n - mx:n]) == set(range(1, mx + 1)):\\n\\t\\td.append(n - mx)\\n\\td = set(d)\\n\\tprint(len(d))\\n\\tfor i in d:\\n\\t\\tprint(i, n - i)\\n\", \"T = int(input())\\nn = [0] * T\\nns = [0] * T\\nfor t in range(T):\\n\\tn[t] = int(input())\\n\\tns[t] = [int(i) for i in input().split(' ')]\\n\\ndef check(l):\\n\\tif len(l) == len(set(l)) and min(l) == 1 and (max(l) == len(l)):\\n\\t\\treturn True\\n\\treturn False\\nfor t in range(T):\\n\\tans = []\\n\\tn1 = len(set(ns[t]))\\n\\tif check(ns[t][:n1]) and check(ns[t][n1:]):\\n\\t\\tans.append((n1, n[t] - n1))\\n\\tif check(ns[t][:n[t] - n1]) and check(ns[t][n[t] - n1:]):\\n\\t\\tans.append((n[t] - n1, n1))\\n\\tans = set(ans)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"import math\\n\\ndef quadratic(a, b, c):\\n\\tif a == 0:\\n\\t\\treturn (int(-c / b), int(-c / b))\\n\\telif b * b - 4 * a * c < 0:\\n\\t\\traise Exception\\n\\telif b * b - 4 * a * c == 0:\\n\\t\\treturn (int(-b / (2 * a)), int(-b / (2 * a)))\\n\\telse:\\n\\t\\treturn (int((-b - math.sqrt(b * b - 4 * a * c)) / (2 * a)), int((-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)))\\n\\ndef check(arr):\\n\\tarr.sort()\\n\\tfor (i, val) in enumerate(arr):\\n\\t\\tif i == val - 1:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = int(input().strip())\\nfor _ in range(t):\\n\\tn = int(input().strip())\\n\\ta = [int(_) for _ in input().strip().split()]\\n\\ttry:\\n\\t\\t(l1, l2) = quadratic(2, -2 * n, n * n + n - 2 * sum(a))\\n\\t\\tif l1 == 0 or l2 == 0 or l1 + l2 != n:\\n\\t\\t\\tprint(0)\\n\\t\\telif l1 != l2:\\n\\t\\t\\tflag0 = check(a[:l1]) and check(a[l1:])\\n\\t\\t\\tflag1 = check(a[:l2]) and check(a[l2:])\\n\\t\\t\\tif flag0 and flag1:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\t\\t\\tprint(l2, l1)\\n\\t\\t\\telif flag0:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\t\\telif flag1:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l2, l1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tflag0 = check(a[:l1]) and check(a[l1:])\\n\\t\\t\\tif flag0:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\texcept Exception as e:\\n\\t\\tprint(0)\\n\", \"R = lambda : map(int, input().split())\\nt = int(input())\\n\\ndef check(a):\\n\\tn = len(a)\\n\\tb = [0] * (n + 1)\\n\\tfor x in a:\\n\\t\\tif x > n or 1 > x:\\n\\t\\t\\treturn False\\n\\t\\tb[x] = 1\\n\\treturn sum(b) == n\\n\\ndef solve(a, n):\\n\\tb = [0] * n\\n\\tfor x in a:\\n\\t\\tb[x] += 1\\n\\tif 2 not in b:\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tif 1 not in b:\\n\\t\\tif n % 2:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\telif b[1:n // 2 + 1] != [2] * (n // 2):\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\telse:\\n\\t\\t\\tz1 = check(a[:n // 2])\\n\\t\\t\\tz2 = check(a[n // 2:])\\n\\t\\t\\tprint(int(z1 and z2))\\n\\t\\t\\tif z1 and z2:\\n\\t\\t\\t\\tprint(n // 2, n // 2)\\n\\t\\t\\treturn\\n\\tfirst = b.index(1)\\n\\tif first < 2:\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tif b[1:first] != [2] * (first - 1) or b[first:n - first + 2] != [1] * (n - 2 * first + 2):\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tz1 = check(a[:first - 1]) and check(a[first - 1:])\\n\\tz2 = check(a[1 - first:]) and check(a[1 - first:])\\n\\tprint(int(z1) + int(z2))\\n\\tif z1:\\n\\t\\tprint(first - 1, n - first + 1)\\n\\tif z2:\\n\\t\\tprint(n - first + 1, first - 1)\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(R())\\n\\tsolve(a, n)\\n\", \"for _ in [0] * int(input()):\\n\\ta = int(input())\\n\\tb = list(map(int, input().split()))\\n\\tz = max(b)\\n\\td = []\\n\\tfor i in range(2):\\n\\t\\tif set(b[:z]) == set(range(1, z + 1)) and set(b[z:]) == set(range(1, a - z + 1)):\\n\\t\\t\\td.append(z)\\n\\t\\tz = a - z\\n\\td = set(d)\\n\\tprint(len(d))\\n\\tfor i in d:\\n\\t\\tprint(i, a - i)\\n\", \"def check(l, i, j):\\n\\tr = [0] * (j - i + 1)\\n\\ttry:\\n\\t\\tfor x in range(j - i + 1):\\n\\t\\t\\tif r[l[x + i] - 1] == 0:\\n\\t\\t\\t\\tr[l[x + i] - 1] = l[x + i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn False\\n\\texcept:\\n\\t\\treturn False\\n\\treturn True\\n\\ndef sol(l):\\n\\tM = max(l)\\n\\tm = len(l) - M\\n\\tr = 0\\n\\tif check(l, 0, m - 1) and check(l, m, len(l) - 1):\\n\\t\\tr += 1\\n\\tif check(l, 0, M - 1) and check(l, M, len(l) - 1):\\n\\t\\tr += 2\\n\\tif r == 0:\\n\\t\\tprint(0)\\n\\telif r == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(m, M)\\n\\telif r == 2:\\n\\t\\tprint(1)\\n\\t\\tprint(M, m)\\n\\telif r == 3:\\n\\t\\tif m != M:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(m, M)\\n\\t\\t\\tprint(M, m)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, M)\\nt = int(input())\\nfor _ in range(t):\\n\\tlength = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tsol(l)\\n\", \"import sys\\nread = sys.stdin.buffer.readline\\nfor _ in range(int(read())):\\n\\tn = int(read())\\n\\ta = list(map(int, read().split()))\\n\\tans = set()\\n\\tmx = max(a)\\n\\tfor i in range(2):\\n\\t\\tif set(a[:mx]) == set(range(1, mx + 1)) and set(a[mx:]) == set(range(1, n - mx + 1)):\\n\\t\\t\\tans.add(mx)\\n\\t\\tmx = n - mx\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i, n - i)\\n\", \"from collections import Counter\\nfor _ in range(int(input())):\\n\\t_ = input()\\n\\ta = list(map(int, input().split()))\\n\\tma = max(a)\\n\\tmai = len(a) - ma\\n\\tans = []\\n\\tif set(a[:ma]) == set(range(1, ma + 1)) and set(a[ma:]) == set(range(1, mai + 1)):\\n\\t\\tans.append([ma, mai])\\n\\tif set(a[:mai]) == set(range(1, mai + 1)) and set(a[mai:]) == set(range(1, ma + 1)) and (ma != mai):\\n\\t\\tans.append([mai, ma])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(' '.join(list(map(str, i))))\\n\", \"def fun1(l):\\n\\tif len(l) == 0:\\n\\t\\treturn 0\\n\\tflag1 = False\\n\\tmx = max(l)\\n\\tn = len(l)\\n\\ts = [0 for i in range(mx)]\\n\\tfor i in range(n):\\n\\t\\tif s[l[i] - 1] == 0:\\n\\t\\t\\ts[l[i] - 1] = 1\\n\\t\\telse:\\n\\t\\t\\tflag1 = False\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tif min(s) != 0:\\n\\t\\t\\tflag1 = True\\n\\tif flag1:\\n\\t\\treturn mx\\n\\treturn 0\\nimport sys\\nfrom collections import Counter\\nfrom copy import deepcopy\\nfor t in range(int(sys.stdin.readline().strip())):\\n\\tn = int(sys.stdin.readline().strip())\\n\\tl = [int(j) for j in sys.stdin.readline().split()]\\n\\tsol = []\\n\\td = dict()\\n\\tflag = True\\n\\tfor i in range(n):\\n\\t\\tif l[i] not in d:\\n\\t\\t\\td[l[i]] = i\\n\\t\\telse:\\n\\t\\t\\tflag = False\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tif len(l) == 1 and l[0] == 0:\\n\\t\\t\\tprint(1)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\tif not flag:\\n\\t\\tbrk = i - 1\\n\\t\\tx = fun1(l[:brk + 1])\\n\\t\\ty = fun1(l[brk + 1:])\\n\\t\\tif x != 0 and y != 0:\\n\\t\\t\\tsol.append((x, y))\\n\\t\\tl = l[::-1]\\n\\t\\td = dict()\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif l[i] not in d:\\n\\t\\t\\t\\td[l[i]] = i\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tpass\\n\\t\\tif l[i] in d:\\n\\t\\t\\tbrk = i - 1\\n\\t\\t\\tx = fun1(l[:brk + 1])\\n\\t\\t\\ty = fun1(l[brk + 1:])\\n\\t\\tif x != 0 and y != 0:\\n\\t\\t\\tsol.append((y, x))\\n\\t\\tif len(sol) == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telif len(sol) == 2:\\n\\t\\t\\tif sol[0][0] == sol[1][0] and sol[0][1] == sol[1][1]:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(sol[0][0], sol[0][1])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(len(sol))\\n\\t\\t\\t\\tfor i in range(len(sol)):\\n\\t\\t\\t\\t\\tprint(sol[i][0], sol[i][1])\\n\\t\\telse:\\n\\t\\t\\tprint(len(sol))\\n\\t\\t\\tfor i in range(len(sol)):\\n\\t\\t\\t\\tprint(sol[i][0], sol[i][1])\\n\", \"def f(l):\\n\\tx = set()\\n\\ty = set()\\n\\ti = 0\\n\\twhile True:\\n\\t\\tx.add(l[i])\\n\\t\\tif len(x) != i + 1:\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\ty = set(l[i:])\\n\\treturn (x, y, i)\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tans = []\\n\\t(x, y, i) = f(l)\\n\\tif len(y) == max(y) == n - i and len(x) == max(x):\\n\\t\\tans.append([len(x), n - len(x)])\\n\\tl.reverse()\\n\\t(x, y, i) = f(l)\\n\\tif len(y) == max(y) == n - i and len(x) == max(x):\\n\\t\\tans.append([n - len(x), len(x)])\\n\\tif len(ans) == 2:\\n\\t\\tif ans[0] == ans[1]:\\n\\t\\t\\tans.pop()\\n\\tprint(len(ans))\\n\\tif len(ans):\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(*i)\\n\", \"I = input\\npr = print\\n\\ndef main():\\n\\tfor _ in range(int(I())):\\n\\t\\tn = int(I())\\n\\t\\tar = list(map(int, I().split()))\\n\\t\\ti = max(ar)\\n\\t\\td = []\\n\\t\\tfor c in range(2):\\n\\t\\t\\tif set(ar[:i]) == set(range(1, i + 1)) and set(ar[i:]) == set(range(1, n - i + 1)):\\n\\t\\t\\t\\td.append(i)\\n\\t\\t\\ti = n - i\\n\\t\\td = set(d)\\n\\t\\tpr(len(d))\\n\\t\\tfor x in d:\\n\\t\\t\\tpr(x, n - x)\\nmain()\\n\", \"from __future__ import division, print_function\\nfrom fractions import Fraction\\nimport sys\\nimport os\\nfrom io import BytesIO, IOBase\\nfrom itertools import *\\nimport bisect\\nfrom heapq import *\\nfrom math import *\\nfrom copy import *\\nfrom collections import deque\\nfrom collections import Counter as counter\\nfrom itertools import combinations as comb\\nfrom itertools import permutations as permutate\\nfrom bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\nfrom types import GeneratorType\\n\\ndef iterative(f, stack=[]):\\n\\n\\tdef wrapped_func(*args, **kwargs):\\n\\t\\tif stack:\\n\\t\\t\\treturn f(*args, **kwargs)\\n\\t\\tto = f(*args, **kwargs)\\n\\t\\twhile True:\\n\\t\\t\\tif type(to) is GeneratorType:\\n\\t\\t\\t\\tstack.append(to)\\n\\t\\t\\t\\tto = next(to)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tstack.pop()\\n\\t\\t\\tif not stack:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tto = stack[-1].send(to)\\n\\t\\treturn to\\n\\treturn wrapped_func\\nmod = 1000000007\\n\\ndef inp():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef out(var):\\n\\tsys.stdout.write(str(var))\\n\\ndef lis():\\n\\treturn list(map(int, inp().split()))\\n\\ndef stringlis():\\n\\treturn list(map(str, inp().split()))\\n\\ndef sep():\\n\\treturn map(int, inp().split())\\n\\ndef strsep():\\n\\treturn map(str, inp().split())\\n\\ndef zerolist(n):\\n\\treturn [0] * n\\n\\ndef nextline():\\n\\tout('\\\\n')\\n\\ndef testcase(t):\\n\\tfor pp in range(t):\\n\\t\\tsolve(pp)\\n\\ndef printlist(a):\\n\\tfor p in range(0, len(a)):\\n\\t\\tout(str(a[p]) + ' ')\\n\\ndef google(p):\\n\\tprint('Case #' + str(p) + ': ', end='')\\n\\ndef lcm(a, b):\\n\\treturn a * b // gcd(a, b)\\n\\ndef power(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef ncr(n, r):\\n\\treturn factorial(n) // (factorial(r) * factorial(max(n - r, 1)))\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\tif n <= 3:\\n\\t\\treturn True\\n\\tif n % 2 == 0 or n % 3 == 0:\\n\\t\\treturn False\\n\\ti = 5\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0 or n % (i + 2) == 0:\\n\\t\\t\\treturn False\\n\\t\\ti = i + 6\\n\\treturn True\\n\\ndef solve(case):\\n\\tn = int(inp())\\n\\ta = lis()\\n\\tleft = {}\\n\\tright = {}\\n\\tcurr = set()\\n\\tmx = 0\\n\\tfor i in range(n):\\n\\t\\tprev = len(curr)\\n\\t\\tcurr.add(a[i])\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tif len(curr) == i + 1 and mx == i + 1:\\n\\t\\t\\tleft[i] = True\\n\\t\\tif prev == len(curr):\\n\\t\\t\\tbreak\\n\\tcurr = set()\\n\\tmx = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tprev = len(curr)\\n\\t\\tcurr.add(a[i])\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tif len(curr) == n - i and mx == n - i:\\n\\t\\t\\tright[i] = True\\n\\t\\tif prev == len(curr):\\n\\t\\t\\tbreak\\n\\tans = []\\n\\tfor i in left:\\n\\t\\tif i + 1 in right:\\n\\t\\t\\tans.append([i + 1, n - (i + 1)])\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(*ans[i])\\ntestcase(int(inp()))\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tT = True\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = max(a)\\n\\tc = a[:b].copy()\\n\\te = a[b:].copy()\\n\\td = a[n - b:].copy()\\n\\tf = a[:n - b].copy()\\n\\tm = 0\\n\\tc.sort()\\n\\te.sort()\\n\\td.sort()\\n\\tf.sort()\\n\\tif b == n / 2:\\n\\t\\tif c == list(range(1, max(c) + 1)) and e == list(range(1, max(e) + 1)):\\n\\t\\t\\tm += 1\\n\\telse:\\n\\t\\tif c == list(range(1, max(c) + 1)) and e == list(range(1, max(e) + 1)):\\n\\t\\t\\tm += 1\\n\\t\\tif d == list(range(1, max(d) + 1)) and f == list(range(1, max(f) + 1)):\\n\\t\\t\\tm += 1\\n\\t\\t\\tT = False\\n\\tprint(m)\\n\\tif m == 2:\\n\\t\\tprint(len(c), len(e))\\n\\t\\tprint(len(f), len(d))\\n\\telif m == 1 and T == True:\\n\\t\\tprint(len(c), len(e))\\n\\telif m == 1 and T == False:\\n\\t\\tprint(len(f), len(d))\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = []\\n\\n\\tdef find(a):\\n\\t\\tseen = set()\\n\\t\\t(mx, mn) = (1, 3 * 10 ** 5)\\n\\t\\tans = []\\n\\t\\tfor i in range(len(a)):\\n\\t\\t\\tmx = max(mx, a[i])\\n\\t\\t\\tmn = min(mn, a[i])\\n\\t\\t\\tseen.add(a[i])\\n\\t\\t\\tif mn == 1 and mn + i == mx and (len(seen) == i + 1):\\n\\t\\t\\t\\tans.append(True)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans.append(False)\\n\\t\\treturn ans\\n\\tans1 = find(a)\\n\\tans2 = find(a[::-1])\\n\\tans2 = ans2[::-1]\\n\\tfor i in range(n - 1):\\n\\t\\tif ans1[i] and ans2[i + 1]:\\n\\t\\t\\tans.append([i + 1, n - (i + 1)])\\n\\tprint(len(ans))\\n\\tfor ent in ans:\\n\\t\\tprint(*ent)\\n\", \"from collections import deque\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tliste = list(map(int, input().split()))\\n\\tvis = [0 for i in range(n)]\\n\\tcan = [0 for i in range(n)]\\n\\tcan2 = [0 for i in range(n)]\\n\\tmaxi = 0\\n\\tfor i in range(1, n):\\n\\t\\tif vis[liste[i - 1]]:\\n\\t\\t\\tbreak\\n\\t\\tvis[liste[i - 1]] = 1\\n\\t\\tmaxi = max(maxi, liste[i - 1])\\n\\t\\tif maxi == i:\\n\\t\\t\\tcan[maxi] = 1\\n\\tliste = liste[::-1]\\n\\tmaxi = 0\\n\\tvis = [0 for i in range(n)]\\n\\tfor i in range(1, n):\\n\\t\\tif vis[liste[i - 1]]:\\n\\t\\t\\tbreak\\n\\t\\tvis[liste[i - 1]] = 1\\n\\t\\tmaxi = max(maxi, liste[i - 1])\\n\\t\\tif maxi == i:\\n\\t\\t\\tcan2[maxi] = 1\\n\\tcount = 0\\n\\tfor i in range(1, n):\\n\\t\\tif can[i] and can2[n - i]:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\n\\tfor i in range(1, n):\\n\\t\\tif can[i] and can2[n - i]:\\n\\t\\t\\tprint(i, n - i)\\n\", \"def solve(seq, n):\\n\\tvisited = [0 for i in range(n)]\\n\\tfor (i, val) in enumerate(seq):\\n\\t\\tvisited[val - 1] += 1\\n\\t\\tif visited[val - 1] == 2:\\n\\t\\t\\tfor j in range(i):\\n\\t\\t\\t\\tif visited[j] == 0:\\n\\t\\t\\t\\t\\treturn 0\\n\\t\\t\\tvisited = [0 for i in range(n)]\\n\\t\\t\\tfor val2 in seq[i:]:\\n\\t\\t\\t\\tvisited[val2 - 1] += 1\\n\\t\\t\\tfor j in range(n - i):\\n\\t\\t\\t\\tif visited[j] == 0:\\n\\t\\t\\t\\t\\treturn 0\\n\\t\\t\\treturn i\\n\\treturn 0\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tseq = [int(x) for x in input().split()]\\n\\tans1 = solve(seq, n)\\n\\tans2 = solve(seq[::-1], n)\\n\\tif ans1 != 0 and ans2 != 0 and (ans1 != n - ans2):\\n\\t\\tprint(2)\\n\\t\\tprint(ans1, n - ans1)\\n\\t\\tprint(n - ans2, ans2)\\n\\telif ans1 != 0:\\n\\t\\tprint(1)\\n\\t\\tprint(ans1, n - ans1)\\n\\telif ans2 != 0:\\n\\t\\tprint(1)\\n\\t\\tprint(n - ans2, ans2)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import math, sys\\nfrom sys import stdin, stdout\\nfrom collections import Counter, defaultdict, deque\\ninput = stdin.readline\\nI = lambda : int(input())\\nli = lambda : list(map(int, input().split()))\\n\\ndef case():\\n\\tn = I()\\n\\ta = li()\\n\\td = defaultdict(int)\\n\\tpre = [0] * n\\n\\tc = 1\\n\\tans = []\\n\\tk = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] == c:\\n\\t\\t\\tpre[i] = 1\\n\\t\\t\\td[a[i]] = 1\\n\\t\\t\\twhile c in d:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\tif c - 1 == i + 1:\\n\\t\\t\\t\\tans.append(i + 1)\\n\\t\\t\\t\\tk = i\\n\\t\\telse:\\n\\t\\t\\td[a[i]] == 1\\n\\tb = a.copy()\\n\\treq = ans.copy()\\n\\ta = a[::-1]\\n\\td = defaultdict(int)\\n\\tpre = [0] * n\\n\\tc = 1\\n\\tans = []\\n\\tk = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] == c:\\n\\t\\t\\tpre[i] = 1\\n\\t\\t\\td[a[i]] = 1\\n\\t\\t\\twhile c in d:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\tif c - 1 == i + 1:\\n\\t\\t\\t\\tans.append(i + 1)\\n\\t\\t\\t\\tk = i\\n\\t\\telse:\\n\\t\\t\\td[a[i]] == 1\\n\\ti = 0\\n\\tj = 0\\n\\tpink = []\\n\\tc = Counter(req)\\n\\td = Counter(ans)\\n\\tfor i in c:\\n\\t\\tif n - i in d:\\n\\t\\t\\tpink.append([i, n - i])\\n\\tprint(len(pink))\\n\\tfor i in pink:\\n\\t\\tprint(*i)\\nfor _ in range(int(input())):\\n\\tcase()\\n\", \"t = int(input())\\nfor _ in range(0, t):\\n\\tn = int(input())\\n\\taa = [int(i) for i in input().split()]\\n\\tmaxi = max(aa)\\n\\tans = []\\n\\tif sorted(aa[:maxi]) == [int(i) for i in range(1, maxi + 1)] and sorted(aa[maxi:]) == [int(i) for i in range(1, n - maxi + 1)]:\\n\\t\\tans.append((maxi, n - maxi))\\n\\taa = aa[::-1]\\n\\tif sorted(aa[:maxi]) == [int(i) for i in range(1, maxi + 1)] and sorted(aa[maxi:]) == [int(i) for i in range(1, n - maxi + 1)] and (len(aa) != 2 * maxi):\\n\\t\\tans.append((n - maxi, maxi))\\n\\tif len(ans):\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(*i)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import sys\\nimport bisect\\nfrom collections import deque\\nRI = lambda : [int(x) for x in sys.stdin.readline().split()]\\nri = lambda : sys.stdin.readline().strip()\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef list3d(a, b, c, d):\\n\\treturn [[[d] * c for j in range(b)] for i in range(a)]\\n\\ndef list4d(a, b, c, d, e):\\n\\treturn [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\n\\ndef ceil(x, y=1):\\n\\treturn int(-(-x // y))\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST(N=None):\\n\\treturn list(MAP()) if N is None else [INT() for i in range(N)]\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\nfor _ in range(int(ri())):\\n\\tn = int(ri())\\n\\ta = RI()\\n\\tdic = {}\\n\\tcnt = 0\\n\\tmaxx = -1\\n\\tlis = []\\n\\tbool1 = [False] * n\\n\\tbool2 = [False] * n\\n\\tfor i in range(len(a)):\\n\\t\\tif a[i] not in dic:\\n\\t\\t\\tdic[a[i]] = 1\\n\\t\\t\\tif maxx == -1:\\n\\t\\t\\t\\tmaxx = a[i]\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\telif a[i] < maxx:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmaxx = a[i]\\n\\t\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif maxx == cnt:\\n\\t\\t\\tbool1[i] = True\\n\\t\\t\\tlis.append(i)\\n\\tdic = {}\\n\\tcnt = 0\\n\\tmaxx = -1\\n\\tfor i in range(len(a) - 1, -1, -1):\\n\\t\\tif a[i] not in dic:\\n\\t\\t\\tdic[a[i]] = 1\\n\\t\\t\\tif maxx == -1:\\n\\t\\t\\t\\tmaxx = a[i]\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\telif a[i] < maxx:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmaxx = a[i]\\n\\t\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif maxx == cnt:\\n\\t\\t\\tbool2[i] = True\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif bool1[i] and bool2[i + 1]:\\n\\t\\t\\tans.append([i + 1, n - (i + 1)])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"import sys\\nimport collections\\ninput = sys.stdin.readline\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tN = int(input())\\n\\t\\tA = [int(x) for x in input().split()]\\n\\t\\tbefore = [0] * (N + 1)\\n\\t\\tbeforeset = set()\\n\\t\\tma = 0\\n\\t\\tf = False\\n\\t\\tfor (i, a) in enumerate(A):\\n\\t\\t\\tif a == 1:\\n\\t\\t\\t\\tf = True\\n\\t\\t\\tma = max(a, ma)\\n\\t\\t\\tbeforeset.add(a)\\n\\t\\t\\tif ma == i + 1 and f and (len(beforeset) == i + 1):\\n\\t\\t\\t\\tbefore[i + 1] = 1\\n\\t\\tafter = [0] * (N + 1)\\n\\t\\tafterset = set()\\n\\t\\tma = 0\\n\\t\\tf = False\\n\\t\\tfor (i, a) in enumerate(A[::-1]):\\n\\t\\t\\tif a == 1:\\n\\t\\t\\t\\tf = True\\n\\t\\t\\tma = max(a, ma)\\n\\t\\t\\tafterset.add(a)\\n\\t\\t\\tif ma == i + 1 and f and (len(afterset) == i + 1):\\n\\t\\t\\t\\tafter[N - i] = 1\\n\\t\\tans = 0\\n\\t\\tlans = []\\n\\t\\tfor i in range(1, N):\\n\\t\\t\\tif before[i] == 1 and after[i + 1] == 1:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tlans.append([i, N - i])\\n\\t\\tif ans == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(ans)\\n\\t\\t\\tfor a in lans:\\n\\t\\t\\t\\tprint(*a)\\nmain()\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tc = 0\\n\\tm1 = max(a)\\n\\ttem = []\\n\\tfor j in range(1, m1 + 1):\\n\\t\\ttem.append(j)\\n\\tp11 = a[:m1]\\n\\tp12 = a[m1:]\\n\\tp21 = a[:n - m1]\\n\\tp22 = a[n - m1:]\\n\\tsolutions = []\\n\\tif sorted(p11) == tem[:m1] and sorted(p12) == tem[:n - m1] and (n != m1):\\n\\t\\tc += 1\\n\\t\\tsolutions.append([m1, n - m1])\\n\\tif sorted(p21) == tem[:n - m1] and sorted(p22) == tem[:m1] and (n != m1) and (m1 != n - m1):\\n\\t\\tc += 1\\n\\t\\tsolutions.append([n - m1, m1])\\n\\tprint(c)\\n\\tfor j in solutions:\\n\\t\\tprint(j[0], end=' ')\\n\\t\\tprint(j[1])\\n\", \"def main():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\t(x1, x2, k) = (sum(a), 0, 0)\\n\\t\\tl = []\\n\\t\\ts1 = set()\\n\\t\\ts2 = set(a)\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif x1 - a[i] == (n - i - 1) * (n - i) // 2 and x2 + a[i] == (i + 1) * (i + 2) // 2 and (i != n - 1) and (set(a[:i + 1]).__len__() == i + 1) and (set(a[i + 1:]).__len__() == n - i - 1):\\n\\t\\t\\t\\tl.append([i + 1, n - i - 1])\\n\\t\\t\\t\\tk += 1\\n\\t\\t\\tx1 -= a[i]\\n\\t\\t\\tx2 += a[i]\\n\\t\\tprint(k)\\n\\t\\tfor i in range(k):\\n\\t\\t\\tprint(l[i][0], l[i][1])\\nmain()\\n\", \"def n_perm(arr, n):\\n\\ttemp = [0] * (n + 1)\\n\\tfor i in range(n):\\n\\t\\tif arr[i] > n:\\n\\t\\t\\treturn False\\n\\t\\tif temp[arr[i]] == 1:\\n\\t\\t\\treturn False\\n\\t\\ttemp[arr[i]] = 1\\n\\treturn True\\n\\ndef help():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split(' ')))\\n\\tarr1 = [0] * n\\n\\tdone = 0\\n\\ti = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] >= n:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\tarr1[arr[i]] += 1\\n\\tdone = 0\\n\\tfor i in range(n):\\n\\t\\tif i > 1 and arr1[i] > arr1[i - 1]:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\tif arr1[i] == 2:\\n\\t\\t\\tdone += 1\\n\\t\\tif arr1[i] > 2:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\tans = 0\\n\\too = False\\n\\tob = False\\n\\tif n_perm(arr[:done], done) and n_perm(arr[done:], n - done):\\n\\t\\too = True\\n\\t\\tans += 1\\n\\tif done == n - done:\\n\\t\\tprint(ans)\\n\\t\\tif oo:\\n\\t\\t\\tprint(done, n - done)\\n\\t\\treturn\\n\\tif n_perm(arr[:n - done], n - done) and n_perm(arr[n - done:], done):\\n\\t\\tob = True\\n\\t\\tans += 1\\n\\tprint(ans)\\n\\tif oo:\\n\\t\\tprint(done, n - done)\\n\\tif ob:\\n\\t\\tprint(n - done, done)\\nfor qw in range(int(input())):\\n\\thelp()\\n\", \"def solve(arr):\\n\\tans = []\\n\\tans_left = [False for i in range(len(arr))]\\n\\tans_right = [False for i in range(len(arr))]\\n\\ttotalSum = sum(arr)\\n\\tpartial_sum = 0\\n\\tisPresent = [0 for i in range(0, len(arr) + 1)]\\n\\tfor i in range(1, len(arr) + 1):\\n\\t\\tif arr[i - 1] < len(isPresent) and isPresent[arr[i - 1]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tisPresent[arr[i - 1]] = 1\\n\\t\\tpartial_sum += arr[i - 1]\\n\\t\\tif partial_sum == i * (i + 1) // 2:\\n\\t\\t\\tans_left[i - 1] = True\\n\\tpartial_sum = 0\\n\\tisPresent = [0 for i in range(0, len(arr) + 1)]\\n\\tfor i in range(1, len(arr) + 1):\\n\\t\\tind = len(arr) - i\\n\\t\\tif arr[ind] < len(isPresent) and isPresent[arr[ind]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tisPresent[arr[ind]] = 1\\n\\t\\tpartial_sum += arr[ind]\\n\\t\\tif partial_sum == i * (i + 1) // 2:\\n\\t\\t\\tans_right[ind] = True\\n\\tif ans_right[0] == True:\\n\\t\\tans.append([0, len(arr)])\\n\\t\\tans.append([0, len(arr)])\\n\\tfor i in range(0, len(arr) - 1):\\n\\t\\tif ans_left[i] == True and ans_right[i + 1] == True:\\n\\t\\t\\tans.append([i + 1, len(arr) - i - 1])\\n\\tprint(len(ans))\\n\\tfor lt in ans:\\n\\t\\tprint(' '.join(list(map(lambda x: str(x), lt))))\\nt = int(input())\\nfor i in range(0, t):\\n\\tinput()\\n\\tarr = list(map(lambda x: int(x), input().split()))\\n\\tsolve(arr)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td = {}\\n\\td2 = {}\\n\\tf = 0\\n\\tf1 = 0\\n\\tans = []\\n\\tfor i in range(n):\\n\\t\\tif f == 0:\\n\\t\\t\\ttry:\\n\\t\\t\\t\\td[a[i]] += 1\\n\\t\\t\\texcept:\\n\\t\\t\\t\\td[a[i]] = 1\\n\\t\\t\\tif d[a[i]] == 2:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\td[a[i]] = 1\\n\\t\\t\\t\\td2[a[i]] = 1\\n\\t\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\ttry:\\n\\t\\t\\t\\td2[a[i]] += 1\\n\\t\\t\\texcept:\\n\\t\\t\\t\\td2[a[i]] = 1\\n\\t\\t\\tif d2[a[i]] == 2:\\n\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\tbreak\\n\\tfor i in range(1, len(d) + 1):\\n\\t\\ttry:\\n\\t\\t\\tif d[i] != 1:\\n\\t\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tf1 = 1\\n\\t\\t\\tbreak\\n\\tfor i in range(1, len(d2) + 1):\\n\\t\\ttry:\\n\\t\\t\\tif d2[i] != 1:\\n\\t\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tf1 = 1\\n\\t\\t\\tbreak\\n\\tif f1 == 0:\\n\\t\\tans.append((len(d), len(d2)))\\n\\ta = a[::-1]\\n\\td = {}\\n\\td2 = {}\\n\\tf = 0\\n\\tf1 = 0\\n\\tfor i in range(n):\\n\\t\\tif f == 0:\\n\\t\\t\\ttry:\\n\\t\\t\\t\\td[a[i]] += 1\\n\\t\\t\\texcept:\\n\\t\\t\\t\\td[a[i]] = 1\\n\\t\\t\\tif d[a[i]] == 2:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\td[a[i]] = 1\\n\\t\\t\\t\\td2[a[i]] = 1\\n\\t\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\ttry:\\n\\t\\t\\t\\td2[a[i]] += 1\\n\\t\\t\\texcept:\\n\\t\\t\\t\\td2[a[i]] = 1\\n\\t\\t\\tif d2[a[i]] == 2:\\n\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\tbreak\\n\\tfor i in range(1, len(d) + 1):\\n\\t\\ttry:\\n\\t\\t\\tif d[i] != 1:\\n\\t\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tf1 = 1\\n\\t\\t\\tbreak\\n\\tfor i in range(1, len(d2) + 1):\\n\\t\\ttry:\\n\\t\\t\\tif d2[i] != 1:\\n\\t\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tf1 = 1\\n\\t\\t\\tbreak\\n\\tif f1 == 0:\\n\\t\\tans.append((len(d2), len(d)))\\n\\tans = list(set(ans))\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"T = int(input())\\n\\ndef check_permute(x):\\n\\tw = len(x)\\n\\treturn set(x) == set([i for i in range(1, w + 1)])\\nfor t in range(T):\\n\\tn = int(input())\\n\\tA = [int(i) for i in input().split()]\\n\\tmax_A = max(A)\\n\\tans_count = 0\\n\\tcase1 = False\\n\\tcase2 = False\\n\\tif check_permute(A[:max_A]) and check_permute(A[max_A:]):\\n\\t\\tcase1 = True\\n\\t\\tans_count += 1\\n\\tif check_permute(A[:n - max_A]) and check_permute(A[n - max_A:]):\\n\\t\\tcase2 = True\\n\\t\\tans_count += 1\\n\\tif case1 and case2 and ((max_A, n - max_A) == (n - max_A, max_A)):\\n\\t\\tprint(1)\\n\\t\\tprint(max_A, n - max_A)\\n\\telse:\\n\\t\\tprint(ans_count)\\n\\t\\tif case1:\\n\\t\\t\\tprint(max_A, n - max_A)\\n\\t\\tif case2:\\n\\t\\t\\tprint(n - max_A, max_A)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ts = set()\\n\\t(ans, mx) = (set(), 0)\\n\\t(pre, suf) = ([], [])\\n\\tfor i in range(n):\\n\\t\\tmx = max(mx, a[i])\\n\\t\\ts.add(a[i])\\n\\t\\tpre.append(mx == len(s) == i + 1)\\n\\tmx = 0\\n\\ts = set()\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tmx = max(mx, a[i])\\n\\t\\ts.add(a[i])\\n\\t\\tsuf.append(mx == len(s) == n - i)\\n\\tsuf = list(reversed(suf))\\n\\tfor i in range(n):\\n\\t\\tif pre[i] and suf[i + 1]:\\n\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\tif ans == []:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i[0], i[1])\\n\", \"from collections import Counter, defaultdict\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tls = list(map(int, input().strip().split()))\\n\\tfreq_dic = Counter(ls)\\n\\tposs_ans = []\\n\\tmaxi = 0\\n\\tf = 0\\n\\tfor (key, val) in freq_dic.items():\\n\\t\\tif val == 3:\\n\\t\\t\\tf = 3\\n\\t\\t\\tbreak\\n\\t\\tif val == 2:\\n\\t\\t\\tif key > maxi:\\n\\t\\t\\t\\tmaxi = key\\n\\tif f == 3:\\n\\t\\tprint('0')\\n\\telse:\\n\\t\\tc = 0\\n\\t\\tans = []\\n\\t\\tdic = defaultdict(int)\\n\\t\\tif True:\\n\\t\\t\\tf1 = Counter(ls[:maxi])\\n\\t\\t\\tf2 = Counter(ls[maxi:])\\n\\t\\t\\tf = 0\\n\\t\\t\\tfor i in range(1, maxi + 1):\\n\\t\\t\\t\\tif f1[i] != 1:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 0:\\n\\t\\t\\t\\tfor i in range(1, n - maxi + 1):\\n\\t\\t\\t\\t\\tif f2[i] != 1:\\n\\t\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 0:\\n\\t\\t\\t\\tif maxi == n - maxi:\\n\\t\\t\\t\\t\\tif (maxi, n - maxi) not in dic:\\n\\t\\t\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\t\\t\\tdic[maxi, n - maxi] = 1\\n\\t\\t\\t\\t\\t\\tans.append(maxi)\\n\\t\\t\\t\\t\\t\\tans.append(n - maxi)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\t\\tdic[maxi, n - maxi] = 1\\n\\t\\t\\t\\t\\tans.append(maxi)\\n\\t\\t\\t\\t\\tans.append(n - maxi)\\n\\t\\t\\tf1 = Counter(ls[:n - maxi])\\n\\t\\t\\tf2 = Counter(ls[n - maxi:])\\n\\t\\t\\tf = 0\\n\\t\\t\\tfor i in range(1, n - maxi + 1):\\n\\t\\t\\t\\tif f1[i] != 1:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 0:\\n\\t\\t\\t\\tfor i in range(1, maxi + 1):\\n\\t\\t\\t\\t\\tif f2[i] != 1:\\n\\t\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 0:\\n\\t\\t\\t\\tif maxi == n - maxi:\\n\\t\\t\\t\\t\\tif (maxi, n - maxi) not in dic:\\n\\t\\t\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\t\\t\\tdic[n - maxi, maxi] = 1\\n\\t\\t\\t\\t\\t\\tans.append(n - maxi)\\n\\t\\t\\t\\t\\t\\tans.append(maxi)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\t\\tdic[n - maxi, maxi] = 1\\n\\t\\t\\t\\t\\tans.append(n - maxi)\\n\\t\\t\\t\\t\\tans.append(maxi)\\n\\t\\tprint(c)\\n\\t\\tif c > 0:\\n\\t\\t\\tfor i in range(0, len(ans), 2):\\n\\t\\t\\t\\tprint(ans[i], ans[i + 1])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tm = max(l)\\n\\ts = set(l)\\n\\tif m == len(s):\\n\\t\\ta1 = l[:n - m]\\n\\t\\ta2 = l[n - m:]\\n\\t\\ta3 = l[:m]\\n\\t\\ta4 = l[m:]\\n\\t\\ts1 = set(a1)\\n\\t\\ts2 = set(a2)\\n\\t\\ts3 = set(a3)\\n\\t\\ts4 = set(a4)\\n\\t\\tf1 = False\\n\\t\\tf2 = False\\n\\t\\tif len(s1) == max(a1) and len(s2) == max(a2) and (max(a1) == n - m) and (max(a2) == m):\\n\\t\\t\\tf1 = True\\n\\t\\tif len(s3) == max(a3) and len(s4) == max(a4) and (max(a3) == m) and (max(a4) == n - m):\\n\\t\\t\\tf2 = True\\n\\t\\tif f1 == True and f2 == True:\\n\\t\\t\\tif n - m != m:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(n - m, m)\\n\\t\\t\\t\\tprint(m, n - m)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(n - m, m)\\n\\t\\telif f1 == True:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - m, m)\\n\\t\\telif f2 == True:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, n - m)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tm = max(a)\\n\\tr = 1\\n\\tr1 = 1\\n\\tl = sorted(a[:n - m])\\n\\te = sorted(a[n - m:])\\n\\tl1 = sorted(a[:m])\\n\\te1 = sorted(a[m:])\\n\\tfor i in range(len(l)):\\n\\t\\tif l[i] != i + 1:\\n\\t\\t\\tr = 0\\n\\t\\t\\tbreak\\n\\tfor i in range(len(e)):\\n\\t\\tif e[i] != i + 1:\\n\\t\\t\\tr = 0\\n\\t\\t\\tbreak\\n\\tfor i in range(len(l1)):\\n\\t\\tif l1[i] != i + 1:\\n\\t\\t\\tr1 = 0\\n\\t\\t\\tbreak\\n\\tfor i in range(len(e1)):\\n\\t\\tif e1[i] != i + 1:\\n\\t\\t\\tr1 = 0\\n\\t\\t\\tbreak\\n\\tif r == 0 and r1 == 0:\\n\\t\\tprint(0)\\n\\telif r == 1 and r1 == 1:\\n\\t\\tif n - m == m:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - m, m)\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(n - m, m)\\n\\t\\t\\tprint(m, n - m)\\n\\telif r == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(n - m, m)\\n\\telse:\\n\\t\\tprint(1)\\n\\t\\tprint(m, n - m)\\n\", \"testCases = int(input())\\nfor _ in range(testCases):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\td = set()\\n\\tfor c in range(2):\\n\\t\\tif set(a[:mx]) == set(range(1, mx + 1)) and set(a[mx:]) == set(range(1, n - mx + 1)):\\n\\t\\t\\td.add(mx)\\n\\t\\tmx = n - mx\\n\\tprint(len(d))\\n\\tfor x in d:\\n\\t\\tprint(x, n - x)\\n\", \"import sys, math, bisect\\ninf = float('inf')\\nmod = 998244353\\n\\ndef lcm(a, b):\\n\\treturn int(a / math.gcd(a, b) * b)\\n\\ndef gcd(a, b):\\n\\treturn int(math.gcd(a, b))\\n\\ndef tobinary(n):\\n\\treturn bin(n)[2:]\\n\\ndef binarySearch(a, x):\\n\\ti = bisect.bisect_left(a, x)\\n\\tif i != len(a) and a[i] == x:\\n\\t\\treturn i\\n\\telse:\\n\\t\\treturn -1\\n\\ndef lowerBound(a, x):\\n\\ti = bisect.bisect_left(a, x)\\n\\tif i:\\n\\t\\treturn i - 1\\n\\telse:\\n\\t\\treturn -1\\n\\ndef upperBound(a, x):\\n\\ti = bisect.bisect_right(a, x)\\n\\tif i != len(a) + 1 and a[i - 1] == x:\\n\\t\\treturn i - 1\\n\\telse:\\n\\t\\treturn -1\\n\\ndef primesInRange(n):\\n\\tans = []\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\tfor p in range(2, n + 1):\\n\\t\\tif prime[p]:\\n\\t\\t\\tans.append(p)\\n\\treturn ans\\n\\ndef primeFactors(n):\\n\\tfactors = []\\n\\twhile n % 2 == 0:\\n\\t\\tfactors.append(2)\\n\\t\\tn = n // 2\\n\\tfor i in range(3, int(math.sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tfactors.append(i)\\n\\t\\t\\tn = n // i\\n\\tif n > 2:\\n\\t\\tfactors.append(n)\\n\\treturn factors\\nfrom collections import deque, defaultdict, Counter\\nimport heapq\\n\\ndef check(a):\\n\\ta.sort()\\n\\tb = [i + 1 for i in range(len(a))]\\n\\tif a == b:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = max(a)\\n\\tc = []\\n\\tif check(a[:b]) and check(a[b:]):\\n\\t\\tc.append((b, n - b))\\n\\tif check(a[:n - b]) and check(a[n - b:]):\\n\\t\\tc.append((n - b, b))\\n\\tc = list(set(c))\\n\\tprint(len(c))\\n\\tfor i in c:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tsol = []\\n\\tma = max(l)\\n\\tflag1 = False\\n\\tflag2 = False\\n\\ttemp = [0] * ma\\n\\tfor i in range(ma):\\n\\t\\tif l[i] - 1 <= ma - 1:\\n\\t\\t\\ttemp[l[i] - 1] = 1\\n\\tif 0 not in temp:\\n\\t\\tflag1 = True\\n\\ttemp = [0] * (n - ma)\\n\\tfor i in range(n - ma):\\n\\t\\tif l[i + ma] - 1 <= n - ma - 1:\\n\\t\\t\\ttemp[l[i + ma] - 1] = 1\\n\\tif 0 not in temp:\\n\\t\\tflag2 = True\\n\\tif flag1 and flag2:\\n\\t\\tsol.append([ma, n - ma])\\n\\tif ma * 2 != n:\\n\\t\\tflag1 = False\\n\\t\\tflag2 = False\\n\\t\\ttemp = [0] * (n - ma)\\n\\t\\tfor i in range(n - ma):\\n\\t\\t\\tif l[i] - 1 <= n - ma - 1:\\n\\t\\t\\t\\ttemp[l[i] - 1] = 1\\n\\t\\tif 0 not in temp:\\n\\t\\t\\tflag1 = True\\n\\t\\ttemp = [0] * ma\\n\\t\\tfor i in range(ma):\\n\\t\\t\\tif l[n - ma + i] - 1 <= ma - 1:\\n\\t\\t\\t\\ttemp[l[n - ma + i] - 1] = 1\\n\\t\\tif 0 not in temp:\\n\\t\\t\\tflag2 = True\\n\\t\\tif flag1 and flag2:\\n\\t\\t\\tsol.append([n - ma, ma])\\n\\t\\tprint(len(sol))\\n\\t\\tfor i in range(len(sol)):\\n\\t\\t\\tprint(sol[i][0], sol[i][1])\\n\\telse:\\n\\t\\tprint(len(sol))\\n\\t\\tfor i in range(len(sol)):\\n\\t\\t\\tprint(sol[i][0], sol[i][1])\\n\", \"t = int(input())\\nfor tt in range(t):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tmx = max(a)\\n\\tp1 = {*range(1, mx + 1)}\\n\\tp2 = {*range(1, n - mx + 1)}\\n\\tfmx = set(a[:mx])\\n\\tfmi = set(a[:-mx])\\n\\tlmx = set(a[-mx:])\\n\\tlmi = set(a[mx:])\\n\\tans = []\\n\\tif fmx == p1 and lmi == p2:\\n\\t\\tans.append((mx, n - mx))\\n\\tif lmx == p1 and fmi == p2:\\n\\t\\tans.append((n - mx, mx))\\n\\tif n == 2 * mx:\\n\\t\\tprint(min(1, len(ans)))\\n\\t\\tif ans:\\n\\t\\t\\tprint(*ans[0])\\n\\telse:\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor z in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tl = set()\\n\\tr = set()\\n\\tfor i in a:\\n\\t\\tif i not in l:\\n\\t\\t\\tl.add(i)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\ta.reverse()\\n\\tfor i in a:\\n\\t\\tif i not in r:\\n\\t\\t\\tr.add(i)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif max(len(l), len(r)) == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\ta.reverse()\\n\\t\\tf1 = 1\\n\\t\\tf2 = 1\\n\\t\\tfor i in range(1, len(l) + 1):\\n\\t\\t\\tif i not in l:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tlv = set(a[len(l):])\\n\\t\\tfor i in range(1, n - len(l) + 1):\\n\\t\\t\\tif i not in lv:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, len(r) + 1):\\n\\t\\t\\tif i not in r:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\trv = set(a[:n - len(r)])\\n\\t\\tfor i in range(1, n - len(r) + 1):\\n\\t\\t\\tif i not in rv:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif f1 == 1 and f2 == 1:\\n\\t\\t\\tif len(l) + len(r) == n:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(len(l), len(r))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(len(l), n - len(l))\\n\\t\\t\\t\\tprint(n - len(r), len(r))\\n\\t\\telif f1 == 1 and f2 == 0:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(l), n - len(l))\\n\\t\\telif f1 == 0 and f2 == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - len(r), len(r))\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"def find(a):\\n\\tn = len(a)\\n\\t(minn1, minn2, maxx1, maxx2) = ([10 ** 9], [10 ** 9], [0], [0])\\n\\tk = []\\n\\t(f1, f2) = ([], [])\\n\\tk = {}\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in k:\\n\\t\\t\\tk[a[i]] = 'A'\\n\\t\\tif len(k) == i + 1:\\n\\t\\t\\tf1.append(True)\\n\\t\\telse:\\n\\t\\t\\tf1.append(False)\\n\\t\\tminn1.append(min(minn1[-1], a[i]))\\n\\t\\tmaxx1.append(max(maxx1[-1], a[i]))\\n\\ta = a[::-1]\\n\\tkk = {}\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in kk:\\n\\t\\t\\tkk[a[i]] = 'A'\\n\\t\\tif len(kk) == i + 1:\\n\\t\\t\\tf2.append(True)\\n\\t\\telse:\\n\\t\\t\\tf2.append(False)\\n\\t\\tminn2.append(min(minn2[-1], a[i]))\\n\\t\\tmaxx2.append(max(maxx2[-1], a[i]))\\n\\treturn (minn1[1:], minn2[::-1][1:-1], maxx1[1:], maxx2[::-1][1:-1], f1, f2[::-1][1:])\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\t(minf, minb, maxf, maxb, fir, sec) = find(a)\\n\\tf = []\\n\\tfor i in range(n - 1):\\n\\t\\tif minf[i] == 1 and maxf[i] == i + 1 and fir[i] and (minb[i] == 1) and (maxb[i] == n - i - 1) and sec[i]:\\n\\t\\t\\tf.append([i + 1, n - i - 1])\\n\\tif len(f) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(f))\\n\\t\\tfor x in f:\\n\\t\\t\\tprint(x[0], x[1])\\n\", \"R = lambda : map(int, input().split())\\n\\ndef f(a):\\n\\ts = set()\\n\\tmi = 10 ** 9\\n\\tma = 0\\n\\tans = 0\\n\\tfor i in range(len(a) - 1):\\n\\t\\tx = a[i]\\n\\t\\tma = max(ma, x)\\n\\t\\tmi = min(mi, x)\\n\\t\\ts.add(x)\\n\\t\\tif len(s) == i + 1 == ma and mi == 1:\\n\\t\\t\\tans = ma\\n\\tif len(set(a[ans:])) == len(a) - ans == max(a[ans:]):\\n\\t\\treturn ans\\n\\treturn 0\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(R())\\n\\tans = []\\n\\tans1 = f(a)\\n\\tif ans1:\\n\\t\\tans.append(ans1)\\n\\tans2 = f(a[::-1])\\n\\tif ans2 and ans1 + ans2 != n:\\n\\t\\tans.append(n - ans2)\\n\\tprint(len(ans))\\n\\tfor x in ans:\\n\\t\\tprint(x, n - x)\\n\", \"def check1(l):\\n\\tl = sorted(l)\\n\\tfor i in range(len(l)):\\n\\t\\tif l[i] != i + 1:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tan = list(map(int, input().split()))\\n\\tmm = an.index(max(an))\\n\\tmaxx = max(an)\\n\\tworks1 = 0\\n\\tworks2 = 0\\n\\tif check1(an[:maxx]) and check1(an[maxx:]):\\n\\t\\tworks1 = 1\\n\\tif check1(an[:len(an) - maxx]) and check1(an[len(an) - maxx:]) and (not len(an) == maxx * 2):\\n\\t\\tworks2 = 1\\n\\tprint(works1 + works2)\\n\\tif works1 == 1:\\n\\t\\tprint(maxx, len(an) - maxx)\\n\\tif works2 == 1:\\n\\t\\tprint(len(an) - maxx, maxx)\\n\", \"def check(a):\\n\\ta.sort()\\n\\tb = [i + 1 for i in range(len(a))]\\n\\tif b == a:\\n\\t\\treturn 1\\n\\telse:\\n\\t\\treturn 0\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = max(a)\\n\\tc = []\\n\\tif check(a[:b]) and check(a[b:]):\\n\\t\\tc.append((b, n - b))\\n\\tif check(a[:n - b]) and check(a[n - b:]):\\n\\t\\tc.append((n - b, b))\\n\\tc = list(set(c))\\n\\tprint(len(c))\\n\\tfor i in range(len(c)):\\n\\t\\tprint(*c[i])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = max(a)\\n\\tf = []\\n\\tif m >= len(a):\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tl1 = a[:m]\\n\\t\\tl2 = a[m:]\\n\\t\\tif max(l1) == m and len(l1) == len(set(l1)):\\n\\t\\t\\tif max(l2) == n - m and len(l2) == len(set(l2)):\\n\\t\\t\\t\\tf.append([m, n - m])\\n\\t\\tl2 = a[:n - m]\\n\\t\\tl1 = a[n - m:]\\n\\t\\tif max(l1) == m and len(l1) == len(set(l1)):\\n\\t\\t\\tif max(l2) == n - m and len(l2) == len(set(l2)):\\n\\t\\t\\t\\tf.append([n - m, m])\\n\\t\\tif len(f) == 2:\\n\\t\\t\\tif f[0] != f[1]:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(*f[0])\\n\\t\\t\\t\\tprint(*f[1])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(*f[0])\\n\\t\\telse:\\n\\t\\t\\tprint(len(f))\\n\\t\\t\\tfor i in f:\\n\\t\\t\\t\\tprint(*i)\\n\", \"import sys\\nimport math\\n\\ndef alele():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef ilele():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef list3d(a, b, c, d):\\n\\treturn [[[d] * c for j in range(b)] for i in range(a)]\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\nimport bisect\\nINF = 10 ** 18\\nmod = 10 ** 9 + 7\\n\\ndef check(C):\\n\\tC.sort()\\n\\tj = 1\\n\\tfor i in C:\\n\\t\\tif i != j:\\n\\t\\t\\treturn False\\n\\t\\tj += 1\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tA = alele()\\n\\tD = set()\\n\\tmaxi = 0\\n\\tAns = []\\n\\tfor i in range(n):\\n\\t\\tmaxi = max(maxi, A[i])\\n\\t\\tD.add(A[i])\\n\\t\\tif len(D) == i + 1 and maxi == i + 1:\\n\\t\\t\\tif check(A[i + 1:]):\\n\\t\\t\\t\\tAns.append((i + 1, n - i - 1))\\n\\tprint(len(Ans))\\n\\tfor (i, j) in Ans:\\n\\t\\tprint(i, j)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmx = max(l)\\n\\tnum = 0\\n\\ts = []\\n\\tif set(l[0:mx]) == set(range(1, mx + 1)) and set(l[mx:n + 1]) == set(range(1, n - mx + 1)):\\n\\t\\tnum += 1\\n\\t\\ts.append((mx, n - mx))\\n\\tif 2 * mx != n and set(l[n - mx:n]) == set(range(1, mx + 1)) and (set(l[0:n - mx]) == set(range(1, n - mx + 1))):\\n\\t\\tnum += 1\\n\\t\\ts.append((n - mx, mx))\\n\\tif num == 0:\\n\\t\\tprint(num)\\n\\telse:\\n\\t\\tprint(num)\\n\\t\\tfor p in s:\\n\\t\\t\\tprint(*p)\\n\", \"def f(A, n):\\n\\tflag = 0\\n\\td = {}\\n\\ti = 0\\n\\tm = A[0]\\n\\tls = []\\n\\twhile i < n:\\n\\t\\tif A[i] not in d:\\n\\t\\t\\td[A[i]] = 1\\n\\t\\t\\tif A[i] > m:\\n\\t\\t\\t\\tm = A[i]\\n\\t\\t\\ti = i + 1\\n\\t\\telif A[i] in d:\\n\\t\\t\\tif i == m:\\n\\t\\t\\t\\tj = i\\n\\t\\t\\t\\tk = A[j]\\n\\t\\t\\t\\td = {}\\n\\t\\t\\t\\twhile j < n:\\n\\t\\t\\t\\t\\tif A[j] not in d:\\n\\t\\t\\t\\t\\t\\td[A[j]] = 1\\n\\t\\t\\t\\t\\t\\tif A[j] > k:\\n\\t\\t\\t\\t\\t\\t\\tk = A[j]\\n\\t\\t\\t\\t\\t\\tj = j + 1\\n\\t\\t\\t\\t\\telif A[j] in d:\\n\\t\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tif flag == 0:\\n\\t\\t\\t\\t\\tif n - i == k:\\n\\t\\t\\t\\t\\t\\tls.append([i, n - i])\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag == 0:\\n\\t\\treturn ls\\n\\telse:\\n\\t\\treturn False\\nt = int(input())\\nwhile t > 0:\\n\\tt = t - 1\\n\\tn = int(input())\\n\\ta = input()\\n\\tA = list(map(int, list(a.split())))\\n\\tB = A[::-1]\\n\\tif f(A, n) != False:\\n\\t\\tls = f(A, n)\\n\\telse:\\n\\t\\tls = 0\\n\\tif f(B, n) != False:\\n\\t\\tq = f(B, n)\\n\\telse:\\n\\t\\tq = 0\\n\\tif ls != 0 and q != 0:\\n\\t\\tif ls[0][0] != q[0][1]:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(ls[0][0], end=' ')\\n\\t\\t\\tprint(ls[0][1])\\n\\t\\t\\tprint(q[0][1], end=' ')\\n\\t\\t\\tprint(q[0][0])\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(ls[0][0], end=' ')\\n\\t\\t\\tprint(ls[0][1])\\n\\telif ls != 0 and q == 0:\\n\\t\\tprint(1)\\n\\t\\tprint(ls[0][0], end=' ')\\n\\t\\tprint(ls[0][1])\\n\\telif ls == 0 and q != 0:\\n\\t\\tprint(1)\\n\\t\\tprint(q[0][1], end=' ')\\n\\t\\tprint(q[0][0])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"def f(n, a, b=0):\\n\\tsiz = 0\\n\\twas = [0] * n\\n\\tcnt = [0] * n\\n\\tfor x in a:\\n\\t\\tcnt[x] += 1\\n\\t\\tif cnt[x] > 2:\\n\\t\\t\\treturn []\\n\\tcntcnt = [0] * 10\\n\\tfor x in cnt:\\n\\t\\tcntcnt[x] += 1\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tsiz = max(siz, max(a[i], i + 1))\\n\\t\\twas[a[i]] += 1\\n\\t\\tif was[a[i]] == 2:\\n\\t\\t\\tbreak\\n\\t\\tcntcnt[cnt[a[i]]] -= 1\\n\\t\\tcnt[a[i]] -= 1\\n\\t\\tcntcnt[cnt[a[i]]] += 1\\n\\t\\tif cntcnt[2] == 0 and siz == i + 1:\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tans += [(i + 1, n - i - 1)]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans += [(n - i - 1, i + 1)]\\n\\treturn ans\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tx = f(n, a)\\n\\ty = f(n, a[::-1], 1)\\n\\tz = list(set(x) & set(y))\\n\\tprint(len(z))\\n\\tfor i in z:\\n\\t\\tprint(*i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tc = {}\\n\\tfor x in a:\\n\\t\\tc[x] = c.get(x, 0) + 1\\n\\tb = 0\\n\\tfor x in sorted(c):\\n\\t\\tif c[x] == 2:\\n\\t\\t\\tif x == b + 1:\\n\\t\\t\\t\\tb += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\t\\t\\t\\tbreak\\n\\t\\telif c[x] != 1:\\n\\t\\t\\tprint(0)\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tif set(c) == set(range(1, n - b + 1)):\\n\\t\\t\\tv = set()\\n\\t\\t\\tif set(range(1, b + 1)) == set(a[:b]):\\n\\t\\t\\t\\tv.add(b)\\n\\t\\t\\tif set(range(1, n - b + 1)) == set(a[:n - b]):\\n\\t\\t\\t\\tv.add(n - b)\\n\\t\\t\\tprint(len(v))\\n\\t\\t\\tfor x in v:\\n\\t\\t\\t\\tprint(x, n - x)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tcount = 0\\n\\tcountt = 0\\n\\tn = int(input())\\n\\tai = list(map(int, input().split()))\\n\\tmaxim = int(max(ai))\\n\\ta = set(ai[0:maxim])\\n\\tsumma = sum(a)\\n\\tc = set(ai[maxim:n])\\n\\tsummc = sum(c)\\n\\tb = set(ai[n - maxim:n])\\n\\tsummb = sum(b)\\n\\td = set(ai[0:n - maxim])\\n\\tsummd = sum(d)\\n\\tif len(a) == maxim:\\n\\t\\tif summa == len(a) * (len(a) + 1) // 2:\\n\\t\\t\\tif len(c) == n - maxim:\\n\\t\\t\\t\\tif summc == len(c) * (len(c) + 1) // 2:\\n\\t\\t\\t\\t\\tcount += 1\\n\\tif len(b) == maxim:\\n\\t\\tif summb == len(b) * (len(b) + 1) // 2:\\n\\t\\t\\tif len(d) == n - maxim:\\n\\t\\t\\t\\tif summd == len(d) * (len(d) + 1) // 2:\\n\\t\\t\\t\\t\\tcountt += 1\\n\\tif count == 1 and countt == 1:\\n\\t\\tif (len(a), len(c)) != (len(d), len(b)):\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(len(a), len(c))\\n\\t\\t\\tprint(len(d), len(b))\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(a), len(c))\\n\\telif count == 1 and countt != 1:\\n\\t\\tprint(1)\\n\\t\\tprint(len(a), len(c))\\n\\telif count != 1 and countt == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(len(d), len(b))\\n\\telse:\\n\\t\\tprint('0')\\n\", \"from collections import Counter\\nfrom sys import stdin, stdout\\nfor t in range(int(stdin.readline())):\\n\\tn = int(stdin.readline())\\n\\ta = list(map(int, stdin.readline().split()))\\n\\tm1 = max(a)\\n\\tm2 = n - m1\\n\\tf1 = f2 = f3 = f4 = 1\\n\\ts1 = set(a[:m1])\\n\\ts2 = set(a[m1:])\\n\\ts3 = set(a[:m2])\\n\\ts4 = set(a[m2:])\\n\\tfor v in range(1, m1 + 1):\\n\\t\\tif f1 and v not in s1:\\n\\t\\t\\tf1 = 0\\n\\t\\tif f4 and v not in s4:\\n\\t\\t\\tf4 = 0\\n\\tfor v in range(1, m2 + 1):\\n\\t\\tif f2 and v not in s2:\\n\\t\\t\\tf2 = 0\\n\\t\\tif f3 and v not in s3:\\n\\t\\t\\tf3 = 0\\n\\tif f1 and f2 and f3 and f4:\\n\\t\\tif m1 == m2:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m1, m2)\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(m1, m2)\\n\\t\\t\\tprint(m2, m1)\\n\\telif f1 and f2:\\n\\t\\tprint(1)\\n\\t\\tprint(m1, m2)\\n\\telif f3 and f4:\\n\\t\\tprint(1)\\n\\t\\tprint(m2, m1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import sys\\ninp = sys.stdin.readline\\n\\ndef input():\\n\\treturn inp().strip()\\nflush = sys.stdout.flush\\n\\ndef iin():\\n\\treturn int(input())\\n\\ndef lin():\\n\\treturn list(map(int, input().split()))\\n\\ndef main():\\n\\tT = iin()\\n\\tfor _ in range(T):\\n\\t\\tn = iin()\\n\\t\\ta = lin()\\n\\t\\ta1 = []\\n\\t\\tmx = 0\\n\\t\\tdid = set()\\n\\t\\tbr = 0\\n\\t\\tfor (j, i) in enumerate(a):\\n\\t\\t\\tif br:\\n\\t\\t\\t\\ta1.append(0)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmx = max(mx, i)\\n\\t\\t\\t\\tif i in did:\\n\\t\\t\\t\\t\\ta1.append(0)\\n\\t\\t\\t\\t\\tbr = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tdid.add(i)\\n\\t\\t\\t\\t\\tif mx == j + 1:\\n\\t\\t\\t\\t\\t\\ta1.append(mx)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\ta1.append(0)\\n\\t\\ta = a[::-1]\\n\\t\\ta2 = []\\n\\t\\tmx = 0\\n\\t\\tdid = set()\\n\\t\\tbr = 0\\n\\t\\tfor (j, i) in enumerate(a):\\n\\t\\t\\tif br:\\n\\t\\t\\t\\ta2.append(0)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmx = max(mx, i)\\n\\t\\t\\t\\tif i in did:\\n\\t\\t\\t\\t\\ta2.append(0)\\n\\t\\t\\t\\t\\tbr = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tdid.add(i)\\n\\t\\t\\t\\t\\tif mx == j + 1:\\n\\t\\t\\t\\t\\t\\ta2.append(mx)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\ta2.append(0)\\n\\t\\ta2 = a2[::-1]\\n\\t\\tans = []\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif a1[i] and a2[i + 1]:\\n\\t\\t\\t\\tans.append([a1[i], a2[i + 1]])\\n\\t\\tprint(len(ans))\\n\\t\\tfor (i, j) in ans:\\n\\t\\t\\tprint(i, j)\\nmain()\\n\", \"def calcPer():\\n\\tN = int(input())\\n\\tnums = list(map(int, input().split()))\\n\\tM = max(nums)\\n\\tcounts = [0 for i in range(M)]\\n\\trang = [0, N]\\n\\tdup_num = 0\\n\\tfor i in range(N):\\n\\t\\tcounts[nums[i] - 1] += 1\\n\\t\\tn = counts[nums[i] - 1]\\n\\t\\tif n > 2:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\tif n == 2 and dup_num == 0:\\n\\t\\t\\tdup_num = nums[i]\\n\\t\\t\\trang[1] = i\\n\\t\\t\\trang[0] = nums.index(nums[i])\\n\\tif 0 in counts:\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tfor i in range(rang[0] + 1, rang[1]):\\n\\t\\tif counts[nums[i] - 1] == 2:\\n\\t\\t\\trang[0] = i\\n\\tif rang == [0, N]:\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\touts = []\\n\\tcount_w = 0\\n\\tlis1 = nums[0:rang[0] + 1]\\n\\tlis2 = nums[rang[0] + 1:N]\\n\\tm1 = max(lis1)\\n\\tcounts = [0 for i in range(m1)]\\n\\tfor l in lis1:\\n\\t\\tcounts[l - 1] += 1\\n\\t(valid1, valid2) = (1, 1)\\n\\tfor c in counts:\\n\\t\\tif c != 1:\\n\\t\\t\\tvalid1 = 0\\n\\t\\t\\tbreak\\n\\tif valid1:\\n\\t\\tm2 = max(lis2)\\n\\t\\tcounts = [0 for i in range(m2)]\\n\\t\\tfor l in lis2:\\n\\t\\t\\tcounts[l - 1] += 1\\n\\t\\tfor c in counts:\\n\\t\\t\\tif c != 1:\\n\\t\\t\\t\\tvalid2 = 0\\n\\t\\t\\t\\tbreak\\n\\tif valid1 and valid2:\\n\\t\\tcount_w += 1\\n\\t\\tx = len(lis1)\\n\\t\\touts.append([x, N - x])\\n\\tif rang[1] - rang[0] > 1:\\n\\t\\tlis1 = nums[0:rang[1]]\\n\\t\\tlis2 = nums[rang[1]:N]\\n\\t\\tm1 = max(lis1)\\n\\t\\tcounts = [0 for i in range(m1)]\\n\\t\\tfor l in lis1:\\n\\t\\t\\tcounts[l - 1] += 1\\n\\t\\t(valid1, valid2) = (1, 1)\\n\\t\\tfor c in counts:\\n\\t\\t\\tif c != 1:\\n\\t\\t\\t\\tvalid1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif valid1:\\n\\t\\t\\tm2 = max(lis2)\\n\\t\\t\\tcounts = [0 for i in range(m2)]\\n\\t\\t\\tfor l in lis2:\\n\\t\\t\\t\\tcounts[l - 1] += 1\\n\\t\\t\\tfor c in counts:\\n\\t\\t\\t\\tif c != 1:\\n\\t\\t\\t\\t\\tvalid2 = 0\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif valid1 and valid2:\\n\\t\\t\\tcount_w += 1\\n\\t\\t\\tx = len(lis1)\\n\\t\\t\\touts.append([x, N - x])\\n\\tprint(count_w)\\n\\tfor x in outs:\\n\\t\\tprint(x[0], x[1])\\nT = int(input())\\nfor t in range(T):\\n\\tcalcPer()\\n\", \"t = int(input())\\nfor case in range(t):\\n\\tn = int(input())\\n\\tal = [int(a) for a in input().split()]\\n\\taset = set()\\n\\tbset = set()\\n\\tamax = 0\\n\\tbmax = 0\\n\\tfor i in range(n):\\n\\t\\tif al[n - i - 1] not in bset:\\n\\t\\t\\tbset.add(al[n - i - 1])\\n\\t\\t\\twhile bmax + 1 in bset:\\n\\t\\t\\t\\tbmax += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - len(bset)):\\n\\t\\tif al[i] not in aset:\\n\\t\\t\\taset.add(al[i])\\n\\t\\t\\twhile amax + 1 in aset:\\n\\t\\t\\t\\tamax += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif len(aset) + len(bset) != n:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tpairs = []\\n\\tif amax + bmax == n:\\n\\t\\tpairs.append((amax, bmax))\\n\\tfor i in range(len(aset), n - 1):\\n\\t\\tif al[i] in aset:\\n\\t\\t\\tbreak\\n\\t\\taset.add(al[i])\\n\\t\\twhile amax + 1 in aset:\\n\\t\\t\\tamax += 1\\n\\t\\tbset.remove(al[i])\\n\\t\\tbmax = min(bmax, al[i] - 1)\\n\\t\\tif amax + bmax == n:\\n\\t\\t\\tpairs.append((amax, bmax))\\n\\tprint(len(pairs))\\n\\tfor p in pairs:\\n\\t\\tprint('{} {}'.format(p[0], p[1]))\\n\", \"def checkPerm(A, l, r):\\n\\tv = A[l]\\n\\tfor i in range(l, r + 1):\\n\\t\\tif A[i] > v:\\n\\t\\t\\tv = A[i]\\n\\tmemo = [1] * (v + 1)\\n\\tmemo[0] = 0\\n\\tfor i in range(l, r + 1):\\n\\t\\tmemo[A[i]] -= 1\\n\\tif any(memo):\\n\\t\\treturn False\\n\\treturn True\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\tA = [int(s) for s in input().split()]\\n\\tans = []\\n\\tmemo = [0] * n\\n\\ti = 0\\n\\twhile i < n:\\n\\t\\tif memo[A[i]]:\\n\\t\\t\\tif checkPerm(A, 0, i - 1) and checkPerm(A, i, n - 1):\\n\\t\\t\\t\\tans.append([i, n - i])\\n\\t\\t\\tbreak\\n\\t\\tmemo[A[i]] = 1\\n\\t\\ti += 1\\n\\tfor j in range(n):\\n\\t\\tmemo[j] = 0\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tif memo[A[i]]:\\n\\t\\t\\tif checkPerm(A, 0, i) and checkPerm(A, i + 1, n - 1):\\n\\t\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\t\\t\\tbreak\\n\\t\\tmemo[A[i]] = 1\\n\\t\\ti -= 1\\n\\tif len(ans) == 2 and ans[0] == ans[1]:\\n\\t\\tans.pop()\\n\\tprint(len(ans))\\n\\tfor ele in ans:\\n\\t\\tprint('{} {}'.format(ele[0], ele[1]))\\n\", \"def check(A):\\n\\tA.sort()\\n\\tfor i in range(len(A)):\\n\\t\\tif A[i] != i + 1:\\n\\t\\t\\treturn 0\\n\\treturn 1\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\ta = max(A)\\n\\td = check(A[:a])\\n\\te = check(A[a:])\\n\\tAns = []\\n\\tif d == 1 and e == 1:\\n\\t\\tAns.append([a, n - a])\\n\\tif n - a != a:\\n\\t\\td = check(A[:n - a])\\n\\t\\te = check(A[n - a:])\\n\\t\\tif d == 1 and e == 1:\\n\\t\\t\\tAns.append([n - a, a])\\n\\tprint(len(Ans))\\n\\tfor i in Ans:\\n\\t\\tprint(*i)\\n\", \"def chk(s, e):\\n\\tglobal a\\n\\toc = [0 for i in range(e - s + 1)]\\n\\tfor i in a[s:e + 1]:\\n\\t\\tif i > e - s + 1:\\n\\t\\t\\treturn False\\n\\t\\toc[i - 1] = 1\\n\\tif 0 in oc:\\n\\t\\treturn False\\n\\treturn True\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\toc = [0 for i in range(n - 1)]\\n\\tfor i in a:\\n\\t\\toc[i - 1] += 1\\n\\tif oc[0] != 2:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tfor i in range(len(oc)):\\n\\t\\tif oc[i] != 2:\\n\\t\\t\\tbreak\\n\\t\\tmin_ind = i\\n\\tnum = 0\\n\\tans = []\\n\\tif chk(0, min_ind) and chk(min_ind + 1, n - 1):\\n\\t\\tans.append([min_ind + 1, n - min_ind - 1])\\n\\t\\tnum += 1\\n\\tif chk(0, n - min_ind - 2) and chk(n - min_ind - 1, n - 1):\\n\\t\\tans.append([n - min_ind - 1, min_ind + 1])\\n\\t\\tnum += 1\\n\\tif num == 0:\\n\\t\\tprint(0)\\n\\telif num == 2 and ans[0][0] == ans[1][0]:\\n\\t\\tprint(1)\\n\\t\\tprint(*ans[0])\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tprint(num)\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(*i)\\n\", \"from sys import *\\nfrom collections import *\\ninput = stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = [0] * n\\n\\tc = [0] * n\\n\\td = defaultdict(lambda : 0)\\n\\tmx = 0\\n\\tfor i in range(n):\\n\\t\\tif d[a[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[a[i]] += 1\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tif mx == i + 1:\\n\\t\\t\\tb[i] = 1\\n\\td = defaultdict(lambda : 0)\\n\\tmx = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif d[a[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[a[i]] += 1\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tif mx == n - i:\\n\\t\\t\\tc[i] = 2\\n\\ttp = []\\n\\tcn = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif b[i] == 1 and c[i + 1] == 2:\\n\\t\\t\\tcn += 1\\n\\t\\t\\ttp.append((i + 1, n - (i + 1)))\\n\\tprint(cn)\\n\\tfor i in range(cn):\\n\\t\\tprint(tp[i][0], tp[i][1])\\n\", \"import math\\nt = int(input())\\nwhile t > 0:\\n\\tn = int(input())\\n\\tl = [int(s) for s in input().split()]\\n\\td = []\\n\\tmx = max(l)\\n\\tfor i in range(2):\\n\\t\\tif set(l[:mx]) == set(range(1, mx + 1)) and set(range(1, n - mx + 1)) == set(l[mx:]):\\n\\t\\t\\td.append(mx)\\n\\t\\tmx = n - mx\\n\\td = set(d)\\n\\tprint(len(d))\\n\\tfor i in d:\\n\\t\\tprint(i, n - i)\\n\\tt -= 1\\n\", \"def verifypermutation(l):\\n\\tn = len(l)\\n\\treturn sorted(l) == list(range(1, n + 1))\\n\\ndef process():\\n\\tn = int(input())\\n\\tl = [int(x) for x in input().split()]\\n\\tm = max(l)\\n\\toutputs = []\\n\\tif m >= n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tif verifypermutation(l[:m]) and verifypermutation(l[m:]):\\n\\t\\t\\toutputs.append('{} {}'.format(m, n - m))\\n\\t\\tif m != n - m and verifypermutation(l[:n - m]) and verifypermutation(l[n - m:]):\\n\\t\\t\\toutputs.append('{} {}'.format(n - m, m))\\n\\t\\tprint(len(outputs))\\n\\t\\tfor item in outputs:\\n\\t\\t\\tprint(item)\\nnumtests = int(input())\\nfor _ in range(numtests):\\n\\tprocess()\\n\", \"from collections import Counter\\n\\ndef check(list1, list2):\\n\\treturn set(list1) == set(list2)\\n\\ndef solve(n, a):\\n\\tif n == 2:\\n\\t\\tif a.count(1) == 2:\\n\\t\\t\\treturn '1' + '\\\\n' + ' '.join(['1', '1'])\\n\\t\\telse:\\n\\t\\t\\treturn '0'\\n\\tcounter_a = Counter(a)\\n\\tfor i in range(1, n):\\n\\t\\tif counter_a[i] > 1:\\n\\t\\t\\ti += 1\\n\\t\\telif i == 1:\\n\\t\\t\\treturn '0'\\n\\t\\telse:\\n\\t\\t\\ti -= 1\\n\\t\\t\\tbreak\\n\\tpm = range(1, i + 1)\\n\\thead = a[:i]\\n\\ttail = a[-i:]\\n\\tcheck1 = check(head, pm)\\n\\tcheck2 = check(tail, pm)\\n\\tif check1 and check2:\\n\\t\\tnew = a[:-i]\\n\\t\\tpm = range(1, len(new) + 1)\\n\\t\\tif check(new, pm):\\n\\t\\t\\tif i == n - i:\\n\\t\\t\\t\\treturn '1' + '\\\\n' + ' '.join([str(i), str(i)])\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn '2' + '\\\\n' + ' '.join([str(i), str(n - i)]) + '\\\\n' + ' '.join([str(n - i), str(i)])\\n\\t\\telse:\\n\\t\\t\\treturn '0'\\n\\telif check1:\\n\\t\\tnew = a[i:]\\n\\t\\tpm = range(1, len(new) + 1)\\n\\t\\tif check(new, pm):\\n\\t\\t\\treturn '1' + '\\\\n' + ' '.join([str(i), str(n - i)])\\n\\t\\telse:\\n\\t\\t\\treturn '0'\\n\\telif check2:\\n\\t\\tnew = a[:-i]\\n\\t\\tpm = range(1, len(new) + 1)\\n\\t\\tif check(new, pm):\\n\\t\\t\\treturn '1' + '\\\\n' + ' '.join([str(n - i), str(i)])\\n\\t\\telse:\\n\\t\\t\\treturn '0'\\n\\telse:\\n\\t\\treturn '0'\\nt = int(input())\\nfor _n in range(0, t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split(' ')))\\n\\tprint(solve(n, a))\\n\", \"a = int(input())\\nfor i in range(0, a):\\n\\tk = int(input())\\n\\ts = list(map(int, input().split()))\\n\\tm = max(s)\\n\\tn = k - m\\n\\tl1 = set(s[0:n])\\n\\tl2 = set(s[n:])\\n\\tl3 = set(s[0:m])\\n\\tl4 = set(s[m:])\\n\\tcount = 0\\n\\tan1 = ''\\n\\tan2 = ''\\n\\tif set(range(1, n + 1)) == l1 and l2 == set(range(1, m + 1)):\\n\\t\\tcount = count + 1\\n\\t\\tan1 = str(n) + ' ' + str(m)\\n\\tif set(range(1, m + 1)) == l3 and l4 == set(range(1, n + 1)):\\n\\t\\tcount = count + 1\\n\\t\\tan2 = str(m) + ' ' + str(n)\\n\\t\\tif an1 == an2:\\n\\t\\t\\tcount = 1\\n\\t\\t\\tan2 = ''\\n\\tprint(count)\\n\\tif an1 != '':\\n\\t\\tprint(an1)\\n\\tif an2 != '':\\n\\t\\tprint(an2)\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\tlic = list(map(int, input().split()))\\n\\tout = []\\n\\tans = [i for i in range(1, n + 1)]\\n\\tma = max(lic)\\n\\t(lic1, lic2, lic3, lic4) = (lic[:ma], lic[ma:], lic[-ma:], lic[:-ma])\\n\\tif sorted(lic1) == ans[:ma] and sorted(lic2) == ans[:n - ma]:\\n\\t\\tout.append(len(lic1))\\n\\tif sorted(lic3) == ans[:ma] and sorted(lic4) == ans[:n - ma] and (len(lic4) not in out):\\n\\t\\tout.append(len(lic4))\\n\\tprint(len(out))\\n\\tfor i in out:\\n\\t\\tprint(i, n - i)\\n\", \"def dreammoonLikesPermutations(n, array):\\n\\td = {}\\n\\tfor x in array:\\n\\t\\tif x in d:\\n\\t\\t\\td[x] += 1\\n\\t\\t\\tif d[x] >= 3:\\n\\t\\t\\t\\treturn (0, [])\\n\\t\\telse:\\n\\t\\t\\td[x] = 1\\n\\tfor x in range(1, len(d)):\\n\\t\\tif not (x in d and x + 1 in d):\\n\\t\\t\\treturn (0, [])\\n\\t\\tif d[x + 1] > d[x]:\\n\\t\\t\\treturn (0, [])\\n\\ts = set()\\n\\tfor x in range(1, len(d) + 1):\\n\\t\\tif d[x] == 2:\\n\\t\\t\\ts.add(x)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif not s:\\n\\t\\treturn (0, [])\\n\\tv = set()\\n\\tans = []\\n\\tfor x in range(len(s)):\\n\\t\\tv.add(array[x])\\n\\tif v == s:\\n\\t\\tans.append([x + 1, n - x - 1])\\n\\t\\tif x + 1 == n - x - 1:\\n\\t\\t\\treturn (len(ans), ans)\\n\\tv = set()\\n\\tfor x in range(n - len(s), n):\\n\\t\\tv.add(array[x])\\n\\tif v == s:\\n\\t\\tans.append([n - len(s), len(s)])\\n\\treturn (len(ans), ans)\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\t(a, ans) = dreammoonLikesPermutations(n, l)\\n\\tif a == 0:\\n\\t\\tprint(a)\\n\\telse:\\n\\t\\tprint(a)\\n\\t\\tfor x in ans:\\n\\t\\t\\tprint(x[0], x[1])\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tl1 = max(a)\\n\\tl2 = n - l1\\n\\tc = 0\\n\\tif l1 == n:\\n\\t\\tprint('0')\\n\\telse:\\n\\t\\tp11 = sorted(a[:l1])\\n\\t\\tp12 = sorted(a[:l2])\\n\\t\\tp21 = sorted(a[l1:])\\n\\t\\tp22 = sorted(a[l2:])\\n\\t\\tp1 = [i for i in range(1, l1 + 1)]\\n\\t\\tp2 = [j for j in range(1, l2 + 1)]\\n\\t\\tk = 0\\n\\t\\tif p11 == p1 and p21 == p2:\\n\\t\\t\\tc += 1\\n\\t\\t\\tk = l1\\n\\t\\tif p12 == p2 and p22 == p1:\\n\\t\\t\\tc += 1\\n\\t\\t\\tk = l2\\n\\t\\tif l1 == l2 and c > 0:\\n\\t\\t\\tc = 1\\n\\t\\tprint(c)\\n\\t\\tif c == 1:\\n\\t\\t\\tprint(k, n - k)\\n\\t\\tif c == 2:\\n\\t\\t\\tprint(l1, l2)\\n\\t\\t\\tprint(l2, l1)\\n\", \"from collections import defaultdict as dc\\nfrom heapq import *\\nimport math\\nimport bisect\\nimport sys\\nfrom collections import deque as dq\\nmod = 10 ** 12\\n\\ndef inp():\\n\\tp = int(input())\\n\\treturn p\\n\\ndef line():\\n\\tp = list(map(int, input().split()))\\n\\treturn p\\n\\ndef digit(n):\\n\\ts = str(n)\\n\\tp = 0\\n\\tfor i in s:\\n\\t\\tp += int(i) ** 2\\n\\treturn p\\n\\ndef check(a, b):\\n\\tc = 0\\n\\tfor i in range(len(a)):\\n\\t\\tif a[i] != b[i]:\\n\\t\\t\\tc += 1\\n\\t\\t\\tif c > 1:\\n\\t\\t\\t\\treturn 0\\n\\treturn 1\\n\\ndef check(a, b, x):\\n\\tif a == 1 and b == x:\\n\\t\\treturn 1\\n\\treturn 0\\nfor _ in range(inp()):\\n\\tn = inp()\\n\\ta = line()\\n\\tp = dc(int)\\n\\tr1 = dc(int)\\n\\tmn = float('inf')\\n\\tmx = float('-inf')\\n\\tfor i in range(n):\\n\\t\\tmn = min(mn, a[i])\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tl = i + 1\\n\\t\\tp[a[i]] += 1\\n\\t\\tif p[a[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\telif check(mn, mx, l):\\n\\t\\t\\tr1[i + 1] += 1\\n\\tq = dc(int)\\n\\tr2 = dc(int)\\n\\tmn = float('inf')\\n\\tmx = float('-inf')\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tmn = min(mn, a[i])\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tl = n - i\\n\\t\\tq[a[i]] += 1\\n\\t\\tif q[a[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\telif check(mn, mx, l):\\n\\t\\t\\tr2[n - i] = 1\\n\\tans = []\\n\\tif len(r1) > len(r2):\\n\\t\\tfor i in r2.keys():\\n\\t\\t\\tif r1[n - i] >= 1:\\n\\t\\t\\t\\tans.append((n - i, i))\\n\\telse:\\n\\t\\tfor i in r1.keys():\\n\\t\\t\\tif r2[n - i] >= 1:\\n\\t\\t\\t\\tans.append((i, n - i))\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"from collections import Counter, defaultdict, deque\\n\\ndef read_int():\\n\\treturn int(input())\\n\\ndef read_int_n():\\n\\treturn list(map(int, input().split()))\\n\\ndef read_float():\\n\\treturn float(input())\\n\\ndef read_float_n():\\n\\treturn list(map(float, input().split()))\\n\\ndef read_str():\\n\\treturn input().strip()\\n\\ndef read_str_n():\\n\\treturn list(map(str, input().split()))\\n\\ndef error_print(*args):\\n\\tprint(*args, file=sys.stderr)\\n\\ndef mt(f):\\n\\timport time\\n\\n\\tdef wrap(*args, **kwargs):\\n\\t\\ts = time.time()\\n\\t\\tret = f(*args, **kwargs)\\n\\t\\te = time.time()\\n\\t\\terror_print(e - s, 'sec')\\n\\t\\treturn ret\\n\\treturn wrap\\n\\ndef isp(a):\\n\\tn = len(a)\\n\\ta = set(a)\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i not in a:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef slv(N, A):\\n\\tsa = [0]\\n\\tfor a in A:\\n\\t\\tsa.append(sa[-1] + a)\\n\\tK = []\\n\\tfor i in range(N):\\n\\t\\tn = i + 1\\n\\t\\tm = N - n\\n\\t\\tls = sa[i + 1] - sa[0]\\n\\t\\trs = sa[N] - sa[i + 1]\\n\\t\\tif ls == (n ** 2 + n) // 2 and rs == (m ** 2 + m) // 2:\\n\\t\\t\\tif isp(A[:i + 1]) and isp(A[i + 1:]):\\n\\t\\t\\t\\tK.append((n, m))\\n\\tprint(len(K))\\n\\tfor k in K:\\n\\t\\tprint(*k)\\n\\ndef main():\\n\\tT = read_int()\\n\\tfor _ in range(T):\\n\\t\\tN = read_int()\\n\\t\\tA = read_int_n()\\n\\t\\tslv(N, A)\\nmain()\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tpositions1 = []\\n\\toccured1 = set({})\\n\\tmax1 = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] in occured1:\\n\\t\\t\\tbreak\\n\\t\\toccured1.add(a[i])\\n\\t\\tmax1 = max(max1, a[i])\\n\\t\\tif len(occured1) == max1:\\n\\t\\t\\tpositions1.append(i)\\n\\tpositions2 = set({})\\n\\toccured2 = set({})\\n\\tmax2 = 0\\n\\tfor j in range(n):\\n\\t\\ti = n - j - 1\\n\\t\\tif a[i] in occured2:\\n\\t\\t\\tbreak\\n\\t\\toccured2.add(a[i])\\n\\t\\tmax2 = max(max2, a[i])\\n\\t\\tif len(occured2) == max2:\\n\\t\\t\\tpositions2.add(i - 1)\\n\\tcount = 0\\n\\tplaces = []\\n\\tfor i in positions1:\\n\\t\\tif i in positions2:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tplaces.append(i)\\n\\tprint(count)\\n\\tfor i in places:\\n\\t\\tprint(i + 1, n - i - 1)\\n\", \"import sys\\nfrom collections import Counter\\nreadLine = lambda : sys.stdin.readline()\\nreadInt = lambda : int(sys.stdin.readline())\\nreadInts = lambda : [int(x) for x in sys.stdin.readline().split(' ')]\\n\\ndef main():\\n\\tsolns = []\\n\\tt = readInt()\\n\\tfor _ in range(t):\\n\\t\\tn = readInt()\\n\\t\\ta = readInts()\\n\\t\\tcount = 0\\n\\t\\ts = []\\n\\t\\tlargest = max(a)\\n\\t\\tcounter = Counter(a)\\n\\t\\tif counter[largest] == 2:\\n\\t\\t\\tp1 = a[:largest]\\n\\t\\t\\tp2 = a[-largest:]\\n\\t\\t\\tif len(p1) + len(p2) != len(a):\\n\\t\\t\\t\\tpass\\n\\t\\t\\telse:\\n\\t\\t\\t\\tp1 = set(p1)\\n\\t\\t\\t\\tif p1 == set(p2) and p1 == set(range(1, largest + 1)):\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\t\\ts.append(f'{largest} {largest}')\\n\\t\\telif counter[largest] == 1:\\n\\t\\t\\tpivot = a.index(largest)\\n\\t\\t\\tp1 = a[:largest]\\n\\t\\t\\tp2 = a[-(n - largest):]\\n\\t\\t\\tif set(p1) == set(range(1, len(p1) + 1)) and set(p2) == set(range(1, len(p2) + 1)):\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\ts.append(f'{largest} {n - largest}')\\n\\t\\t\\tp2 = a[-largest:]\\n\\t\\t\\tp1 = a[:n - largest]\\n\\t\\t\\tif set(p1) == set(range(1, len(p1) + 1)) and set(p2) == set(range(1, len(p2) + 1)):\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\ts.append(f'{n - largest} {largest}')\\n\\t\\telse:\\n\\t\\t\\tpass\\n\\t\\tsolns.append(str(count))\\n\\t\\tif count > 0:\\n\\t\\t\\tsolns.extend(s)\\n\\tprint('\\\\n'.join(solns))\\nmain()\\n\", \"def f(l, k):\\n\\td = set(l)\\n\\tif len(d) == k:\\n\\t\\tif max(d) == k:\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\telse:\\n\\t\\treturn False\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\td = max(l)\\n\\tres = []\\n\\tif n - d != d:\\n\\t\\tif f(l[:d], d) and f(l[d:], n - d):\\n\\t\\t\\tres.append([d, n - d])\\n\\t\\tif f(l[n - d:], d) and f(l[:n - d], n - d):\\n\\t\\t\\tres.append([n - d, d])\\n\\telif f(l[:d], d) and f(l[d:], n - d):\\n\\t\\tres.append([d, n - d])\\n\\tprint(len(res))\\n\\tfor i in res:\\n\\t\\tprint(*i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tmaxx = arr[0]\\n\\tcnt = 1\\n\\tk = set()\\n\\tans = {}\\n\\tk.add(arr[0])\\n\\tif maxx == cnt:\\n\\t\\tans[cnt] = 1\\n\\tfor i in range(1, n):\\n\\t\\tmaxx = max(maxx, arr[i])\\n\\t\\tk.add(arr[i])\\n\\t\\tcnt += 1\\n\\t\\tif maxx == len(k) and maxx == cnt:\\n\\t\\t\\tans[cnt] = 1\\n\\tarr = arr[-1::-1]\\n\\tp = arr[0]\\n\\tcnt = 1\\n\\tk = set()\\n\\tk.add(arr[0])\\n\\ttemp = {}\\n\\tif p == cnt:\\n\\t\\ttemp[cnt] = 1\\n\\tfor i in range(1, n):\\n\\t\\tp = max(p, arr[i])\\n\\t\\tk.add(arr[i])\\n\\t\\tcnt += 1\\n\\t\\tif p == len(k) and p == cnt:\\n\\t\\t\\ttemp[cnt] = 1\\n\\tf = []\\n\\tfor i in temp:\\n\\t\\tif n - i in ans:\\n\\t\\t\\tf.append([n - i, i])\\n\\tprint(len(f))\\n\\tfor i in f:\\n\\t\\tprint(*i)\\n\", \"for _ in range(int(input())):\\n\\tx = int(input())\\n\\tnum = list(map(int, input().split()))\\n\\tans = []\\n\\tcorr = [i for i in range(x)]\\n\\ti = max(num)\\n\\tfor k in range(2):\\n\\t\\tif len(set(num[:i])) + len(set(num[i:x])) == x and sorted(num[:i]) == corr[1:i + 1] and (sorted(num[i:x]) == corr[1:x - i + 1]):\\n\\t\\t\\tans.append(i)\\n\\t\\ti = x - i\\n\\tans = set(ans)\\n\\tprint(len(ans))\\n\\tfor j in ans:\\n\\t\\tprint(j, x - j)\\n\", \"def isPermutation(l):\\n\\tif len(l) == 1:\\n\\t\\tif l[0] == 1:\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\tr = list(range(1, len(l) + 1))\\n\\tl1 = l[:]\\n\\tl1.sort()\\n\\tif l1 == r:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tcounter = 0\\n\\tpr = []\\n\\tmaxval = max(l)\\n\\tl1 = l[:n - maxval]\\n\\tl2 = l[n - maxval:]\\n\\tif isPermutation(l1) and isPermutation(l2):\\n\\t\\tcounter += 1\\n\\t\\tpr.append(n - maxval)\\n\\tl1 = l[:maxval]\\n\\tl2 = l[maxval:]\\n\\tif isPermutation(l1) and isPermutation(l2) and (n - maxval != maxval):\\n\\t\\tcounter += 1\\n\\t\\tpr.append(maxval)\\n\\tprint(counter)\\n\\tfor i in range(len(pr)):\\n\\t\\tprint(pr[i], n - pr[i])\\n\", \"def is_correct(sub_array):\\n\\ts = set(sub_array)\\n\\tif min(s) != 1:\\n\\t\\treturn False\\n\\tif max(s) != len(sub_array):\\n\\t\\treturn False\\n\\tif len(s) != len(sub_array):\\n\\t\\treturn False\\n\\treturn True\\n\\ndef permutations(n, m):\\n\\tm = [int(m[i]) for i in range(len(m))]\\n\\tif len(m) != n:\\n\\t\\treturn 'Incorrect input'\\n\\tg = []\\n\\tmaxr = max(m)\\n\\tif is_correct(m[maxr:]) and is_correct(m[:maxr]):\\n\\t\\tg.append('{0} {1}'.format(maxr, n - maxr))\\n\\tif is_correct(m[n - maxr:]) and is_correct(m[:n - maxr]) and (2 * maxr != n):\\n\\t\\tg.append('{0} {1}'.format(n - maxr, maxr))\\n\\treturn g\\nfor i in range(int(input().strip())):\\n\\tn = int(input().strip())\\n\\tm = input().strip().split()\\n\\tarr = permutations(n, m)\\n\\tif len(arr) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(arr))\\n\\t\\tfor j in range(len(arr)):\\n\\t\\t\\tprint(arr[j])\\n\", \"cases = int(input())\\nfor t in range(cases):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tout = 0\\n\\toutl = []\\n\\tpos = -1\\n\\tf = 0\\n\\tf1 = []\\n\\td1 = {}\\n\\tmv = 0\\n\\tc = 0\\n\\tp = 0\\n\\ta.append(a[-1])\\n\\tfor i in range(n + 1):\\n\\t\\tif a[i] in d1:\\n\\t\\t\\tif c == mv:\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\t\\tif p == 2:\\n\\t\\t\\t\\t\\tpos = i\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tf1 = [n - mv, mv]\\n\\t\\t\\t\\td1 = {}\\n\\t\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\t\\tc = 1\\n\\t\\t\\t\\tmv = a[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tp = -1\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\tc += 1\\n\\t\\t\\tmv = max(mv, a[i])\\n\\tif p == 2 and pos == n:\\n\\t\\tout += f\\n\\t\\toutl.append(f1)\\n\\tpos = -1\\n\\tf = 0\\n\\tf1 = []\\n\\td1 = {}\\n\\tmv = 0\\n\\tc = 0\\n\\tp = 0\\n\\ta = a[:-1]\\n\\ta = a[::-1]\\n\\ta.append(a[-1])\\n\\tfor i in range(n + 1):\\n\\t\\tif a[i] in d1:\\n\\t\\t\\tif c == mv:\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\t\\tif p == 2:\\n\\t\\t\\t\\t\\tpos = i\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tf1 = [mv, n - mv]\\n\\t\\t\\t\\td1 = {}\\n\\t\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\t\\tc = 1\\n\\t\\t\\t\\tmv = a[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tp = -1\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\tc += 1\\n\\t\\t\\tmv = max(mv, a[i])\\n\\tif p == 2 and pos == n:\\n\\t\\tif f1 not in outl:\\n\\t\\t\\toutl.append(f1)\\n\\t\\t\\tout += 1\\n\\tprint(out)\\n\\tfor (i, j) in outl:\\n\\t\\tprint(i, j)\\n\", \"def I():\\n\\treturn list(map(int, input().split()))\\nfor __ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = I()\\n\\tans = []\\n\\tm = max(arr)\\n\\tl1 = m\\n\\tl2 = n - m\\n\\tdone = [0] * l1\\n\\tfor i in range(l1):\\n\\t\\tif arr[i] > l1:\\n\\t\\t\\tbreak\\n\\t\\tdone[arr[i] - 1] = 1\\n\\tif not done.count(0) > 0:\\n\\t\\tans1 = l2\\n\\t\\tdone = [0] * l2\\n\\t\\tfor i in range(l2):\\n\\t\\t\\tif arr[i + l1] > l2:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tdone[arr[i + l1] - 1] = 1\\n\\t\\tif not done.count(0) > 0:\\n\\t\\t\\tans.append([l1, l2])\\n\\tdone = [0] * l2\\n\\tfor i in range(l2):\\n\\t\\tif arr[i] > l2:\\n\\t\\t\\tbreak\\n\\t\\tdone[arr[i] - 1] = 1\\n\\tif not done.count(0) > 0:\\n\\t\\tdone = [0] * l1\\n\\t\\tfor i in range(l1):\\n\\t\\t\\tif arr[i + l2] > l1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tdone[arr[i + l2] - 1] = 1\\n\\t\\tif not done.count(0) > 0 and l1 != l2:\\n\\t\\t\\tans.append([l2, l1])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = max(a)\\n\\tl = []\\n\\tfor i in range(m + 1):\\n\\t\\tl.append(0)\\n\\tfor i in range(n):\\n\\t\\tl[a[i]] += 1\\n\\tf = 0\\n\\tfor i in range(1, m + 1):\\n\\t\\tif l[i] != 1 and l[i] != 2:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\t\\tif l[i] != 2:\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tfor j in range(i + 1, m + 1):\\n\\t\\t\\tif l[j] != 1:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif f == 1:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tif i != m:\\n\\t\\t\\t\\ty = i - 1\\n\\t\\t\\t\\tz = n - y\\n\\t\\t\\telse:\\n\\t\\t\\t\\ty = i\\n\\t\\t\\t\\tz = n - y\\n\\t\\t\\tl1 = []\\n\\t\\t\\tfor i in range(y + 1):\\n\\t\\t\\t\\tl1.append(0)\\n\\t\\t\\tfor i in range(y):\\n\\t\\t\\t\\tif a[i] > y:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tl1[a[i]] += 1\\n\\t\\t\\tl2 = []\\n\\t\\t\\tfor i in range(z + 1):\\n\\t\\t\\t\\tl2.append(0)\\n\\t\\t\\tfor i in range(1, z + 1):\\n\\t\\t\\t\\tif a[i * -1] > z:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tl2[a[i * -1]] += 1\\n\\t\\t\\tans = 0\\n\\t\\t\\tif l1.count(1) == y and l2.count(1) == z:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\tw = z\\n\\t\\t\\tx = y\\n\\t\\t\\tl1 = []\\n\\t\\t\\tfor i in range(w + 1):\\n\\t\\t\\t\\tl1.append(0)\\n\\t\\t\\tfor i in range(w):\\n\\t\\t\\t\\tif a[i] > w:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tl1[a[i]] += 1\\n\\t\\t\\tl2 = []\\n\\t\\t\\tfor i in range(x + 1):\\n\\t\\t\\t\\tl2.append(0)\\n\\t\\t\\tfor i in range(1, x + 1):\\n\\t\\t\\t\\tif a[i * -1] > x:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tl2[a[i * -1]] += 1\\n\\t\\t\\tif l1.count(1) == w and l2.count(1) == x:\\n\\t\\t\\t\\tif ans == 1:\\n\\t\\t\\t\\t\\tif w != y:\\n\\t\\t\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\t\\t\\tprint(w, x)\\n\\t\\t\\t\\t\\t\\tprint(y, z)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\t\\t\\tprint(w, x)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\t\\tprint(w, x)\\n\\t\\t\\telif ans == 1:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(y, z)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\", \"import sys\\ninp = sys.stdin.readline\\nread = lambda : list(map(int, inp().split()))\\nans = ''\\nfor _ in range(int(inp())):\\n\\tn = int(inp())\\n\\tarr = read()\\n\\ttotal = sum(arr)\\n\\ts1 = 0\\n\\tans_lis = []\\n\\tfor i in range(n):\\n\\t\\ts1 += arr[i]\\n\\t\\ttotal -= arr[i]\\n\\t\\t(p1, p2) = (i + 1, n - i - 1)\\n\\t\\tif s1 == p1 * (p1 + 1) // 2 and total == p2 * (p2 + 1) // 2 and (len(set(arr[:p1])) == p1) and (len(set(arr[p1:])) == p2):\\n\\t\\t\\tans_lis.append(str(p1) + ' ' + str(p2))\\n\\tans += str(len(ans_lis)) + '\\\\n'\\n\\tfor i in ans_lis:\\n\\t\\tans += str(i) + '\\\\n'\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom sys import stdin, stdout\\n\\ndef main():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\tl = [int(s) for s in input().split()]\\n\\t\\tk = 0\\n\\t\\tans = []\\n\\t\\tc1 = [0] * n\\n\\t\\tc2 = [0] * n\\n\\t\\tfr = 0\\n\\t\\ttw1 = 0\\n\\t\\trev = 0\\n\\t\\ttw2 = 0\\n\\t\\tii = 10 ** 9 + 7\\n\\t\\tjj = 0\\n\\t\\tc1[l[0] - 1] += 1\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tc2[l[i] - 1] += 1\\n\\t\\t\\tif c2[l[i] - 1] > 1:\\n\\t\\t\\t\\ttw2 += 1\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tif c2[i] > 0:\\n\\t\\t\\t\\tjj = i\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif c2[i] == 0 and i < jj:\\n\\t\\t\\t\\trev += 1\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif c1[i] == 1:\\n\\t\\t\\t\\tif i > 0:\\n\\t\\t\\t\\t\\tfr += 1\\n\\t\\t\\t\\tif ii == 10 ** 9 + 7:\\n\\t\\t\\t\\t\\tii = i + 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tii = min(ii, i)\\n\\t\\tif fr == 0 and tw2 == 0 and (rev == 0):\\n\\t\\t\\tans.append([1, n - 1])\\n\\t\\t\\tk += 1\\n\\t\\tfor w in range(1, n - 1):\\n\\t\\t\\tif l[w] - 1 >= ii:\\n\\t\\t\\t\\tfr += 1\\n\\t\\t\\tc1[l[w] - 1] += 1\\n\\t\\t\\tc2[l[w] - 1] -= 1\\n\\t\\t\\tif c1[l[w] - 1] > 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif c2[l[w] - 1] == 1:\\n\\t\\t\\t\\ttw2 -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\trev += 1\\n\\t\\t\\tif l[w] - 1 == jj:\\n\\t\\t\\t\\twhile jj >= 0 and c2[jj] == 0:\\n\\t\\t\\t\\t\\trev -= 1\\n\\t\\t\\t\\t\\tjj -= 1\\n\\t\\t\\tif l[w] - 1 == ii:\\n\\t\\t\\t\\twhile ii < n and c1[ii] == 1:\\n\\t\\t\\t\\t\\tfr -= 1\\n\\t\\t\\t\\t\\tii += 1\\n\\t\\t\\tif fr == 0 and tw2 == 0 and (rev == 0):\\n\\t\\t\\t\\tk += 1\\n\\t\\t\\t\\tans.append([w + 1, n - w - 1])\\n\\t\\tprint(k)\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(*i)\\nmain()\\n\", \"def read_int():\\n\\tn = int(input())\\n\\treturn n\\n\\ndef read_ints():\\n\\tints = [int(x) for x in input().split(' ')]\\n\\treturn ints\\n\\ndef check_perm(p):\\n\\tcntr = [0] * len(p)\\n\\tlmt = len(p)\\n\\tfor i in p:\\n\\t\\tif not 1 <= i <= lmt:\\n\\t\\t\\treturn 0\\n\\t\\telif cntr[i - 1] != 0:\\n\\t\\t\\treturn 0\\n\\t\\telse:\\n\\t\\t\\tcntr[i - 1] = 1\\n\\treturn 1\\nt = read_int()\\nfor case in range(t):\\n\\tn = read_int()\\n\\ta = read_ints()\\n\\tperms = []\\n\\tamx = max(a)\\n\\tp1 = (a[:amx], a[amx:])\\n\\tp2 = (a[-amx:], a[:-amx])\\n\\tif check_perm(p1[0]) and check_perm(p1[1]):\\n\\t\\tperms.append((max(p1[0]), max(p1[1])))\\n\\tif check_perm(p2[0]) and check_perm(p2[1]):\\n\\t\\tif (max(p2[1]), max(p2[0])) not in perms:\\n\\t\\t\\tperms.append((max(p2[1]), max(p2[0])))\\n\\tprint(len(perms))\\n\\tfor i in perms:\\n\\t\\tprint('{} {}'.format(i[0], i[1]))\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tans = set()\\n\\tmx = max(a)\\n\\tfor x in range(2):\\n\\t\\tif set(a[:mx]) == set(range(1, mx + 1)) and set(a[mx:]) == set(range(1, n - mx + 1)):\\n\\t\\t\\tans.add(mx)\\n\\t\\tmx = n - mx\\n\\tprint(len(ans))\\n\\tfor x in ans:\\n\\t\\tprint(x, n - x)\\n\", \"I = input\\nfor _ in range(int(I())):\\n\\tn = int(I())\\n\\ta = list(map(int, I().split(' ')))\\n\\tdd = [0 for i in range(n)]\\n\\tlm = [a[0]]\\n\\tld = [1]\\n\\tt = a[0]\\n\\tdd[t - 1] = 1\\n\\tc = 1\\n\\tfor i in range(1, n - 1):\\n\\t\\tif a[i] > t:\\n\\t\\t\\tt = a[i]\\n\\t\\tlm.append(t)\\n\\t\\tif dd[a[i] - 1] == 0:\\n\\t\\t\\tc += 1\\n\\t\\t\\tdd[a[i] - 1] = 1\\n\\t\\tld.append(c)\\n\\tdd = [0 for i in range(n)]\\n\\tt = a[n - 1]\\n\\trm = [t]\\n\\trd = [1]\\n\\tc = 1\\n\\tdd[t - 1] = 1\\n\\tfor i in range(n - 2, 0, -1):\\n\\t\\tif a[i] > t:\\n\\t\\t\\tt = a[i]\\n\\t\\trm.append(t)\\n\\t\\tif dd[a[i] - 1] == 0:\\n\\t\\t\\tc += 1\\n\\t\\t\\tdd[a[i] - 1] = 1\\n\\t\\trd.append(c)\\n\\trm = rm[::-1]\\n\\trd = rd[::-1]\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif ld[i] == i + 1 and rd[i] == n - i - 1:\\n\\t\\t\\tif lm[i] == i + 1 and rm[i] == n - i - 1:\\n\\t\\t\\t\\tans.append([lm[i], rm[i]])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"import sys\\n\\ndef update(d, req):\\n\\twhile req in d:\\n\\t\\treq += 1\\n\\treturn req\\n\\ndef solve(a, n, pre2):\\n\\treq = 1\\n\\tmaxi = 0\\n\\td = {}\\n\\tfor x in range(n):\\n\\t\\tif a[x] in d:\\n\\t\\t\\treturn [0, 0]\\n\\t\\telse:\\n\\t\\t\\td[a[x]] = 1\\n\\t\\tmaxi = max(maxi, a[x])\\n\\t\\tif a[x] == req:\\n\\t\\t\\treq = update(d, req)\\n\\t\\t\\tif maxi != req - 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telif x + 1 < n and pre2[x + 1]:\\n\\t\\t\\t\\treturn [x, 1]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcontinue\\n\\treturn [0, 0]\\n\\ndef solve_back(a, n, pre1):\\n\\td2 = {}\\n\\tmx = 0\\n\\trq = 1\\n\\tfor y in range(n - 1, -1, -1):\\n\\t\\tif a[y] in d2:\\n\\t\\t\\treturn -1\\n\\t\\telse:\\n\\t\\t\\td2[a[y]] = 1\\n\\t\\tmx = max(mx, a[y])\\n\\t\\tif a[y] == rq:\\n\\t\\t\\trq = update(d2, rq)\\n\\t\\t\\tif mx != rq - 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telif y - 1 >= 0 and pre1[y - 1]:\\n\\t\\t\\t\\treturn y\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcontinue\\n\\treturn -1\\n\\ndef make_pre(a, n):\\n\\tpre1 = [False] * n\\n\\td = {}\\n\\tmaxi = 0\\n\\treq = 1\\n\\tfor x in range(n):\\n\\t\\tif a[x] in d:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[a[x]] = 1\\n\\t\\tmaxi = max(maxi, a[x])\\n\\t\\tif a[x] == req:\\n\\t\\t\\treq = update(d, req)\\n\\t\\t\\tif maxi == req - 1:\\n\\t\\t\\t\\tpre1[x] = True\\n\\tpre2 = [False] * n\\n\\td2 = {}\\n\\tmx = 0\\n\\trq = 1\\n\\tfor y in range(n - 1, -1, -1):\\n\\t\\tif a[y] in d2:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td2[a[y]] = 1\\n\\t\\tmx = max(mx, a[y])\\n\\t\\tif a[y] == rq:\\n\\t\\t\\trq = update(d2, rq)\\n\\t\\t\\tif mx == rq - 1:\\n\\t\\t\\t\\tpre2[y] = True\\n\\treturn [pre1, pre2]\\nt = int(sys.stdin.readline())\\nfor i in range(t):\\n\\tn = int(sys.stdin.readline())\\n\\ta = [int(x) for x in sys.stdin.readline().split()]\\n\\t[pre1, pre2] = make_pre(a, n)\\n\\tarr = solve(a, n, pre2)\\n\\tif arr[1] == 0:\\n\\t\\tprint(0)\\n\\tif arr[1] == 1:\\n\\t\\tsec = solve_back(a, n, pre1)\\n\\t\\tif sec == -1 or sec == arr[0] + 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(arr[0] + 1, n - arr[0] - 1)\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(arr[0] + 1, n - arr[0] - 1)\\n\\t\\t\\tprint(sec, n - sec)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tl = [False for _ in range(n)]\\n\\tr = [False for _ in range(n)]\\n\\tcur_max = 0\\n\\ts = set()\\n\\tfor i in range(n):\\n\\t\\tel = a[i]\\n\\t\\tif el in s:\\n\\t\\t\\tbreak\\n\\t\\ts.add(el)\\n\\t\\tcur_max = max(cur_max, el)\\n\\t\\tif cur_max == len(s):\\n\\t\\t\\tl[i] = True\\n\\tcur_max = 0\\n\\ts = set()\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tel = a[i]\\n\\t\\tif el in s:\\n\\t\\t\\tbreak\\n\\t\\ts.add(el)\\n\\t\\tcur_max = max(cur_max, el)\\n\\t\\tif cur_max == len(s):\\n\\t\\t\\tr[i] = True\\n\\tans = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif l[i] and r[i + 1]:\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\n\\tfor i in range(n - 1):\\n\\t\\tif l[i] and r[i + 1]:\\n\\t\\t\\tprint('{} {}'.format(str(i + 1), str(n - i - 1)))\\n\", \"def per(X):\\n\\tS = set(X)\\n\\tif not len(X) == len(S):\\n\\t\\treturn False\\n\\tfor i in range(1, len(X) + 1):\\n\\t\\tif i not in S:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tp = list(map(int, input().split()))\\n\\tm = max(p)\\n\\t(l1, l11) = (m, n - m)\\n\\t(l2, l22) = (n - m, m)\\n\\tans = 0\\n\\tres = []\\n\\tif per(p[l1:]) and per(p[:l1]):\\n\\t\\tans += 1\\n\\t\\tres.append([l1, l11])\\n\\tif per(p[l2:]) and per(p[:l2]):\\n\\t\\tans += 1\\n\\t\\tres.append([l2, l22])\\n\\tif ans == 0:\\n\\t\\tprint(0)\\n\\telif ans == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(*res[0])\\n\\telif res[0] == res[1]:\\n\\t\\tprint(1)\\n\\t\\tprint(*res[0])\\n\\telse:\\n\\t\\tprint(2)\\n\\t\\tprint(*res[0])\\n\\t\\tprint(*res[1])\\n\", \"def is_permutation(xs):\\n\\txs.sort()\\n\\tfor (i, x) in enumerate(xs):\\n\\t\\tif i != x:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef ways_to_split(xs):\\n\\tx_counts = {}\\n\\tx_double_max = -1\\n\\tfor x in xs:\\n\\t\\tx_count = x_counts[x] = 1 + x_counts.get(x, 0)\\n\\t\\tif x_count == 2:\\n\\t\\t\\tif x > x_double_max:\\n\\t\\t\\t\\tx_double_max = x\\n\\t\\telif x_count == 3:\\n\\t\\t\\treturn []\\n\\tif x_double_max == -1:\\n\\t\\traise ValueError('\\u0422\\u0430\\u043a\\u043e\\u0433\\u043e \\u0431\\u044b\\u0442\\u044c \\u043d\\u0435 \\u043c\\u043e\\u0436\\u0435\\u0442 \\u043f\\u043e \\u0443\\u0441\\u043b\\u043e\\u0432\\u0438\\u044e!')\\n\\tl_smaller_perm = x_double_max + 1\\n\\tways = set()\\n\\tif is_permutation(xs[:l_smaller_perm]) and is_permutation(xs[l_smaller_perm:]):\\n\\t\\tways.add((l_smaller_perm, len(xs) - l_smaller_perm))\\n\\tif is_permutation(xs[-l_smaller_perm:]) and is_permutation(xs[:-l_smaller_perm]):\\n\\t\\tways.add((len(xs) - l_smaller_perm, l_smaller_perm))\\n\\treturn ways\\nfor _ in range(int(input())):\\n\\tinput()\\n\\tways = ways_to_split([int(x) - 1 for x in input().split(' ')])\\n\\tprint(len(ways))\\n\\tfor (a, b) in ways:\\n\\t\\tprint(a, b)\\n\", \"def ipr(s):\\n\\tfor n in range(len(s)):\\n\\t\\tif s[n] != n + 1:\\n\\t\\t\\treturn 0\\n\\treturn 1\\n\\ndef chek(s):\\n\\tmp1 = {}\\n\\tmp2 = {}\\n\\tpos = 0\\n\\ta = []\\n\\tb = []\\n\\tfor n in range(len(s)):\\n\\t\\tif s[n] not in mp1 and pos == 0:\\n\\t\\t\\tmp1[s[n]] = 1\\n\\t\\t\\ta.append(s[n])\\n\\t\\telif s[n] not in mp2:\\n\\t\\t\\tpos = 1\\n\\t\\t\\tb.append(s[n])\\n\\t\\t\\tmp2[s[n]] = 1\\n\\t\\telse:\\n\\t\\t\\treturn [0, (0, 0)]\\n\\tif ipr(sorted(a)) and ipr(sorted(b)):\\n\\t\\treturn [1, (len(a), len(b))]\\n\\treturn [0, (0, 0)]\\n\\ndef solv():\\n\\tx = int(input())\\n\\ts = list(map(int, input().split()))\\n\\tres = set()\\n\\t(v, b) = chek(s)\\n\\tif v:\\n\\t\\tres.add(b)\\n\\ts.reverse()\\n\\t(v, b) = chek(s)\\n\\tj = (b[1], b[0])\\n\\tif v:\\n\\t\\tres.add(j)\\n\\tres = list(res)\\n\\tprint(len(res))\\n\\tfor n in res:\\n\\t\\tprint(*n)\\nfor _ in range(int(input())):\\n\\tsolv()\\n\", \"def solve(n):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tMax = max(arr)\\n\\t(np, ans) = (0, [])\\n\\tl1 = sorted(arr[:Max])\\n\\tl2 = sorted(arr[Max:])\\n\\tif l1 == list(range(1, Max + 1)) and l2 == list(range(1, n - Max + 1)):\\n\\t\\tnp += 1\\n\\t\\tans.append((Max, n - Max))\\n\\tl1 = sorted(arr[:n - Max])\\n\\tl2 = sorted(arr[n - Max:])\\n\\tif l1 == list(range(1, n - Max + 1)) and l2 == list(range(1, Max + 1)):\\n\\t\\tnp += 1\\n\\t\\tans.append((n - Max, Max))\\n\\tprint(len(set(ans)))\\n\\tfor (i, j) in list(set(ans)):\\n\\t\\tprint(i, j)\\nt = int(input())\\nfor i in range(t):\\n\\tsolve(i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ts = map(int, input().split())\\n\\ts = list(s)\\n\\ta = set()\\n\\tse = set()\\n\\tm = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] in se:\\n\\t\\t\\tbreak\\n\\t\\tse.add(s[i])\\n\\t\\tm = max(m, s[i])\\n\\t\\tif m == i + 1:\\n\\t\\t\\ta.add(m)\\n\\tb = set()\\n\\tse = set()\\n\\tm = 0\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\tif s[i] in se:\\n\\t\\t\\tbreak\\n\\t\\tse.add(s[i])\\n\\t\\tm = max(m, s[i])\\n\\t\\tif m == n - i:\\n\\t\\t\\tb.add(m)\\n\\tans = []\\n\\tfor i in a:\\n\\t\\tif n - i in b:\\n\\t\\t\\tans.append([i, n - i])\\n\\tprint(len(ans))\\n\\tfor (a, b) in ans:\\n\\t\\tprint(a, b)\\n\", \"import math\\nfrom collections import Counter\\nL = lambda : list(map(int, input().split()))\\nM = lambda : map(int, input().split())\\nI = lambda : int(input())\\nIN = lambda : input()\\n\\ndef s(a):\\n\\tprint(''.join(list(map(str, a))))\\nt = I()\\nfor i in range(t):\\n\\tn = I()\\n\\ta = L()\\n\\tx = 0\\n\\tk = 0\\n\\tl1 = max(a)\\n\\tl2 = n - l1\\n\\tif l1 == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tp = sorted(a[:l1])\\n\\t\\tq = sorted(a[l1:])\\n\\t\\tr = sorted(a[:l2])\\n\\t\\ts = sorted(a[l2:])\\n\\t\\tA = [i for i in range(1, l1 + 1)]\\n\\t\\tB = [i for i in range(1, l2 + 1)]\\n\\t\\tif p == A and q == B:\\n\\t\\t\\tx += 1\\n\\t\\t\\tk = l1\\n\\t\\tif r == B and s == A:\\n\\t\\t\\tx += 1\\n\\t\\t\\tk = l2\\n\\t\\tif l1 == l2 and x > 0:\\n\\t\\t\\tx = 1\\n\\t\\tprint(x)\\n\\t\\tif x == 1:\\n\\t\\t\\tprint(k, n - k)\\n\\t\\telif x == 2:\\n\\t\\t\\tprint(l1, l2)\\n\\t\\t\\tprint(l2, l1)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tset1 = set()\\n\\tset2 = set()\\n\\t_max1 = 0\\n\\t_max2 = 0\\n\\tpossible1 = [False] * n\\n\\tpossible2 = [False] * n\\n\\tcancelled1 = False\\n\\tcancelled2 = False\\n\\tfor i in range(n):\\n\\t\\tj = n - i - 1\\n\\t\\t_max1 = max(_max1, a[i])\\n\\t\\t_max2 = max(_max2, a[j])\\n\\t\\tif not cancelled1 and a[i] not in set1:\\n\\t\\t\\tset1.add(a[i])\\n\\t\\telse:\\n\\t\\t\\tcancelled1 = True\\n\\t\\tif not cancelled2 and a[j] not in set2:\\n\\t\\t\\tset2.add(a[j])\\n\\t\\telse:\\n\\t\\t\\tcancelled2 = True\\n\\t\\tif not cancelled1:\\n\\t\\t\\tpossible1[i] = _max1 == len(set1)\\n\\t\\tif not cancelled2:\\n\\t\\t\\tpossible2[j] = _max2 == len(set2)\\n\\tindices = []\\n\\tfor i in range(n - 1):\\n\\t\\tif possible1[i] and possible2[i + 1]:\\n\\t\\t\\tindices.append([i, i + 1])\\n\\tprint(len(indices))\\n\\tfor i in range(len(indices)):\\n\\t\\tprint(indices[i][0] + 1, n - indices[i][1])\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tmx = max(a)\\n\\tsols = []\\n\\tif mx < n:\\n\\t\\tl1 = list(sorted(a[:mx]))\\n\\t\\tl2 = list(sorted(a[mx:]))\\n\\t\\trl1 = list(range(1, mx + 1))\\n\\t\\trl2 = list(range(1, n - mx + 1))\\n\\t\\tif l1 == rl1 and l2 == rl2:\\n\\t\\t\\tsols.append((mx, n - mx))\\n\\t\\tl1 = list(sorted(a[:n - mx]))\\n\\t\\tl2 = list(sorted(a[n - mx:]))\\n\\t\\tif mx * 2 != n and l1 == rl2 and (l2 == rl1):\\n\\t\\t\\tsols.append((n - mx, mx))\\n\\tprint(len(sols))\\n\\tfor p in sols:\\n\\t\\tprint(*p)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = [int(i) for i in input().split()]\\n\\ti = 0\\n\\ts1 = set()\\n\\ts2 = set()\\n\\tx = []\\n\\tans = 0\\n\\ttotal = set()\\n\\ttotal1 = set()\\n\\twhile i < n - 1:\\n\\t\\tif l[i] in s1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ts1.add(l[i])\\n\\t\\ti += 1\\n\\twhile i < n:\\n\\t\\tif l[i] in s2:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ts2.add(l[i])\\n\\t\\ti += 1\\n\\tfor i in range(1, len(s1) + 1):\\n\\t\\ttotal.add(i)\\n\\tif total - s1 == set() and len(s1) + len(s2) == n:\\n\\t\\tfor i in range(1, n - len(s1) + 1):\\n\\t\\t\\ttotal1.add(i)\\n\\t\\tif total1 - s2 == set():\\n\\t\\t\\tans += 1\\n\\t\\t\\tx = [len(s1), len(s2)]\\n\\ts1.clear()\\n\\ts2.clear()\\n\\ti = n - 1\\n\\twhile i > 0:\\n\\t\\tif l[i] in s1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ts1.add(l[i])\\n\\t\\ti -= 1\\n\\twhile i > -1:\\n\\t\\tif l[i] in s2:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ts2.add(l[i])\\n\\t\\ti -= 1\\n\\ttotal.clear()\\n\\ttotal1.clear()\\n\\ty = []\\n\\tfor i in range(1, len(s1) + 1):\\n\\t\\ttotal.add(i)\\n\\tif total - s1 == set() and len(s1) + len(s2) == n:\\n\\t\\ttotal1 = set()\\n\\t\\tfor i in range(1, n - len(s1) + 1):\\n\\t\\t\\ttotal1.add(i)\\n\\t\\tif total1 - s2 == set():\\n\\t\\t\\tans += 1\\n\\t\\t\\ty = [len(s2), len(s1)]\\n\\tif x == y and x:\\n\\t\\tans -= 1\\n\\t\\ty = []\\n\\tprint(ans)\\n\\tif x:\\n\\t\\tprint(*x)\\n\\tif y:\\n\\t\\tprint(*y)\\n\", \"t = int(input())\\nwhile t > 0:\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tx = max(arr)\\n\\tA = arr[:x]\\n\\tB = arr[x:]\\n\\tC = arr[-x:]\\n\\tD = arr[:-x]\\n\\tA.sort()\\n\\tB.sort()\\n\\tC.sort()\\n\\tD.sort()\\n\\tans = []\\n\\tif x == n - x:\\n\\t\\tif A == list(range(1, x + 1)) and B == list(range(1, n - x + 1)):\\n\\t\\t\\tans += [[x, n - x]]\\n\\telse:\\n\\t\\tif A == list(range(1, x + 1)) and B == list(range(1, n - x + 1)):\\n\\t\\t\\tans += [[x, n - x]]\\n\\t\\tif C == list(range(1, x + 1)) and D == list(range(1, n - x + 1)):\\n\\t\\t\\tans += [[n - x, x]]\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(' '.join([str(x) for x in ans[i]]))\\n\\tt = t - 1\\n\", \"import os\\nfrom io import BytesIO, IOBase\\nimport sys\\nfrom collections import defaultdict, deque, Counter\\nfrom bisect import *\\n\\ndef main():\\n\\tfor t in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tb = Counter(a)\\n\\t\\tans = -1\\n\\t\\tfor i in b:\\n\\t\\t\\tif b[i] > 2:\\n\\t\\t\\t\\tans = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif ans == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tc = []\\n\\t\\t\\tb = len(set(a))\\n\\t\\t\\td = set()\\n\\t\\t\\tfor i in range(n - b):\\n\\t\\t\\t\\td.add(a[i])\\n\\t\\t\\te = set()\\n\\t\\t\\tfor i in range(n - b, n, 1):\\n\\t\\t\\t\\te.add(a[i])\\n\\t\\t\\tf = 0\\n\\t\\t\\tfor i in range(n - b):\\n\\t\\t\\t\\tif i + 1 not in d:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tf1 = 0\\n\\t\\t\\tfor i in range(b):\\n\\t\\t\\t\\tif i + 1 not in e:\\n\\t\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 0 and f1 == 0:\\n\\t\\t\\t\\tc.append([n - b, b])\\n\\t\\t\\td = set()\\n\\t\\t\\tfor i in range(b):\\n\\t\\t\\t\\td.add(a[i])\\n\\t\\t\\te = set()\\n\\t\\t\\tfor i in range(b, n, 1):\\n\\t\\t\\t\\te.add(a[i])\\n\\t\\t\\tf = 0\\n\\t\\t\\tfor i in range(b):\\n\\t\\t\\t\\tif i + 1 not in d:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tf1 = 0\\n\\t\\t\\tfor i in range(n - b):\\n\\t\\t\\t\\tif i + 1 not in e:\\n\\t\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 0 and f1 == 0:\\n\\t\\t\\t\\tc.append([b, n - b])\\n\\t\\t\\t\\tif len(c) == 2:\\n\\t\\t\\t\\t\\tif c[1][0] == c[0][0] and c[1][1] == c[0][1]:\\n\\t\\t\\t\\t\\t\\tc.pop()\\n\\t\\t\\tprint(len(c))\\n\\t\\t\\tfor i in c:\\n\\t\\t\\t\\tprint(*i)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"def comp(n, s):\\n\\tx = n * (n + 1) // 2\\n\\tif x == s:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\n\\ndef comp2(n, s):\\n\\tx = n * (n + 1) // 2\\n\\tx = x ** 2\\n\\tif x == s:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\n\\ndef comp1(n, s):\\n\\tx = n * (n + 1) * (2 * n + 1) // 6\\n\\tif x == s:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\n\\ndef computeXOR(n):\\n\\tif n % 4 == 0:\\n\\t\\treturn n\\n\\tif n % 4 == 1:\\n\\t\\treturn 1\\n\\tif n % 4 == 2:\\n\\t\\treturn n + 1\\n\\treturn 0\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tans = [0] * n\\n\\tans1 = [0] * n\\n\\tans2 = [0] * n\\n\\tans[0] = l[0]\\n\\tans1[0] = l[0] * l[0]\\n\\tans2[0] = l[0] * l[0] * l[0]\\n\\tfor i in range(1, n):\\n\\t\\tans[i] = l[i] + ans[i - 1]\\n\\t\\tans1[i] = l[i] * l[i] + ans1[i - 1]\\n\\t\\tans2[i] = l[i] * l[i] * l[i] + ans2[i - 1]\\n\\tfinal = []\\n\\tfor i in range(n):\\n\\t\\tif comp(i + 1, ans[i]) and comp(n - i - 1, ans[n - 1] - ans[i]) and comp1(i + 1, ans1[i]) and comp1(n - i - 1, ans1[n - 1] - ans1[i]) and comp2(i + 1, ans2[i]) and comp2(n - i - 1, ans2[n - 1] - ans2[i]):\\n\\t\\t\\tfinal.append(i + 1)\\n\\t\\t\\tfinal.append(n - i - 1)\\n\\tif len(final):\\n\\t\\tprint(len(final) // 2)\\n\\t\\tfor i in range(0, len(final), 2):\\n\\t\\t\\tprint(final[i], end=' ')\\n\\t\\t\\tprint(final[i + 1])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\n\\ndef check(l):\\n\\tb = list(range(1, len(l) + 1))\\n\\tl.sort()\\n\\tif l == b:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\nfor i in range(t):\\n\\tcount = 0\\n\\tc = []\\n\\tk = int(input())\\n\\tx = [int(x) for x in input().split()]\\n\\tfor j in [max(x), k - max(x)]:\\n\\t\\ta1 = x[:j]\\n\\t\\ta2 = x[j:]\\n\\t\\tif check(a1) and check(a2):\\n\\t\\t\\tc.append(j)\\n\\tc = list(set(c))\\n\\tprint(len(c))\\n\\tfor m in range(len(c)):\\n\\t\\tprint(c[m], k - c[m])\\n\", \"from collections import Counter\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tc = Counter(a)\\n\\tm = max(c)\\n\\tpossible = True\\n\\tfor i in range(1, m + 1):\\n\\t\\tif c[i] not in [1, 2]:\\n\\t\\t\\tpossible = False\\n\\tl1 = m\\n\\tfor i in range(1, m + 1):\\n\\t\\tif c[i] != 2:\\n\\t\\t\\tl1 = i - 1\\n\\t\\t\\tbreak\\n\\tif c[1] == 0:\\n\\t\\tpossible = False\\n\\tfor i in range(l1 + 1, m + 1):\\n\\t\\tif c[i] != 1:\\n\\t\\t\\tpossible = False\\n\\tif possible:\\n\\t\\ttotal = 0\\n\\t\\tfirstP = False\\n\\t\\tif set(a[:l1]) == set((i for i in range(1, l1 + 1))):\\n\\t\\t\\tif set(a[l1:]) == set((i for i in range(1, m + 1))):\\n\\t\\t\\t\\ttotal += 1\\n\\t\\t\\t\\tfirstP = True\\n\\t\\tif m != l1 and set(a[:m]) == set((i for i in range(1, m + 1))):\\n\\t\\t\\tif set(a[m:]) == set((i for i in range(1, l1 + 1))):\\n\\t\\t\\t\\ttotal += 1\\n\\t\\tprint(total)\\n\\t\\tif firstP:\\n\\t\\t\\tprint(l1, m)\\n\\t\\tif not firstP and total or (total == 2 and m != l1):\\n\\t\\t\\tprint(m, l1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tpos = [int(k) for k in input().split()]\\n\\tdic1 = {}\\n\\tdic2 = {}\\n\\ti = 0\\n\\t(a, b, c, d) = (0, n - 1, 0, n - 1)\\n\\twhile i < n:\\n\\t\\ttry:\\n\\t\\t\\t(a, b) = (dic1[pos[i]], i)\\n\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tdic1[pos[i]] = i\\n\\t\\t\\ti += 1\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\ttry:\\n\\t\\t\\t(c, d) = (i, dic2[pos[i]])\\n\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tdic2[pos[i]] = i\\n\\t\\t\\ti -= 1\\n\\tif b <= c:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tsm1 = 0\\n\\tsm2 = sum(pos)\\n\\ti = 0\\n\\tans = []\\n\\twhile i < c:\\n\\t\\tsm1 += pos[i]\\n\\t\\tsm2 -= pos[i]\\n\\t\\ti += 1\\n\\twhile i < b:\\n\\t\\tsm1 += pos[i]\\n\\t\\tsm2 -= pos[i]\\n\\t\\tif sm1 == (i + 1) * (i + 2) // 2 and sm2 == (n - i) * (n - i - 1) // 2:\\n\\t\\t\\tans.append(i + 1)\\n\\t\\ti += 1\\n\\tprint(len(ans))\\n\\tfor k in ans:\\n\\t\\tprint(k, n - k)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tans = []\\n\\tfin = [0 for j in range(n)]\\n\\tind = -1\\n\\tfor j in range(n):\\n\\t\\tif fin[arr[j] - 1] == 0:\\n\\t\\t\\tfin[arr[j] - 1] = 1\\n\\t\\telse:\\n\\t\\t\\tif sum(fin[0:j]) == j:\\n\\t\\t\\t\\tind = j\\n\\t\\t\\tbreak\\n\\tfin2 = [0 for j in range(n)]\\n\\tif ind != -1:\\n\\t\\tfor j in range(ind, n):\\n\\t\\t\\tif fin2[arr[j] - 1] == 0:\\n\\t\\t\\t\\tfin2[arr[j] - 1] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif sum(fin2[0:n - ind]) == n - ind:\\n\\t\\t\\t\\tans.append(ind)\\n\\tarr.reverse()\\n\\tfin = [0 for j in range(n)]\\n\\tind = -1\\n\\tfor j in range(n):\\n\\t\\tif fin[arr[j] - 1] == 0:\\n\\t\\t\\tfin[arr[j] - 1] = 1\\n\\t\\telse:\\n\\t\\t\\tif sum(fin[0:j]) == j:\\n\\t\\t\\t\\tind = j\\n\\t\\t\\tbreak\\n\\tfin2 = [0 for j in range(n)]\\n\\tif ind != -1:\\n\\t\\tfor j in range(ind, n):\\n\\t\\t\\tif fin2[arr[j] - 1] == 0:\\n\\t\\t\\t\\tfin2[arr[j] - 1] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif sum(fin2[0:n - ind]) == n - ind:\\n\\t\\t\\t\\tif len(ans) > 0:\\n\\t\\t\\t\\t\\tif ans[0] != n - ind:\\n\\t\\t\\t\\t\\t\\tans.append(n - ind)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tans.append(n - ind)\\n\\tprint(len(ans))\\n\\tfor x in ans:\\n\\t\\tprint(str(x) + ' ' + str(n - x))\\n\", \"def search(p1, p2, lp1, lp2):\\n\\tused_1 = [True] + [False] * lp1\\n\\tfor ele in p1:\\n\\t\\tif ele > lp1:\\n\\t\\t\\treturn False\\n\\t\\telif used_1[ele] == False:\\n\\t\\t\\tused_1[ele] = True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\tused_2 = [True] + [False] * lp2\\n\\tfor ele in p2:\\n\\t\\tif ele > lp2:\\n\\t\\t\\treturn False\\n\\t\\telif used_2[ele] == False:\\n\\t\\t\\tused_2[ele] = True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef solve(ans1, ans2):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tma = max(a)\\n\\tcount = 0\\n\\tp1 = a[0:ma:1]\\n\\tp2 = a[ma:]\\n\\tstm1 = search(p1, p2, ma, n - ma)\\n\\tif stm1:\\n\\t\\tcount += 1\\n\\t\\tans2.append([ma, n - ma])\\n\\tif ma == n - ma:\\n\\t\\tans1.append(count)\\n\\t\\treturn\\n\\tp1 = a[0:n - ma:1]\\n\\tp2 = a[n - ma:]\\n\\tstm2 = search(p1, p2, n - ma, ma)\\n\\tif stm2:\\n\\t\\tcount += 1\\n\\t\\tans2.append([n - ma, ma])\\n\\tans1.append(count)\\n\\treturn\\nn = int(input())\\nans1 = []\\nans2 = []\\nfor i in range(n):\\n\\tsolve(ans1, ans2)\\nfor ele in ans1:\\n\\tprint(ele)\\n\\tfor i in range(ele):\\n\\t\\tprint(*ans2[0])\\n\\t\\tans2.pop(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tc = 0\\n\\td = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] == 1 and c == 0:\\n\\t\\t\\tfirst = i\\n\\t\\t\\tc += 1\\n\\t\\telif arr[i] == 1 and c == 1:\\n\\t\\t\\tsecond = i\\n\\t\\t\\tc += 1\\n\\t\\telif arr[i] == 1:\\n\\t\\t\\tc += 1\\n\\tif c == 2:\\n\\t\\tvar = 1\\n\\t\\ttemp = [False] * n\\n\\t\\ts = set()\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif arr[i] in s:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ts.add(arr[i])\\n\\t\\t\\twhile var in s:\\n\\t\\t\\t\\ts.remove(var)\\n\\t\\t\\t\\tvar += 1\\n\\t\\t\\tif len(s) == 0:\\n\\t\\t\\t\\ttemp[i] = True\\n\\t\\t\\telse:\\n\\t\\t\\t\\ttemp[i] = False\\n\\t\\tvar = 1\\n\\t\\tnewTemp = [False] * n\\n\\t\\tarr.reverse()\\n\\t\\ts = set()\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif arr[i] in s:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ts.add(arr[i])\\n\\t\\t\\twhile var in s:\\n\\t\\t\\t\\ts.remove(var)\\n\\t\\t\\t\\tvar += 1\\n\\t\\t\\tif len(s) == 0:\\n\\t\\t\\t\\tnewTemp[i] = True\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnewTemp[i] = False\\n\\t\\tnewTemp.reverse()\\n\\t\\tans = []\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif temp[i] == newTemp[i + 1] == 1:\\n\\t\\t\\t\\tans.append((i + 1, n - i - 1))\\n\\t\\tprint(len(ans))\\n\\t\\tif len(ans):\\n\\t\\t\\tfor (l, r) in ans:\\n\\t\\t\\t\\tprint(l, r)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tmaxi = max(arr)\\n\\tli = []\\n\\tfor k in range(2):\\n\\t\\tif set(arr[:maxi]) == set(range(1, maxi + 1)) and set(arr[maxi:]) == set(range(1, n - maxi + 1)):\\n\\t\\t\\tli.append(maxi)\\n\\t\\tmaxi = n - maxi\\n\\tli = set(li)\\n\\tprint(len(li))\\n\\tfor i in li:\\n\\t\\tprint(i, n - i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ts = set()\\n\\t(ans, mx, mn) = (set(), 0, float('inf'))\\n\\t(pre, suf) = ([False] * n, [False] * n)\\n\\tfor i in range(n):\\n\\t\\tmn = min(mn, a[i])\\n\\t\\tmx = max(mx, a[i])\\n\\t\\ts.add(a[i])\\n\\t\\tpre[i] = mx == len(s) == i + 1 and mn == 1\\n\\tmx = 0\\n\\ts = set()\\n\\tmn = float('inf')\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tmn = min(mn, a[i])\\n\\t\\tmx = max(mx, a[i])\\n\\t\\ts.add(a[i])\\n\\t\\tsuf[i] = mx == len(s) == n - i and mn == 1\\n\\tfor i in range(n):\\n\\t\\tif pre[i] and suf[i + 1]:\\n\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\tif ans == []:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i[0], i[1])\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ts = max(l)\\n\\ts1 = n - s\\n\\tif s1 <= 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tp1 = set()\\n\\tp2 = set()\\n\\td = set()\\n\\td1 = set()\\n\\tlw = []\\n\\tans = 0\\n\\tfor j in range(s1):\\n\\t\\td.add(j + 1)\\n\\tfor j in range(s):\\n\\t\\td1.add(j + 1)\\n\\tfor j in range(s1):\\n\\t\\tp1.add(l[j])\\n\\tfor j in range(s1, n):\\n\\t\\tp2.add(l[j])\\n\\tif p1 == d and p2 == d1:\\n\\t\\tans += 1\\n\\t\\tlw.append([s1, s])\\n\\t\\tif s == s1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(s1, s)\\n\\t\\t\\tcontinue\\n\\tp1 = set()\\n\\tp2 = set()\\n\\tfor j in range(s):\\n\\t\\tp2.add(l[j])\\n\\tfor j in range(s, n):\\n\\t\\tp1.add(l[j])\\n\\tif p1 == d and p2 == d1:\\n\\t\\tans += 1\\n\\t\\tlw.append([s, s1])\\n\\tprint(ans)\\n\\tfor j in range(len(lw)):\\n\\t\\tprint(lw[j][0], lw[j][1])\\n\", \"t = int(input())\\nwhile t > 0:\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tb = []\\n\\tfor i in range(n + 1):\\n\\t\\tb.append(-1)\\n\\tk1 = -1\\n\\tfor i in range(n):\\n\\t\\tif b[a[i]] == -1:\\n\\t\\t\\tb[a[i]] = i\\n\\t\\telse:\\n\\t\\t\\tk1 = i\\n\\t\\t\\tbreak\\n\\tfor i in range(n + 1):\\n\\t\\tb[i] = -1\\n\\tk2 = -1\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif b[a[i]] == -1:\\n\\t\\t\\tb[a[i]] = i\\n\\t\\telse:\\n\\t\\t\\tk2 = i\\n\\t\\t\\tbreak\\n\\tif k1 > k2:\\n\\t\\ttemp = k1\\n\\t\\tk1 = k2\\n\\t\\tk2 = temp\\n\\tif k1 == -1 or k2 == -1:\\n\\t\\tprint(0)\\n\\t\\tt -= 1\\n\\t\\tcontinue\\n\\ta1 = []\\n\\ta2 = []\\n\\tb1 = []\\n\\tb2 = []\\n\\tfor i in range(n):\\n\\t\\tif i <= k1:\\n\\t\\t\\ta1.append(a[i])\\n\\t\\telse:\\n\\t\\t\\ta2.append(a[i])\\n\\tfor i in range(n):\\n\\t\\tif i < k2:\\n\\t\\t\\tb1.append(a[i])\\n\\t\\telse:\\n\\t\\t\\tb2.append(a[i])\\n\\ta1.sort()\\n\\ta2.sort()\\n\\tb1.sort()\\n\\tb2.sort()\\n\\tflaga = 0\\n\\tflagb = 0\\n\\tfor i in range(1, len(a1)):\\n\\t\\tif a1[i] - 1 != a1[i - 1]:\\n\\t\\t\\tflaga = 1\\n\\tfor i in range(1, len(a2)):\\n\\t\\tif a2[i] - 1 != a2[i - 1]:\\n\\t\\t\\tflaga = 1\\n\\tfor i in range(1, len(b1)):\\n\\t\\tif b1[i] - 1 != b1[i - 1]:\\n\\t\\t\\tflagb = 1\\n\\tfor i in range(1, len(b2)):\\n\\t\\tif b2[i] - 1 != b2[i - 1]:\\n\\t\\t\\tflagb = 1\\n\\tif a1[0] != 1 and a1[-1] != k1 + 1:\\n\\t\\tflaga = 1\\n\\tif a2[0] != 1 and a2[-1] != n - (k1 + 1):\\n\\t\\tflaga = 1\\n\\tif b1[0] != 1 and b1[-1] != k2:\\n\\t\\tflagb = 1\\n\\tif b2[0] != 1 and b2[-1] != n - k2:\\n\\t\\tflagb = 1\\n\\tif a1 == b1 and a2 == b2:\\n\\t\\tflagb = 1\\n\\tprint(2 - (flagb + flaga))\\n\\tif flaga == 0:\\n\\t\\tprint(k1 + 1, n - (k1 + 1))\\n\\tif flagb == 0:\\n\\t\\tprint(k2, n - k2)\\n\\tt -= 1\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\taa = list(map(int, input().split()))\\n\\tss = set()\\n\\tst = 0\\n\\tind = 1\\n\\tpre = [0 for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif aa[i] in ss:\\n\\t\\t\\tbreak\\n\\t\\tss.add(aa[i])\\n\\t\\twhile ind <= len(ss):\\n\\t\\t\\tif ind in ss:\\n\\t\\t\\t\\tind += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tif len(ss) != ind - 1:\\n\\t\\t\\tpre[i] = 0\\n\\t\\telse:\\n\\t\\t\\tpre[i] = ind\\n\\tind = 1\\n\\tss = set()\\n\\tsuff = [0 for i in range(n)]\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif aa[i] in ss:\\n\\t\\t\\tbreak\\n\\t\\tss.add(aa[i])\\n\\t\\twhile ind <= len(ss):\\n\\t\\t\\tif ind in ss:\\n\\t\\t\\t\\tind += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tif len(ss) != ind - 1:\\n\\t\\t\\tsuff[i] = 0\\n\\t\\telse:\\n\\t\\t\\tsuff[i] = ind\\n\\ttot = 0\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif pre[i] > 0 and suff[i + 1] > 0:\\n\\t\\t\\ttot += 1\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\tprint(tot)\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"def solve(nums, n):\\n\\tused = [False] * n * 2\\n\\tused[0] = True\\n\\tpos = 0\\n\\tans_left = []\\n\\tfor (i, num) in enumerate(nums):\\n\\t\\tused[num] = True\\n\\t\\twhile used[pos + 1] and pos <= i + 1:\\n\\t\\t\\tpos += 1\\n\\t\\tif pos == i + 1:\\n\\t\\t\\tans_left.append((pos, n - pos))\\n\\tnums = list(reversed(nums))\\n\\tused = [False] * n * 2\\n\\tused[0] = True\\n\\tpos = 0\\n\\tans_right = []\\n\\tfor (i, num) in enumerate(nums):\\n\\t\\tused[num] = True\\n\\t\\twhile used[pos + 1] and pos <= i + 1:\\n\\t\\t\\tpos += 1\\n\\t\\tif pos == i + 1:\\n\\t\\t\\tans_right.append((n - pos, pos))\\n\\tans_left = set(ans_left)\\n\\tans_right = set(ans_right)\\n\\treturn list(ans_left.intersection(ans_right))\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tnums = list(map(int, input().split()))\\n\\tans = solve(nums, n)\\n\\tprint(len(ans))\\n\\tfor a in ans:\\n\\t\\tprint(a[0], a[1])\\n\", \"for T in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tp1 = max(arr)\\n\\tv1 = [False] * (p1 + 1)\\n\\tv1[0] = True\\n\\tp2 = n - p1\\n\\tv2 = [False] * (p2 + 1)\\n\\tv2[0] = True\\n\\tlis = []\\n\\tif p2 > p1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tres1 = 1\\n\\t\\tfor i in range(p1):\\n\\t\\t\\tif v1[arr[i]] == False:\\n\\t\\t\\t\\tv1[arr[i]] = True\\n\\t\\tfor i in range(p1 + 1):\\n\\t\\t\\tif v1[i] == False:\\n\\t\\t\\t\\tres1 = -1\\n\\t\\t\\t\\tbreak\\n\\t\\tif res1 == 1:\\n\\t\\t\\tres2 = 1\\n\\t\\t\\tfor i in range(p1, n):\\n\\t\\t\\t\\tif arr[i] < p2 + 1 and v2[arr[i]] == False:\\n\\t\\t\\t\\t\\tv2[arr[i]] = True\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tfor i in range(p2 + 1):\\n\\t\\t\\t\\tif v2[i] == False:\\n\\t\\t\\t\\t\\tres2 = -1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif res2 == 1:\\n\\t\\t\\t\\tlis.append((p1, p2))\\n\\t\\tif p1 != p2:\\n\\t\\t\\tv1 = [False] * (p2 + 1)\\n\\t\\t\\tv1[0] = True\\n\\t\\t\\tv2 = [False] * (p1 + 1)\\n\\t\\t\\tv2[0] = True\\n\\t\\t\\tres4 = 1\\n\\t\\t\\tfor i in range(p2, n):\\n\\t\\t\\t\\tif v2[arr[i]] == False:\\n\\t\\t\\t\\t\\tv2[arr[i]] = True\\n\\t\\t\\tfor i in range(p1 + 1):\\n\\t\\t\\t\\tif v2[i] == False:\\n\\t\\t\\t\\t\\tres4 = -1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif res4 == 1:\\n\\t\\t\\t\\tres3 = 1\\n\\t\\t\\t\\tfor i in range(p2):\\n\\t\\t\\t\\t\\tif arr[i] < p2 + 1 and v1[arr[i]] == False:\\n\\t\\t\\t\\t\\t\\tv1[arr[i]] = True\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tfor i in range(p2 + 1):\\n\\t\\t\\t\\t\\tif v1[i] == False:\\n\\t\\t\\t\\t\\t\\tres3 = -1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tif res3 == 1:\\n\\t\\t\\t\\t\\tlis.append((p2, p1))\\n\\t\\tif len(lis) == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(len(lis))\\n\\t\\t\\tfor (a, b) in lis:\\n\\t\\t\\t\\tprint(a, b)\\n\", \"from collections import Counter\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tx = list(map(int, input().split()))\\n\\tmx = max(x)\\n\\tm = n - mx\\n\\tif n == 1 or m <= 0 or m > mx:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\td1 = Counter(x[:m])\\n\\t\\td2 = Counter(x[m:])\\n\\t\\tf1 = 1\\n\\t\\tf2 = 1\\n\\t\\tfor i in range(1, m + 1):\\n\\t\\t\\tif i not in d1:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif d1[i] > 1:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, mx + 1):\\n\\t\\t\\tif i not in d2:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif d2[i] > 1:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\td1 = Counter(x[:mx])\\n\\t\\td2 = Counter(x[mx:])\\n\\t\\tfor i in range(1, m + 1):\\n\\t\\t\\tif i not in d2:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif d2[i] > 1:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, mx + 1):\\n\\t\\t\\tif i not in d1:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif d1[i] > 1:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif f1 == 1 and f2 == 1:\\n\\t\\t\\tif m != mx:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(m, mx)\\n\\t\\t\\t\\tprint(mx, m)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(m, mx)\\n\\t\\telif f1 == 1 and f2 == 0:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, mx)\\n\\t\\telif f1 == 0 and f2 == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(mx, m)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef swaparr(arr, a, b):\\n\\ttemp = arr[a]\\n\\tarr[a] = arr[b]\\n\\tarr[b] = temp\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b % a, a)\\n\\ndef nCr(n, k):\\n\\tif k > n - k:\\n\\t\\tk = n - k\\n\\tres = 1\\n\\tfor i in range(k):\\n\\t\\tres = res * (n - i)\\n\\t\\tres = res / (i + 1)\\n\\treturn res\\n\\ndef upper_bound(a, x, lo=0):\\n\\thi = len(a)\\n\\twhile lo < hi:\\n\\t\\tmid = (lo + hi) // 2\\n\\t\\tif a[mid] < x:\\n\\t\\t\\tlo = mid + 1\\n\\t\\telse:\\n\\t\\t\\thi = mid\\n\\treturn lo\\n\\ndef primefs(n):\\n\\tprimes = {}\\n\\twhile n % 2 == 0:\\n\\t\\tprimes[2] = primes.get(2, 0) + 1\\n\\t\\tn = n // 2\\n\\tfor i in range(3, int(n ** 0.5) + 2, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tprimes[i] = primes.get(i, 0) + 1\\n\\t\\t\\tn = n // i\\n\\tif n > 2:\\n\\t\\tprimes[n] = primes.get(n, 0) + 1\\n\\treturn primes\\n\\ndef power(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef swap(a, b):\\n\\ttemp = a\\n\\ta = b\\n\\tb = temp\\n\\treturn (a, b)\\n\\ndef find(x, link):\\n\\tp = x\\n\\twhile p != link[p]:\\n\\t\\tp = link[p]\\n\\twhile x != p:\\n\\t\\tnex = link[x]\\n\\t\\tlink[x] = p\\n\\t\\tx = nex\\n\\treturn p\\n\\ndef union(x, y, link, size):\\n\\tx = find(x, link)\\n\\ty = find(y, link)\\n\\tif size[x] < size[y]:\\n\\t\\t(x, y) = swap(x, y)\\n\\tif x != y:\\n\\t\\tsize[x] += size[y]\\n\\t\\tlink[y] = x\\n\\ndef sieve(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\treturn prime\\nMAXN = int(1000000.0 + 5)\\n\\ndef spf_sieve():\\n\\tspf[1] = 1\\n\\tfor i in range(2, MAXN):\\n\\t\\tspf[i] = i\\n\\tfor i in range(4, MAXN, 2):\\n\\t\\tspf[i] = 2\\n\\tfor i in range(3, ceil(MAXN ** 0.5), 2):\\n\\t\\tif spf[i] == i:\\n\\t\\t\\tfor j in range(i * i, MAXN, i):\\n\\t\\t\\t\\tif spf[j] == j:\\n\\t\\t\\t\\t\\tspf[j] = i\\n\\ndef factoriazation(x):\\n\\tret = {}\\n\\twhile x != 1:\\n\\t\\tret[spf[x]] = ret.get(spf[x], 0) + 1\\n\\t\\tx = x // spf[x]\\n\\treturn ret\\n\\ndef int_array():\\n\\treturn list(map(int, input().strip().split()))\\n\\ndef str_array():\\n\\treturn input().strip().split()\\nMOD = int(1000000000.0) + 7\\nCMOD = 998244353\\nINF = float('inf')\\nNINF = -float('inf')\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = int_array()\\n\\tleft = []\\n\\txset = set()\\n\\tlength = 0\\n\\tmini = INF\\n\\tmaxi = NINF\\n\\tfor i in a:\\n\\t\\tif i in xset:\\n\\t\\t\\tbreak\\n\\t\\txset.add(i)\\n\\t\\tlength += 1\\n\\t\\tmini = min(i, mini)\\n\\t\\tmaxi = max(maxi, i)\\n\\t\\tif mini == 1 and maxi == length:\\n\\t\\t\\tleft.append(length)\\n\\ta = a[::-1]\\n\\tfirst = left.copy()\\n\\tleft = []\\n\\txset = set()\\n\\tlength = 0\\n\\tmini = INF\\n\\tmaxi = NINF\\n\\tfor i in a:\\n\\t\\tif i in xset:\\n\\t\\t\\tbreak\\n\\t\\txset.add(i)\\n\\t\\tlength += 1\\n\\t\\tmini = min(i, mini)\\n\\t\\tmaxi = max(maxi, i)\\n\\t\\tif mini == 1 and maxi == length:\\n\\t\\t\\tleft.append(length)\\n\\tfirst = set(first)\\n\\tsecond = set(left)\\n\\tans = 0\\n\\tthis = []\\n\\tfor i in first:\\n\\t\\tif n - i in second:\\n\\t\\t\\tans += 1\\n\\t\\t\\tthis.append((i, n - i))\\n\\tprint(ans)\\n\\tfor i in this:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor you in range(t):\\n\\tn = int(input())\\n\\tl = input().split()\\n\\tli = [int(i) for i in l]\\n\\tz = max(li)\\n\\ty = n - z\\n\\tif y <= 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\thashi1 = dict()\\n\\thashi2 = dict()\\n\\tfor i in range(1, z + 1):\\n\\t\\thashi1[i] = 1\\n\\tfor i in range(1, y + 1):\\n\\t\\thashi2[i] = 1\\n\\thashi1c = hashi1.copy()\\n\\thashi2c = hashi2.copy()\\n\\tl = []\\n\\tposs = 1\\n\\tfor i in range(z):\\n\\t\\tif li[i] not in hashi1 or hashi1[li[i]] == 0:\\n\\t\\t\\tposs = 0\\n\\t\\t\\tbreak\\n\\t\\thashi1[li[i]] -= 1\\n\\tfor i in range(z, n):\\n\\t\\tif li[i] not in hashi2 or hashi2[li[i]] == 0:\\n\\t\\t\\tposs = 0\\n\\t\\t\\tbreak\\n\\t\\thashi2[li[i]] -= 1\\n\\tif poss:\\n\\t\\tl.append((z, y))\\n\\tposs = 1\\n\\tfor i in range(y):\\n\\t\\tif li[i] not in hashi2c or hashi2c[li[i]] == 0:\\n\\t\\t\\tposs = 0\\n\\t\\t\\tbreak\\n\\t\\thashi2c[li[i]] -= 1\\n\\tfor i in range(y, n):\\n\\t\\tif li[i] not in hashi1c or hashi1c[li[i]] == 0:\\n\\t\\t\\tposs = 0\\n\\t\\t\\tbreak\\n\\t\\thashi1c[li[i]] -= 1\\n\\tif poss and (y, z) != (z, y):\\n\\t\\tl.append((y, z))\\n\\tprint(len(l))\\n\\tfor i in l:\\n\\t\\tprint(i[0], i[1])\\n\", \"def perm(A):\\n\\tmax_a = 0\\n\\tS = set()\\n\\tret = set()\\n\\tfor (i, a) in enumerate(A):\\n\\t\\tif max_a < a:\\n\\t\\t\\tmax_a = a\\n\\t\\tS.add(a)\\n\\t\\tif max_a == i + 1 and len(S) == i + 1:\\n\\t\\t\\tret.add(max_a)\\n\\treturn ret\\n\\ndef main():\\n\\tfor _ in [0] * int(input()):\\n\\t\\tn = int(input())\\n\\t\\tA = list(map(int, input().split()))\\n\\t\\tleft = perm(A)\\n\\t\\tright = perm(A[::-1])\\n\\t\\tans = []\\n\\t\\tfor l in left:\\n\\t\\t\\tif n - l in right:\\n\\t\\t\\t\\tans.append(l)\\n\\t\\tprint(len(ans))\\n\\t\\t[print(l, n - l) for l in ans]\\nmain()\\n\", \"for t in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tm = 0\\n\\ts = 0\\n\\td = {}\\n\\tans1 = {}\\n\\tfor i in range(n):\\n\\t\\tif l[i] > m:\\n\\t\\t\\tm = l[i]\\n\\t\\ttry:\\n\\t\\t\\td[l[i]] += 5\\n\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\t\\ts += 1\\n\\t\\tif s == m:\\n\\t\\t\\tans1[i + 1, n - i - 1] = 2\\n\\tans = []\\n\\tl = l[::-1]\\n\\tm = 0\\n\\ts = 0\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\tif l[i] > m:\\n\\t\\t\\tm = l[i]\\n\\t\\ttry:\\n\\t\\t\\td[l[i]] += 5\\n\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\t\\ts += 1\\n\\t\\tif s == m:\\n\\t\\t\\ttry:\\n\\t\\t\\t\\tans1[n - i - 1, i + 1] += 5\\n\\t\\t\\t\\tans.append([n - i - 1, i + 1])\\n\\t\\t\\texcept:\\n\\t\\t\\t\\tkk = 5\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(ans[i][0], ans[i][1])\\n\", \"cycles = int(input())\\n\\ndef find_first(vals, high, high2):\\n\\ts1 = set(range(1, high + 1))\\n\\ts2 = set(range(1, high2 + 1))\\n\\tfor i in range(high):\\n\\t\\tval = vals[i]\\n\\t\\tif val not in s1:\\n\\t\\t\\treturn []\\n\\t\\telse:\\n\\t\\t\\ts1.remove(val)\\n\\tif len(s1) != 0:\\n\\t\\treturn []\\n\\tfor i in range(high, high + high2):\\n\\t\\tval = vals[i]\\n\\t\\tif val not in s2:\\n\\t\\t\\treturn []\\n\\t\\telse:\\n\\t\\t\\ts2.remove(val)\\n\\tif len(s2) != 0:\\n\\t\\treturn []\\n\\treturn [[high, high2]]\\n\\ndef find_second(vals, high, high2):\\n\\ts1 = set(range(1, high + 1))\\n\\ts2 = set(range(1, high2 + 1))\\n\\tfor i in range(high2):\\n\\t\\tval = vals[i]\\n\\t\\tif val not in s2:\\n\\t\\t\\treturn []\\n\\t\\telse:\\n\\t\\t\\ts2.remove(val)\\n\\tif len(s2) != 0:\\n\\t\\treturn []\\n\\tfor i in range(high2, high + high2):\\n\\t\\tval = vals[i]\\n\\t\\tif val not in s1:\\n\\t\\t\\treturn []\\n\\t\\telse:\\n\\t\\t\\ts1.remove(val)\\n\\tif len(s1) != 0:\\n\\t\\treturn []\\n\\treturn [[high2, high]]\\n\\ndef find(vals):\\n\\tif len(vals) < 2:\\n\\t\\treturn []\\n\\telif len(vals) == [1, 1]:\\n\\t\\treturn [[1, 1]]\\n\\telse:\\n\\t\\thigh = max(vals)\\n\\t\\thigh2 = len(vals) - high\\n\\t\\tif high == high2:\\n\\t\\t\\treturn find_first(vals, high, high2)\\n\\t\\treturn find_second(vals, high, high2) + find_first(vals, high, high2)\\nresults = []\\nfor cycle in range(cycles):\\n\\tn = int(input())\\n\\tvals = map(int, input().split())\\n\\tresults.append(find(list(vals)))\\nfor r in results:\\n\\tprint(len(r))\\n\\tfor s in r:\\n\\t\\tprint('%d %d' % (s[0], s[1]))\\n\", \"from sys import stdin, stdout\\nt = int(stdin.readline())\\nfor query in range(t):\\n\\tn = int(stdin.readline())\\n\\ta = stdin.readline().split()\\n\\tfor num in range(n):\\n\\t\\ta[num] = int(a[num])\\n\\tb = sorted(a[:])\\n\\tcounter1 = 1\\n\\tcounter2 = 0\\n\\twhile b[counter2] == counter1 and b[counter2 + 1] == counter1:\\n\\t\\tcounter2 += 2\\n\\t\\tcounter1 += 1\\n\\t\\tif counter2 + 1 >= n:\\n\\t\\t\\tbreak\\n\\tcounter1 -= 1\\n\\tsolutions = 0\\n\\tcounter2 = counter1\\n\\tcounter3 = 0\\n\\tmysolutions = []\\n\\twhile counter2:\\n\\t\\tif a[counter3] <= counter1:\\n\\t\\t\\tcounter2 = counter2 - 1\\n\\t\\tcounter3 += 1\\n\\tlist1 = sorted(a[:counter3])\\n\\tlist2 = sorted(a[counter3:])\\n\\tlist1bool = True\\n\\tlist2bool = True\\n\\tfor x in range(counter3):\\n\\t\\tif list1[x] != x + 1:\\n\\t\\t\\tlist1bool = False\\n\\tfor x in range(n - counter3):\\n\\t\\tif list2[x] != x + 1:\\n\\t\\t\\tlist2bool = False\\n\\tif list1bool and list2bool:\\n\\t\\tsolutions += 1\\n\\t\\tmysolutions.append([counter3, n - counter3])\\n\\tcounter2 = counter1\\n\\tcounter3 = n - 1\\n\\twhile counter2:\\n\\t\\tif a[counter3] <= counter1:\\n\\t\\t\\tcounter2 = counter2 - 1\\n\\t\\tcounter3 -= 1\\n\\tlist1 = sorted(a[:counter3 + 1])\\n\\tlist2 = sorted(a[counter3 + 1:])\\n\\tlist1bool = True\\n\\tlist2bool = True\\n\\tfor x in range(counter3 + 1):\\n\\t\\tif list1[x] != x + 1:\\n\\t\\t\\tlist1bool = False\\n\\tfor x in range(n - counter3 - 1):\\n\\t\\tif list2[x] != x + 1:\\n\\t\\t\\tlist2bool = False\\n\\tif list1bool and list2bool:\\n\\t\\tsolutions += 1\\n\\t\\tmysolutions.append([counter3 + 1, n - counter3 - 1])\\n\\tif solutions == 2:\\n\\t\\tif mysolutions[0] == mysolutions[1]:\\n\\t\\t\\tmysolutions.remove(mysolutions[0])\\n\\t\\t\\tsolutions -= 1\\n\\tstdout.write('\\\\n' + str(solutions) + '\\\\n')\\n\\tfor solution in range(solutions):\\n\\t\\tstdout.write(str(mysolutions[solution][0]) + ' ' + str(mysolutions[solution][1]) + '\\\\n')\\n\", \"import heapq\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tq = []\\n\\ts = set()\\n\\tmemo = [0] * n\\n\\tret = []\\n\\tfor i in range(n):\\n\\t\\theapq.heappush(q, -a[i])\\n\\t\\tcmax = heapq.heappop(q)\\n\\t\\theapq.heappush(q, cmax)\\n\\t\\ts.add(a[i])\\n\\t\\tif len(s) == i + 1 and -cmax == i + 1:\\n\\t\\t\\tmemo[i] = 1\\n\\tq = []\\n\\ts = set()\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\theapq.heappush(q, -a[i])\\n\\t\\tcmax = heapq.heappop(q)\\n\\t\\theapq.heappush(q, cmax)\\n\\t\\ts.add(a[i])\\n\\t\\tif len(s) == n - i and -cmax == n - i and (memo[i - 1] == 1):\\n\\t\\t\\tret.append(i)\\n\\tprint(len(ret))\\n\\tfor r in ret:\\n\\t\\tprint('{} {}'.format(r, n - r))\\n\", \"def permutationChecker(a):\\n\\ttemp_dict = {}\\n\\tfor f1 in a:\\n\\t\\tif f1 not in temp_dict.keys():\\n\\t\\t\\ttemp_dict[f1] = 1\\n\\t\\telse:\\n\\t\\t\\ttemp_dict[f1] += 1\\n\\tfor f1 in range(1, max(temp_dict.keys()) + 1, 1):\\n\\t\\tif f1 not in temp_dict.keys():\\n\\t\\t\\treturn False\\n\\t\\telif temp_dict[f1] > 1:\\n\\t\\t\\treturn False\\n\\treturn True\\ntestCases = int(input())\\nfor i1 in range(testCases):\\n\\tlength = int(input())\\n\\tnumbers = list(map(int, input().split()))\\n\\tindex = max(numbers)\\n\\tmax_count = numbers.count(index)\\n\\tif max_count == 2:\\n\\t\\tif length % 2 == 1:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tleft = permutationChecker(numbers[0:length // 2])\\n\\t\\t\\tright = permutationChecker(numbers[length // 2:length])\\n\\t\\t\\tif left and right:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(length // 2, length // 2)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tleft_included = permutationChecker(numbers[0:index])\\n\\tleft_excluded = permutationChecker(numbers[0:length - index])\\n\\tright_excluded = permutationChecker(numbers[index:length])\\n\\tright_included = permutationChecker(numbers[length - index:length])\\n\\tresult = 0\\n\\tsolution = []\\n\\tif left_excluded and right_included:\\n\\t\\tresult += 1\\n\\t\\tsolution.append([length - index, index])\\n\\tif left_included and right_excluded:\\n\\t\\tresult += 1\\n\\t\\tsolution.append([index, length - index])\\n\\tif result == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(result)\\n\\t\\tfor i2 in solution:\\n\\t\\t\\tprint(i2[0], i2[1])\\n\", \"def give(n):\\n\\treturn n * (n + 1) // 2\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = [0] * n\\n\\tsum = 0\\n\\ti = 0\\n\\tone = [0] * n\\n\\twhile i <= n - 2:\\n\\t\\tif b[a[i]]:\\n\\t\\t\\tbreak\\n\\t\\tsum += a[i]\\n\\t\\tb[a[i]] = 1\\n\\t\\tif sum == give(i + 1):\\n\\t\\t\\tone[i] += i + 1\\n\\t\\ti += 1\\n\\tk = 0\\n\\tthis = []\\n\\tb = [0] * n\\n\\tsum = 0\\n\\ti = n - 1\\n\\twhile i >= 1:\\n\\t\\tif b[a[i]]:\\n\\t\\t\\tbreak\\n\\t\\tsum += a[i]\\n\\t\\tb[a[i]] = 1\\n\\t\\tif sum == give(n - i):\\n\\t\\t\\tone[i - 1] += n - i\\n\\t\\ti -= 1\\n\\tfor i in range(n):\\n\\t\\tif one[i] == n:\\n\\t\\t\\tk += 1\\n\\t\\t\\tthis.append([i + 1, n - i - 1])\\n\\tprint(k)\\n\\tfor x in this:\\n\\t\\tprint(*x)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tpref = dict()\\n\\tsuff = dict()\\n\\tmx = 0\\n\\tcurr = set()\\n\\tfor i in range(n):\\n\\t\\tif a[i] > mx:\\n\\t\\t\\tmx = a[i]\\n\\t\\tcurr.add(a[i])\\n\\t\\tif mx == i + 1 and len(curr) == i + 1:\\n\\t\\t\\tpref[i + 1] = True\\n\\t\\telse:\\n\\t\\t\\tpref[i + 1] = False\\n\\tmx = 0\\n\\tcurr = set()\\n\\tfor i in range(n):\\n\\t\\tj = n - i - 1\\n\\t\\tif a[j] > mx:\\n\\t\\t\\tmx = a[j]\\n\\t\\tcurr.add(a[j])\\n\\t\\tif mx == i + 1 and len(curr) == i + 1:\\n\\t\\t\\tsuff[i + 1] = True\\n\\t\\telse:\\n\\t\\t\\tsuff[i + 1] = False\\n\\tk = 0\\n\\tans = []\\n\\tfor i in range(1, n + 1):\\n\\t\\tif pref[i] and suff[n - i]:\\n\\t\\t\\tans.append(str(i) + ' ' + str(n - i))\\n\\t\\t\\tk += 1\\n\\tprint(k)\\n\\tfor i in range(k):\\n\\t\\tprint(ans[i])\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tml = [0 for _ in range(n)]\\n\\tmr = [0 for _ in range(n)]\\n\\tmr[-1] = a[-1]\\n\\tml[0] = a[0]\\n\\tfor i in range(1, len(a)):\\n\\t\\tml[i] = max(ml[i - 1], a[i])\\n\\tfor i in range(len(a) - 2, -1, -1):\\n\\t\\tmr[i] = max(mr[i + 1], a[i])\\n\\tllegnth = [0 for _ in range(n)]\\n\\trlength = [0 for _ in range(n)]\\n\\ttemp = set()\\n\\ttemp.add(a[0])\\n\\tllegnth[0] = 1\\n\\tfor i in range(1, n):\\n\\t\\ttemp.add(a[i])\\n\\t\\tllegnth[i] = len(temp)\\n\\ttemp = set()\\n\\ttemp.add(a[-1])\\n\\trlength[-1] = 1\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\ttemp.add(a[i])\\n\\t\\trlength[i] = len(temp)\\n\\ttotal = 0\\n\\tans = []\\n\\tfor i in range(0, n):\\n\\t\\tif ml[i] == i + 1 and llegnth[i] == i + 1 and (mr[i + 1] == n - i - 1) and (rlength[i + 1] == n - i - 1):\\n\\t\\t\\ttotal += 1\\n\\t\\t\\tans.append((i + 1, n - i - 1))\\n\\tprint(total)\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = input().split(' ')\\n\\tfor i in range(n):\\n\\t\\ta[i] = int(a[i])\\n\\tl1 = max(a)\\n\\td = []\\n\\tfor j in range(2):\\n\\t\\tif set(a[:l1]) == set(range(1, l1 + 1)) and set(a[l1:]) == set(range(1, n - l1 + 1)):\\n\\t\\t\\td.append(l1)\\n\\t\\tl1 = n - l1\\n\\td = set(d)\\n\\tprint(len(d))\\n\\tif len(d) > 0:\\n\\t\\tfor i in d:\\n\\t\\t\\tprint(i, n - i)\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\t(*a,) = map(int, input().split())\\n\\tok = [0] * n\\n\\tokrev = [0] * n\\n\\tma = le = 0\\n\\tse = set()\\n\\tfor (i, x) in enumerate(a):\\n\\t\\tif x not in se:\\n\\t\\t\\tse.add(x)\\n\\t\\t\\tle += 1\\n\\t\\tif x > ma:\\n\\t\\t\\tma = x\\n\\t\\tif ma == le == i + 1:\\n\\t\\t\\tok[i] = 1\\n\\tma = le = 0\\n\\tse = set()\\n\\tfor (i, x) in enumerate(a[::-1]):\\n\\t\\tif x not in se:\\n\\t\\t\\tse.add(x)\\n\\t\\t\\tle += 1\\n\\t\\tif x > ma:\\n\\t\\t\\tma = x\\n\\t\\tif ma == le == i + 1:\\n\\t\\t\\tokrev[i] = 1\\n\\tc = 0\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif ok[i] and okrev[n - i - 2]:\\n\\t\\t\\tc += 1\\n\\t\\t\\tans.append('{} {}'.format(i + 1, n - i - 1))\\n\\tprint(c)\\n\\tif c:\\n\\t\\tprint('\\\\n'.join(ans))\\n\", \"def scanleft(ls, N, offset=0):\\n\\tn = offset\\n\\toccurences = [0 for i in range(N)]\\n\\tmxm = 0\\n\\t(l1, l2) = (-1, -1)\\n\\twhile n < N:\\n\\t\\ta = ls[n]\\n\\t\\tif occurences[a] == 1:\\n\\t\\t\\tif sum(occurences) < mxm:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tl1 = n\\n\\t\\t\\tl2 = scanright(ls, N, n)\\n\\t\\t\\tbreak\\n\\t\\tmxm = max(mxm, a)\\n\\t\\toccurences[a] += 1\\n\\t\\tn += 1\\n\\treturn (l1, l2)\\n\\ndef scanright(ls, N, offset=0):\\n\\tn = offset\\n\\toccurences = [0 for i in range(N)]\\n\\twhile n < N:\\n\\t\\ta = ls[n]\\n\\t\\tif occurences[a] == 1 or a > N - offset:\\n\\t\\t\\treturn -1\\n\\t\\toccurences[a] += 1\\n\\t\\tn += 1\\n\\treturn N - offset\\nT = int(input())\\nfor test in range(T):\\n\\tN = int(input())\\n\\talist = list(map(int, input().split()))\\n\\t(l1f, l2f) = scanleft(alist, N)\\n\\talist.reverse()\\n\\t(l2r, l1r) = scanleft(alist, N)\\n\\tsoln = [0, 0]\\n\\tif l1f >= 0 and l2f >= 0:\\n\\t\\tsoln[0] = 1\\n\\tif l1r >= 0 and l2r >= 0 and (l1f != l1r):\\n\\t\\tsoln[1] = 1\\n\\tprint(sum(soln))\\n\\tif soln[0] == 1:\\n\\t\\tprint(l1f, l2f)\\n\\tif soln[1] == 1:\\n\\t\\tprint(l1r, l2r)\\n\", \"def solve(n, arr):\\n\\tleft = [0 for _ in range(n)]\\n\\tright = [0 for _ in range(n)]\\n\\tmySet = set()\\n\\tmaxInSet = float('-inf')\\n\\tfor i in range(n):\\n\\t\\tnum = arr[i]\\n\\t\\tif num in mySet:\\n\\t\\t\\tbreak\\n\\t\\tmySet.add(num)\\n\\t\\tmaxInSet = max(maxInSet, num)\\n\\t\\tif maxInSet == len(mySet):\\n\\t\\t\\tleft[i] = 1\\n\\tmySet = set()\\n\\tmaxInSet = float('-inf')\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tnum = arr[i]\\n\\t\\tif num in mySet:\\n\\t\\t\\tbreak\\n\\t\\tmySet.add(num)\\n\\t\\tmaxInSet = max(maxInSet, num)\\n\\t\\tif maxInSet == len(mySet):\\n\\t\\t\\tright[i] = 1\\n\\tans = set()\\n\\tfor i in range(n - 1):\\n\\t\\tif left[i] == 1 and right[i + 1] == 1:\\n\\t\\t\\tans.add((i + 1, n - (i + 1)))\\n\\treturn ans\\nt = int(input().strip())\\nfor _ in range(t):\\n\\tn = int(input().strip())\\n\\tarr = list(map(int, input().strip().split()))\\n\\tans = solve(n, arr)\\n\\tprint(len(ans))\\n\\tfor a in ans:\\n\\t\\tprint(a[0], a[1])\\n\", \"import sys\\nimport math\\nimport collections\\n\\ndef get_ints():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef get_list():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef get_string():\\n\\treturn sys.stdin.readline().strip()\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\tA = get_list()\\n\\tcount = 0\\n\\tans = []\\n\\tm = max(A)\\n\\tif m >= n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tp1a = A[:m]\\n\\t\\tp2a = A[m:]\\n\\t\\tp1b = A[:n - m]\\n\\t\\tp2b = A[n - m:]\\n\\t\\tif len(set(p1a)) == m == max(p1a) and len(set(p2a)) == n - m == max(p2a):\\n\\t\\t\\tans.append(m)\\n\\t\\t\\tcount += 1\\n\\t\\tif len(set(p1b)) == n - m == max(p1b) and len(set(p2b)) == m == max(p2b) and (m != n - m):\\n\\t\\t\\tans.append(n - m)\\n\\t\\t\\tcount += 1\\n\\t\\tprint(count)\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i, n - i)\\n\", \"def check(l):\\n\\tl.sort()\\n\\treturn len(l) > 0 and all((i + 1 == l[i] for i in range(len(l))))\\nfor _ in range(int(input())):\\n\\ta = [list(map(int, input().split())) for i in '..'][1]\\n\\t(mx, n) = (max(a), len(a))\\n\\tres = set()\\n\\tif check(a[:mx]) and check(a[mx:]):\\n\\t\\tres.add((mx, n - mx))\\n\\tif check(a[:n - mx]) and check(a[n - mx:]):\\n\\t\\tres.add((n - mx, mx))\\n\\tprint(len(res))\\n\\tfor r in res:\\n\\t\\tprint(*r)\\n\", \"import sys\\n\\nclass BDreamoonLikesPermutations:\\n\\n\\tdef solve(self):\\n\\t\\tfor _ in range(int(input())):\\n\\n\\t\\t\\tdef is_perm(a):\\n\\t\\t\\t\\treturn len(set(a)) == len(a) and min(a) == 1 and (max(a) == len(a))\\n\\t\\t\\tn = int(input())\\n\\t\\t\\ta = [int(_) for _ in input().split()]\\n\\t\\t\\tdone = set()\\n\\t\\t\\tans = set()\\n\\t\\t\\ti = 0\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif a[i] in done:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tdone.add(a[i])\\n\\t\\t\\tif is_perm(a[:i]) and is_perm(a[i:]):\\n\\t\\t\\t\\tans.add((i, n - i))\\n\\t\\t\\tdone = set()\\n\\t\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\t\\tif a[i] in done:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tdone.add(a[i])\\n\\t\\t\\tif is_perm(a[:i + 1]) and is_perm(a[i + 1:]):\\n\\t\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\t\\t\\tprint(len(ans))\\n\\t\\t\\tfor sol in ans:\\n\\t\\t\\t\\tprint(*sol)\\nsolver = BDreamoonLikesPermutations()\\ninput = sys.stdin.readline\\nsolver.solve()\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmaxx = max(l)\\n\\ta = n - maxx\\n\\td1 = {}\\n\\td2 = {}\\n\\tfor j in range(1, a + 1):\\n\\t\\td1[j] = 0\\n\\tfor j in range(1, maxx + 1):\\n\\t\\td2[j] = 0\\n\\tfor j in range(n):\\n\\t\\tif j < a:\\n\\t\\t\\tif d1.get(l[j]) != None:\\n\\t\\t\\t\\td1[l[j]] += 1\\n\\t\\telif d2.get(l[j]) != None:\\n\\t\\t\\td2[l[j]] += 1\\n\\tcheck1 = 0\\n\\tfor j in d1:\\n\\t\\tif d1[j] == 0 or d1[j] > 1:\\n\\t\\t\\tcheck1 = 1\\n\\t\\t\\tbreak\\n\\tfor j in d2:\\n\\t\\tif d2[j] == 0 or d2[j] > 1:\\n\\t\\t\\tcheck1 = 1\\n\\t\\t\\tbreak\\n\\td1 = {}\\n\\td2 = {}\\n\\tfor j in range(1, maxx + 1):\\n\\t\\td1[j] = 0\\n\\tfor j in range(1, a + 1):\\n\\t\\td2[j] = 0\\n\\tfor j in range(n):\\n\\t\\tif j < maxx:\\n\\t\\t\\tif d1.get(l[j]) != None:\\n\\t\\t\\t\\td1[l[j]] += 1\\n\\t\\telif d2.get(l[j]) != None:\\n\\t\\t\\td2[l[j]] += 1\\n\\tcheck2 = 0\\n\\tif a == maxx:\\n\\t\\tcheck2 = 1\\n\\tfor j in d1:\\n\\t\\tif d1[j] == 0 or d1[j] > 1:\\n\\t\\t\\tcheck2 = 1\\n\\t\\t\\tbreak\\n\\tfor j in d2:\\n\\t\\tif d2[j] == 0 or d2[j] > 1:\\n\\t\\t\\tcheck2 = 1\\n\\t\\t\\tbreak\\n\\tif check1 == 0 and check2 == 0:\\n\\t\\tprint(2)\\n\\telif check1 == 0 or check2 == 0:\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\tprint(0)\\n\\tif check1 == 0:\\n\\t\\tprint(a, end=' ')\\n\\t\\tprint(maxx)\\n\\tif check2 == 0:\\n\\t\\tprint(maxx, end=' ')\\n\\t\\tprint(a)\\n\", \"import sys\\nimport math\\n\\ndef fn(n, a):\\n\\tl2 = max(a)\\n\\tl1 = n - l2\\n\\tm2 = []\\n\\tif l2 >= n:\\n\\t\\tprint(0)\\n\\t\\treturn 0\\n\\tfor i in range(1, l2 + 1):\\n\\t\\tm2.append(i)\\n\\tm1 = []\\n\\tfor i in range(1, l1 + 1):\\n\\t\\tm1.append(i)\\n\\ta1 = a[:l2]\\n\\ta2 = a[l2:]\\n\\tb1 = a[:l1]\\n\\tb2 = a[l1:]\\n\\ta1.sort()\\n\\ta2.sort()\\n\\tb1.sort()\\n\\tb2.sort()\\n\\tflag = 0\\n\\tc = 0\\n\\tif m2 == a1 and m1 == a2:\\n\\t\\tflag = 1\\n\\t\\tc = c + 1\\n\\tif m1 == b1 and m2 == b2:\\n\\t\\tflag = 2\\n\\t\\tc = c + 1\\n\\tif l1 == l2 and c == 2:\\n\\t\\tprint(1)\\n\\t\\tprint(l1, l2)\\n\\t\\treturn 0\\n\\tif c == 0:\\n\\t\\tprint(0)\\n\\telif c == 2:\\n\\t\\tprint(2)\\n\\t\\tprint(l1, l2)\\n\\t\\tprint(l2, l1)\\n\\t\\treturn 0\\n\\telif c == 1:\\n\\t\\tprint(1)\\n\\t\\tif flag == 1:\\n\\t\\t\\tprint(l2, l1)\\n\\t\\telse:\\n\\t\\t\\tprint(l1, l2)\\n\\t\\treturn 0\\ninput = sys.stdin.read()\\ndata = list(map(int, input.split()))\\nt = data[0]\\nl = 0\\nfor i in range(t):\\n\\tn = data[l + 1]\\n\\ta = data[l + 2:l + 2 + n]\\n\\tl = l + 1 + n\\n\\tfn(n, a)\\n\", \"t = int(input())\\nwhile t > 0:\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tc = 0\\n\\tcs = 0\\n\\tca = [0] * n\\n\\tcsa = [0] * n\\n\\tfor i in range(n):\\n\\t\\tc += a[i]\\n\\t\\tcs += a[i] * a[i] * a[i]\\n\\t\\tca[i] = c\\n\\t\\tcsa[i] = cs\\n\\tcount = 0\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tN = i + 1\\n\\t\\tk = n - N\\n\\t\\tif ca[i] == N * (N + 1) // 2 and ca[-1] - ca[i] == k * (k + 1) // 2 and (csa[i] == N * (N + 1) // 2 * (N * (N + 1) // 2)) and (csa[-1] - csa[i] == k * (k + 1) // 2 * (k * (k + 1) // 2)):\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append([N, k])\\n\\tprint(count)\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\\tt -= 1\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tli1 = [0] * n\\n\\tlc1 = [0] * n\\n\\ts = 0\\n\\tfor i in range(n - 1):\\n\\t\\ts += l[i]\\n\\t\\tli1[l[i]] += 1\\n\\t\\tif li1[l[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\tif s == (i + 1) * (i + 2) // 2:\\n\\t\\t\\tlc1[i] = 1\\n\\tli1 = [0] * n\\n\\tk = 1\\n\\tl1 = []\\n\\tl2 = []\\n\\tans = 0\\n\\ts = 0\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\ts += l[i]\\n\\t\\tli1[l[i]] += 1\\n\\t\\tif li1[l[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\tif s == k * (k + 1) // 2 and lc1[i - 1] == 1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tl1.append(i)\\n\\t\\t\\tl2.append(n - i)\\n\\t\\tk += 1\\n\\tprint(ans)\\n\\tif ans != 0:\\n\\t\\tfor i in range(len(l1)):\\n\\t\\t\\tprint(l1[i], l2[i])\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tmas = [0 for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tmas[a[i] - 1] += 1\\n\\tboo = 1\\n\\tn1 = n\\n\\tind = 0\\n\\twhile n1 != 0:\\n\\t\\tif mas[ind] == 0:\\n\\t\\t\\tboo = 0\\n\\t\\tn1 -= mas[ind]\\n\\t\\tind += 1\\n\\tif boo == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tmaxx = -1\\n\\txex = max(a)\\n\\tif max(mas) > 2:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\twhile mas[maxx + 1] == 2:\\n\\t\\tmaxx += 1\\n\\tif mas.count(2) != maxx + 1:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tans = []\\n\\tlol = [0 for i in range(n)]\\n\\tfor i in range(maxx + 1):\\n\\t\\tlol[a[i] - 1] += 1\\n\\tboo = 1\\n\\tfor i in range(maxx + 1):\\n\\t\\tif lol[i] != 1:\\n\\t\\t\\tboo = 0\\n\\tif boo == 1 and maxx != -1:\\n\\t\\tans.append([maxx + 1, xex])\\n\\tfor i in range(maxx + 1, xex):\\n\\t\\tlol[a[i] - 1] += 1\\n\\tboo = 1\\n\\tfor i in range(xex):\\n\\t\\tif lol[i] != 1:\\n\\t\\t\\tboo = 0\\n\\tif boo == 1 and maxx != -1:\\n\\t\\tans.append([xex, maxx + 1])\\n\\tif len(ans) == 2:\\n\\t\\tif ans[1] == ans[0]:\\n\\t\\t\\tans.pop()\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"from sys import stdin, stdout\\n\\ndef check(a, m, n):\\n\\tb = []\\n\\tfor i in range(1, n - m + 1):\\n\\t\\tb.append(i)\\n\\tc = []\\n\\tfor i in range(m, n):\\n\\t\\tc.append(a[i])\\n\\tif sorted(c) == b:\\n\\t\\treturn True\\n\\treturn False\\n\\ndef f(a, n):\\n\\tansw = []\\n\\tans = 0\\n\\tma = max(a)\\n\\tb = []\\n\\tc = []\\n\\tif ma < n:\\n\\t\\tfor i in range(ma):\\n\\t\\t\\tb.append(a[i])\\n\\t\\t\\tc.append(i + 1)\\n\\t\\tif sorted(b) == c and check(a, ma, n):\\n\\t\\t\\tans += 1\\n\\t\\t\\tansw.append([ma, n - ma])\\n\\t\\ta = a[::-1]\\n\\t\\tb = []\\n\\t\\tfor i in range(ma):\\n\\t\\t\\tb.append(a[i])\\n\\t\\tif sorted(b) == c and check(a, ma, n):\\n\\t\\t\\tif n - ma != ma:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tansw.append([n - ma, ma])\\n\\t\\tprint(ans)\\n\\t\\tif answ:\\n\\t\\t\\tfor i in answ:\\n\\t\\t\\t\\tprint(i[0], i[1], sep=' ')\\n\\telse:\\n\\t\\tprint(0)\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(stdin.readline())\\n\\ta = list(map(int, stdin.readline().split()))\\n\\tf(a, n)\\n\", \"from math import *\\nfrom sys import stdin\\ninput = stdin.readline\\nfor _ in range(int(input())):\\n\\t(n, a) = (int(input()), list(map(int, input().split())))\\n\\t(m, li) = (max(a), [])\\n\\tfor i in {m, n - m}:\\n\\t\\tif sorted(a[:i]) + sorted(a[i:]) == [*range(1, i + 1), *range(1, n - i + 1)]:\\n\\t\\t\\tli.append(i)\\n\\tprint(len(li))\\n\\tfor i in li:\\n\\t\\tprint(i, n - i)\\n\", \"def chqperm(t, n):\\n\\ts = set()\\n\\tfor i in range(1, n + 1):\\n\\t\\ts.add(i)\\n\\treturn t == s\\nfor _ in range(int(input())):\\n\\ta = int(input())\\n\\tb = list(map(int, input().split()))\\n\\tv = []\\n\\tmx = 0\\n\\tfor i in range(a):\\n\\t\\tmx = max(mx, b[i])\\n\\tif mx >= a:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tif chqperm(set(b[:mx]), mx) and chqperm(set(b[mx:]), a - mx):\\n\\t\\t\\tv.append([mx, a - mx])\\n\\t\\tif mx != a / 2:\\n\\t\\t\\tif chqperm(set(b[:a - mx]), a - mx) and chqperm(set(b[a - mx:]), mx):\\n\\t\\t\\t\\tv.append([a - mx, mx])\\n\\tprint(len(v))\\n\\tfor j in v:\\n\\t\\tprint(*j)\\n\", \"T = int(input())\\nfor case in range(T):\\n\\tm = int(input())\\n\\tls = [int(x) for x in input().split()]\\n\\tma = 0\\n\\tp = set()\\n\\tpn = set()\\n\\tnegn = set()\\n\\tneg = set()\\n\\tfor (n, e) in enumerate(ls):\\n\\t\\tma = max(ma, e)\\n\\t\\tpn.add(e)\\n\\t\\tif ma == n + 1 and len(pn) == ma:\\n\\t\\t\\tp.add(n + 1)\\n\\tls = ls[::-1]\\n\\tma = 0\\n\\tfor (n, e) in enumerate(ls):\\n\\t\\tma = max(ma, e)\\n\\t\\tnegn.add(e)\\n\\t\\tif ma == n + 1 and len(negn) == ma:\\n\\t\\t\\tneg.add(n + 1)\\n\\tret = []\\n\\tfor i in range(1, m):\\n\\t\\tif i in p and m - i in neg:\\n\\t\\t\\tret.append(i)\\n\\tprint(len(ret))\\n\\tfor r in ret:\\n\\t\\tprint(r, m - r)\\n\", \"from collections import Counter\\n\\ndef solve():\\n\\tn = int(input())\\n\\tl1 = list(map(int, input().split()))\\n\\td = Counter(l1)\\n\\tv1 = list(d.keys())\\n\\tc = 0\\n\\tsum1 = sum(l1)\\n\\tkk = []\\n\\txx = 0\\n\\tfor i in range(len(v1)):\\n\\t\\tif d[v1[i]] == 2:\\n\\t\\t\\tc = c + 1\\n\\ts2 = len(d)\\n\\tf1 = (c + 1) * c // 2\\n\\tf2 = (s2 + 1) * s2 // 2\\n\\ta = sum(l1[0:c])\\n\\tb = sum1 - a\\n\\tif f1 == a and f2 == b and (a + b == sum1) and (c + s2 == n):\\n\\t\\txx += 1\\n\\t\\tkk.append(c)\\n\\t\\tkk.append(s2)\\n\\ta1 = sum(l1[0:s2])\\n\\tb1 = sum1 - a1\\n\\tif a1 == f2 and b1 == f1 and (a + b == sum1) and (c + s2 == n):\\n\\t\\txx = xx + 1\\n\\t\\tkk.append(s2)\\n\\t\\tkk.append(c)\\n\\tif s2 == c:\\n\\t\\tif xx > 0:\\n\\t\\t\\txx = xx - 1\\n\\t\\t\\tkk.pop()\\n\\t\\t\\tkk.pop()\\n\\tprint(xx)\\n\\tfor i in range(0, len(kk), 2):\\n\\t\\tprint(kk[i], kk[i + 1])\\nfor _ in range(int(input())):\\n\\tsolve()\\n\", \"def findRepeating(arr):\\n\\ts = set()\\n\\tfor i in range(len(arr)):\\n\\t\\tif arr[i] in s:\\n\\t\\t\\treturn arr[i]\\n\\t\\ts.add(arr[i])\\n\\treturn -1\\n\\ndef check_elements(arr, n, A, B):\\n\\trangeV = B - A\\n\\tfor i in range(0, n):\\n\\t\\tif abs(arr[i]) >= A and abs(arr[i]) <= B:\\n\\t\\t\\tz = abs(arr[i]) - A\\n\\t\\t\\tif arr[z] > 0:\\n\\t\\t\\t\\tarr[z] = arr[z] * -1\\n\\tcount = 0\\n\\tfor i in range(0, rangeV + 1):\\n\\t\\tif i >= n:\\n\\t\\t\\tbreak\\n\\t\\tif arr[i] > 0:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\tcount = count + 1\\n\\tif count != rangeV + 1:\\n\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tA = 1\\n\\tB = max(arr)\\n\\ta = 0\\n\\tif B * 2 != n and check_elements(arr[0:B], B, A, B) and check_elements(arr[B:n], n - B, A, n - B):\\n\\t\\tif findRepeating(arr[0:B]) == -1 and findRepeating(arr[B:n]) == -1:\\n\\t\\t\\ta = a + 1\\n\\tif check_elements(arr[0:n - B], n - B, A, n - B) and check_elements(arr[n - B:n], B, A, B):\\n\\t\\tif findRepeating(arr[0:n - B]) == -1 and findRepeating(arr[n - B:n]) == -1:\\n\\t\\t\\ta = a + 1\\n\\tprint(a)\\n\\tif check_elements(arr[0:n - B], n - B, A, n - B) and check_elements(arr[n - B:n], B, A, B):\\n\\t\\tif findRepeating(arr[0:n - B]) == -1 and findRepeating(arr[n - B:n]) == -1:\\n\\t\\t\\tprint(n - B, B)\\n\\tif B * 2 != n and check_elements(arr[0:B], B, A, B) and check_elements(arr[B:n], n - B, A, n - B):\\n\\t\\tif findRepeating(arr[0:B]) == -1 and findRepeating(arr[B:n]) == -1:\\n\\t\\t\\tprint(B, n - B)\\n\", \"from collections import defaultdict\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = [int(i) for i in input().split()]\\n\\tpre_arr = [0] * n\\n\\tfor i in range(n):\\n\\t\\tif i == 0:\\n\\t\\t\\tpre_arr[i] = arr[i]\\n\\t\\telse:\\n\\t\\t\\tpre_arr[i] = pre_arr[i - 1] + arr[i]\\n\\tDict = defaultdict(int)\\n\\tDict1 = defaultdict(int)\\n\\tdist = [0] * n\\n\\tfor i in range(n):\\n\\t\\tif Dict[arr[i]] == 0:\\n\\t\\t\\tdist[i] = dist[i - 1] + 1\\n\\t\\t\\tDict[arr[i]] = 1\\n\\t\\telse:\\n\\t\\t\\tdist[i] = dist[i - 1]\\n\\tdist1 = [0] * n\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif Dict1[arr[i]] == 0:\\n\\t\\t\\tif i == n - 1:\\n\\t\\t\\t\\tdist1[i] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdist1[i] = dist1[i + 1] + 1\\n\\t\\t\\tDict1[arr[i]] = 1\\n\\t\\telse:\\n\\t\\t\\tdist1[i] = dist1[i + 1]\\n\\tans = 0\\n\\tlis = []\\n\\tfor i in range(1, n):\\n\\t\\ttemp1 = pre_arr[i - 1]\\n\\t\\ttemp2 = pre_arr[n - 1] - pre_arr[i - 1]\\n\\t\\tche1 = i * (i + 1) // 2\\n\\t\\tche2 = (n - i) * (n - i + 1) // 2\\n\\t\\tif (temp1 == che1 and dist[i - 1] == i) and (temp2 == che2 and dist1[i] == n - i):\\n\\t\\t\\tlis.append((i, n - i))\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\n\\tif len(lis) > 0:\\n\\t\\tfor i in lis:\\n\\t\\t\\tprint(i[0], i[1])\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tm = max(l)\\n\\ts1 = list(set(l))\\n\\tif l.count(1) != 2:\\n\\t\\tprint(0)\\n\\telif m == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tcount = 0\\n\\t\\tmax1 = max(l)\\n\\t\\tmax2 = n - max1\\n\\t\\tl1 = l[0:max1]\\n\\t\\tl1.sort()\\n\\t\\tl2 = l[max1:]\\n\\t\\tl2.sort()\\n\\t\\tl3 = l[0:max2]\\n\\t\\tl3.sort()\\n\\t\\tl4 = l[max2:]\\n\\t\\tl4.sort()\\n\\t\\tp1 = list((i for i in range(1, max1 + 1)))\\n\\t\\tp2 = list((j for j in range(1, max2 + 1)))\\n\\t\\tif l1 == p1 and l2 == p2:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tk = max1\\n\\t\\tif l3 == p2 and l4 == p1:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tk = max2\\n\\t\\tif p1 == p2 and count > 0:\\n\\t\\t\\tcount = 1\\n\\t\\tprint(count)\\n\\t\\tif count == 1:\\n\\t\\t\\tprint(k, n - k)\\n\\t\\tif count == 2:\\n\\t\\t\\tprint(max1, max2)\\n\\t\\t\\tprint(max2, max1)\\n\\t\\t\\tl\\n\", \"def check(temp):\\n\\tvis = [-1] * temp\\n\\tfor i in range(temp):\\n\\t\\tif l[i] - 1 < len(vis) and l[i] - 1 >= 0:\\n\\t\\t\\tvis[l[i] - 1] = 1\\n\\tvis2 = [-1] * (len(l) - temp)\\n\\tfor i in range(temp, len(l)):\\n\\t\\tif l[i] - 1 < len(vis2) and l[i] - 1 >= 0:\\n\\t\\t\\tvis2[l[i] - 1] = 1\\n\\tif -1 in vis or -1 in vis2:\\n\\t\\treturn False\\n\\treturn True\\nfor nt in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tv = [-1] * n\\n\\tans = []\\n\\ts = sum(l)\\n\\ts1 = l[0]\\n\\ts2 = s - s1\\n\\tfor i in range(1, n):\\n\\t\\tif s1 == i * (i + 1) // 2 and s2 == (n - i) * (n - i + 1) // 2:\\n\\t\\t\\tif check(i):\\n\\t\\t\\t\\tans.append(i)\\n\\t\\ts1 += l[i]\\n\\t\\ts2 -= l[i]\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i, n - i)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor r in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\td = {}\\n\\tfor i in l:\\n\\t\\ttry:\\n\\t\\t\\td[i] += 1\\n\\t\\texcept:\\n\\t\\t\\td[i] = 1\\n\\tflag = True\\n\\tlength = len(d)\\n\\tfor i in range(1, length + 1):\\n\\t\\ttry:\\n\\t\\t\\tif d[i] > 2:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tflag = False\\n\\tif flag == False:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tsumm = 0\\n\\t\\tfor i in l:\\n\\t\\t\\tsumm += i\\n\\t\\tsum_d = {}\\n\\t\\tsum_d[1] = 1\\n\\t\\tlength += 1\\n\\t\\tfor i in range(2, length):\\n\\t\\t\\tsum_d[i] = i + sum_d[i - 1]\\n\\t\\tcurrent = 0\\n\\t\\tans = []\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tcurrent += l[i]\\n\\t\\t\\ttry:\\n\\t\\t\\t\\tif sum_d[i + 1] == current and sum_d[n - i - 1] == summ - current:\\n\\t\\t\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\t\\t\\texcept:\\n\\t\\t\\t\\tpass\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(str(i[0]) + ' ' + str(i[1]))\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().strip().split()))\\n\\tr1 = max(a)\\n\\tans = 0\\n\\tr2 = n - r1\\n\\tif r1 == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tg = 0\\n\\t\\tk = 0\\n\\t\\tx = sorted(a[:r1])\\n\\t\\ty = sorted(a[r1:])\\n\\t\\tz = sorted(a[:r2])\\n\\t\\tw = sorted(a[r2:])\\n\\t\\tp1 = [i + 1 for i in range(r1)]\\n\\t\\tp2 = [j + 1 for j in range(r2)]\\n\\t\\tif x == p1 and y == p2:\\n\\t\\t\\tans += 1\\n\\t\\t\\tk = r1\\n\\t\\tif z == p2 and w == p1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tk = r2\\n\\t\\tif r1 == r2 and ans > 0:\\n\\t\\t\\tg = 1\\n\\t\\t\\tans = 1\\n\\t\\tprint(ans)\\n\\t\\tif ans == 1:\\n\\t\\t\\tprint(k, n - k)\\n\\t\\tif ans == 2:\\n\\t\\t\\tprint(r1, r2)\\n\\t\\t\\tprint(r2, r1)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tcount = {}\\n\\tfor j in a:\\n\\t\\tif j not in count:\\n\\t\\t\\tcount[j] = 1\\n\\t\\telse:\\n\\t\\t\\tcount[j] += 1\\n\\tfailed = False\\n\\ttwo = 0\\n\\tfor j in count.keys():\\n\\t\\tif count[j] > 2:\\n\\t\\t\\tfailed = True\\n\\t\\t\\tbreak\\n\\t\\tif count[j] == 2:\\n\\t\\t\\ttwo += 1\\n\\tmissing = max(a)\\n\\tif failed == True or two == 0 or len(count) < max(a):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tanswer1 = 0\\n\\t\\tcount1 = [0] * missing\\n\\t\\tfor j in a[:missing]:\\n\\t\\t\\tif j <= len(count1):\\n\\t\\t\\t\\tcount1[j - 1] += 1\\n\\t\\tcount2 = [0] * (n - missing)\\n\\t\\tfor j in a[missing:]:\\n\\t\\t\\tif j <= len(count2):\\n\\t\\t\\t\\tcount2[j - 1] += 1\\n\\t\\tif min(count1) == 1 and max(count1) == 1 and (min(count2) == 1) and (max(count2) == 1):\\n\\t\\t\\tanswer1 = 1\\n\\t\\tdel count1, count2\\n\\t\\tanswer2 = 0\\n\\t\\tcount1 = [0] * (n - missing)\\n\\t\\tfor j in a[:n - missing]:\\n\\t\\t\\tif j <= len(count1):\\n\\t\\t\\t\\tcount1[j - 1] += 1\\n\\t\\tcount2 = [0] * missing\\n\\t\\tfor j in a[n - missing:]:\\n\\t\\t\\tif j <= len(count2):\\n\\t\\t\\t\\tcount2[j - 1] += 1\\n\\t\\tif min(count1) == 1 and max(count1) == 1 and (min(count2) == 1) and (max(count2) == 1):\\n\\t\\t\\tanswer2 = 1\\n\\t\\tdel count1, count2\\n\\t\\tif answer1 == 1 and answer2 == 1 and (missing != n - missing):\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(missing, n - missing)\\n\\t\\t\\tprint(n - missing, missing)\\n\\t\\telif answer1 == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(missing, n - missing)\\n\\t\\telif answer2 == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - missing, missing)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"def check(a, l1):\\n\\tp1 = set(a[:l1])\\n\\tp2 = set(a[l1:])\\n\\treturn p1 == set(range(1, l1 + 1)) and p2 == set(range(1, len(a) - l1 + 1))\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = []\\n\\tm = max(a)\\n\\tif check(a, m):\\n\\t\\tans.append((m, n - m))\\n\\tif check(a, n - m):\\n\\t\\tans.append((n - m, m))\\n\\tif len(ans) == 2 and ans[0] == ans[1]:\\n\\t\\tans.pop()\\n\\tprint(len(ans))\\n\\tfor x in ans:\\n\\t\\tprint(*x)\\n\", \"import sys, math, cmath, time\\nstart_time = time.time()\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn s[:len(s) - 1]\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n\\ndef solve():\\n\\tn = inp()\\n\\ta = inlt()\\n\\t(j, k) = (0, 0)\\n\\tq = [0] * (n + 1)\\n\\tw = [0] * (n + 2)\\n\\tqw = []\\n\\tfor i in range(n):\\n\\t\\tif w[a[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\tk = max(k, a[i])\\n\\t\\tw[a[i]] = 1\\n\\t\\tif k == j + 1:\\n\\t\\t\\tq[i + 1] = 1\\n\\t\\tj = j + 1\\n\\t(j, k) = (0, 0)\\n\\tw = [0] * (n + 2)\\n\\tfor i in range(n, 1, -1):\\n\\t\\tif w[a[i - 1]] == 1:\\n\\t\\t\\tbreak\\n\\t\\tk = max(k, a[i - 1])\\n\\t\\tw[a[i - 1]] = 1\\n\\t\\tif k == j + 1 and q[i - 1] == 1:\\n\\t\\t\\tqw.append([i - 1, n - i + 1])\\n\\t\\tj = j + 1\\n\\tprint(len(qw))\\n\\tfor i in range(len(qw)):\\n\\t\\tprint(*qw[i])\\nONLINE_JUDGE = __debug__\\nif not ONLINE_JUDGE:\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nelse:\\n\\tinput = sys.stdin.readline\\nt = 1\\nt = inp()\\nfor tt in range(t):\\n\\tsolve()\\nif not ONLINE_JUDGE:\\n\\tprint('Time Elapsed:', time.time() - start_time, 'seconds')\\nsys.stdout.close()\\n\", \"from sys import stdin\\ninput = stdin.readline\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tA = [int(j) for j in input().strip().split()]\\n\\tmaxi = max(A)\\n\\tx = n - maxi\\n\\ta = maxi * (maxi + 1) // 2\\n\\tb = x * (x + 1) // 2\\n\\tif sum(A) != a + b or maxi >= n:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tpk = []\\n\\tif sum(set(A[:x])) == b and sum(set(A[x:])) == a:\\n\\t\\tpk.append((x, maxi))\\n\\tif x != maxi and sum(set(A[:maxi])) == a and (sum(set(A[maxi:])) == b):\\n\\t\\tpk.append((maxi, x))\\n\\tprint(len(pk))\\n\\tfor j in pk:\\n\\t\\tprint(j[0], j[1])\\n\", \"import sys\\nfor _ in range(int(sys.stdin.readline())):\\n\\tn = int(sys.stdin.readline())\\n\\ta = list(map(int, sys.stdin.readline().split()))\\n\\tcount = [0] * n\\n\\tfor i in range(n):\\n\\t\\tcount[a[i] - 1] += 1\\n\\tif 2 not in count:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tl1 = max([i + 1 for i in range(n) if count[i] == 2])\\n\\tl2 = n - l1\\n\\tnum = 0\\n\\ttup = []\\n\\tif sorted(a[:l1]) == list(range(1, l1 + 1)) and sorted(a[l1:l1 + l2]) == list(range(1, l2 + 1)):\\n\\t\\tnum += 1\\n\\t\\ttup.append([l1, l2])\\n\\tif l1 == l2:\\n\\t\\tprint(num)\\n\\t\\tfor x in tup:\\n\\t\\t\\tprint(*x)\\n\\t\\tcontinue\\n\\t(l1, l2) = (l2, l1)\\n\\tif sorted(a[:l1]) == list(range(1, l1 + 1)) and sorted(a[l1:l1 + l2]) == list(range(1, l2 + 1)):\\n\\t\\tnum += 1\\n\\t\\ttup.append([l1, l2])\\n\\tprint(num)\\n\\tfor x in tup:\\n\\t\\tprint(*x)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tdpF = [0 for i in range(n)]\\n\\tdpB = [0 for i in range(n)]\\n\\tnoRep = 1\\n\\tr = {}\\n\\tm = 0\\n\\tfor i in range(n):\\n\\t\\tif r.get(a[i]) == None:\\n\\t\\t\\tr[a[i]] = 1\\n\\t\\t\\tm = max(m, a[i])\\n\\t\\t\\tif m == i + 1:\\n\\t\\t\\t\\tdpF[i] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tr = {}\\n\\tm = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif r.get(a[i]) == None:\\n\\t\\t\\tr[a[i]] = 1\\n\\t\\t\\tm = max(m, a[i])\\n\\t\\t\\tif m == n - i:\\n\\t\\t\\t\\tdpB[i] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tans = 0\\n\\tansList = []\\n\\tfor i in range(n - 1):\\n\\t\\tif dpF[i] == 1 and dpB[i + 1] == 1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tansList.append([i + 1, n - i - 1])\\n\\tprint(ans)\\n\\tfor i in ansList:\\n\\t\\tprint(i[0], i[1])\\n\", \"for ii in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tmv = max(arr)\\n\\ttotal = sum(arr)\\n\\ts = 0\\n\\tans = []\\n\\tfor i in range(n):\\n\\t\\ts += arr[i]\\n\\t\\ttotal -= arr[i]\\n\\t\\t(p1, p2) = (i + 1, n - i - 1)\\n\\t\\tif s == p1 * (p1 + 1) // 2 and total == p2 * (p2 + 1) // 2 and (len(set(arr[:p1])) == p1) and (len(set(arr[p1:])) == p2):\\n\\t\\t\\tans.append([p1, p2])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tpre = [0]\\n\\tsuf = [0]\\n\\td5 = {}\\n\\td6 = {}\\n\\tfor t in l:\\n\\t\\tif d5.get(t, 0) == 1:\\n\\t\\t\\tbreak\\n\\t\\td5[t] = 1\\n\\t\\tx = pre[-1] + t\\n\\t\\tpre.append(x)\\n\\tfor t in l[::-1]:\\n\\t\\tif d6.get(t, 0) == 1:\\n\\t\\t\\tbreak\\n\\t\\td6[t] = 1\\n\\t\\tx = suf[-1] + t\\n\\t\\tsuf.append(x)\\n\\tp1 = []\\n\\tp2 = []\\n\\tfor t in range(1, len(pre)):\\n\\t\\tif pre[t] == t * (t + 1) // 2:\\n\\t\\t\\tp1.append(t)\\n\\tfor t in range(1, len(suf)):\\n\\t\\tif suf[t] == t * (t + 1) // 2:\\n\\t\\t\\tp2.append(n - t + 1)\\n\\tif len(p1) == 0 or len(p2) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\td = {}\\n\\t\\tans = []\\n\\t\\tfor t in p2:\\n\\t\\t\\td[t] = 1\\n\\t\\tfor t in p1:\\n\\t\\t\\tif d.get(t + 1, 0) == 1:\\n\\t\\t\\t\\tans.append([t, n - t])\\n\\t\\tprint(len(ans))\\n\\t\\tfor t in ans:\\n\\t\\t\\tprint(*t)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tx = max(l)\\n\\tk = n - x\\n\\tc = 0\\n\\ta = []\\n\\tp = [0] * (n - x)\\n\\tq = [0] * x\\n\\tfor i in range(n):\\n\\t\\ttry:\\n\\t\\t\\tif i < n - x:\\n\\t\\t\\t\\tp[l[i] - 1] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tq[l[i] - 1] = 1\\n\\t\\texcept:\\n\\t\\t\\tbreak\\n\\tif sum(p) == n - x and sum(q) == x:\\n\\t\\tc += 1\\n\\t\\ta += [n - x, x]\\n\\tp = [0] * x\\n\\tq = [0] * (n - x)\\n\\tfor i in range(n):\\n\\t\\ttry:\\n\\t\\t\\tif i < x:\\n\\t\\t\\t\\tp[l[i] - 1] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tq[l[i] - 1] = 1\\n\\t\\texcept:\\n\\t\\t\\tbreak\\n\\tif sum(p) == x and sum(q) == n - x:\\n\\t\\tc += 1\\n\\t\\ta += [x, n - x]\\n\\tprint(c if c < 2 else c - int(a[0] == a[2]))\\n\\tif a != []:\\n\\t\\tprint(a[0], a[1])\\n\\t\\tif len(a) == 4 and a[0] != a[2]:\\n\\t\\t\\tprint(a[2], a[3])\\n\", \"ttt = int(input())\\nfor tttt in range(ttt):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split(' ')))\\n\\n\\tdef isperm(p):\\n\\t\\tsp = set(p)\\n\\t\\tif len(p) == len(sp):\\n\\t\\t\\tif max(p) == len(sp):\\n\\t\\t\\t\\treturn True\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\tm = max(a)\\n\\tk = 0\\n\\tansl1 = []\\n\\tif a.count(m) == 1:\\n\\t\\tif isperm(a[0:m]) and isperm(a[m:len(a)]):\\n\\t\\t\\tk += 1\\n\\t\\t\\tansl1.append(m)\\n\\t\\tif isperm(a[0:len(a) - m]) and isperm(a[len(a) - m:len(a)]):\\n\\t\\t\\tk += 1\\n\\t\\t\\tansl1.append(len(a) - m)\\n\\t\\tif k == 0:\\n\\t\\t\\tprint(0)\\n\\t\\tif k == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(str(ansl1[0]) + ' ' + str(len(a) - ansl1[0]))\\n\\t\\tif k == 2:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(str(ansl1[0]) + ' ' + str(len(a) - ansl1[0]))\\n\\t\\t\\tprint(str(ansl1[1]) + ' ' + str(len(a) - ansl1[1]))\\n\\telif a.count(m) == 2:\\n\\t\\tif len(a) == m + m:\\n\\t\\t\\tif isperm(a[0:m]) and isperm(a[m:len(a)]):\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(str(m) + ' ' + str(m))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmaxNum = max(a)\\n\\tcounts = [0] * (maxNum + 1)\\n\\tfor x in a:\\n\\t\\tcounts[x] += 1\\n\\tpossible = True\\n\\tif counts[1] != 2:\\n\\t\\tpossible = False\\n\\tl1 = 1\\n\\tif possible:\\n\\t\\twhile l1 < len(counts) and counts[l1] == 2:\\n\\t\\t\\tl1 += 1\\n\\tfor i in range(l1, maxNum + 1):\\n\\t\\tif counts[i] != 1:\\n\\t\\t\\tpossible = False\\n\\tl1 -= 1\\n\\tanswers = []\\n\\trepeatCheck = set()\\n\\tif possible:\\n\\t\\tmaxTill = 0\\n\\t\\tfor (idx, i) in enumerate(a):\\n\\t\\t\\tif i in repeatCheck:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\trepeatCheck.add(i)\\n\\t\\t\\tmaxTill = max(maxTill, i)\\n\\t\\t\\tif maxTill == idx + 1:\\n\\t\\t\\t\\tif maxTill in [l1, maxNum]:\\n\\t\\t\\t\\t\\tanswers.append((maxTill, n - maxTill))\\n\\tprint(len(answers))\\n\\tfor x in answers:\\n\\t\\tprint(x[0], x[1])\\n\", \"from collections import Counter\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarray = list(map(int, input().split()))\\n\\tma = max(array)\\n\\tx = 0\\n\\tres = []\\n\\tif set(array[:ma]) == set(range(1, ma + 1)) and set(array[ma:]) == set(range(1, n - ma + 1)):\\n\\t\\tx += 1\\n\\t\\tres.append((ma, n - ma))\\n\\tif ma * 2 != n:\\n\\t\\tif set(array[:n - ma]) == set(range(1, n - ma + 1)) and set(array[-ma:]) == set(range(1, ma + 1)):\\n\\t\\t\\tx += 1\\n\\t\\t\\tres.append((n - ma, ma))\\n\\tif x == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(x)\\n\\t\\tfor r in res:\\n\\t\\t\\tprint(*r)\\n\", \"a = int(input())\\nfor i in range(a):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tk = max(l)\\n\\tc = []\\n\\tfor i2 in {k, n - k}:\\n\\t\\tif set(l[:i2]) == set((j + 1 for j in range(i2))) and set(l[i2:]) == set((j + 1 for j in range(n - i2))):\\n\\t\\t\\tc.append(i2)\\n\\tprint(len(c))\\n\\tfor ans in c:\\n\\t\\tprint(ans, n - ans)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tb = [int(i) for i in input().split()]\\n\\ta = [0]\\n\\tc = [0]\\n\\tans = []\\n\\tfor i in range(1, n + 1):\\n\\t\\ta += [a[-1] + i]\\n\\t\\tc += [c[-1] + b[i - 1]]\\n\\tused = [0 for i in range(max(b) + 1)]\\n\\tfor i in range(1, n):\\n\\t\\tif used[b[i - 1]] == 0:\\n\\t\\t\\tif c[i] == a[i] and c[n] - c[i] == a[n - i] and (n - i == len(set(b[i:]))):\\n\\t\\t\\t\\tans += [[i, n - i]]\\n\\t\\t\\tused[b[i - 1]] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(len(ans))\\n\\tfor (x, y) in ans:\\n\\t\\tprint(x, y)\\n\", \"t = int(input())\\n\\ndef check_permute(a, n):\\n\\tnum = set()\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in num:\\n\\t\\t\\tnum.add(a[i])\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tpref_a = [a[0]] * n\\n\\tsuff_a = [a[-1]] * n\\n\\tfor i in range(1, n):\\n\\t\\tpref_a[i] = pref_a[i - 1] + a[i]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tsuff_a[i] = suff_a[i + 1] + a[i]\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tl1 = i + 1\\n\\t\\tl2 = n - l1\\n\\t\\tif pref_a[i] == l1 * (l1 + 1) // 2 and suff_a[i + 1] == l2 * (l2 + 1) // 2:\\n\\t\\t\\tres1 = check_permute(a[:l1], l1)\\n\\t\\t\\tres2 = check_permute(a[l1:], l2)\\n\\t\\t\\tif res1 and res2:\\n\\t\\t\\t\\tans.append([l1, l2])\\n\\tprint(len(ans))\\n\\tfor res in ans:\\n\\t\\tprint(res[0], res[1])\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\td = dict()\\n\\tdemand = 1\\n\\tpre = [0] * n\\n\\tpost = [0] * n\\n\\tfor i in range(n):\\n\\t\\td[arr[i]] = 1\\n\\t\\tif demand in d:\\n\\t\\t\\twhile demand in d:\\n\\t\\t\\t\\tdemand += 1\\n\\t\\t\\tpre[i] = demand - 1\\n\\td2 = dict()\\n\\tdemand = 1\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\td2[arr[i]] = 1\\n\\t\\tif demand in d2:\\n\\t\\t\\twhile demand in d2:\\n\\t\\t\\t\\tdemand += 1\\n\\t\\t\\tpost[i] = demand - 1\\n\\tl = []\\n\\tfor i in range(1, n):\\n\\t\\tif post[i] + pre[i - 1] == n:\\n\\t\\t\\tl += [[pre[i - 1], post[i]]]\\n\\tprint(len(l))\\n\\tfor i in l:\\n\\t\\tprint(*i)\\n\", \"input = __import__('sys').stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tlis = list(map(int, input().split()))\\n\\tpre = [0] * (n + 1)\\n\\thas = [0] * (n + 2)\\n\\tj = 0\\n\\tk = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif has[lis[i - 1]] == 1:\\n\\t\\t\\tbreak\\n\\t\\thas[lis[i - 1]] = 1\\n\\t\\tj += 1\\n\\t\\tk = max(k, lis[i - 1])\\n\\t\\tif k == j:\\n\\t\\t\\tpre[i] = 1\\n\\tj = 0\\n\\tk = 0\\n\\thas = [0] * (n + 2)\\n\\tans = []\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\tif has[lis[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\thas[lis[i]] = 1\\n\\t\\tk = max(k, lis[i])\\n\\t\\tj += 1\\n\\t\\tif k == j and pre[i] == 1:\\n\\t\\t\\tans.append([i, n - i])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\n\\ndef is_perm(s):\\n\\tst = set(s)\\n\\tfor i in range(1, len(s) + 1):\\n\\t\\tif i not in st:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(t):\\n\\tinput()\\n\\tarr = list(map(int, input().split()))\\n\\tsm = sum(arr)\\n\\tans = list()\\n\\tleft = 0\\n\\tfor idx in range(len(arr) - 1):\\n\\t\\tv = arr[idx]\\n\\t\\tleft += v\\n\\t\\tmust_left = (idx + 2) * (idx + 1) // 2\\n\\t\\tright = sm - left\\n\\t\\tmust_right = (len(arr) - idx) * (len(arr) - idx - 1) // 2\\n\\t\\tif must_left == left and right == must_right:\\n\\t\\t\\tif is_perm(arr[:idx + 1]) and is_perm(arr[idx + 1:]):\\n\\t\\t\\t\\tans.append((idx + 1, len(arr) - idx - 1))\\n\\tprint(len(ans))\\n\\tfor a in ans:\\n\\t\\tprint(*a)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tused = [0] * n\\n\\tk = 0\\n\\tv = []\\n\\tt = 2\\n\\twhile t:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif used[a[i] - 1]:\\n\\t\\t\\t\\tl = a[i:]\\n\\t\\t\\t\\tif sum(used[:i]) == i and len(set(l)) == n - i and (max(l) == n - i):\\n\\t\\t\\t\\t\\tk += 1\\n\\t\\t\\t\\t\\tif t == 1:\\n\\t\\t\\t\\t\\t\\tv.append([i, n - i][::-1])\\n\\t\\t\\t\\t\\t\\tif len(v) == 2 and v[0] == v[1]:\\n\\t\\t\\t\\t\\t\\t\\tk -= 1\\n\\t\\t\\t\\t\\t\\t\\tdel v[1]\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tv.append([i, n - i])\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tused[a[i] - 1] = 1\\n\\t\\tt -= 1\\n\\t\\ta = a[::-1]\\n\\t\\tused = [0] * n\\n\\tif k:\\n\\t\\tprint(k)\\n\\t\\tfor num in v:\\n\\t\\t\\tprint(*num)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import math\\nfor ii in range(int(input())):\\n\\tn = int(input())\\n\\tl = [int(i) for i in input().split()]\\n\\ta = max(l)\\n\\tif a >= len(l):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tx = l[0:a]\\n\\t\\ty = l[a:]\\n\\t\\tans = []\\n\\t\\tcount = 0\\n\\t\\tif sorted(x) == [int(i + 1) for i in range(len(x))] and sorted(y) == [int(i + 1) for i in range(len(y))]:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append([a, n - a])\\n\\t\\tx = l[0:n - a]\\n\\t\\ty = l[n - a:n]\\n\\t\\tif sorted(x) == [int(i + 1) for i in range(len(x))] and sorted(y) == [int(i + 1) for i in range(len(y))]:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append([n - a, a])\\n\\t\\tif a == n // 2 + n % 2 / 2 and count == 2:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(*ans[0])\\n\\t\\telse:\\n\\t\\t\\tprint(count)\\n\\t\\t\\tfor i in ans:\\n\\t\\t\\t\\tprint(*i)\\n\", \"from collections import defaultdict\\nfrom sys import stdin, stdout\\n\\ndef write(_s):\\n\\tstdout.write(_s)\\n\\ndef write_int(_s):\\n\\tstdout.write(str(_s))\\n\\ndef write_list(_l):\\n\\tstdout.write(' '.join(map(str, _l)))\\n\\ndef read():\\n\\treturn stdin.readline().split(' ')\\n\\ndef readint():\\n\\treturn int(stdin.readline())\\n\\ndef read_int_l():\\n\\treturn map(int, stdin.readline().split(' '))\\n\\ndef check_numbers(array):\\n\\tsort = sorted(array)\\n\\tfor i in range(len(array)):\\n\\t\\tif sort[i] != i + 1:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = readint()\\nwhile t:\\n\\tn = readint()\\n\\ta = list(read_int_l())\\n\\tmax_val = max(a)\\n\\tfirst = False\\n\\tif check_numbers(a[:max_val]) and check_numbers(a[max_val:]):\\n\\t\\tfirst = True\\n\\tsecond = False\\n\\tif max_val != n - max_val and check_numbers(a[:n - max_val]) and check_numbers(a[n - max_val:]):\\n\\t\\tsecond = True\\n\\twrite_int(first + second)\\n\\twrite('\\\\n')\\n\\tif first:\\n\\t\\twrite_list([max_val, n - max_val])\\n\\t\\twrite('\\\\n')\\n\\tif second:\\n\\t\\twrite_list([n - max_val, max_val])\\n\\t\\twrite('\\\\n')\\n\\tt -= 1\\n\", \"from collections import defaultdict\\n\\ndef soln(arr):\\n\\tuniqueFromFront = [False for _ in arr]\\n\\tuniqueFromBack = [False for _ in arr]\\n\\tprefixSums = [0]\\n\\tgoing = True\\n\\tforwardTable = defaultdict(int)\\n\\tfor (i, elem) in enumerate(arr):\\n\\t\\tif elem in forwardTable:\\n\\t\\t\\tgoing = False\\n\\t\\telif going:\\n\\t\\t\\tuniqueFromFront[i] = True\\n\\t\\tif going:\\n\\t\\t\\tforwardTable[elem] += 1\\n\\t\\tprefixSums.append(prefixSums[-1] + elem)\\n\\tbackwardTable = defaultdict(int)\\n\\tfor i in range(len(arr) - 1, -1, -1):\\n\\t\\telem = arr[i]\\n\\t\\tif elem in backwardTable:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tuniqueFromBack[i] = True\\n\\t\\tbackwardTable[elem] += 1\\n\\n\\tdef rangedSum(l, r):\\n\\t\\treturn prefixSums[r + 1] - prefixSums[l]\\n\\n\\tdef ascSum(n):\\n\\t\\treturn n * (n + 1) // 2\\n\\tresult = []\\n\\tfor i in range(1, len(arr)):\\n\\t\\tif uniqueFromFront[i - 1] and uniqueFromBack[i] and (rangedSum(0, i - 1) == ascSum(i)) and (rangedSum(i, len(arr) - 1) == ascSum(len(arr) - i)):\\n\\t\\t\\tresult.append([len(arr[:i]), len(arr[i:])])\\n\\treturn result\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\ta = [int(i) for i in input().split(' ')]\\n\\t\\tresult = soln(a)\\n\\t\\tprint(len(result))\\n\\t\\tfor res in result:\\n\\t\\t\\t(l1, l2) = res\\n\\t\\t\\tprint('{} {}'.format(l1, l2))\\n\\ndef test():\\n\\ta = [1, 4, 3, 2, 1]\\n\\tprint(soln(a))\\nmain()\\n\", \"def _check_permutation(array):\\n\\treturn set(range(1, len(array) + 1)) == set(array)\\n\\ndef _split_perm(array):\\n\\tviewed_numbers = set()\\n\\tfor (index, number) in enumerate(array):\\n\\t\\tif number in viewed_numbers:\\n\\t\\t\\tif _check_permutation(array[:index]) and _check_permutation(array[index:]):\\n\\t\\t\\t\\treturn index\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn -1\\n\\t\\tviewed_numbers.add(number)\\n\\treturn -1\\ntask_number = int(input())\\nfor _ in range(task_number):\\n\\tn = int(input())\\n\\tarray = [int(i) for i in input().split()]\\n\\tforward = _split_perm(array)\\n\\tarray.reverse()\\n\\tbackward = _split_perm(array)\\n\\tans = []\\n\\tif forward > 0:\\n\\t\\tans.append((forward, n - forward))\\n\\tif backward > 0:\\n\\t\\tans.append((n - backward, backward))\\n\\tans = set(ans)\\n\\tprint(len(ans))\\n\\tfor (l1, l2) in ans:\\n\\t\\tprint(l1, l2)\\n\", \"import sys\\ninput = iter(sys.stdin.readlines()).__next__\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\n\\tdef output():\\n\\t\\toutput = []\\n\\t\\tc1 = {}\\n\\t\\tc2 = {}\\n\\t\\tfor (i, x) in enumerate(a):\\n\\t\\t\\tif x not in c1:\\n\\t\\t\\t\\tc1[x] = i\\n\\t\\t\\telif x not in c2:\\n\\t\\t\\t\\tc2[x] = i\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn []\\n\\t\\t(l, r) = (0, n + 1)\\n\\t\\tfor x in range(1, n + 1):\\n\\t\\t\\tif x in c2:\\n\\t\\t\\t\\t(xl, xr) = sorted([c1[x], c2[x]])\\n\\t\\t\\t\\tl = max(l, xl + 1)\\n\\t\\t\\t\\tr = min(r, xr)\\n\\t\\t\\t\\tif l > r:\\n\\t\\t\\t\\t\\treturn []\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tlonger = 0\\n\\t\\tfor x in range(x, n - (x - 1) + 1):\\n\\t\\t\\tif x not in c1:\\n\\t\\t\\t\\treturn []\\n\\t\\t\\tif x in c2:\\n\\t\\t\\t\\treturn []\\n\\t\\t\\ti = c1[x]\\n\\t\\t\\tif i < l:\\n\\t\\t\\t\\tif longer == +1:\\n\\t\\t\\t\\t\\treturn []\\n\\t\\t\\t\\tlonger = -1\\n\\t\\t\\t\\tl = r\\n\\t\\t\\telif i >= r:\\n\\t\\t\\t\\tif longer == -1:\\n\\t\\t\\t\\t\\treturn []\\n\\t\\t\\t\\tlonger = +1\\n\\t\\t\\t\\tr = l\\n\\t\\toutput.append([l, n - l])\\n\\t\\tif r > l:\\n\\t\\t\\toutput.append([r, n - r])\\n\\t\\treturn output\\n\\tout = output()\\n\\tprint(len(out))\\n\\tfor r in out:\\n\\t\\tprint(*r)\\n\", \"t = int(input())\\nfor jj in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().strip().split(' ')))\\n\\tpp = max(a)\\n\\tx1 = [0 for _ in range(pp + 1)]\\n\\tkk = 0\\n\\tfor i in range(n):\\n\\t\\tx1[a[i]] += 1\\n\\t\\tif x1[a[i]] == 2 and kk == 0:\\n\\t\\t\\tppp = i\\n\\t\\t\\tkk = 1\\n\\tx1 = x1[1:]\\n\\tmn1 = 0\\n\\tmn2 = 0\\n\\tff = True\\n\\tpppp = -1\\n\\tfor i in range(len(x1)):\\n\\t\\tif x1[i] == 2:\\n\\t\\t\\tpppp = i\\n\\tfor i in range(len(x1)):\\n\\t\\tif x1[i] == 0 and i <= pp - 1 or pppp == -1:\\n\\t\\t\\tff = False\\n\\t\\t\\tbreak\\n\\t\\telif x1[i] == 1 and i <= pppp:\\n\\t\\t\\tff = False\\n\\t\\t\\tbreak\\n\\tif not ff:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\txkkk = 0\\n\\t\\tfgh = []\\n\\t\\tsum1 = sum(a[0:pppp + 1])\\n\\t\\tsum2 = sum(a) - sum1\\n\\t\\tsum3 = sum(a[n - pppp - 1:])\\n\\t\\tsum4 = sum(a) - sum3\\n\\t\\tif sum1 == (pppp + 1) * (pppp + 2) // 2 and sum2 == pp * (pp + 1) // 2:\\n\\t\\t\\txkkk += 1\\n\\t\\t\\tfgh.append([pppp + 1, n - pppp - 1])\\n\\t\\tif sum3 == (pppp + 1) * (pppp + 2) // 2 and sum4 == pp * (pp + 1) // 2:\\n\\t\\t\\tif n != 2 * (pppp + 1):\\n\\t\\t\\t\\tfgh.append([n - pppp - 1, pppp + 1])\\n\\t\\t\\t\\txkkk += 1\\n\\t\\tif xkkk == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(xkkk)\\n\\t\\t\\tfor jjj in fgh:\\n\\t\\t\\t\\tprint(jjj[0], jjj[1])\\n\", \"import os, sys, atexit\\nfrom io import BytesIO, StringIO\\ninput = BytesIO(os.read(0, os.fstat(0).st_size)).readline\\n_OUTPUT_BUFFER = StringIO()\\nsys.stdout = _OUTPUT_BUFFER\\n\\n@atexit.register\\ndef write():\\n\\tsys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\\nt = int(input())\\nwhile t:\\n\\tt += -1\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tcount = [0] * (n + 1)\\n\\tfor i in l:\\n\\t\\tcount[i] -= -1\\n\\tl1 = 0\\n\\tl2 = 0\\n\\tch = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif count[i] == 2:\\n\\t\\t\\tl1 = i\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tl2 = n - l1\\n\\tp1 = [0] * (l1 + 1)\\n\\tp2 = [0] * (l2 + 1)\\n\\tfor i in range(l1):\\n\\t\\tif l[i] > l1:\\n\\t\\t\\tch = 1\\n\\t\\t\\tbreak\\n\\t\\tp1[l[i]] = 1\\n\\tfor i in range(l1, n):\\n\\t\\tif l[i] > l2:\\n\\t\\t\\tch = 1\\n\\t\\t\\tbreak\\n\\t\\tp2[l[i]] = 1\\n\\tch1 = 1\\n\\tch2 = 1\\n\\tif 0 in p1[1:l1 + 1] or 0 in p2[1:l2 + 1] or ch:\\n\\t\\tch1 = 0\\n\\t(l1, l2) = (l2, l1)\\n\\tp1 = [0] * (l1 + 1)\\n\\tp2 = [0] * (l2 + 1)\\n\\tch = 0\\n\\tfor i in range(l1):\\n\\t\\tif l[i] > l1:\\n\\t\\t\\tch = 1\\n\\t\\t\\tbreak\\n\\t\\tp1[l[i]] = 1\\n\\tfor i in range(l1, n):\\n\\t\\tif l[i] > l2:\\n\\t\\t\\tch = 1\\n\\t\\t\\tbreak\\n\\t\\tp2[l[i]] = 1\\n\\tif 0 in p1[1:l1 + 1] or 0 in p2[1:l2 + 1] or ch:\\n\\t\\tch2 = 0\\n\\tif ch1:\\n\\t\\tif ch2:\\n\\t\\t\\tif l1 != l2:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\t\\t\\tprint(l2, l1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(l2, l1)\\n\\telif ch2:\\n\\t\\tprint(1)\\n\\t\\tprint(l1, l2)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import os\\nimport heapq\\nimport sys, threading\\nimport math as mt\\nimport operator\\nfrom copy import copy\\nfrom collections import defaultdict, deque\\nfrom io import BytesIO, IOBase\\nsys.setrecursionlimit(10 ** 5)\\n\\ndef gcd(a, b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn gcd(b, a % b)\\n\\ndef inpt():\\n\\treturn [int(k) for k in input().split()]\\n\\ndef main():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\tar = inpt()\\n\\t\\tma = max(ar)\\n\\t\\t(tp1, tp2) = ([], [])\\n\\t\\tif ma >= n:\\n\\t\\t\\tprint(0)\\n\\t\\t\\tcontinue\\n\\t\\tfor i in range(ma):\\n\\t\\t\\ttp1.append(ar[i])\\n\\t\\tfor i in range(ma, n):\\n\\t\\t\\ttp2.append(ar[i])\\n\\t\\ttp1.sort()\\n\\t\\ttp2.sort()\\n\\t\\tok1 = True\\n\\t\\tfor i in range(len(tp1)):\\n\\t\\t\\tif tp1[i] != i + 1:\\n\\t\\t\\t\\tok1 = False\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(tp2)):\\n\\t\\t\\tif tp2[i] != i + 1:\\n\\t\\t\\t\\tok1 = False\\n\\t\\t\\t\\tbreak\\n\\t\\tok2 = True\\n\\t\\tar = ar[::-1]\\n\\t\\t(tp1, tp2) = ([], [])\\n\\t\\tfor i in range(ma):\\n\\t\\t\\ttp1.append(ar[i])\\n\\t\\tfor i in range(ma, n):\\n\\t\\t\\ttp2.append(ar[i])\\n\\t\\ttp1.sort()\\n\\t\\ttp2.sort()\\n\\t\\tfor i in range(len(tp1)):\\n\\t\\t\\tif tp1[i] != i + 1:\\n\\t\\t\\t\\tok2 = False\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(tp2)):\\n\\t\\t\\tif tp2[i] != i + 1:\\n\\t\\t\\t\\tok2 = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif ok1 == ok2 == False:\\n\\t\\t\\tprint(0)\\n\\t\\t\\tcontinue\\n\\t\\tif ok1 == ok2 == True and ma != n - ma:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(n - ma, ma)\\n\\t\\t\\tprint(ma, n - ma)\\n\\t\\t\\tcontinue\\n\\t\\tif ok1 == True:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(ma, n - ma)\\n\\t\\t\\tcontinue\\n\\t\\tif ok2 == True:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - ma, ma)\\n\\t\\t\\tcontinue\\n\\t\\tprint(0)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\tsz = n - mx\\n\\ts1 = {num for num in range(1, sz + 1)}\\n\\ts2 = {num for num in range(1, mx + 1)}\\n\\tans = 0\\n\\tl = []\\n\\tfor i in range(n):\\n\\t\\tif i < sz:\\n\\t\\t\\tif a[i] in s1:\\n\\t\\t\\t\\ts1.remove(a[i])\\n\\t\\telif a[i] in s2:\\n\\t\\t\\ts2.remove(a[i])\\n\\tif len(s1) == 0 and len(s2) == 0:\\n\\t\\tans += 1\\n\\t\\tl.append(sz)\\n\\t\\tl.append(mx)\\n\\ts2 = {num for num in range(1, sz + 1)}\\n\\ts1 = {num for num in range(1, mx + 1)}\\n\\tfor i in range(n):\\n\\t\\tif i < mx:\\n\\t\\t\\tif a[i] in s1:\\n\\t\\t\\t\\ts1.remove(a[i])\\n\\t\\telif a[i] in s2:\\n\\t\\t\\ts2.remove(a[i])\\n\\tif len(s1) == 0 and len(s2) == 0 and (sz != mx):\\n\\t\\tans += 1\\n\\t\\tl.append(mx)\\n\\t\\tl.append(sz)\\n\\tif ans == 0:\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(ans)\\n\\t\\tfor i in range(0, ans * 2, 2):\\n\\t\\t\\tprint(f'{l[i]} {l[i + 1]}')\\n\", \"import sys\\nimport math\\nget_string = lambda : sys.stdin.readline().strip()\\nget_int_list = lambda : list(map(int, sys.stdin.readline().strip().split()))\\nget_int = lambda : int(sys.stdin.readline())\\nfor _ in range(get_int()):\\n\\tn = get_int()\\n\\tlst = get_int_list()\\n\\tn1 = len(set(lst))\\n\\tn2 = n - n1\\n\\tref1 = list(range(1, n1 + 1))\\n\\tref2 = list(range(1, n2 + 1))\\n\\tresult = []\\n\\tflag = True\\n\\tif sorted(lst[:n1]) == ref1 and sorted(lst[n1:]) == ref2:\\n\\t\\tresult.append([n1, n2])\\n\\t\\tif n1 == n2:\\n\\t\\t\\tflag = False\\n\\tif flag and sorted(lst[:n2]) == ref2 and (sorted(lst[n2:]) == ref1):\\n\\t\\tresult.append([n2, n1])\\n\\tprint(len(result))\\n\\tfor row in result:\\n\\t\\tprint(row[0], row[1])\\n\", \"import time\\nimport os, sys\\nfrom io import BytesIO, IOBase\\nfrom types import GeneratorType\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import defaultdict as dd, deque as dq, Counter as dc\\nimport math, string, heapq as h\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\timport os\\n\\t\\tself.os = os\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tself.os.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef getInt():\\n\\treturn int(input())\\n\\ndef getStrs():\\n\\treturn input().split()\\n\\ndef getInts():\\n\\treturn list(map(int, input().split()))\\n\\ndef getStr():\\n\\treturn input()\\n\\ndef listStr():\\n\\treturn list(input())\\n\\ndef getMat(n):\\n\\treturn [getInts() for _ in range(n)]\\n\\ndef getBin():\\n\\treturn list(map(int, list(input())))\\n\\ndef isInt(s):\\n\\treturn '0' <= s[0] <= '9'\\n\\ndef ceil_(a, b):\\n\\treturn a // b + (a % b > 0)\\nMOD = 10 ** 9 + 7\\n\\ndef solve():\\n\\tN = getInt()\\n\\tA = getInts()\\n\\tused = [0] * N\\n\\tops = set()\\n\\tfor (i, a) in enumerate(A):\\n\\t\\tif used[a]:\\n\\t\\t\\tL1 = i\\n\\t\\t\\tL2 = N - i\\n\\t\\t\\tbreak\\n\\t\\tused[a] = 1\\n\\tif sorted(A[L1:]) == list(range(1, L2 + 1)) and sorted(A[:L1]) == list(range(1, L1 + 1)):\\n\\t\\tops.add((L1, L2))\\n\\tused = [0] * N\\n\\tfor (i, a) in enumerate(reversed(A)):\\n\\t\\tif used[a]:\\n\\t\\t\\tL1 = i\\n\\t\\t\\tL2 = N - i\\n\\t\\t\\tbreak\\n\\t\\tused[a] = 1\\n\\tif sorted(A[:L2]) == list(range(1, L2 + 1)) and sorted(A[L2:]) == list(range(1, L1 + 1)):\\n\\t\\tops.add((L2, L1))\\n\\tprint(len(ops))\\n\\tfor (a, b) in ops:\\n\\t\\tprint(a, b)\\n\\treturn\\nfor _ in range(getInt()):\\n\\tsolve()\\n\", \"a = int(input())\\nfor i in range(a):\\n\\ts = int(input())\\n\\tz = list(map(int, input().split()))\\n\\tt = max(z)\\n\\tans1 = z[0:t]\\n\\tans2 = z[t:]\\n\\tans1.sort()\\n\\tans2.sort()\\n\\tflag = 0\\n\\tglag = []\\n\\tfor i in range(len(ans1)):\\n\\t\\tif ans1[i] != i + 1:\\n\\t\\t\\tflag = 1\\n\\tfor i in range(len(ans2)):\\n\\t\\tif ans2[i] != i + 1:\\n\\t\\t\\tflag = 1\\n\\tif flag == 0:\\n\\t\\tglag.append([t, len(z) - t])\\n\\tans1 = z[0:len(z) - t]\\n\\tans2 = z[len(z) - t:]\\n\\tans1.sort()\\n\\tans2.sort()\\n\\tflag = 0\\n\\tfor i in range(len(ans1)):\\n\\t\\tif ans1[i] != i + 1:\\n\\t\\t\\tflag = 1\\n\\tfor i in range(len(ans2)):\\n\\t\\tif ans2[i] != i + 1:\\n\\t\\t\\tflag = 1\\n\\tif flag == 0:\\n\\t\\tglag.append([len(z) - t, t])\\n\\tif len(glag) == 2 and glag[0] == glag[1]:\\n\\t\\tprint(1)\\n\\t\\tprint(glag[0][0], glag[0][1])\\n\\t\\tcontinue\\n\\tprint(len(glag))\\n\\tfor i in range(len(glag)):\\n\\t\\tprint(glag[i][0], glag[i][1])\\n\", \"from collections import defaultdict\\n\\ndef check(arr):\\n\\tarr.sort()\\n\\tvalue = [i + 1 for i in range(len(arr))]\\n\\tif arr == value:\\n\\t\\treturn True\\n\\treturn False\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\thigh = max(l)\\n\\tlow = len(l) - high\\n\\tans = []\\n\\tif check(l[:low]) == True and check(l[low:]) == True:\\n\\t\\tans.append([low, high])\\n\\tif low != high and check(l[:high]) == True and (check(l[high:]) == True):\\n\\t\\tans.append([high, low])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"from collections import defaultdict\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tconc = list(map(int, input().split()))\\n\\tminp = [n] * n\\n\\tmins = [n] * (n + 1)\\n\\tmaxp = [0] * n\\n\\tmaxs = [0] * (n + 1)\\n\\tfor i in range(n):\\n\\t\\tminp[i] = min(minp[i - 1], conc[i])\\n\\t\\tmaxp[i] = max(maxp[i - 1], conc[i])\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tmins[i] = min(mins[i + 1], conc[i])\\n\\t\\tmaxs[i] = max(maxs[i + 1], conc[i])\\n\\ts1 = {conc[0]}\\n\\ts2 = defaultdict(int)\\n\\tfor i in range(1, n):\\n\\t\\ts2[conc[i]] += 1\\n\\tpossibles = []\\n\\tfor i in range(1, n):\\n\\t\\tpred = minp[i - 1] == 1 and mins[i] == 1 and (maxp[i - 1] == i) and (maxs[i] == n - i)\\n\\t\\tif pred and len(s1) == i and (len(s2) == n - i):\\n\\t\\t\\tpossibles.append(i)\\n\\t\\ts1.add(conc[i])\\n\\t\\ts2[conc[i]] -= 1\\n\\t\\tif s2[conc[i]] == 0:\\n\\t\\t\\ts2.pop(conc[i])\\n\\tprint(len(possibles))\\n\\tfor pos in possibles:\\n\\t\\tprint(pos, n - pos)\\n\", \"import sys, os, io\\n\\ndef rs():\\n\\treturn sys.stdin.readline().rstrip()\\n\\ndef ri():\\n\\treturn int(sys.stdin.readline())\\n\\ndef ria():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef ws(s):\\n\\tsys.stdout.write(s + '\\\\n')\\n\\ndef wi(n):\\n\\tsys.stdout.write(str(n) + '\\\\n')\\n\\ndef wia(a):\\n\\tsys.stdout.write(' '.join([str(x) for x in a]) + '\\\\n')\\nimport math, datetime, functools, itertools, operator\\nfrom collections import deque, defaultdict, OrderedDict\\nimport collections\\n\\ndef answer(a, n, v):\\n\\td = {}\\n\\tc = 0\\n\\tz = []\\n\\tmx1 = 0\\n\\tfor i in a:\\n\\t\\tmx1 = max(i, mx1)\\n\\t\\tc += 1\\n\\t\\tif i in d:\\n\\t\\t\\tif d[i] + 1 == 2:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\td[i] += 1\\n\\t\\telse:\\n\\t\\t\\td[i] = 1\\n\\tans = -1\\n\\tfor i in range(c - 1):\\n\\t\\tif i + 1 not in d:\\n\\t\\t\\tans = 0\\n\\tmx2 = 0\\n\\td2 = {}\\n\\tfor j in range(c - 1, n):\\n\\t\\tmx2 = max(mx2, a[j])\\n\\t\\tif a[j] not in d:\\n\\t\\t\\tans = 0\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[a[j]] += 1\\n\\t\\t\\tif d[a[j]] == 3:\\n\\t\\t\\t\\tans = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif a[j] not in d2:\\n\\t\\t\\td2[a[j]] = 1\\n\\tfor i in range(n - c + 1):\\n\\t\\tif i + 1 not in d2:\\n\\t\\t\\tans = 0\\n\\t\\telif d[i + 1] == 3:\\n\\t\\t\\tans = 0\\n\\t\\t\\tbreak\\n\\tif ans == 0:\\n\\t\\treturn [0, 0, v]\\n\\telse:\\n\\t\\treturn [1, c - 1, n - c + 1, v]\\n\\ndef main():\\n\\tstarttime = datetime.datetime.now()\\n\\tif os.path.exists('input.txt'):\\n\\t\\tsys.stdin = open('input.txt', 'r')\\n\\t\\tsys.stdout = open('output.txt', 'w')\\n\\tans = []\\n\\tk = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\\n\\tfor _ in range(ri()):\\n\\t\\tn = ri()\\n\\t\\ta = ria()\\n\\t\\tkk = answer(a, n, 0)\\n\\t\\tzz = answer(a[::-1], n, 1)\\n\\t\\tif kk[0] == 0 and zz[0] == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telif kk[0] != 0 and zz[0] == 0:\\n\\t\\t\\tprint(kk[0])\\n\\t\\t\\tprint(kk[1], kk[2])\\n\\t\\telif kk[0] == 0 and zz[0] != 0:\\n\\t\\t\\tprint(zz[0])\\n\\t\\t\\tprint(n - zz[1], n - zz[2])\\n\\t\\telif kk[1] != n - zz[1]:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(kk[1], kk[2])\\n\\t\\t\\tprint(n - zz[1], n - zz[2])\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(kk[1], kk[2])\\n\\tendtime = datetime.datetime.now()\\n\\ttime = (endtime - starttime).total_seconds() * 1000\\n\\tif os.path.exists('input.txt'):\\n\\t\\tprint('Time:', time, 'ms')\\n\\nclass FastReader(io.IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, fd, chunk_size=1024 * 8):\\n\\t\\tself._fd = fd\\n\\t\\tself._chunk_size = chunk_size\\n\\t\\tself.buffer = io.BytesIO()\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self, size=-1):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size if size == -1 else size))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\nclass FastWriter(io.IOBase):\\n\\n\\tdef __init__(self, fd):\\n\\t\\tself._fd = fd\\n\\t\\tself.buffer = io.BytesIO()\\n\\t\\tself.write = self.buffer.write\\n\\n\\tdef flush(self):\\n\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass FastStdin(io.IOBase):\\n\\n\\tdef __init__(self, fd=0):\\n\\t\\tself.buffer = FastReader(fd)\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\nclass FastStdout(io.IOBase):\\n\\n\\tdef __init__(self, fd=1):\\n\\t\\tself.buffer = FastWriter(fd)\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.flush = self.buffer.flush\\nsys.stdin = FastStdin()\\nsys.stdout = FastStdout()\\nmain()\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tmaxa = max(a)\\n\\tl1 = maxa\\n\\tl2 = n - l1\\n\\tv1 = [False] * l1\\n\\tv2 = [False] * l2\\n\\ta1 = 0\\n\\ta2 = 0\\n\\tcnt = 0\\n\\tfor i in range(l1):\\n\\t\\tif a[i] > l1:\\n\\t\\t\\tbreak\\n\\t\\tv1[a[i] - 1] = True\\n\\tfor i in range(l1, n):\\n\\t\\tif a[i] > l2:\\n\\t\\t\\tbreak\\n\\t\\tv2[a[i] - 1] = True\\n\\tif sum((1 for i in range(l1) if not v1[i])) == 0 and sum((1 for i in range(l2) if not v2[i])) == 0:\\n\\t\\ta1 = 1\\n\\t\\tcnt += 1\\n\\tv1 = [False] * l2\\n\\tv2 = [False] * l1\\n\\tfor i in range(l2):\\n\\t\\tif a[i] > l2:\\n\\t\\t\\tbreak\\n\\t\\tv1[a[i] - 1] = True\\n\\tfor i in range(l2, n):\\n\\t\\tif a[i] > l1:\\n\\t\\t\\tbreak\\n\\t\\tv2[a[i] - 1] = True\\n\\tif sum((1 for i in range(l2) if not v1[i])) == 0 and sum((1 for i in range(l1) if not v2[i])) == 0:\\n\\t\\ta2 = 1\\n\\t\\tcnt += 1\\n\\tif l1 == l2:\\n\\t\\tif a1 == 1:\\n\\t\\t\\tprint('1')\\n\\t\\t\\tprint(l1, l1)\\n\\t\\telse:\\n\\t\\t\\tprint('0')\\n\\telse:\\n\\t\\tprint(cnt)\\n\\t\\tif a1 == 1:\\n\\t\\t\\tprint(l1, n - l1)\\n\\t\\tif a2 == 1:\\n\\t\\t\\tprint(n - l1, l1)\\n\", \"from sys import stdin\\nfor _ in range(int(input())):\\n\\tn = int(stdin.readline().rstrip())\\n\\tl = list(map(int, stdin.readline().rstrip().split(' ')))\\n\\ts = 0\\n\\td = {}\\n\\tle = 0\\n\\tres1 = []\\n\\tres2 = []\\n\\tfor i in range(n):\\n\\t\\tx = d.get(l[i], 0)\\n\\t\\tif x:\\n\\t\\t\\tif s == le * (le + 1) // 2:\\n\\t\\t\\t\\tres1.append(le)\\n\\t\\t\\ts = 0\\n\\t\\t\\tle = 0\\n\\t\\t\\td = {}\\n\\t\\t\\td[l[i]] = 1\\n\\t\\telse:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\tle += 1\\n\\t\\ts += l[i]\\n\\tif s == le * (le + 1) // 2:\\n\\t\\tres1.append(le)\\n\\ts = 0\\n\\tle = 0\\n\\td = {}\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tx = d.get(l[i], 0)\\n\\t\\tif x:\\n\\t\\t\\tif s == le * (le + 1) // 2:\\n\\t\\t\\t\\tres2.append(le)\\n\\t\\t\\ts = 0\\n\\t\\t\\tle = 0\\n\\t\\t\\td = {}\\n\\t\\t\\td[l[i]] = 1\\n\\t\\telse:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\tle += 1\\n\\t\\ts += l[i]\\n\\tif s == le * (le + 1) // 2:\\n\\t\\tres2.append(le)\\n\\tif sum(res2) != n or len(res2) > 2:\\n\\t\\tres2 = []\\n\\tif sum(res1) != n or len(res1) > 2:\\n\\t\\tres1 = []\\n\\tif res1 == list(reversed(res2)):\\n\\t\\tres2 = []\\n\\tprint(len(res2) // 2 + len(res1) // 2)\\n\\tif len(res1) // 2:\\n\\t\\tprint(*res1)\\n\\tif len(res2) // 2:\\n\\t\\tprint(*list(reversed(res2)))\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmax1 = max(l)\\n\\tl2 = []\\n\\tg1 = 1\\n\\tfor i in range(1, max1 + 1):\\n\\t\\tl2.append(i)\\n\\tg2 = set(l)\\n\\tif len(g2) == 1 and n != 2:\\n\\t\\tg1 = 0\\n\\tl3 = l[0:max1]\\n\\tl3.sort()\\n\\tl4 = l[max1:]\\n\\tl4.sort()\\n\\tg3 = 0\\n\\tg4 = 0\\n\\tif max1 == n:\\n\\t\\tg1 == 0\\n\\tif g1 == 1:\\n\\t\\tif l2 != l3:\\n\\t\\t\\tg3 = 0\\n\\t\\telse:\\n\\t\\t\\tg3 = 1\\n\\t\\tif g3 == 1:\\n\\t\\t\\tl5 = []\\n\\t\\t\\tfor i in range(1, max(l4) + 1):\\n\\t\\t\\t\\tl5.append(i)\\n\\t\\t\\tif l5 != l4:\\n\\t\\t\\t\\tg3 = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tg3 = 1\\n\\t\\tl3 = l[-1:-max1 - 1:-1]\\n\\t\\tl3.sort()\\n\\t\\tl4 = l[-max1 - 1::-1]\\n\\t\\tl4.sort()\\n\\t\\tif l2 != l3:\\n\\t\\t\\tg4 = 0\\n\\t\\telse:\\n\\t\\t\\tg4 = 1\\n\\t\\tif g4 == 1:\\n\\t\\t\\tl5 = []\\n\\t\\t\\tfor i in range(1, max(l4) + 1):\\n\\t\\t\\t\\tl5.append(i)\\n\\t\\t\\tif l5 != l4:\\n\\t\\t\\t\\tg4 = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tg4 = 1\\n\\tif g1 == 0:\\n\\t\\tprint(0)\\n\\telif (g3 == 1 and g4 == 1) and max1 != n / 2:\\n\\t\\tprint(2)\\n\\t\\tprint(max1, n - max1)\\n\\t\\tprint(n - max1, max1)\\n\\telif g3 == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(max1, n - max1)\\n\\telif g4 == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(n - max1, max1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"T = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\tnums = list(map(int, input().split()))\\n\\tm_num = max(nums)\\n\\tcount = [0] * (n + 1)\\n\\tgg = False\\n\\tfor i in range(m_num):\\n\\t\\tcount[nums[i]] += 1\\n\\t\\tif count[nums[i]] > 1:\\n\\t\\t\\tgg = True\\n\\tcount = [0] * (n + 1)\\n\\tfor i in range(m_num, n):\\n\\t\\tcount[nums[i]] += 1\\n\\t\\tif count[nums[i]] > 1 or nums[i] > n - m_num:\\n\\t\\t\\tgg = True\\n\\tcount = [0] * (n + 1)\\n\\tgg1 = False\\n\\tfor i in range(n - m_num):\\n\\t\\tcount[nums[i]] += 1\\n\\t\\tif count[nums[i]] > 1 or nums[i] > n - m_num:\\n\\t\\t\\tgg1 = True\\n\\tcount = [0] * (n + 1)\\n\\tfor i in range(n - m_num, n):\\n\\t\\tcount[nums[i]] += 1\\n\\t\\tif count[nums[i]] > 1:\\n\\t\\t\\tgg1 = True\\n\\tif m_num == n - m_num and (not gg):\\n\\t\\tprint(1)\\n\\t\\tprint(m_num, m_num)\\n\\t\\tcontinue\\n\\tprint(2 - gg - gg1)\\n\\tif not gg:\\n\\t\\tprint(m_num, n - m_num)\\n\\tif not gg1:\\n\\t\\tprint(n - m_num, m_num)\\n\", \"from collections import Counter\\n\\ndef check(arr, mx, mx2):\\n\\tst = set(range(1, mx + 1))\\n\\tfor i in range(len(arr)):\\n\\t\\tif len(st) == 0:\\n\\t\\t\\tst2 = set(range(1, mx2 + 1))\\n\\t\\t\\tfor j in range(i, len(arr)):\\n\\t\\t\\t\\tif arr[j] in st2:\\n\\t\\t\\t\\t\\tst2.remove(arr[j])\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn True if len(st2) == 0 else False\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tst.remove(arr[i])\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn False\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tarr = [int(i) for i in input().split()]\\n\\tcnt = Counter(arr)\\n\\tmx = max(arr)\\n\\tmx2 = -1\\n\\tfor i in cnt:\\n\\t\\tif cnt[i] == 2:\\n\\t\\t\\tmx2 = max(i, mx2)\\n\\t\\tif cnt[i] >= 3:\\n\\t\\t\\tprint(0)\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tans = 0\\n\\t\\tansarr = []\\n\\t\\tif check(arr, mx, mx2):\\n\\t\\t\\tans += 1\\n\\t\\t\\tansarr.append([mx, mx2])\\n\\t\\tif check(arr, mx2, mx):\\n\\t\\t\\tans += 1\\n\\t\\t\\tansarr.append([mx2, mx])\\n\\t\\tif ans and mx2 > 0:\\n\\t\\t\\tif mx2 == mx:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(mx, mx2)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(ans)\\n\\t\\t\\t\\tfor i in range(len(ansarr)):\\n\\t\\t\\t\\t\\tprint(ansarr[i][0], ansarr[i][1])\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"from __future__ import division, print_function\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nif sys.version_info[0] < 3:\\n\\tfrom __builtin__ import xrange as range\\n\\tfrom future_builtins import ascii, filter, hex, map, oct, zip\\nfrom collections import Counter\\n\\ndef solve():\\n\\tn = inp()\\n\\tlst = inlt()\\n\\tma = max(lst)\\n\\tif ma >= len(lst):\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\tres = []\\n\\tif is_perm(lst, 0, ma) and is_perm(lst, ma, len(lst)):\\n\\t\\tres.append([str(ma), str(n - ma)])\\n\\tif ma != n - ma and is_perm(lst, 0, n - ma) and is_perm(lst, n - ma, len(lst)):\\n\\t\\tres.append([str(n - ma), str(ma)])\\n\\tprint(len(res))\\n\\tfor r in res:\\n\\t\\tprint(' '.join(r))\\n\\ndef is_perm(lst, l, r):\\n\\tels = r - l\\n\\tseen = [False] * els\\n\\tfor i in range(l, r):\\n\\t\\tel = lst[i] - 1\\n\\t\\tif el >= len(seen) or seen[el]:\\n\\t\\t\\treturn False\\n\\t\\tseen[el] = True\\n\\treturn True\\n\\ndef main():\\n\\tt = inp()\\n\\tfor i in range(t):\\n\\t\\tsolve()\\nBUFSIZE = 8192\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\treturn input().strip()\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"from collections import *\\nfrom bisect import *\\nfrom math import ceil, factorial, gcd\\nfrom heapq import *\\n\\ndef perm(a, l1):\\n\\tv = defaultdict(int)\\n\\tfor i in range(l1):\\n\\t\\tv[a[i]] = 1\\n\\tfor i in range(1, l1 + 1):\\n\\t\\tif v[i] == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\t(l1, l2) = (mx, n - mx)\\n\\tres = []\\n\\tif perm(a, l1) and perm(a[l1:], l2):\\n\\t\\tres.append([l1, l2])\\n\\tif l1 != l2 and perm(a, l2) and perm(a[l2:], l1):\\n\\t\\tres.append([l2, l1])\\n\\tprint(len(res))\\n\\tfor r in res:\\n\\t\\tprint(*r)\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td = [0] * n\\n\\tfor i in range(n):\\n\\t\\td[a[i]] += 1\\n\\t(l1, l2) = (0, 0)\\n\\tfor i in range(1, n):\\n\\t\\tif d[i] == 2:\\n\\t\\t\\tl1 += 1\\n\\t\\t\\tl2 += 1\\n\\t\\telif d[i] == 1:\\n\\t\\t\\tl1 += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif l1 + l2 == n:\\n\\t\\tcnt = 0\\n\\t\\tleft = {}\\n\\t\\tright = {}\\n\\t\\tfa = 0\\n\\t\\tfa1 = 0\\n\\t\\tfor i in range(l1):\\n\\t\\t\\tleft[a[i]] = 1\\n\\t\\tj = n - 1\\n\\t\\tfor i in range(l2):\\n\\t\\t\\tright[a[j]] = 1\\n\\t\\t\\tj -= 1\\n\\t\\tfor i in range(1, l1 + 1):\\n\\t\\t\\tif left.get(i, -1) == -1:\\n\\t\\t\\t\\tfa = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, l2 + 1):\\n\\t\\t\\tif right.get(i, -1) == -1:\\n\\t\\t\\t\\tfa = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tleft = {}\\n\\t\\tright = {}\\n\\t\\tfor i in range(l2):\\n\\t\\t\\tleft[a[i]] = 1\\n\\t\\tj = n - 1\\n\\t\\tfor i in range(l1):\\n\\t\\t\\tright[a[j]] = 1\\n\\t\\t\\tj -= 1\\n\\t\\tfor i in range(1, l2 + 1):\\n\\t\\t\\tif left.get(i, -1) == -1:\\n\\t\\t\\t\\tfa1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, l1 + 1):\\n\\t\\t\\tif right.get(i, -1) == -1:\\n\\t\\t\\t\\tfa1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif fa * fa1 == 1:\\n\\t\\t\\tprint(0)\\n\\t\\telif l1 == l2:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(l1, l2)\\n\\t\\telif fa == 0:\\n\\t\\t\\tif fa1 == 0:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\t\\t\\tprint(l2, l1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\telif fa == 0:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(l1, l2)\\n\\t\\t\\tprint(l2, l1)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(l2, l1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import collections, math\\nlocal = False\\nif local:\\n\\tfile = open('inputt.txt', 'r')\\n\\ndef inp():\\n\\tif local:\\n\\t\\treturn file.readline().rstrip()\\n\\telse:\\n\\t\\treturn input().rstrip()\\n\\ndef ints():\\n\\treturn [int(_) for _ in inp().split()]\\nt = int(inp())\\nfor _ in range(t):\\n\\tn = int(inp())\\n\\tarr = ints()\\n\\tans = []\\n\\tright = 0\\n\\tvisited = set()\\n\\tvalidPermu = [False] * len(arr)\\n\\tfor i in range(len(arr)):\\n\\t\\tright = max(right, arr[-i - 1])\\n\\t\\tif arr[-i - 1] not in visited:\\n\\t\\t\\tvisited.add(arr[-i - 1])\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif i + 1 == right:\\n\\t\\t\\tvalidPermu[-i - 1] = True\\n\\tright = 0\\n\\tvisited.clear()\\n\\tfor i in range(len(arr)):\\n\\t\\tright = max(right, arr[i])\\n\\t\\tif arr[i] not in visited:\\n\\t\\t\\tvisited.add(arr[i])\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif i + 1 == right and validPermu[i + 1]:\\n\\t\\t\\t(first, sec) = (i + 1, len(arr) - i - 1)\\n\\t\\t\\tans.append([first, sec])\\n\\tif len(ans) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(ans))\\n\\t\\tfor (first, sec) in ans:\\n\\t\\t\\tprint('{0} {1}'.format(first, sec))\\n\", \"from sys import stdin, stdout\\nfor _ in range(int(stdin.readline())):\\n\\tn = int(stdin.readline())\\n\\tarr = list(map(int, stdin.readline().split()))\\n\\ta = len(set(arr))\\n\\tif a == n:\\n\\t\\tprint(2)\\n\\t\\tprint(n, 0)\\n\\t\\tprint(0, n)\\n\\telse:\\n\\t\\tans = []\\n\\t\\tc = 0\\n\\t\\tfor t in range(2):\\n\\t\\t\\tif set(arr[:a]) == set(range(1, a + 1)) and set(arr[a:]) == set(range(1, n - a + 1)):\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\tans.extend([a, n - a])\\n\\t\\t\\tif a == n - a:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ta = n - a\\n\\t\\tprint(c)\\n\\t\\tfor t in range(0, len(ans), 2):\\n\\t\\t\\tprint(ans[t], ans[t + 1])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tam2 = 0\\n\\tsumm2 = 0\\n\\tam1 = 0\\n\\tsumm1 = 0\\n\\tch1 = set()\\n\\tans1 = set()\\n\\tch2 = set()\\n\\tch1.add(0)\\n\\tchh = set()\\n\\tfor i in a:\\n\\t\\tchh.add(i)\\n\\t\\tam1 += 1\\n\\t\\tsumm1 += i\\n\\t\\tif len(chh) == am1 and am1 * (am1 + 1) // 2 == summ1:\\n\\t\\t\\tch1.add(am1)\\n\\tans = 0\\n\\tanss = []\\n\\tnum = len(a)\\n\\tchh = set()\\n\\tif num in ch1:\\n\\t\\tans += 1\\n\\t\\tanss.append(len(a))\\n\\t\\tanss.append(0)\\n\\tfor i in range(len(a) - 1, -1, -1):\\n\\t\\tchh.add(a[i])\\n\\t\\tam2 += 1\\n\\t\\tsumm2 += a[i]\\n\\t\\tif len(chh) == am2 and am2 * (am2 + 1) // 2 == summ2:\\n\\t\\t\\tnum = len(a) - am2\\n\\t\\t\\tif num in ch1:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tanss.append(len(a) - am2)\\n\\t\\t\\t\\tanss.append(am2)\\n\\tprint(ans)\\n\\tfor i in range(ans):\\n\\t\\tprint(anss[2 * i], anss[2 * i + 1])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = [int(x) for x in input().split()]\\n\\tans = []\\n\\ts1 = 0\\n\\tc = 0\\n\\ts = set([])\\n\\ts2 = sum(l)\\n\\tfor i in range(n):\\n\\t\\ts1 += l[i]\\n\\t\\ts.add(l[i])\\n\\t\\tt = i + 1\\n\\t\\tp = n - t\\n\\t\\tif t * (t + 1) // 2 == s1 and len(s) == t and (s2 - s1 == p * (p + 1) // 2):\\n\\t\\t\\tc += 1\\n\\t\\t\\tans.append((t, p))\\n\\tans2 = set([])\\n\\ts1 = 0\\n\\ts = set([])\\n\\ts2 = sum(l)\\n\\tk = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\ts1 += l[i]\\n\\t\\ts.add(l[i])\\n\\t\\tt = k + 1\\n\\t\\tp = n - t\\n\\t\\tif t * (t + 1) // 2 == s1 and len(s) == t and (s2 - s1 == p * (p + 1) // 2):\\n\\t\\t\\tans2.add((t, p))\\n\\t\\tk += 1\\n\\tc = 0\\n\\tnewans = []\\n\\tfor i in ans:\\n\\t\\tif (i[1], i[0]) in ans2:\\n\\t\\t\\tnewans.append((i[0], i[1]))\\n\\t\\t\\tc += 1\\n\\tprint(c)\\n\\tfor i in newans:\\n\\t\\tprint(i[0], i[1])\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tl = int(input())\\n\\tdata = list(map(int, input().split()))\\n\\tm = max(data)\\n\\ta = sorted(data[:m])\\n\\tb = sorted(data[m:])\\n\\tc = sorted(data[:l - m])\\n\\td = sorted(data[l - m:])\\n\\te = [i for i in range(1, m + 1)]\\n\\tf = [i for i in range(1, l - m + 1)]\\n\\tif m != l / 2:\\n\\t\\tif (a == e and b == f) and (c == f and d == e):\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(m, l - m)\\n\\t\\t\\tprint(l - m, m)\\n\\t\\telif (a == e and b == f) and (c != f or d != e):\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, l - m)\\n\\t\\telif (a != e or b != f) and (c == f and d == e):\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(l - m, m)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telif a == e and b == f or (c == f and d == e):\\n\\t\\tprint(1)\\n\\t\\tprint(m, m)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor f in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tx = [0] * (n + 1)\\n\\tk = 0\\n\\tm = 0\\n\\tt = 0\\n\\ts = [0]\\n\\tfor i in range(n):\\n\\t\\tx[a[i]] += 1\\n\\t\\tif x[a[i]] == 1:\\n\\t\\t\\tt += 1\\n\\t\\tm = max(m, a[i])\\n\\t\\tif m == t and m == i + 1:\\n\\t\\t\\tk += 1\\n\\t\\t\\ts += [i + 1]\\n\\tpossible = 1\\n\\tp1 = 0\\n\\tif x[1] != 2:\\n\\t\\tpossible = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif x[i + 2] > x[i + 1]:\\n\\t\\t\\tpossible = 0\\n\\t\\tif x[i + 2] < x[i + 1] and x[i + 1] == 2:\\n\\t\\t\\tp1 = i + 1\\n\\tif possible == 1:\\n\\t\\trk = 0\\n\\t\\trs = [0]\\n\\t\\tfor i in range(k):\\n\\t\\t\\tif s[i + 1] == p1 or s[i + 1] == n - p1:\\n\\t\\t\\t\\trk += 1\\n\\t\\t\\t\\trs += [s[i + 1]]\\n\\t\\tprint(rk)\\n\\t\\tfor i in range(rk):\\n\\t\\t\\tprint(rs[i + 1], n - rs[i + 1])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import atexit\\nimport io\\nimport sys\\n_INPUT_LINES = sys.stdin.read().splitlines()\\ninput = iter(_INPUT_LINES).__next__\\n_OUTPUT_BUFFER = io.StringIO()\\nsys.stdout = _OUTPUT_BUFFER\\n\\n@atexit.register\\ndef write():\\n\\tsys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\\ntestcases = int(input())\\nfor case in range(testcases):\\n\\tn = int(input())\\n\\tl = [int(zax) for zax in input().split()]\\n\\ttotal = sum(l)\\n\\tfirst = 0\\n\\tanswers = []\\n\\tprev = 0\\n\\tfor i in range(n - 1):\\n\\t\\tprev += l[i]\\n\\t\\tother_sum = total - prev\\n\\t\\tcount = n - i - 1\\n\\t\\tif (i + 1) * (i + 2) // 2 == prev and count * (count + 1) // 2 == other_sum:\\n\\t\\t\\tp1 = l[0:i + 1]\\n\\t\\t\\tp2 = l[i + 1:]\\n\\t\\t\\tif sorted(p1) == [i for i in range(1, i + 2)] and sorted(p2) == [i for i in range(1, count + 1)]:\\n\\t\\t\\t\\tfirst += 1\\n\\t\\t\\t\\tanswers.append([i + 1, count])\\n\\tprint(first)\\n\\tfor i in range(first):\\n\\t\\tprint(answers[i][0], answers[i][1])\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\n\\ndef solve(N, A):\\n\\titems = set()\\n\\tans = set()\\n\\tmax_item = -1\\n\\tfor i in range(N):\\n\\t\\titems.add(A[i])\\n\\t\\tif A[i] > max_item:\\n\\t\\t\\tmax_item = A[i]\\n\\t\\tif len(items) == max_item and len(items) == i + 1:\\n\\t\\t\\tans.add(i + 1)\\n\\treturn ans\\nT = int(input())\\nfor t in range(T):\\n\\tN = int(input())\\n\\tA = list(map(int, input().split(' ')))\\n\\tans1 = solve(N, A)\\n\\tans2 = {N - x for x in solve(N, list(reversed(A)))}\\n\\tans = ans1 & ans2\\n\\tprint(len(ans))\\n\\tfor x in ans:\\n\\t\\tprint(x, N - x)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tv = list(map(int, input().split()))\\n\\tsup = max(v)\\n\\tnum = 0\\n\\tres = []\\n\\tif set(v[:sup]) == set(range(1, sup + 1)) and set(v[sup:]) == set(range(1, n - sup + 1)):\\n\\t\\tnum += 1\\n\\t\\tres.append((sup, n - sup))\\n\\tif 2 * sup != n:\\n\\t\\tif set(v[:n - sup]) == set(range(1, n - sup + 1)) and set(v[-sup:]) == set(range(1, sup + 1)):\\n\\t\\t\\tnum += 1\\n\\t\\t\\tres.append((n - sup, sup))\\n\\tif num == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(num)\\n\\t\\tfor i in res:\\n\\t\\t\\tprint(*i)\\n\", \"import sys\\nfrom math import sqrt, floor\\nfrom collections import deque, Counter\\ninp = sys.stdin.readline\\nread = lambda : list(map(int, inp().split()))\\n\\ndef a():\\n\\tans = ''\\n\\tfor _ in range(int(inp())):\\n\\t\\t(n, x) = read()\\n\\t\\tarr = sorted(list(set(read())))\\n\\t\\tn = len(arr)\\n\\t\\ti = 0\\n\\t\\twhile i < n and arr[i] <= x + 1:\\n\\t\\t\\tx += 1\\n\\t\\t\\ti += 1\\n\\t\\tans += str(x) + '\\\\n'\\n\\tprint(ans)\\n\\ndef b():\\n\\tans = ''\\n\\tfor _ in range(int(inp())):\\n\\t\\tn = int(inp())\\n\\t\\tarr = read()\\n\\t\\ttotal = sum(arr)\\n\\t\\ts1 = 0\\n\\t\\tans_lis = []\\n\\t\\tfor i in range(n):\\n\\t\\t\\ts1 += arr[i]\\n\\t\\t\\ttotal -= arr[i]\\n\\t\\t\\t(p1, p2) = (i + 1, n - i - 1)\\n\\t\\t\\tif s1 == p1 * (p1 + 1) // 2 and total == p2 * (p2 + 1) // 2 and (len(set(arr[:p1])) == p1) and (len(set(arr[p1:])) == p2):\\n\\t\\t\\t\\tans_lis.append(str(p1) + ' ' + str(p2))\\n\\t\\tans += str(len(ans_lis)) + '\\\\n'\\n\\t\\tfor i in ans_lis:\\n\\t\\t\\tans += str(i) + '\\\\n'\\n\\tprint(ans)\\nb()\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tar = list(map(int, input().split()))\\n\\tl1 = max(ar)\\n\\tl2 = n - l1\\n\\tse1 = set({})\\n\\tse2 = set({})\\n\\tfor i in range(1, l1 + 1):\\n\\t\\tse1.add(i)\\n\\tfor j in range(1, n - l1 + 1):\\n\\t\\tse2.add(j)\\n\\tk = 0\\n\\tli = []\\n\\tif se1 == set(ar[:l1]) and se2 == set(ar[l1:]):\\n\\t\\tk += 1\\n\\t\\tli.append([l1, l2])\\n\\tif se1 == set(ar[-l1:]) and se2 == set(ar[:-l1]):\\n\\t\\tif l1 != l2:\\n\\t\\t\\tk += 1\\n\\t\\t\\tli.append([l2, l1])\\n\\tprint(k)\\n\\tfor z in range(k):\\n\\t\\tprint(*li[z])\\n\", \"from functools import reduce\\nimport os\\nimport sys\\nfrom math import *\\nfrom collections import *\\nfrom fractions import *\\nfrom bisect import *\\nfrom heapq import *\\nfrom io import BytesIO, IOBase\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef value():\\n\\treturn tuple(map(int, input().split()))\\n\\ndef arr():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef sarr():\\n\\treturn [int(i) for i in input()]\\n\\ndef starr():\\n\\treturn [str(x) for x in input().split()]\\n\\ndef inn():\\n\\treturn int(input())\\n\\ndef svalue():\\n\\treturn tuple(map(str, input().split()))\\nmo = 1000000007\\nd = defaultdict(int)\\nfor i in range(1, 200001):\\n\\tres = i * (i + 1) // 2\\n\\td[res] = i\\nfor _ in range(inn()):\\n\\tn = inn()\\n\\ta = arr()\\n\\tsm = 0\\n\\tcount = defaultdict(int)\\n\\tpre = defaultdict(int)\\n\\tflag = 0\\n\\tfor i in range(n):\\n\\t\\tsm += a[i]\\n\\t\\tif a[i] in count:\\n\\t\\t\\tflag = 1\\n\\t\\telse:\\n\\t\\t\\tcount[a[i]] += 1\\n\\t\\tif sm in d and i + 1 == d[sm] and (flag == 0):\\n\\t\\t\\tpre[i] = sm\\n\\tsm = 0\\n\\tflag = 0\\n\\tcount = defaultdict(int)\\n\\tsuf = defaultdict(int)\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tsm += a[i]\\n\\t\\tif a[i] in count:\\n\\t\\t\\tflag = 1\\n\\t\\telse:\\n\\t\\t\\tcount[a[i]] += 1\\n\\t\\tif sm in d and n - i == d[sm] and (flag == 0):\\n\\t\\t\\tsuf[i] = sm\\n\\tans = []\\n\\tfor i in pre:\\n\\t\\tif i + 1 in suf:\\n\\t\\t\\tans += [(d[pre[i]], d[suf[i + 1]])]\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(ans[i][0], ans[i][1])\\n\", \"def check(sublist, length):\\n\\tif len(set(sublist)) != length:\\n\\t\\treturn False\\n\\tif max(sublist) > length:\\n\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tcount = 0\\n\\tresult = ''\\n\\tfor i in {max(a), n - max(a)}:\\n\\t\\tif check(a[:i], i):\\n\\t\\t\\tif check(a[i:], n - i):\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tresult += f'{i} {n - i}\\\\n'\\n\\tprint(count)\\n\\tif result:\\n\\t\\tresult = result[:-1]\\n\\t\\tprint(result)\\n\", \"def check(arr):\\n\\tarr.sort()\\n\\tfor i in range(0, len(arr)):\\n\\t\\tif arr[i] != i + 1:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tw = int(input())\\n\\tdata = list(map(int, input().split()))\\n\\tindexOfMax = max(data)\\n\\tflag1 = 0\\n\\tflag2 = 0\\n\\tif check(data[:indexOfMax]) and check(data[indexOfMax:]):\\n\\t\\tflag1 = 1\\n\\tif check(data[:w - indexOfMax]) and check(data[w - indexOfMax:]):\\n\\t\\tif indexOfMax != w - indexOfMax:\\n\\t\\t\\tflag2 = 1\\n\\tprint(flag2 + flag1)\\n\\tif flag1 == 1:\\n\\t\\tprint(indexOfMax, w - indexOfMax)\\n\\tif flag2 == 1:\\n\\t\\tprint(w - indexOfMax, indexOfMax)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = [int(p) for p in input().split()]\\n\\tm = max(arr)\\n\\tcount = 0\\n\\tif sorted(arr[:m]) == list(range(1, m + 1)) and sorted(arr[m:]) == list(range(1, n - m + 1)):\\n\\t\\tcount += 1\\n\\t\\tt = 1\\n\\tif sorted(arr[:n - m]) == list(range(1, n - m + 1)) and sorted(arr[n - m:]) == list(range(1, m + 1)):\\n\\t\\tcount += 1\\n\\t\\tt = 2\\n\\tif count == 2:\\n\\t\\tif n - m == m:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - m, m)\\n\\t\\t\\tcontinue\\n\\t\\tprint(count)\\n\\t\\tprint(n - m, m)\\n\\t\\tprint(m, n - m)\\n\\telif count == 1:\\n\\t\\tprint(1)\\n\\t\\tif t == 1:\\n\\t\\t\\tprint(m, n - m)\\n\\t\\telse:\\n\\t\\t\\tprint(n - m, m)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"kl = int(input())\\nfor l in range(kl):\\n\\tn = int(input())\\n\\tmx = 0\\n\\tk = 0\\n\\ta = [0 for j in range(n)]\\n\\tfor i in input().split():\\n\\t\\ti = int(i)\\n\\t\\ta[k] = i\\n\\t\\tk += 1\\n\\t\\tmx = max(mx, i)\\n\\tif mx >= n:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tkn1 = n - mx\\n\\tkn2 = mx\\n\\tA1 = {int(i) for i in range(1, kn1 + 1)}\\n\\tB1 = {int(i) for i in range(1, kn2 + 1)}\\n\\tA2 = {int(i) for i in range(1, kn2 + 1)}\\n\\tB2 = {int(i) for i in range(1, kn1 + 1)}\\n\\tra1 = set()\\n\\tra2 = set()\\n\\trb1 = set()\\n\\trb2 = set()\\n\\tfor i in range(kn1):\\n\\t\\tra1.add(a[i])\\n\\tfor i in range(kn1, n):\\n\\t\\trb1.add(a[i])\\n\\tfor i in range(kn2):\\n\\t\\tra2.add(a[i])\\n\\tfor i in range(kn2, n):\\n\\t\\trb2.add(a[i])\\n\\tif A1 == ra1 and rb1 == B1:\\n\\t\\tif A2 == ra2 and B2 == rb2:\\n\\t\\t\\tif kn1 == kn2:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(kn1, kn2)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(kn1, kn2)\\n\\t\\t\\t\\tprint(kn2, kn1)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(kn1, kn2)\\n\\telif A2 == ra2 and B2 == rb2:\\n\\t\\tprint(1)\\n\\t\\tprint(kn2, kn1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"def NO():\\n\\treturn print('NO')\\n\\ndef YES():\\n\\treturn print('YES')\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef LIST():\\n\\treturn list(map(int, input().split()))\\n\\ndef STR():\\n\\treturn input()\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\nfor _ in range(INT()):\\n\\tn = INT()\\n\\ta = LIST()\\n\\td = [0] * n\\n\\tfor i in range(n):\\n\\t\\td[a[i]] += 1\\n\\tl1 = 0\\n\\tl2 = 0\\n\\tfor i in range(1, n):\\n\\t\\tif d[i] == 2:\\n\\t\\t\\tl1 += 1\\n\\t\\t\\tl2 += 1\\n\\t\\telif d[i] == 1:\\n\\t\\t\\tl1 += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif l1 + l2 == n:\\n\\t\\tcnt = 0\\n\\t\\tleft = {}\\n\\t\\tright = {}\\n\\t\\tf = 0\\n\\t\\tf1 = 0\\n\\t\\tfor i in range(l1):\\n\\t\\t\\tleft[a[i]] = 1\\n\\t\\tj = n - 1\\n\\t\\tfor i in range(l2):\\n\\t\\t\\tright[a[j]] = 1\\n\\t\\t\\tj -= 1\\n\\t\\tfor i in range(1, l1 + 1):\\n\\t\\t\\tif left.get(i, -1) == -1:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, l2 + 1):\\n\\t\\t\\tif right.get(i, -1) == -1:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tleft = {}\\n\\t\\tright = {}\\n\\t\\tfor i in range(l2):\\n\\t\\t\\tleft[a[i]] = 1\\n\\t\\tj = n - 1\\n\\t\\tfor i in range(l1):\\n\\t\\t\\tright[a[j]] = 1\\n\\t\\t\\tj -= 1\\n\\t\\tfor i in range(1, l2 + 1):\\n\\t\\t\\tif left.get(i, -1) == -1:\\n\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, l1 + 1):\\n\\t\\t\\tif right.get(i, -1) == -1:\\n\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif f * f1 == 1:\\n\\t\\t\\tprint(0)\\n\\t\\telif f == 0:\\n\\t\\t\\tif l1 == l2:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\t\\telif f1 == 0:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\t\\t\\tprint(l2, l1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l2)\\n\\t\\telif f == 0:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(l1, l2)\\n\\t\\t\\tprint(l2, l1)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(l2, l1)\\n\\telse:\\n\\t\\tprint('0')\\n\", \"ans = []\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tu = list(map(lambda x: int(x) - 1, input().split()))\\n\\tmm = max(u) + 1\\n\\td = []\\n\\tfor i in range(mm):\\n\\t\\td.append([])\\n\\tfor i in range(n):\\n\\t\\td[u[i]].append(i)\\n\\tok = False\\n\\tokk = False\\n\\tfor i in range(mm):\\n\\t\\tif len(d[i]) == 0 or len(d[i]) > 2:\\n\\t\\t\\tans.append('0')\\n\\t\\t\\tokk = True\\n\\t\\t\\tbreak\\n\\t\\tif not ok:\\n\\t\\t\\tif len(d[i]) == 1:\\n\\t\\t\\t\\tok = True\\n\\t\\telif len(d[i]) == 2:\\n\\t\\t\\tans.append('0')\\n\\t\\t\\tokk = True\\n\\t\\t\\tbreak\\n\\tif okk:\\n\\t\\tcontinue\\n\\tw = []\\n\\tw.append((-1, 1))\\n\\tw.append((n, -1))\\n\\tfor i in range(mm):\\n\\t\\tif len(d[i]) == 1:\\n\\t\\t\\tbreak\\n\\t\\tw.append((d[i][0], 1))\\n\\t\\tw.append((d[i][1], -1))\\n\\tw.sort()\\n\\tst = 0\\n\\ta = -1\\n\\tb = -1\\n\\tfor i in range(len(w)):\\n\\t\\tst += w[i][1]\\n\\t\\tif st == len(w) // 2:\\n\\t\\t\\ta = w[i][0]\\n\\t\\tif st == len(w) // 2 - 1 and a != -1:\\n\\t\\t\\tb = w[i][0]\\n\\t\\t\\tbreak\\n\\tmn = n\\n\\tmx = -1\\n\\tfor i in range(len(w) // 2 - 1, mm):\\n\\t\\tmn = min(mn, d[i][0])\\n\\t\\tmx = max(mx, d[i][0])\\n\\tif mx == -1:\\n\\t\\tmn = -1\\n\\tp1 = (-1, mn)\\n\\tp2 = (mx, n)\\n\\tansi = []\\n\\tif a < mn:\\n\\t\\tfor i in range(a, min(b, mn)):\\n\\t\\t\\tansi.append((i + 1, n - i - 1))\\n\\tif mx < b:\\n\\t\\tfor i in range(max(mx, a), b):\\n\\t\\t\\tansi.append((i + 1, n - i - 1))\\n\\tans.append(str(len(ansi)))\\n\\tfor i in range(len(ansi)):\\n\\t\\tans.append(str(ansi[i][0]) + ' ' + str(ansi[i][1]))\\nprint('\\\\n'.join(ans))\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td = {}\\n\\tfor i in a:\\n\\t\\tif i not in d:\\n\\t\\t\\td[i] = 1\\n\\t\\telse:\\n\\t\\t\\td[i] = 2\\n\\tx = 0\\n\\ty = 0\\n\\tfor i in d.keys():\\n\\t\\tif i > x:\\n\\t\\t\\tx = i\\n\\t\\tif i > y and d[i] == 2:\\n\\t\\t\\ty = i\\n\\tif x + y != n or y == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\t(flag1, flag2, flag3, flag4) = (1, 1, 1, 1)\\n\\td1 = {}\\n\\td2 = {}\\n\\td3 = {}\\n\\td4 = {}\\n\\tfor i in range(y):\\n\\t\\td1[i + 1] = 0\\n\\t\\td4[i + 1] = 0\\n\\tfor i in range(x):\\n\\t\\td2[i + 1] = 0\\n\\t\\td3[i + 1] = 0\\n\\tfor i in range(0, y):\\n\\t\\td1[a[i]] = 1\\n\\tfor i in range(y, n):\\n\\t\\td2[a[i]] = 1\\n\\tfor i in range(0, x):\\n\\t\\td3[a[i]] = 1\\n\\tfor i in range(x, n):\\n\\t\\td4[a[i]] = 1\\n\\tfor i in range(y):\\n\\t\\tif d1[i + 1] == 0:\\n\\t\\t\\tflag1 = 0\\n\\t\\tif d4[i + 1] == 0:\\n\\t\\t\\tflag3 = 0\\n\\tfor i in range(x):\\n\\t\\tif d2[i + 1] == 0:\\n\\t\\t\\tflag2 = 0\\n\\t\\tif d3[i + 1] == 0:\\n\\t\\t\\tflag4 = 0\\n\\tflag5 = flag1 and flag2\\n\\tflag6 = flag3 and flag4\\n\\tif flag5 and flag6 == 1:\\n\\t\\tif x != y:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(x, y)\\n\\t\\t\\tprint(y, x)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(x, y)\\n\\t\\tcontinue\\n\\tif flag5 == 0 and flag6 == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tprint(1)\\n\\tif flag5 == 1:\\n\\t\\tprint(y, x)\\n\\telse:\\n\\t\\tprint(x, y)\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\nT = int(input())\\nfor t in range(1, T + 1):\\n\\tL = int(input())\\n\\tW = [int(x) for x in input().split()]\\n\\tm = max(W)\\n\\tanswer = []\\n\\tif set(W[:m]) == set(range(1, m + 1)) and set(W[m:]) == set(range(1, L - m + 1)):\\n\\t\\tanswer.append(m)\\n\\tm = L - m\\n\\tif set(W[:m]) == set(range(1, m + 1)) and set(W[m:]) == set(range(1, L - m + 1)):\\n\\t\\tanswer.append(m)\\n\\tanswer = set(answer)\\n\\tprint(len(answer))\\n\\tfor a in answer:\\n\\t\\tprint('{} {}'.format(a, L - a))\\n\", \"def check(array, index):\\n\\tnew_array = array[:index]\\n\\tnew_array.sort()\\n\\tfor i in range(index):\\n\\t\\tif i + 1 != new_array[i]:\\n\\t\\t\\treturn False\\n\\tnew_array = array[index:]\\n\\tnew_array.sort()\\n\\tfor i in range(len(array) - index):\\n\\t\\tif i + 1 != new_array[i]:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = int(input())\\nwhile t:\\n\\tn = int(input())\\n\\tperm = list(map(int, input().split()))\\n\\tmaxPerm = -1\\n\\tfor x in perm:\\n\\t\\tif x > maxPerm:\\n\\t\\t\\tmaxPerm = x\\n\\tforward = check(perm, maxPerm)\\n\\treverse = check(perm[::-1], maxPerm)\\n\\tif maxPerm == n - maxPerm:\\n\\t\\treverse = False\\n\\tif forward and reverse:\\n\\t\\tprint('2')\\n\\t\\tprint(maxPerm, n - maxPerm)\\n\\t\\tprint(n - maxPerm, maxPerm)\\n\\telif forward:\\n\\t\\tprint('1')\\n\\t\\tprint(maxPerm, n - maxPerm)\\n\\telif reverse:\\n\\t\\tprint('1')\\n\\t\\tprint(n - maxPerm, maxPerm)\\n\\telse:\\n\\t\\tprint('0')\\n\\tt -= 1\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ta = max(l)\\n\\tb = n - a\\n\\tl1 = l[:b]\\n\\tflag1 = 1\\n\\tflag2 = 0\\n\\tl1.sort()\\n\\tfor i in range(b):\\n\\t\\tif l1[i] != i + 1:\\n\\t\\t\\tflag1 = 0\\n\\t\\t\\tbreak\\n\\tif flag1 != 0:\\n\\t\\tl2 = l[b:]\\n\\t\\tl2.sort()\\n\\t\\tfor i in range(n - b):\\n\\t\\t\\tif l2[i] != i + 1:\\n\\t\\t\\t\\tflag1 = 0\\n\\t\\t\\t\\tbreak\\n\\tif 2 * b != n:\\n\\t\\tflag2 = 1\\n\\t\\tb = n - b\\n\\t\\tl1 = l[:b]\\n\\t\\tl1.sort()\\n\\t\\tfor i in range(b):\\n\\t\\t\\tif l1[i] != i + 1:\\n\\t\\t\\t\\tflag2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag2 != 0:\\n\\t\\t\\tl2 = l[b:]\\n\\t\\t\\tl2.sort()\\n\\t\\t\\tfor i in range(n - b):\\n\\t\\t\\t\\tif l2[i] != i + 1:\\n\\t\\t\\t\\t\\tflag2 = 0\\n\\t\\t\\t\\t\\tbreak\\n\\tif flag1 == 1 and flag2 == 1 and (b != 0) and (n - b != 0):\\n\\t\\tprint(2)\\n\\t\\tprint(*[b, n - b])\\n\\t\\tprint(*[n - b, b])\\n\\telif flag1 == 1 and flag2 == 0 and (b != 0) and (n - b != 0):\\n\\t\\tprint(1)\\n\\t\\tprint(*[n - b, b])\\n\\telif flag2 == 1 and flag1 == 0 and (b != 0) and (n - b != 0):\\n\\t\\tprint(1)\\n\\t\\tprint(*[b, n - b])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor T in range(t):\\n\\tn = int(input())\\n\\tv = [int(i) for i in input().split(' ')]\\n\\ts = sorted(v)\\n\\tl1 = 0\\n\\tfor i in range(1, n):\\n\\t\\tif s[i] == s[i - 1]:\\n\\t\\t\\tl1 = s[i]\\n\\tl2 = s[-1]\\n\\tif l1 + l2 != n:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tans = []\\n\\tf1 = set(v[:l1])\\n\\tf2 = set(v[l1:])\\n\\tif len(f1) == l1 and len(f2) == l2:\\n\\t\\tans.append((l1, l2))\\n\\ts1 = set(v[:l2])\\n\\ts2 = set(v[l2:])\\n\\tif l1 != l2 and len(s2) == l1 and (len(s1) == l2):\\n\\t\\tans.append((l2, l1))\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tx = int(input())\\n\\tnum = list((0 for j in range(x)))\\n\\tarr = list(map(int, input().split()))\\n\\tma = max(arr)\\n\\tans = list()\\n\\tif len(set(arr[:ma])) == ma and len(set(arr[ma:])) == x - ma and (max(arr[:ma]) == ma) and (max(arr[ma:]) == x - ma):\\n\\t\\tans.append([ma, x - ma])\\n\\tma = x - ma\\n\\tif len(set(arr[:ma])) == ma and len(set(arr[ma:])) == x - ma and (max(arr[:ma]) == ma) and (max(arr[ma:]) == x - ma):\\n\\t\\tans.append([ma, x - ma])\\n\\tif ma == x - ma:\\n\\t\\tif len(ans) == 2:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(*ans[0])\\n\\t\\t\\tcontinue\\n\\tprint(len(ans))\\n\\tfor j in ans:\\n\\t\\tprint(*j)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tans = []\\n\\tls = [0] * (max(a) + 1)\\n\\tls2 = [0] * (max(a) + 1)\\n\\tind = 0\\n\\tcheck = True\\n\\tpsm = 0\\n\\tfor i in range(n):\\n\\t\\tif ls[a[i]] == 1:\\n\\t\\t\\tind = i - 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tls[a[i]] = 1\\n\\t\\t\\tpsm += a[i]\\n\\tif psm != (ind + 2) * (ind + 1) / 2:\\n\\t\\tcheck = False\\n\\tcnt = n - ind - 1\\n\\tr = cnt\\n\\tsm = 0\\n\\tfor i in range(ind + 1, n):\\n\\t\\tif ls2[a[i]] == 1:\\n\\t\\t\\tcheck = False\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tls2[a[i]] = 1\\n\\t\\t\\tcnt -= 1\\n\\t\\t\\tsm += a[i]\\n\\tif check and cnt == 0 and (sm == (r + 1) * r / 2):\\n\\t\\tans.append((ind + 1, n - ind - 1))\\n\\tls3 = [0] * (max(a) + 1)\\n\\tls4 = [0] * (max(a) + 1)\\n\\tind2 = 0\\n\\tcheck2 = True\\n\\tpsm2 = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif ls3[a[i]] == 1:\\n\\t\\t\\tind2 = i + 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tls3[a[i]] = 1\\n\\t\\t\\tpsm2 += a[i]\\n\\tif psm2 != (n - ind2 + 1) * (n - ind2) / 2:\\n\\t\\tcheck2 = False\\n\\tcnt2 = ind2\\n\\tr2 = cnt2\\n\\tsm2 = 0\\n\\tfor i in range(ind2 - 1, -1, -1):\\n\\t\\tif ls4[a[i]] == 1:\\n\\t\\t\\tcheck2 = False\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tls4[a[i]] = 1\\n\\t\\t\\tcnt2 -= 1\\n\\t\\t\\tsm2 += a[i]\\n\\tif check2 and cnt2 == 0 and (sm2 == (r2 + 1) * r2 / 2):\\n\\t\\tans.append((ind2, n - ind2))\\n\\tans = list(dict.fromkeys(ans))\\n\\tif len(ans) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i[0], i[1])\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\thave = [False] * n\\n\\tcombos = 0\\n\\tcArr = []\\n\\tfor i in range(n):\\n\\t\\tif have[arr[i]] == False:\\n\\t\\t\\thave[arr[i]] = True\\n\\t\\telse:\\n\\t\\t\\tif len(set(arr[i:])) == n - i and min(arr[i:]) == 1 and (max(arr[i:]) == n - i) and (max(arr[:i]) == i) and (min(arr[:i]) == 1):\\n\\t\\t\\t\\tcombos += 1\\n\\t\\t\\t\\tcArr.append([i, n - i])\\n\\t\\t\\tbreak\\n\\thave = [False] * n\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif have[arr[i]] == False:\\n\\t\\t\\thave[arr[i]] = True\\n\\t\\telse:\\n\\t\\t\\tif len(set(arr[:i + 1])) == i + 1 and min(arr[:i + 1]) == 1 and (max(arr[:i + 1]) == i + 1) and (max(arr[i + 1:]) == n - i - 1) and (min(arr[i + 1:]) == 1):\\n\\t\\t\\t\\tcombos += 1\\n\\t\\t\\t\\tcArr.append([i + 1, n - i - 1])\\n\\t\\t\\tbreak\\n\\tif combos == 2:\\n\\t\\tif cArr[0] == cArr[1]:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(*cArr[1])\\n\\t\\telse:\\n\\t\\t\\tprint(combos)\\n\\t\\t\\tfor i in range(len(cArr)):\\n\\t\\t\\t\\tprint(*cArr[i])\\n\\telse:\\n\\t\\tprint(combos)\\n\\t\\tfor i in range(len(cArr)):\\n\\t\\t\\tprint(*cArr[i])\\n\", \"import itertools\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tp = list(map(int, input().split()))\\n\\ts = []\\n\\tm = max(p)\\n\\tr1 = set(range(1, m + 1))\\n\\tr2 = set(range(1, n - m + 1))\\n\\tl1 = set(p[:m])\\n\\tl2 = set(p[m:])\\n\\tif len(r1.difference(l1)) == 0 and len(r2.difference(l2)) == 0:\\n\\t\\ts.append((m, n - m))\\n\\tl1 = set(p[n - m:])\\n\\tl2 = set(p[:n - m])\\n\\tif len(r1.difference(l1)) == 0 and len(r2.difference(l2)) == 0:\\n\\t\\ts.append((n - m, m))\\n\\tif len(s) > 0:\\n\\t\\tprint(len(set(s)))\\n\\t\\tfor e in set(s):\\n\\t\\t\\tprint(*e)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom heapq import heappush, heappop\\nimport math\\nfrom collections import *\\nfrom functools import reduce, cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\nM = mod = 998244353\\n\\ndef factors(n):\\n\\treturn sorted(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0))))\\n\\ndef inv_mod(n):\\n\\treturn pow(n, mod - 2, mod)\\n\\ndef li():\\n\\treturn [int(i) for i in input().rstrip('\\\\n').split()]\\n\\ndef st():\\n\\treturn input().rstrip('\\\\n')\\n\\ndef val():\\n\\treturn int(input().rstrip('\\\\n'))\\n\\ndef li2():\\n\\treturn [i for i in input().rstrip('\\\\n')]\\n\\ndef li3():\\n\\treturn [int(i) for i in input().rstrip('\\\\n')]\\nfor _ in range(val()):\\n\\tn = val()\\n\\tl = li()\\n\\ta = set()\\n\\ts = Counter(l)\\n\\tb = set(l)\\n\\tle1 = 0\\n\\tle2 = sum(s.values())\\n\\tm = 0\\n\\tind = n\\n\\tlmax = [0]\\n\\tfor i in l[::-1]:\\n\\t\\tlmax.append(max(lmax[-1], i))\\n\\tlmax = lmax[1:]\\n\\tlmax = lmax[::-1]\\n\\tlmax = lmax[1:]\\n\\tlsmall = [0]\\n\\tfor i in l:\\n\\t\\tlsmall.append(max(lsmall[-1], i))\\n\\tlsmall = lsmall[1:]\\n\\tans = []\\n\\tfor j in range(n):\\n\\t\\tif l[j] in a:\\n\\t\\t\\tbreak\\n\\t\\ta.add(l[j])\\n\\t\\tle1 += 1\\n\\t\\ts[l[j]] -= 1\\n\\t\\tif not s[l[j]]:\\n\\t\\t\\tb.remove(l[j])\\n\\t\\tle2 -= 1\\n\\t\\tif le1 == lsmall[j] and le2 == len(b) == lmax[j]:\\n\\t\\t\\tans.append([le1, len(b)])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor u in range(t):\\n\\tn = int(input())\\n\\tz = [int(x) for x in input().split(' ')]\\n\\t(a, b) = (0, 0)\\n\\tm = max(z)\\n\\ta = z.index(m)\\n\\tans = []\\n\\tif len(set(z[:m])) == m and len(set(z[m:])) == n - m:\\n\\t\\t(a, b) = (max(z[:m]), max(z[m:]))\\n\\t\\tif len(set(z[:m])) == a and len(set(z[m:])) == b:\\n\\t\\t\\tans.append(m)\\n\\tif len(set(z[:n - m])) == n - m and len(set(z[n - m:])) == m:\\n\\t\\t(a, b) = (max(z[:n - m]), max(z[n - m:]))\\n\\t\\tif len(set(z[:n - m])) == a and len(set(z[n - m:])) == b:\\n\\t\\t\\tif n - m not in ans:\\n\\t\\t\\t\\tans.append(n - m)\\n\\tif len(ans):\\n\\t\\tprint(len(ans))\\n\\t\\tfor x in ans:\\n\\t\\t\\tprint(x, n - x)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tflag = 1\\n\\tfirst = 0\\n\\tout = 0\\n\\tmem = [0] * n\\n\\tfor i in a:\\n\\t\\tmem[i - 1] += 1\\n\\t\\tif mem[i - 1] > 2:\\n\\t\\t\\tflag = 0\\n\\t\\t\\tbreak\\n\\tfor i in mem:\\n\\t\\tif i == 2:\\n\\t\\t\\tfirst += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif flag and first and (first <= n):\\n\\t\\tsec = n - first\\n\\t\\tf = a[:first]\\n\\t\\ts = a[first:]\\n\\t\\tres = []\\n\\t\\tcheck1 = list(range(1, first + 1))\\n\\t\\tcheck2 = list(range(1, sec + 1))\\n\\t\\tif check1 == list(set(f)) and check2 == list(set(s)):\\n\\t\\t\\tout = 1\\n\\t\\t\\tres.append([first, sec])\\n\\t\\tf = a[:sec]\\n\\t\\ts = a[sec:]\\n\\t\\tif check2 == list(set(f)) and check1 == list(set(s)) and (first != sec):\\n\\t\\t\\tout += 1\\n\\t\\t\\tres.append([sec, first])\\n\\t\\tprint(out)\\n\\t\\tfor i in res:\\n\\t\\t\\tprint(*i)\\n\\telse:\\n\\t\\tprint(out)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tM = max(a)\\n\\tans = set()\\n\\tcnt1 = [0] * n\\n\\tcnt2 = [0] * n\\n\\tfor i in range(M):\\n\\t\\tcnt1[a[i]] += 1\\n\\tfor i in range(M, n):\\n\\t\\tcnt2[a[i]] += 1\\n\\tflag = True\\n\\tfor i in range(1, M + 1):\\n\\t\\tif cnt1[i] != 1:\\n\\t\\t\\tflag = False\\n\\tfor i in range(1, n - M + 1):\\n\\t\\tif cnt2[i] != 1:\\n\\t\\t\\tflag = False\\n\\tif flag:\\n\\t\\tans.add((M, n - M))\\n\\tcnt1 = [0] * n\\n\\tcnt2 = [0] * n\\n\\tfor i in range(n - M):\\n\\t\\tcnt1[a[i]] += 1\\n\\tfor i in range(n - M, n):\\n\\t\\tcnt2[a[i]] += 1\\n\\tflag = True\\n\\tfor i in range(1, n - M + 1):\\n\\t\\tif cnt1[i] != 1:\\n\\t\\t\\tflag = False\\n\\tfor i in range(1, M + 1):\\n\\t\\tif cnt2[i] != 1:\\n\\t\\t\\tflag = False\\n\\tif flag:\\n\\t\\tans.add((n - M, M))\\n\\tprint(len(ans))\\n\\tfor (l1, l2) in ans:\\n\\t\\tprint(l1, l2)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nt = int(input())\\nfor ti in range(t):\\n\\tn = (int(i) for i in input().split(' '))\\n\\tli = [int(i) for i in input().split(' ')]\\n\\td = {}\\n\\td2 = {}\\n\\tp1 = []\\n\\tp2 = []\\n\\ta1 = 0\\n\\ta2 = []\\n\\ttg = False\\n\\tfor (idx, i) in enumerate(li):\\n\\t\\tif i not in d and tg == False:\\n\\t\\t\\tp1.append(i)\\n\\t\\t\\td[i] = idx\\n\\t\\telse:\\n\\t\\t\\ttg = True\\n\\t\\t\\tp2.append(i)\\n\\t\\t\\td2[i] = idx\\n\\tbeg = 0\\n\\tdn = False\\n\\tfor i in sorted(p1):\\n\\t\\tif i == beg + 1:\\n\\t\\t\\tbeg += 1\\n\\t\\telse:\\n\\t\\t\\tdn = True\\n\\tbeg = 0\\n\\tfor i in sorted(p2):\\n\\t\\tif i == beg + 1:\\n\\t\\t\\tbeg += 1\\n\\t\\telse:\\n\\t\\t\\tdn = True\\n\\tif not dn and 0 not in (len(p1), len(p2)):\\n\\t\\ta1 = 1\\n\\t\\ta2.append((len(p1), len(p2)))\\n\\tp1 = []\\n\\tp2 = []\\n\\td = {}\\n\\td2 = {}\\n\\ttg = False\\n\\tfor (idx, i) in enumerate(li[::-1]):\\n\\t\\tif i not in d and tg == False:\\n\\t\\t\\tp1.append(i)\\n\\t\\t\\td[i] = idx\\n\\t\\telse:\\n\\t\\t\\ttg = True\\n\\t\\t\\tp2.append(i)\\n\\t\\t\\td2[i] = idx\\n\\tbeg = 0\\n\\tdn = False\\n\\tfor i in sorted(p1):\\n\\t\\tif i == beg + 1:\\n\\t\\t\\tbeg += 1\\n\\t\\telse:\\n\\t\\t\\tdn = True\\n\\tbeg = 0\\n\\tfor i in sorted(p2):\\n\\t\\tif i == beg + 1:\\n\\t\\t\\tbeg += 1\\n\\t\\telse:\\n\\t\\t\\tdn = True\\n\\tif not dn and 0 not in (len(p1), len(p2)):\\n\\t\\ta1 += 1\\n\\t\\tif a1 == 2:\\n\\t\\t\\tif a2[0] == (len(p2), len(p1)):\\n\\t\\t\\t\\ta1 = 1\\n\\t\\t\\t\\tpass\\n\\t\\t\\telse:\\n\\t\\t\\t\\ta2.append((len(p2), len(p1)))\\n\\t\\telse:\\n\\t\\t\\ta2.append((len(p2), len(p1)))\\n\\tprint(a1)\\n\\tfor i in a2:\\n\\t\\tprint(*i)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nfrom collections import Counter, defaultdict\\nfrom collections import deque\\nfrom functools import cmp_to_key\\nimport math\\n\\ndef sin():\\n\\treturn input()\\n\\ndef ain():\\n\\treturn list(map(int, sin().split()))\\n\\ndef sain():\\n\\treturn input().split()\\n\\ndef iin():\\n\\treturn int(sin())\\nMAX = float('inf')\\nMIN = float('-inf')\\nMOD = 1000000007\\n\\ndef sieve(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\ts = set()\\n\\tfor p in range(2, n + 1):\\n\\t\\tif prime[p]:\\n\\t\\t\\ts.add(p)\\n\\treturn s\\n\\ndef readTree(n, m):\\n\\tadj = [deque([]) for _ in range(n + 1)]\\n\\tfor _ in range(m):\\n\\t\\t(u, v) = ain()\\n\\t\\tadj[u].append(v)\\n\\t\\tadj[v].append(u)\\n\\treturn adj\\n\\ndef solve(c1, c2, maxi1, maxi2):\\n\\tfor i in range(1, maxi1 + 1):\\n\\t\\tif i not in c1:\\n\\t\\t\\treturn False\\n\\tfor i in range(1, maxi2 + 1):\\n\\t\\tif i not in c2:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef main():\\n\\tfor _ in range(iin()):\\n\\t\\tn = iin()\\n\\t\\tl = ain()\\n\\t\\tmaxi = max(l)\\n\\t\\tans = []\\n\\t\\tc1 = Counter(l[0:maxi])\\n\\t\\tc2 = Counter(l[maxi:])\\n\\t\\tif solve(c1, c2, maxi, n - maxi):\\n\\t\\t\\tans.append(maxi)\\n\\t\\tc1 = Counter(l[n - maxi:])\\n\\t\\tc2 = Counter(l[:n - maxi])\\n\\t\\tif solve(c1, c2, maxi, n - maxi):\\n\\t\\t\\tans.append(n - maxi)\\n\\t\\tans = set(ans)\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i, n - i)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\nif os.getcwd() == 'D:\\\\\\\\code':\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\n\\tinput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"def main_function():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tA = list(map(int, input().split(' ')))\\n\\t\\tl1 = max(A)\\n\\t\\tl2 = n - l1\\n\\t\\tk = 0\\n\\t\\tans = []\\n\\t\\tif l1 == l2:\\n\\t\\t\\tif l1 == len(set(A[:n // 2])) == len(set(A[n // 2:])) and sum(list(range(l1 + 1))) == sum(set(A[:n // 2])) == sum(set(A[n // 2:])):\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(l1, l1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tif l1 == len(set(A[:l1])) and l2 == len(set(A[l1:])) and (sum(list(range(l1 + 1))) == sum(set(A[:l1]))) and (sum(list(range(l2 + 1))) == sum(set(A[l1:]))):\\n\\t\\t\\t\\tk += 1\\n\\t\\t\\t\\tans.append(l1)\\n\\t\\t\\t\\tans.append(l2)\\n\\t\\t\\tif l2 == len(set(A[:l2])) and l1 == len(set(A[l2:])) and (sum(list(range(l2 + 1))) == sum(set(A[:l2]))) and (sum(list(range(l1 + 1))) == sum(set(A[l2:]))):\\n\\t\\t\\t\\tk += 1\\n\\t\\t\\t\\tans.append(l2)\\n\\t\\t\\t\\tans.append(l1)\\n\\t\\t\\tprint(k)\\n\\t\\t\\tfor j in range(0, len(ans), 2):\\n\\t\\t\\t\\tprint(ans[j], ans[j + 1])\\nmain_function()\\n\", \"from sys import stdin\\nfrom collections import Counter\\nt = int(input())\\nfor _ in range(t):\\n\\t(n,) = map(int, stdin.readline().split())\\n\\tS = list(map(int, stdin.readline().split()))\\n\\tM = 1\\n\\trtbs = 1\\n\\tc = Counter()\\n\\tforward = [False] * n\\n\\tfor i in range(n):\\n\\t\\tif c[S[i]] > 0:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tc[S[i]] += 1\\n\\t\\tif S[i] > M:\\n\\t\\t\\tM = S[i]\\n\\t\\t\\trtbs = M - i - 1\\n\\t\\telse:\\n\\t\\t\\trtbs -= 1\\n\\t\\tif rtbs == 0:\\n\\t\\t\\tforward[i] = True\\n\\tM = 1\\n\\trtbs = 1\\n\\tc = Counter()\\n\\tbackward = [False] * n\\n\\tS = S[::-1]\\n\\tfor i in range(n):\\n\\t\\tif c[S[i]] > 0:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tc[S[i]] += 1\\n\\t\\tif S[i] > M:\\n\\t\\t\\tM = S[i]\\n\\t\\t\\trtbs = M - i - 1\\n\\t\\telse:\\n\\t\\t\\trtbs -= 1\\n\\t\\tif rtbs == 0:\\n\\t\\t\\tbackward[i] = True\\n\\tbackward = backward[::-1]\\n\\tcount = 0\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif forward[i] and backward[i + 1]:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append(str(i + 1) + ' ' + str(n - i - 1))\\n\\tprint(count)\\n\\tfor i in ans:\\n\\t\\tprint(i)\\n\", \"t = int(input(''))\\nfor _ in range(t):\\n\\tn = int(input(''))\\n\\ta = list(map(int, input('').split(' ')))\\n\\tmx = max(a)\\n\\tans = 0\\n\\tfin = []\\n\\td = {}\\n\\tfor i in range(mx):\\n\\t\\td[a[i]] = True\\n\\tchk = True\\n\\tfor i in range(1, mx + 1, 1):\\n\\t\\tif i not in d:\\n\\t\\t\\tchk = False\\n\\t\\t\\tbreak\\n\\tif chk:\\n\\t\\tf = {}\\n\\t\\tchk = True\\n\\t\\tfor i in range(mx, n, 1):\\n\\t\\t\\tf[a[i]] = True\\n\\t\\tfor i in range(1, n - mx + 1, 1):\\n\\t\\t\\tif i not in f:\\n\\t\\t\\t\\tchk = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif chk:\\n\\t\\t\\tans += 1\\n\\t\\t\\tfin.append(str(mx) + ' ' + str(n - mx))\\n\\td = {}\\n\\tfor i in range(n - 1, n - mx - 1, -1):\\n\\t\\td[a[i]] = True\\n\\tchk = True\\n\\tfor i in range(1, mx + 1, 1):\\n\\t\\tif i not in d:\\n\\t\\t\\tchk = False\\n\\t\\t\\tbreak\\n\\tif chk:\\n\\t\\tf = {}\\n\\t\\tchk = True\\n\\t\\tfor i in range(n - mx):\\n\\t\\t\\tf[a[i]] = True\\n\\t\\tfor i in range(1, n - mx + 1, 1):\\n\\t\\t\\tif i not in f:\\n\\t\\t\\t\\tchk = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif chk:\\n\\t\\t\\tif mx != n / 2:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tfin.append(str(n - mx) + ' ' + str(mx))\\n\\tprint(ans)\\n\\tfor k in range(ans):\\n\\t\\tprint(fin[k])\\n\", \"import sys\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ts = list(map(int, input().split()))\\n\\tc = 0\\n\\tans = ''\\n\\ta = [s[0]] + [0] * n\\n\\tb = [0] + s[1:]\\n\\tmxa = max(a)\\n\\tmxb = max(b)\\n\\tsa = {}\\n\\tsb = {}\\n\\tsa[mxa] = 1\\n\\tfor i in range(1, n):\\n\\t\\tif sb.get(b[i]):\\n\\t\\t\\tsb[b[i]] += 1\\n\\t\\telse:\\n\\t\\t\\tsb[b[i]] = 1\\n\\tmxsbind = -1\\n\\tfor i in range(1, n):\\n\\t\\tif len(sa) == mxa == i and len(sb) == mxb == n - i:\\n\\t\\t\\tc += 1\\n\\t\\t\\tans += str(i) + ' ' + str(n - i) + '\\\\n'\\n\\t\\tt = b[i]\\n\\t\\tb[i] = 0\\n\\t\\tsb[t] -= 1\\n\\t\\tif sb[t] == 0:\\n\\t\\t\\tsb.pop(t)\\n\\t\\t\\tif t == mxb:\\n\\t\\t\\t\\tfor j in range(mxb - 1, -1, -1):\\n\\t\\t\\t\\t\\tif sb.get(j):\\n\\t\\t\\t\\t\\t\\tmxb = j\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tif sa.get(t):\\n\\t\\t\\tsa[t] += 1\\n\\t\\telse:\\n\\t\\t\\tsa[t] = 1\\n\\t\\ta[i] = t\\n\\t\\tmxa = max(mxa, t)\\n\\tprint(c)\\n\\tif c:\\n\\t\\tprint(ans[:-1])\\n\", \"MAX_N = 200010\\nT = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tc = {}\\n\\tans = []\\n\\tmaxl = 1\\n\\tfor i in range(n):\\n\\t\\tx = a[i]\\n\\t\\tmaxl = max(x, maxl)\\n\\t\\tif x in c:\\n\\t\\t\\tc[x] += 1\\n\\t\\telse:\\n\\t\\t\\tc[x] = 1\\n\\tperm = True\\n\\tfor i in range(1, maxl + 1):\\n\\t\\tif i not in c or c[i] == 0 or c[i] > 2:\\n\\t\\t\\tperm = False\\n\\t\\t\\tbreak\\n\\tif perm:\\n\\t\\tfor i in range(1, maxl + 1):\\n\\t\\t\\tif c[i] == 2:\\n\\t\\t\\t\\tif i == maxl:\\n\\t\\t\\t\\t\\tminl = i\\n\\t\\t\\t\\telif c[i + 1] == 1:\\n\\t\\t\\t\\t\\tminl = i\\n\\t\\t\\t\\t\\tbreak\\n\\tif perm:\\n\\t\\tfor i in range(minl + 1, maxl + 1):\\n\\t\\t\\tif c[i] != 1:\\n\\t\\t\\t\\tperm = False\\n\\t\\t\\t\\tbreak\\n\\tif perm:\\n\\t\\tfor p in set([minl - 1, maxl - 1]):\\n\\t\\t\\tvalid = True\\n\\t\\t\\tv1 = set()\\n\\t\\t\\tv2 = set()\\n\\t\\t\\tfor j in range(p + 1):\\n\\t\\t\\t\\tv1.add(a[j])\\n\\t\\t\\tfor j in range(p + 1, n):\\n\\t\\t\\t\\tv2.add(a[j])\\n\\t\\t\\tfor j in range(1, p + 1 + 1):\\n\\t\\t\\t\\tif j not in v1:\\n\\t\\t\\t\\t\\tvalid = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif valid:\\n\\t\\t\\t\\tfor j in range(1, n - (p + 1) + 1):\\n\\t\\t\\t\\t\\tif j not in v2:\\n\\t\\t\\t\\t\\t\\tvalid = False\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif valid:\\n\\t\\t\\t\\tans.append((p + 1, n - (p + 1)))\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\t(l1, l2) = ans[i]\\n\\t\\tprint(l1, l2)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\t(s, m, k, a, b, r) = (input().split(), set(), 0, [], [], [])\\n\\tfor i in range(n):\\n\\t\\tif int(s[i]) in m:\\n\\t\\t\\tm.remove(int(s[i]))\\n\\t\\t\\tif m == set():\\n\\t\\t\\t\\ta.append(i + 1)\\n\\t\\telif int(s[i]) > k:\\n\\t\\t\\tfor j in range(k + 1, int(s[i])):\\n\\t\\t\\t\\tm.add(j)\\n\\t\\t\\tk = int(s[i])\\n\\t\\t\\tif m == set():\\n\\t\\t\\t\\ta.append(i + 1)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t(k, m) = (0, set())\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif int(s[i]) in m:\\n\\t\\t\\tm.remove(int(s[i]))\\n\\t\\t\\tif m == set():\\n\\t\\t\\t\\tb.append(i + 1)\\n\\t\\telif int(s[i]) > k:\\n\\t\\t\\tfor j in range(k + 1, int(s[i])):\\n\\t\\t\\t\\tm.add(j)\\n\\t\\t\\tk = int(s[i])\\n\\t\\t\\tif m == set():\\n\\t\\t\\t\\tb.append(i + 1)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tb = sorted(b)\\n\\tk = 0\\n\\twhile a != [] and b != []:\\n\\t\\tif a[-1] - b[-1] < -1:\\n\\t\\t\\tb.pop()\\n\\t\\telif a[-1] - b[-1] > -1:\\n\\t\\t\\ta.pop()\\n\\t\\telse:\\n\\t\\t\\tk = k + 1\\n\\t\\t\\tr.append(str(a[-1]) + ' ' + str(n - b[-1] + 1))\\n\\t\\t\\ta.pop()\\n\\t\\t\\tb.pop()\\n\\tprint(k)\\n\\tif len(r) != 0:\\n\\t\\tfor i in r:\\n\\t\\t\\tprint(i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ttemp = [0 for i in range(n + 1)]\\n\\tcount = 0\\n\\tflag = ''\\n\\tfor i in range(n):\\n\\t\\ttemp[a[i]] += 1\\n\\t\\tif temp[a[i]] == 2:\\n\\t\\t\\tcount += 1\\n\\t\\tif temp[a[i]] == 3:\\n\\t\\t\\tflag = 'not possible'\\n\\tfor i in range(1, n - count + 1):\\n\\t\\tif temp[i] == 0:\\n\\t\\t\\tflag = 'not possible'\\n\\t\\tif i > count and temp[i] == 2:\\n\\t\\t\\tflag = 'not possible'\\n\\t\\tif i <= count and temp[i] != 2:\\n\\t\\t\\tflag = 'not possible'\\n\\tif flag == '':\\n\\t\\ttarget = count * (count + 1) // 2\\n\\t\\ttemp1 = 0\\n\\t\\tfor i in range(count):\\n\\t\\t\\ttemp1 += a[i]\\n\\t\\ttemp2 = 0\\n\\t\\tfor i in range(n - 1, n - count - 1, -1):\\n\\t\\t\\ttemp2 += a[i]\\n\\t\\tif temp1 == temp2 and temp1 == target:\\n\\t\\t\\tif count == n - count:\\n\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\tprint(count, count)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(2)\\n\\t\\t\\t\\tprint(count, n - count)\\n\\t\\t\\t\\tprint(n - count, count)\\n\\t\\telif temp1 == target and temp2 != target:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(count, n - count)\\n\\t\\telif temp2 == target and temp1 != target:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - count, count)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"from __future__ import division, print_function\\nfrom fractions import Fraction\\nimport sys\\nimport os\\nfrom io import BytesIO, IOBase\\nfrom itertools import *\\nimport bisect\\nfrom heapq import *\\nfrom math import ceil, floor\\nfrom copy import *\\nfrom collections import deque, defaultdict\\nfrom collections import Counter as counter\\nfrom itertools import combinations\\nfrom itertools import permutations as permutate\\nfrom bisect import bisect_left as bl\\nfrom operator import *\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect\\nBUFSIZE = 8192\\nfrom sys import stderr\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\nfrom types import GeneratorType\\n\\ndef iterative(f, stack=[]):\\n\\n\\tdef wrapped_func(*args, **kwargs):\\n\\t\\tif stack:\\n\\t\\t\\treturn f(*args, **kwargs)\\n\\t\\tto = f(*args, **kwargs)\\n\\t\\twhile True:\\n\\t\\t\\tif type(to) is GeneratorType:\\n\\t\\t\\t\\tstack.append(to)\\n\\t\\t\\t\\tto = next(to)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tstack.pop()\\n\\t\\t\\tif not stack:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tto = stack[-1].send(to)\\n\\t\\treturn to\\n\\treturn wrapped_func\\nmod = 1000000007\\n\\ndef inp():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef out(var):\\n\\tsys.stdout.write(str(var))\\n\\ndef lis():\\n\\treturn list(map(int, inp().split()))\\n\\ndef stringlis():\\n\\treturn list(map(str, inp().split()))\\n\\ndef sep():\\n\\treturn map(int, inp().split())\\n\\ndef strsep():\\n\\treturn map(str, inp().split())\\n\\ndef fsep():\\n\\treturn map(float, inp().split())\\n\\ndef nextline():\\n\\tout('\\\\n')\\n\\ndef testcase(t):\\n\\tfor p in range(t):\\n\\t\\tsolve()\\n\\ndef pow(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\nfrom functools import reduce\\n\\ndef factors(n):\\n\\treturn set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\\n\\ndef gcd(a, b):\\n\\tif a == b:\\n\\t\\treturn a\\n\\twhile b > 0:\\n\\t\\t(a, b) = (b, a % b)\\n\\treturn a\\n\\ndef prefix_sum(ar):\\n\\treturn list(accumulate(ar))\\n\\ndef suffix_sum(ar):\\n\\treturn list(accumulate(ar[::-1]))[::-1]\\n\\ndef N():\\n\\treturn int(inp())\\ndx = [0, 0, 1, -1]\\ndy = [1, -1, 0, 0]\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\nfrom collections import defaultdict\\n\\ndef numberOfSetBits(i):\\n\\ti = i - (i >> 1 & 1431655765)\\n\\ti = (i & 858993459) + (i >> 2 & 858993459)\\n\\treturn ((i + (i >> 4) & 252645135) * 16843009 & 4294967295) >> 24\\n\\ndef solve():\\n\\tn = N()\\n\\tar = lis()\\n\\tm = max(ar)\\n\\ts1 = set(ar[:m])\\n\\ts2 = set(ar[m:])\\n\\tans = []\\n\\tif len(s1) == m and len(s2) == n - m and (max(s1) == m) and (max(s2) == n - m):\\n\\t\\tans.append((m, n - m))\\n\\ts1 = set(ar[:n - m])\\n\\ts2 = set(ar[n - m:])\\n\\tif len(s1) == n - m and len(s2) == m and (max(s1) == n - m) and (max(s2) == m):\\n\\t\\tans.append((n - m, m))\\n\\tif len(ans) == 2:\\n\\t\\tif ans[0] == ans[1]:\\n\\t\\t\\tans.pop()\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\ntestcase(int(inp()))\\n\", \"from collections import defaultdict\\nt = int(input())\\nfor k in range(t):\\n\\tn = int(input())\\n\\ta = [int(el) for el in input().split()]\\n\\tpref_sum = [0 for i in range(n)]\\n\\tpref_sum[0] = a[0]\\n\\tnumbers = defaultdict(int)\\n\\tnumbers[a[0]] = 1\\n\\tfor i in range(1, n):\\n\\t\\tpref_sum[i] = pref_sum[i - 1] + a[i]\\n\\t\\tnumbers[a[i]] += 1\\n\\tmax_r = [0 for i in range(n)]\\n\\tmax_r[n - 1] = a[n - 1]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tmax_r[i] = max(max_r[i + 1], a[i])\\n\\tresult = []\\n\\tmax_l = 0\\n\\tnum_l = defaultdict(int)\\n\\tfor i in range(n - 1):\\n\\t\\tnum_l[a[i]] += 1\\n\\t\\tif num_l[a[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\tnumbers[a[i]] -= 1\\n\\t\\tif numbers[a[i]] == 0:\\n\\t\\t\\tnumbers.pop(a[i])\\n\\t\\tmax_l = max(max_l, a[i])\\n\\t\\tlen_r = n - i - 1\\n\\t\\tif i + 1 != len(num_l) or len_r != len(numbers):\\n\\t\\t\\tcontinue\\n\\t\\tif max_l != i + 1 or max_r[i + 1] != len_r:\\n\\t\\t\\tcontinue\\n\\t\\tif pref_sum[i] == (1 + i + 1) * (i + 1) // 2 and pref_sum[n - 1] - pref_sum[i] == (1 + len_r) * len_r // 2:\\n\\t\\t\\tresult.append((i + 1, len_r))\\n\\tprint(len(result))\\n\\tfor (l, r) in result:\\n\\t\\tprint(l, r)\\n\", \"import io\\nimport os\\nfrom collections import Counter, defaultdict, deque\\n\\ndef solve(N, A):\\n\\n\\tdef makeForward(A):\\n\\t\\tseen = set()\\n\\t\\tmn = float('inf')\\n\\t\\tmx = float('-inf')\\n\\t\\tbad = False\\n\\t\\tforward = []\\n\\t\\tfor (i, x) in enumerate(A):\\n\\t\\t\\tmx = max(mx, x)\\n\\t\\t\\tmn = min(mn, x)\\n\\t\\t\\tif x in seen:\\n\\t\\t\\t\\tbad = True\\n\\t\\t\\tseen.add(x)\\n\\t\\t\\tif bad:\\n\\t\\t\\t\\tforward.append(False)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tforward.append(i + 1 == len(seen) and mn == 1 and (mx == i + 1))\\n\\t\\treturn forward\\n\\tforward = makeForward(A)\\n\\tbackward = makeForward(A[::-1])\\n\\tans = []\\n\\tfor l1 in range(1, N):\\n\\t\\tl2 = N - l1\\n\\t\\tif forward[l1 - 1] and backward[l2 - 1]:\\n\\t\\t\\tans.append(str(l1) + ' ' + str(l2))\\n\\tif ans:\\n\\t\\treturn str(len(ans)) + '\\\\n' + '\\\\n'.join(ans)\\n\\treturn 0\\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\\nT = int(input())\\nfor t in range(T):\\n\\t(N,) = [int(x) for x in input().split()]\\n\\tA = [int(x) for x in input().split()]\\n\\tans = solve(N, A)\\n\\tprint(ans)\\n\", \"from bisect import bisect_left, bisect_right\\nfrom sys import stdin, stdout, setrecursionlimit\\nfrom collections import Counter\\ninput = lambda : stdin.readline().strip()\\nprint = stdout.write\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tls = list(map(int, input().split()))\\n\\tforward = []\\n\\tbackward = []\\n\\tfor i in range(n + 1):\\n\\t\\tforward.append(False)\\n\\t\\tbackward.append(False)\\n\\tm = 1\\n\\td = []\\n\\tfor i in range(n + 1):\\n\\t\\td.append(False)\\n\\tfor i in range(n):\\n\\t\\tif d[ls[i]]:\\n\\t\\t\\tbreak\\n\\t\\td[ls[i]] = True\\n\\t\\tif ls[i] == m:\\n\\t\\t\\tm += 1\\n\\t\\t\\twhile d[m]:\\n\\t\\t\\t\\tm += 1\\n\\t\\tif m == i + 2:\\n\\t\\t\\tforward[i] = True\\n\\tm = 1\\n\\td = []\\n\\tfor i in range(n + 1):\\n\\t\\td.append(False)\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif d[ls[i]]:\\n\\t\\t\\tbreak\\n\\t\\td[ls[i]] = True\\n\\t\\tif ls[i] == m:\\n\\t\\t\\tm += 1\\n\\t\\t\\twhile d[m]:\\n\\t\\t\\t\\tm += 1\\n\\t\\tif m == len(ls) - i + 1:\\n\\t\\t\\tbackward[i] = True\\n\\tsoln = []\\n\\tfor i in range(n - 1):\\n\\t\\tif forward[i] and backward[i + 1]:\\n\\t\\t\\tsoln.append((i + 1, n - i - 1))\\n\\tprint(str(len(soln)) + '\\\\n')\\n\\tfor i in soln:\\n\\t\\tprint(str(i[0]) + ' ' + str(i[1]) + '\\\\n')\\n\", \"import sys\\n\\ndef perm(p):\\n\\td = {i: 0 for i in range(1, max(p) + 1)}\\n\\tfor i in p:\\n\\t\\td[i] += 1\\n\\t\\tif d[i] > 1:\\n\\t\\t\\treturn False\\n\\tif 0 in d.values():\\n\\t\\treturn False\\n\\treturn True\\nfor i in range(int(sys.stdin.readline())):\\n\\tn = int(sys.stdin.readline())\\n\\tl = [*map(int, sys.stdin.readline().split())]\\n\\tm = max(l)\\n\\tif 2 * m == n:\\n\\t\\tb = perm(l[:m]) and perm(l[m:])\\n\\t\\tif b:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, m)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tb1 = perm(l[:m]) and perm(l[m:])\\n\\t\\tb2 = perm(l[:-m]) and perm(l[-m:])\\n\\t\\tprint(b1 + b2)\\n\\t\\tif b1:\\n\\t\\t\\tprint(m, n - m)\\n\\t\\tif b2:\\n\\t\\t\\tprint(n - m, m)\\n\", \"t = int(input())\\nwhile t != 0:\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tl = max(A)\\n\\tB = set(range(l + 1)) - {0}\\n\\tC = set(range(n - l + 1)) - {0}\\n\\tres = 0\\n\\tres1 = []\\n\\tres2 = []\\n\\tif set(A[:l]) == B and set(A[l:]) == C:\\n\\t\\tres += 1\\n\\t\\tres1.append(l)\\n\\t\\tres2.append(n - l)\\n\\tif set(A[:n - l]) == C and set(A[n - l:]) == B:\\n\\t\\tres += 1\\n\\t\\tres1.append(n - l)\\n\\t\\tres2.append(l)\\n\\tif res == 0:\\n\\t\\tprint(res)\\n\\telse:\\n\\t\\tif res1[0] == res2[0]:\\n\\t\\t\\tres -= 1\\n\\t\\t\\tres1.pop()\\n\\t\\t\\tres2.pop()\\n\\t\\tprint(res)\\n\\t\\tfor i in range(len(res1)):\\n\\t\\t\\tprint(res1[i], res2[i])\\n\\tt -= 1\\n\", \"t = int(input())\\nfor q in range(t):\\n\\tn = int(input())\\n\\tli = list(map(int, input().split(' ', n)[:n]))\\n\\tm = max(li)\\n\\ths = [0] * (m + 1)\\n\\tans = 0\\n\\tan = set([])\\n\\tfl = 0\\n\\tfor i in range(m):\\n\\t\\ths[li[i]] += 1\\n\\t\\tif hs[li[i]] != 1:\\n\\t\\t\\tfl = 1\\n\\t\\t\\tbreak\\n\\tif fl == 0:\\n\\t\\ths = [0] * (m + 1)\\n\\t\\tfor i in range(m, n):\\n\\t\\t\\ths[li[i]] += 1\\n\\t\\tfor i in range(1, n - m + 1):\\n\\t\\t\\tif hs[i] != 1:\\n\\t\\t\\t\\tfl = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif fl == 0:\\n\\t\\t\\tans += 1\\n\\t\\t\\tan.add((m, n - m))\\n\\tli.reverse()\\n\\ths = [0] * (m + 1)\\n\\tfl = 0\\n\\tfor i in range(m):\\n\\t\\ths[li[i]] += 1\\n\\t\\tif hs[li[i]] != 1:\\n\\t\\t\\tfl = 1\\n\\t\\t\\tbreak\\n\\tif fl == 0:\\n\\t\\ths = [0] * (m + 1)\\n\\t\\tfor i in range(m, n):\\n\\t\\t\\ths[li[i]] += 1\\n\\t\\tfor i in range(1, n - m + 1):\\n\\t\\t\\tif hs[i] != 1:\\n\\t\\t\\t\\tfl = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif fl == 0:\\n\\t\\t\\tans += 1\\n\\t\\t\\tan.add((n - m, m))\\n\\tprint(len(an))\\n\\tli = []\\n\\tfor i in an:\\n\\t\\tli.append([i[0], i[1]])\\n\\tli.sort()\\n\\tfor i in li:\\n\\t\\tprint(i[0], i[1])\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tp1 = set()\\n\\tdict1 = {}\\n\\tm = -1\\n\\tfor i in range(n):\\n\\t\\tm = max(m, arr[i])\\n\\t\\tif arr[i] in dict1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tdict1[arr[i]] = 1\\n\\t\\tif i + 1 == m:\\n\\t\\t\\tp1.add(i)\\n\\tarr = arr[::-1]\\n\\tp2 = []\\n\\tdict1 = {}\\n\\tm = -1\\n\\tfor i in range(n):\\n\\t\\tm = max(m, arr[i])\\n\\t\\tif arr[i] in dict1:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tdict1[arr[i]] = 1\\n\\t\\tif i + 1 == m:\\n\\t\\t\\tif n - (i + 1) - 1 in p1:\\n\\t\\t\\t\\tp2.append(n - (i + 1) - 1)\\n\\tprint(len(p2))\\n\\tfor i in p2:\\n\\t\\tprint(i + 1, n - (i + 1))\\n\", \"def is_good(hh, l):\\n\\tfor i in range(1, l + 1):\\n\\t\\tif hh[i] == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\thash1 = [0] * n\\n\\tfor val in arr:\\n\\t\\thash1[val] += 1\\n\\tans = []\\n\\thash2 = hash1[:]\\n\\ttemp = [0] * n\\n\\tfor (ind, val) in enumerate(arr):\\n\\t\\tif temp[val] != 0 and is_good(temp, ind) and is_good(hash1, n - ind):\\n\\t\\t\\tans.append((ind, n - ind))\\n\\t\\t\\tbreak\\n\\t\\tif temp[val] == 0:\\n\\t\\t\\ttemp[val] += 1\\n\\t\\t\\thash1[val] -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\ttemp = [0] * n\\n\\tfor ind in range(len(arr) - 1, -1, -1):\\n\\t\\tval = arr[ind]\\n\\t\\tif temp[val] != 0 and is_good(hash2, ind + 1) and is_good(temp, n - ind - 1):\\n\\t\\t\\tans.append((ind + 1, n - ind - 1))\\n\\t\\t\\tbreak\\n\\t\\tif temp[val] == 0:\\n\\t\\t\\ttemp[val] += 1\\n\\t\\t\\thash2[val] -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tans = list(set(ans))\\n\\tprint(len(ans))\\n\\tfor val in ans:\\n\\t\\tprint(str(val[0]) + ' ' + str(val[1]))\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tl1 = max(arr)\\n\\tans = []\\n\\tfor j in range(2):\\n\\t\\tif set(arr[:l1]) == set(range(1, l1 + 1)) and set(arr[l1:]) == set(range(1, n - l1 + 1)):\\n\\t\\t\\tans.append(l1)\\n\\t\\tl1 = n - l1\\n\\tans = set(ans)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i, n - i)\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tmx = max(arr)\\n\\ti = mx\\n\\td = []\\n\\tfor j in range(2):\\n\\t\\tif set(arr[:i]) == set(range(1, i + 1)) and set(arr[i:]) == set(range(1, n - i + 1)):\\n\\t\\t\\td.append(i)\\n\\t\\ti = n - i\\n\\td = set(d)\\n\\tprint(len(d))\\n\\tif len(d) > 0:\\n\\t\\tfor i in d:\\n\\t\\t\\tprint(i, n - i)\\n\", \"def linput():\\n\\treturn [int(i) for i in input().split()]\\nq = int(input())\\nfor ______ in range(q):\\n\\tn = int(input())\\n\\ta = linput()\\n\\ts = []\\n\\tm = max(a)\\n\\tif a.count(m) < 3:\\n\\t\\tif sorted(a[:m]) == [i + 1 for i in range(m)]:\\n\\t\\t\\tif sorted(a[m:]) == [i + 1 for i in range(n - m)]:\\n\\t\\t\\t\\tb = [m, n - m]\\n\\t\\t\\t\\tif b not in s:\\n\\t\\t\\t\\t\\ts.append([m, n - m])\\n\\t\\tif sorted(a[:n - m]) == [i + 1 for i in range(n - m)]:\\n\\t\\t\\tif sorted(a[n - m:]) == [i + 1 for i in range(m)]:\\n\\t\\t\\t\\tb = [n - m, m]\\n\\t\\t\\t\\tif b not in s:\\n\\t\\t\\t\\t\\ts.append([n - m, m])\\n\\tif len(s) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(s))\\n\\t\\tfor i in s:\\n\\t\\t\\tprint(*i)\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\nT = int(input())\\nfor t in range(T):\\n\\tN = int(input())\\n\\tA = list(map(int, input().split(' ')))\\n\\tl1 = max(A)\\n\\tans = set()\\n\\n\\tdef check(l1, l2):\\n\\t\\tif l1 == 0 or l2 == 0:\\n\\t\\t\\treturn\\n\\t\\ts = set()\\n\\t\\tfor i in range(l1):\\n\\t\\t\\tif A[i] > l1:\\n\\t\\t\\t\\treturn\\n\\t\\t\\ts.add(A[i])\\n\\t\\tif len(s) != l1:\\n\\t\\t\\treturn\\n\\t\\ts = set()\\n\\t\\tfor i in range(l1, l1 + l2):\\n\\t\\t\\tif A[i] > l2:\\n\\t\\t\\t\\treturn\\n\\t\\t\\ts.add(A[i])\\n\\t\\tif len(s) != l2:\\n\\t\\t\\treturn\\n\\t\\tans.add((l1, l2))\\n\\tcheck(l1, N - l1)\\n\\tcheck(N - l1, l1)\\n\\tprint(len(ans))\\n\\tfor (x, y) in ans:\\n\\t\\tprint(x, y)\\n\", \"z = input\\nfor _ in range(int(z())):\\n\\tn = int(z())\\n\\tl = list(map(int, z().split()))\\n\\t(l1, k, c) = ([], max(l), 0)\\n\\tfor i in {k, n - k}:\\n\\t\\tif set(l[:i]) == set(range(1, i + 1)) and set(l[i:]) == set(range(1, n - i + 1)):\\n\\t\\t\\tl1.append(i)\\n\\t\\t\\tc += 1\\n\\tprint(c)\\n\\tfor i in l1:\\n\\t\\tprint(i, n - i)\\n\", \"for t in range(int(input())):\\n\\tn = int(input())\\n\\tnums = list(map(int, input().split()))\\n\\todinr = set()\\n\\tdvar = set()\\n\\tmx = max(nums)\\n\\tsl = []\\n\\tif mx < len(nums):\\n\\t\\tn1 = nums[:mx]\\n\\t\\tn2 = nums[mx:]\\n\\t\\tif sorted(n1) == list(range(1, mx + 1)) and sorted(n2) == list(range(1, len(n2) + 1)):\\n\\t\\t\\tsl += [[mx, n - mx]]\\n\\t\\tmx = n - mx\\n\\t\\tn1 = nums[:mx]\\n\\t\\tn2 = nums[mx:]\\n\\t\\tif sorted(n1) == list(range(1, mx + 1)) and sorted(n2) == list(range(1, len(n2) + 1)):\\n\\t\\t\\tsl += [[mx, n - mx]]\\n\\tif len(sl) == 2:\\n\\t\\tif sl[0] == sl[1]:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(*sl[0])\\n\\t\\telse:\\n\\t\\t\\tprint(len(sl))\\n\\t\\t\\tfor i in sl:\\n\\t\\t\\t\\tprint(*i)\\n\\telse:\\n\\t\\tprint(len(sl))\\n\\t\\tfor i in sl:\\n\\t\\t\\tprint(*i)\\n\", \"import sys, re, math\\nfrom collections import deque, defaultdict, Counter, OrderedDict\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\\nfrom heapq import heappush, heappop, heapify, nlargest, nsmallest\\n\\ndef STR():\\n\\treturn list(input())\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST():\\n\\treturn list(map(int, input().split()))\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef sortListWithIndex(listOfTuples, idx):\\n\\treturn sorted(listOfTuples, key=lambda x: x[idx])\\n\\ndef sortDictWithVal(passedDic):\\n\\ttemp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))[::-1]\\n\\ttoret = {}\\n\\tfor tup in temp:\\n\\t\\ttoret[tup[0]] = tup[1]\\n\\treturn toret\\n\\ndef sortDictWithKey(passedDic):\\n\\treturn dict(OrderedDict(sorted(passedDic.items())))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\ndef check(idx):\\n\\ttemp1 = [0] * (idx + 1)\\n\\ttemp2 = [0] * (n - idx - 1)\\n\\ttry:\\n\\t\\tfor i in range(idx + 1):\\n\\t\\t\\ttemp1[a[i] - 1] = 1\\n\\t\\tfor i in range(idx + 1, n):\\n\\t\\t\\ttemp2[a[i] - 1] = 1\\n\\t\\tif sum(temp1) == idx + 1 and sum(temp2) == n - idx - 1:\\n\\t\\t\\treturn True\\n\\t\\treturn False\\n\\texcept:\\n\\t\\treturn False\\nt = INT()\\nwhile t != 0:\\n\\tn = INT()\\n\\ta = LIST()\\n\\tocc = defaultdict(int)\\n\\tfor el in a:\\n\\t\\tocc[el] += 1\\n\\tflag = 0\\n\\tnewOcc = sortDictWithKey(occ)\\n\\ttocheck = -1\\n\\tfor (i, key) in enumerate(newOcc):\\n\\t\\tif newOcc[key] == 1:\\n\\t\\t\\ttocheck = i - 1\\n\\t\\t\\tbreak\\n\\tif tocheck != -1:\\n\\t\\tz1 = check(tocheck)\\n\\t\\tz2 = check(n - tocheck - 2)\\n\\t\\tif z1 and z2:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(tocheck + 1, n - tocheck - 1)\\n\\t\\t\\tprint(n - tocheck - 1, tocheck + 1)\\n\\t\\telif z1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(tocheck + 1, n - tocheck - 1)\\n\\t\\telif z2:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(n - tocheck - 1, tocheck + 1)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telif 1 not in newOcc or newOcc[1] == 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\ttocheck = n // 2 - 1\\n\\t\\tz1 = check(tocheck)\\n\\t\\tif z1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(tocheck + 1, n - tocheck - 1)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\tt -= 1\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().rstrip().split()))\\n\\tchk = True\\n\\td = {}\\n\\tfor i in a:\\n\\t\\tif i not in d:\\n\\t\\t\\td[i] = 0\\n\\t\\td[i] += 1\\n\\tb = a.copy()\\n\\tb = b[::-1]\\n\\tck = {}\\n\\tpos = []\\n\\tk = -1\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in ck:\\n\\t\\t\\tck[a[i]] = True\\n\\t\\telse:\\n\\t\\t\\tk = i\\n\\t\\t\\tbreak\\n\\ttmp = k\\n\\tfor j in range(1, tmp + 1):\\n\\t\\tif j not in ck:\\n\\t\\t\\tchk = False\\n\\tck2 = {}\\n\\tfor j in a[k:]:\\n\\t\\tck2[j] = True\\n\\tfor k in range(1, n - tmp + 1):\\n\\t\\tif k not in ck2:\\n\\t\\t\\tchk = False\\n\\tif chk:\\n\\t\\tpos.append((tmp, n - tmp))\\n\\ta = b.copy()\\n\\tchk = True\\n\\tck = {}\\n\\tk = -1\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in ck:\\n\\t\\t\\tck[a[i]] = True\\n\\t\\telse:\\n\\t\\t\\tk = i\\n\\t\\t\\tbreak\\n\\ttmp = k\\n\\tfor j in range(1, tmp + 1):\\n\\t\\tif j not in ck:\\n\\t\\t\\tchk = False\\n\\tck2 = {}\\n\\tfor j in a[k:]:\\n\\t\\tck2[j] = True\\n\\tfor k in range(1, n - tmp + 1):\\n\\t\\tif k not in ck2:\\n\\t\\t\\tchk = False\\n\\tif chk:\\n\\t\\tpos.append((n - tmp, tmp))\\n\\thi = False\\n\\tfor j in pos:\\n\\t\\tif j[0] == 0 or j[1] == 0:\\n\\t\\t\\thi = True\\n\\tif hi:\\n\\t\\tprint(0)\\n\\telif len(pos) == 1:\\n\\t\\tprint(len(pos))\\n\\t\\tprint(str(pos[0][0]) + ' ' + str(pos[0][1]))\\n\\telif len(pos) == 2:\\n\\t\\tif pos[0][0] == pos[1][0] and pos[0][1] == pos[1][1]:\\n\\t\\t\\tdel pos[0]\\n\\t\\t\\tprint(len(pos))\\n\\t\\t\\tprint(str(pos[0][0]) + ' ' + str(pos[0][1]))\\n\\t\\telse:\\n\\t\\t\\tprint(len(pos))\\n\\t\\t\\tprint(str(pos[0][0]) + ' ' + str(pos[0][1]))\\n\\t\\t\\tprint(str(pos[1][0]) + ' ' + str(pos[1][1]))\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tm = max(l)\\n\\tl1 = list(set(l[:m]))\\n\\tl2 = list(set(l[m:]))\\n\\tl3 = list(set(l[:n - m]))\\n\\tl4 = list(set(l[n - m:]))\\n\\tsol1 = 0\\n\\tsol2 = 0\\n\\tif len(l1) == m and len(l2) == n - m and (min(l1) == 1) and (max(l1) == m) and (min(l2) == 1) and (max(l2) == n - m):\\n\\t\\tsol1 = 1\\n\\tif len(l3) == n - m and len(l4) == m and (min(l3) == 1) and (max(l3) == n - m) and (min(l4) == 1) and (max(l4) == m):\\n\\t\\tsol2 = 1\\n\\tif sol1 + sol2 == 0:\\n\\t\\tprint(0)\\n\\telif sol1 + sol2 == 2:\\n\\t\\tif m != n // 2:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(str(m) + ' ' + str(n - m))\\n\\t\\t\\tprint(str(n - m) + ' ' + str(m))\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(str(m) + ' ' + str(n - m))\\n\\telif sol1 == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(str(m) + ' ' + str(n - m))\\n\\telse:\\n\\t\\tprint(1)\\n\\t\\tprint(str(n - m) + ' ' + str(m))\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom math import *\\nt = int(input())\\nwhile t > 0:\\n\\tt -= 1\\n\\tn = int(input())\\n\\ta = [int(p) for p in input().split()]\\n\\tb = [0 for i in range(n + 1)]\\n\\tm = 1\\n\\td = []\\n\\tif a.count(1) != 2:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tl = [0 for i in range(n + 1)]\\n\\tfor i in range(n):\\n\\t\\tb[a[i]] += 1\\n\\t\\tif a[i] == m:\\n\\t\\t\\twhile m <= n and b[m] != 0:\\n\\t\\t\\t\\tm += 1\\n\\t\\tl[i] = m\\n\\tb = [0 for i in range(n + 1)]\\n\\tr = [0 for i in range(n + 1)]\\n\\tm = 1\\n\\ta = a[::-1]\\n\\tfor i in range(n):\\n\\t\\tb[a[i]] += 1\\n\\t\\tif a[i] == m:\\n\\t\\t\\twhile m <= n and b[m] != 0:\\n\\t\\t\\t\\tm += 1\\n\\t\\tr[i] = m\\n\\tfor i in range(n):\\n\\t\\tif l[i] == i + 2 and r[n - i - 2] == n - i:\\n\\t\\t\\td.append([i + 1, n - i - 1])\\n\\tprint(len(d))\\n\\tfor i in d:\\n\\t\\tprint(*i)\\n\", \"import sys\\ninput = lambda : sys.stdin.readline().strip()\\nt = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tpre = [0] * n\\n\\tsuf = [0] * n\\n\\ts1 = set()\\n\\ts2 = set()\\n\\tmex1 = 0\\n\\tmex2 = 0\\n\\ts1.add(0)\\n\\ts2.add(0)\\n\\tfor i in range(n):\\n\\t\\ts1.add(a[i])\\n\\t\\twhile mex1 in s1:\\n\\t\\t\\tmex1 += 1\\n\\t\\tpre[i] = mex1\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\ts2.add(a[i])\\n\\t\\twhile mex2 in s2:\\n\\t\\t\\tmex2 += 1\\n\\t\\tsuf[i] = mex2\\n\\tk = 0\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif pre[i] - 1 == i + 1 and suf[i + 1] - 1 == n - i - 1:\\n\\t\\t\\tk += 1\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\tprint(k)\\n\\tfor i in ans:\\n\\t\\tprint(' '.join(map(str, i)))\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmaxi = max(l)\\n\\ttruth = [0 for j in range(n)]\\n\\ttruth2 = [0 for j in range(n)]\\n\\tans = 0\\n\\tans_list = []\\n\\tfor j in range(maxi):\\n\\t\\ttruth[l[j] - 1] += 1\\n\\tfor j in range(maxi, n):\\n\\t\\ttruth2[l[j] - 1] += 1\\n\\tif truth[0:maxi].count(1) == maxi and truth2[0:n - maxi].count(1) == n - maxi:\\n\\t\\tans += 1\\n\\t\\tans_list.append([maxi, n - maxi])\\n\\ttruth = [0 for j in range(n)]\\n\\ttruth2 = [0 for j in range(n)]\\n\\tmaxi = n - maxi\\n\\tfor j in range(maxi):\\n\\t\\ttruth[l[j] - 1] += 1\\n\\tfor j in range(maxi, n):\\n\\t\\ttruth2[l[j] - 1] += 1\\n\\tif truth[0:maxi].count(1) == maxi and truth2[0:n - maxi].count(1) == n - maxi:\\n\\t\\tif [maxi, n - maxi] not in ans_list:\\n\\t\\t\\tans += 1\\n\\t\\t\\tans_list.append([maxi, n - maxi])\\n\\tprint(ans)\\n\\tif ans != 0:\\n\\t\\tfor j in ans_list:\\n\\t\\t\\tprint(*j)\\n\", \"t = int(input())\\n\\ndef pmok(aa):\\n\\tseen = set()\\n\\tcursum = 0\\n\\tret = []\\n\\tfor (i, a) in enumerate(aa, 1):\\n\\t\\tif a in seen:\\n\\t\\t\\tbreak\\n\\t\\tseen.add(a)\\n\\t\\tcursum += a\\n\\t\\tif cursum == i * (i + 1) // 2:\\n\\t\\t\\tret.append(i)\\n\\treturn ret\\nanss = []\\nfor _ in range(t):\\n\\tn = int(input())\\n\\taa = list(map(int, input().split()))\\n\\tans = []\\n\\tsl2 = set(pmok(reversed(aa[1:])))\\n\\tfor l1 in pmok(aa[:-1]):\\n\\t\\tif n - l1 in sl2:\\n\\t\\t\\tans.append(f'{l1} {n - l1}')\\n\\tanss.append(str(len(ans)))\\n\\tif ans:\\n\\t\\tanss.append('\\\\n'.join(ans))\\nprint('\\\\n'.join(anss))\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tz = [0 for j in range(n - 1)]\\n\\tx = [0 for j in range(n - 1)]\\n\\tflage = 1\\n\\tfalge1 = 1\\n\\tfor i in range(n):\\n\\t\\tif z[a[i] - 1] == 0:\\n\\t\\t\\tz[a[i] - 1] = 1\\n\\t\\telse:\\n\\t\\t\\tflage1 = 0\\n\\t\\t\\tl = a[:i]\\n\\t\\t\\tm = a[i:]\\n\\t\\t\\tbreak\\n\\ta = a[::-1]\\n\\tfor k in range(n):\\n\\t\\tif x[a[k] - 1] == 0:\\n\\t\\t\\tx[a[k] - 1] = 1\\n\\t\\telse:\\n\\t\\t\\tflage = 0\\n\\t\\t\\tg = a[:k]\\n\\t\\t\\th = a[k:]\\n\\t\\t\\tbreak\\n\\tif flage and flage1:\\n\\t\\tprint(0)\\n\\t\\tbreak\\n\\tacc1 = 0\\n\\tif flage == 0:\\n\\t\\tif len(g) == 1:\\n\\t\\t\\tif g[0] == 1:\\n\\t\\t\\t\\tflag1 = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag1 = 0\\n\\t\\telse:\\n\\t\\t\\tg.sort()\\n\\t\\t\\tif g[0] != 1:\\n\\t\\t\\t\\tflag1 = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor j in range(1, k):\\n\\t\\t\\t\\t\\tif g[j] - g[j - 1] == 1:\\n\\t\\t\\t\\t\\t\\tflag1 = 1\\n\\t\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tflag1 = 0\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tif len(h) == 1:\\n\\t\\t\\tif h[0] == 1:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 0\\n\\t\\telse:\\n\\t\\t\\th.sort()\\n\\t\\t\\tif h[0] != 1:\\n\\t\\t\\t\\tflag = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor j in range(1, n - k):\\n\\t\\t\\t\\t\\tif h[j] - h[j - 1] == 1:\\n\\t\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tflag = 0\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tif flag and flag1:\\n\\t\\t\\tacc1 = 1\\n\\tacc2 = 0\\n\\tif flage1 == 0:\\n\\t\\tif len(l) == 1:\\n\\t\\t\\tif l[0] == 1:\\n\\t\\t\\t\\tflag1a = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag1a = 0\\n\\t\\telse:\\n\\t\\t\\tl.sort()\\n\\t\\t\\tif l[0] != 1:\\n\\t\\t\\t\\tflag1a = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor j in range(1, i):\\n\\t\\t\\t\\t\\tif l[j] - l[j - 1] == 1:\\n\\t\\t\\t\\t\\t\\tflag1a = 1\\n\\t\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tflag1a = 0\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tif len(m) == 1:\\n\\t\\t\\tif m[0] == 1:\\n\\t\\t\\t\\tflaga = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflaga = 0\\n\\t\\telse:\\n\\t\\t\\tm.sort()\\n\\t\\t\\tif m[0] != 1:\\n\\t\\t\\t\\tflaga = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor j in range(1, n - i):\\n\\t\\t\\t\\t\\tif m[j] - m[j - 1] == 1:\\n\\t\\t\\t\\t\\t\\tflaga = 1\\n\\t\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tflaga = 0\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tif flaga and flag1a:\\n\\t\\t\\tacc2 = 1\\n\\tif flag and flag1 and flaga and flag1a and (n - k == i):\\n\\t\\tprint(1)\\n\\t\\tprint(n - k, k)\\n\\telse:\\n\\t\\tprint(acc1 + acc2)\\n\\t\\tif flag and flag1:\\n\\t\\t\\tprint(n - k, k)\\n\\t\\tif flaga and flag1a:\\n\\t\\t\\tprint(i, n - i)\\n\", \"for __ in range(int(input())):\\n\\tn = int(input())\\n\\tar = list(map(int, input().split()))\\n\\tmx = [0] * n\\n\\tmn = [0] * n\\n\\tc = [0] * (n + 2)\\n\\ta = 1\\n\\tfor i in range(n):\\n\\t\\tc[ar[i]] += 1\\n\\t\\tif c[ar[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\twhile a < n + 1:\\n\\t\\t\\tif c[a] == 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ta += 1\\n\\t\\tmn[i] = a\\n\\ttemp = 0\\n\\tfor i in range(n):\\n\\t\\tif temp < ar[i]:\\n\\t\\t\\ttemp = ar[i]\\n\\t\\tmx[i] = temp + 1\\n\\tmx1 = [0] * n\\n\\tmn1 = [0] * n\\n\\tc1 = [0] * (n + 2)\\n\\ta = 1\\n\\tar = ar[::-1]\\n\\tfor i in range(n):\\n\\t\\tc1[ar[i]] += 1\\n\\t\\tif c1[ar[i]] > 1:\\n\\t\\t\\tbreak\\n\\t\\twhile a < n + 1:\\n\\t\\t\\tif c1[a] == 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ta += 1\\n\\t\\tmn1[i] = a\\n\\ttemp = 0\\n\\tfor i in range(n):\\n\\t\\tif temp < ar[i]:\\n\\t\\t\\ttemp = ar[i]\\n\\t\\tmx1[i] = temp + 1\\n\\tmx1 = mx1[::-1]\\n\\tmn1 = mn1[::-1]\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif mx[i] == mn[i] and mx1[i + 1] == mn1[i + 1]:\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\tprint(len(ans))\\n\\tif len(ans) > 0:\\n\\t\\tfor i in range(len(ans)):\\n\\t\\t\\tprint(*ans[i])\\n\", \"from sys import stdin, stdout\\nfrom collections import defaultdict, Counter\\nfrom functools import lru_cache\\nfrom math import gcd, floor, ceil\\n\\ndef ilist():\\n\\treturn [int(x) for x in stdin.readline().strip().split(' ')]\\n\\ndef iint():\\n\\treturn int(stdin.readline().strip())\\n\\ndef istr():\\n\\treturn stdin.readline().strip()\\nt = iint()\\nfor _x in range(t):\\n\\tres = []\\n\\tn = iint()\\n\\tarr = ilist()\\n\\t(s1, s2) = (set(), set())\\n\\tchoice = set()\\n\\tmaxi = 0\\n\\tfor (i, x) in enumerate(arr, 1):\\n\\t\\tif x in s1:\\n\\t\\t\\tbreak\\n\\t\\ts1.add(x)\\n\\t\\tmaxi = max(maxi, x)\\n\\t\\tif maxi == len(s1):\\n\\t\\t\\tchoice.add((i, n - i))\\n\\tmaxi = 0\\n\\tfor (i, x) in enumerate(arr[::-1], 1):\\n\\t\\tif x in s2:\\n\\t\\t\\tbreak\\n\\t\\ts2.add(x)\\n\\t\\tmaxi = max(maxi, x)\\n\\t\\tif maxi == len(s2):\\n\\t\\t\\tif (n - i, i) in choice:\\n\\t\\t\\t\\tres.append((n - i, i))\\n\\tprint(len(res))\\n\\tfor (x, y) in res:\\n\\t\\tprint(x, y)\\n\", \"import sys\\ninput = sys.stdin.readline\\ntestcaseNum = int(input())\\nfor testcase in range(testcaseNum):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tfront = [False] * n\\n\\tused = [False] * n\\n\\tmi = n\\n\\tma = -1\\n\\tfor i in range(n):\\n\\t\\tif used[a[i]]:\\n\\t\\t\\tbreak\\n\\t\\tused[a[i]] = True\\n\\t\\tif a[i] < mi:\\n\\t\\t\\tmi = a[i]\\n\\t\\tif a[i] > ma:\\n\\t\\t\\tma = a[i]\\n\\t\\tif mi == 1 and ma == i + 1:\\n\\t\\t\\tfront[i] = True\\n\\tback = [False] * n\\n\\tused = [False] * n\\n\\tmi = n\\n\\tma = -1\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif used[a[i]]:\\n\\t\\t\\tbreak\\n\\t\\tused[a[i]] = True\\n\\t\\tif a[i] < mi:\\n\\t\\t\\tmi = a[i]\\n\\t\\tif a[i] > ma:\\n\\t\\t\\tma = a[i]\\n\\t\\tif mi == 1 and ma == n - i:\\n\\t\\t\\tback[i] = True\\n\\tres = []\\n\\tfor i in range(n - 1):\\n\\t\\tif front[i] and back[i + 1]:\\n\\t\\t\\tres.append(i + 1)\\n\\tprint(len(res))\\n\\tfor e in res:\\n\\t\\tprint(e, n - e)\\n\", \"import sys\\nimport os\\nimport time\\nimport collections\\nfrom collections import Counter, deque\\nimport itertools\\nimport math\\nimport timeit\\nimport random\\nimport string\\n\\ndef sieve(n):\\n\\tif n < 2:\\n\\t\\treturn list()\\n\\tprime = [True for _ in range(n + 1)]\\n\\tp = 3\\n\\twhile p * p <= n:\\n\\t\\tif prime[p]:\\n\\t\\t\\tfor i in range(p * 2, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 2\\n\\tr = [2]\\n\\tfor p in range(3, n + 1, 2):\\n\\t\\tif prime[p]:\\n\\t\\t\\tr.append(p)\\n\\treturn r\\n\\ndef divs(n, start=1):\\n\\tdivisors = []\\n\\tfor i in range(start, int(math.sqrt(n) + 1)):\\n\\t\\tif n % i == 0:\\n\\t\\t\\tif n / i == i:\\n\\t\\t\\t\\tdivisors.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdivisors.extend([i, n // i])\\n\\treturn divisors\\n\\ndef divn(n, primes):\\n\\tdivs_number = 1\\n\\tfor i in primes:\\n\\t\\tif n == 1:\\n\\t\\t\\treturn divs_number\\n\\t\\tt = 1\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tt += 1\\n\\t\\t\\tn //= i\\n\\t\\tdivs_number *= t\\n\\ndef flin(d, x, default=-1):\\n\\tleft = right = -1\\n\\tfor i in range(len(d)):\\n\\t\\tif d[i] == x:\\n\\t\\t\\tif left == -1:\\n\\t\\t\\t\\tleft = i\\n\\t\\t\\tright = i\\n\\tif left == -1:\\n\\t\\treturn (default, default)\\n\\telse:\\n\\t\\treturn (left, right)\\n\\ndef ceil(n, k):\\n\\treturn n // k + (n % k != 0)\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(map(int, input().split()))\\n\\ndef lcm(a, b):\\n\\treturn abs(a * b) // math.gcd(a, b)\\n\\ndef prr(a, sep=' '):\\n\\tprint(sep.join(map(str, a)))\\n\\ndef dd():\\n\\treturn collections.defaultdict(int)\\n\\ndef ddl():\\n\\treturn collections.defaultdict(list)\\nfor _ in range(ii()):\\n\\tn = ii()\\n\\td = li()\\n\\tleft = set()\\n\\tf = set()\\n\\ts = 0\\n\\tfor i in range(n - 1):\\n\\t\\ts += d[i]\\n\\t\\tf.add(d[i])\\n\\t\\tj = i + 1\\n\\t\\tif len(f) != j:\\n\\t\\t\\tbreak\\n\\t\\tif s == j * (j + 1) // 2:\\n\\t\\t\\tleft.add(i)\\n\\tf = set()\\n\\ts = 0\\n\\tres = []\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\ts += d[i]\\n\\t\\tf.add(d[i])\\n\\t\\tj = n - i\\n\\t\\tif len(f) != j:\\n\\t\\t\\tbreak\\n\\t\\tif s == j * (j + 1) // 2 and i - 1 in left:\\n\\t\\t\\tres.append(f'{i} {j}')\\n\\tprint(len(res))\\n\\tif len(res) > 0:\\n\\t\\tprr(res, '\\\\n')\\n\", \"def get():\\n\\treturn int(input())\\nt = get()\\nwhile t > 0:\\n\\tn = get()\\n\\ta = list(map(int, input().split()))\\n\\tsum = 0\\n\\ts = set()\\n\\ts2 = set()\\n\\tmp = dict()\\n\\tfor i in a:\\n\\t\\tmp[i] = 0\\n\\tfor i in a:\\n\\t\\tsum += i\\n\\t\\tmp[i] = mp[i] + 1\\n\\t\\ts2.add(i)\\n\\tx = 0\\n\\tans = []\\n\\tfor i in a:\\n\\t\\ts.add(i)\\n\\t\\tx += i\\n\\t\\ty = len(s)\\n\\t\\tmp[i] = mp[i] - 1\\n\\t\\tif mp[i] == 0:\\n\\t\\t\\ts2.remove(i)\\n\\t\\tif y * (y + 1) / 2 == x:\\n\\t\\t\\ty = len(s2)\\n\\t\\t\\tif y * (y + 1) / 2 == sum - x:\\n\\t\\t\\t\\tans.append([n - y, y])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(f'{i[0]} {i[1]}')\\n\\tt = t - 1\\n\", \"class Seq:\\n\\n\\tdef __init__(self):\\n\\t\\tself.max = 0\\n\\t\\tself.count = 0\\n\\n\\tdef add(self, v):\\n\\t\\tself.max = max(v, self.max)\\n\\t\\tself.count += 1\\n\\n\\tdef __bool__(self):\\n\\t\\treturn self.max == self.count\\n\\ndef tsk():\\n\\tn = int(input())\\n\\torig = list(map(int, input().split()))\\n\\tp2 = dict()\\n\\te1 = 0\\n\\tfor i in range(n):\\n\\t\\tif orig[i] in p2.keys():\\n\\t\\t\\te1 = i + 1\\n\\t\\t\\tp2[orig[i]] += 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tp2[orig[i]] = 1\\n\\tfor i in range(e1 + 1, n):\\n\\t\\tif orig[i] in p2.keys():\\n\\t\\t\\tp2[orig[i]] += 1\\n\\t\\telse:\\n\\t\\t\\tp2[orig[i]] = 1\\n\\t\\tif p2[orig[i]] > 2:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\tL = set()\\n\\ts1 = Seq()\\n\\tfor i in range(e1):\\n\\t\\ts1.add(orig[i])\\n\\t\\tif s1:\\n\\t\\t\\tL.add(i + 1)\\n\\te2 = n - 1\\n\\tp2 = set()\\n\\ts2 = Seq()\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif orig[i] in p2:\\n\\t\\t\\te2 = i\\n\\t\\t\\tbreak\\n\\t\\tp2.add(orig[i])\\n\\t\\ts2.add(orig[i])\\n\\t\\tif not s2:\\n\\t\\t\\tL.discard(i)\\n\\tLC = []\\n\\tfor l in L:\\n\\t\\tif e2 < l < e1:\\n\\t\\t\\tLC.append(l)\\n\\tprint(len(LC))\\n\\tfor l in LC:\\n\\t\\tprint(l, n - l)\\nt = int(input())\\nfor _ in range(t):\\n\\ttsk()\\n\", \"t = int(input())\\nfor j in range(t):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tq = max(a)\\n\\tA = a[0:q]\\n\\tcounter = [0] * q\\n\\tlimit = q\\n\\ti1 = 0\\n\\twhile i1 < q:\\n\\t\\tif not 1 <= A[i1] <= limit:\\n\\t\\t\\tbreak\\n\\t\\telif counter[A[i1] - 1] != 0:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcounter[A[i1] - 1] = 1\\n\\t\\t\\ti1 += 1\\n\\tA = a[q:n]\\n\\tcounter = [0] * (n - q)\\n\\tlimit = n - q\\n\\ti2 = 0\\n\\twhile i2 < n - q:\\n\\t\\tif not 1 <= A[i2] <= limit:\\n\\t\\t\\tbreak\\n\\t\\telif counter[A[i2] - 1] != 0:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcounter[A[i2] - 1] = 1\\n\\t\\t\\ti2 += 1\\n\\tA = a[0:n - q]\\n\\tcounter = [0] * (n - q)\\n\\tlimit = n - q\\n\\ti3 = 0\\n\\twhile i3 < n - q:\\n\\t\\tif not 1 <= A[i3] <= limit:\\n\\t\\t\\tbreak\\n\\t\\telif counter[A[i3] - 1] != 0:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcounter[A[i3] - 1] = 1\\n\\t\\t\\ti3 += 1\\n\\tA = a[n - q:n]\\n\\tcounter = [0] * q\\n\\tlimit = q\\n\\ti4 = 0\\n\\twhile i4 < q:\\n\\t\\tif not 1 <= A[i4] <= limit:\\n\\t\\t\\tbreak\\n\\t\\telif counter[A[i4] - 1] != 0:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcounter[A[i4] - 1] = 1\\n\\t\\t\\ti4 += 1\\n\\tif i1 + i2 == n and i3 + i4 == n:\\n\\t\\tif 2 * q == n:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(i1, i2)\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(i1, i2)\\n\\t\\t\\tprint(i3, i4)\\n\\telif i1 + i2 == n:\\n\\t\\tprint(1)\\n\\t\\tprint(i1, i2)\\n\\telif i3 + i4 == n:\\n\\t\\tprint(1)\\n\\t\\tprint(i3, i4)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"from sys import stdin\\nfrom collections import deque\\nfrom math import sqrt, floor, ceil, log, log2, log10, pi, gcd, sin, cos, asin\\n\\ndef ii():\\n\\treturn int(stdin.readline())\\n\\ndef fi():\\n\\treturn float(stdin.readline())\\n\\ndef mi():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef fmi():\\n\\treturn map(float, stdin.readline().split())\\n\\ndef li():\\n\\treturn list(mi())\\n\\ndef lsi():\\n\\tx = list(stdin.readline())\\n\\tx.pop()\\n\\treturn x\\n\\ndef si():\\n\\treturn stdin.readline()\\n\\ndef create_z(s):\\n\\tz = [0] * len(s)\\n\\tx = y = 0\\n\\tfor i in range(1, len(s)):\\n\\t\\tz[i] = max(0, min(z[i - x], y - i + 1))\\n\\t\\twhile i + z[i] < len(s) and s[z[i]] == s[i + z[i]]:\\n\\t\\t\\tx = i\\n\\t\\t\\ty = i + z[i]\\n\\t\\t\\tz[i] += 1\\n\\treturn z\\nfor _ in range(ii()):\\n\\tn = ii()\\n\\ts = li()\\n\\ta = [s[0]]\\n\\tfor i in range(1, n):\\n\\t\\ta.append(a[i - 1] + s[i])\\n\\tres = []\\n\\tfor i in range(1, n):\\n\\t\\tif a[i - 1] == i * (i + 1) // 2 and a[-1] - a[i - 1] == (n - i) * (n - i + 1) // 2:\\n\\t\\t\\tres.append([i, n - i])\\n\\tans = []\\n\\tfor i in res:\\n\\t\\tif sorted(s[:i[0]]) == [z for z in range(1, i[0] + 1)] and sorted(s[i[0]:]) == [z for z in range(1, 1 + i[1])]:\\n\\t\\t\\tans.append(i)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"def seq(list):\\n\\tlist = sorted(list)\\n\\tfor i in range(1, len(list) + 1):\\n\\t\\tif i == list[i - 1]:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn True\\nimport sys\\nnum = int(sys.stdin.readline().strip())\\nk = 0\\nwhile k < num:\\n\\tline1 = sys.stdin.readline().strip()\\n\\tline2 = sys.stdin.readline().strip()\\n\\ta = line2.split()\\n\\tans = []\\n\\tfor i in range(len(a)):\\n\\t\\ta[i] = int(a[i])\\n\\tma = max(a)\\n\\tif seq(a[:ma]) and seq(a[ma:]):\\n\\t\\tans.append((ma, len(a) - ma))\\n\\tif ma != len(a) - ma:\\n\\t\\tif seq(a[:len(a) - ma]) and seq(a[len(a) - ma:]):\\n\\t\\t\\tans.append((len(a) - ma, ma))\\n\\tprint(len(ans))\\n\\tfor item in ans:\\n\\t\\tprint(item[0], item[1])\\n\\tk += 1\\n\", \"from sys import stdin\\ninput = stdin.readline\\nT = int(input())\\nfor _ in range(T):\\n\\t(n, p) = (int(input()), list(map(int, input().split())))\\n\\t(la, ra) = ([0] * n, [0] * n)\\n\\t(lS, rS) = (set(), set())\\n\\t(lmx, rmx) = (0, 0)\\n\\tfor i in range(n):\\n\\t\\tlS.add(p[i])\\n\\t\\tlmx = max(lmx, p[i])\\n\\t\\trS.add(p[n - i - 1])\\n\\t\\trmx = max(rmx, p[n - i - 1])\\n\\t\\tif len(lS) == i + 1 and lmx == i + 1:\\n\\t\\t\\tla[i] = 1\\n\\t\\tif len(rS) == i + 1 and rmx == i + 1:\\n\\t\\t\\tra[n - i - 1] = 1\\n\\tres = []\\n\\tfor i in range(1, n):\\n\\t\\tif la[i - 1] and ra[i]:\\n\\t\\t\\tres.append(i)\\n\\tprint(len(res))\\n\\tfor u in res:\\n\\t\\tprint(u, n - u)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\ntestcases = int(input())\\nfor j in range(testcases):\\n\\tn = int(input())\\n\\tints = list(map(int, input().split()))\\n\\tcounts = [0 for k in range(max(ints))]\\n\\tfor h in range(n):\\n\\t\\tcounts[ints[h] - 1] += 1\\n\\thighestsofar = 0\\n\\tindexhigh = 0\\n\\tfor s in range(len(counts)):\\n\\t\\tif counts[s] == 2:\\n\\t\\t\\tindexhigh = s\\n\\thighest = indexhigh + 1\\n\\tchecker = 0\\n\\toutput1 = []\\n\\toutput2 = []\\n\\tsame = False\\n\\tif max(ints) == highest:\\n\\t\\tsame = True\\n\\tif sorted(ints[0:highest]) == list(range(1, highest + 1)) and sorted(ints[highest:]) == list(range(1, max(ints) + 1)):\\n\\t\\tchecker += 1\\n\\t\\toutput1 += [str(highest), str(max(ints))]\\n\\tif sorted(ints[0:max(ints)]) == list(range(1, max(ints) + 1)) and sorted(ints[max(ints):]) == list(range(1, highest + 1)):\\n\\t\\tchecker += 1\\n\\t\\toutput2 += [str(max(ints)), str(highest)]\\n\\tif checker == 0:\\n\\t\\tprint(0)\\n\\telif checker == 1:\\n\\t\\tprint(1)\\n\\t\\tif len(output1) != 0:\\n\\t\\t\\tprint(' '.join(output1))\\n\\t\\tif len(output2) != 0:\\n\\t\\t\\tprint(' '.join(output2))\\n\\telif checker == 2 and same == False:\\n\\t\\tprint(2)\\n\\t\\tif len(output1) != 0:\\n\\t\\t\\tprint(' '.join(output1))\\n\\t\\tif len(output2) != 0:\\n\\t\\t\\tprint(' '.join(output2))\\n\\telif checker == 2 and same == True:\\n\\t\\tprint(1)\\n\\t\\tprint(' '.join(output1))\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))[:n]\\n\\tx = 0\\n\\tk = 0\\n\\tl1 = max(a)\\n\\tl2 = n - l1\\n\\tif l1 == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tp = sorted(a[:l1])\\n\\t\\tq = sorted(a[l1:])\\n\\t\\tr = sorted(a[:l2])\\n\\t\\ts = sorted(a[l2:])\\n\\t\\tA = [i for i in range(1, l1 + 1)]\\n\\t\\tB = [i for i in range(1, l2 + 1)]\\n\\t\\tif p == A and q == B:\\n\\t\\t\\tx += 1\\n\\t\\t\\tk = l1\\n\\t\\tif r == B and s == A:\\n\\t\\t\\tx += 1\\n\\t\\t\\tk = l2\\n\\t\\tif l1 == l2 and x > 0:\\n\\t\\t\\tx = 1\\n\\t\\tprint(x)\\n\\t\\tif x == 1:\\n\\t\\t\\tprint(k, n - k)\\n\\t\\telif x == 2:\\n\\t\\t\\tprint(l1, l2)\\n\\t\\t\\tprint(l2, l1)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\t(a, r) = ([], [])\\n\\td = [0 for _ in range(n + 1)]\\n\\tfor i in range(n):\\n\\t\\tif d[l[i]] == 1:\\n\\t\\t\\tx = i\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\t\\ta.append(l[i])\\n\\tb = l[i:].copy()\\n\\ta.sort()\\n\\tb.sort()\\n\\tf = 0\\n\\tfor i in range(1, x + 1):\\n\\t\\tif a[i - 1] != i:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 0:\\n\\t\\tfor i in range(1, n - x + 1):\\n\\t\\t\\tif b[i - 1] != i:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif f == 0:\\n\\t\\t\\tr.append([x, n - x])\\n\\tl.reverse()\\n\\ta = []\\n\\td = [0 for _ in range(n + 1)]\\n\\tfor i in range(n):\\n\\t\\tif d[l[i]] == 1:\\n\\t\\t\\tx = i\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td[l[i]] = 1\\n\\t\\t\\ta.append(l[i])\\n\\tb = l[i:].copy()\\n\\ta.sort()\\n\\tb.sort()\\n\\tf = 0\\n\\tfor i in range(1, x + 1):\\n\\t\\tif a[i - 1] != i:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 0:\\n\\t\\tfor i in range(1, n - x + 1):\\n\\t\\t\\tif b[i - 1] != i:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif f == 0:\\n\\t\\t\\tif [n - x, x] not in r:\\n\\t\\t\\t\\tr.append([n - x, x])\\n\\tprint(len(r))\\n\\tfor i in r:\\n\\t\\tprint(*i)\\n\", \"import sys\\nfrom collections import defaultdict as dc\\nimport math\\nfrom bisect import bisect, bisect_left, bisect_right\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tp = max(l)\\n\\tq = n - p\\n\\tx = dc(int)\\n\\tc = 0\\n\\tt = []\\n\\tf1 = 1\\n\\tfor i in range(p):\\n\\t\\tx[l[i]] = 1\\n\\tfor i in range(1, p + 1):\\n\\t\\tif x[i] == 1:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tf1 = 0\\n\\t\\t\\tbreak\\n\\tif f1:\\n\\t\\tx = dc(int)\\n\\t\\tfor i in range(n - 1, n - q - 1, -1):\\n\\t\\t\\tx[l[i]] = 1\\n\\t\\tfor i in range(1, q + 1):\\n\\t\\t\\tif x[i] == 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tf1 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif f1:\\n\\t\\t\\tc += 1\\n\\t\\t\\tt.append([p, q])\\n\\tf2 = 1\\n\\tx = dc(int)\\n\\tfor i in range(n - 1, n - p - 1, -1):\\n\\t\\tx[l[i]] = 1\\n\\tfor i in range(1, p + 1):\\n\\t\\tif x[i] == 1:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tf2 = 0\\n\\t\\t\\tbreak\\n\\tif f2:\\n\\t\\tx = dc(int)\\n\\t\\tfor i in range(q):\\n\\t\\t\\tx[l[i]] = 1\\n\\t\\tfor i in range(1, q + 1):\\n\\t\\t\\tif x[i] == 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tf2 = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif f2:\\n\\t\\t\\tc += 1\\n\\t\\t\\tt.append([q, p])\\n\\tif p == q:\\n\\t\\tif c > 0:\\n\\t\\t\\tc -= 1\\n\\t\\t\\tt.pop()\\n\\tprint(c)\\n\\tfor i in range(c):\\n\\t\\tprint(*t[i])\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tary = list(map(int, input().split()))\\n\\tv = 1\\n\\tz = 0\\n\\th = 0\\n\\tarys = sorted(ary)\\n\\tarys1 = sorted(ary[:arys[n - 1]])\\n\\tarys2 = sorted(ary[arys[n - 1]:])\\n\\tfor i in range(1, n - arys[n - 1] + 1):\\n\\t\\tif arys2[i - 1] != i:\\n\\t\\t\\tz += 1\\n\\t\\t\\tbreak\\n\\tif z != 1:\\n\\t\\tfor i in range(1, arys[n - 1] + 1):\\n\\t\\t\\tif arys1[i - 1] != i:\\n\\t\\t\\t\\tz += 1\\n\\t\\t\\t\\tbreak\\n\\tarys1 = sorted(ary[:n - arys[n - 1]])\\n\\tarys2 = sorted(ary[n - arys[n - 1]:])\\n\\tfor i in range(1, arys[n - 1] + 1):\\n\\t\\tif arys2[i - 1] != i:\\n\\t\\t\\th += 1\\n\\t\\t\\tbreak\\n\\tif h != 1:\\n\\t\\tfor i in range(1, n - arys[n - 1] + 1):\\n\\t\\t\\tif arys1[i - 1] != i:\\n\\t\\t\\t\\th += 1\\n\\t\\t\\t\\tbreak\\n\\tif z == 1 and h == 1:\\n\\t\\tprint('0')\\n\\telif z == 1 and h == 0:\\n\\t\\tprint('1')\\n\\t\\tprint(n - arys[n - 1], arys[n - 1])\\n\\telif z == 0 and h == 1:\\n\\t\\tprint('1')\\n\\t\\tprint(arys[n - 1], n - arys[n - 1])\\n\\telif z == 0 and h == 0:\\n\\t\\tif n - arys[n - 1] == arys[n - 1]:\\n\\t\\t\\tprint('1')\\n\\t\\t\\tprint(n - arys[n - 1], arys[n - 1])\\n\\t\\telse:\\n\\t\\t\\tprint('2')\\n\\t\\t\\tprint(n - arys[n - 1], arys[n - 1])\\n\\t\\t\\tprint(arys[n - 1], n - arys[n - 1])\\n\", \"import sys\\nfrom collections import Counter\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef list3d(a, b, c, d):\\n\\treturn [[[d] * c for j in range(b)] for i in range(a)]\\n\\ndef list4d(a, b, c, d, e):\\n\\treturn [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\n\\ndef ceil(x, y=1):\\n\\treturn int(-(-x // y))\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST(N=None):\\n\\treturn list(MAP()) if N is None else [INT() for i in range(N)]\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\n\\ndef check(A):\\n\\tS = set()\\n\\tdiv = False\\n\\tx = -1\\n\\tfor (i, a) in enumerate(A):\\n\\t\\tif a in S:\\n\\t\\t\\tif div or max(S) != i:\\n\\t\\t\\t\\treturn -1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdiv = True\\n\\t\\t\\t\\tx = i\\n\\t\\t\\t\\tS = set([a])\\n\\t\\telse:\\n\\t\\t\\tS.add(a)\\n\\tif x + max(S) == N:\\n\\t\\treturn x\\n\\telse:\\n\\t\\treturn -1\\nfor _ in range(INT()):\\n\\tN = INT()\\n\\tA = LIST()\\n\\tres1 = check(A)\\n\\tres2 = check(A[::-1])\\n\\tif res2 != -1:\\n\\t\\tres2 = N - res2\\n\\tif res1 != -1 and res2 != -1:\\n\\t\\tif res1 != res2:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(res1, N - res1)\\n\\t\\t\\tprint(res2, N - res2)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(res1, N - res1)\\n\\telif res1 != -1:\\n\\t\\tprint(1)\\n\\t\\tprint(res1, N - res1)\\n\\telif res2 != -1:\\n\\t\\tprint(1)\\n\\t\\tprint(res2, N - res2)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tdata = list(map(int, input().split(' ')))\\n\\tfront_list = {}\\n\\ttemp = {}\\n\\tmax_value = 0\\n\\tlength = 0\\n\\tfor i in data:\\n\\t\\tmax_value = max(max_value, i)\\n\\t\\tlength += 1\\n\\t\\tif i not in temp:\\n\\t\\t\\ttemp[i] = 1\\n\\t\\t\\tif length == max_value:\\n\\t\\t\\t\\tfront_list[length] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tdata.reverse()\\n\\ttemp = {}\\n\\tmax_value = 0\\n\\tlength = 0\\n\\tresult_count = 0\\n\\tresult = []\\n\\tfor i in data:\\n\\t\\tmax_value = max(max_value, i)\\n\\t\\tlength += 1\\n\\t\\tif i not in temp:\\n\\t\\t\\ttemp[i] = 1\\n\\t\\t\\tif length == max_value:\\n\\t\\t\\t\\tif n - length in front_list:\\n\\t\\t\\t\\t\\tresult_count += 1\\n\\t\\t\\t\\t\\tresult.append((n - length, length))\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(result_count)\\n\\tfor i in result:\\n\\t\\tprint(i[0], i[1])\\n\", \"def check1(a, m, n):\\n\\tct = [0] * m\\n\\tf = 0\\n\\tfor i in range(m):\\n\\t\\tif a[i] > m:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\t\\tct[a[i] - 1] += 1\\n\\t\\tif ct[a[i] - 1] != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tfor i in ct:\\n\\t\\tif i != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\treturn 0\\n\\tf = 0\\n\\tct = [0] * max(a)\\n\\tfor i in range(m, len(a)):\\n\\t\\tct[a[i] - 1] += 1\\n\\t\\tif ct[a[i] - 1] != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tfor i in ct:\\n\\t\\tif i != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\treturn 0\\n\\treturn 1\\n\\ndef check2(a, m, n):\\n\\tct = [0] * n\\n\\tf = 0\\n\\tfor i in range(m, len(a)):\\n\\t\\tif a[i] > n:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\t\\tct[a[i] - 1] += 1\\n\\t\\tif ct[a[i] - 1] != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tfor i in ct:\\n\\t\\tif i != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\treturn 0\\n\\tct = [0] * max(a)\\n\\tfor i in range(m):\\n\\t\\tct[a[i] - 1] += 1\\n\\t\\tif ct[a[i] - 1] != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tfor i in ct:\\n\\t\\tif i != 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\treturn 0\\n\\treturn 1\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().strip().split()))\\n\\tcount = [0] * max(a)\\n\\tfor j in range(n):\\n\\t\\tcount[a[j] - 1] += 1\\n\\tm = 0\\n\\twhile m < len(count) and count[m] == 2:\\n\\t\\tm += 1\\n\\tflag = 0\\n\\tfor j in range(m, len(count)):\\n\\t\\tif count[j] != 1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tprint(0)\\n\\telif m == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\ta0 = check1(a, m, len(count))\\n\\t\\tb = check2(a, len(count), m)\\n\\t\\tif a0 == 1 and b == 1 and (m != len(count)):\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(m, len(count))\\n\\t\\t\\tprint(len(count), m)\\n\\t\\telif a0 == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, len(count))\\n\\t\\telif b == 1:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(len(count), m)\\n\\t\\telif a0 == 0 and b == 0:\\n\\t\\t\\tprint(0)\\n\", \"def create_farr():\\n\\tmx = max(arr)\\n\\tcarr = [0 for _ in range(mx)]\\n\\tfarr = []\\n\\tfm = 1\\n\\tfor (i, x) in enumerate(arr):\\n\\t\\tcarr[x - 1] += 1\\n\\t\\tif carr[x - 1] == 2:\\n\\t\\t\\twhile len(farr) < n:\\n\\t\\t\\t\\tfarr.append(False)\\n\\t\\t\\tbreak\\n\\t\\tif fm == x:\\n\\t\\t\\tfor j in range(fm, mx + 1):\\n\\t\\t\\t\\tif j == mx or not carr[j]:\\n\\t\\t\\t\\t\\tfm = j + 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif fm > i + 1:\\n\\t\\t\\tfarr.append(fm - 1)\\n\\t\\telse:\\n\\t\\t\\tfarr.append(False)\\n\\treturn farr\\n\\ndef create_barr():\\n\\tmx = max(arr)\\n\\tcarr = [0 for _ in range(mx)]\\n\\tbarr = []\\n\\tfm = 1\\n\\tfor (i, x) in enumerate(reversed(arr)):\\n\\t\\tcarr[x - 1] += 1\\n\\t\\tif carr[x - 1] == 2:\\n\\t\\t\\twhile len(barr) < n:\\n\\t\\t\\t\\tbarr.append(False)\\n\\t\\t\\tbreak\\n\\t\\tif fm == x:\\n\\t\\t\\tfor j in range(fm, mx + 1):\\n\\t\\t\\t\\tif j == mx or not carr[j]:\\n\\t\\t\\t\\t\\tfm = j + 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif fm > i + 1:\\n\\t\\t\\tbarr.append(fm - 1)\\n\\t\\telse:\\n\\t\\t\\tbarr.append(False)\\n\\treturn list(reversed(barr))\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tfarr = create_farr()\\n\\tbarr = create_barr()\\n\\tcoll = []\\n\\tfor i in range(n - 1):\\n\\t\\tif farr[i] and barr[i + 1]:\\n\\t\\t\\tcoll.append((farr[i], barr[i + 1]))\\n\\tprint(len(coll))\\n\\tfor t in coll:\\n\\t\\tprint(*t)\\n\", \"def readIntArray():\\n\\treturn list(map(int, input().split()))\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = readIntArray()\\n\\tmp = {}\\n\\tfor val in a:\\n\\t\\tif val not in mp:\\n\\t\\t\\tmp[val] = 0\\n\\t\\tmp[val] += 1\\n\\tl1 = max(a)\\n\\tl2 = n - l1\\n\\tif l2 <= 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tgood = True\\n\\tfor i in range(1, l2 + 1):\\n\\t\\tif i not in mp or mp[i] != 2:\\n\\t\\t\\tgood = False\\n\\t\\t\\tbreak\\n\\tfor i in range(l2 + 1, l1 + 1):\\n\\t\\tif i not in mp or mp[i] != 1:\\n\\t\\t\\tgood = False\\n\\t\\t\\tbreak\\n\\tif not good:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tmp = {}\\n\\tans = set()\\n\\tcur = 0\\n\\tst = set()\\n\\tused = set()\\n\\tfor i in range(n):\\n\\t\\tif a[i] in used:\\n\\t\\t\\tbreak\\n\\t\\tst.add(a[i])\\n\\t\\tused.add(a[i])\\n\\t\\twhile cur + 1 in st:\\n\\t\\t\\tst.remove(cur + 1)\\n\\t\\t\\tcur += 1\\n\\t\\tif cur == l1 or (cur == l2 and len(st) == 0):\\n\\t\\t\\tans.add((cur, n - cur))\\n\\tprint(len(ans))\\n\\tfor val in ans:\\n\\t\\tprint(val[0], val[1])\\n\", \"def main():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tfirst_max_num = max(a)\\n\\t\\tsecond_max_num = n - first_max_num\\n\\t\\tcounter = int()\\n\\t\\tres = str()\\n\\t\\tif first_max_num * second_max_num != 0:\\n\\t\\t\\tleft = set(a[:first_max_num])\\n\\t\\t\\tright = set(a[first_max_num:])\\n\\t\\t\\tif len(left) == first_max_num and max(left) == first_max_num and (len(right) == second_max_num) and (max(right) == second_max_num):\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\t\\tres += f'{len(left)} {len(right)}\\\\n'\\n\\t\\t\\tif first_max_num != second_max_num:\\n\\t\\t\\t\\tleft = set(a[:second_max_num])\\n\\t\\t\\t\\tright = set(a[second_max_num:])\\n\\t\\t\\t\\tif len(left) == second_max_num and max(left) == second_max_num and (len(right) == first_max_num) and (max(right) == first_max_num):\\n\\t\\t\\t\\t\\tcounter += 1\\n\\t\\t\\t\\t\\tres += f'{len(left)} {len(right)}\\\\n'\\n\\t\\tprint(counter)\\n\\t\\tif counter:\\n\\t\\t\\tprint(res.strip())\\nmain()\\n\", \"t = int(input())\\nfrom heapq import heappush as pu\\nfrom heapq import heappop as po\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [0] + list(map(int, input().split()))\\n\\tc = [False for i in range(n + 1)]\\n\\tan = []\\n\\ttr = set()\\n\\td = []\\n\\tfor i in range(1, n + 1):\\n\\t\\tpu(d, a[i])\\n\\t\\twhile d:\\n\\t\\t\\tx = po(d)\\n\\t\\t\\tif x <= i:\\n\\t\\t\\t\\ttr.add(x)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpu(d, x)\\n\\t\\t\\t\\tbreak\\n\\t\\tif len(tr) == i:\\n\\t\\t\\tc[i] = True\\n\\tcc = [False for i in range(n + 1)]\\n\\tan = []\\n\\ttr = set()\\n\\td = []\\n\\tfor i in range(n, 0, -1):\\n\\t\\tj = n + 1 - i\\n\\t\\tpu(d, a[i])\\n\\t\\twhile d:\\n\\t\\t\\tx = po(d)\\n\\t\\t\\tif x <= j:\\n\\t\\t\\t\\ttr.add(x)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpu(d, x)\\n\\t\\t\\t\\tbreak\\n\\t\\tif len(tr) == j:\\n\\t\\t\\tcc[i] = True\\n\\tfor i in range(1, n):\\n\\t\\tif c[i] and cc[i + 1]:\\n\\t\\t\\tan.append((i, n - i))\\n\\tprint(len(an))\\n\\tfor i in an:\\n\\t\\tprint(*i)\\n\", \"def disp(a):\\n\\tfor i in range(len(a)):\\n\\t\\tprint(a[i], end=' ')\\n\\tprint()\\nt = int(input())\\nfor k in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tsetf = set(a)\\n\\tcount = 0\\n\\tans = [[]]\\n\\teh = max(a)\\n\\the = len(a) - len(setf)\\n\\tfor i in range(1, n):\\n\\t\\tif i != eh and i != he:\\n\\t\\t\\tcontinue\\n\\t\\ttemp = a[:i]\\n\\t\\ttemp2 = a[i:]\\n\\t\\tset1 = set(temp)\\n\\t\\tset2 = set(temp2)\\n\\t\\tif len(set1) != len(temp) or len(set2) != len(temp2):\\n\\t\\t\\tcontinue\\n\\t\\tif max(temp) == i and max(temp2) == n - i:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append([len(temp), len(temp2)])\\n\\tprint(count)\\n\\tnum = 0\\n\\tfor i in ans:\\n\\t\\tif num > 0:\\n\\t\\t\\tprint(i[0], end=' ')\\n\\t\\t\\tprint(i[1])\\n\\t\\tnum += 1\\n\", \"from collections import Counter\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmp = Counter(a)\\n\\tmaxi = -1\\n\\tfr = [0] * n\\n\\tlst = [0] * n\\n\\tfr[0] = a[0]\\n\\tlst[n - 1] = a[n - 1]\\n\\tfor i in range(1, n):\\n\\t\\tif fr[i - 1] < a[i]:\\n\\t\\t\\tfr[i] = a[i]\\n\\t\\telse:\\n\\t\\t\\tfr[i] = fr[i - 1]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif lst[i + 1] > a[i]:\\n\\t\\t\\tlst[i] = lst[i + 1]\\n\\t\\telse:\\n\\t\\t\\tlst[i] = a[i]\\n\\tls = set(mp.keys())\\n\\tfs = set()\\n\\tpath = []\\n\\tcount = 0\\n\\tfor i in range(n):\\n\\t\\tfs.add(a[i])\\n\\t\\tif mp[a[i]] == 1:\\n\\t\\t\\tls.remove(a[i])\\n\\t\\tif len(fs) == fr[i] and i + 1 == fr[i]:\\n\\t\\t\\tif len(ls) == lst[i + 1] and n - i - 1 == lst[i + 1]:\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tpath.append([fr[i], lst[i + 1]])\\n\\tprint(count)\\n\\tfor e in path:\\n\\t\\tprint(e[0], e[1])\\n\", \"import math as mt\\nimport sys, string, bisect\\ninput = sys.stdin.readline\\nimport random\\nfrom collections import deque, defaultdict\\nL = lambda : list(map(int, input().split()))\\nLs = lambda : list(input().split())\\nM = lambda : map(int, input().split())\\nI = lambda : int(input())\\nt = I()\\nfor _ in range(t):\\n\\tn = I()\\n\\tl = L()\\n\\td = defaultdict(int)\\n\\ts = defaultdict(int)\\n\\tflag = 0\\n\\tc = 0\\n\\tr = []\\n\\tkey = 0\\n\\tfor i in range(n):\\n\\t\\td[l[i]] += 1\\n\\t\\tif d[l[i]] == 2:\\n\\t\\t\\td[l[i]] -= 1\\n\\t\\t\\tkey = i\\n\\t\\t\\tbreak\\n\\tif key == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tfor i in range(key):\\n\\t\\t\\tif d[i + 1] != 1:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 0:\\n\\t\\t\\tw = l[key::1]\\n\\t\\t\\tw.sort()\\n\\t\\t\\tfor i in range(len(w)):\\n\\t\\t\\t\\tif w[i] != i + 1:\\n\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif flag == 0:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\tr.append((key, n - key))\\n\\t\\tx = l[-1::-1]\\n\\t\\tflag = 0\\n\\t\\tkey = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\ts[x[i]] += 1\\n\\t\\t\\tif s[x[i]] == 2:\\n\\t\\t\\t\\ts[x[i]] -= 1\\n\\t\\t\\t\\tkey = i\\n\\t\\t\\t\\tbreak\\n\\t\\tfor j in range(key):\\n\\t\\t\\tif s[j + 1] != 1:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 0:\\n\\t\\t\\tw = x[key:]\\n\\t\\t\\tw.sort()\\n\\t\\t\\tfor i in range(len(w)):\\n\\t\\t\\t\\tif w[i] != i + 1:\\n\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif flag == 0:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\tr.append((n - key, key))\\n\\t\\tif c != 0:\\n\\t\\t\\tr = set(r)\\n\\t\\t\\tc = len(r)\\n\\t\\tprint(c)\\n\\t\\tfor i in r:\\n\\t\\t\\tprint(*i)\\n\", \"for case in range(int(input())):\\n\\tN = int(input())\\n\\tL = list(map(int, input().split()))\\n\\tback = [False for i in range(N)]\\n\\tmis = set()\\n\\tma = 0\\n\\tfor i in range(N - 1, 0, -1):\\n\\t\\tnum = L[i]\\n\\t\\tif num > ma:\\n\\t\\t\\tfor j in range(ma + 1, num):\\n\\t\\t\\t\\tmis.add(j)\\n\\t\\t\\tma = num\\n\\t\\telse:\\n\\t\\t\\tif num not in mis:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tmis.remove(num)\\n\\t\\tif len(mis) == 0:\\n\\t\\t\\tback[i] = True\\n\\tout = []\\n\\tmis = set()\\n\\tma = 0\\n\\tfor i in range(N - 1):\\n\\t\\tnum = L[i]\\n\\t\\tif num > ma:\\n\\t\\t\\tfor j in range(ma + 1, num):\\n\\t\\t\\t\\tmis.add(j)\\n\\t\\t\\tma = num\\n\\t\\telse:\\n\\t\\t\\tif num not in mis:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tmis.remove(num)\\n\\t\\tif len(mis) == 0 and back[i + 1]:\\n\\t\\t\\tout.append((i + 1, N - i - 1))\\n\\tprint(len(out))\\n\\tfor (l1, l2) in out:\\n\\t\\tprint(l1, l2)\\n\", \"from collections import Counter\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tx = list(map(int, input().split()))\\n\\tc = Counter(x)\\n\\tu1 = set((v for v in c if c[v] == 1))\\n\\tu2 = set((v for v in c if c[v] == 2))\\n\\tl1 = len(u1)\\n\\tl2 = len(u2)\\n\\tif not l2 or l1 + 2 * l2 != n:\\n\\t\\tprint(0)\\n\\telif u2 != set(range(1, l2 + 1)):\\n\\t\\tprint(0)\\n\\telif u1 != set(range(l2 + 1, n - l2 + 1)):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tr = []\\n\\t\\tif set(x[:l2]) == u2:\\n\\t\\t\\tr.append((l2, n - l2))\\n\\t\\tif l1 and set(x[-l2:]) == u2:\\n\\t\\t\\tr.append((n - l2, l2))\\n\\t\\tprint(len(r))\\n\\t\\tfor v in r:\\n\\t\\t\\tprint(*v)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tp1 = [0] * n\\n\\tp2 = [0] * n\\n\\ts = 0\\n\\tctr = 0\\n\\tmax = 1\\n\\tsett = set()\\n\\tc = 0\\n\\tfor i in a:\\n\\t\\ts += i\\n\\t\\tctr += 1\\n\\t\\tif i in sett:\\n\\t\\t\\tbreak\\n\\t\\tif ctr * (ctr + 1) // 2 == s:\\n\\t\\t\\tp1[c] = 1\\n\\t\\telse:\\n\\t\\t\\tp1[c] = 0\\n\\t\\tsett.add(i)\\n\\t\\tc += 1\\n\\ta.reverse()\\n\\tc = 0\\n\\ts = 0\\n\\tctr = 0\\n\\tsett1 = set()\\n\\tfor i in a:\\n\\t\\ts += i\\n\\t\\tctr += 1\\n\\t\\tif i in sett1:\\n\\t\\t\\tbreak\\n\\t\\tif ctr * (ctr + 1) // 2 == s:\\n\\t\\t\\tp2[c] = 1\\n\\t\\telse:\\n\\t\\t\\tp2[c] = 0\\n\\t\\tsett1.add(i)\\n\\t\\tc += 1\\n\\tp2.reverse()\\n\\tp3 = []\\n\\tans = []\\n\\tfor i in range(n):\\n\\t\\tif p1[i] == 1 and p2[i + 1] == 1:\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"for i in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = [0] + a[:]\\n\\tleft = [0] * (n + 1)\\n\\tright = [0] * (n + 1)\\n\\tma = 1\\n\\td = {}\\n\\tfor i in range(1, n + 1):\\n\\t\\tif b[i] in d:\\n\\t\\t\\tbreak\\n\\t\\td[b[i]] = 1\\n\\t\\tma = max(ma, b[i])\\n\\t\\tif ma == i:\\n\\t\\t\\tleft[i] = 1\\n\\tb = [0] + a[::-1]\\n\\tma = 1\\n\\td = {}\\n\\tfor i in range(1, n + 1):\\n\\t\\tif b[i] in d:\\n\\t\\t\\tbreak\\n\\t\\td[b[i]] = 1\\n\\t\\tma = max(ma, b[i])\\n\\t\\tif ma == i:\\n\\t\\t\\tright[i] = 1\\n\\tans = 0\\n\\tind = []\\n\\tfor i in range(1, n + 1):\\n\\t\\tif left[i] * right[n - i]:\\n\\t\\t\\tans += 1\\n\\t\\t\\tind.append(i)\\n\\tprint(ans)\\n\\tfor i in ind:\\n\\t\\tprint(i, n - i)\\n\", \"from collections import defaultdict\\ntc = int(input())\\nfor zzz in range(tc):\\n\\tsvn = defaultdict(int)\\n\\tzah = defaultdict(int)\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tleft = [0] * n\\n\\tright = [0] * n\\n\\tdeci = True\\n\\tsum1 = 0\\n\\tsum2 = 0\\n\\tfor i in range(n):\\n\\t\\tsum1 += i + 1\\n\\t\\tsum2 += arr[i]\\n\\t\\tif svn[arr[i]] != 0:\\n\\t\\t\\tdeci = False\\n\\t\\tsvn[arr[i]] += 1\\n\\t\\tif sum1 == sum2 and deci:\\n\\t\\t\\tleft[i] = 1\\n\\tsum1 = 0\\n\\tsum2 = 0\\n\\tdeci = True\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tsum1 += n - 1 - i + 1\\n\\t\\tsum2 += arr[i]\\n\\t\\tif zah[arr[i]] != 0:\\n\\t\\t\\tdeci = False\\n\\t\\tzah[arr[i]] += 1\\n\\t\\tif sum1 == sum2 and deci:\\n\\t\\t\\tright[i] = 1\\n\\tcoun = 0\\n\\tans = []\\n\\tfor i in range(0, n - 1):\\n\\t\\tif left[i] == 1 and right[i + 1] == 1:\\n\\t\\t\\tcoun += 1\\n\\t\\t\\tans.append((i + 1, n - (i + 1)))\\n\\tprint(coun)\\n\\tfor ele in ans:\\n\\t\\tprint(ele[0], ele[1])\\n\", \"import sys\\nfrom sys import stdin, stdout\\n\\ndef R():\\n\\treturn map(int, stdin.readline().strip().split())\\nans = []\\nfor h in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(R())\\n\\tdp1 = [0 for i in range(n)]\\n\\tdp2 = [0 for i in range(n)]\\n\\tseti = set()\\n\\tmaxi = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] in seti:\\n\\t\\t\\tbreak\\n\\t\\tseti.add(arr[i])\\n\\t\\tmaxi = max(arr[i], maxi)\\n\\t\\tif maxi == i + 1:\\n\\t\\t\\tdp1[i] = 1\\n\\tseti = set()\\n\\tmaxi = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif arr[i] in seti:\\n\\t\\t\\tbreak\\n\\t\\tseti.add(arr[i])\\n\\t\\tmaxi = max(arr[i], maxi)\\n\\t\\tif maxi == n - i:\\n\\t\\t\\tdp2[i] = 1\\n\\tt = []\\n\\ttot = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif dp1[i] == dp2[i + 1] == 1:\\n\\t\\t\\ttot += 1\\n\\t\\t\\tt.append((i + 1, n - i - 1))\\n\\tprint(tot)\\n\\tif tot:\\n\\t\\tfor i in t:\\n\\t\\t\\tprint(*i)\\n\", \"from math import *\\nmod = 1000000007\\nfor zz in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tans = []\\n\\tcs = set()\\n\\td = {}\\n\\tc = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in d:\\n\\t\\t\\tc += 1\\n\\t\\t\\td[a[i]] = 0\\n\\t\\td[a[i]] += 1\\n\\tmv = 0\\n\\tm = [0] * n\\n\\tm[-1] = a[-1]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tm[i] = max(m[i + 1], a[i])\\n\\tfor i in range(n):\\n\\t\\tmv = max(a[i], mv)\\n\\t\\tif a[i] in cs:\\n\\t\\t\\tbreak\\n\\t\\tcs.add(a[i])\\n\\t\\td[a[i]] -= 1\\n\\t\\tif d[a[i]] <= 0:\\n\\t\\t\\tc -= 1\\n\\t\\tif mv == i + 1 and c == n - i - 1 and (m[i + 1] == n - i - 1):\\n\\t\\t\\tans.append(i)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i + 1, n - i - 1)\\n\", \"from sys import stdin\\nt = int(stdin.readline())\\nfor _ in range(t):\\n\\tn = int(stdin.readline())\\n\\tarr = list(map(int, stdin.readline().rstrip().split(' ')))\\n\\tm = max(arr)\\n\\tanswer = 0\\n\\tl = [i + 1 for i in range(m)]\\n\\ts = [i + 1 for i in range(n - m)]\\n\\tflag1 = False\\n\\tflag2 = False\\n\\tif set(l) == set(arr[:m]) and set(s) == set(arr[m:]):\\n\\t\\tanswer += 1\\n\\t\\tflag1 = True\\n\\tif set(l) == set(arr[n - m:]) and set(s) == set(arr[:n - m]) and (n - m != m):\\n\\t\\tanswer += 1\\n\\t\\tflag2 = True\\n\\tprint(answer)\\n\\tif flag1:\\n\\t\\tprint(m, n - m)\\n\\tif flag2:\\n\\t\\tprint(n - m, m)\\n\", \"from sys import stdin\\nfor _ in ' ' * int(stdin.readline()):\\n\\ta = int(stdin.readline())\\n\\tz = list(map(int, stdin.readline().split()))\\n\\tk = max(z)\\n\\tk1 = a - k\\n\\tf = []\\n\\tu = [*range(1, k + 1)]\\n\\tv = [*range(1, k1 + 1)]\\n\\tif u == sorted(z[:k]) and v == sorted(z[k:]):\\n\\t\\tf += [[k, k1]]\\n\\tif v == sorted(z[:k1]) and u == sorted(z[k1:]):\\n\\t\\tf += [[k1, k]]\\n\\tif len(f) == 2:\\n\\t\\tif f[0] == f[1]:\\n\\t\\t\\tf.pop()\\n\\tprint(len(f))\\n\\tfor i in f:\\n\\t\\tprint(*i)\\n\", \"import sys\\nimport math\\nimport heapq\\nimport collections\\n\\ndef inputnum():\\n\\treturn int(input())\\n\\ndef inputnums():\\n\\treturn map(int, input().split())\\n\\ndef inputlist():\\n\\treturn list(map(int, input().split()))\\n\\ndef inputstring():\\n\\treturn [x for x in input()]\\n\\ndef inputmatrixchar(rows):\\n\\tarr2d = [[j for j in input().strip()] for i in range(rows)]\\n\\treturn arr2d\\n\\ndef inputmatrixint(rows):\\n\\tarr2d = []\\n\\tfor _ in range(rows):\\n\\t\\tarr2d.append([int(i) for i in input().split()])\\n\\treturn arr2d\\n\\ndef permutation(arr, n):\\n\\ts = set()\\n\\tmaxEle = 0\\n\\tfor i in range(n):\\n\\t\\ts.add(arr[i])\\n\\t\\tmaxEle = max(maxEle, arr[i])\\n\\tif maxEle != n:\\n\\t\\treturn False\\n\\tif len(s) == n:\\n\\t\\treturn True\\n\\treturn False\\nt = int(input())\\nfor q in range(t):\\n\\tn = inputnum()\\n\\ta = inputlist()\\n\\tcount = 0\\n\\tans1 = []\\n\\tans2 = []\\n\\ta1 = sorted(a)\\n\\tmx = a1[n - 1]\\n\\tb = a[:mx]\\n\\tc = a[mx:]\\n\\td = a[:n - mx]\\n\\te = a[n - mx:]\\n\\tif permutation(b, mx) and permutation(c, n - mx):\\n\\t\\tcount += 1\\n\\t\\tans1.append(mx)\\n\\t\\tans2.append(n - mx)\\n\\tif mx != n - mx:\\n\\t\\tif permutation(d, n - mx) and permutation(e, mx):\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans1.append(n - mx)\\n\\t\\t\\tans2.append(mx)\\n\\tprint(count)\\n\\tfor i in range(count):\\n\\t\\tprint(ans1[i], ans2[i])\\n\", \"import sys\\ninput = lambda : sys.stdin.readline().strip()\\nipnut = input\\nfor i in range(int(input())):\\n\\tn = int(ipnut())\\n\\ta = list(map(int, ipnut().split()))\\n\\tans = []\\n\\ts = {}\\n\\tma = a[0]\\n\\tf = False\\n\\tu = [0] * n\\n\\tfor j in a:\\n\\t\\tu[j - 1] += 1\\n\\tmust = 2\\n\\tan = 0\\n\\tf = False\\n\\tflag = True\\n\\tk = -1\\n\\tfor i in u:\\n\\t\\tk += 1\\n\\t\\tif must < i:\\n\\t\\t\\tf = True\\n\\t\\t\\tbreak\\n\\t\\telif flag and i <= 1:\\n\\t\\t\\tan = k\\n\\t\\t\\tflag = False\\n\\t\\tmust = i\\n\\tif f or an == n or an == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tf1 = True\\n\\tf2 = True\\n\\tt = [0] * n\\n\\tt1 = [0] * n\\n\\tfor i in range(an):\\n\\t\\tif a[i] > an or t[a[i] - 1]:\\n\\t\\t\\tf1 = False\\n\\t\\tif a[-1 - i] > an or t1[a[-1 - i] - 1]:\\n\\t\\t\\tf2 = False\\n\\t\\tt[a[i] - 1] += 1\\n\\t\\tt1[a[-1 - i] - 1] += 1\\n\\tprint(max(0, f1 + f2 - int(an == n - an)))\\n\\tif f1:\\n\\t\\tprint(an, n - an)\\n\\tif f2 and an != n - an:\\n\\t\\tprint(n - an, an)\\n\", \"t = int(input())\\nfor test in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tmin1 = [0 for i in range(n)]\\n\\tmin2 = [0 for i in range(n)]\\n\\tmax1 = [0 for i in range(n)]\\n\\tmax2 = [0 for i in range(n)]\\n\\tvisited = [False for i in range(n + 5)]\\n\\tasc = [False for i in range(n)]\\n\\tasc[0] = True\\n\\tvisited[arr[0]] = True\\n\\tfor i in range(1, n):\\n\\t\\tif visited[arr[i]]:\\n\\t\\t\\tasc[i] = False\\n\\t\\telse:\\n\\t\\t\\tvisited[arr[i]] = True\\n\\t\\t\\tasc[i] = asc[i - 1]\\n\\tvisited = [False for i in range(n + 5)]\\n\\tdesc = [False for i in range(n)]\\n\\tdesc[n - 1] = True\\n\\tvisited[arr[n - 1]] = True\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif visited[arr[i]]:\\n\\t\\t\\tdesc[i] = False\\n\\t\\telse:\\n\\t\\t\\tvisited[arr[i]] = True\\n\\t\\t\\tdesc[i] = desc[i + 1]\\n\\tmin1[0] = arr[0]\\n\\tmax1[0] = arr[0]\\n\\tfor i in range(1, n):\\n\\t\\tmin1[i] = min(min1[i - 1], arr[i])\\n\\t\\tmax1[i] = max(max1[i - 1], arr[i])\\n\\tmin2[n - 1] = arr[n - 1]\\n\\tmax2[n - 1] = arr[n - 1]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tmin2[i] = min(min2[i + 1], arr[i])\\n\\t\\tmax2[i] = max(max2[i + 1], arr[i])\\n\\tres = []\\n\\tfor i in range(n - 1):\\n\\t\\tflag1 = False\\n\\t\\tif min1[i] == 1 and max1[i] == i + 1:\\n\\t\\t\\tflag1 = True\\n\\t\\tflag2 = False\\n\\t\\tif min2[i + 1] == 1 and max2[i + 1] == n - 1 - i:\\n\\t\\t\\tflag2 = True\\n\\t\\tif flag1 and flag2 and asc[i] and desc[i + 1]:\\n\\t\\t\\tres.append([i + 1, n - 1 - i])\\n\\tprint(len(res))\\n\\tfor i in range(len(res)):\\n\\t\\tprint(res[i][0], res[i][1])\\n\", \"import os, io\\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\\ncases = int(input())\\nfor t in range(cases):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tout = 0\\n\\toutl = []\\n\\tpos = -1\\n\\tf = 0\\n\\tf1 = []\\n\\td1 = {}\\n\\tmv = 0\\n\\tc = 0\\n\\tp = 0\\n\\ta.append(a[-1])\\n\\tfor i in range(n + 1):\\n\\t\\tif a[i] in d1:\\n\\t\\t\\tif c == mv:\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\t\\tif p == 2:\\n\\t\\t\\t\\t\\tpos = i\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tf1 = [n - mv, mv]\\n\\t\\t\\t\\td1 = {}\\n\\t\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\t\\tc = 1\\n\\t\\t\\t\\tmv = a[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tp = -1\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\tc += 1\\n\\t\\t\\tmv = max(mv, a[i])\\n\\tif p == 2 and pos == n:\\n\\t\\tout += f\\n\\t\\toutl.append(f1)\\n\\tpos = -1\\n\\tf = 0\\n\\tf1 = []\\n\\td1 = {}\\n\\tmv = 0\\n\\tc = 0\\n\\tp = 0\\n\\ta = a[:-1]\\n\\ta = a[::-1]\\n\\ta.append(a[-1])\\n\\tfor i in range(n + 1):\\n\\t\\tif a[i] in d1:\\n\\t\\t\\tif c == mv:\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\t\\tif p == 2:\\n\\t\\t\\t\\t\\tpos = i\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tf1 = [mv, n - mv]\\n\\t\\t\\t\\td1 = {}\\n\\t\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\t\\tc = 1\\n\\t\\t\\t\\tmv = a[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tp = -1\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\td1[a[i]] = 1\\n\\t\\t\\tc += 1\\n\\t\\t\\tmv = max(mv, a[i])\\n\\tif p == 2 and pos == n:\\n\\t\\tif f1 not in outl:\\n\\t\\t\\toutl.append(f1)\\n\\t\\t\\tout += 1\\n\\tprint(out)\\n\\tfor (i, j) in outl:\\n\\t\\tprint(i, j)\\n\", \"import sys\\ninput = sys.stdin.readline\\nT = int(input())\\nfor _ in range(T):\\n\\tN = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tans = []\\n\\tL = set()\\n\\tS = set()\\n\\tMax = -1\\n\\tfor i in range(N):\\n\\t\\tMax = max(Max, A[i])\\n\\t\\tS.add(A[i])\\n\\t\\tif len(S) == i + 1 and i + 1 == Max:\\n\\t\\t\\tL.add(i + 1)\\n\\tS = set()\\n\\tMax = -1\\n\\tfor i in range(N):\\n\\t\\tMax = max(Max, A[-i - 1])\\n\\t\\tS.add(A[-i - 1])\\n\\t\\tif len(S) == i + 1 and i + 1 == Max:\\n\\t\\t\\tif N - i - 1 in L:\\n\\t\\t\\t\\tans.append((N - i - 1, i + 1))\\n\\tif ans:\\n\\t\\tprint(len(ans))\\n\\t\\tfor (a, b) in ans:\\n\\t\\t\\tprint(a, b)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tcount = 1\\n\\ts1 = set([arr[0]])\\n\\tmax1 = arr[0]\\n\\td1 = {}\\n\\tif max1 == 1:\\n\\t\\td1[1] = 1\\n\\tfor i in range(1, n):\\n\\t\\tmax1 = max(max1, arr[i])\\n\\t\\ts1.add(arr[i])\\n\\t\\tcount += 1\\n\\t\\tif len(s1) == max1 and count == max1:\\n\\t\\t\\td1[count] = 1\\n\\td2 = {}\\n\\ts2 = set([arr[n - 1]])\\n\\tmax2 = arr[n - 1]\\n\\tcount = 1\\n\\tif max2 == 1:\\n\\t\\td2[1] = 1\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tmax2 = max(max2, arr[i])\\n\\t\\ts2.add(arr[i])\\n\\t\\tcount += 1\\n\\t\\tif len(s2) == max2 and count == max2:\\n\\t\\t\\td2[max2] = 1\\n\\tdicts = []\\n\\tfor i in d1:\\n\\t\\tif n - i in d2:\\n\\t\\t\\tdicts.append([i, n - i])\\n\\tprint(len(dicts))\\n\\tfor i in dicts:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor i in range(0, t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tnumber = sum(a)\\n\\tans1 = []\\n\\tans2 = []\\n\\tk = 0\\n\\tflag = [False] * n\\n\\tnum = 0\\n\\tans = 0\\n\\tfor j in range(0, n):\\n\\t\\tif flag[a[j] - 1]:\\n\\t\\t\\tbreak\\n\\t\\tflag[a[j] - 1] = True\\n\\t\\tnum += 1\\n\\t\\twhile flag[k] and k < n:\\n\\t\\t\\tk += 1\\n\\t\\tif k == num and num != 0:\\n\\t\\t\\tif ans != 0:\\n\\t\\t\\t\\tif ans1[ans - 1] != num:\\n\\t\\t\\t\\t\\tans1.append(k)\\n\\t\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans1.append(k)\\n\\t\\t\\t\\tans += 1\\n\\tk = 0\\n\\tflag = [False] * n\\n\\tnum = 0\\n\\ta.reverse()\\n\\tans = 0\\n\\tfor j in range(0, n):\\n\\t\\tif flag[a[j] - 1]:\\n\\t\\t\\tbreak\\n\\t\\tflag[a[j] - 1] = True\\n\\t\\tnum += 1\\n\\t\\twhile flag[k] and k < n:\\n\\t\\t\\tk += 1\\n\\t\\tif k == num and num != 0:\\n\\t\\t\\tif ans != 0:\\n\\t\\t\\t\\tif ans2[ans - 1] != n - num:\\n\\t\\t\\t\\t\\tans2.append(n - k)\\n\\t\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans2.append(n - k)\\n\\t\\t\\t\\tans += 1\\n\\tlg1 = len(ans1)\\n\\tlg2 = len(ans2)\\n\\tans2.reverse()\\n\\tansarr = []\\n\\tans = 0\\n\\tfor j in range(0, lg1):\\n\\t\\tl = 0\\n\\t\\tr = lg2 - 1\\n\\t\\tif lg2 == 0:\\n\\t\\t\\tbreak\\n\\t\\twhile r - l > 1:\\n\\t\\t\\tm = (r + l) // 2\\n\\t\\t\\tif ans2[m] > ans1[j]:\\n\\t\\t\\t\\tr = m\\n\\t\\t\\telse:\\n\\t\\t\\t\\tl = m\\n\\t\\tif ans2[l] == ans1[j]:\\n\\t\\t\\tansarr.append([ans1[j], n - ans1[j]])\\n\\t\\t\\tans += 1\\n\\t\\telif ans2[r] == ans1[j]:\\n\\t\\t\\tansarr.append([ans1[j], n - ans1[j]])\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\n\\tfor j in range(0, ans):\\n\\t\\tprint(*ansarr[j])\\n\", \"def perm(l, k):\\n\\td = set(l)\\n\\tif len(d) == k:\\n\\t\\tif max(d) == k:\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\telse:\\n\\t\\treturn False\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\td = max(l)\\n\\tans = []\\n\\tif n - d != d:\\n\\t\\tif perm(l[:d], d) and perm(l[d:], n - d):\\n\\t\\t\\tans.append([d, n - d])\\n\\t\\tif perm(l[n - d:], d) and perm(l[:n - d], n - d):\\n\\t\\t\\tans.append([n - d, d])\\n\\telif perm(l[:d], d) and perm(l[d:], n - d):\\n\\t\\tans.append([d, n - d])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i, sep=' ')\\n\", \"import sys\\nfrom collections import defaultdict\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tlis = list(map(int, input().split()))\\n\\tx = max(lis) + 1\\n\\tl = [0] * x\\n\\tfor i in lis:\\n\\t\\tl[i] += 1\\n\\tf = 0\\n\\tj = x - 1\\n\\tfor i in range(1, x):\\n\\t\\tif f == 0:\\n\\t\\t\\tif l[i] == 0 or l[i] > 2:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif l[i] == 1:\\n\\t\\t\\t\\tj = i - 1\\n\\t\\t\\t\\tf = 1\\n\\t\\telif l[i] != 1:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tres = set()\\n\\t\\td = defaultdict(list)\\n\\t\\tfor i in range(n):\\n\\t\\t\\td[lis[i]].append(i)\\n\\t\\ts = set()\\n\\t\\tfor i in d:\\n\\t\\t\\ts.add(d[i][0])\\n\\t\\tif list(sorted(s)) == list(range(min(s), min(s) + x - 1)):\\n\\t\\t\\tres.add((x - 1, n - x + 1))\\n\\t\\ts = set()\\n\\t\\tfor i in d:\\n\\t\\t\\tif len(d[i]) == 2:\\n\\t\\t\\t\\ts.add(d[i][1])\\n\\t\\t\\telse:\\n\\t\\t\\t\\ts.add(d[i][0])\\n\\t\\tif list(sorted(s)) == list(range(min(s), min(s) + x - 1)):\\n\\t\\t\\tres.add((n - x + 1, x - 1))\\n\\t\\tprint(len(res))\\n\\t\\tfor i in res:\\n\\t\\t\\tprint(*i)\\n\\t\\tcontinue\\n\\tprint(0)\\n\", \"from collections import defaultdict\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td = {}\\n\\td = defaultdict(lambda : 0, d)\\n\\tans = []\\n\\ti = 0\\n\\ts = 0\\n\\tflag = 0\\n\\tcomp = 0\\n\\twhile i < n - 1:\\n\\t\\tif d[a[i]] == 0:\\n\\t\\t\\td[a[i]] = 1\\n\\t\\t\\ts += a[i]\\n\\t\\telse:\\n\\t\\t\\ts1 = i * (i + 1) // 2\\n\\t\\t\\tif s == s1:\\n\\t\\t\\t\\tcomp = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 1\\n\\t\\ti += 1\\n\\tif flag == 1:\\n\\t\\tflag = 2\\n\\telse:\\n\\t\\ts = f = 0\\n\\t\\td = {}\\n\\t\\td = defaultdict(lambda : 0, d)\\n\\t\\tlength = n - i\\n\\t\\ts1 = length * (length + 1) // 2\\n\\t\\twhile i < n:\\n\\t\\t\\tif d[a[i]] == 0:\\n\\t\\t\\t\\td[a[i]] = 1\\n\\t\\t\\t\\ts += a[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ti += 1\\n\\t\\tif f == 0:\\n\\t\\t\\tif s == s1:\\n\\t\\t\\t\\tans.append((n - length, length))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 2\\n\\t\\telse:\\n\\t\\t\\tflag = 2\\n\\td = {}\\n\\td = defaultdict(lambda : 0, d)\\n\\ti = n - 1\\n\\ts = 0\\n\\tflag1 = 0\\n\\tcomp = 0\\n\\twhile i > 0:\\n\\t\\tif d[a[i]] == 0:\\n\\t\\t\\td[a[i]] = 1\\n\\t\\t\\ts += a[i]\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\t\\t\\ts1 = (n - i) * (n - i + 1) // 2\\n\\t\\t\\tif s == s1:\\n\\t\\t\\t\\tcomp = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\ti -= 1\\n\\tif flag1 != 1:\\n\\t\\tif comp != 0:\\n\\t\\t\\ti -= 1\\n\\t\\ts = f = 0\\n\\t\\td = {}\\n\\t\\td = defaultdict(lambda : 0, d)\\n\\t\\tlength = i + 1\\n\\t\\ts1 = length * (length + 1) // 2\\n\\t\\twhile i >= 0:\\n\\t\\t\\tif d[a[i]] == 0:\\n\\t\\t\\t\\td[a[i]] = 1\\n\\t\\t\\t\\ts += a[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ti -= 1\\n\\t\\tif f == 0:\\n\\t\\t\\tif s == s1:\\n\\t\\t\\t\\tans.append((length, n - length))\\n\\t\\t\\t\\tans = set(ans)\\n\\t\\t\\t\\tprint(len(ans))\\n\\t\\t\\t\\tfor i in ans:\\n\\t\\t\\t\\t\\tprint(i[0], i[1])\\n\\t\\t\\telif flag != 2:\\n\\t\\t\\t\\tans = set(ans)\\n\\t\\t\\t\\tprint(len(ans))\\n\\t\\t\\t\\tfor i in ans:\\n\\t\\t\\t\\t\\tprint(i[0], i[1])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telif flag1 == 1 and flag == 2:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tans = set(ans)\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i[0], i[1])\\n\", \"from sys import stdin\\ninput = stdin.buffer.readline\\n\\ndef f(i, pref):\\n\\tif pref[i] == (i + 1) * (i + 2) // 2 and pref[-1] - pref[i] == (n - i - 1) * (n - i) // 2:\\n\\t\\treturn True\\n\\treturn False\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\t(*a,) = map(int, input().split())\\n\\td = {}\\n\\tflag = 0\\n\\t(l, r) = (0, n - 1)\\n\\tfor i in range(n):\\n\\t\\tif a[i] not in d:\\n\\t\\t\\td[a[i]] = [i]\\n\\t\\telse:\\n\\t\\t\\tif len(d[a[i]]) == 2:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\td[a[i]].append(i)\\n\\t\\t\\tl = max(l, d[a[i]][0])\\n\\t\\t\\tr = min(r, d[a[i]][1])\\n\\tif flag or r < l:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tpref = [a[0]]\\n\\tfor i in range(1, n):\\n\\t\\tpref.append(pref[-1] + a[i])\\n\\tans = []\\n\\tfor i in range(l, r):\\n\\t\\tif f(i, pref):\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor i in range(0, t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tlen_p1 = len(set(a))\\n\\tlen_p2 = n - len_p1\\n\\tif len_p1 + len_p2 != n or len_p1 == n or len_p2 == n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tlength = []\\n\\t\\tans = 0\\n\\t\\tf1 = 0\\n\\t\\tif len_p2 == len_p1:\\n\\t\\t\\tj = 1\\n\\t\\telse:\\n\\t\\t\\tj = 2\\n\\t\\tfor p in range(0, j):\\n\\t\\t\\tif p == 0:\\n\\t\\t\\t\\tk = len_p2 - 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tk = len_p1 - 1\\n\\t\\t\\tp1 = set(a[:k + 1])\\n\\t\\t\\tp2 = set(a[k + 1:])\\n\\t\\t\\tif len(p1) == k + 1 and len(p2) == n - (k + 1):\\n\\t\\t\\t\\tif max(p1) == k + 1 and max(p2) == n - (k + 1):\\n\\t\\t\\t\\t\\tf1 = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif f1 == 1:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tlength.append(k + 1)\\n\\t\\t\\t\\tlength.append(n - (k + 1))\\n\\t\\tprint(ans)\\n\\t\\tif ans > 0:\\n\\t\\t\\tfor k in range(0, ans):\\n\\t\\t\\t\\tp = 2 * k\\n\\t\\t\\t\\tprint(length[p], length[p + 1])\\n\", \"T = int(input())\\nfor _ in range(0, T):\\n\\tn = int(input())\\n\\ts = [int(x1) for x1 in input().split()]\\n\\tc = 0\\n\\tkk11 = 0\\n\\tkk12 = 0\\n\\tkk21 = 0\\n\\tkk22 = 0\\n\\tln1 = max(s)\\n\\tln2 = len(s) - ln1\\n\\tpos11 = [0] * (n + 1)\\n\\tpos12 = [0] * (n + 1)\\n\\tfor i in range(ln1):\\n\\t\\tpos11[s[i]] = 1\\n\\tfor i in range(ln1, len(s)):\\n\\t\\tpos12[s[i]] = 1\\n\\tpos11 = pos11[1:ln1 + 1]\\n\\tpos12 = pos12[1:ln2 + 1]\\n\\tif len(set(pos11)) == 1 and len(set(pos12)) == 1 and (pos11[0] == 1) and (pos12[0] == 1):\\n\\t\\tkk11 = ln1\\n\\t\\tkk12 = ln2\\n\\t\\tc += 1\\n\\tpos21 = [0] * (n + 1)\\n\\tpos22 = [0] * (n + 1)\\n\\tfor i in range(ln2):\\n\\t\\tpos21[s[i]] = 1\\n\\tfor i in range(ln2, len(s)):\\n\\t\\tpos22[s[i]] = 1\\n\\tpos21 = pos21[1:ln2 + 1]\\n\\tpos22 = pos22[1:ln1 + 1]\\n\\tif len(set(pos21)) == 1 and len(set(pos22)) == 1 and (pos21[0] == 1) and (pos22[0] == 1) and (ln2 != kk11 or ln1 != kk12):\\n\\t\\tkk21 = ln2\\n\\t\\tkk22 = ln1\\n\\t\\tc += 1\\n\\tprint(c)\\n\\tif c > 0:\\n\\t\\tif kk11 > 0 and kk12 > 0:\\n\\t\\t\\tprint(kk11, kk12)\\n\\t\\telse:\\n\\t\\t\\tprint(kk21, kk22)\\n\\tif c > 1:\\n\\t\\tprint(kk21, kk22)\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\nfrom collections import Counter as C\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tcnts = C(a)\\n\\tfor i in range(1, n + 3):\\n\\t\\tif cnts[i] < 2:\\n\\t\\t\\tp1Len = i - 1\\n\\t\\t\\tbreak\\n\\tp2Len = n - p1Len\\n\\tans = []\\n\\tif p1Len > 0 and p2Len > 0:\\n\\t\\tif set(a[:p1Len]) == set(range(1, p1Len + 1)) and set(a[p1Len:]) == set(range(1, p2Len + 1)):\\n\\t\\t\\tans.append([p1Len, p2Len])\\n\\t\\tif p1Len != p2Len:\\n\\t\\t\\tif set(a[:p2Len]) == set(range(1, p2Len + 1)) and set(a[p2Len:]) == set(range(1, p1Len + 1)):\\n\\t\\t\\t\\tans.append([p2Len, p1Len])\\n\\tprint(len(ans))\\n\\tfor (l1, l2) in ans:\\n\\t\\tprint('{} {}'.format(l1, l2))\\n\", \"def solve():\\n\\tn = int(input())\\n\\tarr = [int(v) for v in input().split()]\\n\\tst = set()\\n\\tans = set()\\n\\tfor i in range(n):\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tlfst = set(arr[:i])\\n\\t\\t\\trfst = set(arr[i:])\\n\\t\\t\\tif set(range(1, i + 1)) == lfst and set(range(1, n - i + 1)) == rfst:\\n\\t\\t\\t\\tans.add((i, n - i))\\n\\t\\t\\tbreak\\n\\t\\tst.add(arr[i])\\n\\tst = set()\\n\\tfor i in reversed(range(n)):\\n\\t\\tif arr[i] in st:\\n\\t\\t\\tlfst = set(arr[:i + 1])\\n\\t\\t\\trfst = set(arr[i:])\\n\\t\\t\\tif lfst == set(range(1, i + 2)) and rfst == set(range(1, n - i)):\\n\\t\\t\\t\\tans.add((i + 1, n - i - 1))\\n\\t\\t\\tbreak\\n\\t\\tst.add(arr[i])\\n\\tprint(len(ans))\\n\\tif len(ans):\\n\\t\\tprint('\\\\n'.join(['%s %s' % (u, v) for (u, v) in ans]))\\nt = int(input())\\nfor _ in range(t):\\n\\tsolve()\\n\", \"from math import factorial\\nfrom collections import Counter, defaultdict\\nfrom heapq import heapify, heappop, heappush\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef RL():\\n\\treturn map(int, sys.stdin.readline().rstrip().split())\\n\\ndef N():\\n\\treturn int(input())\\n\\ndef comb(n, m):\\n\\treturn factorial(n) / (factorial(m) * factorial(n - m)) if n >= m else 0\\n\\ndef perm(n, m):\\n\\treturn factorial(n) // factorial(n - m) if n >= m else 0\\n\\ndef mdis(x1, y1, x2, y2):\\n\\treturn abs(x1 - x2) + abs(y1 - y2)\\nmod = 1000000007\\nINF = float('inf')\\n\\ndef main():\\n\\tfor _ in range(N()):\\n\\t\\tn = N()\\n\\t\\tarr = list(RL())\\n\\t\\tdic = defaultdict(int)\\n\\t\\tdic1 = defaultdict(int)\\n\\t\\tres = []\\n\\t\\tfor i in range(n):\\n\\t\\t\\tdic[arr[i]] += 1\\n\\t\\t\\tif dic[arr[i]] > 1:\\n\\t\\t\\t\\tres.append(i)\\n\\t\\t\\t\\tbreak\\n\\t\\tdic = defaultdict(int)\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tdic[arr[i]] += 1\\n\\t\\t\\tif dic[arr[i]] > 1:\\n\\t\\t\\t\\tres.append(i + 1)\\n\\t\\t\\t\\tbreak\\n\\t\\tret = set()\\n\\t\\tfor i in res:\\n\\t\\t\\tif set(arr[:i]) == set([i for i in range(1, len(arr[:i]) + 1)]):\\n\\t\\t\\t\\tif set(arr[i:]) == set([i for i in range(1, len(arr[i:]) + 1)]):\\n\\t\\t\\t\\t\\tret.add((i, len(arr) - i))\\n\\t\\tprint(len(ret))\\n\\t\\tfor i in ret:\\n\\t\\t\\tprint(*i)\\nmain()\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\t(max1, min1, max2, min2) = ([], [], [], [])\\n\\t(dict_1, dict_2) = ([], [])\\n\\tfor i in range(n):\\n\\t\\tmax1.append(0)\\n\\t\\tmax2.append(0)\\n\\t\\tmin1.append(0)\\n\\t\\tmin2.append(0)\\n\\t\\tdict_1.append(0)\\n\\t\\tdict_2.append(0)\\n\\tmax1[0] = a[0]\\n\\tmin1[0] = a[0]\\n\\tmax2[n - 1] = a[n - 1]\\n\\tmin2[n - 1] = a[n - 1]\\n\\tdict = {}\\n\\tdict[a[0]] = 1\\n\\tdict_1[0] = 1\\n\\tfor i in range(1, n):\\n\\t\\tif dict.get(a[i]) is None:\\n\\t\\t\\tdict[a[i]] = 1\\n\\t\\tmax1[i] = max(max1[i - 1], a[i])\\n\\t\\tmin1[i] = min(min1[i - 1], a[i])\\n\\t\\tdict_1[i] = len(dict)\\n\\tdict = {}\\n\\tdict[a[n - 1]] = 1\\n\\tdict_2[n - 1] = 1\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif dict.get(a[i]) is None:\\n\\t\\t\\tdict[a[i]] = 1\\n\\t\\tmax2[i] = max(max2[i + 1], a[i])\\n\\t\\tmin2[i] = min(min2[i + 1], a[i])\\n\\t\\tdict_2[i] = len(dict)\\n\\tcount = 0\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\ta = i + 1\\n\\t\\tb = n - a\\n\\t\\tif dict_1[i] == a and dict_2[i + 1] == b and (min1[i] == 1) and (max1[i] == a) and (max2[i + 1] == b) and (min2[i + 1] == 1):\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append((a, b))\\n\\tprint(count)\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(ans[i][0], ans[i][1])\\n\", \"def judge_list(num_list, max_num):\\n\\tl = len(num_list)\\n\\ttemp = [0] * (max_num + 1)\\n\\ttemp_max = max(num_list)\\n\\tif temp_max != l:\\n\\t\\treturn False\\n\\tfor i in range(0, l):\\n\\t\\tif temp[num_list[i]] == 0:\\n\\t\\t\\ttemp[num_list[i]] = 1\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn True\\nn = int(input())\\nfor i in range(n):\\n\\tori_len = int(input())\\n\\tori_list = [int(q) for q in input().split()]\\n\\tmax_num = max(ori_list)\\n\\tmax_tags = [m for (m, n) in enumerate(ori_list) if n == max_num]\\n\\tres_num = 0\\n\\tres_mark_list = []\\n\\tif len(max_tags) == 1 and max_num < ori_len:\\n\\t\\tif max_tags[0] + 1 <= max_num:\\n\\t\\t\\tif judge_list(ori_list[0:max_num], max_num) and judge_list(ori_list[max_num:ori_len], max_num):\\n\\t\\t\\t\\tres_num += 1\\n\\t\\t\\t\\tres_mark_list.append(max_num)\\n\\t\\tif ori_len - max_tags[0] - 1 <= max_num:\\n\\t\\t\\tif judge_list(ori_list[0:ori_len - max_num], max_num) and judge_list(ori_list[ori_len - max_num:ori_len], max_num):\\n\\t\\t\\t\\tres_num += 1\\n\\t\\t\\t\\tres_mark_list.append(ori_len - max_num)\\n\\telif len(max_tags) == 2 and max_num * 2 == ori_len:\\n\\t\\tif judge_list(ori_list[0:max_num], max_num) and judge_list(ori_list[max_num:ori_len], max_num):\\n\\t\\t\\tres_num += 1\\n\\t\\t\\tres_mark_list.append(max_num)\\n\\tprint(res_num)\\n\\tfor m in res_mark_list[::-1]:\\n\\t\\tprint(str(m) + ' ' + str(ori_len - m))\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tha = [0] * (n + 1)\\n\\tha2 = [0] * (n + 1)\\n\\ti = 0\\n\\ts = 0\\n\\tma1 = 0\\n\\tma2 = 0\\n\\tb = 0\\n\\twhile i < n:\\n\\t\\tif s == 0 and ha[arr[i]] == 0:\\n\\t\\t\\tha[arr[i]] = 1\\n\\t\\t\\tma1 = max(ma1, arr[i])\\n\\t\\telif s == 0 and ha[arr[i]] == 1:\\n\\t\\t\\ts = 1\\n\\t\\t\\tfor j in range(1, ma1 + 1):\\n\\t\\t\\t\\tif ha[j] != 1:\\n\\t\\t\\t\\t\\tb = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\ti -= 1\\n\\t\\t\\tif b == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\telif s == 1 and ha2[arr[i]] == 0:\\n\\t\\t\\tha2[arr[i]] = 1\\n\\t\\t\\tma2 = max(ma2, arr[i])\\n\\t\\telif s == 1 and ha2[arr[i]] == 1:\\n\\t\\t\\tb = 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tfor i in range(1, ma2 + 1):\\n\\t\\tif ha2[i] != 1:\\n\\t\\t\\tb = 1\\n\\t\\t\\tbreak\\n\\tha = [0] * (n + 1)\\n\\tha2 = [0] * (n + 1)\\n\\tma3 = 0\\n\\tma4 = 0\\n\\ti = 0\\n\\ts = 0\\n\\tb2 = 0\\n\\tarr.reverse()\\n\\twhile i < n:\\n\\t\\tif s == 0 and ha[arr[i]] == 0:\\n\\t\\t\\tha[arr[i]] = 1\\n\\t\\t\\tma3 = max(ma3, arr[i])\\n\\t\\telif s == 0 and ha[arr[i]] == 1:\\n\\t\\t\\ts = 1\\n\\t\\t\\tfor j in range(1, ma3 + 1):\\n\\t\\t\\t\\tif ha[j] != 1:\\n\\t\\t\\t\\t\\tb2 = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\ti -= 1\\n\\t\\t\\tif b2 == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\telif s == 1 and ha2[arr[i]] == 0:\\n\\t\\t\\tha2[arr[i]] = 1\\n\\t\\t\\tma4 = max(ma4, arr[i])\\n\\t\\telif s == 1 and ha2[arr[i]] == 1:\\n\\t\\t\\tb2 = 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tfor i in range(1, ma4 + 1):\\n\\t\\tif ha2[i] != 1:\\n\\t\\t\\tb2 = 1\\n\\t\\t\\tbreak\\n\\tif b == 1 and b2 == 1:\\n\\t\\tprint(0)\\n\\telif b == 0 and b2 == 0:\\n\\t\\tif ma1 == ma4 and ma2 == ma3:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(ma1, ma2)\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(ma1, ma2)\\n\\t\\t\\tprint(ma4, ma3)\\n\\telif b == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(ma4, ma3)\\n\\telif b2 == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(ma1, ma2)\\n\", \"def solution():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\tarr = [int(i) for i in input().split()]\\n\\t\\ttemp = sorted(arr)\\n\\t\\tcurrent = 0\\n\\t\\twhile current < n - 1:\\n\\t\\t\\tif temp[current] == temp[current + 1]:\\n\\t\\t\\t\\tcurrent += 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\tlength = current // 2\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tlength = n // 2\\n\\t\\torigin = {i for i in range(1, length + 1)}\\n\\t\\tmid = set(temp[current:])\\n\\t\\tif len(mid) != n - length * 2 or mid != {i for i in range(length + 1, n - length + 1)}:\\n\\t\\t\\tprint(0)\\n\\t\\t\\tcontinue\\n\\t\\tleft = set(arr[:length])\\n\\t\\tright = set(arr[n - length:])\\n\\t\\tcounter = 0\\n\\t\\tif left == origin and length != n - length:\\n\\t\\t\\tcounter += 1\\n\\t\\tif right == origin:\\n\\t\\t\\tcounter += 1\\n\\t\\tprint(counter)\\n\\t\\tif counter == 0:\\n\\t\\t\\tcontinue\\n\\t\\tif left == origin and length != n - length:\\n\\t\\t\\tprint(length, n - length)\\n\\t\\tif origin == right:\\n\\t\\t\\tprint(n - length, length)\\nsolution()\\n\", \"import sys\\nfrom functools import lru_cache, cmp_to_key\\nfrom heapq import merge, heapify, heappop, heappush\\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\\nfrom collections import defaultdict as dd, deque, Counter as c\\nfrom itertools import combinations as comb, permutations as perm\\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\\nmod = pow(10, 9) + 7\\nmod2 = 998244353\\n\\ndef data():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef out(var):\\n\\tsys.stdout.write(str(var))\\n\\ndef outln(var):\\n\\tsys.stdout.write(str(var) + '\\\\n')\\n\\ndef l():\\n\\treturn list(sp())\\n\\ndef sl():\\n\\treturn list(ssp())\\n\\ndef sp():\\n\\treturn map(int, data().split())\\n\\ndef ssp():\\n\\treturn map(str, data().split())\\n\\ndef l1d(n, val=0):\\n\\treturn [val for i in range(n)]\\n\\ndef l2d(n, m, val=0):\\n\\treturn [l1d(n, val) for j in range(m)]\\nfor _ in range(int(data())):\\n\\tn = int(data())\\n\\tarr = l()\\n\\tind = set()\\n\\ts = set()\\n\\tm = arr[0]\\n\\tfor i in range(n):\\n\\t\\tif arr[i] in s:\\n\\t\\t\\tbreak\\n\\t\\ts.add(arr[i])\\n\\t\\tm = max(arr[i], m)\\n\\t\\tif len(s) == m:\\n\\t\\t\\tind.add(i)\\n\\trevind = set()\\n\\ts = set()\\n\\tm = arr[n - 1]\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif arr[i] in s:\\n\\t\\t\\tbreak\\n\\t\\ts.add(arr[i])\\n\\t\\tm = max(arr[i], m)\\n\\t\\tif len(s) == m:\\n\\t\\t\\trevind.add(i)\\n\\tanswer = 0\\n\\tresult = []\\n\\tfor i in ind:\\n\\t\\tif i + 1 in revind:\\n\\t\\t\\tanswer += 1\\n\\t\\t\\tresult.append((i + 1, n - i - 1))\\n\\toutln(answer)\\n\\tfor i in result:\\n\\t\\tfor j in i:\\n\\t\\t\\tout(str(j) + ' ')\\n\\t\\toutln('')\\n\", \"from sys import stdin, gettrace\\nif not gettrace():\\n\\n\\tdef input():\\n\\t\\treturn next(stdin)[:-1]\\n\\ndef main():\\n\\n\\tdef solve():\\n\\t\\tn = int(input())\\n\\t\\taa = [int(a) for a in input().split()]\\n\\t\\tcounts = [0] * (n + 1)\\n\\t\\tmx = 0\\n\\t\\tfor a in aa:\\n\\t\\t\\tcounts[a] += 1\\n\\t\\t\\tmx = max(a, mx)\\n\\t\\tif mx == n:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\ttwocounts = 0\\n\\t\\tmxtwo = 0\\n\\t\\tfor (i, c) in enumerate(counts[1:mx + 1], 1):\\n\\t\\t\\tif c > 2 or c == 0:\\n\\t\\t\\t\\tprint(0)\\n\\t\\t\\t\\treturn\\n\\t\\t\\tif c == 2:\\n\\t\\t\\t\\ttwocounts += 1\\n\\t\\t\\t\\tmxtwo = max(mxtwo, i)\\n\\t\\tif mxtwo != twocounts:\\n\\t\\t\\tprint(0)\\n\\t\\t\\treturn\\n\\t\\tfound = [0] * (mxtwo + 1)\\n\\t\\tfor a in aa[:mxtwo]:\\n\\t\\t\\tif a > mxtwo:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tfound[a] += 1\\n\\t\\tstart = all(map(lambda f: f == 1, found[1:]))\\n\\t\\tfound = [0] * (mxtwo + 1)\\n\\t\\tfor a in aa[-1:-mxtwo - 1:-1]:\\n\\t\\t\\tif a > mxtwo:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tfound[a] += 1\\n\\t\\tend = all(map(lambda f: f == 1, found[1:]))\\n\\t\\tif mxtwo == n - mxtwo:\\n\\t\\t\\tend = False\\n\\t\\tif start and end:\\n\\t\\t\\tprint(2)\\n\\t\\telif start or end:\\n\\t\\t\\tprint(1)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\t\\tif start:\\n\\t\\t\\tprint(mxtwo, n - mxtwo)\\n\\t\\tif end:\\n\\t\\t\\tprint(n - mxtwo, mxtwo)\\n\\tq = int(input())\\n\\tfor _ in range(q):\\n\\t\\tsolve()\\nmain()\\n\", \"def fun(lst, ele, n):\\n\\tdic1 = {}\\n\\tfor j in range(1, ele + 1):\\n\\t\\tdic1[j] = 0\\n\\te = 0\\n\\tfor j in range(ele):\\n\\t\\tif lst[j] not in dic1:\\n\\t\\t\\te += 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tdic1[lst[j]] += 1\\n\\tfor j in dic1.keys():\\n\\t\\tif dic1[j] != 1:\\n\\t\\t\\te += 1\\n\\t\\t\\tbreak\\n\\tdic1 = {}\\n\\tfor j in range(1, n - ele + 1):\\n\\t\\tdic1[j] = 0\\n\\tfor j in range(ele, n):\\n\\t\\tif lst[j] not in dic1:\\n\\t\\t\\te += 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tdic1[lst[j]] += 1\\n\\tfor j in dic1.keys():\\n\\t\\tif dic1[j] != 1:\\n\\t\\t\\te += 1\\n\\t\\t\\tbreak\\n\\tif e == 0:\\n\\t\\treturn 1\\n\\treturn 0\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tlst = list(map(int, input().split()))\\n\\tma = max(lst)\\n\\ts = set()\\n\\tif fun(lst, ma, n) == 1:\\n\\t\\ts.add((ma, n - ma))\\n\\tif fun(lst, n - ma, n) == 1:\\n\\t\\ts.add((n - ma, ma))\\n\\tl = len(s)\\n\\tprint(l)\\n\\tfor j in s:\\n\\t\\tprint(j[0], j[1])\\n\", \"from sys import stdin, stdout\\ninput = stdin.readline\\nprint = stdout.write\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tx = max(a)\\n\\tans = []\\n\\tfor i in range(2):\\n\\t\\tif (len(set(a[:x])) == x and x * (x + 1) // 2 == sum(a[:x])) and (len(set(a[x:])) == n - x and (n - x) * (n - x + 1) // 2 == sum(a[x:])):\\n\\t\\t\\tans.append([x, n - x])\\n\\t\\tif x == n - x:\\n\\t\\t\\tbreak\\n\\t\\tx = n - x\\n\\tprint(str(len(ans)) + '\\\\n')\\n\\tfor i in range(len(ans)):\\n\\t\\tfor j in range(len(ans[i])):\\n\\t\\t\\tprint(str(ans[i][j]) + ' ')\\n\\t\\tprint('\\\\n')\\n\", \"y = int(input())\\nfor i in range(y):\\n\\tans = []\\n\\ta = int(input())\\n\\tal = input().split()\\n\\tm = list(map(int, al))\\n\\tl = [0] * a\\n\\tmas = 0\\n\\tfor j in range(a):\\n\\t\\tif mas < m[j]:\\n\\t\\t\\tmas = m[j]\\n\\t\\tif l[m[j]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telif l[m[j]] == 0:\\n\\t\\t\\tl[m[j]] = 1\\n\\ts = sum(l)\\n\\tl = [0] * a\\n\\tif s == mas:\\n\\t\\tmas1 = 0\\n\\t\\tfor k in range(j, a):\\n\\t\\t\\tif mas1 < m[k]:\\n\\t\\t\\t\\tmas1 = m[k]\\n\\t\\t\\tif l[m[k]] == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif l[m[k]] == 0:\\n\\t\\t\\t\\tl[m[k]] = 1\\n\\t\\ts = sum(l)\\n\\t\\tif s == mas1 and mas + mas1 == a:\\n\\t\\t\\tans.append([mas, mas1])\\n\\tm = m[::-1]\\n\\tl = [0] * a\\n\\tmas = 0\\n\\tfor j in range(a):\\n\\t\\tif mas < m[j]:\\n\\t\\t\\tmas = m[j]\\n\\t\\tif l[m[j]] == 1:\\n\\t\\t\\tbreak\\n\\t\\telif l[m[j]] == 0:\\n\\t\\t\\tl[m[j]] = 1\\n\\ts = sum(l)\\n\\tl = [0] * a\\n\\tif s == mas:\\n\\t\\tmas1 = 0\\n\\t\\tfor k in range(j, a):\\n\\t\\t\\tif mas1 < m[k]:\\n\\t\\t\\t\\tmas1 = m[k]\\n\\t\\t\\tif l[m[k]] == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif l[m[k]] == 0:\\n\\t\\t\\t\\tl[m[k]] = 1\\n\\t\\ts = sum(l)\\n\\t\\tif s == mas1 and mas + mas1 == a:\\n\\t\\t\\tif len(ans) == 0:\\n\\t\\t\\t\\tans.append([mas1, mas])\\n\\t\\t\\telif len(ans) == 1:\\n\\t\\t\\t\\tif ans[0] != [mas1, mas]:\\n\\t\\t\\t\\t\\tans.append([mas1, mas])\\n\\tprint(len(ans))\\n\\tfor bv in ans:\\n\\t\\tprint(bv[0], bv[1])\\n\", \"import sys\\ninput = sys.stdin.readline\\nQ = int(input())\\nQuery = []\\nfor _ in range(Q):\\n\\tN = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tQuery.append((N, A))\\nfor (N, A) in Query:\\n\\tleftOK = [True] * (N + 1)\\n\\talready = set()\\n\\tMAX = 0\\n\\tfor (i, a) in enumerate(A):\\n\\t\\tif a in already:\\n\\t\\t\\tok = False\\n\\t\\telse:\\n\\t\\t\\talready.add(a)\\n\\t\\t\\tMAX = max(MAX, a)\\n\\t\\t\\tif len(already) == i + 1 and MAX == i + 1:\\n\\t\\t\\t\\tok = True\\n\\t\\t\\telse:\\n\\t\\t\\t\\tok = False\\n\\t\\tleftOK[i + 1] = ok\\n\\trightOK = [True] * (N + 1)\\n\\talready = set()\\n\\tMAX = 0\\n\\tfor i in reversed(range(N)):\\n\\t\\ta = A[i]\\n\\t\\tif a in already:\\n\\t\\t\\tok = False\\n\\t\\telse:\\n\\t\\t\\talready.add(a)\\n\\t\\t\\tMAX = max(MAX, a)\\n\\t\\t\\tif len(already) == MAX and MAX == N - i:\\n\\t\\t\\t\\tok = True\\n\\t\\t\\telse:\\n\\t\\t\\t\\tok = False\\n\\t\\trightOK[i] = ok\\n\\tans = []\\n\\tfor n in range(1, N):\\n\\t\\tif leftOK[n] and rightOK[n]:\\n\\t\\t\\tans.append(str(n) + ' ' + str(N - n))\\n\\tprint(len(ans))\\n\\tprint('\\\\n'.join(ans))\\n\", \"from bisect import bisect_left as bl, bisect_right as br, insort\\nimport sys\\nimport heapq\\nfrom collections import defaultdict as dd, deque\\n\\ndef data():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mdata():\\n\\treturn map(int, data().split())\\nmod = int(1000000000.0 + 7)\\nfor t in range(int(data())):\\n\\t(n,) = mdata()\\n\\tA = list(mdata())\\n\\tdp1 = [0] * n\\n\\tdp2 = [0] * n\\n\\tm1 = 0\\n\\tm2 = 0\\n\\ts1 = set()\\n\\ts2 = set()\\n\\tfor i in range(n):\\n\\t\\ts1.add(A[i])\\n\\t\\tm1 = max(m1, A[i])\\n\\t\\tdp1[i] = [m1, len(s1)]\\n\\t\\ts2.add(A[n - i - 1])\\n\\t\\tm2 = max(m2, A[n - 1 - i])\\n\\t\\tdp2[n - 1 - i] = [m2, len(s2)]\\n\\tcnt = 0\\n\\tl = []\\n\\tfor i in range(n - 1):\\n\\t\\tif dp1[i][1] == dp1[i][0] == i + 1 and dp2[i + 1][1] == dp2[i + 1][0] == n - i - 1:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\tl.append([i + 1, n - i - 1])\\n\\tprint(cnt)\\n\\tfor i in range(cnt):\\n\\t\\tprint(l[i][0], l[i][1])\\n\", \"import heapq, sys\\n\\ndef ps(l):\\n\\tn = len(l)\\n\\tnxt = 1\\n\\theap = []\\n\\tans = []\\n\\tfor i in range(n):\\n\\t\\theapq.heappush(heap, l[i])\\n\\t\\twhile heap and heap[0] == nxt:\\n\\t\\t\\tnxt += 1\\n\\t\\t\\theapq.heappop(heap)\\n\\t\\tif not heap:\\n\\t\\t\\tans.append(i)\\n\\treturn ans\\nfor q in range(int(sys.stdin.readline())):\\n\\tn = int(sys.stdin.readline())\\n\\td = [int(i) for i in sys.stdin.readline().split()]\\n\\tst = set(ps(d))\\n\\td.reverse()\\n\\tanss = []\\n\\tap = ps(d)\\n\\tfor a in ap:\\n\\t\\tb = n - 2 - a\\n\\t\\tif b in st:\\n\\t\\t\\tanss.append(str(b + 1) + ' ' + str(n - b - 1) + '\\\\n')\\n\\tsys.stdout.write(str(len(anss)) + '\\\\n')\\n\\tsys.stdout.write(''.join(anss))\\n\", \"from sys import stdin\\ninp = lambda : stdin.readline().strip()\\nt = int(inp())\\nfor _ in range(t):\\n\\tn = int(inp())\\n\\ta = [int(x) for x in inp().split()]\\n\\tmaxi = max(a)\\n\\tanswers = 0\\n\\tans = []\\n\\tp1 = n - maxi\\n\\tp2 = maxi\\n\\tneeded1 = list(range(1, p1 + 1))\\n\\tneeded2 = list(range(1, p2 + 1))\\n\\tfound1 = []\\n\\tfound2 = []\\n\\tflag = True\\n\\tfor i in range(n):\\n\\t\\tif i <= p1 - 1:\\n\\t\\t\\tfound1.append(a[i])\\n\\t\\telse:\\n\\t\\t\\tfound2.append(a[i])\\n\\t\\tif i == p1 - 1:\\n\\t\\t\\tif list(sorted(found1)) == list(sorted(needed1)):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\telif i == n - 1:\\n\\t\\t\\tif list(sorted(found2)) == list(sorted(needed2)):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tanswers += 1\\n\\t\\tans.append([p1, p2])\\n\\tp1 = maxi\\n\\tp2 = n - maxi\\n\\tneeded1 = list(range(1, p1 + 1))\\n\\tneeded2 = list(range(1, p2 + 1))\\n\\tfound1 = []\\n\\tfound2 = []\\n\\tflag = True\\n\\tfor i in range(n):\\n\\t\\tif i <= p1 - 1:\\n\\t\\t\\tfound1.append(a[i])\\n\\t\\telse:\\n\\t\\t\\tfound2.append(a[i])\\n\\t\\tif i == p1 - 1:\\n\\t\\t\\tif list(sorted(found1)) == list(sorted(needed1)):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\telif i == n - 1:\\n\\t\\t\\tif list(sorted(found2)) == list(sorted(needed2)):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tanswers += 1\\n\\t\\tans.append([p1, p2])\\n\\tif len(ans) > 1 and ans[0] == ans[1]:\\n\\t\\tans.pop()\\n\\t\\tanswers -= 1\\n\\tprint(answers)\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import defaultdict as dd\\nt = int(input())\\nwhile t:\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tlm = 0\\n\\trm = n - 1\\n\\td = dd(list)\\n\\tmx = -1\\n\\tfor i in range(n):\\n\\t\\td[l[i]].append(i)\\n\\t\\tmx = max(mx, l[i])\\n\\tlol = 0\\n\\tfor i in range(1, mx + 1):\\n\\t\\tle = len(d[i])\\n\\t\\tif le == 0 or le > 2:\\n\\t\\t\\tlol = 1\\n\\t\\t\\tbreak\\n\\t\\tif le == 2:\\n\\t\\t\\tlm = max(lm, d[i][0])\\n\\t\\t\\trm = min(rm, d[i][1])\\n\\tif lm >= rm:\\n\\t\\tlol = 1\\n\\tmi = 1\\n\\tmj = 1\\n\\tci = lm + 1\\n\\tcj = n - rm\\n\\tlo = 0\\n\\tif lol == 0:\\n\\t\\tfor i in range(lm + 1):\\n\\t\\t\\tmi = max(mi, l[i])\\n\\t\\tfor j in range(n - 1, rm - 1, -1):\\n\\t\\t\\tmj = max(mj, l[j])\\n\\t\\tif ci != mi and cj != mj:\\n\\t\\t\\tlol = 1\\n\\t\\telif ci != mi:\\n\\t\\t\\tfor i in range(lm + 1, rm):\\n\\t\\t\\t\\tci += 1\\n\\t\\t\\t\\tmi = max(mi, l[i])\\n\\t\\t\\tif ci != mi:\\n\\t\\t\\t\\tlol = 1\\n\\t\\telif cj != mj:\\n\\t\\t\\tfor i in range(rm - 1, lm, -1):\\n\\t\\t\\t\\tcj += 1\\n\\t\\t\\t\\tmj = max(mj, l[i])\\n\\t\\t\\tif cj != mj:\\n\\t\\t\\t\\tlol = 1\\n\\t\\telif mi > mj:\\n\\t\\t\\tfor i in range(lm + 1, rm):\\n\\t\\t\\t\\tci += 1\\n\\t\\t\\t\\tmi = max(mi, l[i])\\n\\t\\t\\tif ci != mi:\\n\\t\\t\\t\\tlol = 1\\n\\t\\telif mj > mi:\\n\\t\\t\\tfor i in range(rm - 1, lm, -1):\\n\\t\\t\\t\\tcj += 1\\n\\t\\t\\t\\tmj = max(mj, l[i])\\n\\t\\t\\tif cj != mj:\\n\\t\\t\\t\\tlol = 1\\n\\t\\telse:\\n\\t\\t\\tlo = 1\\n\\t\\t\\tcci = ci\\n\\t\\t\\tccj = cj\\n\\t\\t\\tfor i in range(lm + 1, rm):\\n\\t\\t\\t\\tci += 1\\n\\t\\t\\t\\tmi = max(mi, l[i])\\n\\t\\t\\tif ci != mi:\\n\\t\\t\\t\\tlol = 1\\n\\tif lol == 1:\\n\\t\\tprint(0)\\n\\telif lo == 0:\\n\\t\\tprint(1)\\n\\t\\tprint(ci, cj)\\n\\telif ci == cj:\\n\\t\\tprint(1)\\n\\t\\tprint(ci, cj)\\n\\telse:\\n\\t\\tprint(2)\\n\\t\\tprint(ci, cj)\\n\\t\\tprint(cj, ci)\\n\\tt -= 1\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ts1 = set()\\n\\ts2 = set()\\n\\tflag = 0\\n\\tflag1 = 0\\n\\tm = 0\\n\\tk = 0\\n\\tj = n\\n\\ta = 0\\n\\tb = 0\\n\\tc = 0\\n\\td = 0\\n\\tfor i in range(n):\\n\\t\\tif l[i] not in s1:\\n\\t\\t\\ts1.add(l[i])\\n\\t\\telse:\\n\\t\\t\\tj = i\\n\\t\\t\\tbreak\\n\\tfor i in range(j, n):\\n\\t\\tif l[i] not in s2:\\n\\t\\t\\ts2.add(l[i])\\n\\t\\telse:\\n\\t\\t\\tj = i\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tpass\\n\\telse:\\n\\t\\tfor i in range(1, len(s1) + 1):\\n\\t\\t\\tif i in s1:\\n\\t\\t\\t\\ta = i\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 2\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 2:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tfor i in range(1, len(s2) + 1):\\n\\t\\t\\t\\tif i in s2:\\n\\t\\t\\t\\t\\tb = i\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tflag = 3\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif flag == 3:\\n\\t\\t\\t\\tpass\\n\\t\\t\\telse:\\n\\t\\t\\t\\tk += 1\\n\\ts3 = set()\\n\\ts4 = set()\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif l[i] not in s3:\\n\\t\\t\\ts3.add(l[i])\\n\\t\\telse:\\n\\t\\t\\tj = i\\n\\t\\t\\tbreak\\n\\tif j != n:\\n\\t\\tfor i in range(j, -1, -1):\\n\\t\\t\\tif l[i] not in s4:\\n\\t\\t\\t\\ts4.add(l[i])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag1 == 1:\\n\\t\\t\\tif k == 1 and a != 0 and (b != 0):\\n\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\tprint(k)\\n\\t\\t\\t\\tprint(a, b)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tfor i in range(1, len(s3) + 1):\\n\\t\\t\\t\\tif i in s3:\\n\\t\\t\\t\\t\\tc = i\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tflag1 = 2\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif flag1 == 2:\\n\\t\\t\\t\\tif k == 1 and a != 0 and (b != 0):\\n\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\tprint(k)\\n\\t\\t\\t\\t\\tprint(a, b)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\tprint(0)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor i in range(1, len(s4) + 1):\\n\\t\\t\\t\\t\\tif i in s4:\\n\\t\\t\\t\\t\\t\\td = i\\n\\t\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tflag1 = 3\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tif flag1 == 3:\\n\\t\\t\\t\\t\\tif k == 1 and a != 0 and (b != 0):\\n\\t\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\t\\tprint(k)\\n\\t\\t\\t\\t\\t\\tprint(a, b)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\t\\tprint(0)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tk += 1\\n\\t\\t\\t\\t\\tif k == 2 and a != 0 and (b != 0) and (c != 0) and (d != 0):\\n\\t\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\t\\tif a == d and b == c:\\n\\t\\t\\t\\t\\t\\t\\tprint(1)\\n\\t\\t\\t\\t\\t\\t\\tprint(a, b)\\n\\t\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\t\\tprint(k)\\n\\t\\t\\t\\t\\t\\t\\tprint(a, b)\\n\\t\\t\\t\\t\\t\\t\\tprint(d, c)\\n\\t\\t\\t\\t\\telif k == 1 and c != 0 and (d != 0):\\n\\t\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\t\\tprint(k)\\n\\t\\t\\t\\t\\t\\tprint(d, c)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tm = 10\\n\\t\\t\\t\\t\\t\\tprint(0)\\n\\tif m != 10:\\n\\t\\tprint(0)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom math import *\\nfrom collections import *\\nt = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tf = set()\\n\\tf1 = set()\\n\\tflag = 0\\n\\tbb = 0\\n\\ts = 0\\n\\tr = []\\n\\tfor i in a:\\n\\t\\tif i not in f and flag == 0:\\n\\t\\t\\tf.add(i)\\n\\t\\telif i not in f1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tf1.add(i)\\n\\t\\telse:\\n\\t\\t\\tbb = 1\\n\\t\\t\\tbreak\\n\\tif len(f) == 0 or len(f1) == 0:\\n\\t\\tbb = 1\\n\\tif bb != 1:\\n\\t\\tb = list(f)\\n\\t\\tc = list(f1)\\n\\t\\tb.sort()\\n\\t\\tc.sort()\\n\\t\\ttt = 0\\n\\t\\tfor i in range(len(b)):\\n\\t\\t\\tif i + 1 == b[i]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\ttt += 1\\n\\t\\t\\tbreak\\n\\t\\tfor i in range(len(c)):\\n\\t\\t\\tif i + 1 == c[i]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\ttt += 1\\n\\t\\t\\tbreak\\n\\t\\tif tt == 0:\\n\\t\\t\\ts += 1\\n\\t\\t\\tr.append([len(f), len(f1)])\\n\\t\\tbb = 0\\n\\t\\tflag = 0\\n\\t\\tf = set()\\n\\t\\tf1 = set()\\n\\tfor i in a[::-1]:\\n\\t\\tif i not in f and flag == 0:\\n\\t\\t\\tf.add(i)\\n\\t\\telif i not in f1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tf1.add(i)\\n\\t\\telse:\\n\\t\\t\\tbb = 1\\n\\t\\t\\tbreak\\n\\tif len(f) == 0 or len(f1) == 0:\\n\\t\\tbb = 1\\n\\tif bb != 1:\\n\\t\\tb = list(f)\\n\\t\\tc = list(f1)\\n\\t\\tb.sort()\\n\\t\\tc.sort()\\n\\t\\ttt = 0\\n\\t\\tfor i in range(len(b)):\\n\\t\\t\\tif i + 1 == b[i]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\ttt += 1\\n\\t\\t\\tbreak\\n\\t\\tfor i in range(len(c)):\\n\\t\\t\\tif i + 1 == c[i]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\ttt += 1\\n\\t\\t\\tbreak\\n\\t\\tif tt == 0:\\n\\t\\t\\ts += 1\\n\\t\\t\\tr.append([len(f1), len(f)])\\n\\tif s == 2:\\n\\t\\tif r[0] == r[1]:\\n\\t\\t\\ts -= 1\\n\\tprint(s)\\n\\tfor i in range(s):\\n\\t\\tprint(*r[i])\\n\", \"from sys import stdin\\n\\ndef func(n):\\n\\ta = n * (n + 1)\\n\\tb = n + n + 1\\n\\treturn a * b // 6\\nfor _ in range(int(stdin.readline())):\\n\\tn = int(stdin.readline())\\n\\tarr = list(map(int, stdin.readline().split()))\\n\\tans = []\\n\\tpre = []\\n\\tsuff = []\\n\\tP = []\\n\\tS = []\\n\\tm = 0\\n\\tM = 0\\n\\tfor i in range(n):\\n\\t\\tm += arr[i]\\n\\t\\tM += pow(arr[i], 2)\\n\\t\\tpre.append(m)\\n\\t\\tP.append(M)\\n\\tm = 0\\n\\tM = 0\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tm += arr[i]\\n\\t\\tM += pow(arr[i], 2)\\n\\t\\tsuff.append(m)\\n\\t\\tS.append(M)\\n\\tfor i in range(1, n):\\n\\t\\tif pre[i - 1] == i * (i + 1) // 2 and P[i - 1] == func(i):\\n\\t\\t\\tif suff[n - i - 1] == (n - i) * (n - i + 1) // 2 and S[n - i - 1] == func(n - i):\\n\\t\\t\\t\\tans.append([i, n - i])\\n\\tprint(len(ans))\\n\\tfor ele in ans:\\n\\t\\tprint(ele[0], ele[1])\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = [int(x) for x in input().split()]\\n\\tm1 = [0] * n\\n\\tm2 = [0] * n\\n\\tx = set()\\n\\tans = []\\n\\tmx = 0\\n\\tone = False\\n\\tfor i in range(n):\\n\\t\\tif l[i] in x:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif l[i] == 1:\\n\\t\\t\\t\\tone = True\\n\\t\\t\\tmx = max(mx, l[i])\\n\\t\\t\\tx.add(l[i])\\n\\t\\t\\tif one and mx == len(x):\\n\\t\\t\\t\\tm1[i] = len(x)\\n\\tx = set()\\n\\tmx = 0\\n\\tone = False\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif l[i] in x:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif l[i] == 1:\\n\\t\\t\\t\\tone = True\\n\\t\\t\\tmx = max(mx, l[i])\\n\\t\\t\\tx.add(l[i])\\n\\t\\t\\tif one and mx == len(x):\\n\\t\\t\\t\\tm2[i] = len(x)\\n\\tfor i in range(n):\\n\\t\\tif m1[i] != 0 and i + 1 < n:\\n\\t\\t\\tif m2[i + 1] != 0:\\n\\t\\t\\t\\tans.append((m1[i], m2[i + 1]))\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(ans[i][0], ans[i][1])\\n\", \"from sys import exit\\nfrom collections import Counter\\n\\ndef i():\\n\\treturn input()\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef iis():\\n\\treturn map(int, input().split())\\n\\ndef liis():\\n\\treturn list(map(int, input().split()))\\n\\ndef print_array(a):\\n\\tprint(' '.join(map(str, a)))\\nt = ii()\\nfor _ in range(t):\\n\\tn = ii()\\n\\ta = liis()\\n\\tjose = Counter(a)\\n\\tcur = 0\\n\\tfor i in range(1, n):\\n\\t\\tif i not in jose:\\n\\t\\t\\tbreak\\n\\t\\tif jose[i] == 2:\\n\\t\\t\\tcur += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tmaxi = cur\\n\\tfor i in range(cur + 1, n):\\n\\t\\tif i in jose:\\n\\t\\t\\tmaxi += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfirst = [i for i in range(1, cur + 1)]\\n\\tfinal = [i for i in range(1, maxi + 1)]\\n\\tfirst_set = set(first)\\n\\tfinal_first_set = set(final)\\n\\tsecond_set = set(first)\\n\\tfinal_second_set = set(final)\\n\\tpossible = 0\\n\\tans = []\\n\\tcan = True\\n\\tfor i in range(len(first)):\\n\\t\\tif a[i] in first_set:\\n\\t\\t\\tfirst_set.remove(a[i])\\n\\t\\telse:\\n\\t\\t\\tcan = False\\n\\t\\t\\tbreak\\n\\tfor i in range(len(final)):\\n\\t\\tif a[len(a) - i - 1] in final_first_set:\\n\\t\\t\\tfinal_first_set.remove(a[len(a) - i - 1])\\n\\t\\telse:\\n\\t\\t\\tcan = False\\n\\t\\t\\tbreak\\n\\tif can and (not len(first_set)) and (not len(final_first_set)):\\n\\t\\tpossible += 1\\n\\t\\tans.append([len(first), n - len(first)])\\n\\tcan = True\\n\\tfor i in range(len(first)):\\n\\t\\tif a[len(a) - i - 1] in second_set:\\n\\t\\t\\tsecond_set.remove(a[len(a) - i - 1])\\n\\t\\telse:\\n\\t\\t\\tcan = False\\n\\t\\t\\tbreak\\n\\tfor i in range(len(final)):\\n\\t\\tif a[i] in final_second_set:\\n\\t\\t\\tfinal_second_set.remove(a[i])\\n\\t\\telse:\\n\\t\\t\\tcan = False\\n\\t\\t\\tbreak\\n\\tif can and (not len(final_second_set)) and (not len(second_set)):\\n\\t\\tpossible += 1\\n\\t\\tans.append([n - len(first), len(first)])\\n\\tif len(ans) == 2 and ans[0] == ans[1]:\\n\\t\\tans.pop()\\n\\tif possible and len(final) + len(first) == n:\\n\\t\\tprint(len(ans))\\n\\t\\tfor i in ans:\\n\\t\\t\\tprint(i[0], i[1])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"def run(n, list_elements):\\n\\tn_long = max(list_elements)\\n\\tn_short = n - n_long\\n\\tway1 = False\\n\\tway2 = False\\n\\tw1_long_list = list_elements[:n_long]\\n\\tw1_short_list = list_elements[n_long:]\\n\\tw1_long_list_mask = [False] * n_long\\n\\tw1_short_list_mask = [False] * n_short\\n\\tfor i in range(len(w1_long_list)):\\n\\t\\tindex = w1_long_list[i] - 1\\n\\t\\tif index >= len(w1_long_list_mask):\\n\\t\\t\\tbreak\\n\\t\\tw1_long_list_mask[index] = True\\n\\tfor i in range(len(w1_short_list)):\\n\\t\\tindex = w1_short_list[i] - 1\\n\\t\\tif index >= len(w1_short_list_mask):\\n\\t\\t\\tbreak\\n\\t\\tw1_short_list_mask[index] = True\\n\\tif all(w1_short_list_mask) and all(w1_long_list_mask):\\n\\t\\tway1 = True\\n\\tw2_long_list = list_elements[n_short:]\\n\\tw2_short_list = list_elements[:n_short]\\n\\tw2_long_list_mask = [False] * n_long\\n\\tw2_short_list_mask = [False] * n_short\\n\\tfor i in range(len(w2_long_list)):\\n\\t\\tindex = w2_long_list[i] - 1\\n\\t\\tif index >= len(w2_long_list_mask):\\n\\t\\t\\tbreak\\n\\t\\tw2_long_list_mask[index] = True\\n\\tfor i in range(len(w2_short_list)):\\n\\t\\tindex = w2_short_list[i] - 1\\n\\t\\tif index >= len(w2_short_list_mask):\\n\\t\\t\\tbreak\\n\\t\\tw2_short_list_mask[index] = True\\n\\tif all(w2_short_list_mask) and all(w2_long_list_mask):\\n\\t\\tway2 = True\\n\\tif way1 == True and way2 == True:\\n\\t\\tif n_short == n_long:\\n\\t\\t\\tprint('1')\\n\\t\\telse:\\n\\t\\t\\tprint('2')\\n\\telif way1 == True or way2 == True:\\n\\t\\tprint('1')\\n\\telse:\\n\\t\\tprint('0')\\n\\tif way1 == True:\\n\\t\\tprint(str(n_long) + ' ' + str(n_short))\\n\\tif way2 == True:\\n\\t\\tif n_short == n_long and way1 == True:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tprint(str(n_short) + ' ' + str(n_long))\\n\\treturn\\ni = int(input())\\nfor _ in range(i):\\n\\tn = int(input())\\n\\tlst = list(map(int, input().split()))\\n\\trun(n, lst)\\n\", \"import os, sys, bisect, copy\\nfrom collections import defaultdict, Counter, deque\\nfrom functools import lru_cache\\nif os.path.exists('in.txt'):\\n\\tsys.stdin = open('in.txt', 'r')\\nif os.path.exists('out.txt'):\\n\\tsys.stdout = open('out.txt', 'w')\\n\\ndef input():\\n\\treturn sys.stdin.readline()\\n\\ndef mapi(arg=0):\\n\\treturn map(int if arg == 0 else str, input().split())\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [0] + list(mapi())\\n\\tmx = 0\\n\\tmp = {}\\n\\tdp = [[0] * 2 for i in range(n + 5)]\\n\\tfor i in range(1, n + 1):\\n\\t\\tif a[i] not in mp:\\n\\t\\t\\tmp[a[i]] = 1\\n\\t\\t\\tmx = max(mx, a[i])\\n\\t\\t\\tif mx == i:\\n\\t\\t\\t\\tdp[i][0] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tmp = {}\\n\\tmx = 0\\n\\tfor i in range(n, 0, -1):\\n\\t\\tif a[i] not in mp:\\n\\t\\t\\tmp[a[i]] = 1\\n\\t\\t\\tmx = max(a[i], mx)\\n\\t\\t\\tif mx == n - i + 1:\\n\\t\\t\\t\\tdp[i][1] = 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tmp = {}\\n\\tres = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tif dp[i - 1][0] and dp[i][1]:\\n\\t\\t\\tres += 1\\n\\tprint(res)\\n\\tfor i in range(2, n + 1):\\n\\t\\tif dp[i - 1][0] and dp[i][1]:\\n\\t\\t\\tprint(i - 1, n - i + 1)\\n\\t\\tdp[i][1] = 0\\n\", \"def check(arr):\\n\\tlarr = len(arr)\\n\\tr = [0] * (larr + 1)\\n\\tfor i in arr:\\n\\t\\tif i > larr:\\n\\t\\t\\treturn False\\n\\t\\tr[i] += 1\\n\\treturn all([i == 1 for i in r[1:]])\\nN = int(input())\\nfor _ in range(N):\\n\\tK = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tdoubled = [0] * K\\n\\tfor i in A:\\n\\t\\tdoubled[i] += 1\\n\\tmd = max([num for (num, i) in enumerate(doubled) if i == 2] + [0])\\n\\tif md == 0:\\n\\t\\tprint(0)\\n\\telif K == md * 2:\\n\\t\\tif check(A[:md]) and check(A[md:]):\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(md, md)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\\telse:\\n\\t\\tres = []\\n\\t\\tif check(A[:md]) and check(A[md:]):\\n\\t\\t\\tres.append((md, K - md))\\n\\t\\tif check(A[K - md:]) and check(A[:K - md]):\\n\\t\\t\\tres.append((K - md, md))\\n\\t\\tprint(len(res))\\n\\t\\tfor (i, j) in res:\\n\\t\\t\\tprint('%d %d' % (i, j))\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tpre = [False] * n\\n\\tpos = [False] * n\\n\\tcount = [0] * (n + 1)\\n\\td = 0\\n\\tsu = 0\\n\\tfor i in range(len(a)):\\n\\t\\tif count[a[i]] == 0:\\n\\t\\t\\tcount[a[i]] += 1\\n\\t\\t\\tsu = su + a[i]\\n\\t\\t\\td += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif d == i + 1 and d * (d + 1) // 2 == su:\\n\\t\\t\\tpre[i] = True\\n\\ta.reverse()\\n\\tcount = [0] * (n + 1)\\n\\td = 0\\n\\tsu = 0\\n\\tfor i in range(len(a)):\\n\\t\\tif count[a[i]] == 0:\\n\\t\\t\\tcount[a[i]] += 1\\n\\t\\t\\tsu = su + a[i]\\n\\t\\t\\td += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif d == i + 1 and d * (d + 1) // 2 == su:\\n\\t\\t\\tpos[i] = True\\n\\tpos.reverse()\\n\\tans = []\\n\\tcount = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif pre[i] and pos[i + 1]:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tans.append((i + 1, n - (i + 1)))\\n\\tprint(count)\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().strip().split()]\\n\\taset = set([])\\n\\tres = []\\n\\ts = 0\\n\\tts = sum(a)\\n\\tdic = {}\\n\\tfor e in a:\\n\\t\\tif e not in dic:\\n\\t\\t\\tdic[e] = 0\\n\\t\\tdic[e] += 1\\n\\tflag = True\\n\\tbad = set([])\\n\\tfor d in dic:\\n\\t\\tif dic[d] > 2:\\n\\t\\t\\tflag = False\\n\\t\\t\\tbreak\\n\\t\\telif dic[d] == 2:\\n\\t\\t\\tbad.add(d)\\n\\tif flag:\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif a[i] not in aset:\\n\\t\\t\\t\\ts += a[i]\\n\\t\\t\\t\\taset.add(a[i])\\n\\t\\t\\t\\tif a[i] in bad:\\n\\t\\t\\t\\t\\tbad.remove(a[i])\\n\\t\\t\\t\\tif (i + 1) * (i + 2) // 2 == s:\\n\\t\\t\\t\\t\\tps = ts - s\\n\\t\\t\\t\\t\\trem = n - (i + 1)\\n\\t\\t\\t\\t\\tif ps == rem * (rem + 1) // 2 and len(bad) == 0:\\n\\t\\t\\t\\t\\t\\tres.append(i + 1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tprint(len(res))\\n\\t\\tfor r in res:\\n\\t\\t\\tprint(r, n - r)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\td1 = {}\\n\\td2 = {}\\n\\tstop = -1\\n\\tfor (num, i) in enumerate(arr[::-1]):\\n\\t\\tif i not in d2:\\n\\t\\t\\td2[i] = 0\\n\\t\\td2[i] += 1\\n\\t\\tif stop == -1 and d2[i] > 1:\\n\\t\\t\\tstop = num\\n\\tif stop != -1:\\n\\t\\tstop = n - stop - 1\\n\\t(left, right) = ([(10 ** 9, 0)], [(10 ** 9, 0)])\\n\\tfor i in arr:\\n\\t\\tleft.append((min(left[-1][0], i), max(left[-1][1], i)))\\n\\tleft = left[1:]\\n\\tfor i in arr[::-1]:\\n\\t\\tright.append((min(right[-1][0], i), max(right[-1][1], i)))\\n\\tright = right[1:]\\n\\tright = right[::-1]\\n\\tans = []\\n\\tfor (num, i) in enumerate(arr[:-1]):\\n\\t\\tif i in d1:\\n\\t\\t\\tbreak\\n\\t\\td1[i] = 1\\n\\t\\td2[i] -= 1\\n\\t\\tif d2[i] == 0:\\n\\t\\t\\td2.pop(i)\\n\\t\\tif left[num] == (1, len(d1)) and right[num + 1] == (1, len(d2)) and (stop == -1 or num >= stop):\\n\\t\\t\\tans.append((len(d1), len(d2)))\\n\\tprint(len(ans))\\n\\tfor line in ans:\\n\\t\\tprint(*line)\\n\", \"import sys, bisect\\nfrom math import gcd\\ninput = sys.stdin.readline\\nfrom collections import defaultdict\\n\\ndef inp():\\n\\treturn int(input().rstrip())\\n\\ndef inlt():\\n\\treturn list(map(int, input().rstrip().split()))\\n\\ndef insr():\\n\\ts = input().rstrip()\\n\\treturn s[:len(s) - 1]\\n\\ndef invr():\\n\\treturn map(int, input().rstrip().split())\\n\\ndef cal(n):\\n\\treturn n * (n + 1) // 2\\nt = inp()\\nfor _ in range(t):\\n\\tn = inp()\\n\\tnums = inlt()\\n\\tpre = [0 for i in range(n)]\\n\\tpre[0] = nums[0]\\n\\tfor i in range(1, n):\\n\\t\\tpre[i] = pre[i - 1] + nums[i]\\n\\tfs = 0\\n\\tss = 0\\n\\tans = []\\n\\td = defaultdict(int)\\n\\tfor i in nums:\\n\\t\\td[i] += 1\\n\\tbig = max(nums)\\n\\thas = True\\n\\tfor i in range(1, big + 1):\\n\\t\\tif i not in d:\\n\\t\\t\\thas = False\\n\\t\\t\\tbreak\\n\\t\\tif d[i] >= 3:\\n\\t\\t\\thas = False\\n\\t\\t\\tbreak\\n\\tif has:\\n\\t\\tvl = set()\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif nums[i] in vl:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tvl.add(nums[i])\\n\\t\\t\\td[nums[i]] -= 1\\n\\t\\t\\tif d[nums[i]] <= 0:\\n\\t\\t\\t\\tdel d[nums[i]]\\n\\t\\t\\tif len(d) != n - i - 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tfirst_s = pre[i]\\n\\t\\t\\tse_s = pre[n - 1] - pre[i]\\n\\t\\t\\tif cal(i + 1) == first_s and cal(n - i - 1) == se_s:\\n\\t\\t\\t\\tif i + 1 < n:\\n\\t\\t\\t\\t\\tans.append(i + 1)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i, n - i)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = 0\\n\\tc = 0\\n\\ts = set()\\n\\tans = [True] * n\\n\\tfor i in range(n):\\n\\t\\tm = max(m, a[i])\\n\\t\\tif a[i] not in s:\\n\\t\\t\\ts.add(a[i])\\n\\t\\t\\tc += 1\\n\\t\\tif not (c == i + 1 and m == i + 1):\\n\\t\\t\\tans[i] = False\\n\\tm = 0\\n\\tc = 0\\n\\ts = set()\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\tm = max(m, a[i])\\n\\t\\tif a[i] not in s:\\n\\t\\t\\ts.add(a[i])\\n\\t\\t\\tc += 1\\n\\t\\tif not (c == n - i and m == n - i):\\n\\t\\t\\tans[i - 1] = False\\n\\tprint(ans.count(True))\\n\\tfor i in range(n - 1):\\n\\t\\tif ans[i]:\\n\\t\\t\\tprint(i + 1, n - i - 1)\\n\", \"T = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tleft = []\\n\\tright = []\\n\\tf = [0] * (n + 1)\\n\\tans = []\\n\\ttilltrue = -1\\n\\tnotfoundcount = 0\\n\\tmx = -1\\n\\tnewelm = 0\\n\\tleftF = [0] * (n + 1)\\n\\tfor i in range(n):\\n\\t\\tif f[a[i]] == 0:\\n\\t\\t\\tnewelm += 1\\n\\t\\t\\tif a[i] > mx:\\n\\t\\t\\t\\tmx = a[i]\\n\\t\\t\\tif newelm == mx and mx == i + 1:\\n\\t\\t\\t\\tleft.append(i + 1)\\n\\t\\t\\t\\tleftF[i + 1] += 1\\n\\t\\tf[a[i]] += 1\\n\\trf = [0] * (n + 1)\\n\\tnewelm = 0\\n\\tmx = -1\\n\\tj = 0\\n\\tfor i in range(n):\\n\\t\\tj = n - i - 1\\n\\t\\tif rf[a[j]] == 0:\\n\\t\\t\\tnewelm += 1\\n\\t\\t\\tif a[j] > mx:\\n\\t\\t\\t\\tmx = a[j]\\n\\t\\t\\tif newelm == mx == i + 1:\\n\\t\\t\\t\\tright.append(j)\\n\\t\\t\\t\\tif leftF[j] > 0:\\n\\t\\t\\t\\t\\tans.append([j, n - j])\\n\\t\\trf[a[j]] += 1\\n\\tprint(len(ans))\\n\\tk = 0\\n\\twhile len(ans) > k:\\n\\t\\tprint(ans[k][0], ans[k][1])\\n\\t\\tk = k + 1\\n\", \"def main():\\n\\timport sys\\n\\tinput = sys.stdin.readline\\n\\n\\tdef is_ok(p, l):\\n\\t\\tused = [0] * l\\n\\t\\tret = True\\n\\t\\tfor i in range(l):\\n\\t\\t\\tif p[i] > l or used[p[i] - 1] == 1:\\n\\t\\t\\t\\tret = False\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tused[p[i] - 1] = 1\\n\\t\\treturn ret\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\tA = list(map(int, input().split()))\\n\\t\\tl1 = max(A)\\n\\t\\tl2 = n - l1\\n\\t\\tif l2 > l1:\\n\\t\\t\\tprint(0)\\n\\t\\telif l1 == l2:\\n\\t\\t\\tans = 0\\n\\t\\t\\tans_ = []\\n\\t\\t\\tp1 = A[:l1]\\n\\t\\t\\tp2 = A[l1:]\\n\\t\\t\\tif is_ok(p1, l1) and is_ok(p2, l2):\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tans_.append([l1, l2])\\n\\t\\t\\tprint(ans)\\n\\t\\t\\tfor i in range(ans):\\n\\t\\t\\t\\tprint(*ans_[i])\\n\\t\\telse:\\n\\t\\t\\tans = 0\\n\\t\\t\\tans_ = []\\n\\t\\t\\tp1 = A[:l1]\\n\\t\\t\\tp2 = A[l1:]\\n\\t\\t\\tif is_ok(p1, l1) and is_ok(p2, l2):\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tans_.append([l1, l2])\\n\\t\\t\\tp1 = A[:l2]\\n\\t\\t\\tp2 = A[l2:]\\n\\t\\t\\tif is_ok(p1, l2) and is_ok(p2, l1):\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tans_.append([l2, l1])\\n\\t\\t\\tprint(ans)\\n\\t\\t\\tfor i in range(ans):\\n\\t\\t\\t\\tprint(*ans_[i])\\nmain()\\n\", \"t = int(input())\\nfor i in range(t):\\n\\ta = int(input())\\n\\tarray = [int(s) for s in input().split()]\\n\\tcheck = {}\\n\\texists = True\\n\\tmax_with_2 = -1\\n\\tfor i in range(len(array)):\\n\\t\\tif array[i] not in check:\\n\\t\\t\\tcheck[array[i]] = 1\\n\\t\\telse:\\n\\t\\t\\tcheck[array[i]] += 1\\n\\tfor (key, value) in check.items():\\n\\t\\tif value > 2:\\n\\t\\t\\texists = False\\n\\t\\telif value == 2 and key > max_with_2:\\n\\t\\t\\tmax_with_2 = key\\n\\tfor i in range(1, max_with_2):\\n\\t\\tif i not in check:\\n\\t\\t\\texists = False\\n\\t\\telif check[i] != 2 and i <= max_with_2:\\n\\t\\t\\texists = False\\n\\tif not exists:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tcounter = 0\\n\\tmax_ls = []\\n\\tmax_l = -1\\n\\tmax_r = -1\\n\\tmax_rs = []\\n\\tsums_l = [0]\\n\\tsums_r = [0]\\n\\tfor i in range(len(array)):\\n\\t\\tif array[i] > max_l:\\n\\t\\t\\tmax_l = array[i]\\n\\t\\tmax_ls.append(max_l)\\n\\t\\tsums_l.append(sums_l[-1] + array[i])\\n\\t\\tif array[len(array) - 1 - i] > max_r:\\n\\t\\t\\tmax_r = array[len(array) - 1 - i]\\n\\t\\tsums_r.append(sums_r[-1] + array[len(array) - 1 - i])\\n\\t\\tmax_rs.append(max_r)\\n\\tsums_l = sums_l[1:]\\n\\tsums_r = sums_r[1:]\\n\\tans = []\\n\\tfor i in range(len(array)):\\n\\t\\tif i + 1 == max_ls[i] and len(array) - i - 1 == max_rs[len(array) - i - 2]:\\n\\t\\t\\tif sums_l[i] == max_ls[i] * (max_ls[i] + 1) // 2 and sums_r[len(array) - i - 2] == max_rs[len(array) - i - 2] * (max_rs[len(array) - i - 2] + 1) // 2:\\n\\t\\t\\t\\tans.append([i + 1, len(array) - i - 1])\\n\\tprint(len(ans))\\n\\tfor i in range(len(ans)):\\n\\t\\tprint(ans[i][0], ans[i][1])\\n\", \"from sys import stdin\\ninput = stdin.readline\\n\\ndef getSub(a, n):\\n\\tvisited = [False] * (n + 1)\\n\\tcurrMax = 0\\n\\ttru = [False] * n\\n\\tfor i in range(n - 1):\\n\\t\\tif visited[a[i]]:\\n\\t\\t\\tbreak\\n\\t\\tvisited[a[i]] = True\\n\\t\\tif a[i] > currMax:\\n\\t\\t\\tcurrMax = a[i]\\n\\t\\tif i + 1 == currMax:\\n\\t\\t\\ttru[i + 1] = True\\n\\treturn tru\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = getSub(a, n)\\n\\tc = getSub(a[::-1], n)\\n\\tgood = set()\\n\\tfor i in range(n):\\n\\t\\tif b[i] and c[n - i]:\\n\\t\\t\\tgood.add((i, n - i))\\n\\tprint(len(good))\\n\\tfor (l1, l2) in good:\\n\\t\\tprint(l1, l2)\\n\", \"import sys\\nimport math\\nimport bisect\\nfrom sys import stdin, stdout\\nfrom math import gcd, floor, sqrt, log2, ceil\\nfrom collections import defaultdict\\nfrom bisect import bisect_left as bl, bisect_right as br\\nfrom collections import Counter\\nfrom collections import deque\\nip = lambda : int(stdin.readline())\\ninp = lambda : map(int, stdin.readline().split())\\nips = lambda : stdin.readline().rstrip()\\n\\ndef check(arr):\\n\\tch = list(arr)\\n\\tch.sort()\\n\\tsam = [i for i in range(1, len(arr) + 1)]\\n\\tif sam == ch:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\nt = ip()\\nfor _ in range(t):\\n\\tn = ip()\\n\\tarr = list(inp())\\n\\tdic = defaultdict(bool)\\n\\tfor i in range(n):\\n\\t\\tif dic[arr[i]]:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tdic[arr[i]] = True\\n\\tarr1 = arr[:i]\\n\\tarr2 = arr[i:]\\n\\tans = 0\\n\\tch = []\\n\\tstore = None\\n\\tif check(arr1) and check(arr2):\\n\\t\\tch.append('{} {}'.format(len(arr1), len(arr2)))\\n\\tarr = arr[::-1]\\n\\tdic = defaultdict(bool)\\n\\tfor i in range(n):\\n\\t\\tif dic[arr[i]]:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tdic[arr[i]] = True\\n\\tarr1 = arr[:i]\\n\\tarr2 = arr[i:]\\n\\tif check(arr1) and check(arr2):\\n\\t\\tch.append('{} {}'.format(len(arr2), len(arr1)))\\n\\tch = list(set(ch))\\n\\tprint(len(ch))\\n\\tfor i in ch:\\n\\t\\tprint(i)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tcml = [0] + A\\n\\tfor i in range(1, n + 1):\\n\\t\\tcml[i] = max(cml[i - 1], cml[i])\\n\\tcmr = A + [0]\\n\\tcmr.reverse()\\n\\tfor i in range(1, n + 1):\\n\\t\\tcmr[i] = max(cmr[i - 1], cmr[i])\\n\\tl = []\\n\\timport copy\\n\\tr = copy.copy(A)\\n\\tr.reverse()\\n\\tk = 0\\n\\tans = []\\n\\tng = set()\\n\\tl_ = set()\\n\\tl_temp = []\\n\\tfor i in range(n - 1):\\n\\t\\tl_temp.append(A[i])\\n\\t\\tl_.add(A[i])\\n\\t\\tif len(l_temp) != len(l_):\\n\\t\\t\\tng.add(i)\\n\\tr_temp = []\\n\\tr_ = set()\\n\\tfor j in range(n - 1):\\n\\t\\tr_temp.append(A[n - j - 1])\\n\\t\\tr_.add(A[n - j - 1])\\n\\t\\tif len(r_temp) != len(r_):\\n\\t\\t\\tng.add(n - j - 2)\\n\\tfor i in range(n - 1):\\n\\t\\tl.append(A[i])\\n\\t\\tr.pop()\\n\\t\\tif i in ng:\\n\\t\\t\\tcontinue\\n\\t\\tif cml[i + 1] == i + 1 and cmr[n - i - 1] == n - i - 1:\\n\\t\\t\\tk += 1\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\tprint(k)\\n\\tif k != 0:\\n\\t\\tfor i in range(len(ans)):\\n\\t\\t\\tprint(*ans[i])\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, copy, functools\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\nmod2 = 998244353\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef LLI():\\n\\treturn [list(map(int, l.split())) for l in sys.stdin.readlines()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef pe(s):\\n\\treturn print(str(s), file=sys.stderr)\\n\\ndef JA(a, sep):\\n\\treturn sep.join(map(str, a))\\n\\ndef JAA(a, s, t):\\n\\treturn s.join((t.join(map(str, b)) for b in a))\\n\\ndef IF(c, t, f):\\n\\treturn t if c else f\\n\\ndef YES(c):\\n\\treturn IF(c, 'YES', 'NO')\\n\\ndef Yes(c):\\n\\treturn IF(c, 'Yes', 'No')\\n\\ndef main():\\n\\tt = I()\\n\\trr = []\\n\\tfor _ in range(t):\\n\\t\\tn = I()\\n\\t\\ta = LI()\\n\\t\\tc = collections.Counter(a)\\n\\t\\tm = max(a)\\n\\t\\tm2 = n - m\\n\\t\\tok = m2 > 0\\n\\t\\tfor i in range(1, m2 + 1):\\n\\t\\t\\tif c[i] != 2:\\n\\t\\t\\t\\tok = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(m2 + 1, m + 1):\\n\\t\\t\\tif c[i] != 1:\\n\\t\\t\\t\\tok = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif ok:\\n\\t\\t\\tr = []\\n\\t\\t\\tif max(a[:m2]) == m2 and len(set(a[:m2])) == m2:\\n\\t\\t\\t\\tr.append([m2, m])\\n\\t\\t\\tif m != m2 and max(a[-m2:]) == m2 and (len(set(a[-m2:])) == m2):\\n\\t\\t\\t\\tr.append([m, m2])\\n\\t\\t\\trr.append(len(r))\\n\\t\\t\\tif r:\\n\\t\\t\\t\\trr.append(JAA(r, '\\\\n', ' '))\\n\\t\\telse:\\n\\t\\t\\trr.append(0)\\n\\treturn JA(rr, '\\\\n')\\nprint(main())\\n\", \"def helper(sa, a, sb, b, seen):\\n\\treturn a * (a + 1) // 2 == sa and b * (b + 1) // 2 == sb and (a == len(seen))\\nt = int(input())\\nwhile t > 0:\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tall_sum = sum(arr)\\n\\tcur_sum = 0\\n\\tcnt = 0\\n\\tans = []\\n\\t(fwd, bck) = (set(), [])\\n\\ttmp = set()\\n\\tfor i in range(len(arr) - 1):\\n\\t\\tcur_sum += arr[i]\\n\\t\\ttmp.add(arr[i])\\n\\t\\tif helper(cur_sum, i + 1, all_sum - cur_sum, n - i - 1, tmp):\\n\\t\\t\\tfwd.add((i + 1, n - i - 1))\\n\\tarr = arr[::-1]\\n\\t(cur_sum, tmp) = (0, set())\\n\\tfor i in range(len(arr) - 1):\\n\\t\\tcur_sum += arr[i]\\n\\t\\ttmp.add(arr[i])\\n\\t\\tif helper(cur_sum, i + 1, all_sum - cur_sum, n - i - 1, tmp):\\n\\t\\t\\tif (n - i - 1, i + 1) in fwd:\\n\\t\\t\\t\\tbck.append((n - i - 1, i + 1))\\n\\t\\t\\t\\tcnt += 1\\n\\tprint(cnt)\\n\\tfor (i, j) in bck:\\n\\t\\tprint(i, j)\\n\\tt -= 1\\n\", \"from sys import stdin as inp\\nfrom math import gcd, sqrt, floor, ceil, log2\\nfor _ in range(int(inp.readline())):\\n\\tn = int(inp.readline())\\n\\tarr = list(map(int, inp.readline().split()))\\n\\tmaxx = max(arr)\\n\\tif maxx >= n:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tind_f = -1\\n\\t\\tind_b = n\\n\\t\\tdic = {}\\n\\t\\tfront = True\\n\\t\\tt = maxx\\n\\t\\tback = True\\n\\t\\tfor i in range(1, maxx + 1):\\n\\t\\t\\tdic[i] = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif t:\\n\\t\\t\\t\\tif dic[arr[i]] == 0:\\n\\t\\t\\t\\t\\tdic[arr[i]] = 1\\n\\t\\t\\t\\t\\tind_f = i\\n\\t\\t\\t\\t\\tt -= 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tfront = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, maxx + 1):\\n\\t\\t\\tdic[i] = 0\\n\\t\\tt = maxx\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tif t:\\n\\t\\t\\t\\tif dic[arr[i]] == 0:\\n\\t\\t\\t\\t\\tdic[arr[i]] = 1\\n\\t\\t\\t\\t\\tt -= 1\\n\\t\\t\\t\\t\\tind_b = i\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tback = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\ttwo = n - maxx\\n\\t\\tfront2 = True\\n\\t\\tback2 = True\\n\\t\\tt = two\\n\\t\\tind_t_f = -1\\n\\t\\tind_t_b = n\\n\\t\\tfor i in range(1, two + 1):\\n\\t\\t\\tdic[i] = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif t:\\n\\t\\t\\t\\tif dic[arr[i]] == 0:\\n\\t\\t\\t\\t\\tdic[arr[i]] = 1\\n\\t\\t\\t\\t\\tind_t_f = i\\n\\t\\t\\t\\t\\tt -= 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tfront2 = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(1, two + 1):\\n\\t\\t\\tdic[i] = 0\\n\\t\\tt = two\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tif t:\\n\\t\\t\\t\\tif dic[arr[i]] == 0:\\n\\t\\t\\t\\t\\tdic[arr[i]] = 1\\n\\t\\t\\t\\t\\tt -= 1\\n\\t\\t\\t\\t\\tind_t_b = i\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tback2 = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tans = []\\n\\t\\tif front and back2 and (ind_f + 1 == ind_t_b):\\n\\t\\t\\tans.append([ind_f + 1, n - (ind_f + 1)])\\n\\t\\tif front2 and back and (ind_t_f + 1 == ind_b):\\n\\t\\t\\tif [ind_t_f + 1, n - (ind_t_f + 1)] not in ans:\\n\\t\\t\\t\\tans.append([ind_t_f + 1, n - (ind_t_f + 1)])\\n\\t\\tif ans:\\n\\t\\t\\tprint(len(ans))\\n\\t\\t\\tfor i in ans:\\n\\t\\t\\t\\tprint(*i)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef su(x):\\n\\tproduct = x * (x + 1) // 2\\n\\treturn product\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tli = list(map(int, input().split()))\\n\\tmaxi = max(li)\\n\\tpairs = []\\n\\ts1 = set()\\n\\ts2 = set()\\n\\ts3 = set()\\n\\ts4 = set()\\n\\ts5 = set()\\n\\ts6 = set()\\n\\tfor j in range(1, maxi + 1):\\n\\t\\ts1.add(j)\\n\\tfor j in range(1, n - maxi + 1):\\n\\t\\ts2.add(j)\\n\\ttry:\\n\\t\\tfor j in range(maxi):\\n\\t\\t\\ts3.add(li[j])\\n\\t\\tfor j in range(maxi, n):\\n\\t\\t\\ts4.add(li[j])\\n\\t\\tfor j in range(n - maxi):\\n\\t\\t\\ts5.add(li[j])\\n\\t\\tfor j in range(n - maxi, n):\\n\\t\\t\\ts6.add(li[j])\\n\\t\\tif s3 == s1 and s4 == s2:\\n\\t\\t\\tpairs.append((maxi, n - maxi))\\n\\t\\tif s5 == s2 and s6 == s1:\\n\\t\\t\\tpairs.append((n - maxi, maxi))\\n\\t\\tif len(pairs) == 2 and pairs[0][0] == pairs[0][1]:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(pairs[0][0], pairs[0][1])\\n\\t\\telse:\\n\\t\\t\\tprint(len(pairs))\\n\\t\\t\\tif len(pairs) != 0:\\n\\t\\t\\t\\tfor j in range(len(pairs)):\\n\\t\\t\\t\\t\\tprint(pairs[j][0], pairs[j][1])\\n\\texcept:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tma = max(a)\\n\\tarr = []\\n\\tma1 = n - ma\\n\\tans = 0\\n\\tdp = [0] * (ma + 1)\\n\\tc = 0\\n\\tfor i in range(ma):\\n\\t\\tif a[i] <= ma and dp[a[i]] == 0:\\n\\t\\t\\tdp[a[i]] = 1\\n\\t\\t\\tc += 1\\n\\tif c == ma:\\n\\t\\tdp = [0] * (ma1 + 1)\\n\\t\\tc = 0\\n\\t\\tfor i in range(ma, n):\\n\\t\\t\\tif a[i] <= ma1 and dp[a[i]] == 0:\\n\\t\\t\\t\\tdp[a[i]] = 1\\n\\t\\t\\t\\tc += 1\\n\\t\\tif c == ma1:\\n\\t\\t\\tans = 1\\n\\t\\t\\tarr.append([ma, ma1])\\n\\tif ma != ma1:\\n\\t\\tdp = [0] * (ma1 + 1)\\n\\t\\tc = 0\\n\\t\\tfor i in range(ma1):\\n\\t\\t\\tif a[i] <= ma1 and dp[a[i]] == 0:\\n\\t\\t\\t\\tdp[a[i]] = 1\\n\\t\\t\\t\\tc += 1\\n\\t\\tif c == ma1:\\n\\t\\t\\tdp = [0] * (ma + 1)\\n\\t\\t\\tc = 0\\n\\t\\t\\tfor i in range(ma1, n):\\n\\t\\t\\t\\tif a[i] <= ma and dp[a[i]] == 0:\\n\\t\\t\\t\\t\\tdp[a[i]] = 1\\n\\t\\t\\t\\t\\tc += 1\\n\\t\\t\\tif c == ma:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tarr.append([ma1, ma])\\n\\tprint(ans)\\n\\tfor i in arr:\\n\\t\\tprint(*i)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td1 = {}\\n\\td2 = {}\\n\\tfor elem in a:\\n\\t\\td1[elem] = 1 + d1.get(elem, 0)\\n\\tb = []\\n\\ts = sum(a)\\n\\tc = 0\\n\\tfor i in range(n):\\n\\t\\tc += a[i]\\n\\t\\td2[a[i]] = 1 + d2.get(a[i], 0)\\n\\t\\td1[a[i]] -= 1\\n\\t\\tif d1[a[i]] == 0:\\n\\t\\t\\td1.pop(a[i], None)\\n\\t\\tif (i + 1) * (i + 2) // 2 == c and s - c == (n - 1 - i) * (n - i) // 2 and (len(d2) == i + 1) and (len(d1) == n - i - 1):\\n\\t\\t\\tb.append((i + 1, n - i - 1))\\n\\tprint(len(b))\\n\\tfor elem in b:\\n\\t\\tprint(*elem)\\n\", \"import sys\\nstdin = sys.stdin\\ninf = 1 << 60\\nmod = 1000000007\\nni = lambda : int(ns())\\nnin = lambda y: [ni() for _ in range(y)]\\nna = lambda : list(map(int, stdin.readline().split()))\\nnan = lambda y: [na() for _ in range(y)]\\nnf = lambda : float(ns())\\nnfn = lambda y: [nf() for _ in range(y)]\\nnfa = lambda : list(map(float, stdin.readline().split()))\\nnfan = lambda y: [nfa() for _ in range(y)]\\nns = lambda : stdin.readline().rstrip()\\nnsn = lambda y: [ns() for _ in range(y)]\\nncl = lambda y: [list(ns()) for _ in range(y)]\\nnas = lambda : stdin.readline().split()\\nfrom collections import defaultdict\\n\\ndef check(a):\\n\\ta.sort()\\n\\tj = 1\\n\\tfor i in a:\\n\\t\\tif i != j:\\n\\t\\t\\treturn False\\n\\t\\tj += 1\\n\\treturn True\\n\\ndef sol():\\n\\tn = ni()\\n\\ta = na()\\n\\tmaxA = max(a)\\n\\tans = []\\n\\tif check(a[:n - maxA]) and check(a[n - maxA:]):\\n\\t\\tans.append((n - maxA, maxA))\\n\\tif maxA * 2 != n and check(a[:maxA]) and check(a[maxA:]):\\n\\t\\tans.append((maxA, n - maxA))\\n\\tprint(len(ans))\\n\\tfor (l, r) in ans:\\n\\t\\tprint(l, r)\\nt = ni()\\nfor i in range(t):\\n\\tsol()\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nimport threading\\nfrom collections import Counter\\nmod = 998244353\\n\\ndef main():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ts = set()\\n\\t\\tarr = list(map(int, input().split()))\\n\\t\\tma = max(arr)\\n\\t\\tans = []\\n\\t\\ta = [i for i in range(1, n + 10)]\\n\\t\\ts1 = sorted(arr[:ma])\\n\\t\\ts2 = sorted(arr[ma:])\\n\\t\\tif s1 == a[:ma] and s2 == a[:n - ma]:\\n\\t\\t\\tans.append((len(s1), len(s2)))\\n\\t\\ts1 = sorted(arr[:n - ma])\\n\\t\\ts2 = sorted(arr[n - ma:])\\n\\t\\tif s1 == a[:n - ma] and s2 == a[:ma] and (n - ma != ma):\\n\\t\\t\\tans.append((len(s1), len(s2)))\\n\\t\\tprint(len(ans))\\n\\t\\tfor (i, j) in ans:\\n\\t\\t\\tprint(i, j)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(o) for o in input().split()]\\n\\tmaxm = max(a)\\n\\tcount = [0 for i in range(n + 1)]\\n\\tcount1 = [0 for i in range(maxm + 1)]\\n\\tcount2 = [0 for i in range(maxm + 1)]\\n\\tfor i in a:\\n\\t\\tcount[i] += 1\\n\\ti = 1\\n\\twhile count[i] > 1:\\n\\t\\ti += 1\\n\\tlower = i - 1\\n\\tflag1 = 0\\n\\tflag2 = 0\\n\\tfor i in range(maxm):\\n\\t\\tcount1[a[i]] += 1\\n\\tfor i in range(1, maxm + 1):\\n\\t\\tif count1[i] != 1:\\n\\t\\t\\tflag1 = 1\\n\\tfor i in range(n - 1, n - 1 - maxm, -1):\\n\\t\\tcount2[a[i]] += 1\\n\\tfor i in range(1, maxm + 1):\\n\\t\\tif count2[i] != 1:\\n\\t\\t\\tflag2 = 1\\n\\tif lower + maxm is not n:\\n\\t\\tprint(0)\\n\\telif maxm == n:\\n\\t\\tprint(0)\\n\\telif flag1 is 1 and flag2 is 1:\\n\\t\\tprint(0)\\n\\telif flag1 is 0 and flag2 is 0:\\n\\t\\tif maxm == n - maxm:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(maxm, n - maxm)\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(n - maxm, maxm)\\n\\t\\t\\tprint(maxm, n - maxm)\\n\\telif flag1 is 0:\\n\\t\\tprint(1)\\n\\t\\tprint(maxm, n - maxm)\\n\\telif flag2 is 0:\\n\\t\\tprint(1)\\n\\t\\tprint(n - maxm, maxm)\\n\", \"from collections import defaultdict\\n\\ndef traverse(a):\\n\\td = defaultdict(lambda : 0)\\n\\tres_left = [False] * len(a)\\n\\tmx_left = 0\\n\\tfor (i, val) in enumerate(a):\\n\\t\\td[val] += 1\\n\\t\\tif d[val] > 1:\\n\\t\\t\\tbreak\\n\\t\\tmx_left = max(mx_left, val)\\n\\t\\tif mx_left == i + 1:\\n\\t\\t\\tres_left[i] = True\\n\\treturn res_left\\n\\ndef solve(a):\\n\\t(validity_left, validity_right) = (traverse(a), traverse(a[::-1]))\\n\\tvalidity_right = validity_right[::-1]\\n\\tres = list()\\n\\tfor i in range(len(validity_left) - 1):\\n\\t\\tif validity_left[i] and validity_right[i + 1]:\\n\\t\\t\\tres.append((i + 1, n - i - 1))\\n\\treturn res\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\t(right_res, left_res) = ([], [])\\n\\tres = solve(a)\\n\\tprint(len(res))\\n\\tfor r in res:\\n\\t\\tprint(r[0], r[1])\\n\", \"from collections import Counter\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(ai) for ai in input().split()]\\n\\ts = sum(a)\\n\\tsummer = 0\\n\\tres = []\\n\\tsetter = set()\\n\\trsetter = Counter(a)\\n\\trsetter_cnt = n\\n\\tfor (i, ai) in enumerate(a):\\n\\t\\tsummer += ai\\n\\t\\tsetter.add(ai)\\n\\t\\trsetter[ai] -= 1\\n\\t\\tif rsetter[ai] == 0:\\n\\t\\t\\tdel rsetter[ai]\\n\\t\\trsetter_cnt -= 1\\n\\t\\tif summer == (i + 1) * (i + 2) // 2 and len(setter) == i + 1:\\n\\t\\t\\trem = s - summer\\n\\t\\t\\tj = n - i - 1\\n\\t\\t\\tif rem == j * (j + 1) // 2 and rsetter_cnt == len(rsetter):\\n\\t\\t\\t\\tres.append((i + 1, j))\\n\\tprint(len(res))\\n\\tfor (i, j) in res:\\n\\t\\tprint(i, j)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmySet = set()\\n\\trank = 1\\n\\tdpL1 = [0 for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif l[i] in mySet:\\n\\t\\t\\tbreak\\n\\t\\tmySet.add(l[i])\\n\\t\\twhile rank in mySet:\\n\\t\\t\\tmySet.remove(rank)\\n\\t\\t\\trank += 1\\n\\t\\tif len(mySet) == 0:\\n\\t\\t\\tdpL1[i] = 1\\n\\t\\telse:\\n\\t\\t\\tdpL1[i] = 0\\n\\tl.reverse()\\n\\tmySet = set()\\n\\trank = 1\\n\\tdpL2 = [0 for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif l[i] in mySet:\\n\\t\\t\\tbreak\\n\\t\\tmySet.add(l[i])\\n\\t\\twhile rank in mySet:\\n\\t\\t\\tmySet.remove(rank)\\n\\t\\t\\trank += 1\\n\\t\\tif len(mySet) == 0:\\n\\t\\t\\tdpL2[i] = 1\\n\\t\\telse:\\n\\t\\t\\tdpL2[i] = 0\\n\\tdpL2.reverse()\\n\\tres = []\\n\\tfor i in range(n - 1):\\n\\t\\tif dpL1[i] == dpL2[i + 1] == 1:\\n\\t\\t\\tres.append((i + 1, n - i - 1))\\n\\tif len(res) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(res))\\n\\t\\tfor (i, j) in res:\\n\\t\\t\\tprint(i, j)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = max(a)\\n\\tb = []\\n\\tif m == n - m:\\n\\t\\tc = [m]\\n\\telse:\\n\\t\\tc = [n - m, m]\\n\\tfor j in c:\\n\\t\\ta1 = a[:j]\\n\\t\\ta2 = a[j:]\\n\\t\\tif len(a1) == len(set(a1)) and max(a1) == len(a1) and (len(a2) == len(set(a2))) and (max(a2) == len(a2)):\\n\\t\\t\\tb.append(len(a1))\\n\\t\\t\\tb.append(len(a2))\\n\\tbb = int(len(b) / 2)\\n\\tprint(bb)\\n\\tif bb > 0:\\n\\t\\tfor j in range(0, len(b), 2):\\n\\t\\t\\tprint(b[j], b[j + 1])\\n\", \"import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\n\\ndef I():\\n\\treturn [int(iI) for iI in input().split()]\\n\\ndef II():\\n\\treturn int(input())\\n\\ndef SI():\\n\\treturn [i for i in input()]\\nfrom collections import Counter\\nfor _ in range(II()):\\n\\tn = II()\\n\\ta = I()\\n\\tsumm = sum(a)\\n\\tsa = summ\\n\\tsb = 0\\n\\tb = []\\n\\tans = []\\n\\tsta = Counter(a)\\n\\tstb = {}\\n\\twhile a:\\n\\t\\tif sa == len(sta) * (len(sta) + 1) // 2 and sb == len(stb) * (len(stb) + 1) // 2:\\n\\t\\t\\tif len(sta) == len(a) and len(stb) == len(b):\\n\\t\\t\\t\\tans.append([len(a), len(b)])\\n\\t\\tsb += a[-1]\\n\\t\\tsa -= a[-1]\\n\\t\\tsta[a[-1]] -= 1\\n\\t\\tif sta[a[-1]] == 0:\\n\\t\\t\\tdel sta[a[-1]]\\n\\t\\tif a[-1] in stb:\\n\\t\\t\\tstb[a[-1]] += 1\\n\\t\\telse:\\n\\t\\t\\tstb[a[-1]] = 1\\n\\t\\tb.append(a.pop())\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"import os\\nimport sys\\nfrom math import *\\nfrom io import BytesIO, IOBase\\n\\ndef vsInput():\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef value():\\n\\treturn map(int, input().split())\\n\\ndef array():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef calc(n):\\n\\treturn n * (n - 1) // 2\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = array()\\n\\tf = {}\\n\\tans = []\\n\\tflag = 1\\n\\tfor i in a:\\n\\t\\ttry:\\n\\t\\t\\tf[i] += 1\\n\\t\\texcept:\\n\\t\\t\\tf[i] = 1\\n\\t\\tif f[i] >= 3:\\n\\t\\t\\tflag = 0\\n\\t\\t\\tbreak\\n\\tif flag == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tma = [a[0]]\\n\\tfor i in range(1, n):\\n\\t\\tma.append(max(ma[-1], a[i]))\\n\\tma[-1] = (ma[-1], a[-1])\\n\\tfor i in range(1, n):\\n\\t\\tma[n - 1 - i] = (ma[n - 1 - i], max(ma[n - i][1], a[n - i - 1]))\\n\\tfor i in range(n - 1):\\n\\t\\tif i + 1 == ma[i][0] and n - i - 1 == ma[i + 1][1]:\\n\\t\\t\\tif len(set(a[:i + 1])) == i + 1 and len(set(a[i + 1:])) == n - i - 1:\\n\\t\\t\\t\\tans.append((i + 1, n - i - 1))\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"import sys\\nfrom collections import Counter\\nmod = 10 ** 9 + 7\\nINF = float('inf')\\n\\ndef inp():\\n\\treturn int(sys.stdin.readline())\\n\\ndef inpl():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef chk(tmp):\\n\\tnow = 0\\n\\tfor i in tmp:\\n\\t\\tif i - now != 1:\\n\\t\\t\\treturn False\\n\\t\\tnow = i\\n\\treturn True\\nfor _ in range(inp()):\\n\\tres = []\\n\\tn = inp()\\n\\ta = inpl()\\n\\tc = Counter(a)\\n\\tok = True\\n\\tnow = 0\\n\\ts = set()\\n\\tfor key in sorted(list(c)):\\n\\t\\tif c[key] >= 3 or key - now > 1:\\n\\t\\t\\tok = False\\n\\t\\t\\tbreak\\n\\t\\tif c[key] == 2:\\n\\t\\t\\ts.add(key)\\n\\t\\tnow = key\\n\\tif not ok:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\td = [-1] * n\\n\\tss = set()\\n\\tfor (i, x) in enumerate(a):\\n\\t\\tif x in ss:\\n\\t\\t\\td[i] = 1\\n\\t\\telif x in s:\\n\\t\\t\\td[i] = 0\\n\\t\\t\\tss.add(x)\\n\\tcnt = d.count(0)\\n\\tind = 0\\n\\tok = True\\n\\twhile cnt > 0 and ind < n:\\n\\t\\tif d[ind] != 0:\\n\\t\\t\\tok = False\\n\\t\\t\\tbreak\\n\\t\\tcnt -= 1\\n\\t\\tind += 1\\n\\tif ok:\\n\\t\\tok = True\\n\\t\\ttmp1 = sorted(a[:ind])\\n\\t\\ttmp2 = sorted(a[ind:])\\n\\t\\tif chk(tmp1) and chk(tmp2):\\n\\t\\t\\tres += [[ind, n - ind]]\\n\\tcnt = d.count(1)\\n\\tind = n - 1\\n\\tok = True\\n\\twhile cnt > 0 and 0 <= ind:\\n\\t\\tif d[ind] != 1:\\n\\t\\t\\tok = False\\n\\t\\t\\tbreak\\n\\t\\tcnt -= 1\\n\\t\\tind -= 1\\n\\tif ok:\\n\\t\\tok = True\\n\\t\\ttmp1 = sorted(a[:ind + 1])\\n\\t\\ttmp2 = sorted(a[ind + 1:])\\n\\t\\tif chk(tmp1) and chk(tmp2):\\n\\t\\t\\tres += [[ind + 1, n - ind - 1]]\\n\\tif len(res) == 2 and res[0] == res[1]:\\n\\t\\tres = [res[0]]\\n\\tprint(len(res))\\n\\tfor i in res:\\n\\t\\tprint(*i)\\n\", \"def check(n):\\n\\treturn n * (n + 1) // 2\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ttemp = [0] * (n + 1)\\n\\ts = 0\\n\\t(pre, suf) = ([0] * n, [0] * n)\\n\\tfor i in range(n):\\n\\t\\tif temp[l[i]] == 1:\\n\\t\\t\\tbreak\\n\\t\\ttemp[l[i]] = 1\\n\\t\\ts += l[i]\\n\\t\\tif s == check(i + 1):\\n\\t\\t\\tpre[i] = 1\\n\\ts = 0\\n\\ttemp = [0] * (n + 1)\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif temp[l[i]]:\\n\\t\\t\\tbreak\\n\\t\\ttemp[l[i]] = 1\\n\\t\\ts += l[i]\\n\\t\\tif s == check(n - i):\\n\\t\\t\\tsuf[i] = 1\\n\\tans = []\\n\\tfor i in range(1, n):\\n\\t\\tif pre[i - 1] == 1 and suf[i] == 1:\\n\\t\\t\\tans.append([i, n - i])\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(i[0], i[1])\\n\", \"from sys import stdin, stdout\\n\\ndef read():\\n\\tx0 = stdin.readline().rstrip()\\n\\treturn x0\\n\\ndef __main__():\\n\\tt = int(read())\\n\\tfor t0 in range(t):\\n\\t\\tn = int(read())\\n\\t\\tax = [int(i) for i in read().split()]\\n\\t\\tind = 0\\n\\t\\tfl = True\\n\\t\\ts1_left = set()\\n\\t\\twhile fl:\\n\\t\\t\\telem = ax[ind]\\n\\t\\t\\tif elem not in s1_left:\\n\\t\\t\\t\\ts1_left.add(elem)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfl = False\\n\\t\\t\\tind += 1\\n\\t\\t\\tif ind == n:\\n\\t\\t\\t\\tfl = False\\n\\t\\ts2_left = set(ax[ind - 1:])\\n\\t\\tres1left = len(s1_left)\\n\\t\\tres2left = n - res1left\\n\\t\\tsx = set((g + 1 for g in range(res1left)))\\n\\t\\tsy = set((g + 1 for g in range(res2left)))\\n\\t\\tif sx - s1_left or sy - s2_left:\\n\\t\\t\\tres1 = False\\n\\t\\telse:\\n\\t\\t\\tres1 = True\\n\\t\\tind = n - 1\\n\\t\\tfl = True\\n\\t\\ts1_right = set()\\n\\t\\twhile fl:\\n\\t\\t\\telem = ax[ind]\\n\\t\\t\\tif elem not in s1_right:\\n\\t\\t\\t\\ts1_right.add(elem)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfl = False\\n\\t\\t\\tind -= 1\\n\\t\\t\\tif ind < 0:\\n\\t\\t\\t\\tfl = False\\n\\t\\ts2_right = set(ax[:ind + 2])\\n\\t\\tres1right = len(s1_right)\\n\\t\\tres2right = n - res1right\\n\\t\\tsx = set((g + 1 for g in range(res1right)))\\n\\t\\tsy = set((g + 1 for g in range(res2right)))\\n\\t\\tif sx - s1_right or sy - s2_right:\\n\\t\\t\\tres2 = False\\n\\t\\telse:\\n\\t\\t\\tres2 = True\\n\\t\\tif res1 and res2:\\n\\t\\t\\tp0 = '2\\\\n'\\n\\t\\telif res1 or res2:\\n\\t\\t\\tp0 = '1\\\\n'\\n\\t\\telse:\\n\\t\\t\\tp0 = '0\\\\n'\\n\\t\\tif p0 == '2\\\\n' and res1left == res2right:\\n\\t\\t\\tp0 = '1\\\\n'\\n\\t\\t\\tp = str(res1left) + ' ' + str(res2left) + '\\\\n'\\n\\t\\t\\tstdout.write(p0)\\n\\t\\t\\tstdout.write(p)\\n\\t\\telse:\\n\\t\\t\\tstdout.write(p0)\\n\\t\\t\\tif res1:\\n\\t\\t\\t\\tp = str(res1left) + ' ' + str(res2left) + '\\\\n'\\n\\t\\t\\t\\tstdout.write(p)\\n\\t\\t\\tif res2:\\n\\t\\t\\t\\tp = str(res2right) + ' ' + str(res1right) + '\\\\n'\\n\\t\\t\\t\\tstdout.write(p)\\n__main__()\\n\", \"for test in range(int(input())):\\n\\tn = int(input())\\n\\tlt = [int(x) for x in input().split()]\\n\\tm = max(lt)\\n\\tp1 = set(lt[:m])\\n\\tp2 = set(lt[m:])\\n\\tq1 = set(lt[:n - m])\\n\\tq2 = set(lt[n - m:])\\n\\tnlt = []\\n\\tif max(p1) == len(p1) and max(p2) == len(p2) and (len(p1) + len(p2) == n):\\n\\t\\tnlt += [[m, n - m]]\\n\\tif max(q1) == len(q1) and max(q2) == len(q2) and (len(q1) + len(q2) == n):\\n\\t\\tnlt += [[n - m, m]]\\n\\tif len(nlt) == 1:\\n\\t\\tprint(1)\\n\\t\\tprint(*nlt[0])\\n\\telif len(nlt) == 2:\\n\\t\\tif nlt[0] == nlt[1]:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(*nlt[0])\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(*nlt[0])\\n\\t\\t\\tprint(*nlt[1])\\n\\telse:\\n\\t\\tprint(0)\\n\", \"T = int(input())\\nfor t in range(T):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tc = 0\\n\\tcs = 0\\n\\tcnt = [0] * n\\n\\tcnts = [0] * n\\n\\tfor i in range(n):\\n\\t\\tc += a[i]\\n\\t\\tcs += a[i] * a[i] * a[i]\\n\\t\\tcnt[i] = c\\n\\t\\tcnts[i] = cs\\n\\tc = 0\\n\\tres = []\\n\\tfor i in range(n - 1):\\n\\t\\tN = i + 1\\n\\t\\tk = n - N\\n\\t\\tif cnt[i] == N * (N + 1) // 2 and cnt[-1] - cnt[i] == k * (k + 1) // 2 and (cnts[i] == N * (N + 1) // 2 * (N * (N + 1) // 2)) and (cnts[-1] - cnts[i] == k * (k + 1) // 2 * (k * (k + 1) // 2)):\\n\\t\\t\\tc += 1\\n\\t\\t\\tres.append([N, k])\\n\\tprint(c)\\n\\tfor i in res:\\n\\t\\tprint(*i)\\n\", \"def check(a1, a2):\\n\\t(o1, o2) = (True, True)\\n\\tfor i in range(len(a1)):\\n\\t\\tif a1[i] != i + 1:\\n\\t\\t\\to1 = False\\n\\tfor i in range(len(a2)):\\n\\t\\tif a2[i] != i + 1:\\n\\t\\t\\to2 = False\\n\\tif o1 and o2:\\n\\t\\treturn True\\n\\treturn False\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tdiv = n - max(A)\\n\\tm = max(A)\\n\\tb1 = A.copy()\\n\\tb11 = sorted(b1[:m])\\n\\tb12 = sorted(b1[m:])\\n\\t(o1, o2) = (False, False)\\n\\tif check(b11, b12):\\n\\t\\to1 = True\\n\\tb2 = A.copy()\\n\\tb21 = sorted(b2[:div])\\n\\tb22 = sorted(b2[div:])\\n\\tif check(b21, b22):\\n\\t\\to2 = True\\n\\tif o1 and o2:\\n\\t\\tif div != m:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(m, div)\\n\\t\\t\\tprint(div, m)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, div)\\n\\telif o1:\\n\\t\\tprint(1)\\n\\t\\tprint(m, div)\\n\\telif o2:\\n\\t\\tprint(1)\\n\\t\\tprint(div, m)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tinput()\\n\\tnums = list(map(int, input().split()))\\n\\tlcandidates = set()\\n\\tseen = set()\\n\\tmaxseen = -1\\n\\tfor (i, x) in enumerate(nums):\\n\\t\\tseen.add(x)\\n\\t\\tmaxseen = max(maxseen, x)\\n\\t\\tif len(seen) == i + 1 and maxseen == len(seen):\\n\\t\\t\\tlcandidates.add(i)\\n\\tseen = set()\\n\\tmaxseen = -1\\n\\tsol = 0\\n\\tsols = []\\n\\tfor i in range(len(nums) - 1, -1, -1):\\n\\t\\tx = nums[i]\\n\\t\\tseen.add(x)\\n\\t\\tmaxseen = max(maxseen, x)\\n\\t\\tif len(seen) == len(nums) - i and maxseen == len(seen) and (i - 1 in lcandidates):\\n\\t\\t\\tsol += 1\\n\\t\\t\\tsols.append((i, len(nums) - i))\\n\\tprint(sol)\\n\\tfor (l, r) in sols:\\n\\t\\tprint(l, r)\\n\", \"from math import *\\nfrom copy import *\\nfrom string import *\\nfrom random import *\\nfrom bisect import *\\nfrom sys import stdin\\nfrom sys import maxsize\\nfrom operator import *\\nfrom itertools import *\\nfrom collections import Counter\\nfrom collections import defaultdict\\n\\ndef solve(l):\\n\\tn = len(l)\\n\\tpre = [0] + list(accumulate(l))\\n\\tans = []\\n\\t(d1, d2) = (defaultdict(int), defaultdict(int))\\n\\t(left, right) = ([0] * n, [0] * n)\\n\\t(s1, s2) = (set(), set())\\n\\t(minn, maxx) = (maxsize, -maxsize)\\n\\tfor i in range(n):\\n\\t\\tminn = min(minn, l[i])\\n\\t\\tmaxx = max(maxx, l[i])\\n\\t\\ts1.add(l[i])\\n\\t\\tnn = len(s1)\\n\\t\\tif minn == 1 and maxx == nn and (i + 1 == nn):\\n\\t\\t\\tif i == 0:\\n\\t\\t\\t\\tleft[i] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tleft[i] = 1\\n\\tj = 0\\n\\t(minn, maxx) = (maxsize, -maxsize)\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tminn = min(minn, l[i])\\n\\t\\tmaxx = max(maxx, l[i])\\n\\t\\ts2.add(l[i])\\n\\t\\tnn = len(s2)\\n\\t\\tif minn == 1 and maxx == nn and (j + 1 == nn):\\n\\t\\t\\tif i == n - 1:\\n\\t\\t\\t\\tright[i] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tright[i] = 1\\n\\t\\tj += 1\\n\\tans = []\\n\\tfor i in range(n - 1):\\n\\t\\tif left[i] == right[i + 1] == 1:\\n\\t\\t\\tans.append([i + 1, n - i - 1])\\n\\treturn ans\\n\\tfor i in range(1, n + 1):\\n\\t\\tpred = i * (i + 1) // 2\\n\\t\\td1[l[i - 1]] += 1\\n\\t\\td2[l[n - i]] += 1\\n\\t\\tif len(d1) == i and len(d2) == n - i and (pre[i] == pred) and (pre[-1] - pre[i] == (n - i) * (n - i + 1) // 2) and (n - i != 0):\\n\\t\\t\\tans.append([i, n - i])\\n\\treturn ans\\nT = int(input())\\nfor _ in range(T):\\n\\tN = int(stdin.readline())\\n\\tl = list(map(int, stdin.readline().rstrip().split()))\\n\\tans = solve(l)\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"t = int(input())\\nfor query in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tresults = set()\\n\\tleft_side = set()\\n\\ti = 0\\n\\twhile True:\\n\\t\\tnext = a[i]\\n\\t\\tif next not in left_side:\\n\\t\\t\\tleft_side.add(next)\\n\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tleft_len = len(left_side)\\n\\tif all([l <= left_len for l in left_side]):\\n\\t\\tright_side = set(a[i:])\\n\\t\\tdesired_right_len = n - i\\n\\t\\tright_len = len(right_side)\\n\\t\\tif right_len == desired_right_len and all([r <= right_len for r in right_side]):\\n\\t\\t\\tresults.add(str(left_len) + ' ' + str(right_len))\\n\\tright_side = set()\\n\\ti = n - 1\\n\\twhile True:\\n\\t\\tnext = a[i]\\n\\t\\tif next not in right_side:\\n\\t\\t\\tright_side.add(next)\\n\\t\\t\\ti -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tright_len = len(right_side)\\n\\tif all([r <= right_len for r in right_side]):\\n\\t\\tleft_side = set(a[0:i + 1])\\n\\t\\tdesired_left_len = i + 1\\n\\t\\tleft_len = len(left_side)\\n\\t\\tif left_len == desired_left_len and all([l <= left_len for l in left_side]):\\n\\t\\t\\tresults.add(str(left_len) + ' ' + str(right_len))\\n\\tprint(len(results))\\n\\tfor result in results:\\n\\t\\tprint(result)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tls = [int(x) for x in input().split()]\\n\\tm = max(ls)\\n\\tls1 = [i for i in range(1, m + 1)]\\n\\tls2 = [j for j in range(1, n - m + 1)]\\n\\tfirst = False\\n\\tlast = False\\n\\tlsp = ls[0:m]\\n\\tlsq = ls[m:n]\\n\\tlsp.sort()\\n\\tlsq.sort()\\n\\tif lsp == ls1 and lsq == ls2:\\n\\t\\tfirst = True\\n\\tlsp = ls[0:n - m]\\n\\tlsq = ls[n - m:n]\\n\\tlsp.sort()\\n\\tlsq.sort()\\n\\tif lsp == ls2 and lsq == ls1:\\n\\t\\tlast = True\\n\\tif first and last:\\n\\t\\tif m != n - m:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(m, n - m)\\n\\t\\t\\tprint(n - m, m)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(m, n - m)\\n\\telif first or last:\\n\\t\\tprint(1)\\n\\t\\tif first:\\n\\t\\t\\tprint(m, n - m)\\n\\t\\telse:\\n\\t\\t\\tprint(n - m, m)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import random\\nimport math\\nfrom collections import defaultdict\\nimport itertools\\nfrom sys import stdin, stdout\\nimport sys\\nimport operator\\nfrom decimal import Decimal\\np2D = lambda x: print(*x, sep='\\\\n')\\n\\ndef II():\\n\\treturn int(sys.stdin.buffer.readline())\\n\\ndef MI():\\n\\treturn map(int, sys.stdin.buffer.readline().split())\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.buffer.readline().split()))\\n\\ndef LLI(rows_number):\\n\\treturn [LI() for _ in range(rows_number)]\\n\\ndef BI():\\n\\treturn sys.stdin.buffer.readline().rstrip()\\n\\ndef SI():\\n\\treturn sys.stdin.buffer.readline().rstrip().decode()\\n\\ndef li():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef lli(rows):\\n\\treturn [li() for _ in range(rows)]\\n\\ndef si():\\n\\treturn input()\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef ins():\\n\\treturn input().split()\\n\\ndef main():\\n\\tfor _ in range(ii()):\\n\\t\\tn = ii()\\n\\t\\ta = li()\\n\\t\\tm = max(a)\\n\\t\\tcnt = 0\\n\\t\\tans = []\\n\\t\\tp1 = a[:m]\\n\\t\\tp2 = a[m:]\\n\\t\\tq1 = a[:n - m]\\n\\t\\tq2 = a[n - m:]\\n\\t\\tp1.sort()\\n\\t\\tp2.sort()\\n\\t\\tq1.sort()\\n\\t\\tq2.sort()\\n\\t\\tr1 = list(range(1, m + 1))\\n\\t\\tr2 = list(range(1, n - m + 1))\\n\\t\\tif p1 == r1 and p2 == r2:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\tans.append('{} {}'.format(m, n - m))\\n\\t\\tif n - m != m:\\n\\t\\t\\tif q1 == r2 and q2 == r1:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\t\\tans.append('{} {}'.format(n - m, m))\\n\\t\\tprint(cnt)\\n\\t\\tfor i in range(cnt):\\n\\t\\t\\tprint(ans[i])\\nmain()\\n\", \"def check_if_permutation(array):\\n\\tget_max = len(array)\\n\\tlist_range = list(range(1, get_max + 1))\\n\\tset_array = set(array)\\n\\tfor i in list_range:\\n\\t\\tif i not in set_array:\\n\\t\\t\\treturn False\\n\\treturn True\\ntest_cases = int(input(''))\\nfor i in range(test_cases):\\n\\tlength = int(input(''))\\n\\tstring = [int(x) for x in str(input('')).split(' ')]\\n\\tset2 = set()\\n\\tleft_right_set = list()\\n\\tfor i in string:\\n\\t\\tif i not in set2:\\n\\t\\t\\tset2.add(i)\\n\\t\\t\\tleft_right_set.append(i)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tleft_right_set2 = string[len(left_right_set):]\\n\\tset3 = set()\\n\\tright_left1 = list()\\n\\tfor i in string[::-1]:\\n\\t\\tif i not in set3:\\n\\t\\t\\tset3.add(i)\\n\\t\\t\\tright_left1.append(i)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tright_left2 = string[::-1][len(right_left1):]\\n\\tif check_if_permutation(left_right_set) == True and check_if_permutation(left_right_set2) == True and (check_if_permutation(right_left1) == True) and (check_if_permutation(right_left2) == True):\\n\\t\\tif str(len(right_left2)) == str(len(left_right_set)):\\n\\t\\t\\tprint(1)\\n\\t\\t\\tprint(str(len(left_right_set)) + ' ' + str(len(left_right_set2)))\\n\\t\\telse:\\n\\t\\t\\tprint(2)\\n\\t\\t\\tprint(str(len(left_right_set)) + ' ' + str(len(left_right_set2)))\\n\\t\\t\\tprint(str(len(right_left2)) + ' ' + str(len(right_left1)))\\n\\telif (check_if_permutation(left_right_set) == True and check_if_permutation(left_right_set2) == True) and (check_if_permutation(right_left1) == False or check_if_permutation(right_left2) == False) == True:\\n\\t\\tprint(1)\\n\\t\\tprint(str(len(left_right_set)) + ' ' + str(len(left_right_set2)))\\n\\telif (check_if_permutation(left_right_set) == False or check_if_permutation(left_right_set2) == False) == True and (check_if_permutation(right_left1) == True and check_if_permutation(right_left2) == True) == True:\\n\\t\\tprint(1)\\n\\t\\tprint(str(len(right_left2)) + ' ' + str(len(right_left1)))\\n\\telse:\\n\\t\\tprint(0)\\n\", \"from sys import stdin, stdout\\nfrom collections import defaultdict\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, stdin.readline().split()))\\n\\td = defaultdict(int)\\n\\t(mx, mx1) = (0, 0)\\n\\t(mn, mn1) = (20000000, 200000000)\\n\\t(ans, ans1) = (True, True)\\n\\tc = 0\\n\\tl1 = []\\n\\tl2 = []\\n\\td1 = defaultdict(int)\\n\\td3 = defaultdict(int)\\n\\td4 = defaultdict(int)\\n\\tfor j in range(n):\\n\\t\\tmx = max(mx, l[j])\\n\\t\\tmn = min(mn, l[j])\\n\\t\\td[l[j]] += 1\\n\\t\\tif d[l[j]] >= 2:\\n\\t\\t\\tans = False\\n\\t\\t\\tbreak\\n\\t\\tif mx == j + 1 and mn == 1 and (ans == True):\\n\\t\\t\\td3[str(j + 1) + ' ' + str(n - j - 1)] = 1\\n\\tfor j in range(n):\\n\\t\\tmx1 = max(mx1, l[n - 1 - j])\\n\\t\\tmn1 = min(mn1, l[n - 1 - j])\\n\\t\\td1[l[n - 1 - j]] += 1\\n\\t\\tif d1[l[n - 1 - j]] >= 2:\\n\\t\\t\\tans1 = False\\n\\t\\t\\tbreak\\n\\t\\tif mx1 == j + 1 and mn1 == 1 and (ans1 == True):\\n\\t\\t\\td4[str(n - j - 1) + ' ' + str(j + 1)] = 1\\n\\tfor j in d3:\\n\\t\\tif d4[j] == 1:\\n\\t\\t\\tc += 1\\n\\t\\t\\tl1.append(j)\\n\\tprint(c)\\n\\tfor j in range(c):\\n\\t\\tprint(l1[j])\\n\", \"import sys\\nreader = (s.rstrip() for s in sys.stdin)\\ninput = reader.__next__\\n\\ndef gift():\\n\\tfor _ in range(t):\\n\\t\\tina = int(input())\\n\\t\\tlst = list(map(int, input().split()))\\n\\t\\tansp = [lst[0]] + [None] * (ina - 1)\\n\\t\\tansb = [None] * (ina - 1) + [lst[ina - 1]]\\n\\t\\tdic1 = {lst[0]: 1}\\n\\t\\tdic2 = {}\\n\\t\\tfor i in range(1, ina):\\n\\t\\t\\tfront = lst[i]\\n\\t\\t\\tback = lst[ina - i - 1]\\n\\t\\t\\tcurrmaxf = ansp[i - 1]\\n\\t\\t\\tcurrmaxb = ansb[ina - i]\\n\\t\\t\\tansp[i] = max(front, currmaxf)\\n\\t\\t\\tansb[ina - i - 1] = max(back, currmaxb)\\n\\t\\t\\tfreq = dic2.get(lst[i], 0)\\n\\t\\t\\tdic2[lst[i]] = freq + 1\\n\\t\\t(len1, len2) = (len(dic1), len(dic2))\\n\\t\\tans = []\\n\\t\\tif ansp[0] == 1 and ansb[1] == len2 and (ansb[1] == ina - 1):\\n\\t\\t\\tans.append([1, ina - 1])\\n\\t\\tfor i in range(1, ina - 1):\\n\\t\\t\\tfront = ansp[i]\\n\\t\\t\\tback = ansb[i + 1]\\n\\t\\t\\tele = lst[i]\\n\\t\\t\\tfreq1 = dic1.get(ele)\\n\\t\\t\\tif freq1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tlen1 += 1\\n\\t\\t\\t\\tdic1[ele] = 1\\n\\t\\t\\tfreq2 = dic2.get(ele)\\n\\t\\t\\tdic2[ele] = freq2 - 1\\n\\t\\t\\tif freq2 == 1:\\n\\t\\t\\t\\tlen2 -= 1\\n\\t\\t\\tif front == i + 1 and back == ina - i - 1 and (front == len1) and (back == len2):\\n\\t\\t\\t\\tans.append([i + 1, ina - (i + 1)])\\n\\t\\tyield len(ans)\\n\\t\\tfor kap in ans:\\n\\t\\t\\tyield (str(kap[0]) + ' ' + str(kap[1]))\\nt = int(input())\\nans = gift()\\nprint(*ans, sep='\\\\n')\\n\", \"import sys\\nimport math as m\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tc = [0] * n\\n\\tfor (i, x) in enumerate(a):\\n\\t\\tc[x] += 1\\n\\td = 0\\n\\tfor i in range(1, n):\\n\\t\\tif c[i] != 2:\\n\\t\\t\\tbreak\\n\\t\\td += 1\\n\\te = d > 0\\n\\te = e and all((i == j for (i, j) in zip(sorted(a[:d]), range(1, d + 1))))\\n\\te = e and all((i == j for (i, j) in zip(sorted(a[d:]), range(1, n - d + 1))))\\n\\tf = d > 0 and 2 * d < n\\n\\tf = f and all((i == j for (i, j) in zip(sorted(a[:n - d]), range(1, n - d + 1))))\\n\\tf = f and all((i == j for (i, j) in zip(sorted(a[n - d:]), range(1, d + 1))))\\n\\tprint(e + f)\\n\\tif e:\\n\\t\\tprint(d, n - d)\\n\\tif f:\\n\\t\\tprint(n - d, d)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmin1 = float('inf')\\n\\tmax1 = 0\\n\\ts1 = set()\\n\\tis_perm_pref = [False]\\n\\tfor i in range(n):\\n\\t\\tmin1 = min(min1, a[i])\\n\\t\\tmax1 = max(max1, a[i])\\n\\t\\ts1.add(a[i])\\n\\t\\tif len(s1) == i + 1 and min1 == 1 and (max1 == i + 1):\\n\\t\\t\\tis_perm_pref.append(True)\\n\\t\\telse:\\n\\t\\t\\tis_perm_pref.append(False)\\n\\tmin2 = float('inf')\\n\\tmax2 = 0\\n\\ts2 = set()\\n\\tis_perm_suff = [False]\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tmin2 = min(min2, a[i])\\n\\t\\tmax2 = max(max2, a[i])\\n\\t\\ts2.add(a[i])\\n\\t\\tif len(s2) == n - i and min2 == 1 and (max2 == n - i):\\n\\t\\t\\tis_perm_suff.append(True)\\n\\t\\telse:\\n\\t\\t\\tis_perm_suff.append(False)\\n\\tis_perm_suff.reverse()\\n\\tans = []\\n\\tfor i in range(n + 1):\\n\\t\\tif is_perm_pref[i] and is_perm_suff[i]:\\n\\t\\t\\tans.append((i, n - i))\\n\\tprint(len(ans))\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 1 1\\n6\\n2 4 1 3 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 1 1\\n6\\n2 4 1 4 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 2 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 5 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 10 1 10 2\\n3\\n1 2 1\\n\", \"6\\n5\\n2 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 1 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 10 1 10 2\\n3\\n1 2 1\\n\", \"6\\n5\\n2 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n2 3 1 1\\n12\\n2 1 10 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n2 3 1 1\\n12\\n2 1 10 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 5 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 2\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 2 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 3 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 2\\n4\\n1 3 3 1\\n12\\n2 1 3 5 5 6 7 8 9 1 10 2\\n3\\n1 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 5 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 10 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 1 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 10 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 6 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n2 3 3 1\\n12\\n2 1 10 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 5 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 6 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 6\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 2 1 1 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 2 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 1 1\\n12\\n2 1 10 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 10 1 10 2\\n3\\n2 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 1 3 6 11 8 6 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 3 1 3\\n4\\n2 3 3 1\\n12\\n2 1 10 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 6 4 4 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n2 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 6\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 2 1 1 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 2 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 2 10 3\\n3\\n1 2 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 2\\n12\\n2 1 3 4 5 6 7 8 10 1 10 2\\n3\\n2 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n1 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 1 3 6 11 8 6 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 1 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 2 10 3\\n3\\n1 2 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 2\\n12\\n2 1 3 4 5 6 11 8 10 1 10 2\\n3\\n2 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 2\\n12\\n2 1 3 4 5 6 11 8 10 1 10 2\\n3\\n2 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 2 2\\n12\\n2 1 3 4 5 6 11 8 10 1 10 2\\n3\\n2 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 6 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 2 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 2\\n4\\n1 3 3 1\\n12\\n2 1 5 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 3 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 1 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n1 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 10 4 3 6 9 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n2 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 4 4 3 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 2\\n12\\n2 1 3 4 3 6 11 8 6 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 5 5 6 7 8 9 1 10 2\\n3\\n1 2 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 1 6 4 3 6 7 8 9 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 2 3 4 3 6 7 8 9 1 10 6\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 2 1 1 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 2 10 3\\n3\\n2 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 1 3 6 11 8 6 1 10 1\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 3 1 3\\n4\\n2 3 3 1\\n12\\n2 1 10 4 3 6 7 8 9 1 7 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 2\\n6\\n2 2 1 1 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 2 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 2 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 2 10 3\\n3\\n1 2 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n1 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 1 3 5 11 8 6 1 10 3\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 2 1 3 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 5 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 2\\n4\\n1 3 3 1\\n12\\n2 1 5 4 3 6 7 8 9 1 10 3\\n3\\n2 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 1 3 2\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 7 8 9 1 10 3\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n1 4 1 3 3 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 3 6 11 8 9 1 10 3\\n3\\n2 1 2\\n\", \"6\\n5\\n2 4 3 2 1\\n6\\n2 4 1 3 3 1\\n4\\n2 1 1 1\\n4\\n1 3 3 1\\n12\\n2 1 4 4 2 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 3 1 3 3 1\\n4\\n2 2 1 3\\n4\\n1 3 3 1\\n12\\n2 2 3 4 3 6 7 8 9 2 10 6\\n3\\n1 1 2\\n\", \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\"], \"outputs\": [\"2\\n1 4\\n4 1\\n1\\n4 2\\n0\\n0\\n1\\n2 10\\n0\\n\", \"0\\n1\\n4 2\\n0\\n0\\n1\\n2 10\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n1\\n2 10\\n0\\n\", \"0\\n0\\n0\\n0\\n1\\n2 10\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n2 3\\n3 2\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n2\\n1 2\\n2 1\\n\", \"0\\n0\\n0\\n0\\n0\\n0\\n\", \"0\\n0\\n0\\n0\\n0\\n2\\n1 2\\n2 1\\n\", \"0\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n1\\n3 1\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n1\\n3 1\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n1\\n4 2\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n1\\n2 2\\n0\\n1\\n2 10\\n0\\n\", \"2\\n2 3\\n3 2\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n1\\n2 2\\n0\\n0\\n2\\n1 2\\n2 1\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"0\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n2\\n1 2\\n2 1\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"0\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n0\\n\", \"0\\n0\\n0\\n0\\n0\\n0\\n\", \"2\\n1 4\\n4 1\\n0\\n0\\n0\\n0\\n1\\n1 2\\n\", \"2\\n1 4\\n4 1\\n1\\n4 2\\n0\\n0\\n1\\n2 10\\n0\\n\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['math', 'implementation']",
    "name": null,
    "source": "codeforces",
    "tags": "['Mathematics', 'Implementation']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/1330/B",
    "Expected Auxiliary Space": null,
    "time_limit": "2 seconds",
    "date": "2020-04-03",
    "picture_num": "0",
    "memory_limit": "256 megabytes",
    "Expected Time Complexity": null
  }
]