[
  {
    "question": "Vasya has a pile, that consists of some number of stones. $n$ times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\n\nYou are given $n$ operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\n\n\n-----Input-----\n\nThe first line contains one positive integer $n$ — the number of operations, that have been made by Vasya ($1 \\leq n \\leq 100$).\n\nThe next line contains the string $s$, consisting of $n$ symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on $i$-th operation, $s_i$ is equal to \"-\" (without quotes), if added, $s_i$ is equal to \"+\" (without quotes).\n\n\n-----Output-----\n\nPrint one integer — the minimal possible number of stones that can be in the pile after these $n$ operations.\n\n\n-----Examples-----\nInput\n3\n---\n\nOutput\n0\nInput\n4\n++++\n\nOutput\n4\nInput\n2\n-+\n\nOutput\n1\nInput\n5\n++-++\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first test, if Vasya had $3$ stones in the pile at the beginning, after making operations the number of stones will be equal to $0$. It is impossible to have less number of piles, so the answer is $0$. Please notice, that the number of stones at the beginning can't be less, than $3$, because in this case, Vasya won't be able to take a stone on some operation (the pile will be empty).\n\nIn the second test, if Vasya had $0$ stones in the pile at the beginning, after making operations the number of stones will be equal to $4$. It is impossible to have less number of piles because after making $4$ operations the number of stones in the pile increases on $4$ stones. So, the answer is $4$.\n\nIn the third test, if Vasya had $1$ stone in the pile at the beginning, after making operations the number of stones will be equal to $1$. It can be proved, that it is impossible to have less number of stones after making the operations.\n\nIn the fourth test, if Vasya had $0$ stones in the pile at the beginning, after making operations the number of stones will be equal to $3$.",
    "solutions": "[\"n = int(input())\\ns = input()\\nans = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans = max(ans - 1, 0)\\nprint(ans)\\n\", \"a = int(input())\\nb = input()\\nc = 0\\nd = 0\\nfor i in range(0, a):\\n\\tif b[i] == '+':\\n\\t\\tc += 1\\n\\t\\tif c < d:\\n\\t\\t\\td = c\\n\\tif b[i] == '-':\\n\\t\\tc -= 1\\n\\t\\tif c < d:\\n\\t\\t\\td = c\\nprint(c - d)\\n\", \"input()\\nc = 0\\nfor b in input():\\n\\tif b == '+':\\n\\t\\tc += 1\\n\\telif c > 0 and b == '-':\\n\\t\\tc -= 1\\nprint(c)\\n\", \"n = int(input())\\ns = input()\\nl = []\\nfor i in range(n):\\n\\tif len(l) > 0 and s[i] == '-':\\n\\t\\tl.pop(-1)\\n\\telif s[i] == '+':\\n\\t\\tl.append('+')\\nprint(len(l))\\n\", \"import math, itertools, fractions, heapq, collections, bisect, sys, queue, copy\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\nmod = 10 ** 9 + 7\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef S():\\n\\treturn input()\\n\\ndef main():\\n\\tn = I()\\n\\ta = 0\\n\\ts = S()\\n\\tsaitei = 0\\n\\tfor x in s:\\n\\t\\tif x == '+':\\n\\t\\t\\ta += 1\\n\\t\\telse:\\n\\t\\t\\ta -= 1\\n\\t\\tsaitei = min(saitei, a)\\n\\tb = abs(saitei)\\n\\tfor x in s:\\n\\t\\tif x == '+':\\n\\t\\t\\tb += 1\\n\\t\\telse:\\n\\t\\t\\tb -= 1\\n\\treturn b\\nprint(main())\\n\", \"n = int(input())\\ns = input()\\nstart = 0\\npedra = 0\\nlista = s.split('-')\\nfor k in range(len(lista)):\\n\\tif k == len(lista) - 1 and lista[k] == '':\\n\\t\\tbreak\\n\\tpedra += len(lista[k])\\n\\tpedra -= 1\\n\\tif pedra < -start:\\n\\t\\tstart = -pedra\\nval = s.count('+') - s.count('-')\\nprint(start + val)\\n\", \"n = int(input())\\ns = input()\\nstones = 0\\nif s[0] == '+':\\n\\tstones += 1\\nfor i in range(n - 1):\\n\\tif s[i + 1] == '-' and stones == 0:\\n\\t\\tcontinue\\n\\telif s[i + 1] == '-':\\n\\t\\tstones -= 1\\n\\telif s[i + 1] == '+':\\n\\t\\tstones += 1\\nprint(stones)\\n\", \"def stones(n, l):\\n\\tc = 0\\n\\tfor (i, item) in enumerate(l):\\n\\t\\tif item == '+':\\n\\t\\t\\tc += 1\\n\\t\\telif c != 0:\\n\\t\\t\\tc -= 1\\n\\tprint(c)\\nn = int(input())\\nl = input()\\nstones(n, l)\\n\", \"(n, t) = (int(input()), 0)\\nfor c in input():\\n\\tif c == '+':\\n\\t\\tt += 1\\n\\telif t != 0:\\n\\t\\tt -= 1\\nprint(t)\\n\", \"n = int(input())\\nr = 0\\nfor v in input().strip():\\n\\tif v == '-':\\n\\t\\tr = max(r - 1, 0)\\n\\telif v == '+':\\n\\t\\tr += 1\\nprint(r)\\n\", \"def cm(s, c):\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i] == c:\\n\\t\\t\\treturn i\\n\\treturn -1\\nn = int(input())\\ns = input()\\nsum = 0\\nstones = 0\\nindex = cm(s, '+')\\nif index == -1:\\n\\tprint(0)\\nelse:\\n\\tfor i in range(index, len(s)):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tstones += 1\\n\\t\\telif stones > 0:\\n\\t\\t\\tstones -= 1\\n\\tprint(stones)\\n\", \"n = int(input())\\ns = input()\\ntotal = 0\\nfor ch in s:\\n\\tif ch == '-':\\n\\t\\ttotal = max(total - 1, 0)\\n\\telse:\\n\\t\\ttotal += 1\\nprint(total)\\n\", \"N = int(input())\\ns = input()\\nls = []\\nfor i in range(101):\\n\\tfor j in s:\\n\\t\\tif j == '-':\\n\\t\\t\\ti -= 1\\n\\t\\t\\tif i < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telse:\\n\\t\\tls.append(i)\\nprint(min(ls))\\n\", \"n = int(input())\\nstr1 = input()\\nm = 0\\nfor i in str1:\\n\\tif i == '+':\\n\\t\\tm += 1\\n\\telif m > 0:\\n\\t\\tm -= 1\\nprint(m)\\n\", \"n = int(input())\\ns = input()\\ninitial = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tinitial = max(0, initial - 1)\\n\\telse:\\n\\t\\tinitial = max(0, initial + 1)\\nprint(initial)\\n\", \"s = input()\\nn = input()\\ncur_h = 0\\nmin_h = 0\\nfor c in n:\\n\\tif c == '+':\\n\\t\\tcur_h += 1\\n\\telse:\\n\\t\\tcur_h -= 1\\n\\tmin_h = min(min_h, cur_h)\\nprint(cur_h - min_h)\\n\", \"input()\\ns = input()\\ncnt = 0\\nfor c in s:\\n\\tif c == '+':\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tcnt -= 1\\n\\t\\tif cnt < 0:\\n\\t\\t\\tcnt = 0\\nprint(cnt)\\n\", \"n = int(input())\\ns = input()\\nz = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tz -= 1\\n\\t\\tif z == -1:\\n\\t\\t\\tz += 1\\n\\telse:\\n\\t\\tz += 1\\nprint(z)\\n\", \"n = int(input())\\ns = input()\\nval = 0\\nfor i in s:\\n\\tif i == '-' and val != 0:\\n\\t\\tval = val - 1\\n\\tif i == '+':\\n\\t\\tval = val + 1\\n\\t\\tcontinue\\nprint(val)\\n\", \"n = int(input())\\ns = input()\\ncnt = 0\\nfor ch in s:\\n\\tif ch == '-':\\n\\t\\tcnt -= 1\\n\\tif ch == '+':\\n\\t\\tcnt += 1\\n\\tif cnt < 0:\\n\\t\\tcnt = 0\\nprint(cnt)\\n\", \"numStones = 0\\nnum = input()\\ns = input()\\nfor i in range(len(s)):\\n\\tif s[i] == '+':\\n\\t\\tnumStones += 1\\n\\telif numStones != 0:\\n\\t\\tnumStones -= 1\\nprint(numStones)\\n\", \"def get_input() -> str:\\n\\tinput()\\n\\toperatinos = input()\\n\\treturn operatinos\\n\\ndef is_enough_stones(stones: int, operations: str) -> bool:\\n\\tfor operation in operations:\\n\\t\\tif operation == '+':\\n\\t\\t\\tstones += 1\\n\\t\\telse:\\n\\t\\t\\tstones -= 1\\n\\t\\tif stones < 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef main():\\n\\toperations = get_input()\\n\\tfor i in range(101):\\n\\t\\tstones = i\\n\\t\\tif is_enough_stones(i, operations):\\n\\t\\t\\tbreak\\n\\tfor operation in operations:\\n\\t\\tif operation == '+':\\n\\t\\t\\tstones += 1\\n\\t\\telse:\\n\\t\\t\\tstones -= 1\\n\\tprint(stones)\\nmain()\\n\", \"n = int(input())\\nans = 0\\nfor i in input():\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telif ans > 0:\\n\\t\\tans -= 1\\nprint(max(ans, 0))\\n\", \"n = int(input())\\na = str(input())\\nm = 0\\nl = len(a)\\nfor i in range(l):\\n\\tif a[i] == '-' and m != 0:\\n\\t\\tm = m - 1\\n\\telif a[i] == '+':\\n\\t\\tm = m + 1\\nprint(m)\\n\", \"n = int(input())\\nflag = True\\ncount = 0\\nmini = 0\\nfor item in input():\\n\\tif item == '-':\\n\\t\\tcount -= 1\\n\\t\\tif count < mini:\\n\\t\\t\\tmini = count\\n\\telse:\\n\\t\\tcount += 1\\nprint(count + abs(mini))\\n\", \"n = int(input())\\ns = input()\\nans = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telif ans == 0:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"from collections import *\\nfrom math import *\\nn = int(input())\\na = list(input())\\nk = 0\\nans = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\n\\tk = min(k, ans)\\nprint(ans - k)\\n\", \"n = int(input())\\nz = input()\\nq = 0\\nqmin = 0\\nfor x in z:\\n\\tif x == '-':\\n\\t\\tq -= 1\\n\\t\\tif qmin > q:\\n\\t\\t\\tqmin = q\\n\\telif x == '+':\\n\\t\\tq += 1\\nprint(abs(qmin) + q)\\n\", \"q = 1\\nfor _ in range(q):\\n\\tn = int(input())\\n\\ts = input()\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '-' and ans > 0:\\n\\t\\t\\tans -= 1\\n\\t\\telif s[i] == '+':\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nn = int(input())\\ns = input()\\nans = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\n\\tif ans < 0:\\n\\t\\tans = 0\\nprint(ans)\\n\", \"n = int(input())\\ns = input('')\\npos = True\\nneg = True\\nn1 = 1000\\nm = 1000\\nfor r in s:\\n\\tif r == '-':\\n\\t\\tn1 -= 1\\n\\tif r == '+':\\n\\t\\tn1 += 1\\n\\tm = min(n1, m)\\nprint(n1 - m)\\n\", \"n = int(input())\\ns = input()\\nk = 0\\nfor i in range(n):\\n\\tif s[i] == '-' and k != 0:\\n\\t\\tk -= 1\\n\\telif s[i] == '+':\\n\\t\\tk += 1\\nprint(k)\\n\", \"n = int(input())\\nl = list(input())\\ncount = 0\\nfor i in range(n):\\n\\tif l[i] == '-':\\n\\t\\tcount -= 1\\n\\t\\tif count < 0:\\n\\t\\t\\tcount = 0\\n\\telif l[i] == '+':\\n\\t\\tcount += 1\\nprint(count)\\n\", \"numberOfoperations = int(input())\\noperations = input()\\nstones = 0\\nfor i in range(numberOfoperations):\\n\\tif operations[i] == '-':\\n\\t\\tstones -= 1\\n\\t\\tif stones < 0:\\n\\t\\t\\tstones = 0\\n\\telif operations[i] == '+':\\n\\t\\tstones += 1\\nprint(stones)\\n\", \"n = int(input())\\nm = 0\\ns = input()\\nfor i in range(n):\\n\\tif s[i] == '-' and m > 0:\\n\\t\\tm -= 1\\n\\tif s[i] == '+':\\n\\t\\tm += 1\\nprint(m)\\n\", \"n = int(input())\\noperations = input()\\nmin_init = 0\\nmin_stones = 0\\nfor operation in operations:\\n\\tif operation == '+':\\n\\t\\tmin_init += 1\\n\\telse:\\n\\t\\tmin_init -= 1\\n\\tif min_init < 0:\\n\\t\\tmin_init = 0\\nprint(min_init)\\n\", \"t = int(input())\\nstr = input()\\ncnt = 0\\nfor i in range(len(str)):\\n\\tif str[i] == '+':\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tcnt -= 1\\n\\t\\tif cnt <= 0:\\n\\t\\t\\tcnt = 0\\nprint(cnt)\\n\", \"input()\\nst = input()\\nans = 0\\nfor c in st:\\n\\tif c == '-':\\n\\t\\tif ans:\\n\\t\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"N = int(input())\\nL = list(input())\\ncount = 0\\nfor i in L:\\n\\tif i == '-':\\n\\t\\tif count == 0:\\n\\t\\t\\tcount += 1\\n\\t\\tcount -= 1\\n\\telse:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"n = int(input())\\nb = input()\\na = []\\na[:0] = b\\nc = 0\\nfor i in range(len(a)):\\n\\tif a[i] == '-':\\n\\t\\tc = c - 1\\n\\telse:\\n\\t\\tc = c + 1\\n\\tif c < 0:\\n\\t\\tc = 0\\nprint(c)\\n\", \"n = int(input())\\ns = input()\\nnr = 0\\nfor x in s:\\n\\tif x == '+':\\n\\t\\tnr += 1\\n\\telse:\\n\\t\\tnr -= 1\\n\\t\\tif nr < 0:\\n\\t\\t\\tnr = 0\\nprint(nr)\\n\", \"n = int(input())\\ns = str(input())\\nsum = 0\\nl = len(s)\\nfor i in range(0, l, 1):\\n\\tif s[i] == '+':\\n\\t\\tsum += 1\\n\\telse:\\n\\t\\tsum -= 1\\n\\t\\tif sum < 0:\\n\\t\\t\\tsum = 0\\nprint(sum)\\n\", \"input()\\ns = str(input())\\ncounter = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tcounter += 1\\n\\telif i == '-' and counter > 0:\\n\\t\\tcounter -= 1\\nprint(counter)\\n\", \"n = int(input())\\nx = 0\\nstr1 = input()\\nfor i in range(n):\\n\\tif str1[i] == '-':\\n\\t\\tx = x - 1\\n\\telse:\\n\\t\\tx = x + 1\\n\\tif x < 0:\\n\\t\\tx = 0\\nprint(x)\\n\", \"n = int(input())\\ns = input()\\nm = 0\\nc = 0\\nfor i in reversed(range(n)):\\n\\tif s[i] == '+':\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tm -= 1\\n\\tc = max(c, m)\\nprint(c)\\n\", \"n = int(input())\\npile = 0\\ns = str(input())\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tif pile != 0:\\n\\t\\t\\tpile -= 1\\n\\telse:\\n\\t\\tpile += 1\\nprint(pile)\\n\", \"n = int(input())\\ns = str(input())\\nl = []\\nl[:0] = s\\ni = 0\\nc = 0\\nd = 0\\nn = 0\\nfor x in l:\\n\\tif x == '-':\\n\\t\\tc = c + 1\\n\\telse:\\n\\t\\td = d + 1\\nif c == len(l):\\n\\tprint('0')\\nelif d == len(l):\\n\\tprint(d)\\nelse:\\n\\tfor x in l:\\n\\t\\tif x == '+':\\n\\t\\t\\tn = n + 1\\n\\t\\telif n > 0:\\n\\t\\t\\tn = n - 1\\n\\tprint(n)\\n\", \"n = int(input())\\ns = input()\\nflag = False\\nans = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tflag = True\\n\\t\\tans += 1\\n\\telif i == '-' and flag and (ans > 0):\\n\\t\\tans -= 1\\nprint(max(0, ans))\\n\", \"n = int(input())\\ns = input()\\nminn = 1\\ncur = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tcur -= 1\\n\\t\\tif cur < minn:\\n\\t\\t\\tminn = cur\\n\\telse:\\n\\t\\tcur += 1\\nif minn < 0:\\n\\tprint(cur + abs(minn))\\nelse:\\n\\tprint(cur)\\n\", \"import sys\\nimport math\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef iinput():\\n\\treturn int(input())\\n\\ndef minput():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef listinput():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\nn = iinput()\\nstones = 0\\ns = input()\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tif stones != 0:\\n\\t\\t\\tstones -= 1\\n\\telse:\\n\\t\\tstones += 1\\nprint(stones)\\n\", \"n = int(input())\\ndi = {'+': 1, '-': 0}\\nl = [di[x] for x in input()]\\ntmp = 0\\nwas = 0\\nfor i in l:\\n\\tif i:\\n\\t\\ttmp += 1\\n\\telif tmp != 0:\\n\\t\\ttmp -= 1\\nprint(tmp)\\n\", \"n = int(input())\\ns = input()\\nm = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tm += 1\\n\\telif m == 0:\\n\\t\\tpass\\n\\telse:\\n\\t\\tm -= 1\\nprint(m)\\n\", \"stones = 0\\nn = int(input())\\nopr = input()\\nfor i in opr:\\n\\tif i == '-' and stones == 0:\\n\\t\\tcontinue\\n\\telif i == '+':\\n\\t\\tstones += 1\\n\\telse:\\n\\t\\tstones -= 1\\nprint(stones)\\n\", \"(n, a, counter) = (int(input()), list(input()), 0)\\nwhile len(a) != 0 and a[0] == '-':\\n\\tdel a[0]\\nfor i in a:\\n\\tif i == '+':\\n\\t\\tcounter += 1\\n\\tif i == '-':\\n\\t\\tcounter = max(counter - 1, 0)\\nprint(counter)\\n\", \"n = int(input())\\ns = list(input())\\ncount_ = 0\\nmin_ = 0\\nfor i in range(0, n):\\n\\tcount_ += (s[i] == '+') - (s[i] == '-')\\n\\tif min_ < count_:\\n\\t\\tmax_ = min_\\n\\telse:\\n\\t\\tmin_ = count_\\nprint(count_ - min_)\\n\", \"import atexit\\nimport io\\nimport sys\\n_I_B = sys.stdin.read().splitlines()\\ninput = iter(_I_B).__next__\\n_O_B = io.StringIO()\\nsys.stdout = _O_B\\n\\n@atexit.register\\ndef write():\\n\\tsys.__stdout__.write(_O_B.getvalue())\\n\\ndef main():\\n\\tn = int(input())\\n\\ts = input()\\n\\tm = 0\\n\\tcp = 0\\n\\tfor i in s:\\n\\t\\tif i == '-':\\n\\t\\t\\tcp -= 1\\n\\t\\telse:\\n\\t\\t\\tcp += 1\\n\\t\\tif cp < 0:\\n\\t\\t\\tm = max(abs(cp), m)\\n\\tprint(cp + m)\\nmain()\\n\", \"n = int(input())\\ns = input()\\nt = 0\\nmn = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tt -= 1\\n\\telse:\\n\\t\\tt += 1\\n\\tmn = min(mn, t)\\nprint(-mn + t)\\n\", \"cnt = int(0)\\nval = int(input())\\nstr = input()\\nfor i in range(0, val):\\n\\tif str[i] == '-':\\n\\t\\tcnt = cnt - 1\\n\\telse:\\n\\t\\tcnt = cnt + 1\\n\\tif cnt < 0:\\n\\t\\tcnt = 0\\nprint(cnt)\\n\", \"n = int(input())\\na = []\\ns = input()\\nb = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tb += 1\\n\\telse:\\n\\t\\tb -= 1\\n\\ta.append(b)\\nmin1 = min(a)\\nif min1 > -1:\\n\\td = 0\\nelse:\\n\\td = -min1\\nprint(d + b)\\n\", \"n = int(input())\\ns = input()\\nsum1 = 0\\nfor i in s:\\n\\tsum1 += i == '+'\\n\\tif sum1 > 0:\\n\\t\\tsum1 -= i == '-'\\nprint(sum1)\\n\", \"def rocks(s):\\n\\t(count1, count2) = (0, 0)\\n\\tfor elem in s:\\n\\t\\tif elem == '-':\\n\\t\\t\\tcount1 -= 1\\n\\t\\telse:\\n\\t\\t\\tcount1 += 1\\n\\t\\tif count1 < count2:\\n\\t\\t\\tcount2 = count1\\n\\treturn count1 - count2\\nn = int(input())\\nt = input()\\nprint(rocks(t))\\n\", \"a = 0\\nn = int(input())\\ns = input()[:n]\\nfor i in s:\\n\\tif i == '-':\\n\\t\\ta = a - 1\\n\\t\\tif a < 0:\\n\\t\\t\\ta = 0\\n\\telif i == '+':\\n\\t\\ta = a + 1\\nprint(a)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nif s.count('+') == 0:\\n\\tprint(0)\\nelse:\\n\\tfor x in range(s.index('+'), n):\\n\\t\\tif s[x] == '+':\\n\\t\\t\\tc += 1\\n\\t\\telif c > 0:\\n\\t\\t\\tc -= 1\\n\\tprint(c)\\n\", \"n = int(input())\\nS = input()\\nif '+' not in S:\\n\\tprint(0)\\nelse:\\n\\tans = 0\\n\\tfor i in range(S.index('+'), len(S)):\\n\\t\\tif S[i] == '+':\\n\\t\\t\\tans += 1\\n\\t\\telif ans > 0:\\n\\t\\t\\tans -= 1\\n\\tprint(ans)\\n\", \"n = int(input())\\ns = [e for e in input()]\\ndict = {'+': s.count('+'), '-': s.count('-')}\\nmenor_global = 0\\naux = 0\\nfor e in s:\\n\\tif e == '-':\\n\\t\\taux -= 1\\n\\t\\tif aux < menor_global:\\n\\t\\t\\tmenor_global = aux\\n\\tif e == '+':\\n\\t\\taux += 1\\ngeral = -menor_global\\nfor e in s:\\n\\tif e == '-':\\n\\t\\tgeral -= 1\\n\\tif e == '+':\\n\\t\\tgeral += 1\\nprint(geral)\\n\", \"n = int(input())\\na = list(input())\\nblah = 0\\nmini = []\\ntemp = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\ttemp -= 1\\n\\t\\tmini.append(temp)\\n\\telse:\\n\\t\\ttemp += 1\\n\\t\\tmini.append(temp)\\nreq = min(mini)\\nt = -1 * min(0, req) + temp\\nprint(t)\\n\", \"import os\\nimport sys\\n\\ndef log(*args, **kwargs):\\n\\tif os.environ.get('CODEFR'):\\n\\t\\tprint(*args, **kwargs)\\nn = int(input())\\ns = input()\\nminimum = 0\\nmaximum = 0\\nvalue = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tvalue -= 1\\n\\tif i == '+':\\n\\t\\tvalue += 1\\n\\tminimum = min(value, minimum)\\nprint(value - minimum)\\n\", \"(ADD, TAKE) = ('+', '-')\\nn = int(input())\\ns = list(input())\\nc = 0\\nfor i in s:\\n\\tif i == ADD:\\n\\t\\tc += 1\\n\\tif i == TAKE:\\n\\t\\tc = max(0, c - 1)\\nprint(c)\\n\", \"input()\\ncnt = 0\\nfor i in input():\\n\\tif i == '+':\\n\\t\\tcnt = cnt + 1\\n\\telif cnt > 0:\\n\\t\\tcnt = cnt - 1\\nprint(cnt)\\n\", \"n = int(input())\\nst = list(input())\\nn = 0\\nfor i in st:\\n\\tif i == '-':\\n\\t\\tn = max(n - 1, 0)\\n\\telse:\\n\\t\\tn += 1\\nprint(n)\\n\", \"n = int(input())\\ns = input()\\nans = 0\\ncount = 0\\nfor i in range(n):\\n\\tx = s[i]\\n\\tif x == '-':\\n\\t\\tif count == 0:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tcount -= 1\\n\\telse:\\n\\t\\tcount += 1\\n\\t\\tans = max(count, ans)\\nprint(count)\\n\", \"n = int(input())\\ns = input()\\nif s[0] == '-':\\n\\tc = 0\\n\\tfor i in range(1, n):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tc -= 1\\n\\t\\t\\tif c < 0:\\n\\t\\t\\t\\tc = 0\\n\\t\\telse:\\n\\t\\t\\tc += 1\\n\\tprint(c)\\nelse:\\n\\tc = 1\\n\\tfor i in range(1, n):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tc -= 1\\n\\t\\t\\tif c < 0:\\n\\t\\t\\t\\tc = 0\\n\\t\\telse:\\n\\t\\t\\tc += 1\\n\\tprint(c)\\n\", \"n = int(input())\\na = list(input())\\nk = 0\\nfor i in a:\\n\\tif i == '+':\\n\\t\\tk += 1\\n\\telif k > 0:\\n\\t\\tk -= 1\\nprint(k)\\n\", \"n = int(input())\\na = list(input())\\nmi = 0\\nlast = 0\\nfor i in a:\\n\\tif i == '-':\\n\\t\\tlast -= 1\\n\\t\\tmi = min(mi, last)\\n\\telse:\\n\\t\\tlast += 1\\nprint(abs(mi) + last)\\n\", \"n = int(input())\\ns = list(input())\\ng = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tg += 1\\n\\telse:\\n\\t\\tg -= 1\\n\\tif g < 0:\\n\\t\\tg = 0\\nprint(g)\\n\", \"n = int(input())\\ns = input()\\nres = 0\\nidx = 0\\nwhile idx < n:\\n\\tflag = 0\\n\\twhile idx < n and s[idx] == '-' and (res > 0):\\n\\t\\tres -= 1\\n\\t\\tidx += 1\\n\\t\\tflag = 1\\n\\tif idx < n and s[idx] == '+':\\n\\t\\twhile idx < n and s[idx] == '+':\\n\\t\\t\\tres += 1\\n\\t\\t\\tidx += 1\\n\\t\\t\\tflag = 1\\n\\tif idx < n and flag == 0:\\n\\t\\tidx += 1\\nprint(res)\\n\", \"n = int(input())\\ns = input()\\nmi = n\\nlol = 0\\nlo = 0\\nfor i in s:\\n\\tif i == '-' and lol == 1 and (lo > 0):\\n\\t\\tlo -= 1\\n\\telif i == '+':\\n\\t\\tlol = 1\\n\\t\\tlo += 1\\nprint(lo)\\n\", \"a = int(input())\\nb = input()\\nc = 0\\nfor i in range(a):\\n\\tif b[i] == '+':\\n\\t\\tc = c + 1\\n\\telif b[i] == '-' and c > 0:\\n\\t\\tc = c - 1\\n\\telif b[i] == '-':\\n\\t\\tc = c\\nprint(c)\\n\", \"from sys import stdin\\nn = int(stdin.readline().rstrip())\\ns = stdin.readline().rstrip()\\na = 0\\nfor i in range(n):\\n\\tif s[i] == '-' and a == 0:\\n\\t\\ta = 0\\n\\telif s[i] == '-':\\n\\t\\ta -= 1\\n\\telse:\\n\\t\\ta += 1\\nprint(a)\\n\", \"a = int(input())\\nx = input()\\nr = 0\\nfor i in x:\\n\\tif r != 0 and i == '-':\\n\\t\\tr -= 1\\n\\telif i == '+':\\n\\t\\tr += 1\\nprint(r)\\n\", \"n = int(input())\\na = list(input())\\na.append('+')\\nw = 0\\nmax1 = 0\\nc = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tw -= 1\\n\\t\\tc -= 1\\n\\telif a[i] == '+':\\n\\t\\tw += 1\\n\\t\\tc += 1\\n\\tif w < 0:\\n\\t\\tif max1 < -w:\\n\\t\\t\\tmax1 = -w\\nprint(max1 + c)\\n\", \"a = int(input())\\ns = input()\\nn = 0\\nfor j in s:\\n\\tif j == '+':\\n\\t\\tn += 1\\n\\telse:\\n\\t\\tn -= 1\\n\\t\\tif n == -1:\\n\\t\\t\\tn = 0\\nprint(n)\\n\", \"n = int(input())\\na = list(input())\\nf = 0\\nx = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tx -= 1\\n\\t\\tif f > x:\\n\\t\\t\\tf = x\\n\\telse:\\n\\t\\tx += 1\\nprint(x - f)\\n\", \"n = int(input())\\nactions = input().strip()\\nstone = 0\\nfor action in actions:\\n\\tif action == '-':\\n\\t\\tif stone > 0:\\n\\t\\t\\tstone -= 1\\n\\telse:\\n\\t\\tstone += 1\\nprint(stone)\\n\", \"n = int(input())\\nm = list(input())\\na = 0\\nfor i in m:\\n\\tif i == '+':\\n\\t\\ta += 1\\n\\telif i == '-' and a != 0:\\n\\t\\ta -= 1\\n\\telif i == '-' and a == 0:\\n\\t\\ta = 0\\nprint(a)\\n\", \"n = int(input())\\ns = input()\\nif s[0] == '+':\\n\\tkq = 0\\nelse:\\n\\tkq = 1\\nfor i in range(n):\\n\\tif s[i] == '-' and kq > 0:\\n\\t\\tkq = kq - 1\\n\\telif s[i] == '-' and kq == 0:\\n\\t\\tkq = 0\\n\\telif s[i] == '+':\\n\\t\\tkq = kq + 1\\nprint(kq)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = input()\\n\\tans = 0\\n\\tfor ch in s:\\n\\t\\tif ch == '+':\\n\\t\\t\\tans += 1\\n\\t\\telif ans > 0:\\n\\t\\t\\tans -= 1\\n\\tprint(ans)\\nmain()\\n\", \"a = input\\na()\\nk = a().lstrip('-')\\nc = 0\\nfor i in k:\\n\\tif c > 0 and i == '-':\\n\\t\\tc -= 1\\n\\telif i == '+':\\n\\t\\tc += 1\\nprint(c)\\n\", \"n = int(input())\\nl = input()\\nc = 0\\nfor i in l:\\n\\tif i == '+':\\n\\t\\tc += 1\\n\\telif c != 0:\\n\\t\\tc -= 1\\nif c < 0:\\n\\tprint(0)\\nelse:\\n\\tprint(c)\\n\", \"n = int(input())\\ns = input()\\np = False\\nx = 0\\nfor i in range(n):\\n\\tif not p and s[i] == '+':\\n\\t\\tp = True\\n\\tif p:\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tx += 1\\n\\t\\telif x > 0:\\n\\t\\t\\tx -= 1\\nprint(x)\\n\", \"num = int(input())\\nstring = str(input())\\ntotal = 0\\nfor (counter, item) in enumerate(string):\\n\\tif item == '-' and total == 0:\\n\\t\\tcontinue\\n\\telif item == '-' and total != 0:\\n\\t\\ttotal = total - 1\\n\\telif item == '+':\\n\\t\\ttotal = total + 1\\nprint(total)\\n\", \"n = int(input())\\ns = input()\\nans = 0\\nminans = 0\\nmaxans = 0\\nfor i in range(len(s)):\\n\\tif s[i] == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans -= 1\\n\\t\\tminans = min(ans, minans)\\nprint(ans - minans)\\n\", \"n = int(input())\\nx = 0\\ns = list(input())\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tx = max([0, x - 1])\\nprint(x)\\n\", \"input()\\nstring = input()\\ncntr = 0\\nfor i in string:\\n\\tif i == '-':\\n\\t\\tcntr -= 1\\n\\tif cntr < 0:\\n\\t\\tcntr = 0\\n\\tif i == '+':\\n\\t\\tcntr += 1\\nprint(cntr)\\n\", \"from itertools import accumulate\\nfrom sys import stdin\\n\\ndef main():\\n\\tN = int(input())\\n\\tS = input()\\n\\tx = [0]\\n\\tfor s in S:\\n\\t\\tif s == '-':\\n\\t\\t\\tx.append(-1)\\n\\t\\telse:\\n\\t\\t\\tx.append(1)\\n\\tx = list(accumulate(x))\\n\\tif min(x) < 0:\\n\\t\\tprint(x[-1] - min(x))\\n\\telse:\\n\\t\\tprint(x[-1])\\ninput = lambda : stdin.readline().rstrip()\\nmain()\\n\", \"n = int(input())\\narray = list(input())\\narray = [1 if t == '+' else -1 for t in array]\\narray = [sum(array[:i]) for i in range(0, n + 1)]\\narray = [t + abs(min(array)) for t in array]\\nprint(array[-1])\\n\", \"n = int(input())\\nstr = input()\\nmin = 0\\nfor i in str:\\n\\tif i == '-':\\n\\t\\tmin -= 1\\n\\t\\tif min < 0:\\n\\t\\t\\tmin = 0\\n\\telse:\\n\\t\\tmin += 1\\nprint(min)\\n\", \"from sys import *\\nfrom math import *\\nn = int(stdin.readline())\\ns = input()\\nf = 0\\nans = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tans += 1\\n\\t\\tf = 1\\n\\tif s[i] == '-':\\n\\t\\tans -= 1\\n\\t\\tans = max(ans, 0)\\nans = max(0, ans)\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\nt = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tt += 1\\n\\tif s[i] == '-':\\n\\t\\tif t > 0:\\n\\t\\t\\tt -= 1\\nprint(t)\\n\", \"n = int(input())\\ns = input()\\nk = minimo = menos = mais = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tk -= 1\\n\\t\\tmenos += 1\\n\\t\\tminimo = min(minimo, k)\\n\\telse:\\n\\t\\tk += 1\\n\\t\\tmais += 1\\nprint(minimo * -1 - menos + mais)\\n\", \"while True:\\n\\ttry:\\n\\t\\tn = input()\\n\\t\\tops = input()\\n\\t\\tsum = 0\\n\\t\\tfor i in ops:\\n\\t\\t\\tif i == '+':\\n\\t\\t\\t\\tsum += 1\\n\\t\\t\\telif i == '-' and sum == 0:\\n\\t\\t\\t\\tpass\\n\\t\\t\\telif i == '-' and sum != 0:\\n\\t\\t\\t\\tsum -= 1\\n\\t\\tif sum < 0:\\n\\t\\t\\tsum = 0\\n\\t\\tprint(sum)\\n\\texcept EOFError:\\n\\t\\tbreak\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nd = 0\\nfor _ in range(len(s)):\\n\\tif s[_] == '-':\\n\\t\\tc -= 1\\n\\telse:\\n\\t\\tc += 1\\n\\td = min(d, c)\\nprint(c - d)\\n\", \"n = int(input())\\ns = input()\\n(plus, minus) = (0, 0)\\nx = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tx -= 1\\n\\t\\tif x < 0:\\n\\t\\t\\tx = 0\\nprint(x)\\n\", \"input()\\nops = input()\\ncount = 0\\nfor i in ops:\\n\\tif i == '+':\\n\\t\\tcount += 1\\n\\telif count != 0:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"m = 0\\nnow = 0\\nn = int(input())\\ns = list(str(input()))\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tnow -= 1\\n\\t\\tm = min(m, now)\\n\\telse:\\n\\t\\tnow += 1\\nprint(now - m)\\n\", \"import sys\\n\\ndef main():\\n\\ts = sys.stdin.read().strip().split()\\n\\tc = 0\\n\\tfor i in s[1]:\\n\\t\\tif i == '-':\\n\\t\\t\\tc = max(c - 1, 0)\\n\\t\\telse:\\n\\t\\t\\tc += 1\\n\\treturn c\\nprint(main())\\n\", \"n = int(input())\\ns = tuple(input())\\nS = s[::-1]\\ncount = 0\\nubayimba = 0\\nif '-' in s:\\n\\tfor i in range(n - S.index('-')):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tcount += 1\\n\\t\\telif s[i] == '-':\\n\\t\\t\\tif count == 0:\\n\\t\\t\\t\\tubayimba += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcount = count - 1\\nprint(ubayimba + s.count('+') - s.count('-'))\\n\", \"n = int(input())\\ns = input()\\nx = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tif x > 0:\\n\\t\\t\\tx -= 1\\n\\tif i == '+':\\n\\t\\tx += 1\\nprint(x)\\n\", \"n = int(input())\\ns = m = 0\\nfor c in input():\\n\\ts += (1, -1)[c > '+']\\n\\tm = min(m, s)\\nprint(s - m)\\n\", \"n = int(input())\\ns = input()\\ninitial = 0\\nfor a in range(len(s)):\\n\\tif s[a] == '+':\\n\\t\\tinitial = initial\\n\\t\\tbreak\\n\\telse:\\n\\t\\tinitial += 1\\nfor a in range(len(s)):\\n\\tif s[a] == '-':\\n\\t\\tif initial - 1 < 0:\\n\\t\\t\\tinitial = 0\\n\\t\\telse:\\n\\t\\t\\tinitial -= 1\\n\\telse:\\n\\t\\tinitial += 1\\nprint(initial)\\n\", \"def go():\\n\\tn = int(input())\\n\\ta = [i for i in input()]\\n\\tx = 0\\n\\tfor i in a:\\n\\t\\tif i == '-':\\n\\t\\t\\tx = max(0, x - 1)\\n\\t\\telse:\\n\\t\\t\\tx += 1\\n\\treturn x\\nprint(go())\\n\", \"n = int(input())\\nt = 0\\nfor s in input():\\n\\tif s == '+':\\n\\t\\tt += 1\\n\\telse:\\n\\t\\tt = max(t - 1, 0)\\nprint(t)\\n\", \"n = int(input())\\np = input()\\nt = 0\\nl = 0\\nfor i in range(n):\\n\\tif p[i] == '+':\\n\\t\\tt += 1\\n\\telif t > 0:\\n\\t\\tt -= 1\\n\\telse:\\n\\t\\tl += 1\\nprint(l + p.count('+') - p.count('-'))\\n\", \"n = int(input())\\nstring = input()\\nlst = []\\nif string[0] == '+':\\n\\tlst.append(1)\\nelse:\\n\\tlst.append(-1)\\nfor i in range(1, n):\\n\\tif string[i] == '+' and string[i - 1] == '+':\\n\\t\\tlst.append(lst[-1] + 1)\\n\\telif string[i] == '+' and string[i - 1] == '-':\\n\\t\\tlst.append(lst[-1] + 1)\\n\\telif string[i] == '-' and string[i - 1] == '+':\\n\\t\\tlst.append(lst[-1] - 1)\\n\\telse:\\n\\t\\tlst.append(lst[-1] - 1)\\nz = abs(min(min(lst), 0))\\nfor i in range(n):\\n\\tif string[i] == '+':\\n\\t\\tz += 1\\n\\telse:\\n\\t\\tz -= 1\\nprint(z)\\n\", \"a = int(input())\\nb = str(input())\\nx = k = int(0)\\nwhile x < a:\\n\\tif b[x] == '+':\\n\\t\\tk = k + 1\\n\\telif k - 1 >= 0:\\n\\t\\tk = k - 1\\n\\tx = x + 1\\nprint(k)\\n\", \"n = int(input())\\na = input()\\nc = 0\\nfor i in range(n):\\n\\tif c > 0:\\n\\t\\tif a[i] == '-':\\n\\t\\t\\tc = c - 1\\n\\tif a[i] == '+':\\n\\t\\tc = c + 1\\nprint(c)\\n\", \"num = int(input())\\nst = input()\\ni = 0\\ntop = -1\\nlis = []\\nwhile i < len(st):\\n\\tif st[i] == '-':\\n\\t\\tif top != -1:\\n\\t\\t\\ttop = top - 1\\n\\telse:\\n\\t\\ttop = top + 1\\n\\ti = i + 1\\nif top <= -1:\\n\\tprint(0)\\nelse:\\n\\tprint(top + 1)\\n\", \"n = int(input())\\noperations = input()\\nbase = 0\\nstate = 0\\nfor operation in operations:\\n\\tif operation == '+':\\n\\t\\tstate += 1\\n\\telse:\\n\\t\\tstate -= 1\\n\\t\\tif state < 0:\\n\\t\\t\\tbase += 1\\n\\t\\t\\tstate = 0\\nprint(state)\\n\", \"n = int(input())\\nmin = 0\\npl = 0\\nnr = 0\\nok = 0\\ns = [None] * n\\ns = input()\\nif s[0] == '-':\\n\\tnr = 1\\nfor i in range(0, n):\\n\\tif s[i] == '-':\\n\\t\\tnr = nr - 1\\n\\t\\tmin = min + 1\\n\\telse:\\n\\t\\tnr = nr + 1\\n\\t\\tpl = pl + 1\\n\\tif nr < 0:\\n\\t\\tnr = nr + 1\\n\\t\\tok = 1\\nprint(nr)\\n\", \"n = input()\\ns = list(input())\\nx = m = i = 0\\nfor c in s:\\n\\tif c == '-':\\n\\t\\ti -= 1\\n\\telse:\\n\\t\\ti += 1\\n\\tx = min(x, i)\\n\\tm = max(m, i)\\nprint(i - x)\\n\", \"import sys\\nimport collections\\ninput = sys.stdin.readline\\n\\ndef printnl(val):\\n\\tsys.stdout.write(str(val) + '\\\\n')\\nn = int(input())\\ns = list(input())[:n]\\nans = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tans -= 1\\n\\t\\tif ans < 0:\\n\\t\\t\\tans = 0\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\n(m, a) = (0, 0)\\nfor i in range(n - 1, -1, -1):\\n\\tif s[i] == '+':\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tm -= 1\\n\\ta = max(m, a)\\nprint(a)\\n\", \"a = int(input())\\nb = input()\\ncnt = 0\\nfor i in range(a):\\n\\tif b[i] == '+':\\n\\t\\tcnt += 1\\n\\telif b[i] == '-' and cnt > 0:\\n\\t\\tcnt -= 1\\n\\telse:\\n\\t\\tcnt = cnt\\nprint(cnt)\\n\", \"Int = int(input())\\nString = input()\\nS = 0\\nfor i in String:\\n\\tif i == '-':\\n\\t\\tS = max(S - 1, 0)\\n\\telse:\\n\\t\\tS += 1\\nprint(S)\\n\", \"n = int(input())\\ns = input()\\ncount = 0\\nizn = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tcount -= 1\\n\\t\\tif count < 0:\\n\\t\\t\\tcount += 1\\nprint(count)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nflag = 0\\nfor i in range(0, n):\\n\\tif s[i] == '-':\\n\\t\\tif i == 0 or c == 0:\\n\\t\\t\\tc = 0\\n\\t\\telif flag == 1:\\n\\t\\t\\tc = c - 1\\n\\telif s[i] == '+':\\n\\t\\tflag = 1\\n\\t\\tc = c + 1\\nif c >= 0:\\n\\tprint(c)\\nelse:\\n\\tprint(0)\\n\", \"n = int(input())\\ns = input()\\nsumi = 0\\nl = [0]\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tsumi += 1\\n\\telse:\\n\\t\\tsumi -= 1\\n\\tl.append(sumi)\\nz = min(l)\\nprint(sumi - z)\\n\", \"n = input()\\ns = input()\\nansw = 0\\nbol = False\\nind = 0\\nfor i in s:\\n\\tif i == s[0] and i == '-':\\n\\t\\tbol = True\\n\\t\\tind += 1\\n\\telif bol and i != '-':\\n\\t\\ts = s[ind:]\\n\\t\\tbreak\\n\\telif i == s[0] and i != '-':\\n\\t\\tbreak\\n\\telse:\\n\\t\\tind += 1\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tansw += 1\\n\\telse:\\n\\t\\tansw -= 1\\n\\tif answ < 0:\\n\\t\\tansw = 0\\nif answ < 0:\\n\\tansw = 0\\nprint(answ)\\n\", \"n = int(input())\\ns = input()\\ncnt = 0\\nfor i in s:\\n\\tif i == '-' and cnt > 0:\\n\\t\\tcnt -= 1\\n\\telif i == '+':\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"n = int(input())\\ns = input()\\nstart = 0\\nfor x in s:\\n\\tif x == '-':\\n\\t\\tstart = max(0, start - 1)\\n\\telse:\\n\\t\\tstart += 1\\nprint(start)\\n\", \"x = int(input())\\ny = input()\\nfor i in range(x + 1):\\n\\tworked = True\\n\\tcount = i\\n\\tfor j in range(len(y), 0, -1):\\n\\t\\tif y[j - 1] == '-':\\n\\t\\t\\tcount += 1\\n\\t\\telif y[j - 1] == '+':\\n\\t\\t\\tcount -= 1\\n\\t\\tif count < 0:\\n\\t\\t\\tworked = False\\n\\t\\t\\tbreak\\n\\tif worked == True:\\n\\t\\tbreak\\nprint(i)\\n\", \"n = int(input())\\ns = input()\\nminus = 0\\nplus = 0\\npreans = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tminus += 1\\n\\telse:\\n\\t\\tplus += 1\\n\\tif minus > plus and minus - plus > preans:\\n\\t\\tpreans = minus - plus\\nans = preans - minus + plus\\nprint(ans)\\n\", \"import sys\\nimport math\\nimport bisect\\n\\ndef main():\\n\\tA = [0]\\n\\tn = int(input())\\n\\tfor c in input():\\n\\t\\tif c == '-':\\n\\t\\t\\tA.append(A[-1] - 1)\\n\\t\\telif c == '+':\\n\\t\\t\\tA.append(A[-1] + 1)\\n\\tmin_val = min(A)\\n\\tfor i in range(len(A)):\\n\\t\\tA[i] -= min_val\\n\\tprint(A[-1])\\nmain()\\n\", \"n = int(input())\\ns = list(input())[::-1]\\nr = 0\\nml = 0\\nfor i in range(0, len(s)):\\n\\tif s[i] == '-':\\n\\t\\tr += 1\\n\\telse:\\n\\t\\tr -= 1\\n\\tml = min(ml, r)\\nprint(-ml)\\n\", \"n = int(input())\\nt = input()\\na = 0\\nfor t1 in t:\\n\\tif t1 == '-':\\n\\t\\tif t1 == '-' and a == 0:\\n\\t\\t\\ta = 0\\n\\t\\telse:\\n\\t\\t\\ta = a - 1\\n\\telif t1 == '+':\\n\\t\\ta = a + 1\\nprint(a)\\n\", \"input()\\noperations = [i for i in input()]\\ncounter = 0\\nfor i in operations:\\n\\tif i == '-' and counter > 0:\\n\\t\\tcounter -= 1\\n\\telif i == '+':\\n\\t\\tcounter += 1\\nprint(counter)\\n\", \"n = int(input())\\ns = input()\\nsm = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tsm += 1\\n\\telif (i == '-') & (sm == 0):\\n\\t\\tsm = sm\\n\\telse:\\n\\t\\tsm -= 1\\nprint(sm)\\n\", \"n = int(input())\\nx = input()\\nans = 0\\nfor i in x:\\n\\tif i == '-':\\n\\t\\tans -= 1\\n\\t\\tif ans < 0:\\n\\t\\t\\tans = 0\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\nm = [0]\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tm.append(m[-1] - 1)\\n\\telse:\\n\\t\\tm.append(m[-1] + 1)\\nans = abs(min(m))\\nprint(ans + m[-1])\\n\", \"n = int(input())\\nopr = input()\\ncounter = 0\\nfor i in opr:\\n\\tif i == '+':\\n\\t\\tcounter += 1\\n\\telif counter > 0:\\n\\t\\tcounter -= 1\\nprint(counter)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nfor i in s:\\n\\tif c == 0 and i == '-':\\n\\t\\tpass\\n\\telif i == '+':\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tc -= 1\\nprint(c)\\n\", \"n = input()\\ns = input()\\n(tot, mini) = (0, 0)\\nfor i in s:\\n\\tif i == '-':\\n\\t\\ttot -= 1\\n\\telse:\\n\\t\\ttot += 1\\n\\tmini = tot if tot < mini else mini\\nprint(tot - mini)\\n\", \"n = int(input())\\ns = input()\\ni = 0\\npile = 0\\nwhile i < n and s[i] == '-':\\n\\ti += 1\\nfor j in range(i, n):\\n\\tif s[j] == '+':\\n\\t\\tpile += 1\\n\\telse:\\n\\t\\tpile = max(0, pile - 1)\\nprint(pile)\\n\", \"i = int(input())\\na = input().strip()\\nm = 0\\nfor j in a:\\n\\tif m >= 0 and j == '+':\\n\\t\\tm = m + 1\\n\\tif m > 0 and j == '-':\\n\\t\\tm = m - 1\\nprint(m)\\n\", \"n = int(input().strip())\\nstring = input().strip()\\nans = 0\\nfor i in string:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\tif i == '-':\\n\\t\\tans -= 1\\n\\tif ans < 0:\\n\\t\\tans = 0\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\n(cnt, min_cnt) = (0, 0)\\nfor x in s:\\n\\tif x == '-':\\n\\t\\tcnt -= 1\\n\\t\\tmin_cnt = min(min_cnt, cnt)\\n\\telse:\\n\\t\\tcnt += 1\\nprint(cnt - min_cnt)\\n\", \"n = int(input())\\nop = input()\\n(ar, c) = ([], 0)\\nfor i in op:\\n\\tif i == '+':\\n\\t\\tc += 1\\n\\t\\tar.append(c)\\n\\telse:\\n\\t\\tc -= 1\\n\\t\\tif c < 0:\\n\\t\\t\\tc = 0\\n\\t\\tar.append(c)\\nprint(ar[-1])\\n\", \"a = int(input())\\nb = list(input())\\nk = l = j = 0\\nwhile 1:\\n\\tk = l\\n\\tj = 0\\n\\tfor i in b:\\n\\t\\tif i == '+':\\n\\t\\t\\tk += 1\\n\\t\\telse:\\n\\t\\t\\tk -= 1\\n\\t\\tif k < 0:\\n\\t\\t\\tj = 1\\n\\t\\t\\tl += 1\\n\\t\\t\\tbreak\\n\\tif j == 0:\\n\\t\\tbreak\\nprint(k)\\n\", \"n = int(input())\\ns = input()\\nnegat = s.count('-')\\nposit = s.count('+')\\nbegin = 0\\nc = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tif c - 1 < 0:\\n\\t\\t\\tbegin += 1\\n\\t\\telse:\\n\\t\\t\\tc -= 1\\n\\telif i == '+':\\n\\t\\tc += 1\\nprint(begin + posit - negat)\\n\", \"n = int(input())\\na = input()\\nmark = [_ for _ in range(101)]\\nfor i in range(n):\\n\\tfor j in range(101):\\n\\t\\tif a[i] == '-':\\n\\t\\t\\tif mark[j] <= 0:\\n\\t\\t\\t\\tmark[j] = 10000\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmark[j] -= 1\\n\\t\\telse:\\n\\t\\t\\tmark[j] += 1\\nprint(min(mark))\\n\", \"def read_nums():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef main():\\n\\t(n,) = read_nums()\\n\\ts = input()\\n\\tcount = 0\\n\\tfor ch in s:\\n\\t\\tif ch == '+':\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tcount = max(count - 1, 0)\\n\\tprint(count)\\nmain()\\n\", \"n = int(input())\\ns = str(input())\\nn1 = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tn1 = n1 + 1\\n\\telif n1 >= 1:\\n\\t\\tn1 = n1 - 1\\nprint(n1)\\n\", \"num_ops = int(input())\\nops = input()\\nstones = 0\\nfor op in ops:\\n\\tif op == '+':\\n\\t\\tstones += 1\\n\\telse:\\n\\t\\tstones -= 1\\n\\tif stones < 0:\\n\\t\\tstones = 0\\nprint(stones)\\n\", \"n = int(input())\\ns_in = input()\\ncnt = 0\\nfor s in s_in:\\n\\tif s == '-':\\n\\t\\tcnt -= 1\\n\\t\\tcnt = max(0, cnt)\\n\\telse:\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"a = int(input())\\nt = input()\\np = 0\\nfor j in t:\\n\\tif j == '+':\\n\\t\\tp += 1\\n\\telif p > 0:\\n\\t\\tp -= 1\\nprint(p)\\n\", \"n = int(input())\\nL = list(input())\\nbr = 0\\nfor i in L:\\n\\tif i == '-' and br != 0:\\n\\t\\tbr -= 1\\n\\telif i == '+':\\n\\t\\tbr = br + 1\\n\\telse:\\n\\t\\tbr = 0\\nprint(br)\\n\", \"n = int(input())\\ns = list(input())\\nc = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tc += 1\\n\\telif c > 0:\\n\\t\\tc -= 1\\nprint(c)\\n\", \"n = int(input())\\na = input()\\nx = 0\\nna = 0\\nfor i in a:\\n\\tif i == '+':\\n\\t\\tx += 1\\n\\telif x == 0:\\n\\t\\tna += 1\\n\\telse:\\n\\t\\tx -= 1\\nfor i in a:\\n\\tif i == '+':\\n\\t\\tna += 1\\n\\telse:\\n\\t\\tna -= 1\\nprint(na)\\n\", \"n = input()\\nl = 0\\nh = 0\\nfor x in input():\\n\\tif '-' == x:\\n\\t\\th -= 1\\n\\telse:\\n\\t\\th += 1\\n\\tl = min(l, h)\\nprint(h - l)\\n\", \"n = int(input())\\ni = list(input())\\npile = 0\\nfor x in i:\\n\\tif x == '+':\\n\\t\\tpile += 1\\n\\telif pile > 0:\\n\\t\\tpile -= 1\\nprint(pile)\\n\", \"def pileStone(s):\\n\\tst = 0\\n\\tfor i in s:\\n\\t\\tif i == '+':\\n\\t\\t\\tst += 1\\n\\t\\telse:\\n\\t\\t\\tst -= 1\\n\\t\\t\\tif st < 0:\\n\\t\\t\\t\\tst = 0\\n\\treturn st\\nn = int(input())\\ns = input()\\nprint(pileStone(s))\\n\", \"input()\\ns = input()\\ncounter = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tcounter += 1\\n\\telif counter > 0:\\n\\t\\tcounter -= 1\\nprint(counter)\\n\", \"n = int(input())\\ns = input()\\nl = list(s)\\ncount = 0\\nif '+' in l:\\n\\ti = 0\\n\\twhile i < len(s):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tcount -= 1\\n\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\tcount += 1\\n\\t\\t\\ti += 1\\n\\t\\tif count < 0:\\n\\t\\t\\tcount = 0\\n\\tprint(count)\\nelse:\\n\\tprint(count)\\n\", \"a = int(input())\\noperations = input()\\nmin = int(0)\\nif a == len(operations):\\n\\tfor x in range(0, a):\\n\\t\\tif operations[x] == '+':\\n\\t\\t\\tmin = min + 1\\n\\t\\telif operations[x] == '-':\\n\\t\\t\\tif min > 0:\\n\\t\\t\\t\\tmin = min - 1\\nprint(min)\\n\", \"n = input()\\ns = input()\\np = 0\\nm = 0\\nt = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tp += 1\\n\\t\\tt += 1\\n\\telif i == '-':\\n\\t\\tm += 1\\n\\t\\tif t == 0:\\n\\t\\t\\tt = 0\\n\\t\\telse:\\n\\t\\t\\tt -= 1\\nprint(t)\\n\", \"n = int(input())\\ninp = input()\\nminusCnt = 0\\nplusCnt = 0\\nqtd = 0\\nfor s in inp:\\n\\tif s == '-':\\n\\t\\tqtd = max(0, qtd - 1)\\n\\telse:\\n\\t\\tqtd += 1\\nprint(qtd)\\n\", \"n = int(input())\\nops = input()\\nc = 0\\nfor o in ops:\\n\\tif o == '-':\\n\\t\\tc = c - 1 if c > 0 else 0\\n\\telse:\\n\\t\\tc += 1\\nprint(c)\\n\", \"gi = lambda : list(map(int, input().strip().split()))\\n(n,) = gi()\\ns = input()\\nans = 0\\nfor e in s:\\n\\tif e == '-':\\n\\t\\tans = max(ans - 1, 0)\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\nres = 0\\ncurr = 0\\nfor c in input():\\n\\tif c == '-':\\n\\t\\tcurr -= 1\\n\\telse:\\n\\t\\tcurr += 1\\n\\tres = min(curr, res)\\nprint(curr - res)\\n\", \"import copy\\nn = int(input(''))\\nt = input('')\\ni = 0\\nc = 0\\nwhile c == 0:\\n\\tfound = 0\\n\\tr = copy.deepcopy(i)\\n\\tfor j in range(len(t)):\\n\\t\\tif t[j] == '+':\\n\\t\\t\\tr += 1\\n\\t\\telse:\\n\\t\\t\\tr -= 1\\n\\t\\t\\tif r < 0:\\n\\t\\t\\t\\tfound = 1\\n\\t\\t\\t\\tbreak\\n\\tif found == 1:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tbreak\\nprint(r)\\n\", \"n = int(input())\\na = list(input())\\ncounter = 0\\nb = []\\nfor item in a:\\n\\tif item == '-':\\n\\t\\tcounter -= 1\\n\\telse:\\n\\t\\tcounter += 1\\n\\tb.append(counter)\\nif min(b) <= 0:\\n\\tprint(b[-1] + abs(min(b)))\\nelse:\\n\\tprint(b[-1])\\n\", \"n = int(input())\\ns = list(input())\\ncount = 0\\nans = 0\\nfor i in range(len(s)):\\n\\tif s[i] == '+':\\n\\t\\tcount += 1\\n\\telif count > 0:\\n\\t\\tcount -= 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tans += 1\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"n = input()\\nn = int(n)\\ns = input()\\nx = 0\\ny = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tx += 1\\n\\tif s[i] == '-':\\n\\t\\tif x == 0:\\n\\t\\t\\ty += 1\\n\\t\\t\\tx += 1\\n\\t\\tx -= 1\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\ty = y - 1\\n\\telse:\\n\\t\\ty += 1\\nprint(y)\\n\", \"def main():\\n\\tn = int(input())\\n\\tans = 0\\n\\tfor i in input():\\n\\t\\tif i == '-':\\n\\t\\t\\tans = max(0, ans - 1)\\n\\t\\telse:\\n\\t\\t\\tans += 1\\n\\treturn ans\\nprint(main())\\n\", \"(i, r) = (input, 0)\\ni()\\nfor x in i():\\n\\tr = max(0, r + [1, -1][x == '-'])\\nprint(r)\\n\", \"n = int(input())\\noperations = input()\\nstart = 0\\nfor op in operations:\\n\\tif op == '+':\\n\\t\\tstart += 1\\n\\telse:\\n\\t\\tstart = max(0, start - 1)\\nprint(start)\\n\", \"fast = lambda : stdin.readline().strip()\\nzzz = lambda : [int(i) for i in fast().split()]\\n(z, zz) = (input, lambda : list(map(int, z().split())))\\n(szz, graph, mod, szzz) = (lambda : sorted(zz()), {}, 10 ** 9 + 7, lambda : sorted(zzz()))\\nfrom re import *\\nfrom sys import *\\nfrom math import *\\nfrom heapq import *\\nfrom queue import *\\nfrom bisect import *\\nfrom string import *\\nfrom itertools import *\\nfrom collections import *\\nfrom math import factorial as f\\nfrom bisect import bisect as bs\\nfrom bisect import bisect_left as bsl\\nfrom collections import Counter as cc\\nfrom itertools import accumulate as ac\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\n\\ndef output(answer):\\n\\tstdout.write(str(answer))\\nnum = int(z())\\narr = fast()\\nlst = [0] * (num + 1)\\nfor (i, j) in enumerate(arr):\\n\\tif j == '-':\\n\\t\\tlst[i + 1] = -1 + lst[i]\\n\\telse:\\n\\t\\tlst[i + 1] = 1 + lst[i]\\nt = min(lst)\\nans = abs(t)\\nfor i in arr:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"n = int(input())\\nop = list(input())\\ncont = 0\\nfor o in op:\\n\\tif o == '+':\\n\\t\\tcont += 1\\n\\telif cont > 0:\\n\\t\\tcont -= 1\\nprint(cont)\\n\", \"n = int(input())\\nl = input()\\ns = 0\\nfor c in l:\\n\\tif c == '+':\\n\\t\\ts += 1\\n\\telse:\\n\\t\\ts -= 1\\n\\t\\tif s < 0:\\n\\t\\t\\ts = 0\\nprint(s)\\n\", \"n = int(input())\\na = list(input())\\nc = []\\nflag = 0\\nfor i in range(101):\\n\\tk = i\\n\\tflag = 0\\n\\tfor j in range(len(a)):\\n\\t\\tif a[j] == '+':\\n\\t\\t\\tk += 1\\n\\t\\telif a[j] == '-' and k > 0:\\n\\t\\t\\tk -= 1\\n\\t\\telse:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag == 0:\\n\\t\\tbreak\\nprint(k)\\n\", \"n = int(input())\\nl = list(input())\\na = 0\\ncur = 0\\nfor i in range(n):\\n\\tif l[i] == '-':\\n\\t\\tcur -= 1\\n\\t\\ta = min(a, cur)\\n\\telse:\\n\\t\\tcur += 1\\nprint(cur - a)\\n\", \"import sys\\nimport math\\nget_string = lambda : sys.stdin.readline().strip()\\nget_list = lambda : list(map(int, sys.stdin.readline().strip().split()))\\nget_intList_from_str = lambda : list(map(int, list(sys.stdin.readline().strip())))\\nget_strList_from_str = lambda : list(sys.stdin.readline().strip())\\nget_int = lambda : int(sys.stdin.readline().strip())\\npt = lambda x: sys.stdout.write(str(x))\\nn = get_int()\\nlst = get_strList_from_str()\\nvalue = 0\\nfor i in range(n):\\n\\tif lst[i] == '-':\\n\\t\\tvalue = max(0, value - 1)\\n\\telse:\\n\\t\\tvalue += 1\\nprint(value)\\n\", \"no = input()\\nopeartions = input()\\nstack = list()\\nfor opration in opeartions:\\n\\tif opration == '-' and len(stack) == 0:\\n\\t\\tcontinue\\n\\telif opration == '+':\\n\\t\\tstack.append(1)\\n\\telse:\\n\\t\\tstack.pop()\\nprint(stack.__len__())\\n\", \"n = int(input())\\nx = input()\\ncur = 0\\nfor c in x:\\n\\tif c == '-':\\n\\t\\twhile cur <= 0:\\n\\t\\t\\tcur += 1\\n\\t\\tcur -= 1\\n\\telse:\\n\\t\\tcur += 1\\nprint(cur)\\n\", \"import sys\\nimport math\\nimport collections\\nfrom pprint import pprint as pp\\nmod = 1000000007\\n\\ndef vector(size, val=0):\\n\\tvec = [val for i in range(size)]\\n\\treturn vec\\n\\ndef matrix(rowNum, colNum, val=0):\\n\\tmat = []\\n\\tfor i in range(rowNum):\\n\\t\\tcollumn = [val for j in range(colNum)]\\n\\t\\tmat.append(collumn)\\n\\treturn mat\\n(n, s) = (int(input()), input())\\nans = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans = max(0, ans - 1)\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\nans = 0\\nfor i in range(n):\\n\\tans = max(ans, s[i:].count('+') - s[i:].count('-'))\\nprint(ans)\\n\", \"from itertools import accumulate, chain\\nn = int(input())\\nop = input()\\na = list(chain((0,), accumulate((1 if s == '+' else -1 for s in op))))\\n(m, _) = min(((v, i) for (i, v) in enumerate(a)))\\nprint(a[-1] - m)\\n\", \"input()\\ns = 0\\nfor op in input():\\n\\tif op == '+':\\n\\t\\ts += 1\\n\\telif s > 0:\\n\\t\\ts -= 1\\nprint(s)\\n\", \"from sys import stdin\\n\\ndef read_input():\\n\\tn = int(stdin.readline())\\n\\tmoves = stdin.readline()\\n\\treturn moves[:-1]\\nmoves = read_input()\\n(cur_min, cur_sum) = (0, 0)\\nfor move in moves:\\n\\tcur_sum += 1 if move == '+' else -1\\n\\tcur_min = min(cur_min, cur_sum)\\nprint(cur_sum - cur_min)\\n\", \"a = int(input())\\nb = input()\\nsum = 0\\nfor i in b:\\n\\tif i == '+':\\n\\t\\tsum += 1\\n\\telif sum > 0:\\n\\t\\tsum -= 1\\nprint(sum)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = input().rstrip()\\n\\tans = 0\\n\\tfor si in s:\\n\\t\\tif si == '-':\\n\\t\\t\\tans = max(ans - 1, 0)\\n\\t\\telse:\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\nmain()\\n\", \"mod = 1000000007\\nii = lambda : int(input())\\nsi = lambda : input()\\ndgl = lambda : list(map(int, input()))\\nf = lambda : map(int, input().split())\\nil = lambda : list(map(int, input().split()))\\nls = lambda : list(input())\\nn = ii()\\ns = si()\\nmn = 100000\\nc = 0\\nj = 0\\nfor i in range(101):\\n\\tc = i\\n\\tj = 0\\n\\twhile j < n:\\n\\t\\tif s[j] == '-':\\n\\t\\t\\tif c - 1 < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc -= 1\\n\\t\\telse:\\n\\t\\t\\tc += 1\\n\\t\\tj += 1\\n\\tif j == n and c >= 0:\\n\\t\\tmn = min(mn, c)\\nprint(mn)\\n\", \"n = int(input())\\nstring = str(input())\\ncount = 0\\nfor s in string:\\n\\tif s == '-':\\n\\t\\tcount -= 1\\n\\t\\tcount = max(count, 0)\\n\\telse:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"n = int(input())\\ns = input()\\nk = 0\\nls = [k]\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tk -= 1\\n\\t\\tls.append(k)\\n\\telse:\\n\\t\\tk += 1\\n\\t\\tls.append(k)\\nprint(ls[-1] - min(ls))\\n\", \"n = int(input())\\nol = list(input())\\nol.reverse()\\nc = 0\\npc = 0\\nfor o in ol:\\n\\tif o == '+':\\n\\t\\tif pc == 0:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tpc -= 1\\n\\tif o == '-':\\n\\t\\tpc += 1\\nprint(c)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nfor j in range(len(s)):\\n\\tif s[j] == '-':\\n\\t\\tif c > 0:\\n\\t\\t\\tc = c - 1\\n\\t\\telse:\\n\\t\\t\\tc = 0\\n\\telse:\\n\\t\\tc = c + 1\\nprint(c)\\n\", \"T_ON = 0\\nDEBUG_ON = 0\\nMOD = 998244353\\n\\ndef solve():\\n\\tn = read_int()\\n\\tcurr = 0\\n\\tMIN = float('inf')\\n\\tfor c in input():\\n\\t\\tif c == '+':\\n\\t\\t\\tcurr += 1\\n\\t\\telse:\\n\\t\\t\\tcurr -= 1\\n\\t\\tMIN = min(MIN, curr)\\n\\tif MIN < 0:\\n\\t\\tcurr += abs(MIN)\\n\\tprint(curr)\\n\\ndef main():\\n\\tT = read_int() if T_ON else 1\\n\\tfor i in range(T):\\n\\t\\tsolve()\\n\\ndef debug(*xargs):\\n\\tif DEBUG_ON:\\n\\t\\tprint(*xargs)\\nfrom collections import *\\nimport math\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef read_int():\\n\\treturn int(input())\\n\\ndef read_ints():\\n\\treturn list(map(int, input().split()))\\n\\ndef print_nums(nums):\\n\\tprint(' '.join(map(str, nums)))\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef NO():\\n\\tprint('NO')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef First():\\n\\tprint('First')\\n\\ndef Second():\\n\\tprint('Second')\\n\\ndef fib(n):\\n\\t(a, b) = (0, 1)\\n\\tfor _ in range(n):\\n\\t\\t(a, b) = (b, a + b)\\n\\treturn a\\n\\ndef fib_ns(n):\\n\\tassert n >= 1\\n\\tf = [0 for _ in range(n + 1)]\\n\\tf[0] = 0\\n\\tf[1] = 1\\n\\tfor i in range(2, n + 1):\\n\\t\\tf[i] = f[i - 1] + f[i - 2]\\n\\treturn f\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b % a, a)\\n\\ndef xgcd(a, b):\\n\\t(x0, x1, y0, y1) = (0, 1, 1, 0)\\n\\twhile a != 0:\\n\\t\\t((q, a), b) = (divmod(b, a), a)\\n\\t\\t(y0, y1) = (y1, y0 - q * y1)\\n\\t\\t(x0, x1) = (x1, x0 - q * x1)\\n\\treturn (b, x0, y0)\\n\\ndef lcm(a, b):\\n\\td = gcd(a, b)\\n\\treturn a * b // d\\n\\ndef is_even(x):\\n\\treturn x % 2 == 0\\n\\ndef is_odd(x):\\n\\treturn x % 2 == 1\\n\\ndef modinv(a, m):\\n\\t(g, x, _) = xgcd(a, m)\\n\\tif g != 1:\\n\\t\\traise Exception('gcd(a, m) != 1')\\n\\treturn x % m\\n\\ndef mod_add(x, y):\\n\\tx += y\\n\\twhile x >= MOD:\\n\\t\\tx -= MOD\\n\\twhile x < 0:\\n\\t\\tx += MOD\\n\\treturn x\\n\\ndef mod_mul(x, y):\\n\\treturn x * y % MOD\\n\\ndef mod_pow(x, y):\\n\\tif y == 0:\\n\\t\\treturn 1\\n\\tif y % 2:\\n\\t\\treturn mod_mul(x, mod_pow(x, y - 1))\\n\\tp = mod_pow(x, y // 2)\\n\\treturn mod_mul(p, p)\\n\\ndef mod_inv(y):\\n\\treturn mod_pow(y, MOD - 2)\\n\\ndef mod_div(x, y):\\n\\treturn mod_mul(x, mod_inv(y))\\n\\ndef is_prime(n):\\n\\tif n == 1:\\n\\t\\treturn False\\n\\tfor i in range(2, int(n ** 0.5) + 1):\\n\\t\\tif n % i:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef gen_primes(n):\\n\\tP = [True for _ in range(n + 1)]\\n\\tP[0] = P[1] = False\\n\\tfor i in range(int(n ** 0.5) + 1):\\n\\t\\tif P[i]:\\n\\t\\t\\tfor j in range(2 * i, n + 1, i):\\n\\t\\t\\t\\tP[j] = False\\n\\treturn P\\nmain()\\n\", \"n = int(input())\\nd = input()\\nres_orig = 0\\nres_now = 0\\nfor c in d:\\n\\tif res_now == 0 and c == '-':\\n\\t\\tres_orig += 1\\n\\t\\tcontinue\\n\\tif c == '+':\\n\\t\\tres_now += 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tres_now -= 1\\nprint(res_now)\\n\", \"n = int(input())\\ns = input()[:n]\\ns = list(s)\\nf = 0\\nfor i in range(len(s)):\\n\\tif s[i] == '-':\\n\\t\\tif f == 0:\\n\\t\\t\\tf = 0\\n\\t\\telse:\\n\\t\\t\\tf -= 1\\n\\telse:\\n\\t\\tf += 1\\nprint(f)\\n\", \"n = int(input())\\na = input()\\nans = 0\\ncount = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tcount -= 1\\n\\telse:\\n\\t\\tcount += 1\\n\\tans = max(ans, -count)\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nfor i in s:\\n\\tif i == '-' and (not c == 0):\\n\\t\\tc -= 1\\n\\telif i == '+':\\n\\t\\tc += 1\\nprint(c)\\n\", \"n = int(input())\\nl = list(input())\\nc = 0\\nfor i in range(n):\\n\\tif c < 0:\\n\\t\\tc += 1\\n\\tif l[i] == '+':\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tc -= 1\\nprint(max(0, c))\\n\", \"import math\\nimport bisect\\nimport heapq\\nfrom collections import defaultdict\\n\\ndef egcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn (b, 0, 1)\\n\\telse:\\n\\t\\t(g, x, y) = egcd(b % a, a)\\n\\t\\treturn (g, y - b // a * x, x)\\n\\ndef mulinv(b, n):\\n\\t(g, x, _) = egcd(b, n)\\n\\tif g == 1:\\n\\t\\treturn x % n\\n\\ndef isprime(n):\\n\\tfor d in range(2, int(math.sqrt(n)) + 1):\\n\\t\\tif n % d == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef argsort(ls):\\n\\treturn sorted(range(len(ls)), key=ls.__getitem__)\\n\\ndef f(p=0):\\n\\tif p == 1:\\n\\t\\treturn map(int, input().split())\\n\\telif p == 2:\\n\\t\\treturn list(map(int, input().split()))\\n\\telif p == 3:\\n\\t\\treturn list(input())\\n\\telse:\\n\\t\\treturn int(input())\\nn = f()\\ncount = 0\\ns = input()\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tcount -= 1\\n\\telse:\\n\\t\\tcount += 1\\n\\tif count < 0:\\n\\t\\tcount = 0\\nprint(count)\\n\", \"from sys import stdin\\nsys_input = stdin.readline\\n\\ndef si():\\n\\treturn sys_input().rstrip()\\n\\ndef ii():\\n\\treturn int(si())\\n\\ndef sti():\\n\\treturn si().split()\\n\\ndef iti():\\n\\treturn map(int, sti())\\n\\ndef sli():\\n\\treturn list(si())\\n\\ndef ili():\\n\\treturn list(iti())\\n\\ndef main():\\n\\tstone_nums = [0] * (N + 1)\\n\\tfor (i, s) in enumerate(S):\\n\\t\\tif s == '-':\\n\\t\\t\\tstone_nums[i + 1] = stone_nums[i] - 1\\n\\t\\telse:\\n\\t\\t\\tstone_nums[i + 1] = stone_nums[i] + 1\\n\\tmin_stone = min(stone_nums)\\n\\tresult = abs(min_stone) + stone_nums[-1]\\n\\tprint(result)\\n\\treturn\\nN = ii()\\nS = si()\\nmain()\\n\", \"a = int(input())\\nb = list(input())\\nc = 0\\nfor j in b:\\n\\tif j == '+':\\n\\t\\tc += 1\\n\\telif j == '-' and c > 0:\\n\\t\\tc -= 1\\nprint(c)\\n\", \"n = int(input())\\ns = input()\\ncm = 0\\nt = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tt += 1\\n\\telse:\\n\\t\\tt -= 1\\n\\tif t < cm:\\n\\t\\tcm = t\\nprint(t - cm)\\n\", \"input()\\ns = m = 0\\nfor c in input():\\n\\ts += (1, -1)[c > '+']\\n\\tm = min(m, s)\\nprint(s - m)\\n\", \"input()\\ns = input()\\nnet = 0\\nfor c in s:\\n\\tif c == '+':\\n\\t\\tnet += 1\\n\\telif net > 0:\\n\\t\\tnet -= 1\\nprint(net)\\n\", \"n = int(input())\\ns = input()\\nmaxn = 0\\nnow = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tnow += 1\\n\\telse:\\n\\t\\tnow -= 1\\n\\tmaxn = max(maxn, -now)\\nprint(now + maxn)\\n\", \"n = int(input())\\nop = input()\\nflag = 0\\nstones = 0\\nfor i in range(n):\\n\\tif op[i] == '-' and flag == 0:\\n\\t\\tcontinue\\n\\telif op[i] == '-' and flag:\\n\\t\\tstones -= 1\\n\\telse:\\n\\t\\tif not flag:\\n\\t\\t\\tflag = 1\\n\\t\\tstones += 1\\n\\tif stones < 0:\\n\\t\\tstones = 0\\nprint(stones)\\n\", \"n = int(input())\\ns = input()\\nmi = 0\\nm = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tm -= 1\\n\\tmi = min(mi, m)\\nprint(m - mi)\\n\", \"n = int(input())\\ns = str(input())\\ncount = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tcount = count - 1\\n\\telif i == '+':\\n\\t\\tcount = count + 1\\n\\tif count < 0:\\n\\t\\tcount = 0\\nprint(count)\\n\", \"N = int(input())\\ns = input()\\nans = 0\\nfor i in range(N):\\n\\tif s[i] == '-':\\n\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\n\\tif ans < 0:\\n\\t\\tans = 0\\nprint(ans)\\n\", \"n = int(input())\\narr = input()\\nres = 0\\nfor x in range(n):\\n\\tif arr[x] == '+':\\n\\t\\tres = res + 1\\n\\telif arr[x] == '-':\\n\\t\\tif res != 0:\\n\\t\\t\\tres = res - 1\\nprint(res)\\n\", \"input()\\noperations = [op for op in input()]\\nstart_adding = False\\ncount = 0\\nleast = float('inf')\\nfor op in operations:\\n\\tif count == 0 and op == '-':\\n\\t\\tcontinue\\n\\telif op == '-':\\n\\t\\tcount -= 1\\n\\telse:\\n\\t\\tcount += 1\\n\\tif least > count:\\n\\t\\tleast = count\\nprint(count)\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, copy, functools\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\nmod2 = 998244353\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef LLI():\\n\\treturn [list(map(int, l.split())) for l in sys.stdin.readlines()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef pe(s):\\n\\treturn print(str(s), file=sys.stderr)\\n\\ndef JA(a, sep):\\n\\treturn sep.join(map(str, a))\\n\\ndef JAA(a, s, t):\\n\\treturn s.join((t.join(map(str, b)) for b in a))\\n\\ndef IF(c, t, f):\\n\\treturn t if c else f\\n\\ndef YES(c):\\n\\treturn IF(c, 'YES', 'NO')\\n\\ndef Yes(c):\\n\\treturn IF(c, 'Yes', 'No')\\n\\ndef main():\\n\\tt = 1\\n\\trr = []\\n\\tfor _ in range(t):\\n\\t\\tn = I()\\n\\t\\ts = S()\\n\\t\\tr = 0\\n\\t\\tfor c in s:\\n\\t\\t\\tif c == '-':\\n\\t\\t\\t\\tr -= 1\\n\\t\\t\\t\\tif r < 0:\\n\\t\\t\\t\\t\\tr = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tr += 1\\n\\t\\trr.append(r)\\n\\treturn JA(rr, '\\\\n')\\nprint(main())\\n\", \"input()\\ns = input()\\nstones = plus = 0\\nfor c in s:\\n\\tif c == '-':\\n\\t\\tstones = max(0, plus - 1)\\n\\t\\tplus = max(0, plus - 1)\\n\\telse:\\n\\t\\tstones += 1\\n\\t\\tplus += 1\\nprint(stones)\\n\", \"import sys\\nsys.stdin.readline().strip()\\ns = sys.stdin.readline().strip()\\nres = 0\\nfor c in s:\\n\\tif c == '-':\\n\\t\\tres = max(0, res - 1)\\n\\telse:\\n\\t\\tres += 1\\nprint(res)\\n\", \"def findMinInValue(arr):\\n\\tmxcnt = 0\\n\\tcnt = 0\\n\\tfor i in arr:\\n\\t\\tif i == '-':\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tcnt -= 1\\n\\t\\tif cnt > mxcnt:\\n\\t\\t\\tmxcnt = cnt\\n\\tval = mxcnt\\n\\tfor i in arr:\\n\\t\\tif i == '-':\\n\\t\\t\\tval -= 1\\n\\t\\telse:\\n\\t\\t\\tval += 1\\n\\treturn val\\nn = int(input())\\narr = input()\\nprint(findMinInValue(arr))\\n\", \"n = int(input())\\nops = list(input())\\nops.reverse()\\ncurrent_total = 0\\nfinal = 0\\nfor op in ops:\\n\\tif op == '-':\\n\\t\\tcurrent_total += 1\\n\\telse:\\n\\t\\tcurrent_total -= 1\\n\\t\\tif current_total < 0:\\n\\t\\t\\tcurrent_total += 1\\n\\t\\t\\tfinal += 1\\nprint(final)\\n\", \"n = int(input())\\nstn = input()\\ns = t = 0\\nfor c in stn:\\n\\tif c == '-':\\n\\t\\ts -= 1\\n\\telse:\\n\\t\\ts += 1\\n\\tif s < 0:\\n\\t\\ts += 1\\nprint(s)\\n\", \"n = int(input())\\nops = input()\\ndelta = 0\\nmin_delta = 0\\nfor op in ops:\\n\\tif op == '-':\\n\\t\\tdelta -= 1\\n\\telse:\\n\\t\\tdelta += 1\\n\\tmin_delta = min(delta, min_delta)\\nprint(-1 * min_delta + delta)\\n\", \"def solution(l1):\\n\\ti = 0\\n\\tans = 0\\n\\twhile i < len(l1):\\n\\t\\tif l1[i] == '+':\\n\\t\\t\\tans += 1\\n\\t\\tif l1[i] == '-':\\n\\t\\t\\tans = max(0, ans - 1)\\n\\t\\ti += 1\\n\\treturn ans\\n\\ndef answer():\\n\\tn = int(input())\\n\\tl1 = list(input())\\n\\tprint(solution(l1))\\nanswer()\\n\", \"n = int(input())\\nl = input()\\ncount = 0\\nfor i in range(n):\\n\\tif l[i] == '+':\\n\\t\\tcount += 1\\n\\tif count > 0 and l[i] == '-':\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"n = int(input())\\nB = {'+': 1, '-': -1}\\nA = [0] + [B[x] for x in input()]\\nC = [A[0]]\\nfor i in range(1, len(A)):\\n\\tC += [C[-1] + A[i]]\\nprint(sum(A) - min(C))\\n\", \"def run_commands(start, cmd):\\n\\tfor c in cmd:\\n\\t\\tif c == '-':\\n\\t\\t\\tstart -= 1\\n\\t\\telif c == '+':\\n\\t\\t\\tstart += 1\\n\\t\\tif start < 0:\\n\\t\\t\\treturn False\\n\\treturn start\\nn = int(input())\\ncmd = list(input())\\nfor start in range(0, 101):\\n\\tresult = run_commands(start, cmd)\\n\\tif result is False:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tprint(result)\\n\\t\\tbreak\\n\", \"import itertools as it\\ninput()\\ns = input()\\ndeltas = list(map(lambda r: len(list(r[1])), it.groupby(s, lambda c: c)))\\nif s[0] == '-':\\n\\tdeltas = deltas[1:]\\nres = 0\\nfor (i, d) in enumerate(deltas):\\n\\tif i % 2 == 0:\\n\\t\\tres += d\\n\\telse:\\n\\t\\tres = max(0, res - d)\\nprint(res)\\n\", \"T = int(input())\\no = str(input())\\nn = 0\\nfor i in range(T):\\n\\tif o[i] == '+':\\n\\t\\tn += 1\\n\\telif o[i] == '-' and n > 0:\\n\\t\\tn -= 1\\nprint(n)\\n\", \"n = int(input())\\np = input()\\nval = 0\\n\\ndef pile(arg):\\n\\tcoun = 0\\n\\tfor it in p:\\n\\t\\tif it == '+':\\n\\t\\t\\targ += 1\\n\\t\\telif arg >= 1:\\n\\t\\t\\targ -= 1\\n\\t\\telse:\\n\\t\\t\\tcoun = 1\\n\\t\\t\\tbreak\\n\\tif coun == 1:\\n\\t\\treturn 'a'\\n\\telse:\\n\\t\\treturn arg\\nwhile 6 == 6:\\n\\tjam = pile(val)\\n\\tif jam == 'a':\\n\\t\\tval += 1\\n\\telse:\\n\\t\\tprint(jam)\\n\\t\\tbreak\\n\", \"n = int(input())\\npile = input()\\npos = 0\\nneg = 0\\ninitial = 0\\ntotal = 0\\nfor p in pile:\\n\\tif p == '+':\\n\\t\\tpos += 1\\n\\t\\ttotal += 1\\n\\telse:\\n\\t\\tneg += 1\\n\\t\\ttotal -= 1\\n\\tif total < 0:\\n\\t\\tinitial = max(initial, abs(total))\\nprint(initial + pos - neg)\\n\", \"n = int(input())\\no = input()\\nl = list(o)\\nans = 0\\ncnt = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif l[i] == '+':\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tcnt -= 1\\n\\tans = max(cnt, ans)\\nprint(ans)\\n\", \"def main():\\n\\tinput()\\n\\tactions = input()\\n\\tmin_stones = 0\\n\\tfinal_stones = 0\\n\\tfor action in actions:\\n\\t\\tif action == '-':\\n\\t\\t\\tfinal_stones -= 1\\n\\t\\t\\tmin_stones = min(min_stones, final_stones)\\n\\t\\telse:\\n\\t\\t\\tfinal_stones += 1\\n\\tmin_stones = min(min_stones, 0)\\n\\tfinal_stones -= min_stones\\n\\tprint(final_stones)\\nmain()\\n\", \"t = int(input())\\ns = input()\\ncnt = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tcnt -= 1\\n\\t\\tif cnt <= 0:\\n\\t\\t\\tcnt = 0\\nprint(cnt)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nimport math\\nfrom decimal import Decimal\\nfrom decimal import *\\nfrom collections import defaultdict, deque\\nimport heapq\\nfrom decimal import Decimal\\ngetcontext().prec = 25\\nabcd = 'abcdefghijklmnopqrstuvwxyz'\\nABCD = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\\nMOD = 1000000007\\nBUFSIZE = 8192\\nfrom bisect import bisect_left, bisect_right\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nn = int(input())\\nl = input()\\nv = 0\\nt = 0\\nfor i in l:\\n\\tif i == '-':\\n\\t\\tif t == 0:\\n\\t\\t\\tv += 1\\n\\t\\telse:\\n\\t\\t\\tt -= 1\\n\\telse:\\n\\t\\tt += 1\\nprint(t)\\n\", \"n = int(input())\\nops = input()\\ncurr = 0\\nans = 0\\nfor op in ops:\\n\\tcurr += -1 if op == '-' else 1\\n\\tans = max(ans, -curr)\\nfor op in ops:\\n\\tans += -1 if op == '-' else 1\\nprint(ans)\\n\", \"(n, s, m, a) = (int(input()), input(), 0, 0)\\ni = n - 1\\nwhile i >= 0:\\n\\tif s[i] == '+':\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tm -= 1\\n\\ta = max(a, m)\\n\\ti -= 1\\nprint(a)\\n\", \"n = int(input())\\ns = input()\\nrs = 0\\nfor step in s:\\n\\tif step == '-':\\n\\t\\trs = max(0, rs - 1)\\n\\telse:\\n\\t\\trs += 1\\nprint(rs)\\n\", \"def mp():\\n\\treturn map(int, input().split())\\nn = int(input())\\ns = input()\\np = s.count('+')\\nm = n - p\\nc = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tc = max(0, c - 1)\\n\\telse:\\n\\t\\tc += 1\\nprint(c)\\n\", \"import sys\\nfrom collections import *\\nfrom math import *\\nimport re\\n\\ndef inp_arr():\\n\\treturn list(map(int, input().split()))\\n\\ndef inp():\\n\\treturn map(int, input().split())\\n\\ndef lcm(a, b):\\n\\treturn a * b / gcd(a, b)\\n\\ndef iseven(n):\\n\\treturn [False, True][0 if n % 2 else 1]\\nmax_int = sys.maxsize\\nmod = 10 ** 9 + 7\\nn = int(input())\\ns = input()\\npiles = 0\\nfor i in s:\\n\\tif piles == 0 and i == '-':\\n\\t\\tcontinue\\n\\telif i == '+':\\n\\t\\tpiles += 1\\n\\telse:\\n\\t\\tpiles -= 1\\nprint(piles)\\n\", \"n = int(input())\\nsymbols = input()\\ntotals = 0\\nfor character in symbols:\\n\\tif character == '-':\\n\\t\\ttotals = max(0, totals - 1)\\n\\tif character == '+':\\n\\t\\ttotals += 1\\nprint(totals)\\n\", \"n = int(input())\\ns = input()\\ncount = 0\\nfor symbols in s:\\n\\tif count == 0:\\n\\t\\tif symbols == '-':\\n\\t\\t\\tpass\\n\\t\\telif symbols == '+':\\n\\t\\t\\tcount += 1\\n\\telif symbols == '-':\\n\\t\\tcount -= 1\\n\\telif symbols == '+':\\n\\t\\tcount += 1\\nprint(count)\\n\", \"n = int(input())\\nb = []\\nc = 0\\na = list(input())\\nfor i in range(n):\\n\\tif a[i] == '+':\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tc -= 1\\n\\tb.append(c)\\nprint(b[len(b) - 1] if min(b) >= 0 else -min(b) + b[len(b) - 1])\\n\", \"n = int(input())\\nsk = list(input())\\nats = 0\\ncurr = 0\\nfor c in sk:\\n\\tif c == '+':\\n\\t\\tcurr += 1\\n\\telse:\\n\\t\\tcurr -= 1\\n\\tats = min(ats, curr)\\nprint(-ats + curr)\\n\", \"n = int(input())\\ns = str(input())\\nx = 0\\nif n == len(s):\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tx = x - 1\\n\\t\\t\\tif x < 0:\\n\\t\\t\\t\\tx = 0\\n\\t\\telif s[i] == '+':\\n\\t\\t\\tx = x + 1\\nprint(x)\\n\", \"n = int(input())\\ns = str(input())\\ncnt = 0\\ncnt_after_min = 0\\nmin_so_far = 0\\nfor (i, c) in enumerate(s):\\n\\tif c == '-':\\n\\t\\tcnt -= 1\\n\\t\\tcnt_after_min -= 1\\n\\t\\tif cnt <= min_so_far:\\n\\t\\t\\tmin_so_far = cnt\\n\\t\\t\\tcnt_after_min = 0\\n\\telse:\\n\\t\\tcnt += 1\\n\\t\\tcnt_after_min += 1\\nprint(cnt_after_min)\\n\", \"n = int(input())\\ns = input()\\ntot = 0\\nfor item in s:\\n\\tif item == '+':\\n\\t\\ttot = tot + 1\\n\\telif tot > 0:\\n\\t\\ttot = tot - 1\\nprint(tot)\\n\", \"n = int(input())\\nseq = input()\\npilha2 = 0\\nfor i in range(0, len(seq)):\\n\\tif seq[i] == '-':\\n\\t\\tpilha2 += 1\\n\\tif seq[i] == '+':\\n\\t\\tbreak\\nfor j in range(0, len(seq)):\\n\\tif seq[j] == '+':\\n\\t\\tpilha2 += 1\\n\\tif seq[j] == '-':\\n\\t\\tif pilha2 == 0:\\n\\t\\t\\tpilha2 += 1\\n\\t\\tpilha2 -= 1\\nprint(pilha2)\\n\", \"n = input()\\ns = input()\\nfor a in range(101):\\n\\tb = a\\n\\tfor c in s:\\n\\t\\tb = b + 1 if c == '+' else b - 1\\n\\t\\tif b < 0:\\n\\t\\t\\tbreak\\n\\tif b >= 0:\\n\\t\\tprint(b)\\n\\t\\tbreak\\n\", \"n = input()\\nl = input()\\nk = len(l)\\ncnt = 0\\nfor i in range(k):\\n\\tif l[i] == '-' and cnt <= 0:\\n\\t\\tcnt = 0\\n\\telif l[i] == '-' and cnt > 0:\\n\\t\\tcnt = cnt - 1\\n\\telse:\\n\\t\\tcnt += 1\\nif cnt >= 0:\\n\\tprint(cnt)\\nelse:\\n\\tprint('0')\\n\", \"n = input()\\nn = int(n)\\ns = input()\\nk = 0\\nmini = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tk += 1\\n\\telse:\\n\\t\\tk -= 1\\n\\tif k < mini:\\n\\t\\tmini = k\\nk = abs(mini)\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tk += 1\\n\\telse:\\n\\t\\tk -= 1\\nprint(k)\\n\", \"a = input()\\ns = input()\\nans = 0\\nfor i in s:\\n\\tif ans < 0:\\n\\t\\tans = 0\\n\\tif i == '+':\\n\\t\\tans = ans + 1\\n\\telse:\\n\\t\\tans = ans - 1\\nprint(max(0, ans))\\n\", \"n = int(input())\\ns = input()\\nbal = 0\\nmin_bal = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tbal -= 1\\n\\telse:\\n\\t\\tbal += 1\\n\\tmin_bal = min(min_bal, bal)\\nprint(bal - min_bal)\\n\", \"n = int(input())\\na = list(input())\\nk = 0\\nstart = 0\\nminus = 0\\nplus = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tif k == 0:\\n\\t\\t\\tstart += 1\\n\\t\\telse:\\n\\t\\t\\tk -= 1\\n\\telse:\\n\\t\\tk += 1\\n\\tif a[i] == '-':\\n\\t\\tminus += 1\\n\\telse:\\n\\t\\tplus += 1\\nprint(start + plus - minus)\\n\", \"a = int(input())\\nw = input()\\nb = list(w)\\nr = 0\\nif b[0] == '+':\\n\\ti = 0\\nelif b[0] == '-':\\n\\tfor k in b:\\n\\t\\tif k == '-':\\n\\t\\t\\tr = r + 1\\n\\t\\telif k == '+':\\n\\t\\t\\tbreak\\n\\ti = r\\nfor j in b:\\n\\tif j == '+':\\n\\t\\ti = i + 1\\n\\telif j == '-' and i >= 0:\\n\\t\\ti = i - 1\\n\\t\\tif i >= 0:\\n\\t\\t\\ti = i\\n\\t\\telse:\\n\\t\\t\\ti = i + 1\\nprint(i)\\n\", \"n = input()\\ns = input()\\nl = list(s)\\ncount = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tcount += 1\\n\\telif i == '-' and count > 0:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"n = int(input())\\nseq = input()\\nres = 0\\nfor i in range(n):\\n\\tif seq[i] == '+':\\n\\t\\tres += 1\\n\\telif seq[i] == '-':\\n\\t\\tif res > 0:\\n\\t\\t\\tres -= 1\\nprint(res)\\n\", \"n = int(input())\\ns = str(input())\\nans = 0\\ncur = 0\\nfor x in s:\\n\\tif x == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans = max(0, ans - 1)\\nprint(ans)\\n\", \"n = int(input())\\nstone = input()\\ncount_add = 0\\nfor i in stone:\\n\\tif i == '+':\\n\\t\\tcount_add += 1\\n\\telif i == '-':\\n\\t\\tif count_add > 0:\\n\\t\\t\\tcount_add -= 1\\nprint(count_add)\\n\", \"n = int(input())\\nc = 0\\nfor x in list(input()):\\n\\tif x == '+':\\n\\t\\tc += 1\\n\\telif c > 0:\\n\\t\\tc -= 1\\n\\telse:\\n\\t\\tc = 0\\nprint(c)\\n\", \"n = int(input())\\nmoves = input()\\nplusCount = 0\\nminusCount = 0\\nmaxMinus = 0\\nfor i in moves:\\n\\tif i == '+':\\n\\t\\tplusCount += 1\\n\\telse:\\n\\t\\tminusCount += 1\\n\\t\\tmaxMinus = max(maxMinus, minusCount - plusCount)\\nprint(maxMinus + plusCount - minusCount)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = input()\\n\\tfor i in range(n + 1):\\n\\t\\tflag = True\\n\\t\\tstones = i\\n\\t\\tfor j in s:\\n\\t\\t\\tif j == '-':\\n\\t\\t\\t\\tif stones > 0:\\n\\t\\t\\t\\t\\tstones -= 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tstones += 1\\n\\t\\tif flag:\\n\\t\\t\\tn = i\\n\\t\\t\\tbreak\\n\\tstones = n\\n\\tfor i in s:\\n\\t\\tif i == '-':\\n\\t\\t\\tstones -= 1\\n\\t\\telse:\\n\\t\\t\\tstones += 1\\n\\tprint(stones)\\nmain()\\n\", \"n = int(input())\\ns = list(input())\\nt = 0\\na = 0\\nfor i in reversed(range(n)):\\n\\tif s[i] == '+':\\n\\t\\tt += 1\\n\\telse:\\n\\t\\tt -= 1\\n\\ta = max(t, a)\\nprint(a)\\n\", \"n = int(input())\\nstri = input()\\nsumm = 0\\nfor i in stri:\\n\\tif i == '-' and summ > 0:\\n\\t\\tsumm -= 1\\n\\tif i == '+':\\n\\t\\tsumm += 1\\nprint(summ)\\n\", \"n = int(input())\\nA = input()\\nA = list(A)\\ni = 0\\nwhile i < n:\\n\\tif A[i] == '+':\\n\\t\\tA[i] = 1\\n\\telse:\\n\\t\\tA[i] = -1\\n\\ti = i + 1\\ns = sum(A)\\ni = 0\\nmax = 0\\nwhile i < n:\\n\\tif s > max:\\n\\t\\tmax = s\\n\\ts = s - A[i]\\n\\ti = i + 1\\nprint(max)\\n\", \"(n, m, c) = (int(input()), 0, 0)\\nfor ch in input():\\n\\tif ch == '+':\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tc -= 1\\n\\t\\tm = min(m, c)\\nprint(c - m)\\n\", \"a = int(input())\\nb = list(input())\\ncount = 0\\nfor x in range(a):\\n\\tif b[x] == '+':\\n\\t\\tcount += 1\\n\\telif count > 0:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nfor i in s:\\n\\td = 1 if i == '+' else -1\\n\\tc = max(0, c + d)\\nprint(c)\\n\", \"n = int(input())\\noperations = input()\\nstones = 0\\nfor operation in operations:\\n\\tif operation == '-':\\n\\t\\tif stones > 0:\\n\\t\\t\\tstones -= 1\\n\\telif operation == '+':\\n\\t\\tstones += 1\\nprint(stones)\\n\", \"import sys\\nfrom collections import defaultdict as dc\\nfrom collections import Counter\\nfrom bisect import bisect_right, bisect_left\\nimport math\\nfrom operator import itemgetter\\nfrom heapq import heapify, heappop, heappush\\nn = int(input())\\ns = input()\\np = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tp += 1\\n\\telif p > 0:\\n\\t\\tp -= 1\\nprint(p)\\n\", \"n = int(input())\\ns = input()\\nflag = 0\\nindex = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tindex = i\\n\\t\\tflag = 1\\n\\t\\tbreak\\nif flag == 0:\\n\\tprint(0)\\nelse:\\n\\tcount = 0\\n\\tfor j in range(index, n):\\n\\t\\tif s[j] == '-' and count > 0:\\n\\t\\t\\tcount -= 1\\n\\t\\telif s[j] == '+':\\n\\t\\t\\tcount += 1\\n\\tif count < 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(count)\\n\", \"def check(x, s):\\n\\tfor i in s:\\n\\t\\tif i == '-':\\n\\t\\t\\tx -= 1\\n\\t\\telse:\\n\\t\\t\\tx += 1\\n\\t\\tif x < 0:\\n\\t\\t\\treturn -1\\n\\treturn x\\nn = int(input())\\ns = input()\\nans = 2 * n\\nfor i in range(2 * n):\\n\\tx = check(i, s)\\n\\tif x == -1:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tans = min(ans, x)\\nprint(ans)\\n\", \"n = int(input())\\ns = str(input())\\ne = 0\\nf = 0\\nfor i in range(0, len(s)):\\n\\tif s[i] == '+':\\n\\t\\tf = f + 1\\n\\t\\tpass\\n\\telif f > 0:\\n\\t\\tf = f - 1\\n\\telse:\\n\\t\\te = e + 1\\nfor i in range(0, len(s)):\\n\\tif s[i] == '+':\\n\\t\\te = e + 1\\n\\telse:\\n\\t\\te = e - 1\\nprint(e)\\n\", \"input()\\ns = input()\\nk = 0\\nr = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tr += 1\\n\\telse:\\n\\t\\tr -= 1\\n\\tk = min(r, k)\\nprint(-1 * k + r)\\n\", \"input()\\ns = input()\\nres = 0\\nfor i in s:\\n\\tres += 1 if i == '+' else -(res != 0)\\nprint(res)\\n\", \"p = int(input())\\nk = [str(x) for x in input()]\\ny = 0\\nfor i in range(len(k)):\\n\\tif k[i] == '-':\\n\\t\\ty -= 1\\n\\telif k[i] == '+':\\n\\t\\ty += 1\\n\\tif y < 0:\\n\\t\\ty = 0\\nprint(y)\\n\", \"n = input()\\nst = input()\\ncnt = 0\\nfor s in st:\\n\\tif s == '+':\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tcnt -= 1\\n\\t\\tif cnt < 0:\\n\\t\\t\\tcnt = 0\\nif cnt < 0:\\n\\tprint('0')\\nelse:\\n\\tprint(cnt)\\n\", \"n = int(input())\\nop = list(input())\\nflag = 0\\nsum = 0\\nfor i in op:\\n\\tif i == '-':\\n\\t\\tsum += -1\\n\\t\\tif sum < 0:\\n\\t\\t\\tsum = 0\\n\\tif i == '+':\\n\\t\\tsum += 1\\nprint(sum)\\n\", \"n = int(input())\\nst = input()\\narr = [c for c in st]\\na = 0\\nm = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif arr[i] == '+':\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tm -= 1\\n\\ta = max(a, m)\\nprint(a)\\n\", \"n = 0\\nc = 0\\nnum = 0\\nlist = []\\nn = input()\\nlist = input()\\nfor i in range(len(list)):\\n\\tif num > 0 and list[i] == '-':\\n\\t\\tnum -= 1\\n\\telif list[i] == '+':\\n\\t\\tnum += 1\\nprint(num)\\n\", \"n = int(input())\\ns = input().strip()\\nret = 1 << 30\\nfor start in range(n + 1):\\n\\thave = start\\n\\tfor op in s:\\n\\t\\tif op == '-' and have == 0:\\n\\t\\t\\tbreak\\n\\t\\thave += -1 if op == '-' else 1\\n\\telse:\\n\\t\\tret = min(ret, have)\\nprint(ret)\\n\", \"n = int(input())\\ns = input()\\nt = 0\\nmt = 0\\na = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tt += 1\\n\\t\\tmt = min(mt, t)\\n\\telse:\\n\\t\\tt -= 1\\n\\t\\tmt = min(mt, t)\\na = -mt\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\ta += 1\\n\\telse:\\n\\t\\ta -= 1\\nprint(a)\\n\", \"operation = int(input())\\nstr = input()\\ncnt = 0\\nfor (index, ch) in enumerate(str):\\n\\tif ch == '-':\\n\\t\\tif index is 0:\\n\\t\\t\\tcontinue\\n\\t\\tcnt -= 1\\n\\telif ch == '+':\\n\\t\\tcnt += 1\\n\\tif cnt < 0:\\n\\t\\tcnt = 0\\nprint(cnt)\\n\", \"x = int(input())\\na = input()\\nt = 0\\nif a[0] == '+':\\n\\tt = 1\\nelse:\\n\\tt = 0\\nfor i in range(1, x):\\n\\tif a[i] == '+':\\n\\t\\tt = t + 1\\n\\telif t > 0:\\n\\t\\tt = t - 1\\nprint(t)\\n\", \"n = int(input())\\nops = input()\\nresp = 0\\nfor op in ops:\\n\\tif op == '-':\\n\\t\\tresp = max(0, resp - 1)\\n\\telse:\\n\\t\\tresp += 1\\nprint(resp)\\n\", \"n = int(input())\\ns = input()\\nind = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tind = i\\n\\t\\tbreak\\nans = 0\\nfor i in range(ind, n):\\n\\tif s[i] == '+':\\n\\t\\tans += 1\\n\\telif s[i] == '-' and ans > 0:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"input()\\nres = 0\\nfor c in input():\\n\\tif c == '+':\\n\\t\\tres += 1\\n\\telse:\\n\\t\\tres = max(res - 1, 0)\\nprint(res)\\n\", \"n = int(input())\\nentrada = []\\nentrada = input()\\nmais = 0\\nfor i in entrada:\\n\\tif i == '-':\\n\\t\\tif mais > 0:\\n\\t\\t\\tmais = mais - 1\\n\\telif i == '+':\\n\\t\\tmais = mais + 1\\nprint(mais)\\n\", \"n = int(input())\\ncur = [0]\\ncount = 0\\nfor el in input():\\n\\tif el == '-':\\n\\t\\tcount += 1\\n\\t\\tcur.append(cur[-1] - 1)\\n\\telse:\\n\\t\\tcur.append(cur[-1] + 1)\\nprint(-min(cur) + n - 2 * count)\\n\", \"n = int(input())\\ns = str(input())\\ns = ''.join(reversed(s))\\np = 0\\nm = 0\\nfor i in range(0, n):\\n\\tif s[i] == '+':\\n\\t\\tp += 1\\n\\telse:\\n\\t\\tp -= 1\\n\\tm = max(m, p)\\nprint(m)\\n\", \"n = int(input())\\ns = input()\\na = [0]\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\ta.append(a[i] + 1)\\n\\telse:\\n\\t\\ta.append(a[i] - 1)\\nprint(a[n] - min(a))\\n\", \"nOperacoes = int(input())\\noperacoes = input()\\nstart = False\\ncontador = 0\\nfor i in range(len(operacoes)):\\n\\tif operacoes[i] == '+':\\n\\t\\tstart = True\\n\\tif start == True:\\n\\t\\tif operacoes[i] == '-':\\n\\t\\t\\tif contador != 0:\\n\\t\\t\\t\\tcontador -= 1\\n\\t\\telse:\\n\\t\\t\\tcontador += 1\\nprint(contador)\\n\", \"n = int(input())\\ns = input()\\nc = 0\\nans = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tc -= 1\\n\\telse:\\n\\t\\tc += 1\\n\\tans = min(ans, c)\\nst = abs(ans)\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tst -= 1\\n\\telse:\\n\\t\\tst += 1\\nprint(st)\\n\", \"n = int(input())\\nstart = 0\\nstep = 0\\nline = list(input())\\nfor i in line:\\n\\tif i == '+':\\n\\t\\tstep += 1\\n\\telif step == 0:\\n\\t\\tpass\\n\\telse:\\n\\t\\tstep -= 1\\nprint(step)\\n\", \"n = int(input())\\nops = input()\\nbal = 0\\nmin_bal = 0\\nfor op in ops:\\n\\tif op == '-':\\n\\t\\tbal -= 1\\n\\telse:\\n\\t\\tbal += 1\\n\\tmin_bal = min(min_bal, bal)\\nprint('{}'.format(min_bal * -1 + bal))\\n\", \"import math\\nn = int(input())\\ns = list(input())\\nlvl = 0\\nmlvl = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tlvl -= 1\\n\\telse:\\n\\t\\tlvl += 1\\n\\tmlvl = min(lvl, mlvl)\\nmlvl = abs(mlvl)\\nstart = mlvl\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tstart -= 1\\n\\telse:\\n\\t\\tstart += 1\\nprint(start)\\n\", \"k = input()\\ns = input().strip()\\ncount = 0\\nfor x in s:\\n\\tif count and x == '-':\\n\\t\\tcount -= 1\\n\\telif x == '+':\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tpass\\nprint(count)\\n\", \"n = int(input())\\ns = input()\\nn = len(s)\\nch = 0\\nmaxi = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif s[i] == '+':\\n\\t\\tch += 1\\n\\telif s[i] == '-':\\n\\t\\tch -= 1\\n\\tmaxi = max(maxi, ch)\\nprint(maxi)\\n\", \"n = int(input())\\nk = input()\\ncounter1 = 0\\ncounter2 = 0\\nfor i in range(len(k)):\\n\\tif k[i] == '-':\\n\\t\\tcounter1 -= 1\\n\\telse:\\n\\t\\tcounter1 += 1\\n\\tif counter2 > counter1:\\n\\t\\tcounter1 = counter2\\nprint(counter1)\\n\", \"i = int(input())\\nj = str(input())\\ntotal = 0\\ntest = []\\nfor i in j:\\n\\tif i == '+':\\n\\t\\ttotal = total + 1\\n\\t\\ttest.append(total)\\n\\telse:\\n\\t\\ttotal = total - 1\\n\\t\\ttest.append(total)\\nnumber_of_stones = min(test)\\nnumber_of_stones = abs(min(number_of_stones, 0))\\nminus = j.count('-')\\nplus = j.count('+')\\ntotal = number_of_stones + plus * 1 - minus * 1\\nprint(total)\\n\", \"n = int(input())\\nb = input()\\npile = 0\\nfor i in range(n):\\n\\tif b[i] == '+':\\n\\t\\tpile += 1\\n\\telif b[i] == '-' and pile == 0:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tpile -= 1\\nprint(pile)\\n\", \"N = int(input())\\nS = input()\\nn = 0\\nfor s in S:\\n\\tif s == '-':\\n\\t\\tif n > 0:\\n\\t\\t\\tn -= 1\\n\\telif s == '+':\\n\\t\\tn += 1\\nprint(n)\\n\", \"n = int(input())\\ns = str(input())\\nstack = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tstack += 1\\n\\telse:\\n\\t\\tstack = max(stack - 1, 0)\\nprint(stack)\\n\", \"n = int(input())\\ns = input()\\nss = []\\nans = 0\\ncur = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tif cur == 0:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tcur -= 1\\n\\telse:\\n\\t\\tcur += 1\\nprint(ans - s.count('-') + s.count('+'))\\n\", \"import sys\\n\\ndef count_stones(n, s):\\n\\tcurrent = 0\\n\\tmax_negative_current = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tcurrent -= 1\\n\\t\\telse:\\n\\t\\t\\tcurrent += 1\\n\\t\\tmax_negative_current = min(max_negative_current, current)\\n\\treturn -max_negative_current + current\\nn = int(input())\\ns = input()\\nprint(count_stones(n, s))\\n\", \"n = int(input())\\ns = input()\\nind = 0\\nif s[0] == '-':\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tind = i\\n\\tif ind == n - 1 and s[ind] == '-':\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tc = 0\\n\\t\\tfor i in range(ind, n):\\n\\t\\t\\tif s[i] == '+':\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc -= 1\\n\\t\\t\\tif c < 0:\\n\\t\\t\\t\\tc = 0\\n\\t\\tprint(c)\\nelse:\\n\\tc = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tc -= 1\\n\\t\\tif c < 0:\\n\\t\\t\\tc = 0\\n\\tprint(c)\\n\", \"n = int(input())\\nm = input()\\nk = 0\\nans = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif m[i] == '+':\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tans -= 1\\n\\tk = max(ans, k)\\nprint(k)\\n\", \"num = eval(input())\\ncz = input()\\nans = 0\\nfor c in cz:\\n\\tif c == '-':\\n\\t\\tif ans != 0:\\n\\t\\t\\tans -= 1\\n\\t\\telse:\\n\\t\\t\\tans = 0\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"import math\\nn = int(input())\\ns = input()\\nans = 0\\nfor i in range(0, len(s)):\\n\\tif s[i] == '-' and ans > 0:\\n\\t\\tans = ans - 1\\n\\telif s[i] == '+':\\n\\t\\tans = ans + 1\\n\\telse:\\n\\t\\tcontinue\\nprint(ans)\\n\", \"n = input()\\nn = int(n)\\ns = input()\\npos = 0\\nneg = 0\\nans = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tans = ans - 1\\n\\t\\tif ans < 0:\\n\\t\\t\\tans = ans + 1\\n\\telif s[i] == '+':\\n\\t\\tans = ans + 1\\n\\t\\tif ans < 0:\\n\\t\\t\\tans = ans + 1\\nprint(ans)\\n\", \"input()\\ns = input()\\nwhile '+-' in s:\\n\\ts = s.replace('+-', '')\\nprint(max(s.count('+') - s.count('-'), len(s) - len(s.rstrip('+'))))\\n\", \"n = int(input())\\nm = input()\\nl = []\\nc = 0\\nfor i in range(0, n):\\n\\tif m[i] == '+':\\n\\t\\tc += 1\\n\\telif c > 0:\\n\\t\\tc -= 1\\nprint(c)\\n\", \"ops_count = int(input())\\nops = input()\\nx = 0\\nfor i in range(ops_count):\\n\\tx = max(0, x + (-1 if ops[i] == '-' else 1))\\nprint(x)\\n\", \"def getn():\\n\\treturn int(input())\\n\\ndef getns():\\n\\treturn [int(x) for x in input().split()]\\nn = getn()\\ns = input()\\nans = 0\\nm = 0\\nfor c in s:\\n\\tif c == '-':\\n\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\n\\tm = min(m, ans)\\nprint(ans - m)\\n\", \"n = int(input())\\nl = list(input())\\n(count, z) = (0, True)\\ni = 0\\nfor i in range(len(l)):\\n\\tif l[i] == '-':\\n\\t\\tcount -= 1\\n\\t\\tif count < 0:\\n\\t\\t\\tcount = 0\\n\\telse:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = input()\\n\\tret = 0\\n\\tfor c in s:\\n\\t\\tif c == '-':\\n\\t\\t\\tret = max(0, ret - 1)\\n\\t\\telse:\\n\\t\\t\\tret += 1\\n\\tprint(ret)\\nmain()\\n\", \"n = int(input())\\ns = input()\\nans = 0\\nfor si in s:\\n\\tif si == '-':\\n\\t\\tif ans > 0:\\n\\t\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\nl = []\\nval = 0\\nl.append(0)\\nfor i in range(0, n):\\n\\tif s[i] == '-':\\n\\t\\tval = val - 1\\n\\t\\tl.append(val)\\n\\telse:\\n\\t\\tval = val + 1\\n\\t\\tl.append(val)\\nmn = min(l)\\nval = -mn\\nfor i in range(0, n):\\n\\tif s[i] == '-':\\n\\t\\tval = val - 1\\n\\telse:\\n\\t\\tval = val + 1\\nprint(val)\\n\", \"IL = lambda : list(map(int, input().split()))\\nn = input()\\nS = input()\\nans = 0\\nfor s in S:\\n\\tif s == '+':\\n\\t\\tans += 1\\n\\telif ans:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"input()\\nr = 0\\nfor c in input():\\n\\tr = max(0, r + (c < '-') * 2 - 1)\\nprint(r)\\n\", \"n = int(input())\\ns = input()\\nmx = 0\\nreal = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\treal -= 1\\n\\t\\tif real < 0:\\n\\t\\t\\tmx += 1\\n\\t\\t\\treal = 0\\n\\telse:\\n\\t\\treal += 1\\nprint(real)\\n\", \"num = int(input())\\n(mi, ma, p) = (0, 0, 0)\\ns = input()\\nfor f in list(s):\\n\\tif f == '+':\\n\\t\\tp += 1\\n\\telse:\\n\\t\\tp -= 1\\n\\t\\tif p < mi:\\n\\t\\t\\tmi = p\\nprint(p - mi)\\n\", \"n = int(input())\\ns = input()\\nnr = 0\\nfor c in s:\\n\\tif c == '+':\\n\\t\\tnr += 1\\n\\telif nr != 0:\\n\\t\\tnr -= 1\\nprint(nr)\\n\", \"n = int(input())\\ns = str(input())\\np = 0\\nfor ch in s:\\n\\tif ch == '-':\\n\\t\\tif p > 0:\\n\\t\\t\\tp -= 1\\n\\t\\telse:\\n\\t\\t\\tcontinue\\n\\telse:\\n\\t\\tp += 1\\nprint(p)\\n\", \"(n, cnt) = (int(input()), 0)\\nlist = [0]\\ns = input()\\nfor ch in s:\\n\\tif ch == '-':\\n\\t\\tcnt -= 1\\n\\t\\tif cnt < 0:\\n\\t\\t\\tlist.append(abs(cnt))\\n\\telse:\\n\\t\\tcnt += 1\\nk = max(list)\\nfor ch in s:\\n\\tif ch == '-':\\n\\t\\tk -= 1\\n\\telse:\\n\\t\\tk += 1\\nprint(k)\\n\", \"x = int(input())\\ns = input()\\nsum = 0\\ntmp = ''\\nfor char in s:\\n\\tif char == '+':\\n\\t\\tsum = sum + 1\\n\\telif char == '-':\\n\\t\\tsum = sum - 1\\n\\tif sum < 0:\\n\\t\\tsum = 0\\nprint(sum)\\n\", \"n = int(input())\\ns = input()\\ns = list(s)\\nc1 = 0\\nc2 = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif s[i] == '+':\\n\\t\\tc1 += 1\\n\\telse:\\n\\t\\tc1 -= 1\\n\\tc2 = max(c1, c2)\\nprint(c2)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = input()\\n\\tmi = 0\\n\\tc = 0\\n\\tfor i in s:\\n\\t\\tif i == '+':\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tc -= 1\\n\\t\\tmi = min(mi, c)\\n\\tprint(c - mi)\\n\\treturn 0\\nmain()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef main():\\n\\tn = int(input())\\n\\ts = input().strip()\\n\\tinitalVal = 0\\n\\tr = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tr += 1\\n\\t\\telif r == 0:\\n\\t\\t\\tinitalVal += 1\\n\\t\\telse:\\n\\t\\t\\tr -= 1\\n\\tprint(r)\\nmain()\\n\", \"n = int(input())\\ns = input()\\nans = 10000\\nfor i in range(0, 105):\\n\\tf = True\\n\\tx = i\\n\\tfor c in s:\\n\\t\\tif c == '-':\\n\\t\\t\\tx -= 1\\n\\t\\telse:\\n\\t\\t\\tx += 1\\n\\t\\tif x < 0:\\n\\t\\t\\tf = False\\n\\tif f:\\n\\t\\tans = min(ans, x)\\nprint(ans)\\n\", \"n = int(input())\\nop = input()\\nrocks = 0\\nfor c in op:\\n\\tif c == '+':\\n\\t\\trocks += 1\\n\\telif rocks == 0:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\trocks -= 1\\nprint(rocks)\\n\", \"n = int(input())\\nminimal = 0\\ns = input()\\nfor c in s:\\n\\tif c == '-':\\n\\t\\tminimal = max(0, minimal - 1)\\n\\telse:\\n\\t\\tminimal += 1\\nprint(max(0, minimal))\\n\", \"n = int(input())\\nstr = input()\\ncur = 0\\nfor i in range(n):\\n\\tif str[i] == '-':\\n\\t\\tcur = max(0, cur - 1)\\n\\telse:\\n\\t\\tcur += 1\\nprint(cur)\\n\", \"a = int(input())\\nb = input()\\nc = 0\\nfor x in b:\\n\\tif x == '-' and c != 0:\\n\\t\\ta += 1\\n\\t\\tc -= 1\\n\\telif x == '+' and a > 0:\\n\\t\\ta -= 1\\n\\t\\tc += 1\\nprint(c)\\n\", \"n = int(input())\\nstring = input()\\ncounter = 0\\nfor i in string:\\n\\tif i == '-':\\n\\t\\tcounter = max(0, counter - 1)\\n\\telse:\\n\\t\\tcounter += 1\\nprint(counter)\\n\", \"import sys\\n\\ndef main():\\n\\tpass\\n\\ndef binary(n):\\n\\treturn bin(n).replace('0b', '')\\n\\ndef decimal(s):\\n\\treturn int(s, 2)\\n\\ndef pow2(n):\\n\\tp = 0\\n\\twhile n > 1:\\n\\t\\tn //= 2\\n\\t\\tp += 1\\n\\treturn p\\n\\ndef isPrime(n):\\n\\tif n == 1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\troot = int(n ** 0.5)\\n\\t\\troot += 1\\n\\t\\tfor i in range(2, root):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n\\ndef lts(l):\\n\\ts = ''.join(map(str, l))\\n\\treturn s\\n\\ndef stl(s):\\n\\tl = list(s)\\n\\treturn l\\n\\ndef sq(a, target, arr=[]):\\n\\ts = sum(arr)\\n\\tif s == target:\\n\\t\\treturn arr\\n\\tif s >= target:\\n\\t\\treturn\\n\\tfor i in range(len(a)):\\n\\t\\tn = a[i]\\n\\t\\tremaining = a[i + 1:]\\n\\t\\tans = sq(remaining, target, arr + [n])\\n\\t\\tif ans:\\n\\t\\t\\treturn ans\\n\\ndef SieveOfEratosthenes(n):\\n\\tcnt = 0\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\tfor p in range(2, n + 1):\\n\\t\\tif prime[p]:\\n\\t\\t\\tcnt += 1\\n\\treturn cnt\\n\\ndef nCr(n, r):\\n\\tf = math.factorial\\n\\treturn f(n) // f(r) // f(n - r)\\nmod = int(1000000000.0) + 7\\n\\ndef ssinp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef iinp():\\n\\treturn int(input())\\n\\ndef nninp():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef llinp():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef p(xyz):\\n\\tprint(xyz)\\n\\ndef p2(a, b):\\n\\tprint(a, b)\\nimport math\\nn = iinp()\\ns = ssinp()\\nsum = ans = 0\\nfor c in s:\\n\\tif c == '+':\\n\\t\\tsum += 1\\n\\telse:\\n\\t\\tsum -= 1\\n\\tans = min(ans, sum)\\np(sum - ans)\\n\", \"n = int(input())\\ns = input()\\nmi = 0\\nfor i in s:\\n\\tif i == '-' and mi == 0:\\n\\t\\tmi += 0\\n\\telif i == '-' and mi > 0:\\n\\t\\tmi -= 1\\n\\telse:\\n\\t\\tmi += 1\\nprint(mi)\\n\", \"n = int(input())\\ns = input()\\nm = n\\nx = n\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tx -= 1\\n\\telse:\\n\\t\\tx += 1\\n\\tif x < m:\\n\\t\\tm = x\\ny = x\\nx = n\\nst = n - m\\nd = abs(x - st)\\nif st >= x:\\n\\tprint(y + d)\\nelse:\\n\\tprint(y - d)\\n\", \"n = int(input())\\ns = input()\\npile = 0\\nminp = 0\\nnow = 0\\nfor i in range(0, n):\\n\\tpile = pile - (s[i] == '-') + (s[i] == '+')\\n\\tnow = now - (s[i] == '-') + (s[i] == '+')\\n\\tif pile < minp:\\n\\t\\tminp = pile\\n\\t\\tnow = 0\\nprint(now)\\n\", \"input()\\ns = input()\\nm = 0\\nn = 0\\nplus = 0\\nminus = 0\\nfor c in s:\\n\\tif c == '+':\\n\\t\\tn += 1\\n\\t\\tplus += 1\\n\\telse:\\n\\t\\tn -= 1\\n\\t\\tminus += 1\\n\\t\\tm = min(m, n)\\nprint(-m + plus - minus)\\n\", \"n = int(input())\\ns = list(input())\\nf = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tf += 1\\n\\telif i == '-' and f != 0:\\n\\t\\tf -= 1\\nprint(f)\\n\", \"n = int(input())\\nst = input()\\nkol = 0\\nfor i in range(n):\\n\\tif st[i] == '-':\\n\\t\\tif kol != 0:\\n\\t\\t\\tkol -= 1\\n\\telse:\\n\\t\\tkol += 1\\nprint(kol)\\n\", \"n = int(input())\\ns = input()\\nini = 0\\nsta = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tif sta == 0:\\n\\t\\t\\tini += 1\\n\\t\\telse:\\n\\t\\t\\tsta -= 1\\n\\tif s[i] == '+':\\n\\t\\tsta += 1\\nprint(sta)\\n\", \"n = int(input())\\nstring = input()\\nns = 0\\nfor i in range(n):\\n\\tif string[i] == '-':\\n\\t\\tif ns > 0:\\n\\t\\t\\tns -= 1\\n\\t\\telse:\\n\\t\\t\\tns = 0\\n\\telse:\\n\\t\\tns += 1\\nprint(ns)\\n\", \"i = int(input())\\nar = input()\\nres = 0\\nif i > 0:\\n\\tfor i in range(0, i):\\n\\t\\tif res == 0 and ar[i] != '-' or ar[i] == '+':\\n\\t\\t\\tres = res + 1\\n\\t\\telif res != 0 and ar[i] == '-':\\n\\t\\t\\tres = res - 1\\nprint(max(res, 0))\\n\", \"n = int(input())\\ns = input()\\ncount = 0\\nfor each in s:\\n\\tif each == '+':\\n\\t\\tcount = count + 1\\n\\telif count > 0:\\n\\t\\tcount = count - 1\\nprint(count)\\n\", \"a = int(input())\\nop = list(input())\\nstore = True\\nans = 0\\ntest = 0\\nwhile store:\\n\\tans = test\\n\\tfor i in range(a):\\n\\t\\tif op[i] == '+':\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tans -= 1\\n\\t\\tif ans < 0:\\n\\t\\t\\tbreak\\n\\tif ans >= 0:\\n\\t\\tstore = False\\n\\ttest += 1\\nprint(ans)\\n\", \"n = int(input())\\nlis = list(input())\\nans = 0\\nfor i in lis:\\n\\tif i == '-':\\n\\t\\tif ans != 0:\\n\\t\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"def main():\\n\\tx = int(input())\\n\\ti = 0\\n\\tmas = []\\n\\tch = 0\\n\\tnums = input()\\n\\twhile i < x:\\n\\t\\ts = nums[i]\\n\\t\\tmas.append(s)\\n\\t\\ti += 1\\n\\tfor i in range(0, len(mas)):\\n\\t\\tif mas[i] == '-' and i != 0:\\n\\t\\t\\tch -= 1\\n\\t\\tif mas[i] == '+':\\n\\t\\t\\tch += 1\\n\\t\\tif ch < 0:\\n\\t\\t\\tch = 0\\n\\tprint(ch)\\nmain()\\n\", \"from math import *\\nfrom cmath import *\\nfrom itertools import *\\nfrom decimal import *\\nfrom fractions import *\\nfrom sys import *\\nfor _ in range(1):\\n\\tn = int(input())\\n\\ts = input()\\n\\tans = 0\\n\\tfor x in s:\\n\\t\\tif ans > 0 and x == '-':\\n\\t\\t\\tans -= 1\\n\\t\\telif x == '+':\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\n\", \"n = int(input())\\na = input()\\nres = 0\\nfor i in range(n):\\n\\tif a[i] == '-':\\n\\t\\tres -= 1\\n\\telif a[i] == '+':\\n\\t\\tif res < 0:\\n\\t\\t\\tres = 1\\n\\t\\telse:\\n\\t\\t\\tres += 1\\nif res < 0:\\n\\tres = 0\\nprint(res)\\n\", \"n = int(input())\\ns = input()\\ncur = 0\\nfor a in s:\\n\\tcur = max(cur, 0)\\n\\tif a == '-':\\n\\t\\tcur -= 1\\n\\telse:\\n\\t\\tcur += 1\\n\\tcur = max(cur, 0)\\nprint(cur)\\n\", \"import sys, os\\nf = lambda : list(map(int, input().split()))\\nif 'local' in os.environ:\\n\\tsys.stdin = open('./input.txt', 'r')\\n\\ndef solve():\\n\\tn = f()[0]\\n\\ts = input()\\n\\tans = 0\\n\\tfor i in s:\\n\\t\\tif i == '-':\\n\\t\\t\\tans = max(0, ans - 1)\\n\\t\\tif i == '+':\\n\\t\\t\\tans = ans + 1\\n\\tprint(ans)\\nsolve()\\n\", \"def P1323A():\\n\\tt = int(input())\\n\\tl = []\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\ta = input().split()\\n\\t\\ta = [int(j) for j in a]\\n\\t\\tif len(a) == 1 and a[0] % 2 != 0:\\n\\t\\t\\tl.append('-1')\\n\\t\\t\\tcontinue\\n\\t\\tfor k in range(2):\\n\\t\\t\\tif a[k] % 2 == 0:\\n\\t\\t\\t\\tl.append(1)\\n\\t\\t\\t\\tl.append(k + 1)\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif k > 0:\\n\\t\\t\\t\\tl.append('2')\\n\\t\\t\\t\\tl.append('1 2')\\n\\t\\t\\t\\tbreak\\n\\tfor i in l:\\n\\t\\tprint(i)\\n\\ndef P1159A():\\n\\tn = int(input())\\n\\ts = input()\\n\\tt = 0\\n\\tfor i in s:\\n\\t\\tif i == '-' and t == 0:\\n\\t\\t\\tcontinue\\n\\t\\tif i == '-':\\n\\t\\t\\tt -= 1\\n\\t\\tif i == '+':\\n\\t\\t\\tt += 1\\n\\tprint(t)\\nP1159A()\\n\", \"num = int(input())\\npm = input()\\nmin_ = 0\\nhg = 0\\nfor i in range(num):\\n\\tif pm[i] == '+':\\n\\t\\thg += 1\\n\\telse:\\n\\t\\thg -= 1\\n\\tif hg < min_:\\n\\t\\tmin_ = hg\\nprint(hg - min_)\\n\", \"from sys import stdin, stdout\\nimport cProfile, math\\nfrom collections import Counter, defaultdict, deque\\nfrom bisect import bisect_left, bisect, bisect_right\\nimport itertools\\nfrom copy import deepcopy\\nfrom fractions import Fraction\\nimport sys, threading\\nimport operator as op\\nfrom functools import reduce\\nsys.setrecursionlimit(10 ** 6)\\nthreading.stack_size(2 ** 27)\\nfac_warmup = False\\nprintHeap = str()\\nmemory_constrained = False\\nP = 10 ** 9 + 7\\nimport sys\\n\\nclass merge_find:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.parent = list(range(n))\\n\\t\\tself.size = [1] * n\\n\\t\\tself.num_sets = n\\n\\t\\tself.lista = [[_] for _ in range(n)]\\n\\n\\tdef find(self, a):\\n\\t\\tto_update = []\\n\\t\\twhile a != self.parent[a]:\\n\\t\\t\\tto_update.append(a)\\n\\t\\t\\ta = self.parent[a]\\n\\t\\tfor b in to_update:\\n\\t\\t\\tself.parent[b] = a\\n\\t\\treturn self.parent[a]\\n\\n\\tdef merge(self, a, b):\\n\\t\\ta = self.find(a)\\n\\t\\tb = self.find(b)\\n\\t\\tif a == b:\\n\\t\\t\\treturn\\n\\t\\tif self.size[a] < self.size[b]:\\n\\t\\t\\t(a, b) = (b, a)\\n\\t\\tself.num_sets -= 1\\n\\t\\tself.parent[b] = a\\n\\t\\tself.size[a] += self.size[b]\\n\\t\\tself.lista[a] += self.lista[b]\\n\\n\\tdef set_size(self, a):\\n\\t\\treturn self.size[self.find(a)]\\n\\n\\tdef __len__(self):\\n\\t\\treturn self.num_sets\\n\\ndef display(string_to_print):\\n\\tstdout.write(str(string_to_print) + '\\\\n')\\n\\ndef primeFactors(n):\\n\\tfactors = dict()\\n\\tfor i in range(2, math.ceil(math.sqrt(n)) + 1):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tif i in factors:\\n\\t\\t\\t\\tfactors[i] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfactors[i] = 1\\n\\t\\t\\tn = n // i\\n\\tif n > 2:\\n\\t\\tfactors[n] = 1\\n\\treturn factors\\n\\ndef all_factors(n):\\n\\treturn set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\\n\\ndef fibonacci_modP(n, MOD):\\n\\tif n < 2:\\n\\t\\treturn 1\\n\\treturn (cached_fn(fibonacci_modP, (n + 1) // 2, MOD) * cached_fn(fibonacci_modP, n // 2, MOD) + cached_fn(fibonacci_modP, (n - 1) // 2, MOD) * cached_fn(fibonacci_modP, (n - 2) // 2, MOD)) % MOD\\n\\ndef factorial_modP_Wilson(n, p):\\n\\tif p <= n:\\n\\t\\treturn 0\\n\\tres = p - 1\\n\\tfor i in range(n + 1, p):\\n\\t\\tres = res * cached_fn(InverseEuler, i, p) % p\\n\\treturn res\\n\\ndef binary(n, digits=20):\\n\\tb = bin(n)[2:]\\n\\tb = '0' * (digits - len(b)) + b\\n\\treturn b\\n\\ndef isprime(n):\\n\\tif n < 4:\\n\\t\\treturn True\\n\\tif n % 2 == 0:\\n\\t\\treturn False\\n\\tif n % 3 == 0:\\n\\t\\treturn False\\n\\ti = 5\\n\\tw = 2\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\treturn False\\n\\t\\ti += w\\n\\t\\tw = 6 - w\\n\\treturn True\\n\\ndef generate_primes(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * 2, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\treturn prime\\nfactorial_modP = []\\n\\ndef warm_up_fac(MOD):\\n\\tglobal factorial_modP, fac_warmup\\n\\tif fac_warmup:\\n\\t\\treturn\\n\\tfactorial_modP = [1 for _ in range(fac_warmup_size + 1)]\\n\\tfor i in range(2, fac_warmup_size):\\n\\t\\tfactorial_modP[i] = factorial_modP[i - 1] * i % MOD\\n\\tfac_warmup = True\\n\\ndef InverseEuler(n, MOD):\\n\\treturn pow(n, MOD - 2, MOD)\\n\\ndef nCr(n, r, MOD):\\n\\tglobal fac_warmup, factorial_modP\\n\\tif not fac_warmup:\\n\\t\\twarm_up_fac(MOD)\\n\\t\\tfac_warmup = True\\n\\treturn factorial_modP[n] * (pow(factorial_modP[r], MOD - 2, MOD) * pow(factorial_modP[n - r], MOD - 2, MOD) % MOD) % MOD\\n\\ndef test_print(*args):\\n\\tif testingMode:\\n\\t\\tprint(args)\\n\\ndef display_list(list1, sep=' '):\\n\\tstdout.write(sep.join(map(str, list1)) + '\\\\n')\\n\\ndef display_2D_list(li):\\n\\tfor i in li:\\n\\t\\tprint(i)\\n\\ndef prefix_sum(li):\\n\\tsm = 0\\n\\tres = []\\n\\tfor i in li:\\n\\t\\tsm += i\\n\\t\\tres.append(sm)\\n\\treturn res\\n\\ndef get_int():\\n\\treturn int(stdin.readline().strip())\\n\\ndef get_tuple():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef get_list():\\n\\treturn list(map(int, stdin.readline().split()))\\nimport heapq, itertools\\npq = []\\nentry_finder = {}\\nREMOVED = '<removed-task>'\\n\\ndef add_task(task, priority=0):\\n\\tif task in entry_finder:\\n\\t\\tremove_task(task)\\n\\tcount = next(counter)\\n\\tentry = [priority, count, task]\\n\\tentry_finder[task] = entry\\n\\theapq.heappush(pq, entry)\\n\\ndef remove_task(task):\\n\\tentry = entry_finder.pop(task)\\n\\tentry[-1] = REMOVED\\n\\ndef pop_task():\\n\\twhile pq:\\n\\t\\t(priority, count, task) = heapq.heappop(pq)\\n\\t\\tif task is not REMOVED:\\n\\t\\t\\tdel entry_finder[task]\\n\\t\\t\\treturn task\\n\\traise KeyError('pop from an empty priority queue')\\nmemory = dict()\\n\\ndef clear_cache():\\n\\tglobal memory\\n\\tmemory = dict()\\n\\ndef cached_fn(fn, *args):\\n\\tglobal memory\\n\\tif args in memory:\\n\\t\\treturn memory[args]\\n\\telse:\\n\\t\\tresult = fn(*args)\\n\\t\\tmemory[args] = result\\n\\t\\treturn result\\n\\ndef ncr(n, r):\\n\\treturn math.factorial(n) / (math.factorial(n - r) * math.factorial(r))\\n\\ndef binary_serach(i, li):\\n\\tfn = lambda x: li[x] - x // i\\n\\tx = -1\\n\\tb = len(li)\\n\\twhile b >= 1:\\n\\t\\twhile b + x < len(li) and fn(b + x) > 0:\\n\\t\\t\\tx += b\\n\\t\\tb = b // 2\\n\\treturn x\\nTestCases = False\\ntestingMode = False\\nfac_warmup_size = 10 ** 5 + 100\\noptimiseForReccursion = False\\nfrom math import factorial\\n\\ndef main():\\n\\tn = get_int()\\n\\tli = str(input())\\n\\tcount = 0\\n\\tfor i in li:\\n\\t\\tif i == '+':\\n\\t\\t\\tcount += 1\\n\\t\\telif count > 0:\\n\\t\\t\\tcount -= 1\\n\\tprint(count)\\nif TestCases:\\n\\tfor i in range(get_int()):\\n\\t\\tcProfile.run('main()') if testingMode else main()\\nelse:\\n\\t(cProfile.run('main()') if testingMode else main()) if not optimiseForReccursion else threading.Thread(target=main).start()\\n\", \"n = int(input())\\nu = list(input())\\nmp = 0\\np = 0\\nfor i in range(n):\\n\\tif u[i] == '-':\\n\\t\\tp -= 1\\n\\t\\tmp = min(p, mp)\\n\\telse:\\n\\t\\tp += 1\\nprint(p - mp)\\n\", \"n = input().strip()\\ns = input().strip()\\n\\ndef rock(n, s):\\n\\tm = 0\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tm = m + 1\\n\\t\\telif s[i] == '-':\\n\\t\\t\\tif m > 0:\\n\\t\\t\\t\\tm = m - 1\\n\\t\\t\\telif m == 0:\\n\\t\\t\\t\\tm = 0\\n\\treturn m\\nprint(rock(n, s))\\n\", \"def stonePile(operations):\\n\\tcurrent = 0\\n\\tfor operation in operations:\\n\\t\\tif operation == '-' and current > 0:\\n\\t\\t\\tcurrent -= 1\\n\\t\\telif operation == '+':\\n\\t\\t\\tcurrent += 1\\n\\treturn current\\nn = int(input())\\noperations = input()\\nprint(stonePile(operations))\\n\", \"n = int(input())\\ns = a = 0\\nfor c in input():\\n\\ts += 1 if c == '+' else -1\\n\\ta = min(a, s)\\nprint(s - a)\\n\", \"n = int(input())\\nList = list(input())\\nplus = 0\\nminys = 0\\nans = 0\\nfor i in List:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telif ans > 0:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\na = s.count('+')\\nb = s.count('-')\\nminv = 9999999999999999\\nc = 0\\nfor x in s:\\n\\tif x == '+':\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tc -= 1\\n\\tminv = min(c, minv)\\nprint(max(-1 * minv, 0) + a - b)\\n\", \"x = int(input())\\ns = [n for n in input()]\\nl = 0\\nfor n in s:\\n\\tif n == '-' and l != 0:\\n\\t\\tl -= 1\\n\\telif n == '+':\\n\\t\\tl += 1\\nprint(l)\\n\", \"N = int(input())\\noperations = input()\\nres = 0\\nfor c in operations:\\n\\tif c == '-':\\n\\t\\tres = max(0, res - 1)\\n\\telse:\\n\\t\\tres += 1\\nprint(res)\\n\", \"n = int(input())\\np = input()\\nmin_prefix = 0\\nacc = 0\\nfor i in range(n):\\n\\tacc += 1 if p[i] == '+' else -1\\n\\tmin_prefix = min(min_prefix, acc)\\nprint(acc - min_prefix)\\n\", \"from sys import stdin\\nn = int(stdin.readline().strip())\\ns = stdin.readline().strip()\\nans = 101\\nfor i in range(0, 101):\\n\\tx = i\\n\\tfor j in range(n):\\n\\t\\tif s[j] == '-':\\n\\t\\t\\tx -= 1\\n\\t\\telse:\\n\\t\\t\\tx += 1\\n\\t\\tif x < 0:\\n\\t\\t\\tx = 101\\n\\t\\t\\tbreak\\n\\tans = min(x, ans)\\nprint(ans)\\n\", \"n = int(input())\\nar = list(input())\\nr = 0\\nfor i in ar:\\n\\tif i == '+':\\n\\t\\tr += 1\\n\\telif r > 0:\\n\\t\\tr -= 1\\nprint(max(r, 0))\\n\", \"def main():\\n\\tfrom sys import stdin, stdout\\n\\n\\tdef read():\\n\\t\\treturn stdin.readline().rstrip('\\\\n')\\n\\n\\tdef read_array(sep=None, maxsplit=-1):\\n\\t\\treturn read().split(sep, maxsplit)\\n\\n\\tdef read_int():\\n\\t\\treturn int(read())\\n\\n\\tdef read_int_array(sep=None, maxsplit=-1):\\n\\t\\treturn [int(a) for a in read_array(sep, maxsplit)]\\n\\n\\tdef write(*args, **kwargs):\\n\\t\\tsep = kwargs.get('sep', ' ')\\n\\t\\tend = kwargs.get('end', '\\\\n')\\n\\t\\tstdout.write(sep.join((str(a) for a in args)) + end)\\n\\n\\tdef write_array(array, **kwargs):\\n\\t\\tsep = kwargs.get('sep', ' ')\\n\\t\\tend = kwargs.get('end', '\\\\n')\\n\\t\\tstdout.write(sep.join((str(a) for a in array)) + end)\\n\\tn = read_int()\\n\\ts = read()\\n\\tstones = 0\\n\\tfor c in s:\\n\\t\\tif c == '+':\\n\\t\\t\\tstones += 1\\n\\t\\telse:\\n\\t\\t\\tstones -= 1\\n\\t\\t\\tif stones < 0:\\n\\t\\t\\t\\tstones = 0\\n\\twrite(stones)\\nmain()\\n\", \"n = int(input())\\ns = input()\\nminInitialStone = 0\\ni = 0\\nfor action in s:\\n\\tif action == '-':\\n\\t\\ti -= 1\\n\\t\\tif i < 0 and abs(i) > minInitialStone:\\n\\t\\t\\tminInitialStone += 1\\n\\tif action == '+':\\n\\t\\ti += 1\\nprint(minInitialStone + i)\\n\", \"number = int(input())\\norder = input()\\ncount = 0\\nfor i in range(number):\\n\\tif order[i] == '-':\\n\\t\\tif count == 0:\\n\\t\\t\\tcontinue\\n\\t\\tcount = count - 1\\n\\telse:\\n\\t\\tcount = count + 1\\nprint(count)\\n\", \"n = int(input())\\nl = list(input())\\nfor j in range(0, 200):\\n\\tmb = 1\\n\\tcur = j\\n\\tfor i in range(n):\\n\\t\\tif l[i] == '+':\\n\\t\\t\\tcur += 1\\n\\t\\telse:\\n\\t\\t\\tcur -= 1\\n\\t\\t\\tif cur < 0:\\n\\t\\t\\t\\tmb = 0\\n\\tif mb:\\n\\t\\tprint(cur)\\n\\t\\texit()\\n\", \"t = 1\\n\\ndef solve():\\n\\t(cnt, ans) = (0, 0)\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '-':\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tans = max(ans - cnt, 0)\\n\\t\\t\\tans += 1\\n\\t\\t\\tcnt = 0\\n\\treturn max(ans - cnt, 0)\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ts = input()\\n\\tprint(solve())\\n\", \"n = int(input())\\nseq = input()\\nmax_ = n\\ncount = 0\\nfor i in seq:\\n\\tif i == '+':\\n\\t\\tcount += 1\\n\\tif i == '-':\\n\\t\\tcount = max(count - 1, 0)\\nprint(count)\\n\", \"n = int(input())\\ns = input()\\nln = len(s)\\nsv = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tsv += 1\\n\\tif i == '-' and sv > 0:\\n\\t\\tsv -= 1\\nprint(sv)\\n\", \"from math import *\\nfrom itertools import *\\nn = int(input())\\ns = input()\\ns = s[::-1]\\ntot = 0\\nfor i in range(105):\\n\\tnow = i\\n\\tflg = 0\\n\\tfor j in s:\\n\\t\\tif j == '-':\\n\\t\\t\\tnow += 1\\n\\t\\telse:\\n\\t\\t\\tnow -= 1\\n\\t\\tif now < 0:\\n\\t\\t\\tflg = 1\\n\\t\\t\\tbreak\\n\\tif flg == 0:\\n\\t\\ttot = i\\n\\t\\tbreak\\nprint(tot)\\n\", \"n = int(input())\\nactions = [str(x) for x in str(input())][::-1]\\n\\ndef net_change(actions):\\n\\tinitial = 0\\n\\tprefixes = []\\n\\twhile actions:\\n\\t\\tcur = actions.pop()\\n\\t\\tif cur == '+':\\n\\t\\t\\tinitial += 1\\n\\t\\telse:\\n\\t\\t\\tinitial -= 1\\n\\t\\tprefixes.append(int(initial))\\n\\treturn (prefixes, initial)\\nanswer = net_change(actions)\\nlowest = min(min(answer[0]), 0)\\nprint(answer[1] - lowest)\\n\", \"n = int(input())\\nfin = n\\nfor i in input():\\n\\tif i == '-' and fin < n:\\n\\t\\tfin += 1\\n\\telif i == '+':\\n\\t\\tfin -= 1\\nprint(n - fin)\\n\", \"n = int(input())\\ns = list(input())\\ncnt_sub = 0\\ncnt_plus = 0\\ni = 0\\nk = 0\\nwhile s[i] != '+' and i < n:\\n\\tk += 1\\n\\ti += 1\\n\\tif i == n:\\n\\t\\tbreak\\narr = []\\nfor item in s:\\n\\tif item == '-':\\n\\t\\tk -= 1\\n\\telse:\\n\\t\\tk += 1\\n\\tif k < 0:\\n\\t\\tk = 0\\nprint(k)\\n\", \"n = int(input())\\nres = 0\\nfor ch in input():\\n\\tif ch == '+':\\n\\t\\tres = res + 1\\n\\telif ch == '-':\\n\\t\\tres = res - 1\\n\\t\\tif res < 0:\\n\\t\\t\\tres = 0\\nprint(res)\\n\", \"x = 10 ** 9 + 7\\nN = int(input())\\nS = input()\\nmini = x\\nfor s in S:\\n\\tif s == '+':\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tx -= 1\\n\\tmini = min(mini, x)\\nprint(x - mini)\\n\", \"def main():\\n\\tn = int(input())\\n\\toperations = input()\\n\\tremaining = 0\\n\\tinitial = 0\\n\\tsumOp = 0\\n\\tsubOp = 0\\n\\tfor op in operations:\\n\\t\\tif op == '-':\\n\\t\\t\\tsubOp += 1\\n\\t\\t\\tremaining -= 1\\n\\t\\tif op == '+':\\n\\t\\t\\tsumOp += 1\\n\\t\\t\\tremaining += 1\\n\\t\\tif remaining < 0:\\n\\t\\t\\tinitial += abs(remaining)\\n\\t\\t\\tremaining = 0\\n\\tprint(initial + sumOp - subOp)\\nmain()\\n\", \"n = int(input())\\ns = input()\\nif s == '-' * n:\\n\\tprint(0)\\nelif s == '+' * n:\\n\\tprint(len(s))\\nelse:\\n\\tinc = 0\\n\\tdec = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tinc += 1\\n\\t\\telif s[i] == '-':\\n\\t\\t\\tdec += 1\\n\\t\\t\\tif inc < dec:\\n\\t\\t\\t\\tinc += 1\\n\\tprint(inc - dec)\\n\", \"op = int(input())\\npile = input()\\na = pile[0]\\nif a == '-':\\n\\tstone = 1\\nelse:\\n\\tstone = 0\\nfor i in range(op):\\n\\tif pile[i] == '+':\\n\\t\\tstone += 1\\n\\telse:\\n\\t\\tstone -= 1\\n\\t\\tif stone < 0:\\n\\t\\t\\tstone = 0\\nprint(stone)\\n\", \"n = int(input())\\ns = input()\\ncurrent_min = 0\\nfor symbol in s:\\n\\tif symbol == '-':\\n\\t\\tcurrent_min = max(current_min - 1, 0)\\n\\telse:\\n\\t\\tcurrent_min += 1\\nprint(current_min)\\n\", \"n = int(input())\\ns = input()\\nresult = count = 0\\nx = 0\\nfor i in range(n):\\n\\tif s[i] == '+':\\n\\t\\tcount += 1\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tcount -= 1\\n\\t\\tx -= 1\\n\\t\\tif count < 0:\\n\\t\\t\\tresult += 1\\n\\t\\t\\tcount += 1\\nprint(result + x)\\n\", \"import sys\\nsys.stdin.readline()\\nline = sys.stdin.readline()\\nbase = 0\\nsum = 0\\nfor c in line:\\n\\tif c == '+':\\n\\t\\tsum += 1\\n\\telif c == '-':\\n\\t\\tsum -= 1\\n\\tbase = min(sum, base)\\nsys.stdout.write(f'{-1 * base + sum}')\\n\", \"a = int(input())\\nn = input()\\nc = 0\\nk = 0\\nd = 0\\nfor b in n:\\n\\tif b == '+':\\n\\t\\tc = c + 1\\n\\t\\td = d + 1\\n\\tif b == '-':\\n\\t\\tk = k + 1\\n\\t\\td = d - 1\\n\\tif d < 0:\\n\\t\\td = d + 1\\nif c == 0:\\n\\tprint(0)\\nelif k == 0:\\n\\tprint(c)\\nelse:\\n\\tprint(d)\\n\", \"num = int(input())\\ndata = input()\\nmn = 0\\ncnt = 0\\nfor i in range(num):\\n\\tif data[i] == '+':\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tcnt -= 1\\n\\t\\tmn = min(cnt, mn)\\nprint(cnt - mn)\\n\", \"n = int(input())\\nstri = input()\\ncount = 0\\nfor i in stri:\\n\\tif i == '+':\\n\\t\\tcount += 1\\n\\telif count == 0 and i == '-':\\n\\t\\tpass\\n\\telse:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"n = int(input())\\nk = str(input())\\ns = 0\\ncount = 0\\np = 0\\nm = 0\\nfor i in k:\\n\\tif i == '-':\\n\\t\\ts = s - 1\\n\\t\\tm = m + 1\\n\\tif i == '+':\\n\\t\\ts = s + 1\\n\\t\\tp = p + 1\\n\\tif s < 0:\\n\\t\\ts = 0\\nprint(s)\\n\", \"def main(n, s):\\n\\tif '+' not in s:\\n\\t\\treturn 0\\n\\tif '-' not in s:\\n\\t\\treturn n\\n\\tindex = 0\\n\\tx = 0\\n\\twhile x < n:\\n\\t\\tif s[x] == '-':\\n\\t\\t\\tif index == 0:\\n\\t\\t\\t\\tindex = index + 1\\n\\t\\t\\tindex = index - 1\\n\\t\\telse:\\n\\t\\t\\tindex = index + 1\\n\\t\\tx = x + 1\\n\\treturn index\\n\\ndef count(s, index):\\n\\tx = 0\\n\\tc = 0\\n\\twhile x < len(s):\\n\\t\\tif s[x] == index:\\n\\t\\t\\tc = c + 1\\n\\t\\tx = x + 1\\n\\treturn c\\nn = int(input())\\ns = input()\\na = main(n, s)\\nprint(a)\\n\", \"n = int(input())\\nop = input()\\nbile = 0\\nfor i in op:\\n\\tif i == '+':\\n\\t\\tbile += 1\\n\\telse:\\n\\t\\tbile -= 1\\n\\tif bile < 0:\\n\\t\\tbile = 0\\nprint(bile)\\n\", \"def solve(n, s):\\n\\tx = 0\\n\\tfor i in s:\\n\\t\\tif i == '-':\\n\\t\\t\\tif x > 0:\\n\\t\\t\\t\\tx -= 1\\n\\t\\telse:\\n\\t\\t\\tx += 1\\n\\treturn max(0, x)\\n\\ndef main():\\n\\tn = int(input())\\n\\ts = input()\\n\\tprint(solve(n, s))\\nmain()\\n\", \"n = int(input())\\na = input()\\n(balance, min1) = (0, 0)\\nfor q in a:\\n\\tif q == '+':\\n\\t\\tbalance += 1\\n\\telse:\\n\\t\\tbalance -= 1\\n\\tmin1 = min(min1, balance)\\nprint(balance - min1)\\n\", \"n = int(input())\\na = input()\\nc = 0\\nfor i in a:\\n\\tif i == '-' and c > 0:\\n\\t\\tc -= 1\\n\\telif i == '-' and c < 0:\\n\\t\\tc = 0\\n\\tif i == '+':\\n\\t\\tc += 1\\nprint(c)\\n\", \"t = int(input())\\na = input()\\np = 0\\nq = 0\\nli = []\\nfor i in range(t):\\n\\tif a[i] == '+':\\n\\t\\tp += 1\\n\\tif a[i] == '-':\\n\\t\\tq -= 1\\n\\tz = p + q\\n\\tif z < 0:\\n\\t\\tli.append(z)\\nl = len(li)\\nif l > 0:\\n\\tx = min(li)\\n\\tc = abs(x)\\n\\tk = c + z\\n\\tprint(k)\\nif l == 0:\\n\\tprint(z)\\n\", \"import io\\nimport os\\nfrom collections import defaultdict\\nfrom sys import stdin, stdout\\nfrom math import gcd\\n\\ndef main():\\n\\tn = int(input())\\n\\top = input()\\n\\tm = 0\\n\\ts = 0\\n\\tfor o in op:\\n\\t\\tif o == '-':\\n\\t\\t\\ts -= 1\\n\\t\\t\\tif s < 0:\\n\\t\\t\\t\\tm += 1\\n\\t\\t\\t\\ts += 1\\n\\t\\telif o == '+':\\n\\t\\t\\ts += 1\\n\\tprint(s)\\nmain()\\n\", \"n = int(input())\\nops = input().strip()\\nbegin = 0\\nfor op in ops:\\n\\tif op == '-':\\n\\t\\tbegin -= 1\\n\\telif op == '+':\\n\\t\\tbegin += 1\\n\\tbegin = max(begin, 0)\\nprint(begin)\\n\", \"n = int(input())\\na = list(str(input()))\\nd = 0\\nfor i in range(n):\\n\\tif a[i] == '+':\\n\\t\\td += 1\\n\\telse:\\n\\t\\td -= 1\\n\\tif d < 0:\\n\\t\\td = 0\\nprint(d)\\n\", \"k = input()\\nl = 0\\nstr = input()\\nfor c in str:\\n\\tif c == '+':\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tif l == 0:\\n\\t\\t\\tl += 1\\n\\t\\tl -= 1\\nprint(l)\\n\", \"n = int(input())\\ns = input()\\na = 0\\nfor x in s:\\n\\td = 1 if x == '+' else -1\\n\\ta = max(0, a + d)\\nprint(a)\\n\", \"import sys\\nimport collections\\nimport math\\nimport heapq\\nfrom operator import itemgetter\\n\\ndef getint():\\n\\treturn int(input())\\n\\ndef getints():\\n\\treturn [int(x) for x in input().split(' ')]\\nn = getint()\\ns = input()\\nresult = 0\\nsumCount = 0\\nminDelta = 0\\nfor char in s:\\n\\tif char == '-':\\n\\t\\tsumCount -= 1\\n\\telse:\\n\\t\\tsumCount += 1\\n\\tif sumCount < 0:\\n\\t\\tminDelta = max(minDelta, -sumCount)\\nresult = max(0, sumCount + minDelta)\\nprint(str(result))\\n\", \"n = int(input())\\nd = input()\\ncnt1 = 0\\nfor i in d:\\n\\tif i == '-' and cnt1 > 0:\\n\\t\\tcnt1 = cnt1 - 1\\n\\tif i == '+':\\n\\t\\tcnt1 = cnt1 + 1\\nprint(cnt1)\\n\", \"n = int(input())\\ntext = input()\\n(nract, nrinit) = (0, 0)\\nfor i in range(n):\\n\\tif text[i] == '+':\\n\\t\\tnract += 1\\n\\telif nract == 0:\\n\\t\\tnrinit += 1\\n\\telse:\\n\\t\\tnract -= 1\\nprint(nrinit - len(text.replace('+', '')) + len(text.replace('-', '')))\\n\", \"a = int(input())\\nb = input()\\ns = 0\\nk = 0\\nfor i in range(a):\\n\\tif b[i] == '-' and k > 0:\\n\\t\\tif s > 0:\\n\\t\\t\\ts -= 1\\n\\telif b[i] == '+':\\n\\t\\tk += 1\\n\\t\\ts += 1\\nprint(s)\\n\", \"input()\\ncount = 0\\nfor c in input():\\n\\tif c == '+':\\n\\t\\tcount += 1\\n\\telif count:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"n = int(input())\\nl = [x for x in input()]\\nans = 0\\nfor i in l:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\tif i == '-':\\n\\t\\tif ans == 0:\\n\\t\\t\\tcontinue\\n\\t\\tans -= 1\\nprint(max(0, ans))\\n\", \"n = int(input())\\nmp = {'+': 1, '-': -1}\\na = list(map(lambda x: mp[x], list(input())))\\nmn = 0\\nsum = 0\\nfor el in a:\\n\\tsum += el\\n\\tmn = min(mn, sum)\\nprint(sum - mn)\\n\", \"def stones_after(n, s):\\n\\tfor i in s:\\n\\t\\tif i == '-':\\n\\t\\t\\tn -= 1\\n\\t\\telse:\\n\\t\\t\\tn += 1\\n\\t\\tif n < 0:\\n\\t\\t\\treturn -1\\n\\treturn n\\nn = int(input().strip())\\ns = input().strip()\\nans = 99999999\\nfor i in range(n + 1):\\n\\tstones = stones_after(i, s)\\n\\tif stones != -1:\\n\\t\\tans = min(ans, stones)\\nprint(ans)\\n\", \"n = int(input())\\ns = input().strip()\\nct = 0\\nm = 0\\nans = 10000000000000000\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tct -= 1\\n\\t\\tm = min(m, ct)\\n\\telse:\\n\\t\\tct += 1\\nans = abs(m)\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tans -= 1\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = str(input())\\n\\tcount = 0\\n\\tfor op in s:\\n\\t\\tif op == '+':\\n\\t\\t\\tcount += 1\\n\\t\\telif count > 0:\\n\\t\\t\\tcount -= 1\\n\\tprint(count)\\nmain()\\n\", \"n = int(input())\\ns = input()\\nprint(max([sum([1 if k == '+' else -1 for k in s[j:]]) for j in range(n - 1, -1, -1)] + [0]))\\n\", \"n = int(input())\\nres = 0\\nfor i in input():\\n\\tif i == '+':\\n\\t\\tres += 1\\n\\telse:\\n\\t\\tres -= 1\\n\\tres = max(res, 0)\\nprint(res)\\n\", \"n = int(input())\\ns = str(input())\\npin = 0\\nfor x in s:\\n\\tif x == '-' and pin > 0:\\n\\t\\tpin = pin - 1\\n\\telif x == '+':\\n\\t\\tpin = pin + 1\\n\\tif pin < 0:\\n\\t\\tpin = 0\\nprint(pin)\\n\", \"input()\\nk = 0\\nfor ch in input():\\n\\tif ch == '+':\\n\\t\\tk += 1\\n\\telif k:\\n\\t\\tk -= 1\\nprint(k)\\n\", \"n = int(input())\\ns = input()\\nfor i in range(101):\\n\\tfor j in range(n):\\n\\t\\tif s[j] == '-':\\n\\t\\t\\ti -= 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\t\\tif i < 0:\\n\\t\\t\\tbreak\\n\\tif i >= 0 and j == n - 1:\\n\\t\\tprint(i)\\n\\t\\tbreak\\n\", \"n = int(input())\\na = str(input())\\nans = 0\\nfor i in a:\\n\\tif i == '+':\\n\\t\\tans += 1\\n\\telif ans != 0:\\n\\t\\tans -= 1\\nprint(ans)\\n\", \"n = int(input())\\ns = input().strip()\\nt = 0\\nminn = 10 ** 100\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tt += 1\\n\\telse:\\n\\t\\tt -= 1\\n\\tminn = min(minn, t)\\nt = max(0, -minn)\\nfor i in s:\\n\\tif i == '+':\\n\\t\\tt += 1\\n\\telse:\\n\\t\\tt -= 1\\nprint(t)\\n\", \"input()\\na = input()\\nc = 0\\nfor i in a:\\n\\tif i == '-':\\n\\t\\tc -= 1\\n\\t\\tif c < 0:\\n\\t\\t\\tc = 0\\n\\telse:\\n\\t\\tc += 1\\nprint(c)\\n\", \"n = int(input())\\nopr = input()\\nopr = list(opr)\\nx = 0\\nmin = 0\\nfor i in range(n):\\n\\tif opr[i] == '+':\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tx -= 1\\n\\tif min > x:\\n\\t\\tmin = x\\nprint(x - min)\\n\", \"n = int(input())\\ns = input()\\nminim = n\\nmaxim = 0\\nfor ch in s:\\n\\tif ch == '-':\\n\\t\\tn -= 1\\n\\telse:\\n\\t\\tn += 1\\n\\tminim = min(minim, n)\\nprint(n - minim)\\n\", \"n = int(input())\\ns = input()\\nstart = 0\\ndelt = 0\\npl = 0\\nmi = 0\\nfor k in s:\\n\\tif k == '+':\\n\\t\\tdelt += 1\\n\\t\\tpl += 1\\n\\telse:\\n\\t\\tdelt -= 1\\n\\t\\tmi += 1\\n\\tstart = min(delt, start)\\nprint(-start + pl - mi)\\n\", \"n = int(input())\\nn1 = 0\\npm = list(input())\\nfor i in pm:\\n\\tif i == '-':\\n\\t\\tn1 -= 1\\n\\t\\tif n1 < 0:\\n\\t\\t\\tn1 += 1\\n\\tif i == '+':\\n\\t\\tn1 += 1\\nprint(n1)\\n\", \"n = int(input())\\na = input()\\na = list(a)\\ns = 0\\nfor i in range(0, n):\\n\\tif a[i] == '+':\\n\\t\\ts += 1\\n\\telse:\\n\\t\\ts -= 1\\n\\tif s < 0:\\n\\t\\ts = 0\\nprint(s)\\n\", \"n = int(input())\\nplus = 0\\nminus = 0\\ntemp = 0\\nfor i in input():\\n\\tif i == '-':\\n\\t\\ttemp -= 1\\n\\t\\tif temp < 0:\\n\\t\\t\\ttemp = 0\\n\\tif i == '+':\\n\\t\\ttemp += 1\\nprint(temp)\\n\", \"n = int(input())\\ninput_str = str(input())\\nlst = []\\nfor i in range(n):\\n\\tif input_str[i] == '-':\\n\\t\\tlst.append(-1)\\n\\telif input_str[i] == '+':\\n\\t\\tlst.append(1)\\nstart_num = 0\\nfactor = False\\nwhile factor == False:\\n\\tpending_num = start_num\\n\\tfor i in range(len(lst)):\\n\\t\\tpending_num += lst[i]\\n\\t\\tif pending_num < 0:\\n\\t\\t\\tstart_num += 1\\n\\t\\t\\tbreak\\n\\t\\telif i + 1 == len(lst):\\n\\t\\t\\tfactor = True\\n\\t\\t\\tprint(pending_num)\\n\", \"n = int(input())\\na = input()\\na = a.lstrip('-')\\nans = 0\\nfor x in a:\\n\\tif x == '+':\\n\\t\\tans += 1\\n\\telif ans > 0:\\n\\t\\tans -= 1\\nprint(ans) if ans > 0 else print(0)\\n\", \"n = int(input())\\na = input()\\ncount = 0\\nfor i in range(n):\\n\\tif count > 0 and a[i] == '-':\\n\\t\\tcount -= 1\\n\\telif a[i] == '+':\\n\\t\\tcount += 1\\nprint(count)\\n\", \"n = int(input())\\nar = list(input())\\nptr = 0\\narr = []\\nfor k in ar:\\n\\tif k == '-':\\n\\t\\tarr.append(ptr - 1)\\n\\t\\tptr -= 1\\n\\telse:\\n\\t\\tarr.append(ptr + 1)\\n\\t\\tptr += 1\\nif min(arr) < 0:\\n\\tprint(arr[-1] - min(arr))\\nelse:\\n\\tprint(arr[-1])\\n\", \"n = int(input())\\nops = input()\\nlowest = 0\\ncurrent = 0\\nfor i in ops:\\n\\tif i == '-':\\n\\t\\tcurrent -= 1\\n\\t\\tif current < lowest:\\n\\t\\t\\tlowest = current\\n\\telse:\\n\\t\\tcurrent += 1\\nprint(current - lowest)\\n\", \"ope = int(input())\\ncount = 0\\ns = input()\\nfor i in range(len(s)):\\n\\tif s[i] == '+':\\n\\t\\tcount += 1\\n\\telif count > 0:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"a = int(input())\\ns = input()\\nrok = 0\\nfor i in s:\\n\\tif i == '+':\\n\\t\\trok += 1\\n\\tif i == '-':\\n\\t\\trok += -1\\n\\tif rok < 0:\\n\\t\\trok += 1\\nprint(rok)\\n\", \"(_, s) = (input(), input())\\nx = 0\\nstart = 0\\nfor c in s:\\n\\tif c is '+':\\n\\t\\tx += 1\\n\\telif c is '-':\\n\\t\\tif x <= 0:\\n\\t\\t\\tstart += 1\\n\\t\\telse:\\n\\t\\t\\tx -= 1\\nprint(x)\\n\", \"n = int(input())\\ninp = input()\\ncnt = 0\\nfor i in inp:\\n\\tif i == '-':\\n\\t\\tcnt -= 1\\n\\t\\tif cnt < 0:\\n\\t\\t\\tcnt = 0\\n\\telse:\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"def vasya(n, s):\\n\\tk = 0\\n\\tfor i in range(n):\\n\\t\\tif s[i] == '+':\\n\\t\\t\\tk = k + 1\\n\\t\\telif k == 0:\\n\\t\\t\\tk = 0\\n\\t\\telse:\\n\\t\\t\\tk = k - 1\\n\\treturn k\\nn = int(input())\\ns = str(input())\\nprint(vasya(n, s))\\n\", \"a = int(input())\\nb = input()\\ns = 0\\nfor i in b:\\n\\tif i == '-':\\n\\t\\ts -= 1\\n\\t\\tif s < 0:\\n\\t\\t\\ts = 0\\n\\telse:\\n\\t\\ts += 1\\nprint(s)\\n\", \"n = int(input())\\nop = input()\\ncount = 0\\nstart = 0\\nfor i in range(n):\\n\\tif op[i] == '+':\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tcount -= 1\\n\\tstart = max(-count, start)\\nprint(start + count)\\n\", \"input()\\nSUM = 0\\nfor i in input():\\n\\tSUM += 1 if i == '+' else 0 if SUM == 0 else -1\\nprint(SUM)\\n\", \"n = int(input())\\nnr = 0\\ns = [None] * n\\ns = input()\\nif s[0] == '-':\\n\\tnr = 1\\nfor i in range(0, n):\\n\\tif s[i] == '-':\\n\\t\\tnr = nr - 1\\n\\telse:\\n\\t\\tnr = nr + 1\\n\\tif nr < 0:\\n\\t\\tnr = nr + 1\\nprint(nr)\\n\", \"n = int(input())\\nx = input()\\ns = 0\\nwhile x[0] != '+':\\n\\tx = x[1:]\\n\\tif len(x) == 0:\\n\\t\\tbreak\\nfor i in range(len(x)):\\n\\tif x[i] == '+':\\n\\t\\ts += 1\\n\\telse:\\n\\t\\ts -= 1\\n\\t\\tif s == -1:\\n\\t\\t\\ts = 0\\nprint(s)\\n\", \"from sys import stdin, setrecursionlimit\\nfrom bisect import bisect_right\\nsetrecursionlimit(15000)\\nn = int(stdin.readline().strip())\\nstring = list(stdin.readline().strip())\\nnet = 0\\nfor i in range(len(string)):\\n\\tif string[i] == '-':\\n\\t\\tnet -= 1\\n\\telse:\\n\\t\\tnet += 1\\n\\tif net < 0:\\n\\t\\tnet = 0\\nprint(net)\\n\", \"from sys import stdin, stdout\\nn = int(stdin.readline())\\ns = stdin.readline()\\ns = s[:-1]\\ninit = 0\\ncount = m = 0\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tcount -= 1\\n\\t\\tif count < m:\\n\\t\\t\\tm = count\\n\\telse:\\n\\t\\tcount += 1\\ninit = abs(m)\\nfor i in s:\\n\\tif i == '-':\\n\\t\\tinit -= 1\\n\\telse:\\n\\t\\tinit += 1\\nstdout.write(str(init) + '\\\\n')\\n\", \"import sys\\nimport heapq\\nimport re\\nimport bisect\\nimport random\\nimport math\\nimport itertools\\nfrom collections import defaultdict, deque\\nfrom copy import deepcopy\\nfrom decimal import *\\nn = int(input())\\ns = input()\\ncount = 0\\nfor i in list(s):\\n\\tif i == '+':\\n\\t\\tcount += 1\\n\\telif count > 0:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"def rahul(word):\\n\\treturn [char for char in word]\\na = int(input())\\nb = rahul(input())\\nr = 0\\ns = 0\\nwhile r < a:\\n\\tif b[r] == '+':\\n\\t\\ts = s + 1\\n\\telif b[r] == '-' and s > 0:\\n\\t\\ts = s - 1\\n\\tr = r + 1\\nprint(s)\\n\", \"def main():\\n\\td = int(input())\\n\\tc = input()\\n\\tmv = 0\\n\\tcur = 0\\n\\tfor d in c:\\n\\t\\tif d == '-':\\n\\t\\t\\tcur -= 1\\n\\t\\t\\tmv = min(cur, mv)\\n\\t\\telse:\\n\\t\\t\\tcur += 1\\n\\t\\t\\tmv = min(cur, mv)\\n\\tprint(max(0 - mv, 0) + cur)\\nmain()\\n\", \"n = int(input())\\ns = input()\\ncount = 0\\nfor c in s:\\n\\tif c == '+':\\n\\t\\tcount += 1\\n\\telif c == '-' and count == 0:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"t = int(input())\\nip = input()\\ncounter = 0\\nfor i in range(t):\\n\\tif ip[i] == '+':\\n\\t\\tcounter += 1\\n\\telif counter == 0:\\n\\t\\tcounter = 0\\n\\telse:\\n\\t\\tcounter = counter - 1\\nprint(counter)\\n\", \"n = input()\\noperations = input()\\ntimes = 0\\nfor i in list(operations):\\n\\tif i == '-' and times > 0:\\n\\t\\ttimes -= 1\\n\\telif i == '+':\\n\\t\\ttimes += 1\\nprint(times)\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\ns = input()\\nans = 0\\nfor i in range(n):\\n\\tif s[i] == '-':\\n\\t\\tans -= 1\\n\\t\\tif ans == -1:\\n\\t\\t\\tans = 0\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\nnumList = input()\\nfound = False\\ncount = 0\\nfor i in numList:\\n\\tif i == '+':\\n\\t\\tcount += 1\\n\\telif i == '-' and count > 0:\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"n = int(input())\\nop = input()\\nr = 0\\nfor i in op:\\n\\tif i == '+':\\n\\t\\tr += 1\\n\\telif r > 0:\\n\\t\\tr -= 1\\nprint(r)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3\\n---\\n\", \"4\\n++++\\n\", \"2\\n-+\\n\", \"5\\n++-++\\n\", \"1\\n+\\n\", \"100\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n----------------------------------------------------------------------------------------------------\\n\", \"100\\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+++++++++++++++-++++++++++++++++++++++++++++++++++-++++++++++++++++++++++\\n\", \"100\\n+-+-+-++--++-++-+-+---+--++++++-++++--++-++---+--++++--+++++++-++-+--+-+-+--+-+++++-+--+---+-++-++-+\\n\", \"100\\n++-+-+-+-+++-++++--+++----+-+-+-------+-+-++--++--+-+++++---+-++---++-+-++---+--+-+-++-++-+---++-+--\\n\", \"100\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\\n\", \"99\\n--+++++++++++++++++++++++++++++++++++++++++++++++++------------------------------------------------\\n\", \"100\\n+-----+-++++----++-+--+-+++-++--+--++---++++----+-+++--+++--+---++--++--++-+--+-+-+-+-+-+-+-++-+--+-\\n\", \"100\\n+++++--+-+++-+-++---+-++-+---++-------++-+--+-++-+--+-+--+-+-+----++-+-----++----++++-+-+---+--+--+-\\n\", \"100\\n-------+-++-------------+-----+--+----++----+-----+----+-----++-------------------+-+-------+-------\\n\", \"100\\n-+--+-++--+-+-+-+-+-+-+-+-++--++--+-+-+-+-+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-+-+-+-+-\\n\", \"100\\n+-++--+-+-++--++-+++-++++----+--+---+-+-+-+-++--+-+-+-+-+-+-++--+-+-+-+-+-+-+-+++---+++-+-+-+---++--\\n\", \"100\\n-++------+---++++-+---++---+--+-++--+-+-++--+-+-++++-+++-+-----++-+--++-+++++---+-----+++---+-+-+-+-\\n\", \"100\\n------+---+--------+++--+--------------++--+----------+-+---+------+-+-----++---+------+-+---++-+---\\n\", \"100\\n-+--+++-++-+-+--++-++-------+-++--++----+--++-++------++--+++-+-+-+--+++---+----+--+++++-++----+---+\\n\", \"100\\n--+++--+---+-++--++-+--++++++--+-------+-+----+-++-+--+-+-+++---+++--+--+-+-+-+-++--++-++---++--+-++\\n\", \"99\\n-++-+-+++--++--+-+--++-+-++-+-----+---+++-+++++--+-+-+-+--+++-+++++---+-+--+----+---------+-+-+-++-\\n\", \"100\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++\\n\", \"100\\n---------------------------------------------------------------------------------------------------+\\n\", \"99\\n-+-++--------++--++----------------------------++-------++-+--+---------+-+--------+---+----------+\\n\", \"100\\n++--+-+-+-++--+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+--+-++--+-+-+-++--++--++--+-++--+-+-+-++--+-++--+-+-++\\n\", \"100\\n--+--++--+--++-+---++-+++-+--++-+-+++--+-----+++-+++-+-+-+--+---++-+-+-++-++---+---+-+-+++--+--+-++-\\n\", \"100\\n-----+-+-++--++++-+++---+-++--++-----+-+-+-+-++--+-+++-+--+-+++--+---+-+-++--+-+-+-++-++--+-+-+--+++\\n\", \"99\\n-+-+-+++--+--+-+-++--+-++--+++-+++-++-+++++-+-+-++----------+--++--++--++--+-++--+-+-+-++--+-+-++-+\\n\", \"100\\n--+---++++-+++-++-++----++-++-+-++--++-+--++++-++--+---+-++-+-+-+---+-+----------+-+--+--+--+++-++-+\\n\", \"100\\n+-+++--++++-+-++--+--+-++-------+---+-+---+++++++---+----+++-+-++--+-+--+-+-+--+-+-++-+---++-+-+++++\\n\", \"100\\n+---+++--+++--+--++--+--+---+-----+++-+++-+-+--+--+-+--++-+--+-+--+++--++---+-+-++-++-+-+++++++-+--+\\n\", \"100\\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++++-+++++--+++\\n\", \"100\\n----------------------------------------------------------------------++++++++++++++++-++-++++++++++\\n\", \"100\\n--++---+---------+-++--+--++---------------+---------+---+----+-----+--------------+++++--++++-++-+-\\n\", \"100\\n+--+-+-+-+-+++--++---+-+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-+-+-++--+-+-+-+-++--+-++-+-+-+-+-+-+-+-+-+-+-\\n\", \"100\\n+-++++--+-----++--+-++--++-+++-++-+-+++--+--++-----++---+-+-++++++++++++-++-+++-+++-+-+++++-+--+++++\\n\", \"100\\n-+-+---+-+-+-++-+--+-+++-+---+-++-+-+--++-+--+-+-+-+-+-++--+-+-++--+++++-+-++++++++++-++++++++++++++\\n\", \"100\\n-++-+-++----+++--+++++-+--++--++----+---+-++++++--+---+-+--+--+--+++++++++++++++++++++++++++++++++++\\n\", \"100\\n++++++++++++++++++++------------------------------++++++++++++++++++++++++++++++++++++++++++++++----\\n\", \"100\\n--------------------------------------------------++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n----------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n--------------------------------------------------------------------------------------------------++\\n\", \"100\\n++--+-+-+-++++++++++++++--+-+++++++++-++++++++++++++++++++++-+-++++-+++++++++-+-+-+++-+++++++++-+++-\\n\", \"100\\n++++----------------++++-+---+++-++++++++++++++++++++++-++--+++++++-+-++++++++++++++++++++++++++++++\\n\", \"100\\n++++++-+++++++-++++++++++-++++++++++++++++++++++++-++++-++++++--+++-++++++++++++++++++++++++++-+-+++\\n\", \"100\\n--------------------++-+++---+-++--+-++--++--++--+-+-+++---+-+-++--+-+-+-+-+-+-+-+-+-+-+-++--+-+-+-+\\n\", \"100\\n-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n+-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n+-+-+-+-+-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"89\\n+++-++-----+------+-+-++-----+-+------++--+-++++-+-++-+++++-+++-+-+--+++-+-+-++-+---+++-+\\n\", \"78\\n+++++++++-----------------------------------------------+++++++++++++---++++++\\n\", \"100\\n---+-----------+-++---+----------++++++++++++++++++++++++++++++++++++++++++++-----------------------\\n\", \"100\\n-----++--+-++-------+-+---++-+++-++++++++++++++-++-++-+-+++++++-+---++-+-+++++-++++++++++++++-+-++++\\n\", \"100\\n---+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"99\\n-+-++--++++++--++++--+--------+-+--++--+--++-++++-+-+++++++-+-++++--+---+-+++---+--+---+++++-+-+--+\\n\", \"17\\n-++++--+-+----++-\\n\", \"73\\n+++-+-++-+++--+-----+++---+-+-++++-+++--+-+-++--++----+--+--+---+-++-+-+-\\n\", \"51\\n-++---+++++-+-++------+---+-++-+-+-+-++++-++++++-+-\\n\", \"98\\n----+-+--+-+-++-++++---+-++++-+--++-++++++-+++--+++-+-----+-+--+-----+++++--+-++-+++-+-+++-+---++-\\n\", \"100\\n+-+++-+++++-++--+++++++++-+-+-+--+++-+---+-+-+--+++-+-+-+-+-----++++++-+++++----++--+++-++--++---+--\\n\", \"100\\n++-+-+---+-+--+++++-++++++---++-+-----+++++----++++-+--+--+-+-+++-++-++-+---+-++-++-+-+-----+----+++\\n\", \"100\\n++-+++-+---+-++-+-++------+++-----++-++++-+-+-+----+++-++++------++++--+-+-+++--+---------++-+-+-+--\\n\", \"100\\n+-------+-+++-+++-++-+-----+----+----+-+----+-++--+++-+---++-++-+-+++-+----+++-+-----+--+-++----++++\\n\", \"4\\n--++\\n\", \"4\\n-++-\\n\", \"4\\n-+--\\n\", \"4\\n----\\n\", \"3\\n+-+\\n\", \"3\\n+--\\n\", \"3\\n++-\\n\", \"3\\n+++\\n\", \"3\\n-+-\\n\", \"3\\n--+\\n\", \"3\\n-++\\n\", \"2\\n++\\n\", \"2\\n+-\\n\", \"2\\n--\\n\", \"1\\n-\\n\", \"5\\n--+--\\n\", \"4\\n-+--\\n\", \"4\\n-+--\\n\", \"2\\n++\\n\", \"98\\n----+-+--+-+-++-++++---+-++++-+--++-++++++-+++--+++-+-----+-+--+-----+++++--+-++-+++-+-+++-+---++-\\n\", \"3\\n+-+\\n\", \"100\\n---+-----------+-++---+----------++++++++++++++++++++++++++++++++++++++++++++-----------------------\\n\", \"100\\n----------------------------------------------------------------------++++++++++++++++-++-++++++++++\\n\", \"1\\n-\\n\", \"100\\n--+---++++-+++-++-++----++-++-+-++--++-+--++++-++--+---+-++-+-+-+---+-+----------+-+--+--+--+++-++-+\\n\", \"99\\n-+-++--------++--++----------------------------++-------++-+--+---------+-+--------+---+----------+\\n\", \"100\\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++++-+++++--+++\\n\", \"100\\n++-+-+---+-+--+++++-++++++---++-+-----+++++----++++-+--+--+-+-+++-++-++-+---+-++-++-+-+-----+----+++\\n\", \"100\\n++--+-+-+-++++++++++++++--+-+++++++++-++++++++++++++++++++++-+-++++-+++++++++-+-+-+++-+++++++++-+++-\\n\", \"2\\n+-\\n\", \"100\\n--------------------------------------------------------------------------------------------------++\\n\", \"100\\n--+--++--+--++-+---++-+++-+--++-+-+++--+-----+++-+++-+-+-+--+---++-+-+-++-++---+---+-+-+++--+--+-++-\\n\", \"100\\n++-+-+-+-+++-++++--+++----+-+-+-------+-+-++--++--+-+++++---+-++---++-+-++---+--+-+-++-++-+---++-+--\\n\", \"100\\n+-+-+-++--++-++-+-+---+--++++++-++++--++-++---+--++++--+++++++-++-+--+-+-+--+-+++++-+--+---+-++-++-+\\n\", \"100\\n-+--+-++--+-+-+-+-+-+-+-+-++--++--+-+-+-+-+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-+-+-+-+-\\n\", \"89\\n+++-++-----+------+-+-++-----+-+------++--+-++++-+-++-+++++-+++-+-+--+++-+-+-++-+---+++-+\\n\", \"100\\n+-----+-++++----++-+--+-+++-++--+--++---++++----+-+++--+++--+---++--++--++-+--+-+-+-+-+-+-+-++-+--+-\\n\", \"100\\n-+--+++-++-+-+--++-++-------+-++--++----+--++-++------++--+++-+-+-+--+++---+----+--+++++-++----+---+\\n\", \"100\\n++++++-+++++++-++++++++++-++++++++++++++++++++++++-++++-++++++--+++-++++++++++++++++++++++++++-+-+++\\n\", \"73\\n+++-+-++-+++--+-----+++---+-+-++++-+++--+-+-++--++----+--+--+---+-++-+-+-\\n\", \"5\\n--+--\\n\", \"100\\n----------------------------------------------------------------------------------------------------\\n\", \"100\\n-------+-++-------------+-----+--+----++----+-----+----+-----++-------------------+-+-------+-------\\n\", \"100\\n----------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++\\n\", \"100\\n--------------------++-+++---+-++--+-++--++--++--+-+-+++---+-+-++--+-+-+-+-+-+-+-+-+-+-+-++--+-+-+-+\\n\", \"99\\n-+-++--++++++--++++--+--------+-+--++--+--++-++++-+-+++++++-+-++++--+---+-+++---+--+---+++++-+-+--+\\n\", \"100\\n--------------------------------------------------++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"78\\n+++++++++-----------------------------------------------+++++++++++++---++++++\\n\", \"3\\n-+-\\n\", \"4\\n-++-\\n\", \"100\\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+++++++++++++++-++++++++++++++++++++++++++++++++++-++++++++++++++++++++++\\n\", \"2\\n--\\n\", \"1\\n+\\n\", \"100\\n-++-+-++----+++--+++++-+--++--++----+---+-++++++--+---+-+--+--+--+++++++++++++++++++++++++++++++++++\\n\", \"100\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\\n\", \"3\\n++-\\n\", \"100\\n+-+++-+++++-++--+++++++++-+-+-+--+++-+---+-+-+--+++-+-+-+-+-----++++++-+++++----++--+++-++--++---+--\\n\", \"100\\n---+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"4\\n----\\n\", \"100\\n+-++++--+-----++--+-++--++-+++-++-+-+++--+--++-----++---+-+-++++++++++++-++-+++-+++-+-+++++-+--+++++\\n\", \"100\\n+-------+-+++-+++-++-+-----+----+----+-+----+-++--+++-+---++-++-+-+++-+----+++-+-----+--+-++----++++\\n\", \"3\\n+--\\n\", \"100\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n+-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n-+-+---+-+-+-++-+--+-+++-+---+-++-+-+--++-+--+-+-+-+-+-++--+-+-++--+++++-+-++++++++++-++++++++++++++\\n\", \"100\\n--++---+---------+-++--+--++---------------+---------+---+----+-----+--------------+++++--++++-++-+-\\n\", \"100\\n---------------------------------------------------------------------------------------------------+\\n\", \"3\\n-++\\n\", \"100\\n-----++--+-++-------+-+---++-+++-++++++++++++++-++-++-+-+++++++-+---++-+-+++++-++++++++++++++-+-++++\\n\", \"100\\n--+++--+---+-++--++-+--++++++--+-------+-+----+-++-+--+-+-+++---+++--+--+-+-+-+-++--++-++---++--+-++\\n\", \"100\\n+-+-+-+-+-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"100\\n-++------+---++++-+---++---+--+-++--+-+-++--+-+-++++-+++-+-----++-+--++-+++++---+-----+++---+-+-+-+-\\n\", \"100\\n+-++--+-+-++--++-+++-++++----+--+---+-+-+-+-++--+-+-+-+-+-+-++--+-+-+-+-+-+-+-+++---+++-+-+-+---++--\\n\", \"3\\n--+\\n\", \"99\\n-+-+-+++--+--+-+-++--+-++--+++-+++-++-+++++-+-+-++----------+--++--++--++--+-++--+-+-+-++--+-+-++-+\\n\", \"4\\n--++\\n\", \"100\\n-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"99\\n-++-+-+++--++--+-+--++-+-++-+-----+---+++-+++++--+-+-+-+--+++-+++++---+-+--+----+---------+-+-+-++-\\n\", \"100\\n+-+++--++++-+-++--+--+-++-------+---+-+---+++++++---+----+++-+-++--+-+--+-+-+--+-+-++-+---++-+-+++++\\n\", \"100\\n++-+++-+---+-++-+-++------+++-----++-++++-+-+-+----+++-++++------++++--+-+-+++--+---------++-+-+-+--\\n\", \"99\\n--+++++++++++++++++++++++++++++++++++++++++++++++++------------------------------------------------\\n\", \"51\\n-++---+++++-+-++------+---+-++-+-+-+-++++-++++++-+-\\n\", \"100\\n+--+-+-+-+-+++--++---+-+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-+-+-++--+-+-+-+-++--+-++-+-+-+-+-+-+-+-+-+-+-\\n\", \"100\\n--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"17\\n-++++--+-+----++-\\n\", \"100\\n++++----------------++++-+---+++-++++++++++++++++++++++-++--+++++++-+-++++++++++++++++++++++++++++++\\n\", \"100\\n++--+-+-+-++--+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+--+-++--+-+-+-++--++--++--+-++--+-+-+-++--+-++--+-+-++\\n\", \"100\\n-----+-+-++--++++-+++---+-++--++-----+-+-+-+-++--+-+++-+--+-+++--+---+-+-++--+-+-+-++-++--+-+-+--+++\\n\", \"100\\n------+---+--------+++--+--------------++--+----------+-+---+------+-+-----++---+------+-+---++-+---\\n\", \"100\\n++++++++++++++++++++------------------------------++++++++++++++++++++++++++++++++++++++++++++++----\\n\", \"3\\n+++\\n\", \"100\\n+---+++--+++--+--++--+--+---+-----+++-+++-+-+--+--+-+--++-+--+-+--+++--++---+-+-++-++-+-+++++++-+--+\\n\", \"100\\n+++++--+-+++-+-++---+-++-+---++-------++-+--+-++-+--+-+--+-+-+----++-+-----++----++++-+-+---+--+--+-\\n\", \"100\\n++++++++++-++-++++++++++++++++----------------------------------------------------------------------\\n\", \"100\\n+-++-+++--+--+--+-+----------+-+---+-+-+-++-+---+--++-++++--+-++--++-+-++-++----++-++-+++-++++---+--\\n\", \"99\\n+----------+---+--------+-+---------+--+-++-------++----------------------------++--++--------++-+-\\n\", \"100\\n++--+-+-+-+++++++++-++++--+-+++++++++-++++++++++++++++++++++-++++++-+++++++++-+-+-+++-+++++++++-+++-\\n\", \"100\\n+++-+-++++++++++++++++++++++++++-+++--++++++-++++-++++++++++++++++++++++++-++++++++++-+++++++-++++++\\n\", \"99\\n-++++--++++++--++++--+--------+-+--++--+--++-++++-+-+++++++-+-++++--+---+-+++---+--+---+++-+-+-+--+\\n\", \"100\\n++++++++++++++++++++++-++++++++++++++++++++++++++++++++++-+++++++++++++++-+-+-+-+-+-+-+-+-+-+-+-+-+-\\n\", \"100\\n+++++++++++++++++++++++++++++++++++--+--+--+-+---+--++++++-+---+----++--++--+-+++++--+++----++-+-++-\\n\", \"100\\n--+---++--++-+++--++----+++++-++++++-----+-+-+-+-+++--+-+-+---+-+++--+-+-+-+++++++++--++-+++++-+++-+\\n\", \"100\\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++---\\n\", \"100\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-+\\n\", \"99\\n+-++-+-+--++-+-+-+--++-+--++--++--++--+----------++-+-+-+++++-++-+++-+++--++-+--++-+-+--+--+++-+-+-\\n\", \"100\\n+-+++--++++-+-++--+--+-++-------+---+-+---+++++++---+----+++-+-++--+-+-++-+----+-+-++-+---++-+-+++++\\n\", \"100\\n--+--+-+-++--++++-+++---+-++--++-----+-+-+-+-++--+-+++-+--+-+++--+---+-+-++--+-+-+-++-+---+-+-+--+++\\n\", \"100\\n+---+++--+++--+--++-++------+-----+++-+++-+-+--+--+-+--++-+--+-+--+++--++---+-+-++-++-+-+++++++-+--+\\n\", \"100\\n+-++-+++--+--+--+-+----------+-+-+-+-+-+-++-+---+--++-++++--+-++--++-+-++-++----++-++-++--++++---+--\\n\", \"100\\n+--+-+++++++-+-++-++-+-+---++--+++--+-+--+-++--+-+--+--+-+-+++-+++-----+------++-++--+--+++--+++---+\\n\", \"100\\n-----------------------++++++++++++++++++++++++++++++++++++++++++++----------+---++-+-----------+---\\n\", \"100\\n+-++-++-+---+--+-+++++-+--+-+-+--+-++-+++++++--++++--+---++-++--++++-++++++--+---+-+-++-++--++-+-+-+\\n\", \"100\\n+---------+++++++++++++++++++++++++++++++++++++++++-++++++++++++++++++++++++++++++++++++++++++++++++\\n\", \"78\\n+++++++++-----------------------------+-----------------+++++++++++++---++++-+\\n\", \"100\\n-++-+-++----+++--+++++-+--++--++----+-----++++++--+---+-+--+--+-++++++++++++++++++++++++++++++++++++\\n\", \"100\\n++++++++++++++-++++++++++-+-+++++--++-+-+--++-+-+-+-+-+--+-++--+-+-++-+---+-+++-+--+-++-+-+-+---+-+-\\n\", \"100\\n++++++++++++++++++++++++++++++-+-+++++++--++-++++++++++++++++++++++-+++---+-++++----------------++++\\n\", \"100\\n-+++-+++++++++-+++-+-+-+++++++++-++++++-++++++++++++++++++++++-+++++++++-+--++++-+++++++++-+-+-+--++\\n\", \"99\\n+--+-+-+-+++---+--+---+++-+---+--++++-+-+++++++-+-++++-++--+--++--+-+--------+--++++--++++++--++++-\\n\", \"100\\n+-+++-+++++-++--+++++++++-+-+-+--+++-+---+-+-+--+++-+-+---++----++++++-+++++----++--+++-++--++---+--\\n\", \"100\\n--+---++++--++-++-++----++-++-+-++--++-+--++++-++--+---+-++-+-+-+-+-+-+----------+-+--+--+--+++-++-+\\n\", \"100\\n+++++--+-+++++-+-+++-+++-++-++++++++++++-+-+---++-----++--+--+++-+-++-+++-++--++-+--++-----+--++++-+\\n\", \"100\\n-----++--+-++-----+---+---++-+++-++++++++++++++-++-++-+-+++++++-+---++-+-+++++-++++++++++++++-+-++++\\n\", \"100\\n-+--+-++-+-+-+-+-+-+-+--+-++--++--++---+--+++--+++-+----++++---++--+--++-+++-+--+-++----++++-+-----+\\n\", \"100\\n++--+++-++-+-+--++-++-------+-++--++----+--++-+-------++--+++-+-+-+--+++---+----+--+++++-++----+---+\\n\", \"73\\n+++-+-++-+++--+-----+++---+-+-++++-+++--++--++--++----+--+--+---+-++-+-+-\\n\", \"100\\n+-+-+-+--++-+-+-+-+-+-+-+-+-+-+-+--++-+-+---+++-+-+--++--++--++-+--++-+---+++-++--------------------\\n\", \"78\\n++++++---+++++++++++++-----------------------------------------------+++++++++\\n\", \"100\\n+---------------------------------------------------------------------------------------------------\\n\", \"100\\n++++-+-++++++++++++++-+++++-+-++---+-+++++++-+-++-++-++++++++++++++-+++-++---+-+-------++-+--++-----\\n\", \"4\\n++--\\n\", \"100\\n-+--+--+---+-+-++++----++-----+-++----+-+-+--+-+--+-++-+--+-++-------++---+-++-+---++-+-+++-+--+++++\\n\", \"100\\n+---+----++-+++++--+----+---+++--+-+-+-+++--++-------+-++--+----++--++-+-------++-++--+-+-++-+++--++\\n\", \"99\\n-++++--++++++--++++--+--------+-+--++--+--++-++++-+-+++++++-+-++-+--+---+-+++---+--+---+++-+-+-+-++\\n\", \"100\\n+++++-+-++---+-++-+-+----+-++-+-+--++-+-+++----+---+++++++---+-+---+-------++-+--+--++-+-++++--+++-+\\n\", \"100\\n+---+++--+++--+--++-+++-----+------++-+++-+-+--+--+-+--++-+--+-+--+++--++---+-+-++-++-+-+++++++-+--+\\n\", \"100\\n+++----+-----+-+-++-++-+---+-++-++-+++-+-+--+--+-++++----+++++-----+-++---++++++-+++++--+-+---+-+-++\\n\", \"100\\n-++-+--+--+++-+-+---+---++-++-+-+-++---+--+-+-+-+++-+++-----+--+++-+-++--+-+++-++---+-++--+--++--+--\\n\", \"100\\n++-+++-+-+++-++++--+++----+-+-+-------+-+-++--++----+++++---+-++---++-+-++---+--+-+-++-++-+---++-+--\\n\", \"100\\n+---+----++-+++++--+----+---+++--+-+-+-+++--++------++-++--+----++--++-+-------++-++--+-+-++-+++--+-\\n\", \"100\\n-------+-------+-+-------------------++-----+----+-----+----++----+--+-----+-------------++-+-------\\n\", \"4\\n+-+-\\n\", \"100\\n+++++-+-++---+-++-+-+--+-+-+--+-+--++-+-+++----+---+++++++---+-+---+-------++-+--+--++-+-++++--+++-+\\n\", \"100\\n+--+-+-+-+-+++--++---+-+-+-+-+-+-+-+-++--+-+-+-+-+-+-+-+-+--+--+-+++-+-++--+-++-+-+-+-+-+-+-+-+-+-+-\\n\", \"100\\n++-+-+--++-+--++-+-+-+--++-+--++--++--++-+-+-+--++-+--+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+--++-+-+-+--++\\n\", \"100\\n-----+++-++--++++-+++---+-++--++-----+---+-+-++--+-+++-+--+-+++--+---+-+-++--+-+-+-++-++--+-+-+--+++\\n\", \"100\\n---+-++---+-+------+---++-----+-+------+---+-+----------+--++--------------+--+++--------+---+------\\n\", \"100\\n-+--+--+---+-+-++++----++-----+-++----+-+-+--+-+--+-+-++--+-++-------++---+-++-+---++-+-+++-+--+++++\\n\", \"73\\n-+-+-++-+---+--+--+----++--++--++--+++-++++-+-+---+++-----+--+++-++-+-+++\\n\", \"100\\n-+--+--+-----+-++++----++-----+-++----+-+-+-++-+--+-++-+--+-++-------++---+-++-+---++-+-+++-+--+++++\\n\", \"100\\n+-++-++-+---+--+-+++++-+--+-+-+--+-++-+++++++--++++--+---++-++--++++-++++++--+---+-+-++--+--++++-+-+\\n\", \"78\\n+++++++++----------------------+------+-----------------+++++++++-+++---++++-+\\n\", \"100\\n++++++++++++++++++++++++++++++++++++-+--+--+-+---+--++++++-----+----++--++--+-+++++--+++----++-+-++-\\n\", \"100\\n+-+++--++++-+-++--+--+-++-------+---+-+---+++++++---+----+++-+-++--+-+--+-+-+--+++-++-+----+-+-+++++\\n\", \"100\\n+--+-+-+-+-+++--++---+-+-+-+-+-+-+-+-+---+-+-+-+-+-+-+-+-+--+--+-+++-+-++--+-++-+-+-+-+-+++-+-+-+-+-\\n\", \"100\\n-+++-+++++++++-+++-+-+-++++++++++++++++-++++++++++++++++++++++-++-++++++-+--++++-+++++++++-+-+-+--++\\n\", \"100\\n--+---++++--++-++-++----++-++-+-++--++-+--++++-++--+---+-++-+-+-+-+-+-+----------+-++-+--+--+++--+-+\\n\", \"78\\n+-++++---+++-+++++++++-----------------+------+----------------------+++++++++\\n\", \"100\\n-+-+-+-+-+++-+-+-+-+-++-+--++-+-+++-+--+--+-+-+-+-+-+-+-+-+---+-+-+-+-+-+-+-+-+---++--+++-+-+-+-+--+\\n\", \"100\\n++--+-+-+-+++++++++-++++--+-++++++-++-++++++++++++++++++++++-++++++++++++++++-+-+-+++-+++++++++-+++-\\n\", \"4\\n--+-\\n\", \"99\\n-+-++--------++--++----------------------------++-------++-+--++--------+-+--------+--------------+\\n\", \"100\\n--+-++---+-++-++-+-+--+---++-+-++---++-+---+++++-+--++--++-+-+-------+-+-+----+++--++++-+++-+-+-+-++\\n\", \"73\\n+++-+-++-+++--+-----++++--+-+-++++-+++--+-+-++--++----+--+--+---+--+-+-+-\\n\", \"99\\n+--+-+-+++++---+--+---+++-+---+--++++-+-+++++++-+-++++-++--+--++--+-+--------+--++++--++++++--++-+-\\n\", \"78\\n+++-++---+++++++++++++---------------------+-------------------------+++++++++\\n\", \"100\\n-+-++-++++--+++++--------------+-----+----+---+---------+---------------++--+--++-+---------+---++--\\n\", \"100\\n++-+--++---++-++--++-+-+-+-+--+--+++---+++-+-+--+-++-+----+-+-------+--++++++--+-++--++-+---+--+++--\\n\", \"100\\n-+-+-+-+---+++-----+---+++++-++--+-++-----+-+++-++++-+-+--++-+-+--++-+--+---++---+-++++---+------++-\\n\", \"100\\n--++---+-+-+-+++---+++-+-+-+-+-+-+-+--++-+-+-+-+-+-+--++-+-+-+-+---+--+----++++-+++-++--++-+-+--++-+\\n\", \"100\\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-\\n\", \"99\\n-++-+-+++--++--+-+---+-+-++-+-----+---+++-+++++--+-+-+-+--+++-+++++---+-+--+----+---------+-+-++++-\\n\", \"100\\n--+-+-+-++---------+--+++-+-+--++++------++++-+++----+-+-+-++++-++-----+++------++-+-++-+---+-+++-++\\n\", \"51\\n-+-++++++-++++-+-+-+-++-+---+------++-+-+++++---++-\\n\", \"100\\n----++++++++++++++++++++++++++++++++++++++++++++++------------------------------++++++++++++++++++++\\n\", \"100\\n+--+-+++++++-+-++-++-+-+---++--+++--+-+--+-++--+-+--+--+-+-+++-+++-----+---+--+--++--+--+++--+++---+\\n\", \"100\\n+++++--+-+++-+-++---+-++-+---++-------++-+--+-++-+--+-+--+-+-+----++-+----+++----++++---+---+--+--+-\\n\", \"100\\n+-++-+++--+--+--+-+--+-------+-+---+-+-+-++-+---+--++-++++--+-++--++-+-++-++----++-++-+++-+++----+--\\n\", \"100\\n-+--+-++-+---+-+-+++-+--+-++--++--++---+--+++--+++-+----++++---++--+--++-+++-+--+-++----++++-+-----+\\n\", \"100\\n++++++++++++++++++++++++++++++++++---+--+--+-+---+--++++++-+---+----++--++--+++++++--+++----++-+-++-\\n\", \"100\\n--+---++--++-+++--++----+++++-++++++-+---+-+-+-+-+++--+-+-+---+-+++--+-+-+-+++++++++--++-+++++--++-+\\n\", \"99\\n++-+-+-+-+++---+--+---+++-+---+--+-++-+-+++++++-+-++++-++--+--++--+-+--------+--++++--++++++--++++-\\n\", \"100\\n+++++-+-++---+-++-+-+----+-++---+--++-+-+++----+---+++++++---+-+---+-------++-+-++--++-+-++++--+++-+\\n\", \"100\\n-++-+--+--+++-+-+---+---++-++-+-+-++---+--+-+-+-+++-+++-----+--+++-+-++--+-++--++---+-++-++--++--+--\\n\", \"100\\n--+-++---+-++-++-+-+--+---++-+-++---++-+---+++++----++--++-+-+-------+-+-+----+++--++++-+++-+-+++-++\\n\", \"2\\n-+\\n\", \"3\\n---\\n\", \"5\\n++-++\\n\", \"4\\n++++\\n\"], \"outputs\": [\"0\", \"4\", \"1\", \"3\", \"1\", \"100\", \"0\", \"69\", \"17\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"2\", \"1\", \"2\", \"1\", \"1\", \"2\", \"1\", \"3\", \"2\", \"4\", \"6\", \"8\", \"9\", \"26\", \"7\", \"1\", \"24\", \"27\", \"35\", \"42\", \"50\", \"90\", \"2\", \"64\", \"60\", \"80\", \"2\", \"99\", \"98\", \"98\", \"90\", \"13\", \"16\", \"21\", \"44\", \"97\", \"11\", \"1\", \"1\", \"9\", \"11\", \"16\", \"6\", \"0\", \"4\", \"2\", \"1\", \"0\", \"0\", \"1\", \"0\", \"1\", \"3\", \"0\", \"1\", \"2\", \"2\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\\n\", \"2\\n\", \"11\\n\", \"1\\n\", \"21\\n\", \"26\\n\", \"0\\n\", \"4\\n\", \"1\\n\", \"9\\n\", \"6\\n\", \"64\\n\", \"0\\n\", \"2\\n\", \"1\\n\", \"0\\n\", \"17\\n\", \"0\\n\", \"13\\n\", \"0\\n\", \"1\\n\", \"80\\n\", \"1\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"90\\n\", \"2\\n\", \"2\\n\", \"11\\n\", \"50\\n\", \"16\\n\", \"0\\n\", \"1\\n\", \"69\\n\", \"0\\n\", \"1\\n\", \"35\\n\", \"0\\n\", \"1\\n\", \"16\\n\", \"97\\n\", \"0\\n\", \"24\\n\", \"4\\n\", \"0\\n\", \"100\\n\", \"98\\n\", \"27\\n\", \"7\\n\", \"1\\n\", \"2\\n\", \"44\\n\", \"2\\n\", \"90\\n\", \"0\\n\", \"0\\n\", \"1\\n\", \"2\\n\", \"2\\n\", \"99\\n\", \"1\\n\", \"6\\n\", \"0\\n\", \"1\\n\", \"9\\n\", \"1\\n\", \"98\\n\", \"1\\n\", \"60\\n\", \"2\\n\", \"3\\n\", \"0\\n\", \"42\\n\", \"3\\n\", \"8\\n\", \"0\\n\", \"0\\n\", \"7\\n\", \"1\\n\", \"64\\n\", \"80\\n\", \"9\\n\", \"68\\n\", \"32\\n\", \"20\\n\", \"94\\n\", \"98\\n\", \"10\\n\", \"6\\n\", \"3\\n\", \"8\\n\", \"5\\n\", \"2\\n\", \"21\\n\", \"17\\n\", \"88\\n\", \"14\\n\", \"36\\n\", \"24\\n\", \"48\\n\", \"65\\n\", \"12\\n\", \"16\\n\", \"4\\n\", \"22\\n\", \"44\\n\", \"1\\n\", \"1\\n\", \"1\\n\", \"0\\n\", \"9\\n\", \"0\\n\", \"32\\n\", \"0\\n\", \"7\\n\", \"5\\n\", \"9\\n\", \"6\\n\", \"8\\n\", \"9\\n\", \"1\\n\", \"0\\n\", \"3\\n\", \"0\\n\", \"0\\n\", \"6\\n\", \"3\\n\", \"2\\n\", \"3\\n\", \"0\\n\", \"7\\n\", \"6\\n\", \"7\\n\", \"17\\n\", \"12\\n\", \"32\\n\", \"6\\n\", \"5\\n\", \"65\\n\", \"2\\n\", \"9\\n\", \"2\\n\", \"64\\n\", \"0\\n\", \"1\\n\", \"8\\n\", \"0\\n\", \"10\\n\", \"9\\n\", \"0\\n\", \"3\\n\", \"1\\n\", \"7\\n\", \"98\\n\", \"3\\n\", \"4\\n\", \"6\\n\", \"36\\n\", \"2\\n\", \"0\\n\", \"5\\n\", \"1\\n\", \"32\\n\", \"20\\n\", \"10\\n\", \"7\\n\", \"1\\n\", \"10\\n\", \"1\\n\", \"0\\n\", \"3\\n\", \"4\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['math', 'implementation']",
    "name": null,
    "source": "codeforces",
    "tags": "['Mathematics', 'Implementation']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/1159/A",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": "2019-12-31",
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": "O(N)"
  },
  {
    "question": "It is known that each weight of 1 gram, 3 gram, 9 gram, and 27 gram can be weighed from 1 gram to 40 gram in 1 gram increments using a balance. For example, if you put a weight of 3 grams and a weight you want to weigh on one plate of the balance and a weight of 27 grams and 1 gram on the other plate, the weight of the thing you want to weigh is 27-3+. You can see that 1 = 25 grams. In addition, if you have one weight up to 1 (= 30) grams, 31 grams, ..., 3n-1 grams, and 3n grams, you can weigh up to (3n + 1-1) / 2 grams using a balance. Is known. It is also known that there is only one way to place weights so that the balances are balanced.\n\nYou can place the weight you want to weigh and the weight on the balance, and use a character string to indicate how to place the weight in a balanced manner. Enter \"-\" when placing a 3i gram weight on the same plate as the one you want to weigh, \"+\" when placing it on the other plate, and \"0\" when not placing it on either side of the string from the right end. Write in the i-th (count the right end as the 0th). For example, the 25 gram example above can be represented as + 0- +.\n\nNow, when given the weight of what you want to weigh, create a program that outputs a character string that indicates how to place the weight so that the balance is balanced. However, there must always be one weight of a power of 3 grams of any weight.\n\n(Supplement: About symmetric ternary numbers)\nWhen the weight of the object to be weighed is w, the character string indicating how to place the weight is a symmetric ternary number of w. A symmetric ternary number is a number that is scaled by a power of 3 and written in each digit to represent the numbers 1, 0, and -1. In the string above, the letters \"+\", \"0\", and \"-\" correspond to the numbers 1, 0, and -1, respectively. For example, a symmetric ternary number with a weight placed + 0- + when weighing 25 grams is represented by 1 x 33 + 0 x 32-1 x 31 + 1 x 30 = 25.\n\n\n\ninput\n\nThe input is given in the following format.\n\n\nw\n\n\nw (1 ≤ w ≤ 100000) is an integer that represents the weight of what you want to weigh.\n\noutput\n\nOutputs a character string that indicates how to place the weight. However, the left end of the character string must not be 0.\n\nExample\n\nInput\n\n25\n\n\nOutput\n\n+0-+",
    "solutions": "[\"from itertools import product, starmap, dropwhile\\nfrom math import log\\nn = int(input())\\nm = int(log(n, 3)) + 2\\nfor a in product([-1, 0, 1], repeat=m):\\n\\tif n == sum(starmap(lambda t, x: 3 ** t * x, zip(reversed(range(m)), a))):\\n\\t\\tprint(''.join(map(lambda x: '-0+'[x + 1], dropwhile(lambda x: x == 0, a))))\\n\\t\\tbreak\\n\", \"import heapq\\nfrom collections import deque\\nfrom enum import Enum\\nimport sys\\nimport math\\nfrom _heapq import heappush, heappop\\nimport copy\\nBIG_NUM = 2000000000\\nHUGE_NUM = 99999999999999999\\nMOD = 1000000007\\nEPS = 1e-09\\nsys.setrecursionlimit(3 ** 12)\\nSIZE = 15\\nPOW = [1] * SIZE\\nfor i in range(1, SIZE):\\n\\tPOW[i] = POW[i - 1] * 3\\nW = int(input())\\nmax_digit = None\\nfor i in range(SIZE):\\n\\tif (POW[i] - 1) // 2 >= W:\\n\\t\\tmax_digit = i\\n\\t\\tbreak\\nans = [None] * (max_digit + 1)\\nwork = [None] * (max_digit + 1)\\n\\ndef recursive(digit, tmp_sum):\\n\\tglobal ans, work, W, max_digit\\n\\tif digit == -1:\\n\\t\\tif tmp_sum == W:\\n\\t\\t\\tfor i in range(max_digit, -1, -1):\\n\\t\\t\\t\\tans[i] = work[i]\\n\\t\\treturn\\n\\twork[digit] = '0'\\n\\trecursive(digit - 1, tmp_sum)\\n\\twork[digit] = '+'\\n\\trecursive(digit - 1, tmp_sum + POW[digit])\\n\\tif tmp_sum > 0:\\n\\t\\twork[digit] = '-'\\n\\t\\trecursive(digit - 1, tmp_sum - POW[digit])\\nrecursive(max_digit, 0)\\nis_First = True\\nfor i in range(max_digit, -1, -1):\\n\\tif ans[i] == '0':\\n\\t\\tif is_First:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tprint('0', end='')\\n\\telif ans[i] == '+':\\n\\t\\tis_First = False\\n\\t\\tprint('+', end='')\\n\\telse:\\n\\t\\tis_First = False\\n\\t\\tprint('-', end='')\\nprint()\\n\", \"n = int(input())\\nl = []\\nwhile n:\\n\\tif n % 3 == 0:\\n\\t\\tl = ['0'] + l\\n\\t\\tn //= 3\\n\\telif n % 3 == 1:\\n\\t\\tl = ['+'] + l\\n\\t\\tn = (n - 1) // 3\\n\\telse:\\n\\t\\tl = ['-'] + l\\n\\t\\tn = (n + 1) // 3\\nprint(''.join(l))\\n\", \"w = int(input())\\nans = ''\\nwhile w:\\n\\tif w % 3 == 0:\\n\\t\\tans += '0'\\n\\t\\tw //= 3\\n\\telif w % 3 == 1:\\n\\t\\tans += '+'\\n\\t\\tw //= 3\\n\\telif w % 3 == 2:\\n\\t\\tans += '-'\\n\\t\\tw = (w + 1) // 3\\nprint(ans[::-1])\\n\", \"from itertools import product\\n\\ndef calc(x):\\n\\tc = 0\\n\\ty = 1\\n\\twhile 1:\\n\\t\\tif abs(x - y) <= (y - 1) // 2:\\n\\t\\t\\tR = [0] * (c + 1)\\n\\t\\t\\tR[c] = 1\\n\\t\\t\\tif x < y:\\n\\t\\t\\t\\tr = calc(y - x)\\n\\t\\t\\t\\tfor i in range(len(r)):\\n\\t\\t\\t\\t\\tR[i] = -r[i]\\n\\t\\t\\telif x > y:\\n\\t\\t\\t\\tr = calc(x - y)\\n\\t\\t\\t\\tfor i in range(len(r)):\\n\\t\\t\\t\\t\\tR[i] = r[i]\\n\\t\\t\\treturn R\\n\\t\\ty *= 3\\n\\t\\tc += 1\\nprint(*map({-1: '-', 0: '0', 1: '+'}.__getitem__, reversed(calc(int(input())))), sep='')\\n\", \"s = ''\\nn = int(input())\\nwhile True:\\n\\tif n % 3 == 0:\\n\\t\\ts = '0' + s\\n\\telif n % 3 == 1:\\n\\t\\ts = '+' + s\\n\\telse:\\n\\t\\ts = '-' + s\\n\\t\\tn += 1\\n\\tn = n // 3\\n\\tif n == 0:\\n\\t\\tbreak\\nprint(s)\\n\", \"import sys, math, os\\nPYDEV = os.environ.get('PYDEV')\\nif PYDEV == 'True':\\n\\tsys.stdin = open('sample-input.txt', 'rt')\\nN = int(input())\\nans = ''\\nwhile N > 0:\\n\\tif N % 3 == 2:\\n\\t\\tans += '-'\\n\\t\\tN += 1\\n\\telif N % 3 == 1:\\n\\t\\tans += '+'\\n\\telse:\\n\\t\\tans += '0'\\n\\tN //= 3\\nprint(ans[::-1])\\n\", \"n = int(input())\\na = ''\\nwhile n:\\n\\tif n % 3 == 2:\\n\\t\\ta += '-'\\n\\t\\tn += 1\\n\\telif n % 3:\\n\\t\\ta += '+'\\n\\telse:\\n\\t\\ta += '0'\\n\\tn //= 3\\nprint(a[::-1])\\n\", \"W = int(input())\\nw3 = []\\nwhile W > 0:\\n\\tw3.append(W % 3)\\n\\tW = W // 3\\nw3.append(0)\\nfor i in range(len(w3) - 1):\\n\\tif w3[i] > 1:\\n\\t\\tw3[i] = w3[i] - 3\\n\\t\\tw3[i + 1] = w3[i + 1] + 1\\nw3.reverse()\\nif w3[0] == 1:\\n\\tprint('+', end='')\\nelif w3[0] == -1:\\n\\tprint('-', end='')\\nfor i in range(1, len(w3)):\\n\\tif w3[i] == 1:\\n\\t\\tprint('+', end='')\\n\\telif w3[i] == 0:\\n\\t\\tprint('0', end='')\\n\\telif w3[i] == -1:\\n\\t\\tprint('-', end='')\\nprint('')\\n\", \"w = int(input())\\nres = ''\\nwhile w > 0:\\n\\tif w % 3 == 0:\\n\\t\\tres += '0'\\n\\telif w % 3 == 1:\\n\\t\\tres += '+'\\n\\telse:\\n\\t\\tres += '-'\\n\\t\\tw += 1\\n\\tw //= 3\\nprint(res[::-1])\\n\", \"w = int(input())\\nresult = ''\\nchars = '0+-'\\nn = 0\\nwhile w > (3 ** n - 1) // 2:\\n\\tresult += chars[(w + (3 ** n - 1) // 2) // 3 ** n % 3]\\n\\tn += 1\\nprint(result[::-1])\\n\", \"w = int(input())\\nresult = []\\nchars = '0+-'\\nn = 0\\nwhile w > (3 ** n - 1) // 2:\\n\\tresult.append(chars[(w + (3 ** n - 1) // 2) // 3 ** n % 3])\\n\\tn += 1\\nresult.reverse()\\nprint(''.join(result))\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"15\", \"9\", \"30\", \"24\", \"20\", \"34\", \"49\", \"14\", \"10\", \"13\", \"11\", \"1\", \"2\", \"3\", \"5\", \"7\", \"22\", \"19\", \"4\", \"16\", \"27\", \"45\", \"33\", \"54\", \"40\", \"37\", \"17\", \"6\", \"8\", \"21\", \"23\", \"29\", \"18\", \"57\", \"26\", \"60\", \"47\", \"70\", \"28\", \"32\", \"12\", \"35\", \"90\", \"58\", \"55\", \"65\", \"50\", \"80\", \"78\", \"61\", \"84\", \"87\", \"64\", \"31\", \"48\", \"44\", \"127\", \"164\", \"69\", \"38\", \"160\", \"170\", \"116\", \"72\", \"85\", \"251\", \"73\", \"124\", \"240\", \"139\", \"179\", \"384\", \"195\", \"264\", \"284\", \"294\", \"107\", \"203\", \"339\", \"130\", \"229\", \"567\", \"119\", \"360\", \"397\", \"42\", \"267\", \"321\", \"59\", \"373\", \"520\", \"79\", \"438\", \"893\", \"132\", \"357\", \"1204\", \"46\", \"385\", \"1942\", \"25\"], \"outputs\": [\"+--0\\n\", \"+00\\n\", \"+0+0\\n\", \"+0-0\\n\", \"+-+-\\n\", \"++-+\\n\", \"+--++\\n\", \"+---\\n\", \"+0+\\n\", \"+++\\n\", \"++-\\n\", \"+\\n\", \"+-\\n\", \"+0\\n\", \"+--\\n\", \"+-+\\n\", \"+-++\\n\", \"+-0+\\n\", \"++\\n\", \"+--+\\n\", \"+000\\n\", \"+--00\\n\", \"++-0\\n\", \"+-000\\n\", \"++++\\n\", \"++0+\\n\", \"+-0-\\n\", \"+-0\\n\", \"+0-\\n\", \"+-+0\\n\", \"+0--\\n\", \"+0+-\\n\", \"+-00\\n\", \"+-0+0\\n\", \"+00-\\n\", \"+-+-0\\n\", \"+--+-\\n\", \"+0--+\\n\", \"+00+\\n\", \"++--\\n\", \"++0\\n\", \"++0-\\n\", \"+0+00\\n\", \"+-0++\\n\", \"+-00+\\n\", \"+-++-\\n\", \"+-0--\\n\", \"+000-\\n\", \"+00-0\\n\", \"+-+-+\\n\", \"+00+0\\n\", \"+0+-0\\n\", \"+-+0+\\n\", \"+0++\\n\", \"+--+0\\n\", \"+--0-\\n\", \"+---0+\\n\", \"+-00+-\\n\", \"+0--0\\n\", \"+++-\\n\", \"+-00-+\\n\", \"+-0+0-\\n\", \"+++0-\\n\", \"+0-00\\n\", \"+00++\\n\", \"+00+0-\\n\", \"+0-0+\\n\", \"+----+\\n\", \"+000-0\\n\", \"+--0++\\n\", \"+-+-0-\\n\", \"+---+-0\\n\", \"+-++-0\\n\", \"+0+-+0\\n\", \"++----\\n\", \"++-0-0\\n\", \"++00-\\n\", \"+0----\\n\", \"+++--0\\n\", \"+---++\\n\", \"+0-+++\\n\", \"+-+0000\\n\", \"++++-\\n\", \"++++00\\n\", \"+--0-0+\\n\", \"+---0\\n\", \"+0+0-0\\n\", \"++00-0\\n\", \"+-+--\\n\", \"+----++\\n\", \"+-0++-+\\n\", \"+00-+\\n\", \"+--++-0\\n\", \"++-00+-\\n\", \"+--0-0\\n\", \"++++-0\\n\", \"+--00--+\\n\", \"+--0+\\n\", \"+---+-+\\n\", \"+0-000-+\\n\", \"+0-+\"]}",
    "difficulty": "UNKNOWN_DIFFICULTY",
    "raw_tags": "[]",
    "name": null,
    "source": "aizu",
    "tags": "[]",
    "skill_types": "[]",
    "url": null,
    "Expected Auxiliary Space": null,
    "time_limit": "1.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "134.217728 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "You'll be given an array A of N integers as input. For each element of the array A[i], print A[i]-1. \n\nInput:\nThere will be N+1 iines of input each consisting of a single integer.\nInteger in first line denotes N\nFor the following N lines the integer in i^{th} line denotes the integer A[i-1]\n\nOutput:\nFor each element of the array A[i], print A[i]-1 in a new line.\n\nConstraints:\n1 ≤ N ≤ 10 \n1 ≤ A[i] ≤ 10  \n\nSAMPLE INPUT\n2\n2\n6\n\nSAMPLE OUTPUT\n1\n5",
    "solutions": "[\"x = list()\\na = input()\\n\\nfor i in range(int(a)):\\n\\tn = input()\\n\\tx.append(int(n))\\n\\ni=0\\nx.insert(0,a)\\nb = len(x)\\n\\nfor i in range(1,b): \\n   x[i]= x[i] - 1\\nfor i in range(1,b):\\n\\tprint(x[i])\\n\\n\\n\", \"n = eval(input())\\nfor _ in range(n):\\n\\tm = eval(input())\\n\\tprint(m-1)\\n\\t\\n\\n\", \"list1 = []\\nfor i in range(0,10):\\n\\ta = eval(input())\\n\\tlist1.append(a)\\n\\t\\n\\ni=0\\nlist2 = []\\nlength = len(list1)\\nwhile i<length:\\n    list2.append(list1[i]-1)\\n\\n    for j in range(length-1,i,-1):\\n        if list1[i] == list1[j]:\\n            del list1[j]\\n            length-=1\\n    i+=1\\n\\nfor numbers in sorted(list2):\\n\\tprint(numbers)\\n\\t\\n\\t\\n\\t\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n#print 'Hello World!'\\nN=eval(input())\\nfor i in range(N):\\n\\tn=eval(input())\\n\\tprint(n-1)\\n\\t\\n\", \"N = int(input())\\nA = []\\nwhile N:\\n\\tprint(int(input())-1)\\n\\tN = N-1\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n\\nprint 'Hello World!'\\n'''\\n\\nnum = int(input())\\narr = list(range(num))\\n\\nfor i in range(num):\\n\\tarr[i] = int(input())\\n\\t\\nfor i in range(num):\\n\\tprint(arr[i]-1)\\n\", \"arr=list()\\nn=int(input())\\nfor i in range(0,n):\\n\\tj=int(input())\\n\\tarr.append(j)\\nfor i in range(0,n):\\n\\tprint(arr[i]-1)\\n\", \"n = int(input())\\nfor i in range(1,n+1):\\n\\tint0=int(input())\\n\\tint0-=1\\n\\tprint(int0)\\nexit(0)\\n\", \"N=int(input())\\nfor i in range(N):\\n\\ta=(int(input()))\\n\\tprint((a-1))\\n\\n\\n\\n    \\n\\t\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n#print 'Hello World!'\\n#print(\\\"Hello World!\\\")\\na = 0\\na = eval(input())\\nfor a in range(0,a):\\n\\tb = 0\\n\\tb=eval(input())\\n\\tb-=1\\n\\tprint(b)\\n\\n\", \"N = int(input())\\nA = []\\nwhile N:\\n\\tprint(int(input())-1)\\n\\tN = N-1\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\nn=int(input(\\\"\\\"))\\nfor i in range(n):\\n\\tp=int(input(\\\"\\\"))\\n\\tprint((p-1))\\n\", \"n=int(input())\\nfor i in range(n):\\n\\th=int(input())\\n\\tprint((h-1))\\n\", \"n=eval(input())\\nl=[]\\nfor x in range(n):\\n\\tl.append(eval(input()))\\nfor x in range(n):\\n\\tprint((l[x]-1))\\n\\n\", \"n= int(input())\\n\\nfor i in range(n):\\n\\tnum= int (input())\\n\\tprint(num-1)\\n\\t\\n\", \"n = int(input())\\n\\nfor i in range(n):\\n\\ta = int(input())\\n\\tprint(a-1)\\n\", \"count = int(input(''))\\nfor i in range(count):\\n\\tnum = int(input(''))\\n\\tprint(num-1)\\n\", \"N=int(input())\\nl=[]\\nfor i in range(0,N):\\n\\tl.append(int(input()))\\n\\nfor j in l:\\n\\tj-=1\\n\\tprint(j)\\n\\n\\n\", \"n=eval(input())\\nmylist=[]\\nfor x in range(n):\\n\\tmylist.append(eval(input()))\\nfor x in range(n):\\n\\tprint(mylist[x]-1)\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\nn = int(input())\\nN = 0\\nwhile N < n:\\n\\tnum = int(input())\\n\\tprint(num - 1)\\n\\tN += 1\\n\", \"list1 = []\\nfor i in range(0,10):\\n\\ta = eval(input())\\n\\tlist1.append(a)\\n\\t\\n\\ni=0\\nlist2 = []\\nlength = len(list1)\\nwhile i<length:\\n    list2.append(list1[i]-1)\\n\\n    for j in range(length-1,i,-1):\\n        if list1[i] == list1[j]:\\n            del list1[j]\\n            length-=1\\n    i+=1\\n\\nfor numbers in sorted(list2):\\n\\tprint(numbers)\\n\\t\\n\\t\\n\\t\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n#print 'Hello World!'\\nN=eval(input())\\nfor i in range(N):\\n\\tn=eval(input())\\n\\tprint(n-1)\\n\\t\\n\", \"N=int(eval(input()))\\narr=[]\\nfor _ in range(N):\\n\\tarr.append(int(eval(input())))\\nfor i in arr:\\n\\tprint(i-1)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\"], \"outputs\": [\"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\"]}",
    "difficulty": "EASY",
    "raw_tags": "[]",
    "name": "death-the-multiverse-and-nothing",
    "source": "hackerearth",
    "tags": "[]",
    "skill_types": "[]",
    "url": null,
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": null,
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Note that this is the first problem of the two similar problems. You can hack this problem only if you solve both problems.\n\nYou are given a tree with n nodes. In the beginning, 0 is written on all edges. In one operation, you can choose any 2 distinct leaves u, v and any real number x and add x to values written on all edges on the simple path between u and v.\n\nFor example, on the picture below you can see the result of applying two operations to the graph: adding 2 on the path from 7 to 6, and then adding -0.5 on the path from 4 to 5. \n\n<image>\n\nIs it true that for any configuration of real numbers written on edges, we can achieve it with a finite number of operations?\n\nLeaf is a node of a tree of degree 1. Simple path is a path that doesn't contain any node twice.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.\n\nOutput\n\nIf there is a configuration of real numbers written on edges of the tree that we can't achieve by performing the operations, output \"NO\". \n\nOtherwise, output \"YES\". \n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\nYES\n\nInput\n\n\n3\n1 2\n2 3\n\n\nOutput\n\n\nNO\n\nInput\n\n\n5\n1 2\n1 3\n1 4\n2 5\n\n\nOutput\n\n\nNO\n\nInput\n\n\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example, we can add any real x to the value written on the only edge (1, 2).\n\n<image>\n\nIn the second example, one of configurations that we can't reach is 0 written on (1, 2) and 1 written on (2, 3).\n\n<image>\n\nBelow you can see graphs from examples 3, 4:\n\n<image> <image>",
    "solutions": "[\"m = int(input())\\nl = [0 for _ in range(m + 1)]\\nfor _ in range(m - 1):\\n\\t(a, b) = map(int, input().split())\\n\\tl[a] += 1\\n\\tl[b] += 1\\nif 2 in l:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"import sys\\n\\nclass D1AddOnATree:\\n\\n\\tdef dfs(self, start):\\n\\t\\tself.done[start] = 1\\n\\t\\tfor x in self.adj[start]:\\n\\t\\t\\tif self.done[x]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tself.par[x] = start\\n\\t\\t\\tself.dfs(x)\\n\\n\\tdef solve(self):\\n\\t\\tfrom collections import defaultdict\\n\\t\\timport sys\\n\\t\\tsys.setrecursionlimit(10 ** 5 + 5)\\n\\t\\tn = int(input())\\n\\t\\tself.adj = defaultdict(list)\\n\\t\\tself.par = defaultdict(int)\\n\\t\\tself.done = [0] * (n + 1)\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\t(u, v) = [int(_) for _ in input().split()]\\n\\t\\t\\tself.adj[u].append(v)\\n\\t\\t\\tself.adj[v].append(u)\\n\\t\\t\\tself.done[u] += 1\\n\\t\\t\\tself.done[v] += 1\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tif self.done[i] == 2:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\t\\treturn\\n\\t\\tv = max((len(self.adj[p]) for p in self.adj))\\n\\t\\tstart = -1\\n\\t\\tfor p in self.adj:\\n\\t\\t\\tif len(self.adj[p]) == v:\\n\\t\\t\\t\\tstart = p\\n\\t\\t\\t\\tbreak\\n\\t\\tassert start != -1\\n\\t\\tself.dfs(start)\\n\\t\\tcnt = [0] * (n + 1)\\n\\t\\tfor k in self.adj:\\n\\t\\t\\tif self.par[k] == 0:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif len(self.adj[k]) == 1:\\n\\t\\t\\t\\tcnt[self.par[k]] += 1\\n\\t\\tans = 0\\n\\t\\tfor x in cnt:\\n\\t\\t\\tif x == 1:\\n\\t\\t\\t\\tans += 1\\n\\t\\tif ans == 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nsolver = D1AddOnATree()\\ninput = sys.stdin.readline\\nsolver.solve()\\n\", \"n = int(input())\\ndeg = [0] * n\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tu -= 1\\n\\tv -= 1\\n\\tdeg[u] += 1\\n\\tdeg[v] += 1\\nfor d in deg:\\n\\tif d == 2:\\n\\t\\tprint('NO')\\n\\t\\texit(0)\\nprint('YES')\\n\", \"from collections import defaultdict, deque\\nfrom heapq import heappush, heappop\\nfrom math import inf\\nri = lambda : map(int, input().split())\\n\\ndef solve():\\n\\tn = int(input())\\n\\tcnt = defaultdict(int)\\n\\tfor _ in range(n - 1):\\n\\t\\t(x, y) = ri()\\n\\t\\tcnt[x] += 1\\n\\t\\tcnt[y] += 1\\n\\tvalid = True\\n\\tfor x in cnt:\\n\\t\\tif cnt[x] == 2:\\n\\t\\t\\tvalid = False\\n\\tif valid:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nt = 1\\nwhile t:\\n\\tt -= 1\\n\\tsolve()\\n\", \"n = int(input())\\ntree_nums = [0 for i in range(n)]\\nfor i in range(n - 1):\\n\\t(a1, a2) = map(int, input().split())\\n\\ttree_nums[a1 - 1] += 1\\n\\ttree_nums[a2 - 1] += 1\\nif n == 2:\\n\\tprint('YES')\\nelif n == 3:\\n\\tprint('NO')\\nelse:\\n\\tans_is_no = False\\n\\tfor i in range(n):\\n\\t\\tif tree_nums[i] == 2:\\n\\t\\t\\tans_is_no = True\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tbreak\\n\\tif not ans_is_no:\\n\\t\\tprint('YES')\\n\", \"n = int(input())\\ngr = {i: 0 for i in range(1, n + 1)}\\nfor i in range(n - 1):\\n\\t(a, b) = map(int, input().split())\\n\\tgr[a] += 1\\n\\tgr[b] += 1\\nfor i in gr:\\n\\tif gr[i] == 2:\\n\\t\\tprint('NO')\\n\\t\\texit(0)\\nprint('YES')\\n\", \"n = int(input())\\narr = [0] * (n + 1)\\nfor _ in range(n - 1):\\n\\t(a, b) = map(int, input().split())\\n\\tarr[a] += 1\\n\\tarr[b] += 1\\nfor i in range(1, n + 1):\\n\\tif arr[i] == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ng = [[] for i in range(n + 1)]\\nd = [0] * 100001\\nfor i in range(n - 1):\\n\\t(u, v) = [int(i) for i in input().split()]\\n\\tg[u].append(v)\\n\\tg[v].append(u)\\n\\td[u] += 1\\n\\td[v] += 1\\nfor i in d:\\n\\tif i == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\nedges = [0] * n\\nfor i in range(n - 1):\\n\\t(a, b) = list(map(int, input().split()))\\n\\tedges[a - 1] += 1\\n\\tedges[b - 1] += 1\\nif 2 in edges:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"from sys import stdin, stdout, exit\\nn = int(input())\\ngraph = [[] for i in range(n)]\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, stdin.readline().split())\\n\\tgraph[u - 1].append(v - 1)\\n\\tgraph[v - 1].append(u - 1)\\nfor i in range(n):\\n\\tif len(graph[i]) == 2:\\n\\t\\tprint('NO')\\n\\t\\texit()\\nprint('YES')\\n\", \"from collections import Counter\\nn = int(input())\\nx = []\\nfor _ in range(n - 1):\\n\\tx.extend(input().split())\\nprint('NO' if 2 in Counter(x).values() else 'YES')\\n\", \"import sys, os\\nfrom io import BytesIO, IOBase\\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\\nfrom collections import defaultdict as dd, deque\\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(stdin, stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\nmod = pow(10, 9) + 7\\nmod2 = 998244353\\n\\ndef inp():\\n\\treturn stdin.readline().strip()\\n\\ndef iinp():\\n\\treturn int(inp())\\n\\ndef out(var, end='\\\\n'):\\n\\tstdout.write(str(var) + '\\\\n')\\n\\ndef outa(*var, end='\\\\n'):\\n\\tstdout.write(' '.join(map(str, var)) + end)\\n\\ndef lmp():\\n\\treturn list(mp())\\n\\ndef mp():\\n\\treturn map(int, inp().split())\\n\\ndef smp():\\n\\treturn map(str, inp().split())\\n\\ndef l1d(n, val=0):\\n\\treturn [val for i in range(n)]\\n\\ndef l2d(n, m, val=0):\\n\\treturn [l1d(m, val) for j in range(n)]\\n\\ndef remadd(x, y):\\n\\treturn 1 if x % y else 0\\n\\ndef ceil(a, b):\\n\\treturn (a + b - 1) // b\\nS1 = 'abcdefghijklmnopqrstuvwxyz'\\nS2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\\n\\ndef isprime(x):\\n\\tif x <= 1:\\n\\t\\treturn False\\n\\tif x in (2, 3):\\n\\t\\treturn True\\n\\tif x % 2 == 0:\\n\\t\\treturn False\\n\\tfor i in range(3, int(sqrt(x)) + 1, 2):\\n\\t\\tif x % i == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\nn = iinp()\\nedges = l1d(n + 1)\\nfor i in range(n - 1):\\n\\t(x, y) = mp()\\n\\tedges[x] += 1\\n\\tedges[y] += 1\\nflg = True\\nfor i in edges:\\n\\tif i == 2:\\n\\t\\tflg = False\\n\\t\\tbreak\\nprint('YES' if flg else 'NO')\\n\", \"n = int(input())\\ndic = {}\\nfor x in range(n - 1):\\n\\t(a, b) = list(map(int, input().split()))\\n\\tif a in dic:\\n\\t\\tdic[a] += 1\\n\\telse:\\n\\t\\tdic[a] = 1\\n\\tif b in dic:\\n\\t\\tdic[b] += 1\\n\\telse:\\n\\t\\tdic[b] = 1\\nflag = 5\\nfor it in dic:\\n\\tif dic[it] == 2:\\n\\t\\tflag = 6\\n\\t\\tbreak\\nif flag == 6:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ndeg = [0 for i in range(n + 1)]\\nfor i in range(n - 1):\\n\\t(a, b) = [int(j) for j in input().split(' ')]\\n\\tdeg[a] += 1\\n\\tdeg[b] += 1\\nans = 'YES'\\nfor i in range(n + 1):\\n\\tif deg[i] == 2:\\n\\t\\tans = 'NO'\\n\\t\\tbreak\\nprint(ans)\\n\", \"n = int(input())\\nneigh = [[] for _ in range(n)]\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tu -= 1\\n\\tv -= 1\\n\\tneigh[u].append(v)\\n\\tneigh[v].append(u)\\nno = False\\nfor i in range(n):\\n\\tif len(neigh[i]) == 2:\\n\\t\\tno = True\\nif no:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"import sys\\ninput = lambda : sys.stdin.readline().strip()\\nn = int(input())\\ngraph = {}\\nfor i in range(1, n + 1):\\n\\tgraph[i] = []\\nfor i in range(1, n):\\n\\t(a, b) = map(int, input().split())\\n\\tgraph[a].append(b)\\n\\tgraph[b].append(a)\\nfor i in range(1, n + 1):\\n\\tif len(graph[i]) == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\nnode = []\\nfor i in range(1 + n):\\n\\tnode.append([])\\nfor q in range(n - 1):\\n\\tk = list(map(int, input().split()))\\n\\tnode[k[0]].append(k[1])\\n\\tnode[k[1]].append(k[0])\\nhobe = True\\nfor i in range(n + 1):\\n\\tif len(node[i]) == 2:\\n\\t\\thobe = False\\nif hobe:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nfrom math import factorial\\n\\nclass Node:\\n\\n\\tdef __init__(self, num):\\n\\t\\tself.num = num\\n\\t\\tself.binds = []\\n\\t\\tself.marker = False\\n\\t\\tself.val = None\\n\\n\\tdef add_bind(self, oth):\\n\\t\\tself.binds.append(oth)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '<{}: {}{}>'.format(self.num, [i.num for i in self.binds], ', \\\\tval: {}'.format(self.val) if self.val != None else '')\\n\\nclass Graph:\\n\\n\\tdef __init__(self, size):\\n\\t\\tself.size = size\\n\\t\\tself.nodes = [None] + [Node(num) for num in range(1, size + 1)]\\n\\n\\tdef read_input(self):\\n\\t\\tfor _ in range(1, self.size):\\n\\t\\t\\t(i, j) = (int(x) for x in sys.stdin.readline().split())\\n\\t\\t\\tself.nodes[i].add_bind(self.nodes[j])\\n\\t\\t\\tself.nodes[j].add_bind(self.nodes[i])\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '\\\\n'.join((str(node) for node in self.nodes[1:]))\\n\\ndef pairs(n):\\n\\treturn factorial(n) // (factorial(n - 2) * 2)\\nN = int(sys.stdin.readline())\\ng = Graph(N)\\ng.read_input()\\nends = [node for node in g.nodes[1:] if len(node.binds) == 1]\\nfor n in g.nodes[1:]:\\n\\tif len(n.binds) == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\na = [0] * n\\nfor i in range(n - 1):\\n\\t(c, d) = map(int, input().split())\\n\\ta[c - 1] += 1\\n\\ta[d - 1] += 1\\nstat = 2 in a\\nif stat:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import deque\\n\\nclass Graph(object):\\n\\n\\tdef __init__(self, n, d):\\n\\t\\tself.n = n\\n\\t\\tself.graph = [[] for i in range(n)]\\n\\t\\tself.parent = [-1 for i in range(n)]\\n\\t\\tself.directed = d\\n\\n\\tdef addEdge(self, x, y):\\n\\t\\tself.graph[x].append(y)\\n\\t\\tif not self.directed:\\n\\t\\t\\tself.graph[y].append(x)\\n\\n\\tdef bfs(self, root):\\n\\t\\tqueue = [root]\\n\\t\\tqueue = deque(queue)\\n\\t\\tvis = [0] * self.n\\n\\t\\twhile len(queue) != 0:\\n\\t\\t\\telement = queue.popleft()\\n\\t\\t\\tvis[element] = 1\\n\\t\\t\\tcount = 0\\n\\t\\t\\tfor i in self.graph[element]:\\n\\t\\t\\t\\tif vis[i] == 0:\\n\\t\\t\\t\\t\\tqueue.append(i)\\n\\t\\t\\t\\t\\tself.parent[i] = element\\n\\t\\t\\t\\t\\tvis[i] = 1\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\tif count == 1 and element != root:\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n\\n\\tdef dfs(self, root, ans):\\n\\t\\tstack = [root]\\n\\t\\tvis = [0] * self.n\\n\\t\\tstack2 = []\\n\\t\\twhile len(stack) != 0:\\n\\t\\t\\telement = stack.pop()\\n\\t\\t\\tif vis[element]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tvis[element] = 1\\n\\t\\t\\tstack2.append(element)\\n\\t\\t\\tfor i in self.graph[element]:\\n\\t\\t\\t\\tif vis[i] == 0:\\n\\t\\t\\t\\t\\tself.parent[i] = element\\n\\t\\t\\t\\t\\tstack.append(i)\\n\\t\\twhile len(stack2) != 0:\\n\\t\\t\\telement = stack2.pop()\\n\\t\\t\\tm = 0\\n\\t\\t\\tfor i in self.graph[element]:\\n\\t\\t\\t\\tif i != self.parent[element]:\\n\\t\\t\\t\\t\\tm += ans[i]\\n\\t\\t\\tans[element] = m\\n\\t\\treturn ans\\n\\n\\tdef shortestpath(self, source, dest):\\n\\t\\tself.bfs(source)\\n\\t\\tpath = [dest]\\n\\t\\twhile self.parent[path[-1]] != -1:\\n\\t\\t\\tpath.append(parent[path[-1]])\\n\\t\\treturn path[::-1]\\n\\n\\tdef detect_cycle(self):\\n\\t\\tindeg = [0] * self.n\\n\\t\\tfor i in range(self.n):\\n\\t\\t\\tfor j in self.graph[i]:\\n\\t\\t\\t\\tindeg[j] += 1\\n\\t\\tq = deque()\\n\\t\\tvis = 0\\n\\t\\tfor i in range(self.n):\\n\\t\\t\\tif indeg[i] == 0:\\n\\t\\t\\t\\tq.append(i)\\n\\t\\twhile len(q) != 0:\\n\\t\\t\\te = q.popleft()\\n\\t\\t\\tvis += 1\\n\\t\\t\\tfor i in self.graph[e]:\\n\\t\\t\\t\\tindeg[i] -= 1\\n\\t\\t\\t\\tif indeg[i] == 0:\\n\\t\\t\\t\\t\\tq.append(i)\\n\\t\\tif vis != self.n:\\n\\t\\t\\treturn True\\n\\t\\treturn False\\n\\n\\tdef reroot(self, root, ans):\\n\\t\\tstack = [root]\\n\\t\\tvis = [0] * n\\n\\t\\twhile len(stack) != 0:\\n\\t\\t\\te = stack[-1]\\n\\t\\t\\tif vis[e]:\\n\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tvis[e] = 1\\n\\t\\t\\tfor i in graph[e]:\\n\\t\\t\\t\\tif not vis[e]:\\n\\t\\t\\t\\t\\tstack.append(i)\\n\\t\\t\\tif self.parent[e] == -1:\\n\\t\\t\\t\\tcontinue\\nn = int(input())\\ng = Graph(n, False)\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tg.addEdge(u - 1, v - 1)\\nfor i in range(n):\\n\\tif len(g.graph[i]) == 1:\\n\\t\\tleaf = i\\n\\t\\tbreak\\nif not g.bfs(leaf):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ndegree = [0 for i in range(n)]\\nfor i in range(n - 1):\\n\\ta = [int(i) for i in input().split()]\\n\\tx = a[0] - 1\\n\\ty = a[1] - 1\\n\\tdegree[x] += 1\\n\\tdegree[y] += 1\\nflag = 0\\nfor i in range(n):\\n\\tif degree[i] == 2:\\n\\t\\tflag = 1\\n\\t\\tbreak\\nif flag == 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = int(input())\\nar = [0] * n\\nfor i in range(n - 1):\\n\\t(a, b) = map(int, input().split())\\n\\tar[a - 1] += 1\\n\\tar[b - 1] += 1\\nans = 'YES'\\nfor i in range(n):\\n\\tif ar[i] == 2:\\n\\t\\tans = 'NO'\\n\\t\\tbreak\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef getN():\\n\\treturn int(input())\\n\\ndef getList():\\n\\treturn list(map(int, input().split()))\\nfrom sys import exit\\nn = getN()\\nvertex = [[] for i in range(n)]\\nfor i in range(n - 1):\\n\\t(a, b) = getList()\\n\\tvertex[a - 1].append(b - 1)\\n\\tvertex[b - 1].append(a - 1)\\nfor v in vertex:\\n\\tif len(v) == 2:\\n\\t\\tprint('NO')\\n\\t\\texit()\\nprint('YES')\\n\", \"n = int(input())\\nadj = [0 for i in range(n)]\\nfor i in range(n - 1):\\n\\tiarr = list(map(int, input().split()))\\n\\tu = iarr[0] - 1\\n\\tv = iarr[1] - 1\\n\\tadj[u] += 1\\n\\tadj[v] += 1\\nflag = 0\\nfor i in adj:\\n\\tif i == 2:\\n\\t\\tflag = 1\\n\\t\\tbreak\\nif flag == 1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\nd = {}\\n(o, t) = (0, 0)\\nfor _ in range(n - 1):\\n\\t(s, e) = map(int, input().split())\\n\\tif s in d:\\n\\t\\td[s] += 1\\n\\telse:\\n\\t\\td[s] = 1\\n\\tif e in d:\\n\\t\\td[e] += 1\\n\\telse:\\n\\t\\td[e] = 1\\nfor i in d:\\n\\tif d[i] == 1:\\n\\t\\to += 1\\n\\telif d[i] == 2:\\n\\t\\tt += 1\\nif t:\\n\\tprint('NO')\\nelif o * (o - 1) // 2 >= n - 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin\\ninput = stdin.readline\\nn = int(input())\\ndegree = [0 for i in range(n + 1)]\\nfor _ in range(n - 1):\\n\\t(i, j) = [int(i) for i in input().split()]\\n\\tdegree[i] += 1\\n\\tdegree[j] += 1\\nres = False\\nfor i in range(1, n + 1):\\n\\tif degree[i] == 2:\\n\\t\\tres = True\\nif res:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ntree = [[] for i in range(n)]\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\ttree[u - 1].append(v - 1)\\n\\ttree[v - 1].append(u - 1)\\nif n == 2:\\n\\tprint('YES')\\n\\texit()\\nfor i in range(n):\\n\\tif len(tree[i]) == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ng = [[] for _ in range(n)]\\nfor _ in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tg[u - 1].append(v - 1)\\n\\tg[v - 1].append(u - 1)\\nif list(filter(lambda x: len(x) == 2, g)):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\na = []\\nfor i in range(0, n + 9):\\n\\ta.append(0)\\nfor i in range(1, n):\\n\\t(u, v) = map(int, input().split())\\n\\ta[u] = a[u] + 1\\n\\ta[v] = a[v] + 1\\nflag = 1\\nfor i in range(1, n + 1):\\n\\tif a[i] == 2:\\n\\t\\tflag = 0\\nif flag == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"from collections import defaultdict\\ng = defaultdict(set)\\nn = int(input())\\nfor _ in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tg[u].add(v)\\n\\tg[v].add(u)\\n\\ndef solve(n, g):\\n\\tfor i in range(1, n + 1):\\n\\t\\tif len(g[i]) == 1 or len(g[i]) >= 3:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn True\\nsolution = solve(n, g)\\nprint('YES' if solution else 'NO')\\n\", \"from collections import Counter\\nfrom sys import stdin\\nn = int(input())\\nlst = []\\nfor _ in range(n - 1):\\n\\t(a, b) = map(int, stdin.readline().split())\\n\\tlst.append(a)\\n\\tlst.append(b)\\nfg = 0\\nfor (_, i) in Counter(lst).items():\\n\\tif i == 2:\\n\\t\\tfg = 1\\n\\t\\tbreak\\nif fg == 1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\nedges = [0] * (n + 1)\\nisPossible = True\\nfor i in range(n - 1):\\n\\t(a, b) = [int(i) for i in input().split()]\\n\\tedges[a] += 1\\n\\tedges[b] += 1\\nfor d in edges:\\n\\tif d == 2:\\n\\t\\tisPossible = False\\n\\t\\tbreak\\nprint('YES' if isPossible else 'NO')\\n\", \"import sys\\nN = int(input())\\nadj_list = [[] for _ in range(N)]\\nfor _ in range(N - 1):\\n\\t(u, v) = list(map(int, input().split()))\\n\\tu -= 1\\n\\tv -= 1\\n\\tadj_list[u].append(v)\\n\\tadj_list[v].append(u)\\nnum_leaf = 0\\nfor node in range(N):\\n\\tif len(adj_list[node]) == 2:\\n\\t\\tprint('NO')\\n\\t\\tsys.exit(0)\\nprint('YES')\\n\", \"from sys import stdin\\ninput = stdin.readline\\nn = int(input())\\na = [[] for i in range(n)]\\nfor i in range(n - 1):\\n\\t(c, d) = map(int, input().split())\\n\\ta[c - 1].append(d - 1)\\n\\ta[d - 1].append(c - 1)\\nif n == 2:\\n\\tprint('YES')\\nelse:\\n\\tk = 0\\n\\tfor i in a:\\n\\t\\tif len(i) == 2:\\n\\t\\t\\texit(print('NO'))\\n\\tprint('YES')\\n\", \"import sys\\nimport math\\n\\ndef read_line():\\n\\treturn sys.stdin.readline()[:-1]\\n\\ndef read_int():\\n\\treturn int(sys.stdin.readline())\\n\\ndef read_int_line():\\n\\treturn [int(v) for v in sys.stdin.readline().split()]\\n\\ndef read_float_line():\\n\\treturn [float(v) for v in sys.stdin.readline().split()]\\nn = read_int()\\nd = {}\\nfor i in range(n - 1):\\n\\t(u, v) = read_int_line()\\n\\tif u in d:\\n\\t\\td[u] += 1\\n\\telse:\\n\\t\\td[u] = 1\\n\\tif v in d:\\n\\t\\td[v] += 1\\n\\telse:\\n\\t\\td[v] = 1\\nf = False\\nfor i in d:\\n\\tif d[i] == 2:\\n\\t\\tf = True\\nif f:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"def ii():\\n\\treturn int(input())\\n\\ndef ss():\\n\\treturn [x for x in input()]\\n\\ndef si():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef mi():\\n\\treturn map(int, input().split())\\na = ii()\\ns = [0 for i in range(a)]\\nfor i in range(a - 1):\\n\\t(c, d) = [int(x) - 1 for x in input().split()]\\n\\ts[c] += 1\\n\\ts[d] += 1\\nif 2 in s:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import deque\\nn = int(input())\\nif n == 2:\\n\\tprint('YES')\\n\\texit()\\nif n == 3:\\n\\tprint('NO')\\n\\texit()\\nEdges = [[] for _ in range(n)]\\nfor _ in range(n - 1):\\n\\t(u, v) = map(lambda x: int(x) - 1, input().split())\\n\\tEdges[u].append(v)\\n\\tEdges[v].append(u)\\nfor (i, E) in enumerate(Edges):\\n\\tif len(E) >= 3:\\n\\t\\troot = i\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\\texit()\\nChi = [[] for _ in range(n)]\\nPar = [0] * n\\nq = deque()\\nq.append(root)\\nUsed = [False] * n\\nUsed[root] = True\\nwhile q:\\n\\tv = q.popleft()\\n\\tfor c in Edges[v]:\\n\\t\\tif Used[c]:\\n\\t\\t\\tcontinue\\n\\t\\tChi[v].append(c)\\n\\t\\tPar[c] = v\\n\\t\\tUsed[c] = True\\n\\t\\tq.append(c)\\nLeaf = []\\nfor (v, l) in enumerate(Chi):\\n\\tif not l:\\n\\t\\tLeaf.append(v)\\nfor l in Leaf:\\n\\twhile True:\\n\\t\\tp = Par[l]\\n\\t\\tif p == root:\\n\\t\\t\\tbreak\\n\\t\\tif len(Chi[p]) == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\texit()\\n\\t\\tl = p\\nprint('YES')\\n\", \"n = int(input())\\nnodes = [[] for _ in range(n)]\\nedges = []\\nfor _ in range(n - 1):\\n\\t(u, v) = sorted(map(int, input().split(' ')))\\n\\tu -= 1\\n\\tv -= 1\\n\\tnodes[u].append(v)\\n\\tnodes[v].append(u)\\n\\tedge = [u, v]\\n\\tedges.append(edge)\\nleaf_nodes = [node for node in nodes if len(node) == 1]\\nnum_ads = [len(node) for node in nodes]\\nif 2 in num_ads:\\n\\tout = 'NO'\\nelse:\\n\\tout = 'YES'\\nprint(out)\\n\", \"from collections import defaultdict\\nn = int(input())\\nhash = defaultdict(list)\\nfor i in range(n - 1):\\n\\t(a, b) = map(int, input().split())\\n\\thash[a].append(b)\\n\\thash[b].append(a)\\nflag = 1\\nfor i in hash.keys():\\n\\tif len(hash[i]) == 2:\\n\\t\\tflag = 0\\n\\t\\tbreak\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = [list(map(int, input().split())) for i in range(n - 1)]\\ntree = [[] for i in range(n)]\\nfor i in range(n - 1):\\n\\ttree[a[i][0] - 1].append(a[i][1] - 1)\\n\\ttree[a[i][1] - 1].append(a[i][0] - 1)\\nfor i in range(n):\\n\\tif len(tree[i]) == 2:\\n\\t\\tprint('NO')\\n\\t\\texit()\\nprint('YES')\\n\", \"import sys\\nnum = int(input())\\ndeg = [0] * (num + 1)\\nfor _ in range(1, num):\\n\\t(a, b) = [int(i) for i in input().split()]\\n\\tdeg[a] += 1\\n\\tdeg[b] += 1\\nfor i in range(1, num + 1):\\n\\tif deg[i] == 2:\\n\\t\\tprint('NO')\\n\\t\\tsys.exit()\\nprint('YES')\\n\", \"import sys\\nfrom collections import deque\\ninput = sys.stdin.readline\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef mi():\\n\\treturn map(int, input().rstrip().split())\\n\\ndef lmi():\\n\\treturn list(map(int, input().rstrip().split()))\\n\\ndef li():\\n\\treturn list(input().rstrip())\\n\\nclass Graph:\\n\\n\\tdef __init__(self, n, Weighted=False, Directed=True, Matrix=False):\\n\\t\\tself.sz = n\\n\\t\\tself.is_Weighted = Weighted\\n\\t\\tself.is_Directed = Directed\\n\\t\\tself.is_Matrix = Matrix\\n\\t\\tif Matrix:\\n\\t\\t\\tif Weighted:\\n\\t\\t\\t\\tself.graph = [[0 for _i in range(n)] for _j in range(n)]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself.graph = [[0 for _i in range(n)] for _j in range(n)]\\n\\t\\telse:\\n\\t\\t\\tself.graph = [[] for _i in range(n)]\\n\\n\\tdef _weighted_add_edge(self, x, y, w):\\n\\t\\tif self.is_Matrix:\\n\\t\\t\\tself.graph[x][y] = w\\n\\t\\telse:\\n\\t\\t\\tself.graph[x].append((y, w))\\n\\n\\tdef _unweighted_add_edge(self, x, y):\\n\\t\\tif self.is_Matrix:\\n\\t\\t\\tself.graph[x][y] = 1\\n\\t\\telse:\\n\\t\\t\\tself.graph[x].append(y)\\n\\n\\tdef add_edge(self, x, y, *w):\\n\\t\\tif self.is_Directed:\\n\\t\\t\\tif self.is_Weighted:\\n\\t\\t\\t\\tself._weighted_add_edge(x, y, w[0])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself._unweighted_add_edge(x, y)\\n\\t\\telif self.is_Weighted:\\n\\t\\t\\tself._weighted_add_edge(x, y, w[0])\\n\\t\\t\\tself._weighted_add_edge(y, x, w[0])\\n\\t\\telse:\\n\\t\\t\\tself._unweighted_add_edge(x, y)\\n\\t\\t\\tself._unweighted_add_edge(y, x)\\n\\n\\tdef _convert_to_maxrix(self):\\n\\t\\tif self.is_Matrix:\\n\\t\\t\\treturn self\\n\\t\\tmat_g = self.__class__(self.sz, Weighted=self.is_Weighted, Directed=self.is_Directed, Matrix=True)\\n\\t\\tif self.is_Weighted:\\n\\t\\t\\tfor i in range(self.sz):\\n\\t\\t\\t\\tfor j in self.graph[i]:\\n\\t\\t\\t\\t\\tmat_g.add_edge(i, j[0], j[1])\\n\\t\\telse:\\n\\t\\t\\tfor i in range(self.sz):\\n\\t\\t\\t\\tfor j in self.graph[i]:\\n\\t\\t\\t\\t\\tmat_g.add_edge(i, j)\\n\\t\\treturn mat_g\\n\\n\\tdef __getitem__(self, n):\\n\\t\\treturn self.graph[n]\\n\\n\\tdef __str__(self):\\n\\t\\treturn str([self.graph[i] for i in range(self.sz)])\\n\\ndef main():\\n\\tn = ii()\\n\\tg = Graph(n, Directed=False)\\n\\tfor i in range(n - 1):\\n\\t\\t(s, t) = mi()\\n\\t\\tg.add_edge(s - 1, t - 1)\\n\\tfor i in range(n):\\n\\t\\tif len(g[i]) == 2:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\n\\tprint('NO')\\nmain()\\n\", \"from collections import defaultdict\\nn = int(input())\\ntr = defaultdict(int)\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\ttr[u] += 1\\n\\ttr[v] += 1\\nfor i in tr:\\n\\tif tr[i] == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"from collections import defaultdict, deque\\nimport sys, heapq, bisect, math, itertools, string, queue, copy, time\\nsys.setrecursionlimit(10 ** 8)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\neps = 10 ** (-7)\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inpl():\\n\\treturn list(map(int, input().split()))\\n\\ndef inpl_str():\\n\\treturn list(input().split())\\nN = inp()\\ncnt = [0] * N\\nfor _ in range(N - 1):\\n\\t(x, y) = inpl()\\n\\tcnt[x - 1] += 1\\n\\tcnt[y - 1] += 1\\nfor c in cnt:\\n\\tif c == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ng = {}\\np = {}\\npath = {}\\nflg = True\\nfor _ in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tif u not in g:\\n\\t\\tg[u] = []\\n\\tg[u].append(v)\\n\\tif v not in g:\\n\\t\\tg[v] = []\\n\\tg[v].append(u)\\nflg = 'YES'\\nfor x in g:\\n\\tif len(g[x]) == 1:\\n\\t\\tcontinue\\n\\tif len(g[x]) == 2:\\n\\t\\tflg = 'NO'\\n\\t\\tbreak\\nprint(flg)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef list3d(a, b, c, d):\\n\\treturn [[[d] * c for j in range(b)] for i in range(a)]\\n\\ndef list4d(a, b, c, d, e):\\n\\treturn [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\n\\ndef ceil(x, y=1):\\n\\treturn int(-(-x // y))\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\nimport threading\\nthreading.stack_size(10 ** 8)\\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\\nri = lambda : sys.stdin.readline().strip()\\n\\ndef solve():\\n\\tn = int(ri())\\n\\tg = [[] for i in range(n)]\\n\\tfor i in range(n - 1):\\n\\t\\t(a, b) = Ri()\\n\\t\\ta -= 1\\n\\t\\tb -= 1\\n\\t\\tg[a].append(b)\\n\\t\\tg[b].append(a)\\n\\tflag = [True]\\n\\n\\tdef dfs1(cur, par):\\n\\t\\tif len(g[cur]) == 2:\\n\\t\\t\\tflag[0] = False\\n\\t\\t\\treturn\\n\\t\\tfor child in g[cur]:\\n\\t\\t\\tif child == par:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tdfs1(child, cur)\\n\\t\\treturn\\n\\tdfs1(0, -1)\\n\\tif flag[0]:\\n\\t\\tYES()\\n\\telse:\\n\\t\\tNO()\\nthreading.Thread(target=solve).start()\\n\", \"n = int(input())\\ndeg = [0] * n\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tdeg[u - 1] += 1\\n\\tdeg[v - 1] += 1\\nif all((i != 2 for i in deg)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from math import log2\\nfrom collections import defaultdict\\nimport sys\\ninput = sys.stdin.readline\\ninf = 100000000000000000\\nmod = 998244353\\nn = int(input())\\nA = defaultdict(list)\\nru = [0] * n\\nfor i in range(n - 1):\\n\\t(x, y) = map(int, input().split())\\n\\tx -= 1\\n\\ty -= 1\\n\\tA[x].append(y)\\n\\tA[y].append(x)\\n\\tru[x] += 1\\n\\tru[y] += 1\\nnum = 0\\nflag = 1\\nfor i in range(n):\\n\\tif ru[i] == 2:\\n\\t\\tflag = 0\\nif flag == 1:\\n\\tprint('yes')\\nelse:\\n\\tprint('no')\\n\", \"n = int(input())\\ng = [[] for i in range(n)]\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\tu -= 1\\n\\tv -= 1\\n\\tg[u].append(v)\\n\\tg[v].append(u)\\nfor v in range(n):\\n\\tif len(g[v]) == 2:\\n\\t\\tprint('NO')\\n\\t\\texit(0)\\nprint('YES')\\n\", \"a = int(input())\\nA = [0] * a\\nk = 0\\nfor i in range(a - 1):\\n\\t(q, w) = map(int, input().split())\\n\\tA[q - 1] += 1\\n\\tif A[q - 1] == 2:\\n\\t\\tk += 1\\n\\telif A[q - 1] == 3:\\n\\t\\tk -= 1\\n\\tA[w - 1] += 1\\n\\tif A[w - 1] == 2:\\n\\t\\tk += 1\\n\\telif A[w - 1] == 3:\\n\\t\\tk -= 1\\nif k == 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = int(input())\\ndep = []\\nfor i in range(n):\\n\\tdep.append(0)\\nfor i in range(n - 1):\\n\\t(a, b) = input().split(' ')\\n\\ta = int(a)\\n\\tb = int(b)\\n\\tdep[a - 1] = dep[a - 1] + 1\\n\\tdep[b - 1] = dep[b - 1] + 1\\ngood = 1\\nfor i in range(n):\\n\\tif dep[i] == 2:\\n\\t\\tgood = 0\\nif good == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef main():\\n\\tn = int(input())\\n\\td = [[] for _ in range(n)]\\n\\tfor i in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tu -= 1\\n\\t\\tv -= 1\\n\\t\\td[u].append(v)\\n\\t\\td[v].append(u)\\n\\tfor i in range(n):\\n\\t\\tif len(d[i]) == 2:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\texit()\\n\\telse:\\n\\t\\tprint('YES')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"n = int(input())\\ntree = {}\\nfor i in range(n - 1):\\n\\t(a, b) = [int(x) for x in input().split()]\\n\\tif a not in tree:\\n\\t\\ttree[a] = 1\\n\\telse:\\n\\t\\ttree[a] += 1\\n\\tif b not in tree:\\n\\t\\ttree[b] = 1\\n\\telse:\\n\\t\\ttree[b] += 1\\nfor item in tree:\\n\\tif tree[item] == 2:\\n\\t\\tprint('NO')\\n\\t\\tbreak\\nelse:\\n\\tprint('YES')\\n\", \"from collections import defaultdict, deque, Counter\\nfrom sys import stdin, stdout\\nfrom heapq import heappush, heappop\\nimport math\\nimport io\\nimport os\\nimport math\\nimport bisect\\n\\ndef isPrime(x):\\n\\tfor i in range(2, x):\\n\\t\\tif i * i > x:\\n\\t\\t\\tbreak\\n\\t\\tif x % i == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef ncr(n, r, p):\\n\\tnum = den = 1\\n\\tfor i in range(r):\\n\\t\\tnum = num * (n - i) % p\\n\\t\\tden = den * (i + 1) % p\\n\\treturn num * pow(den, p - 2, p) % p\\n\\ndef primeFactors(n):\\n\\tl = []\\n\\twhile n % 2 == 0:\\n\\t\\tl.append(2)\\n\\t\\tn = n / 2\\n\\tfor i in range(3, int(math.sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tl.append(int(i))\\n\\t\\t\\tn = n / i\\n\\tif n > 2:\\n\\t\\tl.append(n)\\n\\treturn list(set(l))\\n\\ndef power(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef sieve(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\treturn prime\\n\\ndef digits(n):\\n\\tc = 0\\n\\twhile n > 0:\\n\\t\\tn //= 10\\n\\t\\tc += 1\\n\\treturn c\\n\\ndef ceil(n, x):\\n\\tif n % x == 0:\\n\\t\\treturn n // x\\n\\treturn n // x + 1\\n\\ndef mapin():\\n\\treturn map(int, input().split())\\nn = int(input())\\nd = [0] * n\\nfor _ in range(n - 1):\\n\\t(u, v) = mapin()\\n\\td[u - 1] += 1\\n\\td[v - 1] += 1\\nif d.count(2) == 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = int(input())\\narr = [0] * n\\nfor i in range(0, n - 1):\\n\\t(x, y) = map(int, input().split())\\n\\tarr[x - 1] += 1\\n\\tarr[y - 1] += 1\\nfor i in range(0, n):\\n\\tif arr[i] == 2:\\n\\t\\tprint('NO')\\n\\t\\texit()\\nprint('YES')\\n\", \"import sys\\nn = int(sys.stdin.readline().strip())\\nd = [0] * n\\nfor i in range(0, n - 1):\\n\\t(u, v) = sys.stdin.readline().strip().split()\\n\\t(u, v) = (int(u) - 1, int(v) - 1)\\n\\td[u] = d[u] + 1\\n\\td[v] = d[v] + 1\\nif 2 in d:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"n = int(input())\\ntr = [0] * (n + 1)\\nfor i in range(n - 1):\\n\\t(u, v) = map(int, input().split())\\n\\ttr[u] += 1\\n\\ttr[v] += 1\\nfor i in range(1, n + 1):\\n\\tif tr[i] == 2:\\n\\t\\tprint('No')\\n\\t\\tbreak\\nelse:\\n\\tprint('Yes')\\n\", \"n = int(input())\\narr = [0] * n\\nfor i in range(0, n - 1):\\n\\tl = [int(j) for j in input().split(' ')]\\n\\tarr[l[0] - 1] += 1\\n\\tarr[l[1] - 1] += 1\\nprint(['YES', 'NO'][2 in arr])\\n\", \"def add(x):\\n\\tglobal d, d2\\n\\tif x not in d:\\n\\t\\td[x] = 0\\n\\td[x] += 1\\n\\tif d[x] == 2:\\n\\t\\td2[x] = a\\n\\tif d[x] == 3:\\n\\t\\tdel d2[x]\\nimport sys\\nn = int(sys.stdin.readline())\\nd = {}\\nd2 = {}\\nfor _ in range(n - 1):\\n\\t(a, b) = map(int, sys.stdin.readline().split())\\n\\tadd(a)\\n\\tadd(b)\\nres = 'YES'\\nfor k in d2:\\n\\tres = 'NO'\\n\\tbreak\\nprint(res)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"50\\n16 4\\n17 9\\n31 19\\n22 10\\n8 1\\n40 30\\n3 31\\n20 29\\n47 27\\n22 25\\n32 34\\n12 15\\n40 32\\n10 33\\n47 12\\n6 24\\n46 41\\n14 23\\n12 35\\n31 42\\n46 28\\n31 20\\n46 37\\n1 39\\n29 49\\n37 47\\n40 6\\n42 36\\n47 2\\n24 46\\n2 13\\n8 45\\n41 3\\n32 17\\n4 7\\n47 26\\n28 8\\n41 50\\n34 44\\n33 21\\n25 5\\n16 40\\n3 14\\n8 18\\n28 11\\n32 22\\n2 38\\n3 48\\n44 43\\n\", \"10\\n8 1\\n1 2\\n8 9\\n8 5\\n1 3\\n1 10\\n1 6\\n1 7\\n8 4\\n\", \"5\\n5 1\\n5 4\\n4 3\\n1 2\\n\", \"7\\n1 2\\n2 3\\n1 4\\n1 5\\n3 6\\n3 7\\n\", \"3\\n1 3\\n2 3\\n\", \"60\\n26 6\\n59 30\\n31 12\\n31 3\\n38 23\\n59 29\\n53 9\\n38 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n30 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n26 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"7\\n1 2\\n2 3\\n3 4\\n3 5\\n1 6\\n1 7\\n\", \"20\\n19 16\\n19 18\\n20 7\\n9 4\\n6 17\\n14 2\\n9 15\\n2 13\\n5 11\\n19 12\\n12 20\\n16 9\\n11 8\\n19 5\\n3 1\\n19 14\\n5 3\\n12 10\\n19 6\\n\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\", \"10\\n9 5\\n7 1\\n9 10\\n7 2\\n5 4\\n9 6\\n2 9\\n10 8\\n1 3\\n\", \"4\\n2 4\\n2 3\\n2 1\\n\", \"4\\n1 4\\n3 2\\n1 3\\n\", \"3\\n1 2\\n1 3\\n\", \"5\\n1 2\\n1 5\\n1 3\\n1 4\\n\", \"20\\n14 9\\n12 13\\n10 15\\n2 1\\n20 19\\n16 6\\n16 3\\n17 14\\n3 5\\n2 11\\n3 10\\n15 8\\n14 2\\n6 4\\n3 20\\n5 18\\n1 7\\n1 16\\n4 12\\n\", \"20\\n7 5\\n14 13\\n17 6\\n3 8\\n16 12\\n18 9\\n3 18\\n14 1\\n17 3\\n15 2\\n17 4\\n9 11\\n2 7\\n15 17\\n3 20\\n16 10\\n17 14\\n2 16\\n1 19\\n\", \"8\\n1 2\\n2 3\\n3 4\\n1 7\\n1 8\\n4 5\\n4 6\\n\", \"5\\n5 1\\n5 2\\n5 3\\n5 4\\n\", \"50\\n49 6\\n43 7\\n1 27\\n19 35\\n15 37\\n16 12\\n19 21\\n16 28\\n49 9\\n48 39\\n13 1\\n2 48\\n9 50\\n44 3\\n41 32\\n48 31\\n49 33\\n6 11\\n13 20\\n49 22\\n13 41\\n48 29\\n13 46\\n15 47\\n34 2\\n49 13\\n48 14\\n34 24\\n16 36\\n13 40\\n49 34\\n49 17\\n43 25\\n11 23\\n10 15\\n19 26\\n34 44\\n16 42\\n19 18\\n46 8\\n29 38\\n1 45\\n12 43\\n13 16\\n46 30\\n15 5\\n49 10\\n11 19\\n32 4\\n\", \"20\\n13 1\\n18 2\\n3 7\\n18 5\\n20 16\\n3 12\\n18 9\\n3 10\\n18 11\\n13 6\\n3 18\\n20 15\\n20 17\\n3 13\\n3 4\\n13 14\\n3 20\\n18 8\\n3 19\\n\", \"10\\n8 2\\n5 6\\n1 8\\n2 9\\n1 4\\n8 10\\n10 5\\n2 7\\n2 3\\n\", \"50\\n16 4\\n17 9\\n31 19\\n3 10\\n8 1\\n40 30\\n3 31\\n20 29\\n47 27\\n22 25\\n32 34\\n12 15\\n40 32\\n10 33\\n47 12\\n6 24\\n46 41\\n14 23\\n12 35\\n31 42\\n46 28\\n31 20\\n46 37\\n1 39\\n29 49\\n37 47\\n40 6\\n42 36\\n47 2\\n24 46\\n2 13\\n8 45\\n41 3\\n32 17\\n4 7\\n47 26\\n28 8\\n41 50\\n34 44\\n33 21\\n25 5\\n16 40\\n3 14\\n8 18\\n28 11\\n32 22\\n2 38\\n3 48\\n44 43\\n\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n1 6\\n2 7\\n\", \"5\\n5 1\\n5 4\\n4 3\\n2 2\\n\", \"60\\n26 6\\n59 30\\n31 12\\n31 3\\n38 23\\n59 29\\n53 9\\n38 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n26 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"7\\n1 2\\n2 4\\n3 4\\n3 5\\n1 6\\n1 7\\n\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n1 6\\n3 7\\n\", \"10\\n9 5\\n4 1\\n9 10\\n7 2\\n5 4\\n9 6\\n2 9\\n10 8\\n1 3\\n\", \"4\\n3 4\\n2 3\\n2 1\\n\", \"6\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n\", \"60\\n26 6\\n59 30\\n31 12\\n31 3\\n38 23\\n59 29\\n53 9\\n38 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n49 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"10\\n9 5\\n4 1\\n9 10\\n7 1\\n5 4\\n9 6\\n2 9\\n10 8\\n1 3\\n\", \"6\\n1 2\\n1 3\\n2 4\\n4 5\\n2 6\\n\", \"60\\n26 6\\n59 30\\n31 12\\n31 3\\n38 23\\n59 29\\n53 9\\n59 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n49 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"7\\n1 2\\n1 3\\n2 4\\n3 5\\n1 6\\n2 7\\n\", \"6\\n1 2\\n1 3\\n2 4\\n4 5\\n1 6\\n\", \"60\\n26 6\\n59 30\\n31 12\\n32 3\\n38 23\\n59 29\\n53 9\\n59 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n49 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"7\\n1 2\\n1 1\\n2 4\\n3 5\\n1 6\\n2 7\\n\", \"10\\n8 1\\n1 2\\n8 9\\n8 5\\n1 3\\n2 10\\n1 6\\n1 7\\n8 4\\n\", \"20\\n19 16\\n19 18\\n20 7\\n9 4\\n6 17\\n14 2\\n9 15\\n2 13\\n5 11\\n19 12\\n12 20\\n16 9\\n11 8\\n19 5\\n3 1\\n19 14\\n5 3\\n18 10\\n19 6\\n\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n4 6\\n3 7\\n\", \"4\\n4 4\\n2 3\\n2 1\\n\", \"4\\n1 4\\n2 2\\n1 3\\n\", \"20\\n14 9\\n12 13\\n10 15\\n2 1\\n20 19\\n16 6\\n16 3\\n17 8\\n3 5\\n2 11\\n3 10\\n15 8\\n14 2\\n6 4\\n3 20\\n5 18\\n1 7\\n1 16\\n4 12\\n\", \"20\\n7 5\\n14 13\\n17 6\\n3 8\\n16 12\\n18 9\\n3 18\\n14 1\\n17 3\\n15 2\\n17 4\\n2 11\\n2 7\\n15 17\\n3 20\\n16 10\\n17 14\\n2 16\\n1 19\\n\", \"50\\n49 6\\n43 7\\n1 27\\n19 35\\n15 37\\n16 12\\n19 21\\n16 28\\n49 9\\n48 39\\n13 1\\n2 48\\n9 50\\n44 3\\n41 32\\n48 31\\n49 33\\n6 11\\n13 20\\n49 22\\n13 41\\n48 29\\n13 46\\n15 47\\n34 2\\n49 13\\n48 14\\n34 24\\n16 36\\n13 40\\n49 34\\n49 17\\n43 25\\n19 23\\n10 15\\n19 26\\n34 44\\n16 42\\n19 18\\n46 8\\n29 38\\n1 45\\n12 43\\n13 16\\n46 30\\n15 5\\n49 10\\n11 19\\n32 4\\n\", \"10\\n1 2\\n5 6\\n1 8\\n2 9\\n1 4\\n8 10\\n10 5\\n2 7\\n2 3\\n\", \"5\\n1 3\\n1 3\\n1 4\\n4 5\\n\", \"50\\n16 4\\n17 9\\n31 19\\n3 10\\n8 1\\n40 30\\n3 31\\n20 29\\n47 27\\n22 25\\n32 34\\n12 15\\n40 32\\n20 33\\n47 12\\n6 24\\n46 41\\n14 23\\n12 35\\n31 42\\n46 28\\n31 20\\n46 37\\n1 39\\n29 49\\n37 47\\n40 6\\n42 36\\n47 2\\n24 46\\n2 13\\n8 45\\n41 3\\n32 17\\n4 7\\n47 26\\n28 8\\n41 50\\n34 44\\n33 21\\n25 5\\n16 40\\n3 14\\n8 18\\n28 11\\n32 22\\n2 38\\n3 48\\n44 43\\n\", \"5\\n5 1\\n5 4\\n4 3\\n2 3\\n\", \"60\\n26 6\\n59 30\\n31 12\\n31 3\\n38 23\\n55 29\\n53 9\\n38 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n26 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n1 6\\n1 7\\n\", \"6\\n1 2\\n1 3\\n2 4\\n4 2\\n2 6\\n\", \"60\\n26 6\\n59 30\\n31 12\\n32 3\\n38 23\\n59 29\\n53 9\\n59 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n49 46\\n17 33\\n30 31\\n30 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"7\\n1 2\\n1 1\\n3 4\\n3 5\\n1 6\\n2 7\\n\", \"10\\n8 2\\n1 2\\n8 9\\n8 5\\n1 3\\n2 10\\n1 6\\n1 7\\n8 4\\n\", \"4\\n1 4\\n2 2\\n1 4\\n\", \"20\\n14 9\\n12 13\\n10 15\\n2 1\\n20 19\\n16 6\\n16 3\\n17 8\\n3 5\\n2 11\\n3 10\\n2 8\\n14 2\\n6 4\\n3 20\\n5 18\\n1 7\\n1 16\\n4 12\\n\", \"20\\n7 5\\n14 14\\n17 6\\n3 8\\n16 12\\n18 9\\n3 18\\n14 1\\n17 3\\n15 2\\n17 4\\n2 11\\n2 7\\n15 17\\n3 20\\n16 10\\n17 14\\n2 16\\n1 19\\n\", \"50\\n49 6\\n43 7\\n1 27\\n19 35\\n15 37\\n16 12\\n19 21\\n16 28\\n49 9\\n48 39\\n13 1\\n2 48\\n9 50\\n44 3\\n41 32\\n48 31\\n49 33\\n6 11\\n13 20\\n49 22\\n13 41\\n48 29\\n13 46\\n15 47\\n34 2\\n49 13\\n48 14\\n34 24\\n16 36\\n23 40\\n49 34\\n49 17\\n43 25\\n19 23\\n10 15\\n19 26\\n34 44\\n16 42\\n19 18\\n46 8\\n29 38\\n1 45\\n12 43\\n13 16\\n46 30\\n15 5\\n49 10\\n11 19\\n32 4\\n\", \"5\\n1 2\\n1 3\\n1 4\\n4 5\\n\", \"6\\n1 2\\n1 3\\n2 4\\n4 2\\n1 6\\n\", \"10\\n8 2\\n1 4\\n8 9\\n8 5\\n1 3\\n2 10\\n1 6\\n1 7\\n8 4\\n\", \"4\\n1 4\\n2 2\\n2 4\\n\", \"20\\n14 9\\n8 13\\n10 15\\n2 1\\n20 19\\n16 6\\n16 3\\n17 8\\n3 5\\n2 11\\n3 10\\n2 8\\n14 2\\n6 4\\n3 20\\n5 18\\n1 7\\n1 16\\n4 12\\n\", \"20\\n7 5\\n14 14\\n17 6\\n3 8\\n16 12\\n18 9\\n3 18\\n14 1\\n11 3\\n15 2\\n17 4\\n2 11\\n2 7\\n15 17\\n3 20\\n16 10\\n17 14\\n2 16\\n1 19\\n\", \"50\\n49 6\\n43 7\\n1 27\\n19 35\\n15 37\\n16 12\\n19 21\\n16 28\\n49 17\\n48 39\\n13 1\\n2 48\\n9 50\\n44 3\\n41 32\\n48 31\\n49 33\\n6 11\\n13 20\\n49 22\\n13 41\\n48 29\\n13 46\\n15 47\\n34 2\\n49 13\\n48 14\\n34 24\\n16 36\\n23 40\\n49 34\\n49 17\\n43 25\\n19 23\\n10 15\\n19 26\\n34 44\\n16 42\\n19 18\\n46 8\\n29 38\\n1 45\\n12 43\\n13 16\\n46 30\\n15 5\\n49 10\\n11 19\\n32 4\\n\", \"5\\n1 1\\n1 3\\n1 4\\n4 5\\n\", \"10\\n8 1\\n1 2\\n8 9\\n7 5\\n1 3\\n1 10\\n1 6\\n1 7\\n8 4\\n\", \"7\\n1 2\\n3 3\\n1 4\\n1 5\\n3 6\\n3 7\\n\", \"7\\n1 2\\n2 3\\n3 5\\n3 5\\n1 6\\n1 7\\n\", \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\", \"10\\n9 5\\n7 1\\n9 10\\n7 2\\n9 4\\n9 6\\n2 9\\n10 8\\n1 3\\n\", \"5\\n1 2\\n1 5\\n2 3\\n1 4\\n\", \"8\\n1 2\\n2 3\\n3 4\\n1 7\\n1 8\\n4 5\\n2 6\\n\", \"50\\n49 6\\n43 7\\n1 27\\n19 35\\n15 37\\n16 12\\n19 21\\n16 28\\n49 9\\n48 39\\n13 1\\n2 48\\n9 50\\n44 3\\n41 32\\n48 31\\n49 33\\n6 11\\n13 20\\n49 22\\n13 41\\n1 29\\n13 46\\n15 47\\n34 2\\n49 13\\n48 14\\n34 24\\n16 36\\n13 40\\n49 34\\n49 17\\n43 25\\n11 23\\n10 15\\n19 26\\n34 44\\n16 42\\n19 18\\n46 8\\n29 38\\n1 45\\n12 43\\n13 16\\n46 30\\n15 5\\n49 10\\n11 19\\n32 4\\n\", \"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\", \"5\\n5 1\\n5 4\\n4 2\\n2 2\\n\", \"7\\n1 2\\n2 4\\n3 4\\n5 5\\n1 6\\n1 7\\n\", \"7\\n1 2\\n1 3\\n2 1\\n2 5\\n1 6\\n3 7\\n\", \"6\\n1 2\\n2 3\\n2 4\\n4 5\\n2 6\\n\", \"6\\n1 4\\n1 3\\n2 4\\n4 5\\n1 6\\n\", \"10\\n8 1\\n1 2\\n8 9\\n8 5\\n1 3\\n3 10\\n1 6\\n1 7\\n8 4\\n\", \"10\\n1 2\\n5 6\\n1 8\\n2 9\\n1 4\\n8 10\\n10 5\\n2 7\\n3 3\\n\", \"5\\n5 1\\n1 4\\n4 3\\n2 3\\n\", \"60\\n26 6\\n59 30\\n31 12\\n31 3\\n38 23\\n55 29\\n53 9\\n38 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n47 10\\n53 60\\n10 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n26 46\\n17 33\\n30 31\\n26 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"60\\n26 6\\n59 30\\n31 12\\n32 3\\n38 23\\n59 29\\n53 9\\n59 56\\n53 54\\n29 21\\n17 55\\n59 38\\n26 16\\n24 59\\n24 25\\n17 35\\n24 41\\n30 15\\n31 27\\n8 44\\n26 5\\n26 48\\n8 32\\n53 17\\n3 34\\n3 51\\n20 28\\n52 10\\n53 60\\n36 42\\n24 53\\n59 22\\n53 40\\n26 52\\n36 4\\n59 8\\n29 37\\n36 20\\n17 47\\n53 18\\n3 50\\n30 2\\n17 7\\n8 58\\n59 1\\n31 11\\n24 26\\n24 43\\n53 57\\n59 45\\n47 13\\n49 46\\n17 33\\n30 31\\n30 39\\n26 19\\n24 36\\n8 49\\n38 14\\n\", \"10\\n8 2\\n1 2\\n8 9\\n8 5\\n1 3\\n2 10\\n1 6\\n2 7\\n8 4\\n\", \"20\\n14 9\\n12 13\\n10 15\\n2 1\\n20 19\\n2 6\\n16 3\\n17 8\\n3 5\\n2 11\\n3 10\\n2 8\\n14 2\\n6 4\\n3 20\\n5 18\\n1 7\\n1 16\\n4 12\\n\", \"20\\n7 5\\n14 14\\n17 6\\n3 8\\n16 12\\n18 9\\n3 18\\n14 1\\n17 3\\n15 2\\n17 4\\n2 11\\n2 7\\n15 17\\n3 17\\n16 10\\n17 14\\n2 16\\n1 19\\n\", \"2\\n1 2\\n\", \"3\\n1 2\\n2 3\\n\", \"5\\n1 2\\n1 3\\n1 4\\n2 5\\n\", \"6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n\"], \"outputs\": [\"NO\", \"YES\", \"NO\", \"NO\", \"NO\", \"YES\", \"NO\", \"NO\", \"NO\", \"NO\", \"YES\", \"NO\", \"NO\", \"YES\", \"NO\", \"NO\", \"NO\", \"YES\", \"NO\", \"YES\", \"NO\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"YES\", \"NO\", \"NO\", \"YES\"]}",
    "difficulty": "MEDIUM_HARD",
    "raw_tags": "['trees']",
    "name": null,
    "source": "codeforces",
    "tags": "['Tree algorithms']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/1189/D1",
    "Expected Auxiliary Space": null,
    "time_limit": "1.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "You are given an integer array nums that may contain duplicates. Your task is to return all possible subsets. Return only unique subsets and they can be in any order.\nExample: \nInput: \nnums = [1,2,2] \nOutput: \n[[],[1],[1,2],[1,2,2],[2],[2,2]]\nExplanation: \nWe can have subsets ranging from length 0 to 3. which are listed above. Also the subset [1,2] appears twice but is printed only once as we require only unique subsets.\nYour Task:\nComplete the function vector> printUniqueSubset(), which takes  a vector nums and return a vector of vector consisting of all unique subsets.\nExpected Time Complexity: O(K2^{N}).\nExpected Auxiliary Space: O(K2^{N}).\nConstraints:\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10",
    "solutions": "[\"class Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tn = len(nums)\\n\\t\\tnums.sort()\\n\\t\\tans = []\\n\\n\\t\\tdef solve(i, temp):\\n\\t\\t\\tans.append(temp[:])\\n\\t\\t\\tfor j in range(i, n):\\n\\t\\t\\t\\tif j > i and nums[j] == nums[j - 1]:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\ttemp.append(nums[j])\\n\\t\\t\\t\\tsolve(j + 1, temp)\\n\\t\\t\\t\\ttemp.pop()\\n\\t\\tsolve(0, [])\\n\\t\\treturn ans\\n\", \"def subset2(arr, n, ans, ind, subs):\\n\\tif ind == n:\\n\\t\\treturn\\n\\tsubs.append(arr[ind])\\n\\tans.append(subs[:])\\n\\tsubset2(arr, n, ans, ind + 1, subs)\\n\\tsubs.pop()\\n\\tfor i in range(ind + 1, n):\\n\\t\\tif arr[i] == arr[i - 1]:\\n\\t\\t\\tcontinue\\n\\t\\tsubs.append(arr[i])\\n\\t\\tans.append(subs[:])\\n\\t\\tsubset2(arr, n, ans, i + 1, subs)\\n\\t\\tsubs.pop()\\n\\nclass Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tnums.sort()\\n\\t\\tn = len(nums)\\n\\t\\tans = []\\n\\t\\tsubs = []\\n\\t\\tans.append(subs)\\n\\t\\ti = 0\\n\\t\\tsubset2(nums, n, ans, i, subs)\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef solve(self, k, nums, curr):\\n\\t\\tif k == len(nums):\\n\\t\\t\\tself.ans.add(tuple(curr))\\n\\t\\t\\treturn\\n\\t\\tself.solve(k + 1, nums, curr)\\n\\t\\tcurr.append(nums[k])\\n\\t\\tself.solve(k + 1, nums, curr)\\n\\t\\tcurr.pop()\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tnums.sort()\\n\\t\\tself.ans = set()\\n\\t\\tcurr = []\\n\\t\\tself.solve(0, nums, curr)\\n\\t\\treturn sorted(list(self.ans))\\n\", \"class Solution:\\n\\n\\tdef subsets(self, arr, index, seq):\\n\\t\\tif index == len(arr):\\n\\t\\t\\tself.res.append(seq)\\n\\t\\t\\treturn\\n\\t\\tcopyindex = index\\n\\t\\twhile index < len(arr) - 1 and arr[index] == arr[index + 1]:\\n\\t\\t\\tindex += 1\\n\\t\\tself.subsets(arr, index + 1, seq)\\n\\t\\tself.subsets(arr, copyindex + 1, seq + [arr[copyindex]])\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tnums.sort()\\n\\t\\tself.res = []\\n\\t\\tself.subsets(nums, 0, [])\\n\\t\\treturn sorted(self.res)\\n\", \"class Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\n\\t\\tdef subdup(ind, nums, ans, s):\\n\\t\\t\\tans.append(s[:])\\n\\t\\t\\tfor i in range(ind, len(nums)):\\n\\t\\t\\t\\tif i > ind and nums[i] == nums[i - 1]:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\ts.append(nums[i])\\n\\t\\t\\t\\tsubdup(i + 1, nums, ans, s)\\n\\t\\t\\t\\ts.pop()\\n\\t\\t\\treturn\\n\\t\\tans = []\\n\\t\\ts = []\\n\\t\\tnums.sort()\\n\\t\\tsubdup(0, nums, ans, s)\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tans = []\\n\\t\\tds = []\\n\\n\\t\\tdef findSubsets(ind: int):\\n\\t\\t\\tans.append(ds[:])\\n\\t\\t\\tfor i in range(ind, len(nums)):\\n\\t\\t\\t\\tif i != ind and nums[i] == nums[i - 1]:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tds.append(nums[i])\\n\\t\\t\\t\\tfindSubsets(i + 1)\\n\\t\\t\\t\\tds.pop()\\n\\t\\tnums.sort()\\n\\t\\tfindSubsets(0)\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tres = []\\n\\t\\tnums.sort()\\n\\n\\t\\tdef backtrack(i, subset):\\n\\t\\t\\tif i == len(nums):\\n\\t\\t\\t\\tres.append(subset[:])\\n\\t\\t\\t\\treturn\\n\\t\\t\\tsubset.append(nums[i])\\n\\t\\t\\tbacktrack(i + 1, subset)\\n\\t\\t\\tsubset.pop()\\n\\t\\t\\twhile i + 1 < len(nums) and nums[i] == nums[i + 1]:\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\tbacktrack(i + 1, subset)\\n\\t\\tbacktrack(0, [])\\n\\t\\tres.sort()\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef gen(self, nums, n, arr, brr, pos):\\n\\t\\tif pos == n:\\n\\t\\t\\tcrr = brr.copy()\\n\\t\\t\\tarr.add(tuple(sorted(crr)))\\n\\t\\t\\treturn\\n\\t\\tbrr.append(nums[pos])\\n\\t\\tself.gen(nums, n, arr, brr, pos + 1)\\n\\t\\tbrr.pop()\\n\\t\\tself.gen(nums, n, arr, brr, pos + 1)\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tarr = set()\\n\\t\\tbrr = []\\n\\t\\tself.gen(nums, len(nums), arr, brr, 0)\\n\\t\\treturn sorted(list(arr))\\n\", \"class Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\t(lst, tmp) = ([], [])\\n\\t\\tdic = {}\\n\\n\\t\\tdef subs(idx, nums, n, tmp, lst):\\n\\t\\t\\tif idx >= n:\\n\\t\\t\\t\\tif str(tmp) not in dic:\\n\\t\\t\\t\\t\\tdic[str(tmp)] = 1\\n\\t\\t\\t\\t\\tlst.append(tmp[:])\\n\\t\\t\\t\\treturn\\n\\t\\t\\ttmp.append(nums[idx])\\n\\t\\t\\tsubs(idx + 1, nums, n, tmp, lst)\\n\\t\\t\\ttmp.pop()\\n\\t\\t\\tsubs(idx + 1, nums, n, tmp, lst)\\n\\t\\tnums.sort()\\n\\t\\tsubs(0, nums, len(nums), tmp, lst)\\n\\t\\treturn sorted(lst)\\n\", \"class Solution:\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tans = []\\n\\t\\tm = len(nums)\\n\\t\\tnums.sort()\\n\\n\\t\\tdef recursion(idx, ds):\\n\\t\\t\\tans.append(ds.copy())\\n\\t\\t\\tfor i in range(idx, m):\\n\\t\\t\\t\\tif i > idx and nums[i] == nums[i - 1]:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tds.append(nums[i])\\n\\t\\t\\t\\trecursion(i + 1, ds)\\n\\t\\t\\t\\tds.remove(nums[i])\\n\\t\\trecursion(0, [])\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef solve(self, i, nums, lst, ans):\\n\\t\\tif i == n:\\n\\t\\t\\tans.add(tuple(lst))\\n\\t\\t\\treturn\\n\\t\\tlst.append(nums[i])\\n\\t\\tself.solve(i + 1, nums, lst, ans)\\n\\t\\tlst.pop()\\n\\t\\tself.solve(i + 1, nums, lst, ans)\\n\\n\\tdef printUniqueSubset(self, nums):\\n\\t\\tnums.sort()\\n\\t\\tans = set()\\n\\t\\tlst = []\\n\\t\\ti = 0\\n\\t\\tself.solve(i, nums, lst, ans)\\n\\t\\treturn sorted(ans)\\n\"]",
    "starter_code": "#User function Template for python3\n\n\n\nclass Solution:\n\n    def printUniqueSubset(self, nums):\n\n        # Code here",
    "input_output": "{\"inputs\": [\"nums = [1,2,2]\"], \"outputs\": [\"[[],[1],[1,2],[1,2,2],[2],[2,2]]\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "[]",
    "name": null,
    "source": "geeksforgeeks",
    "tags": "[]",
    "skill_types": "[]",
    "url": "https://practice.geeksforgeeks.org/problems/subset-sum-ii/1",
    "Expected Auxiliary Space": "O(K2^{N}).",
    "time_limit": null,
    "date": null,
    "picture_num": "0",
    "memory_limit": null,
    "Expected Time Complexity": "O(K2^{N})."
  },
  {
    "question": "The number ```89``` is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. \nWhat's the use of saying \"Eureka\"? Because this sum gives the same number.\n\nIn effect: ```89 = 8^1 + 9^2``` \n\nThe next number in having this property is ```135```.\n\nSee this property again: ```135 = 1^1 + 3^2 + 5^3```\n\nWe need a function to collect these numbers, that may receive two integers ```a```, ```b``` that defines the range ```[a, b]``` (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.\n\nLet's see some cases:\n```python\nsum_dig_pow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nsum_dig_pow(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]\n```\nIf there are no numbers of this kind in the range [a, b] the function should output an empty list.\n```python\nsum_dig_pow(90, 100) == []\n```\nEnjoy it!!",
    "solutions": "[\"def dig_pow(n):\\n\\treturn sum((int(x) ** y for (y, x) in enumerate(str(n), 1)))\\n\\ndef sum_dig_pow(a, b):\\n\\treturn [x for x in range(a, b + 1) if x == dig_pow(x)]\\n\", \"def sum_dig_pow(a, b):\\n\\treturn [x for x in range(a, b + 1) if sum((int(d) ** i for (i, d) in enumerate(str(x), 1))) == x]\\n\", \"def sum_dig_pow(a, b):\\n\\tres = []\\n\\tfor number in range(a, b + 1):\\n\\t\\tdigits = [int(i) for i in str(number)]\\n\\t\\ts = 0\\n\\t\\tfor (idx, val) in enumerate(digits):\\n\\t\\t\\ts += val ** (idx + 1)\\n\\t\\tif s == number:\\n\\t\\t\\tres.append(number)\\n\\treturn res\\n\", \"def sum_dig_pow(a, b):\\n\\tl = []\\n\\tfor i in range(a, b + 1):\\n\\t\\tk = 0\\n\\t\\tp = str(i)\\n\\t\\tfor j in range(len(p)):\\n\\t\\t\\tk += int(p[j]) ** (j + 1)\\n\\t\\tif k == i:\\n\\t\\t\\tl.append(i)\\n\\treturn l\\n\", \"def sum_dig_pow(a, b):\\n\\tans = []\\n\\twhile a <= b:\\n\\t\\tif sum((int(j) ** k for (j, k) in zip(str(a), range(1, len(str(a)) + 1)))) == a:\\n\\t\\t\\tans += [a]\\n\\t\\ta += 1\\n\\treturn ans\\n\", \"def sum_dig_pow(a, b):\\n\\tlis = []\\n\\tfor i in range(a, b + 1):\\n\\t\\ttemp = str(i)\\n\\t\\tsu = 0\\n\\t\\tfor l in range(0, len(temp)):\\n\\t\\t\\tsu += int(temp[l:l + 1]) ** (l + 1)\\n\\t\\tif su == i:\\n\\t\\t\\tlis.append(i)\\n\\treturn lis\\n\"]",
    "starter_code": "def sum_dig_pow(a, b):\n\t",
    "input_output": "{\"fn_name\": \"sum_dig_pow\", \"inputs\": [[1, 100], [10, 89], [10, 100], [90, 100], [90, 150], [50, 150], [10, 150], [89, 135]], \"outputs\": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 89]], [[89]], [[89]], [[]], [[135]], [[89, 135]], [[89, 135]], [[89, 135]]]}",
    "difficulty": "EASY",
    "raw_tags": "['Mathematics', 'Fundamentals']",
    "name": null,
    "source": "codewars",
    "tags": "['Fundamentals', 'Mathematics']",
    "skill_types": "[]",
    "url": "https://www.codewars.com/kata/5626b561280a42ecc50000d1",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": null,
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Mishka started participating in a programming contest. There are $n$ problems in the contest. Mishka's problem-solving skill is equal to $k$.\n\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\n\nMishka cannot solve a problem with difficulty greater than $k$. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by $1$. Mishka stops when he is unable to solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) — the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\n\n-----Output-----\n\nPrint one integer — the maximum number of problems Mishka can solve.\n\n\n-----Examples-----\nInput\n8 4\n4 2 3 1 5 1 6 4\n\nOutput\n5\n\nInput\n5 2\n3 1 2 1 3\n\nOutput\n0\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example, Mishka can solve problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6] \\rightarrow [5, 1, 6]$, so the number of solved problems will be equal to $5$.\n\nIn the second example, Mishka can't solve any problem because the difficulties of problems from both ends are greater than $k$.\n\nIn the third example, Mishka's solving skill is so amazing that he can solve all the problems.",
    "solutions": "[\"(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n\\tif A[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nif i != n - 1:\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tif A[j] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tans += 1\\nprint(ans)\\n\", \"(a, b) = map(int, input().split())\\nproblems = [int(i) for i in input().split()]\\ncount = 0\\nfor i in range(a):\\n\\tif problems[i] > b:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcount += 1\\nif count == a:\\n\\tprint(a)\\nelse:\\n\\tproblems.reverse()\\n\\tfor i in range(a):\\n\\t\\tif problems[i] > b:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\n\", \"import sys\\n(n, k) = map(int, sys.stdin.readline()[:-1].split(' '))\\na = list(map(int, sys.stdin.readline()[:-1].split(' ')))\\nres = 0\\ni = 0\\nwhile i < n and a[i] <= k:\\n\\tres += 1\\n\\ti += 1\\nif i < n:\\n\\ti = n - 1\\n\\twhile i >= 0 and a[i] <= k:\\n\\t\\tres += 1\\n\\t\\ti -= 1\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncnt = 0\\ni = 0\\nwhile i < n and a[i] <= k:\\n\\ti += 1\\n\\tcnt += 1\\nj = n - 1\\nwhile j >= i and a[j] <= k:\\n\\tj -= 1\\n\\tcnt += 1\\nprint(cnt)\\n\", \"(n, k) = map(int, input().split())\\nL = list(map(int, input().split()))\\nres = 0\\nwhile n != 0 and L[0] <= k:\\n\\tL.pop(0)\\n\\tres += 1\\n\\tn -= 1\\nwhile n != 0 and L[n - 1] <= k:\\n\\tL.pop()\\n\\tres += 1\\n\\tn -= 1\\nprint(res)\\n\", \"tc = list(map(int, input().split()))\\nstore = list(map(int, input().split()))\\nnumOfSolved = 0\\ni = 0\\nfor i in range(len(store)):\\n\\tif store[i] <= tc[1]:\\n\\t\\tnumOfSolved += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(store) - 1, i, -1):\\n\\tif store[i] <= tc[1]:\\n\\t\\tnumOfSolved += 1\\n\\telse:\\n\\t\\tbreak\\nprint(numOfSolved)\\n\", \"nk = list(map(int, input().split()))\\nn = nk[0]\\nk = nk[1]\\nm = list(map(int, input().split()))\\nans = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif m[i] <= k:\\n\\t\\tans += 1\\n\\t\\tm.pop()\\n\\telse:\\n\\t\\tbreak\\nm.reverse()\\nfor i in range(len(m) - 1, -1, -1):\\n\\tif m[i] <= k:\\n\\t\\tans += 1\\n\\t\\tm.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nres = 0\\ncur_res = 0\\nfirst = True\\nfor a in map(int, input().split()):\\n\\tif a <= k:\\n\\t\\tcur_res += 1\\n\\telse:\\n\\t\\tif first:\\n\\t\\t\\tres = cur_res\\n\\t\\t\\tfirst = False\\n\\t\\tcur_res = 0\\nprint(res + cur_res)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nif max(arr) <= k:\\n\\tprint(n)\\nelse:\\n\\ttemp = arr.copy()\\n\\ttemp.reverse()\\n\\tcount_ = 0\\n\\tfor i in arr:\\n\\t\\tif i <= k:\\n\\t\\t\\tcount_ += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in temp:\\n\\t\\tif i <= k:\\n\\t\\t\\tcount_ += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(count_)\\n\", \"l = input().split()\\nn = int(l[0])\\nk = int(l[1])\\nl = input().split()\\nli = [int(i) for i in l]\\ncount = 0\\nwhile li != []:\\n\\tif li[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tli.pop(0)\\n\\telif li[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tli.pop(-1)\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, m) = map(int, input().split())\\ncount = 0\\nli = list(map(int, input().split()))\\n(i, j) = (0, n - 1)\\nwhile i < n:\\n\\tif li[i] <= m:\\n\\t\\tcount += 1\\n\\t\\ti += 1\\n\\telif li[j] <= m:\\n\\t\\tcount += 1\\n\\t\\tj = j - 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(ans1, ans2) = (0, 0)\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tans1 += 1\\n\\telse:\\n\\t\\tbreak\\nif ans1 == n:\\n\\tprint(ans1)\\nelse:\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tans2 += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(ans1 + ans2)\\n\", \"(n, k) = map(int, input().split())\\na = [int(m) for m in input().split()]\\ni = 0\\nans = 0\\nwhile i < n and a[i] <= k:\\n\\tans += 1\\n\\ti += 1\\nj = n - 1\\nif i != n:\\n\\twhile a[j] <= k:\\n\\t\\tj -= 1\\n\\t\\tans += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nar = list(map(int, input().split()))\\ni = 0\\nj = -1\\ncnt = 0\\nwhile cnt < n and (ar[i] <= k or ar[j] <= k):\\n\\tif ar[i] <= k:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tj -= 1\\n\\tcnt += 1\\nprint(cnt)\\n\", \"from collections import deque\\nimport sys\\n(n, k) = map(int, sys.stdin.readline().split())\\np = deque(map(int, sys.stdin.readline().split()))\\nsolved = 0\\nfor i in range(n):\\n\\tif p[0] <= k:\\n\\t\\tsolved += 1\\n\\t\\tp.popleft()\\n\\telif p[-1] <= k:\\n\\t\\tsolved += 1\\n\\t\\tp.pop()\\nprint(solved)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nc = 0\\nwhile True:\\n\\tif len(arr) == 0:\\n\\t\\tbreak\\n\\tif arr[0] > k:\\n\\t\\tbreak\\n\\tarr.pop(0)\\n\\tc += 1\\nwhile True:\\n\\tif not arr:\\n\\t\\tbreak\\n\\tif arr[-1] > k:\\n\\t\\tbreak\\n\\tarr.pop()\\n\\tc += 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nlis = list(map(int, input().split()))\\n(left, right) = (0, 0)\\nfor i in lis:\\n\\tif i <= k:\\n\\t\\tleft += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(lis) - 1, 0, -1):\\n\\tif lis[i] <= k:\\n\\t\\tright += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(n, left + right))\\n\", \"(n, k) = input().split(' ')\\nn = int(n)\\nk = int(k)\\nc = input().split(' ', n)\\nc = list(map(int, c))\\nh = 0\\nl = 0\\ni = 0\\nwhile i < n:\\n\\tif k > c[i] or k == c[i]:\\n\\t\\th += 1\\n\\t\\tl = i\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tl = i\\n\\t\\tbreak\\nj = n - 1\\nwhile j > l:\\n\\tif k > c[j] or k == c[j]:\\n\\t\\th += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(h)\\n\", \"n = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n(i, j, count) = (0, n[0] - 1, 0)\\nwhile a[i] <= n[1]:\\n\\ti += 1\\n\\tcount += 1\\n\\tif i == n[0]:\\n\\t\\tprint(count)\\n\\t\\texit()\\nwhile a[j] <= n[1]:\\n\\tj -= 1\\n\\tcount += 1\\n\\tif j == -1:\\n\\t\\tprint(count)\\n\\t\\texit()\\nprint(count)\\n\", \"a = list(map(int, input().split(' ')))\\nn = a[0]\\nk = a[1]\\nb = list(map(int, input().split(' ')))\\nc = 0\\nfor i in range(0, n):\\n\\tif b[i] <= k:\\n\\t\\tc = c + 1\\n\\telse:\\n\\t\\tbreak\\nif c < n:\\n\\tfor j in range(n - 1, 0, -1):\\n\\t\\tif b[j] <= k:\\n\\t\\t\\tc = c + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nsol = 0\\nwhile len(arr) > 0 and (arr[0] <= k or arr[-1] <= k):\\n\\tif arr[0] <= k:\\n\\t\\tarr = arr[1:]\\n\\telse:\\n\\t\\tarr = arr[:-1]\\n\\tsol += 1\\nprint(sol)\\n\", \"(tn, tk) = input().split()\\nn = int(tn)\\nk = int(tk)\\na = input().split()\\nans = 0\\nfor i in range(n):\\n\\tif int(a[i]) > k:\\n\\t\\tbreak\\n\\tans += 1\\nfor i in range(n - 1, -1, -1):\\n\\tif int(a[i]) > k:\\n\\t\\tbreak\\n\\tans += 1\\nif ans > n:\\n\\tans = n\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nnb = 0\\nfor i in range(len(a)):\\n\\tif a[0] <= k or a[len(a) - 1] <= k:\\n\\t\\tnb += 1\\n\\t\\tif a[0] <= k:\\n\\t\\t\\tdel a[0]\\n\\t\\telse:\\n\\t\\t\\tdel a[len(a) - 1]\\n\\telse:\\n\\t\\tbreak\\nprint(nb)\\n\", \"[n, k] = [int(x) for x in input().split()]\\nL = [int(x) for x in input().split()]\\nif max(L) <= k:\\n\\tprint(len(L))\\nelse:\\n\\tc = 0\\n\\tfor i in range(len(L)):\\n\\t\\tif L[i] <= k:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(1, len(L) + 1):\\n\\t\\tif L[-i] <= k:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(c)\\n\", \"(n, k) = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nj = 0\\nwhile l != []:\\n\\tif l[0] > k and l[-1] > k:\\n\\t\\tprint(j)\\n\\t\\tbreak\\n\\tif l[0] <= k:\\n\\t\\tl.pop(0)\\n\\t\\tj += 1\\n\\telif l[-1] <= k:\\n\\t\\tl.pop()\\n\\t\\tj += 1\\nif j == n:\\n\\tprint(n)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nsolved = 0\\nfor i in range(0, len(a)):\\n\\tif a[i] <= k:\\n\\t\\tsolved += 1\\n\\t\\ta[i] = 1000000\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(a) - 1, 0, -1):\\n\\tif a[i] <= k:\\n\\t\\tsolved += 1\\n\\t\\ta[i] = 1000000\\n\\telse:\\n\\t\\tbreak\\nprint(solved)\\n\", \"(n, k) = [int(a) for a in input().split()]\\nas_ = [int(a) for a in input().split()]\\ni = 0\\nwhile i < n and as_[i] <= k:\\n\\ti += 1\\nj = n - 1\\nwhile i <= j and as_[j] <= k:\\n\\tj -= 1\\nprint(n - j + i - 1)\\n\", \"nk = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ntasks = 0\\nwhile len(a) >= 1 and (a[0] <= nk[1] or a[len(a) - 1] <= nk[1]):\\n\\tif a[0] <= nk[1]:\\n\\t\\ta.pop(0)\\n\\telif a[len(a) - 1] <= nk[1]:\\n\\t\\ta.pop()\\n\\ttasks += 1\\nprint(tasks)\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\ncnt = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tcnt += 1\\n\\telif a[i] > k:\\n\\t\\tbreak\\nif cnt < n:\\n\\tfor i in reversed(a):\\n\\t\\tif i <= k:\\n\\t\\t\\tcnt += 1\\n\\t\\telif i > k:\\n\\t\\t\\tbreak\\nprint(cnt)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nc = 0\\nfor i in range(len(a)):\\n\\tif a[i] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(a) - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(c, len(a)))\\n\", \"(n, k) = map(int, input().split())\\np = list(map(int, input().split()))\\nc = 0\\nwhile len(p) > 0 and (p[0] <= k or p[-1] <= k):\\n\\tif p[0] <= k:\\n\\t\\tdel p[0]\\n\\t\\tc += 1\\n\\tif len(p) > 0:\\n\\t\\tif p[-1] <= k:\\n\\t\\t\\tdel p[-1]\\n\\t\\t\\tc += 1\\nprint(c)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\narr = input().split(' ')\\nfor i in range(n):\\n\\tarr[i] = int(arr[i])\\ncount = 0\\ntempn = n - 1\\nwhile True:\\n\\tif tempn < 0:\\n\\t\\tbreak\\n\\telif arr[0] <= k:\\n\\t\\tcount = count + 1\\n\\t\\ttempn = tempn - 1\\n\\t\\tdel arr[0]\\n\\telif arr[tempn] <= k:\\n\\t\\tcount = count + 1\\n\\t\\tdel arr[tempn]\\n\\t\\ttempn = tempn - 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split(' '))\\nprint(n - len(''.join(('x '[int(v) <= k] for v in input().split())).strip()))\\n\", \"def a(A, k):\\n\\tL = len(A)\\n\\tif L == 0:\\n\\t\\treturn A\\n\\telif A[0] <= k:\\n\\t\\treturn a(A[1:], k)\\n\\tif A[L - 1] <= k:\\n\\t\\treturn a(A[:L - 1], k)\\n\\telse:\\n\\t\\treturn A\\n\\ndef sol():\\n\\t(n, k) = map(int, input().split())\\n\\tA = [int(item) for item in input().split()]\\n\\tprint(n - len(a(A, k)))\\nsol()\\n\", \"R = lambda : map(int, input().split())\\n(n, k) = R()\\na = list(R())\\nprint(sum((min(max(a[:i + 1]), max(a[i:])) <= k for i in range(n))))\\n\", \"(n, k) = input().strip().split(' ')\\n(n, k) = [int(n), int(k)]\\nc = list(map(int, input().strip().split(' ')))\\nl = 0\\nr = n - 1\\nans = 0\\nwhile l <= r:\\n\\tif c[l] <= k and c[r] <= k and (l != r):\\n\\t\\tl += 1\\n\\t\\tr -= 1\\n\\t\\tans += 2\\n\\telif c[l] <= k and c[r] <= k and (l == r):\\n\\t\\tans += 1\\n\\t\\tl += 1\\n\\t\\tr -= 1\\n\\telif c[l] <= k:\\n\\t\\tl += 1\\n\\t\\tans += 1\\n\\telif c[r] <= k:\\n\\t\\tr -= 1\\n\\t\\tans += 1\\n\\telif c[l] > k and c[r] > k:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\nz = 0\\nl = True\\nr = True\\nwhile l or r:\\n\\tif i < n and a[i] <= k:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tl = False\\n\\tif j >= 0 and a[j] <= k:\\n\\t\\tj -= 1\\n\\t\\tz += 1\\n\\telse:\\n\\t\\tr = False\\nif i == n or z == n:\\n\\tprint(n)\\nelse:\\n\\tprint(i + z)\\n\", \"(n, k) = map(int, input().split())\\na = [0] * n\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\nans = 0\\ni = n - 1\\nwhile a[i] <= k and i >= 0:\\n\\tans += 1\\n\\ta[i] = -1\\n\\ti -= 1\\ni = 0\\nwhile a[i] <= k and i <= n - 1:\\n\\tif a[i] > 0:\\n\\t\\tans += 1\\n\\ti += 1\\n\\tif i == n:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nl = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\tl += 1\\nr = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] > k or i <= l:\\n\\t\\tbreak\\n\\tr += 1\\nprint(l + r)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nlist = input().split()\\nlist = [int(i) for i in list]\\nmax = 0\\nmin = 0\\nfor i in range(len(list)):\\n\\tif list[i] > k:\\n\\t\\tmax = i + 1\\nlist.reverse()\\nfor i in range(len(list)):\\n\\tif list[i] > k:\\n\\t\\tmin = i\\n\\t\\tmin = len(list) - i\\nif max == 0 & min == 0:\\n\\tprint(len(list))\\nelse:\\n\\tprint(len(list) - max + min - 1)\\n\", \"arr = [int(x) for x in input().split()]\\nn = arr[0]\\nk = arr[1]\\narr = [int(x) for x in input().split()]\\ncount = 0\\nfor i in range(n):\\n\\tif arr[i] <= k:\\n\\t\\tcount = count + 1\\n\\t\\tarr[i] = k + 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n):\\n\\tif arr[n - 1] <= k:\\n\\t\\tcount = count + 1\\n\\t\\tarr[n - 1] = k + 1\\n\\t\\tn = n - 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(l, r) = (0, n - 1)\\nwhile l < n and a[l] <= k:\\n\\tl += 1\\nwhile r > l and a[r] <= k:\\n\\tr -= 1\\nprint(n - r + l - 1)\\n\", \"(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\ncount = 0\\nd = 0\\nwhile len(A) > 0:\\n\\tif A[0] > k:\\n\\t\\tc1 = True\\n\\telse:\\n\\t\\tdel A[0]\\n\\t\\tc1 = False\\n\\t\\tcount += 1\\n\\tif len(A) > 0:\\n\\t\\tif A[len(A) - 1] > k:\\n\\t\\t\\tc2 = True\\n\\t\\telse:\\n\\t\\t\\tdel A[len(A) - 1]\\n\\t\\t\\tc1 = False\\n\\t\\t\\tcount += 1\\n\\tif c1 and c2:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nfrom collections import deque\\na = deque(list(map(int, input().split())))\\nans = 0\\nwhile True:\\n\\tif not a:\\n\\t\\tbreak\\n\\tif a[0] <= k:\\n\\t\\tans += 1\\n\\t\\ta.popleft()\\n\\telif a[-1] <= k:\\n\\t\\tans += 1\\n\\t\\ta.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(a, b) = map(int, input().split())\\nq = list(map(int, input().split()))\\nc = 0\\nfor i in q:\\n\\tif b >= i:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor j in range(len(q)):\\n\\tif b >= q[-1 - j]:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nif c >= a:\\n\\tprint(a)\\nelse:\\n\\tprint(c)\\n\", \"(n, k) = list(map(int, input().split()))\\nai = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n\\tif ai[i] > k:\\n\\t\\tbreak\\n\\tans += 1\\nfor i in range(n - 1, -1, -1):\\n\\tif ai[i] > k:\\n\\t\\tbreak\\n\\tans += 1\\nprint(min(n, ans))\\n\", \"(n, k) = map(int, input().split())\\nproblems = list(map(int, input().split()))\\nnumLeft = 0\\nnumRight = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif problems[i] <= k:\\n\\t\\tnumLeft += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(0, n):\\n\\tif problems[i] <= k:\\n\\t\\tnumRight += 1\\n\\telse:\\n\\t\\tbreak\\nif numRight == n:\\n\\tprint(n)\\nelse:\\n\\tprint(numRight + numLeft)\\n\", \"(n, k) = [int(c) for c in input().split(' ')]\\na = [int(c) for c in input().split(' ')]\\nleft = 0\\nright = len(a) - 1\\ntotalcount = 0\\nwhile left <= right:\\n\\tif a[left] <= k:\\n\\t\\tleft += 1\\n\\t\\ttotalcount += 1\\n\\telif a[right] <= k:\\n\\t\\tright -= 1\\n\\t\\ttotalcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(totalcount)\\n\", \"temp = input().split()\\nn = int(temp[0])\\nk = int(temp[1])\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\nbig_end = 0\\nbig_front = 0\\ncount = 0\\ni = 0\\nwhile big_end + big_front != 2 and i < len(a):\\n\\tif a[i] <= k and big_front != 1:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbig_front = 1\\n\\tif a[n - i - 1] <= k and big_end != 1:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbig_end = 1\\n\\ti = i + 1\\nif count >= len(a):\\n\\tprint(count // 2)\\nelse:\\n\\tprint(count)\\n\", \"first_row = input().split(' ')\\ntasks_number = int(first_row[0])\\nmax_taks_level = int(first_row[1])\\ncontest_tasks = input().split(' ')\\nnumber_of_solved_tasks = 0\\nhas_unsolved_task = False\\nfor current_task in contest_tasks:\\n\\tif int(current_task) <= max_taks_level:\\n\\t\\tnumber_of_solved_tasks += 1\\n\\telse:\\n\\t\\thas_unsolved_task = True\\n\\t\\tbreak\\nif has_unsolved_task:\\n\\tfor current_task_reverse in reversed(contest_tasks):\\n\\t\\tif int(current_task_reverse) <= max_taks_level:\\n\\t\\t\\tnumber_of_solved_tasks += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(number_of_solved_tasks)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nwhile len(l) > 0:\\n\\ti = 0\\n\\tj = len(l) - 1\\n\\tif l[i] > k and l[j] > k:\\n\\t\\tbreak\\n\\telif l[i] <= k:\\n\\t\\tc = c + 1\\n\\t\\tl = l[i + 1:]\\n\\telif l[j] <= k:\\n\\t\\tc = c + 1\\n\\t\\tl = l[:j]\\nprint(c)\\n\", \"l = list(input().split())\\nn = int(l[0])\\nk = int(l[1])\\nl = list(input().split())\\nl = [int(i) for i in l]\\nproblems = 0\\nfor i in l:\\n\\tif i <= k:\\n\\t\\tproblems += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(-1, -n - 1, -1):\\n\\tif l[i] <= k:\\n\\t\\tproblems += 1\\n\\telse:\\n\\t\\tbreak\\nif problems > n:\\n\\tproblems = problems // 2\\nprint(problems)\\n\", \"def main():\\n\\trd = lambda : list(map(int, input().split()))\\n\\t(n, k) = rd()\\n\\tarr = rd()\\n\\ti = 0\\n\\tj = len(arr) - 1\\n\\tcnt = 0\\n\\tflag1 = flag2 = True\\n\\twhile i < j:\\n\\t\\tif arr[i] <= k:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\ti += 1\\n\\t\\t\\tflag1 = False\\n\\t\\tif arr[j] <= k:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\tj -= 1\\n\\t\\t\\tflag2 = False\\n\\t\\tif flag1 and flag2:\\n\\t\\t\\tbreak\\n\\t\\tflag1 = flag2 = True\\n\\tif i == j and arr[i] <= k:\\n\\t\\tcnt += 1\\n\\tprint(cnt)\\nmain()\\n\", \"(n, k) = map(int, input().split())\\n\\ndef count_while(data):\\n\\tif not data:\\n\\t\\treturn 0\\n\\tnot_found = True\\n\\tfor (i, v) in enumerate(data):\\n\\t\\tif not v <= k:\\n\\t\\t\\tnot_found = False\\n\\t\\t\\tbreak\\n\\treturn i + not_found\\ndata = list(map(int, input().split()))\\nn1 = count_while(data)\\nn2 = count_while(data[-1:n1:-1])\\nprint(n1 + n2)\\n\", \"from sys import stdin\\n\\ndef solve(tc):\\n\\t(n, k) = map(int, stdin.readline().split())\\n\\tli = list(map(int, stdin.readline().split()))\\n\\tl = 0\\n\\tr = len(li) - 1\\n\\tcnt = 0\\n\\twhile l <= r:\\n\\t\\tif li[l] <= k:\\n\\t\\t\\tl += 1\\n\\t\\t\\tcnt += 1\\n\\t\\telif li[r] <= k:\\n\\t\\t\\tr -= 1\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(cnt)\\nLOCAL_TEST = not __debug__\\nif LOCAL_TEST:\\n\\tinfile = __file__.split('.')[0] + '-test.in'\\n\\tstdin = open(infile, 'r')\\ntcs = int(stdin.readline().strip()) if LOCAL_TEST else 1\\ntc = 1\\nwhile tc <= tcs:\\n\\tsolve(tc)\\n\\ttc += 1\\n\", \"(n, k) = [int(n) for n in input().split()]\\nproblems = [int(x) for x in input().split()]\\nans = 0\\nfor problem in problems:\\n\\tif problem <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nfor problem in reversed(problems):\\n\\tif problem <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nif ans == 2 * n:\\n\\tans = n\\nprint(ans)\\n\", \"(n, k) = [int(s) for s in input().split(' ')]\\na = [int(s) for s in input().split(' ')]\\ncnt = 0\\nwhile len(a) > 0 and a[0] <= k:\\n\\tcnt += 1\\n\\tdel a[0]\\na.reverse()\\nwhile len(a) > 0 and a[0] <= k:\\n\\tcnt += 1\\n\\tdel a[0]\\nprint(cnt)\\n\", \"z = input\\nmod = 10 ** 9 + 7\\nfrom collections import *\\nfrom queue import *\\nfrom sys import *\\nfrom collections import *\\nfrom math import *\\nfrom heapq import *\\nfrom itertools import *\\nfrom bisect import *\\nfrom collections import Counter as cc\\nfrom math import factorial as f\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\n\\ndef prime(x):\\n\\tp = ceil(x ** 0.5) + 1\\n\\tfor i in range(2, p):\\n\\t\\tif x % i == 0:\\n\\t\\t\\treturn 0\\n\\treturn 1\\n(n, m) = map(int, z().split())\\nl = list(map(int, z().split()))\\nt = 0\\nfor i in range(n):\\n\\tx1 = l[-1]\\n\\tx2 = l[0]\\n\\tif x2 <= m:\\n\\t\\tl = l[1:]\\n\\t\\tt += 1\\n\\t\\tcontinue\\n\\tif x1 <= m:\\n\\t\\tl = l[:-1]\\n\\t\\tt += 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tbreak\\nprint(min(t, n))\\n\", \"(n, k) = map(int, input().split())\\nc = 0\\na = [int(x) for x in input().split()]\\nwhile a:\\n\\ti = 0\\n\\tif a[i] <= k:\\n\\t\\tc += 1\\n\\t\\tdel a[i]\\n\\telif a[len(a) - 1] <= k:\\n\\t\\tc += 1\\n\\t\\tdel a[len(a) - 1]\\n\\telif a[i] > k and a[len(a) - 1] > k:\\n\\t\\tc += 0\\n\\t\\tbreak\\n\\ti += 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nproblems = list(map(int, input().split()))\\nlindex = 0\\nwhile lindex < n and problems[lindex] <= k:\\n\\tlindex += 1\\nrindex = n - 1\\nwhile rindex >= 0 and problems[rindex] <= k:\\n\\trindex -= 1\\nif lindex == n or rindex == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (rindex - lindex + 1))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nif count == n:\\n\\tprint(count)\\n\\tquit()\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(s) for s in input().split(' ')]\\na = [int(s) for s in input().split(' ')]\\nc = 0\\nwhile len(a) > 0:\\n\\tif k < a[0] and k < a[len(a) - 1]:\\n\\t\\tbreak\\n\\tif k >= a[0]:\\n\\t\\tdel a[0]\\n\\t\\tc += 1\\n\\t\\tcontinue\\n\\tif k >= a[len(a) - 1]:\\n\\t\\tdel a[len(a) - 1]\\n\\t\\tc += 1\\n\\t\\tcontinue\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nwhile min(a[-1], a[0]) <= k:\\n\\tc += 1\\n\\tif min(a[-1], a[0]) == a[-1]:\\n\\t\\ta.pop(-1)\\n\\telse:\\n\\t\\ta.pop(0)\\n\\tif len(a) == 0:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nisi = [0] * n\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tisi[i] = 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tisi[i] = 1\\n\\telse:\\n\\t\\tbreak\\nkol = 0\\nfor x in isi:\\n\\tkol += x\\nprint(kol)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nflag = 0\\ncount = 0\\nl = list(map(int, input().split()))\\nfor i in range(0, len(l)):\\n\\tif l[i] <= k:\\n\\t\\tcount = count + 1\\n\\t\\tflag = i + 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(0, len(l) - flag):\\n\\tif l[len(l) - 1 - i] <= k:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nl = [int(i) for i in input().split()]\\nz = 0\\nz2 = 0\\nfor i in l:\\n\\tif i <= k:\\n\\t\\tz += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in l[::-1]:\\n\\tif i <= k:\\n\\t\\tz2 += 1\\n\\telse:\\n\\t\\tbreak\\nif z == len(l):\\n\\tprint(len(l))\\nelse:\\n\\tprint(z + z2)\\n\", \"(n, k) = map(int, input().split())\\np = list(map(int, input().split()))\\ncount = 0\\nwhile True:\\n\\tif len(p) != 0:\\n\\t\\tif p[0] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tdel p[0]\\n\\t\\telif p[len(p) - 1] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tdel p[len(p) - 1]\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"rd = lambda : list(map(int, input().split()))\\n(n, k) = rd()\\na = rd()\\n(i, j) = (0, n - 1)\\nwhile i <= j and a[i] <= k:\\n\\ti += 1\\nwhile i < j and a[j] <= k:\\n\\tj -= 1\\nprint(n - j + i - 1)\\n\", \"(n, k) = map(int, input().split())\\nline = list(map(int, input().split()))\\ntrig = True\\ni = 0\\nwhile trig:\\n\\tif line[i] <= k and i != n - 1:\\n\\t\\ti += 1\\n\\telif i == n - 1 and line[i] <= k:\\n\\t\\tans = n\\n\\t\\ttrig = False\\n\\telse:\\n\\t\\tans = i\\n\\t\\ttrig = False\\nif ans == n:\\n\\tprint(n)\\nelse:\\n\\ttrig = True\\n\\ti = n - 1\\n\\twhile trig:\\n\\t\\tif line[i] <= k:\\n\\t\\t\\ti -= 1\\n\\t\\telse:\\n\\t\\t\\tans += n - (i + 1)\\n\\t\\t\\ttrig = False\\n\\tprint(ans)\\n\", \"a = input()\\ntasks = input()\\n(n, k) = a.split(' ')\\ni = 0\\nif int(n) < 1:\\n\\tprint(0)\\nlist_of_tasks = tasks.split(' ')\\nwhile len(list_of_tasks) > 0:\\n\\tif int(list_of_tasks[0]) <= int(k):\\n\\t\\tdel list_of_tasks[0]\\n\\t\\ti += 1\\n\\telif int(list_of_tasks[-1]) <= int(k):\\n\\t\\tdel list_of_tasks[-1]\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tbreak\\nprint(i)\\n\", \"T_ON = 0\\nDEBUG_ON = 0\\nMOD = 998244353\\n\\ndef solve():\\n\\t(n, k) = read_ints()\\n\\tA = read_ints()\\n\\tcount = 0\\n\\ti = 0\\n\\twhile i < n and A[i] <= k:\\n\\t\\ti += 1\\n\\tj = n - 1\\n\\twhile j >= i and A[j] <= k:\\n\\t\\tj -= 1\\n\\tprint(i + n - 1 - j)\\n\\ndef main():\\n\\tT = read_int() if T_ON else 1\\n\\tfor i in range(T):\\n\\t\\tsolve()\\n\\ndef debug(*xargs):\\n\\tif DEBUG_ON:\\n\\t\\tprint(*xargs)\\nfrom collections import *\\nimport math\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef read_int():\\n\\treturn int(input())\\n\\ndef read_ints():\\n\\treturn list(map(int, input().split()))\\n\\ndef print_nums(nums):\\n\\tprint(' '.join(map(str, nums)))\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef NO():\\n\\tprint('NO')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef First():\\n\\tprint('First')\\n\\ndef Second():\\n\\tprint('Second')\\n\\ndef fib(n):\\n\\t(a, b) = (0, 1)\\n\\tfor _ in range(n):\\n\\t\\t(a, b) = (b, a + b)\\n\\treturn a\\n\\ndef fib_ns(n):\\n\\tassert n >= 1\\n\\tf = [0 for _ in range(n + 1)]\\n\\tf[0] = 0\\n\\tf[1] = 1\\n\\tfor i in range(2, n + 1):\\n\\t\\tf[i] = f[i - 1] + f[i - 2]\\n\\treturn f\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b % a, a)\\n\\ndef xgcd(a, b):\\n\\t(x0, x1, y0, y1) = (0, 1, 1, 0)\\n\\twhile a != 0:\\n\\t\\t((q, a), b) = (divmod(b, a), a)\\n\\t\\t(y0, y1) = (y1, y0 - q * y1)\\n\\t\\t(x0, x1) = (x1, x0 - q * x1)\\n\\treturn (b, x0, y0)\\n\\ndef lcm(a, b):\\n\\td = gcd(a, b)\\n\\treturn a * b // d\\n\\ndef modinv(a, m):\\n\\t(g, x, _) = xgcd(a, m)\\n\\tif g != 1:\\n\\t\\traise Exception('gcd(a, m) != 1')\\n\\treturn x % m\\n\\ndef mod_add(x, y):\\n\\tx += y\\n\\twhile x >= MOD:\\n\\t\\tx -= MOD\\n\\twhile x < 0:\\n\\t\\tx += MOD\\n\\treturn x\\n\\ndef mod_mul(x, y):\\n\\treturn x * y % MOD\\n\\ndef mod_pow(x, y):\\n\\tif y == 0:\\n\\t\\treturn 1\\n\\tif y % 2:\\n\\t\\treturn mod_mul(x, mod_pow(x, y - 1))\\n\\tp = mod_pow(x, y // 2)\\n\\treturn mod_mul(p, p)\\n\\ndef mod_inv(y):\\n\\treturn mod_pow(y, MOD - 2)\\n\\ndef mod_div(x, y):\\n\\treturn mod_mul(x, mod_inv(y))\\n\\ndef is_prime(n):\\n\\tif n == 1:\\n\\t\\treturn False\\n\\tfor i in range(2, int(n ** 0.5) + 1):\\n\\t\\tif n % i:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef gen_primes(n):\\n\\tP = [True for _ in range(n + 1)]\\n\\tP[0] = P[1] = False\\n\\tfor i in range(int(n ** 0.5) + 1):\\n\\t\\tif P[i]:\\n\\t\\t\\tfor j in range(2 * i, n + 1, i):\\n\\t\\t\\t\\tP[j] = False\\n\\treturn P\\nmain()\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nfor i in range(n):\\n\\tif l[0] >= l[-1]:\\n\\t\\tif l[0] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tl.remove(l[0])\\n\\t\\telif l[-1] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tl.pop()\\n\\telif l[-1] >= l[0]:\\n\\t\\tif l[-1] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tl.pop()\\n\\t\\telif l[0] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tl.remove(l[0])\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(q1, p) = (0, 0)\\nwhile q1 < len(a) and a[q1] <= k:\\n\\tp += 1\\n\\tq1 += 1\\nif q1 == len(a):\\n\\tprint(n)\\nelse:\\n\\tq2 = len(a) - 1\\n\\twhile q2 > q1 and a[q2] <= k:\\n\\t\\tp += 1\\n\\t\\tq2 -= 1\\n\\tprint(p)\\n\", \"import collections\\nd = collections.deque()\\n(n, k) = map(int, input().split(' '))\\nli = list(map(int, input().split()))\\nfor i in range(len(li)):\\n\\td.append(li[i])\\ncount = 0\\nfound = True\\nfoundleft = True\\nwhile len(d) != 0:\\n\\tx = d.pop()\\n\\tif x <= k:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\td.append(x)\\n\\t\\tbreak\\nwhile len(d) != 0:\\n\\ty = d.popleft()\\n\\tif y <= k:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\td.appendleft(y)\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nlis = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(0, n):\\n\\tif lis[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcnt += 1\\nfor i in range(n - 1, -1, -1):\\n\\tif lis[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcnt += 1\\nif cnt > n:\\n\\tcnt = n\\nprint(cnt)\\n\", \"def ints():\\n\\treturn [int(x) for x in input().split()]\\n(n, k) = ints()\\nxs = ints()\\nl = 0\\nfor x in xs:\\n\\tif x > k:\\n\\t\\tbreak\\n\\tl += 1\\nr = len(xs)\\nfor x in reversed(xs):\\n\\tif x > k:\\n\\t\\tbreak\\n\\tr -= 1\\nres = l\\nif l < r:\\n\\tres += len(xs) - r\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ns = set()\\nfor i in range(n):\\n\\tif l[i] > k:\\n\\t\\tbreak\\n\\ts.add(i)\\nfor i in range(n):\\n\\tif l[n - i - 1] > k:\\n\\t\\tbreak\\n\\ts.add(n - i - 1)\\nprint(len(s))\\n\", \"(n, k) = map(int, input().split())\\nproblems = list(map(int, input().split()))\\n(qtd, virou) = (0, False)\\nwhile True:\\n\\tif len(problems) == 0:\\n\\t\\tprint(qtd)\\n\\t\\tbreak\\n\\tif problems.pop() > k:\\n\\t\\tif virou == True:\\n\\t\\t\\tprint(qtd)\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tvirou = True\\n\\t\\t\\tproblems.reverse()\\n\\telse:\\n\\t\\tqtd += 1\\n\", \"(a, b) = map(int, input().split())\\nar = list(map(int, input().split()))\\nrez = 0\\nif max(ar) > b:\\n\\tfor i in ar:\\n\\t\\tif i > b:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\trez += 1\\n\\tfor i in ar[::-1]:\\n\\t\\tif i > b:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\trez += 1\\nelse:\\n\\trez = a\\nprint(rez)\\n\", \"(n, k) = map(int, input().split())\\ntasks = []\\nfor i in input().split():\\n\\ttasks.append(int(i))\\ni = 0\\ns = 0\\nN = n\\nwhile True:\\n\\tif i >= n:\\n\\t\\tbreak\\n\\tif tasks[i] <= k:\\n\\t\\ts += 1\\n\\t\\ti += 1\\n\\telif tasks[N - 1] <= k:\\n\\t\\ts += 1\\n\\t\\tN -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(s)\\n\", \"(n, k) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\nans = 0\\ni = 0\\nwhile i < n and a[i] <= k:\\n\\tans += 1\\n\\ti += 1\\nj = n - 1\\nwhile j >= i and a[j] <= k:\\n\\tj -= 1\\n\\tans += 1\\nprint(ans)\\n\", \"(n, k) = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nif all([i <= k for i in l]):\\n\\tprint(n)\\nelse:\\n\\t(i, j) = (0, -1)\\n\\tc = 0\\n\\twhile True:\\n\\t\\tif l[i] <= k:\\n\\t\\t\\ti += 1\\n\\t\\t\\tc += 1\\n\\t\\telif l[j] <= k:\\n\\t\\t\\tj -= 1\\n\\t\\t\\tc += 1\\n\\t\\tif l[i] > k and l[j] > k:\\n\\t\\t\\tbreak\\n\\tprint(c)\\n\", \"(n, k) = map(int, input().split())\\nl = [*map(int, input().split())]\\n(left, right) = (0, n - 1)\\nwhile left <= right and l[left] <= k:\\n\\tleft += 1\\nwhile left <= right and l[right] <= k:\\n\\tright -= 1\\nprint(n - max(0, right - left + 1))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i < n:\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\ti += 1\\nans = i\\nj = n - 1\\nwhile j >= 0:\\n\\tif a[j] > k:\\n\\t\\tbreak\\n\\tj -= 1\\nans += n - 1 - j\\nif j == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(ans)\\n\", \"def read_numbers():\\n\\treturn (int(s) for s in input().strip().split(' '))\\n\\ndef main():\\n\\t(n, k) = read_numbers()\\n\\ttasks = list(read_numbers())\\n\\tsolved_tasks_count = 0\\n\\tlc = 0\\n\\trc = len(tasks) - 1\\n\\twhile solved_tasks_count < len(tasks):\\n\\t\\tif tasks[lc] <= k:\\n\\t\\t\\tsolved_tasks_count += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tlc += 1\\n\\twhile solved_tasks_count < len(tasks):\\n\\t\\tif tasks[rc] <= k:\\n\\t\\t\\tsolved_tasks_count += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\trc -= 1\\n\\tprint(solved_tasks_count)\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = [i for (i, ai) in enumerate(a, 1) if ai > k]\\nt = n if len(s) == 0 else s[0] + n - s[-1] - 1\\nprint(t)\\n\", \"import math\\ninput0 = input()\\ninput1 = input()\\nbase = 0\\ntemp = ''\\nfor c in input0:\\n\\tif c == ' ':\\n\\t\\tlength = int(temp)\\n\\t\\ttemp = ''\\n\\telse:\\n\\t\\ttemp += c\\nlevel = int(temp)\\nlistNumbers = []\\ntempC = ''\\nfor c in input1:\\n\\tif c == ' ':\\n\\t\\tlistNumbers.append(int(tempC))\\n\\t\\ttempC = ''\\n\\telse:\\n\\t\\ttempC += c\\nlistNumbers.append(int(tempC))\\nc = 0\\nleft = True\\nflag = True\\nwhile flag and len(listNumbers) >= 1:\\n\\tif listNumbers[0] <= level:\\n\\t\\tlistNumbers.pop(0)\\n\\t\\tc += 1\\n\\telif listNumbers[-1] <= level:\\n\\t\\tlistNumbers.pop(-1)\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tflag = False\\n\\t\\tleft = not left\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = [None] * n\\ncompleted = 0\\na = input().split()\\nfor i in range(0, n):\\n\\ta[i] = int(a[i])\\nfront = 0\\nend = n - 1\\nwhile a[front] <= k and len(a) > 0:\\n\\tif a[front] <= k:\\n\\t\\tdel a[front]\\n\\t\\tcompleted += 1\\n\\t\\tend = len(a) - 1\\n\\tif len(a) <= 0:\\n\\t\\tbreak\\nif len(a) > 0:\\n\\twhile a[end] <= k and len(a) > 0:\\n\\t\\tif a[end] <= k:\\n\\t\\t\\tdel a[end]\\n\\t\\t\\tcompleted += 1\\n\\t\\t\\tend = len(a) - 1\\n\\t\\tif len(a) <= 0:\\n\\t\\t\\tbreak\\nprint(completed)\\n\", \"(x, y) = [int(a) for a in input().split()]\\nz = [int(a) for a in input().split()]\\na = []\\nfor i in z:\\n\\tif i <= y:\\n\\t\\ta.append(i)\\n\\telse:\\n\\t\\tbreak\\nif len(a) == x:\\n\\tprint(x)\\n\\tquit()\\nz = z[::-1]\\nfor i in z:\\n\\tif i <= y:\\n\\t\\ta.append(i)\\n\\telse:\\n\\t\\tbreak\\nprint(len(a))\\n\", \"(n, k) = tuple(map(int, input().split(' ')))\\nprobs = list(map(int, input().split(' ')))\\ncanSolved = 0\\nl = 0\\nr = len(probs) - 1\\nwhile l <= r and probs[l] <= k:\\n\\tcanSolved += 1\\n\\tl += 1\\nwhile l <= r and probs[r] <= k:\\n\\tcanSolved += 1\\n\\tr -= 1\\nprint(canSolved)\\n\", \"def f(a, n, k):\\n\\tc = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tc += 1\\n\\treturn c == n\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\nc = 0\\nif f(a, n, k):\\n\\tprint(n)\\nelse:\\n\\twhile a[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti += 1\\n\\tif i != n - 1:\\n\\t\\twhile a[j] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tj -= 1\\n\\tprint(c)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nwhile len(a) != 0 and a[0] <= k:\\n\\ta.pop(0)\\nwhile len(a) != 0 and a[-1] <= k:\\n\\ta.pop()\\nprint(n - len(a))\\n\", \"(n, k) = [int(x) for x in input().split()]\\nline = list(map(int, input().split()))\\nh = 0\\nflag = True\\nwhile line != []:\\n\\tif line[0] > k:\\n\\t\\tbreak\\n\\th += 1\\n\\tdel line[0]\\nline = line[::-1]\\nwhile line != []:\\n\\tif line[0] > k:\\n\\t\\tbreak\\n\\th += 1\\n\\tdel line[0]\\nprint(h)\\n\", \"(n, k) = input().split()\\nproblems = input().split()\\na = 0\\nb = 0\\nfor i in range(int(n)):\\n\\tif int(problems[i]) > int(k):\\n\\t\\ta = i\\n\\t\\tbreak\\nfor i in range(int(n) - 1, -1, -1):\\n\\tif int(problems[i]) > int(k):\\n\\t\\tb = i\\n\\t\\tb += 1\\n\\t\\tbreak\\nif int(n) == 1:\\n\\tif int(problems[0]) <= int(k):\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\tprint(0)\\nelif a == b:\\n\\tif b == 0:\\n\\t\\tprint(n)\\n\\telse:\\n\\t\\tprint(int(n) - 1)\\nelse:\\n\\tprint(int(n) - (b - a))\\n\", \"inp = input()\\ninp = inp.split(' ')\\nlevel = int(inp[1])\\nproblem_set_string = input()\\nproblem_set_string = problem_set_string.split(' ')\\npset = []\\nfor current_problem in problem_set_string:\\n\\tpset.append(int(current_problem))\\nnum_problems = 0\\nfor x in range(len(pset)):\\n\\tif len(pset) > 1:\\n\\t\\tif pset[0] <= level:\\n\\t\\t\\tnum_problems += 1\\n\\t\\t\\tpset.pop(0)\\n\\tif len(pset) > 1:\\n\\t\\tif pset[-1] <= level:\\n\\t\\t\\tnum_problems += 1\\n\\t\\t\\tpset.pop(-1)\\nif pset[0] <= level:\\n\\tnum_problems += 1\\nprint(num_problems)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nr = 0\\nz = 0\\nc = 0\\nfor j in range(n):\\n\\tx = a[j]\\n\\tif x <= k:\\n\\t\\tr = r + 1\\n\\telse:\\n\\t\\tbreak\\nfor o in range(n, 0, -1):\\n\\tif a[o - 1] <= k:\\n\\t\\tz = z + 1\\n\\telse:\\n\\t\\tbreak\\ns = r + z\\nif s > n:\\n\\ts = s // 2\\n\\tprint(s)\\nelse:\\n\\tprint(s)\\n\", \"(a, b) = map(int, input().split())\\nli = list(map(int, input().split()))\\n(x, y) = (0, a - 1)\\nflag = 0\\nfor i in range(len(li)):\\n\\tif li[x] <= b:\\n\\t\\tx += 1\\n\\t\\tflag += 1\\n\\telif li[y] <= b:\\n\\t\\ty -= 1\\n\\t\\tflag += 1\\n\\telif li[x] < b and li[y] < b:\\n\\t\\tbreak\\nprint(flag)\\n\", \"import sys\\nfrom collections import Counter\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef list3d(a, b, c, d):\\n\\treturn [[[d] * c for j in range(b)] for i in range(a)]\\n\\ndef list4d(a, b, c, d, e):\\n\\treturn [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\n\\ndef ceil(x, y=1):\\n\\treturn int(-(-x // y))\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST(N=None):\\n\\treturn list(MAP()) if N is None else [INT() for i in range(N)]\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\n(N, K) = MAP()\\nA = LIST()\\nif max(A) <= K:\\n\\tprint(N)\\n\\texit()\\nans = 0\\nfor i in range(N):\\n\\tif A[i] > K:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nfor i in range(N - 1, -1, -1):\\n\\tif A[i] > K:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nl = [int(i) for i in input().split()]\\nc = 0\\nflag = 0\\nwhile flag < 1:\\n\\tif len(l) == 0:\\n\\t\\tbreak\\n\\tif l[0] <= k:\\n\\t\\tl.pop(0)\\n\\t\\tc = c + 1\\n\\telif l[len(l) - 1] <= k:\\n\\t\\tl.pop(len(l) - 1)\\n\\t\\tc = c + 1\\n\\telif l[0] > k and l[len(l) - 1] > k:\\n\\t\\tflag = 1\\n\\telif len(l) == 0:\\n\\t\\tflag = 1\\nprint(c)\\n\", \"s = input()\\n(n, k) = [int(x) for x in s.split()]\\ns = input()\\na = [int(x) for x in s.split()]\\nans = 0\\nwhile len(a) > 0 and a[0] <= k:\\n\\tdel a[0]\\nwhile len(a) > 0 and a[len(a) - 1] <= k:\\n\\tdel a[len(a) - 1]\\nprint(n - len(a))\\n\", \"(n, m) = input().split()\\n(n, m) = (int(n), int(m))\\nlst = list()\\nlst = input().split()\\nans = 0\\ntry:\\n\\twhile (m >= int(lst[0]) or m >= int(lst[len(lst) - 1])) and len(lst) > 0:\\n\\t\\tif m >= int(lst[0]):\\n\\t\\t\\tlst.pop(0)\\n\\t\\t\\tans += 1\\n\\t\\tif m >= int(lst[len(lst) - 1]):\\n\\t\\t\\tlst.pop()\\n\\t\\t\\tans += 1\\nexcept:\\n\\tpass\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nm = max(l)\\nc1 = 0\\nc2 = 0\\nif m <= k:\\n\\tprint(n)\\n\\texit(0)\\nfor x in l:\\n\\tif x > k:\\n\\t\\tbreak\\n\\tc1 += 1\\nfor i in range(n - 1, -1, -1):\\n\\tif l[i] > k:\\n\\t\\tbreak\\n\\tc2 += 1\\nprint(c1 + c2)\\n\", \"def solve(lst, pts):\\n\\tif len(lst) == 0:\\n\\t\\treturn 0\\n\\telif pts >= lst[0]:\\n\\t\\treturn solve(lst[1:], pts) + 1\\n\\telif pts >= lst[len(lst) - 1]:\\n\\t\\treturn solve(lst[:len(lst) - 1], pts) + 1\\n\\telse:\\n\\t\\treturn 0\\n(n, k) = [int(t) for t in input().split()]\\nx = [int(t) for t in input().split()]\\nprint(solve(x, k))\\n\", \"nk = [int(x) for x in input().split()]\\nn = nk[0]\\nk = nk[1]\\narr = [int(x) for x in input().split()]\\ni = 0\\nwhile i < n and arr[i] <= k:\\n\\ti += 1\\nflag = False\\nif i == n:\\n\\tflag = True\\n\\tprint(n)\\nj = 1\\nwhile j < n + 1 and arr[-1 * j] <= k:\\n\\tj += 1\\nif not flag:\\n\\tprint(i + j - 1)\\n\", \"(n, m) = map(int, input().split())\\nx = list(map(int, input().split()))\\ncount = 0\\nflag = True\\nfor i in x:\\n\\tif i <= m:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tflag = False\\n\\t\\tbreak\\nif flag == False:\\n\\tfor i in x[::-1]:\\n\\t\\tif i <= m:\\n\\t\\t\\tcount = count + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nA = [int(i) for i in input().split()]\\nl = 0\\nr = n - 1\\nans = 0\\nct = [0] * n\\nfor l in range(n):\\n\\tif A[l] > k:\\n\\t\\tbreak\\n\\tct[l] = 1\\nfor r in range(n - 1, -1, -1):\\n\\tif A[r] > k:\\n\\t\\tbreak\\n\\tct[r] = 1\\nprint(sum(ct))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\na_reversed = list(reversed(a))\\ni = 0\\nj = 0\\nleft_problems_n = 0\\nright_problems_n = 0\\nwhile i < n:\\n\\tif a[i] <= k:\\n\\t\\tleft_problems_n += 1\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tbreak\\nwhile j < n and left_problems_n + right_problems_n != n:\\n\\tif a_reversed[j] <= k:\\n\\t\\tright_problems_n += 1\\n\\t\\tj += 1\\n\\telse:\\n\\t\\tbreak\\nprint(left_problems_n + right_problems_n)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nfor x in range(n):\\n\\tif a[x] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor x in reversed(range(n)):\\n\\tif a[x] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nif c >= n:\\n\\tprint(n)\\nelse:\\n\\tprint(c)\\n\", \"rd = lambda : list(map(int, input().split()))\\n(n, k) = rd()\\na = rd()\\nL = 0\\nr = n - 1\\nans = 0\\nwhile L < n - 1:\\n\\tif a[L] > k:\\n\\t\\tbreak\\n\\tL += 1\\n\\tans += 1\\nwhile r >= 0 and r >= L:\\n\\tif a[r] > k:\\n\\t\\tbreak\\n\\tans += 1\\n\\tr -= 1\\nprint(ans)\\n\", \"import sys\\n\\ndef mp():\\n\\treturn list(map(int, input().split()))\\nif 0:\\n\\tf = open('input.txt', 'r')\\n\\tinput = f.readline\\n\\ndef _main():\\n\\t(n, k) = mp()\\n\\ta = mp()\\n\\tans = 0\\n\\tT = False\\n\\tfor i in range(n):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tT = 1\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif T:\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(n)\\n_main()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nl = 0\\nans = 0\\ninds = []\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tl = i\\n\\t\\tinds.append(i)\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nr = n - 1\\nfor i in reversed(range(n)):\\n\\tif i not in inds and a[i] <= k:\\n\\t\\tr = i\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"a = input().split()\\nlimit = int(a[1])\\nskills = list(map(int, input().split()))\\nlength = len(skills)\\ni = 0\\nwhile skills[0] <= limit and len(skills) > 1:\\n\\tskills.remove(skills[0])\\n\\ti = i + 1\\nskills.reverse()\\nwhile skills[0] <= limit and len(skills) > 1:\\n\\tskills.remove(skills[0])\\n\\ti = i + 1\\nif skills[0] <= limit:\\n\\ti = i + 1\\nprint(i)\\n\", \"import sys\\n(n, k) = map(int, sys.stdin.readline().split())\\nan = list(map(int, sys.stdin.readline().split()))\\nans = 0\\ni = 0\\nwhile i < n and an[i] <= k:\\n\\ti += 1\\n\\tans += 1\\nj = n - 1\\nwhile j >= i and an[j] <= k:\\n\\tj -= 1\\n\\tans += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\narr = [int(x) for x in input().split()]\\nmins = []\\nfor i in range(len(arr)):\\n\\tif arr[i] > k:\\n\\t\\tmins.append(i)\\nif not mins:\\n\\tprint(n)\\nelse:\\n\\tprint(mins[0] - 1 + (n - mins[-1]))\\n\", \"(n, k) = map(int, input().strip().split())\\nproblem = list(map(int, input().strip().split()))\\ncount = 0\\ni = 0\\nwhile i < len(problem) and problem[i] <= k:\\n\\tcount += 1\\n\\tdel problem[i]\\nproblem = list(reversed(problem))\\ni = 0\\nwhile i < len(problem) and problem[i] <= k:\\n\\tcount += 1\\n\\tdel problem[i]\\nprint(count)\\n\", \"def int_lst_input():\\n\\treturn [int(val) for val in input().split(' ')]\\n\\ndef int_input():\\n\\treturn int(input())\\n\\ndef print_lst(lst):\\n\\tprint(' '.join([str(val) for val in lst]))\\n\\ndef solve():\\n\\t(n, k) = int_lst_input()\\n\\ta = int_lst_input()\\n\\t(i, j) = (0, n - 1)\\n\\tc = 0\\n\\twhile i <= j and (a[i] <= k or a[j] <= k):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\ti += 1\\n\\t\\telif a[j] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tj -= 1\\n\\tprint(c)\\nsolve()\\n\", \"x = list(map(int, input().split()))\\ny = list(map(int, input().split()))\\nt = 0\\nfor i in range(len(y)):\\n\\tif y[i] <= x[1]:\\n\\t\\tt = t + 1\\n\\telse:\\n\\t\\tbreak\\nfor j in range(-1, -(len(y) - i), -1):\\n\\tif y[j] <= x[1]:\\n\\t\\tt = t + 1\\n\\telse:\\n\\t\\tbreak\\nprint(t)\\n\", \"R = lambda : map(int, input().split())\\n(n, k) = R()\\na = list(R())\\nf = lambda l: next((i for (i, x) in enumerate(l) if x > k))\\ntry:\\n\\tr = f(a) + f(a[::-1])\\nexcept:\\n\\tr = len(a)\\nprint(r)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ncnt = 0\\nind = 0\\nfor i in range(len(l)):\\n\\tif l[i] > k:\\n\\t\\tbreak\\n\\tcnt += 1\\n\\tind = i\\nfor i in range(n - 1, ind, -1):\\n\\tif l[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"(n, k) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\nanswer = 0\\nwhile len(a) > 0:\\n\\tif a[0] <= k:\\n\\t\\ta.pop(0)\\n\\t\\tanswer += 1\\n\\telif a[-1] <= k:\\n\\t\\ta.pop(len(a) - 1)\\n\\t\\tanswer += 1\\n\\telse:\\n\\t\\tprint(answer)\\n\\t\\tquit()\\nprint(n)\\n\", \"(n, k) = [int(__) for __ in input().strip().split()]\\narr = [int(__) for __ in input().strip().split()]\\nans = 0\\nwhile True and len(arr) > 0:\\n\\tif arr[0] <= k:\\n\\t\\tans += 1\\n\\t\\tarr = arr[1:]\\n\\telse:\\n\\t\\tbreak\\narr = arr[::-1]\\nwhile True and len(arr) > 0:\\n\\tif arr[0] <= k:\\n\\t\\tans += 1\\n\\t\\tarr = arr[1:]\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nwhile a != []:\\n\\tif a[0] <= k:\\n\\t\\tc += 1\\n\\t\\tdel a[0]\\n\\telif a[-1] <= k:\\n\\t\\tc += 1\\n\\t\\tdel a[-1]\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"l = [int(x) for x in input().split()]\\nn = l[0]\\nk = l[1]\\nl = [int(x) for x in input().split()]\\ncount = 0\\nfor i in range(len(l)):\\n\\tn = len(l)\\n\\tif l[0] > k and l[n - 1] > k:\\n\\t\\tbreak\\n\\telif l[0] <= k:\\n\\t\\tdel l[0]\\n\\t\\tcount += 1\\n\\telif l[n - 1] <= k:\\n\\t\\tdel l[n - 1]\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\nwhile len(a) != 0 and (a[0] <= k or a[-1] <= k):\\n\\tif a[0] <= k and len(a) != 0:\\n\\t\\tcount += 1\\n\\t\\ta.pop(0)\\n\\telif a[-1] <= k and len(a) != 0:\\n\\t\\tcount += 1\\n\\t\\ta.pop(-1)\\nprint(count)\\n\", \"number_of_testcases = 1\\nfor _ in range(number_of_testcases):\\n\\t(number_of_problems, solving_skill) = map(int, input().split())\\n\\tdifficulty_level = list(map(int, input().split()))\\n\\tmax_prob_sol = 0\\n\\twhile difficulty_level != []:\\n\\t\\tif difficulty_level[0] <= solving_skill:\\n\\t\\t\\tmax_prob_sol += 1\\n\\t\\t\\tdifficulty_level.pop(0)\\n\\t\\telif difficulty_level[-1] <= solving_skill:\\n\\t\\t\\tmax_prob_sol += 1\\n\\t\\t\\tdifficulty_level.pop(-1)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(max_prob_sol)\\n\", \"import os\\nimport sys\\nfrom math import *\\nfrom collections import *\\nfrom bisect import *\\nfrom io import BytesIO, IOBase\\n\\ndef vsInput():\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nALPHA = 'abcdefghijklmnopqrstuvwxyz/'\\nM = 1000000007\\nEPS = 1e-06\\n\\ndef Ceil(a, b):\\n\\treturn a // b + int(a % b > 0)\\n\\ndef value():\\n\\treturn tuple(map(int, input().split()))\\n\\ndef array():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef Int():\\n\\treturn int(input())\\n\\ndef Str():\\n\\treturn input()\\n\\ndef arrayS():\\n\\treturn [i for i in input().split()]\\n(n, k) = map(int, input().split(' '))\\na = list(map(int, input().split(' ')))\\nwhile len(a) > 0:\\n\\tchk = 0\\n\\tif len(a) > 0 and a[0] <= k:\\n\\t\\ta.pop(0)\\n\\t\\tchk = 1\\n\\tif len(a) > 0 and a[len(a) - 1] <= k:\\n\\t\\ta.pop()\\n\\t\\tchk = 1\\n\\tif chk == 0:\\n\\t\\tbreak\\nprint(n - len(a))\\n\", \"nskill = input().split(' ')\\nn = int(nskill[0])\\nskill = int(nskill[1])\\nprob = input().split(' ')\\nsolved = 0\\nfor i in range(n):\\n\\tif skill >= int(prob[0]):\\n\\t\\tdel prob[0]\\n\\t\\tsolved += 1\\n\\telif skill >= int(prob[-1]):\\n\\t\\tdel prob[-1]\\n\\t\\tsolved += 1\\nprint(solved)\\n\", \"s = input()\\n(n, k) = s.split()\\na = input()\\nleft = a.split()\\nright = left[::-1]\\ntimel = ''\\ntimer = ''\\nfor x in range(int(n)):\\n\\tif int(left[x]) > int(k):\\n\\t\\tif timel == '':\\n\\t\\t\\ttimel = x\\n\\t\\telif timer != '' and timel != '':\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tpass\\n\\tif int(right[x]) > int(k):\\n\\t\\tif timer == '':\\n\\t\\t\\ttimer = x\\n\\t\\telif timer != '' and timel != '':\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tpass\\nif timel == '' and timer == '':\\n\\tprint(int(n))\\nelse:\\n\\tprint(timel + timer)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nfor el in a:\\n\\tif el > k:\\n\\t\\tbreak\\n\\tans += 1\\nif ans == n:\\n\\tprint(n)\\n\\texit()\\nfor el in a[::-1]:\\n\\tif el > k:\\n\\t\\tbreak\\n\\tans += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nans = 0\\nans1 = 0\\nfor i in range(n):\\n\\tif l[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif l[i] <= k:\\n\\t\\tans1 += 1\\n\\telse:\\n\\t\\tbreak\\nif ans == n and ans1 == n:\\n\\tprint(n)\\nelse:\\n\\tprint(ans + ans1)\\n\", \"t = input().strip().split(' ')\\nn = int(t[0])\\ncap = int(t[1])\\nt = input().strip().split(' ')\\nt = [int(e) for e in t]\\nassert len(t) == n\\ncount = 0\\nwhile True:\\n\\tif len(t) == 0:\\n\\t\\tbreak\\n\\tif t.pop() <= cap:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nt = list(reversed(t))\\nwhile True:\\n\\tif len(t) == 0:\\n\\t\\tbreak\\n\\tif t.pop() <= cap:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\ntasks = list(map(int, input().split()))\\nd = deque()\\nfor c in tasks:\\n\\td.append(c)\\nanswer = 0\\nwhile True:\\n\\tif len(d) == 0:\\n\\t\\tbreak\\n\\tl = d.popleft()\\n\\tif l > k:\\n\\t\\td.appendleft(l)\\n\\t\\tbreak\\n\\telse:\\n\\t\\tanswer += 1\\nwhile True:\\n\\tif len(d) == 0:\\n\\t\\tbreak\\n\\tl = d.pop()\\n\\tif l > k:\\n\\t\\td.append(l)\\n\\t\\tbreak\\n\\telse:\\n\\t\\tanswer += 1\\nprint(answer)\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inara():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n(n, k) = invr()\\nara = inara()\\nans = set()\\nl = 0\\nwhile l < n:\\n\\tif ara[l] <= k:\\n\\t\\tans.add(l)\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tbreak\\nr = n - 1\\nwhile r >= 0:\\n\\tif ara[r] <= k:\\n\\t\\tans.add(r)\\n\\t\\tr -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(len(ans))\\n\", \"(size, capacity) = map(int, input().split())\\narr = list(map(int, input().split()))\\ncou = 0\\nfor i in arr:\\n\\tif i <= capacity:\\n\\t\\tcou += 1\\n\\telse:\\n\\t\\tbreak\\nif cou != len(arr):\\n\\tfor i in range(len(arr) - 1, -1, -1):\\n\\t\\tif arr[i] <= capacity:\\n\\t\\t\\tcou += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(cou)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nlc = 0\\nrc = 0\\ni = 0\\nm = 0\\nwhile k >= a.pop(0):\\n\\tlc += 1\\n\\tif len(a) == 0:\\n\\t\\tm = 1\\n\\t\\tbreak\\nif m == 1 or len(a) == 0:\\n\\tprint(lc)\\nelse:\\n\\twhile k >= a.pop():\\n\\t\\trc += 1\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\n\\tprint(rc + lc)\\n\", \"(a, b) = list(map(int, input().split()))\\nt = list(map(int, input().split()))\\ns = 0\\nfor i in range(a):\\n\\tif t[0] <= b:\\n\\t\\tdel t[0]\\n\\t\\ts += 1\\n\\telif t[len(t) - 1] <= b:\\n\\t\\tdel t[len(t) - 1]\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tprint(s)\\n\\t\\tbreak\\nif len(t) == 0:\\n\\tprint(s)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nsolved = 0\\ni = 0\\nwhile i < n and a[i] <= k:\\n\\tsolved += 1\\n\\ti += 1\\nend = i\\ni = n - 1\\nwhile a[i] <= k and i > end:\\n\\tsolved += 1\\n\\ti -= 1\\nprint(solved)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nb = a[::-1]\\nsolved = [0] * n\\n(lc, rc) = (0, 0)\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tsolved[i] = 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n):\\n\\tif b[i] <= k:\\n\\t\\tsolved[n - 1 - i] = 1\\n\\telse:\\n\\t\\tbreak\\nprint(solved.count(1))\\n\", \"c = input()\\nl1 = c.split()\\nn = int(l1[0])\\nk = int(l1[1])\\nl2 = input()\\nl3 = l2.split()\\nl = []\\nfor i in l3:\\n\\tl.append(int(i))\\nnb = 0\\nwhile l != []:\\n\\tif l[0] <= k:\\n\\t\\tnb = nb + 1\\n\\t\\tl.pop(0)\\n\\telif l[len(l) - 1] <= k:\\n\\t\\tnb = nb + 1\\n\\t\\tl.pop(len(l) - 1)\\n\\telse:\\n\\t\\tbreak\\nprint(nb)\\n\", \"def func():\\n\\tconstraints = list(map(int, input().split()))\\n\\tarr = list(map(int, input().split()))\\n\\tcount = 0\\n\\twhile len(arr) > 0:\\n\\t\\tif arr[0] <= constraints[1]:\\n\\t\\t\\tarr.pop(0)\\n\\t\\t\\tcount += 1\\n\\t\\telif arr[len(arr) - 1] <= constraints[1]:\\n\\t\\t\\tarr.pop(len(arr) - 1)\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(count)\\nfunc()\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\ncount = 0\\nwhile arr[0] <= k:\\n\\tcount += 1\\n\\tarr.pop(0)\\n\\tif len(arr) == 0:\\n\\t\\tbreak\\nif len(arr) != 0:\\n\\twhile arr[len(arr) - 1] <= k:\\n\\t\\tarr.pop(len(arr) - 1)\\n\\t\\tcount += 1\\nprint(count)\\n\", \"r = input().split()\\nn = int(r[0])\\nk = int(r[1])\\nleft = 0\\nright = 0\\ncout = 0\\nn -= 1\\nmas = input().split()\\nwhile int(mas[left]) <= k and left < n:\\n\\tleft += 1\\n\\tcout += 1\\n\\tif left == n:\\n\\t\\tbreak\\nleft -= 1\\nwhile int(mas[n - right]) <= k and n - right > left:\\n\\tright += 1\\n\\tcout += 1\\nprint(cout)\\n\", \"INF = 1 << 60\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nwhile True:\\n\\tif len(a) == 0:\\n\\t\\tbreak\\n\\tif a[0] <= k:\\n\\t\\ta = a[1:]\\n\\t\\tans += 1\\n\\telif a[-1] <= k:\\n\\t\\ta = a[:-1]\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nc = 0\\nd = 0\\nfor x in range(len(a)):\\n\\tif a[x] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor x in range(len(a) - 1, 0, -1):\\n\\tif a[x] <= k:\\n\\t\\td += 1\\n\\telse:\\n\\t\\tbreak\\nif c == n:\\n\\tprint(c)\\nelif d == n:\\n\\tprint(d)\\nelse:\\n\\tprint(d + c)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\na = deque(map(int, input().split()))\\nwhile a and (a[0] <= k or a[-1] <= k):\\n\\tif a[0] <= k:\\n\\t\\ta.popleft()\\n\\telse:\\n\\t\\ta.pop()\\nprint(n - len(a))\\n\", \"(n, m) = map(int, input().split())\\nlst = [int(x) for x in input().split()]\\nl = 0\\nr = n - 1\\nwhile l < n:\\n\\tif lst[l] > m:\\n\\t\\tbreak\\n\\tl += 1\\nwhile r > l:\\n\\tif lst[r] > m:\\n\\t\\tbreak\\n\\tr -= 1\\nprint(n - (r - l) - 1)\\n\", \"(n, k) = map(int, input().split())\\nL = list(map(int, input().split()))\\n(i, j) = (0, n - 1)\\nc = 0\\nwhile i < n:\\n\\tif L[i] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\n\\ti = i + 1\\nwhile j >= 0 and j > i - 1:\\n\\tif L[j] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\n\\tj = j - 1\\nprint(c)\\n\", \"(n, m) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i < n:\\n\\tif a[i] > m:\\n\\t\\tbreak\\n\\telse:\\n\\t\\ti = i + 1\\nj = n - 1\\nwhile j >= i:\\n\\tif a[j] > m:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tj = j - 1\\nprint(n - (j - i + 1))\\n\", \"(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nfrom collections import deque\\nq = deque(A)\\nfor i in range(len(q)):\\n\\tif q[0] <= k:\\n\\t\\tq.popleft()\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(q)):\\n\\tif q[-1] <= k:\\n\\t\\tq.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(q))\\n\", \"a = input().split()\\nn = int(a[0])\\nk = int(a[1])\\nb = list(map(int, input().split()))\\nx = 0\\ny = n - 1\\ncount = 0\\nwhile x <= y:\\n\\tif b[x] <= k:\\n\\t\\tx += 1\\n\\t\\tcount += 1\\n\\telif b[y] <= k:\\n\\t\\ty -= 1\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nd = input().split()\\nfor i in range(len(d)):\\n\\td[i] = int(d[i])\\nci = 0\\ncj = 0\\nfor i in range(n):\\n\\tif d[i] > k:\\n\\t\\tbreak\\n\\tci += 1\\nfor j in range(-1, -n - 1, -1):\\n\\tif d[j] > k:\\n\\t\\tbreak\\n\\tcj += 1\\nif ci + cj > n:\\n\\tprint(n)\\nelse:\\n\\tprint(ci + cj)\\n\", \"(n, k) = map(int, input().split())\\nA = map(int, input().split())\\nA = ''.join(('1' if a <= k else '0' for a in A))\\nprint(n - len(A.strip('1')))\\n\", \"nums = [int(i) for i in input().split()]\\narr = [int(i) for i in input().split()]\\nk = nums[1]\\nleft = 0\\nright = 0\\nfor i in range(len(arr)):\\n\\tif arr[i] > k:\\n\\t\\tleft = i + 1\\n\\t\\tbreak\\nfor i in range(len(arr) - 1, -1, -1):\\n\\tif arr[i] > k:\\n\\t\\tright = i + 1\\n\\t\\tbreak\\nif left == 0 and right == 0 and (len(arr) != 1):\\n\\tres = len(arr)\\nelif len(arr) == 1:\\n\\tif arr[0] <= k:\\n\\t\\tres = 1\\n\\telse:\\n\\t\\tres = 0\\nelse:\\n\\tres = len(arr) - (right - left + 1)\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\nls = list(map(int, input().split()))\\nfront = back = -1\\nfor i in range(n):\\n\\tif ls[i] > k and front == -1:\\n\\t\\tfront = i\\n\\tif ls[n - i - 1] > k and back == -1:\\n\\t\\tback = n - i - 1\\nif front == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(n - back + front - 1)\\n\", \"(n, k) = map(int, input().strip().split())\\ndiff = list(map(int, input().strip().split()))\\nl = 0\\nr = n - 1\\ncount = 0\\nwhile l < n and diff[l] <= k:\\n\\tl += 1\\nwhile r >= 0 and diff[r] <= k:\\n\\tr -= 1\\nif r == n - 1:\\n\\tr + 1\\nif l == n and r == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(l + (n - r - 1))\\n\", \"m = list(map(int, input().split()))\\nn = list(map(int, input().split()))\\nmax = 0\\ncounter = 0\\ni = 0\\nj = m[0] - 1\\nwhile True:\\n\\tif n[i] <= m[1] or n[j] <= m[1]:\\n\\t\\tif n[i] >= n[j]:\\n\\t\\t\\tj -= 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\t\\tcounter += 1\\n\\telse:\\n\\t\\tbreak\\n\\tif i > j:\\n\\t\\tbreak\\nprint(counter)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i < n:\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\ti += 1\\nans = i\\ni = n - 1\\nwhile i > -1:\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\ti -= 1\\nans += n - 1 - i\\nprint(min(ans, n))\\n\", \"(n, k) = map(int, input().split())\\nara = list(map(int, input().split()))\\nans = 0\\nwhile len(ara) > 0 and ara[0] <= k:\\n\\tara.pop(0)\\n\\tans += 1\\nwhile len(ara) > 0 and ara[-1] <= k:\\n\\tara.pop(-1)\\n\\tans += 1\\nprint(ans)\\n\", \"(hm, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncnt = 0\\n(l, r) = (0, len(a) - 1)\\nwhile l <= r and a[l] <= k:\\n\\tl += 1\\n\\tcnt += 1\\nwhile l <= r and a[r] <= k:\\n\\tr -= 1\\n\\tcnt += 1\\nprint(cnt)\\n\", \"(n, k) = map(int, input().split())\\nlst = list(map(int, input().split()))\\ncnt = 0\\nwhile n and lst[0] <= k:\\n\\tlst.pop(0)\\n\\tn -= 1\\n\\tcnt += 1\\nwhile n and lst[n - 1] <= k:\\n\\tlst.pop(n - 1)\\n\\tn -= 1\\n\\tcnt += 1\\nprint(cnt)\\n\", \"(n, k) = list(map(int, input().split()))\\nproblems = list(map(int, input().split()))\\ni = 0\\nm = 0\\nfor digit in problems:\\n\\tif digit <= k:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tm = 1\\n\\t\\tbreak\\nfor digit in problems[::-1]:\\n\\tif digit <= k:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tm = 1\\n\\t\\tbreak\\nif m == 0:\\n\\tprint(int(i / 2))\\nelse:\\n\\tprint(i)\\n\", \"(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\ni = 0\\nj = 0\\nl = 0\\nwhile l < n:\\n\\tif A[i] <= k:\\n\\t\\tA.remove(A[i])\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tl += 1\\n\\t\\tbreak\\nA.reverse()\\nm = 0\\no = len(A)\\nwhile m < o:\\n\\tif A[j] <= k:\\n\\t\\tA.remove(A[j])\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tm += 1\\n\\t\\tbreak\\nf = len(A)\\nprint(n - f)\\n\", \"(a, b) = [int(s) for s in input().split()]\\ntest = [int(s) for s in input().split()]\\n(count, count1) = (0, 0)\\nfor i in test:\\n\\tif i > b:\\n\\t\\tbreak\\n\\tcount += 1\\nfor j in test[::-1]:\\n\\tif j > b:\\n\\t\\tbreak\\n\\tcount1 += 1\\nif count + count1 > a:\\n\\tprint(a)\\nelse:\\n\\tprint(count + count1)\\n\", \"(n, k) = [int(s) for s in input().split(' ')]\\nlist = [int(s) for s in input().split(' ')]\\nfor i in range(0, n):\\n\\tif k >= list[0]:\\n\\t\\tlist.pop(0)\\n\\telse:\\n\\t\\tbreak\\nfor i in range(0, n):\\n\\tif len(list) > 0 and k >= list[len(list) - 1]:\\n\\t\\tlist.pop(len(list) - 1)\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(list))\\n\", \"(n, k) = map(int, input().split())\\nlistik = list(map(int, input().split()))\\n(counter, j) = (0, 1)\\nfor i in range(2):\\n\\tfor i in listik:\\n\\t\\tif i <= k:\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif j == 1:\\n\\t\\tlistik = listik[counter:][::-1]\\nprint(counter)\\n\", \"(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nAns = 0\\nfor i in range(N):\\n\\tif A[i] <= K:\\n\\t\\tAns += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(N):\\n\\tif A[N - 1 - i] <= K:\\n\\t\\tAns += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(N, Ans))\\n\", \"(n, k) = list(map(int, input().split()))\\nx = list(map(int, input().split()))\\ncount = 0\\nwhile len(x) != 0 and (x[0] <= k or x[-1] <= k):\\n\\tif x[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel x[0]\\n\\telif x[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel x[-1]\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nd = 0\\ne = 0\\nj = len(l)\\nwhile len(l) != 0:\\n\\tif e % 2 == 0:\\n\\t\\tif l[0] <= k:\\n\\t\\t\\tl.pop(0)\\n\\t\\telse:\\n\\t\\t\\tc = 1\\n\\tif e % 2 != 0:\\n\\t\\tif l[-1] <= k:\\n\\t\\t\\tl.pop()\\n\\t\\telse:\\n\\t\\t\\td = 1\\n\\tif c == 1 and d == 1:\\n\\t\\tbreak\\n\\te = e + 1\\nprint(j - len(l))\\n\", \"(n, skill) = map(int, input().split())\\ntasks = list(map(int, input().split()))\\nl = r = 0\\nfor i in range(n):\\n\\tif tasks[i] > skill:\\n\\t\\tl = i\\n\\t\\tbreak\\nelse:\\n\\tl = n\\nfor j in range(n - 1, -1, -1):\\n\\tif tasks[j] > skill:\\n\\t\\tr = j\\n\\t\\tbreak\\nelse:\\n\\tr = -1\\nprint(n if l > r else n - (r - l + 1))\\n\", \"(n, m) = map(int, input().split())\\nl = list(map(int, input().split()))\\ns = 0\\nwhile True:\\n\\tif len(l) > 0:\\n\\t\\tif l[0] <= m:\\n\\t\\t\\ts += 1\\n\\t\\t\\tdel l[0]\\n\\t\\telif l[-1] <= m:\\n\\t\\t\\ts += 1\\n\\t\\t\\tdel l[-1]\\n\\t\\telse:\\n\\t\\t\\tprint(s)\\n\\t\\t\\texit()\\n\\telse:\\n\\t\\tprint(s)\\n\\t\\texit()\\n\", \"(n, k) = map(int, input().split())\\nai = list(map(int, input().split()))\\ncnt = 0\\nres = None\\nfor i in range(n):\\n\\tif ai[i] > k:\\n\\t\\tres = i\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcnt += 1\\nif res != None:\\n\\trev_ai = ai[res:][::-1]\\n\\tfor i in rev_ai:\\n\\t\\tif i > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcnt += 1\\nprint(cnt)\\n\", \"import sys\\ninput = sys.stdin.readline\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\n\\ndef f(a):\\n\\tfor i in range(len(a)):\\n\\t\\tif a[i] > k:\\n\\t\\t\\treturn i\\n\\treturn len(a)\\n\\ndef g(a):\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tif a[j] > k:\\n\\t\\t\\treturn j\\n\\treturn len(a)\\nw = a[:f(a)]\\ne = a[g(a):-1]\\nif len(w) == len(a):\\n\\tprint(len(w))\\nelse:\\n\\tprint(len(w) + len(e))\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ncount = 0\\nwhile len(a) > 0:\\n\\tif a[-1] <= k:\\n\\t\\ta.reverse()\\n\\tb = a.pop(0)\\n\\tif b > k:\\n\\t\\tbreak\\n\\tcount += 1\\nprint(count)\\n\", \"(totalProblems, skill) = list(map(int, input().split(' ')))\\nproblems = list(map(int, input().split(' ')))\\nlowerBound = totalProblems - 1\\nfor i in range(totalProblems):\\n\\tif problems[i] > skill:\\n\\t\\tlowerBound = i - 1\\n\\t\\tbreak\\nfor i in range(totalProblems):\\n\\tif totalProblems - 1 - i == lowerBound:\\n\\t\\tprint(totalProblems)\\n\\t\\tbreak\\n\\telif problems[totalProblems - 1 - i] > skill:\\n\\t\\tprint(lowerBound + 1 + i)\\n\\t\\tbreak\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nwhile a and (a[0] <= k or a[-1] <= k):\\n\\tif a[0] <= k:\\n\\t\\ta = a[1:]\\n\\t\\tc += 1\\n\\tif not a:\\n\\t\\tbreak\\n\\tif a[-1] <= k:\\n\\t\\ta = a[:-1]\\n\\t\\tc += 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nif max(a) <= k:\\n\\tprint(n)\\nelse:\\n\\ti = 0\\n\\tj = n - 1\\n\\twhile a[i] <= k:\\n\\t\\ti += 1\\n\\twhile a[j] <= k:\\n\\t\\tj -= 1\\n\\tprint(n - (j - i + 1))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = 0\\ni = 0\\nz = True\\nwhile i < n and z:\\n\\tif a[i] <= k:\\n\\t\\ts = s + 1\\n\\t\\ti = i + 1\\n\\telse:\\n\\t\\tz = False\\nif s == n:\\n\\tprint(s)\\nelse:\\n\\ti = n - 1\\n\\tz = True\\n\\twhile z and i > 0:\\n\\t\\tif a[i] <= k:\\n\\t\\t\\ts = s + 1\\n\\t\\t\\ti = i - 1\\n\\t\\telse:\\n\\t\\t\\tz = False\\n\\tprint(s)\\n\", \"(a, b) = [int(z) for z in input().split(' ')]\\nc = input().split(' ')\\nt = True\\nx = 0\\ny = 0\\nfor i in range(a):\\n\\tif b >= int(c[i]) and t:\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tt = False\\n\\tif not t:\\n\\t\\tif b >= int(c[i]):\\n\\t\\t\\ty += 1\\n\\t\\telse:\\n\\t\\t\\ty = 0\\nprint(x + y)\\n\", \"import math\\nimport string\\ns = str(input()).split()\\nn = int(s[0])\\nk = int(s[1])\\na = []\\ns.clear()\\ns = str(input()).split()\\ntot = 0\\nfor i in range(0, n):\\n\\ta.append(int(s[i]))\\nfor i in range(0, n):\\n\\tif a[i] <= k:\\n\\t\\ttot += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(0, n):\\n\\tif a[n - i - 1] <= k:\\n\\t\\ttot += 1\\n\\telse:\\n\\t\\tbreak\\nif tot > n:\\n\\ttot = n\\nprint(tot)\\n\", \"ip = [int(x) for x in input().split()]\\nn = ip[0]\\nk = ip[1]\\nproblist = [int(x) for x in input().split()]\\nsolved = 0\\niterator = 0\\nstart = 0\\nend = n - 1\\nlf = 0\\nrf = 0\\nfor i in range(n):\\n\\tif problist[start] <= k:\\n\\t\\tstart += 1\\n\\t\\tlf += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n):\\n\\tif problist[end] <= k:\\n\\t\\tend -= 1\\n\\t\\trf += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(n, lf + rf))\\n\", \"(N, K) = map(int, input().split())\\nS = list(map(int, input().split()))\\ncount = 0\\nfor i in range(N):\\n\\tif S[i] <= K:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nS.reverse()\\nn = count\\nfor i in range(0, N - n):\\n\\tif S[i] <= K:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"from collections import *\\n(n, r) = map(int, input().split())\\ndq = deque([int(x) for x in input().split()])\\nwhile 1:\\n\\tif len(dq) == 0:\\n\\t\\tbreak\\n\\tif dq[0] <= r:\\n\\t\\tdq.popleft()\\n\\telif dq[-1] <= r:\\n\\t\\tdq.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(dq))\\n\", \"(n, k) = list(map(int, input().split()))\\nprob = list(map(int, input().split()))\\nMax = 0\\ni = 0\\nwhile i < len(prob):\\n\\tif prob[i] <= k:\\n\\t\\ti += 1\\n\\t\\tMax += 1\\n\\telse:\\n\\t\\tbreak\\nif i < len(prob):\\n\\ti = 1\\n\\twhile i < len(prob):\\n\\t\\tif prob[-i] <= k:\\n\\t\\t\\ti += 1\\n\\t\\t\\tMax += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(Max)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(j) for j in input().split()]\\ng = 0\\nwhile a[0] <= k or a[len(a) - 1] <= k:\\n\\tif a[0] <= k:\\n\\t\\ta.pop(0)\\n\\telif a[len(a) - 1] <= k:\\n\\t\\ta.pop()\\n\\tg += 1\\n\\tif len(a) == 0:\\n\\t\\tbreak\\nprint(g)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\na = deque(list(map(int, input().split())))\\nwhile len(a) > 0 and a[0] <= k:\\n\\ta.popleft()\\nwhile len(a) > 0 and a[-1] <= k:\\n\\ta.pop()\\nprint(n - len(a))\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\na = 0\\nb = 0\\nfor i in range(n):\\n\\tif k < arr[i]:\\n\\t\\tbreak\\n\\telse:\\n\\t\\ta += 1\\nfor i in range(n):\\n\\tif k < arr[n - i - 1]:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tb += 1\\nif a == b and b == n:\\n\\tprint(n)\\nelse:\\n\\tprint(a + b)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nk1 = 0\\nk2 = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tk1 += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tk2 += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(k1 + k2, n))\\n\", \"(n, k) = map(int, input().split())\\nu = list(map(int, input().split()))\\nans = 0\\nwhile 1 == 1:\\n\\tok = 0\\n\\tif u[0] <= k:\\n\\t\\tans += 1\\n\\t\\tok = 1\\n\\t\\tu.pop(0)\\n\\tif len(u) > 0 and u[-1] <= k:\\n\\t\\tans += 1\\n\\t\\tu.pop()\\n\\t\\tok = 1\\n\\tif not ok or len(u) == 0:\\n\\t\\tprint(ans)\\n\\t\\tbreak\\n\", \"def main():\\n\\t(n, k) = map(int, input().split())\\n\\tx = list(map(int, input().split()))\\n\\tresult = 0\\n\\tfor i in range(n):\\n\\t\\tif x[i] <= k:\\n\\t\\t\\tresult += 1\\n\\t\\t\\tx[i] += k\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in reversed(x):\\n\\t\\tif i <= k:\\n\\t\\t\\tresult += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(result)\\nmain()\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\ncount = 0\\na = list(map(int, input().split(' ')))\\nfor i in range(n - 1, -1, -1):\\n\\tif a[0] > a[i]:\\n\\t\\tif a[i] <= k:\\n\\t\\t\\ta.pop()\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telif a[0] <= k:\\n\\t\\ta.remove(a[0])\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, x) = map(int, input().split())\\nA = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\ncount = 0\\nwhile i <= j:\\n\\tif A[i] <= x:\\n\\t\\tcount += 1\\n\\t\\ti += 1\\n\\telif A[j] <= x:\\n\\t\\tcount += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split(' ')]\\ndificulties = [int(i) for i in input().split(' ')]\\nsolve = 0\\nfor i in dificulties:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tsolve += 1\\nfor i in dificulties[::-1]:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tsolve += 1\\nif solve == 2 * n:\\n\\tprint(n)\\nelse:\\n\\tprint(solve)\\n\", \"(n, k) = map(int, input().split())\\ntasks = list(map(int, input().split()))\\n(l, r) = (0, len(tasks) - 1)\\nres = 0\\nwhile l <= r:\\n\\tif tasks[l] <= k:\\n\\t\\tres += 1\\n\\t\\tl += 1\\n\\telif tasks[r] <= k:\\n\\t\\tres += 1\\n\\t\\tr -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\nA = [*map(int, input().split())]\\n(l, r) = (0, 0)\\nfor i in range(n):\\n\\tif A[i] <= k:\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tbreak\\nfor j in range(n - 1, l, -1):\\n\\tif A[j] <= k:\\n\\t\\tr += 1\\n\\telse:\\n\\t\\tbreak\\nprint(l + r)\\n\", \"ans = 0\\n(a, b) = map(int, input().split())\\nl = list(map(int, input().split()))\\nfor x in range(len(l)):\\n\\tif l[x] <= b:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tfor x in range(len(l) - 1, 0, -1):\\n\\t\\t\\tif l[x] <= b:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nprint(ans)\\n\", \"import sys\\nimport collections\\nmod = 10 ** 9 + 7\\nINF = float('inf')\\n\\ndef inp():\\n\\treturn int(sys.stdin.readline())\\n\\ndef inpl():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n(n, k) = inpl()\\nq = collections.deque(inpl())\\nwhile q:\\n\\tnow = q.popleft()\\n\\tif now > k:\\n\\t\\tq.appendleft(now)\\n\\t\\tbreak\\nwhile q:\\n\\tnow = q.pop()\\n\\tif now > k:\\n\\t\\tq.append(now)\\n\\t\\tbreak\\nprint(n - len(q))\\n\", \"(n, k) = map(int, input().split())\\nans = 0\\nans1 = 0\\na = list(map(int, input().split()))\\nfor t in range(n):\\n\\tif a[t] > k:\\n\\t\\tbreak\\n\\tans = t + 1\\na.reverse()\\nfor t in range(n):\\n\\tif a[t] > k:\\n\\t\\tbreak\\n\\tans1 = t + 1\\nprint(min(ans1 + ans, n))\\n\", \"(n, k) = map(int, input().split())\\ns = [int(i) for i in input().split()]\\nc = 0\\nfor i in range(n):\\n\\tif s[i] <= k:\\n\\t\\ts[i] = k + 1\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n):\\n\\tif s[-i - 1] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nl = [int(i) for i in input().split()]\\na = 0\\nwhile len(l) > 0:\\n\\tif l[0] <= k or l[-1] <= k:\\n\\t\\tif l[0] <= k:\\n\\t\\t\\tl.remove(l[0])\\n\\t\\telse:\\n\\t\\t\\tl.pop()\\n\\t\\ta += 1\\n\\telse:\\n\\t\\tbreak\\nprint(a)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nwhile True:\\n\\tif len(l) == 0:\\n\\t\\tbreak\\n\\tif l[0] <= k:\\n\\t\\tl.remove(l[0])\\n\\telif l[len(l) - 1] <= k:\\n\\t\\tdel l[len(l) - 1]\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(l))\\n\", \"k = input().split()\\nn = int(k[0])\\nk = int(k[1])\\ns = 0\\na = input().split()\\nfor i in range(n):\\n\\tif int(a[i]) > k:\\n\\t\\tbreak\\n\\twhile int(a[i]) <= k:\\n\\t\\ts += 1\\n\\t\\ta[i] = k + 1\\nfor i in range(n - 1, 0, -1):\\n\\tif int(a[i]) > k:\\n\\t\\tbreak\\n\\twhile int(a[i]) <= k:\\n\\t\\ts += 1\\n\\t\\ta[i] = k + 1\\nprint(s)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nhead = 0\\ntail = len(a) - 1\\nans = 0\\nwhile True:\\n\\tif head == tail and a[head] <= k:\\n\\t\\tans += 1\\n\\t\\tbreak\\n\\tif head > tail:\\n\\t\\tbreak\\n\\tif max(a[head], a[tail]) <= k:\\n\\t\\tans += 2\\n\\t\\thead += 1\\n\\t\\ttail -= 1\\n\\t\\tcontinue\\n\\tif a[head] <= k < a[tail]:\\n\\t\\tans += 1\\n\\t\\thead += 1\\n\\t\\tcontinue\\n\\tif a[tail] <= k < a[head]:\\n\\t\\tans += 1\\n\\t\\ttail -= 1\\n\\t\\tcontinue\\n\\tif k < min(a[head], a[tail]):\\n\\t\\tbreak\\nprint(ans)\\n\", \"c = 0\\n(n, k) = map(int, input().split())\\na = [int(i) for i in input().split()]\\nfor i in range(n):\\n\\tif a[0] <= k:\\n\\t\\tc += 1\\n\\t\\tdel a[0]\\n\\telif a[len(a) - 1] <= k:\\n\\t\\tc += 1\\n\\t\\tdel a[len(a) - 1]\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"i = input\\n(n, k) = map(int, i().split())\\nl = [*map(int, i().split())]\\nc = 0\\nind1 = 0\\nind2 = n - 1\\nwhile ind1 != n and l[ind1] <= k:\\n\\tc += 1\\n\\tind1 += 1\\nwhile ind2 > ind1 and l[ind2] <= k:\\n\\tc += 1\\n\\tind2 -= 1\\nprint(c)\\n\", \"(a, b) = map(int, input().split())\\nc = list(map(int, input().split()))\\nd = [0] * a\\nn = 0\\nfor i in range(a):\\n\\tif c[i] <= b and d[i] == 0:\\n\\t\\tn += 1\\n\\t\\td[i] = 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(a - 1, -1, -1):\\n\\tif c[i] <= b and d[i] == 0:\\n\\t\\tn += 1\\n\\t\\td[i] = 1\\n\\telse:\\n\\t\\tbreak\\nprint(n)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nl = 0\\nr = n - 1\\nc = 0\\nif max(a) <= k:\\n\\tprint(n)\\nelse:\\n\\twhile l <= n - 1:\\n\\t\\tif a[l] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tl += 1\\n\\t\\telif a[l] > k:\\n\\t\\t\\tbreak\\n\\twhile r >= 0:\\n\\t\\tif a[r] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tr -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncou = 0\\nwhile len(a) >= 1 and a[-1] <= k:\\n\\tdel a[-1]\\n\\tcou += 1\\na = a[::-1]\\nwhile len(a) >= 1 and a[-1] <= k:\\n\\tdel a[-1]\\n\\tcou += 1\\nprint(cou)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = 0\\nwhile len(a) > 0 and (a[0] <= k or a[-1] <= k):\\n\\tif a[0] <= k:\\n\\t\\ts += 1\\n\\t\\tdel a[0]\\n\\tif len(a) > 0:\\n\\t\\tif a[-1] <= k:\\n\\t\\t\\ts += 1\\n\\t\\t\\tdel a[-1]\\nprint(s)\\n\", \"inp = input().split(' ')\\nn = int(inp[0])\\nk = int(inp[1])\\ninp = input().split(' ')\\ncount = 0\\nfor num in inp:\\n\\tif int(num) <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nfor idx in range(n - 1, count, -1):\\n\\tif int(inp[idx]) <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"entrada = input().split(' ')\\narr = input().split(' ')\\nn = int(entrada[0])\\nk = int(entrada[1])\\ncount_l = 0\\ncount_r = 0\\nfor i in range(n):\\n\\tif int(arr[i]) <= k:\\n\\t\\tcount_r += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, 0, -1):\\n\\tif int(arr[i]) <= k:\\n\\t\\tcount_l += 1\\n\\telse:\\n\\t\\tbreak\\nif count_r == n or count_l == n:\\n\\tprint(n)\\nelse:\\n\\tprint(count_l + count_r)\\n\", \"(n, m) = input().split()\\nn = int(n)\\nm = int(m)\\ncount = 0\\nl = input().split()\\nl = [int(i) for i in l]\\nbegin = 0\\nend = n - 1\\nwhile True:\\n\\tif l[begin] <= m:\\n\\t\\tcount += 1\\n\\t\\tbegin = begin + 1\\n\\telif l[end] <= m:\\n\\t\\tcount += 1\\n\\t\\tend = end - 1\\n\\telse:\\n\\t\\tbreak\\n\\tif begin == n or end == -1:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\nl = []\\nm = []\\nif a[0] <= k or a[-1] <= k:\\n\\tfor i in a:\\n\\t\\tif i > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tl.append(i)\\n\\tfor j in range(len(a) - 1, -1, -1):\\n\\t\\tif a[j] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tm.append(a[j])\\nif len(a) > len(m) or len(a) > len(l):\\n\\tprint(len(l) + len(m))\\nelse:\\n\\tprint(len(a))\\n\", \"import sys\\n\\nclass main:\\n\\n\\tdef __init__(self):\\n\\t\\t(n, k) = (int(s) for s in sys.stdin.readline().rstrip().split(' '))\\n\\t\\tproblems = [int(s) for s in sys.stdin.readline().rstrip().split(' ')]\\n\\t\\tbegin = 0\\n\\t\\tend = 0\\n\\t\\tfor (key, value) in enumerate(problems):\\n\\t\\t\\tif value > k:\\n\\t\\t\\t\\tbegin = key\\n\\t\\t\\t\\tbreak\\n\\t\\tfor (key, value) in enumerate(problems[::-1]):\\n\\t\\t\\tif value > k:\\n\\t\\t\\t\\tend = key\\n\\t\\t\\t\\tbreak\\n\\t\\tif problems[0] > k and problems[-1] > k:\\n\\t\\t\\tprint(0)\\n\\t\\telif begin == 0 and end == 0:\\n\\t\\t\\tprint(len(problems))\\n\\t\\telse:\\n\\t\\t\\tprint(begin + end)\\n\\t\\tpass\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nq = w = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\tq += 1\\nif q == n:\\n\\tprint(n)\\nelse:\\n\\ta.reverse()\\n\\tfor i in range(n):\\n\\t\\tif a[i] > k:\\n\\t\\t\\tbreak\\n\\t\\tw += 1\\n\\tprint(q + w)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nif max(l) <= k:\\n\\tprint(n)\\nelse:\\n\\twhile l[0] <= k or l[-1] <= k:\\n\\t\\tif l[0] <= k:\\n\\t\\t\\tl = l[1:]\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tl = l[:len(l) - 1]\\n\\t\\t\\tc += 1\\n\\tprint(c)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nnum = 0\\ninp = input().split()\\nq = []\\nfor i in inp:\\n\\tq.append(int(i))\\nwhile len(q) > 0:\\n\\tif q[0] <= k:\\n\\t\\tq.pop(0)\\n\\t\\tnum += 1\\n\\telif q[-1] <= k:\\n\\t\\tq.pop(-1)\\n\\t\\tnum += 1\\n\\telif q[0] > k and q[-1] > k:\\n\\t\\tbreak\\nprint(num)\\n\", \"from collections import defaultdict\\n\\ndef main():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tL = 0\\n\\tR = n - 1\\n\\tres = 0\\n\\twhile L <= R:\\n\\t\\tif a[L] <= k:\\n\\t\\t\\tres += 1\\n\\t\\t\\tL += 1\\n\\t\\telif a[R] <= k:\\n\\t\\t\\tres += 1\\n\\t\\t\\tR -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(res)\\nmain()\\n\", \"def solve(test):\\n\\t(n, k) = map(int, input().split())\\n\\tans = 0\\n\\ta = list(map(int, input().split()))\\n\\tif k >= max(a):\\n\\t\\tans = n\\n\\telse:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif a[i] <= k:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tif a[i] <= k:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\tprint(ans)\\nt = 1\\nfor _ in range(t):\\n\\tsolve(_ + 1)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\nm = 0\\nwhile (a[i] <= k or a[j] <= k) and i <= j:\\n\\tif i == j:\\n\\t\\tprint(m + 1 if a[i] <= k else m)\\n\\t\\texit()\\n\\tif a[i] <= k:\\n\\t\\tm += 1\\n\\t\\ti += 1\\n\\telif a[j] <= k:\\n\\t\\tm += 1\\n\\t\\tj -= 1\\nprint(m)\\n\", \"(z, w, m) = (input, int, sorted)\\n(a, b) = map(int, z().split())\\nl = list(map(int, z().split()))\\nc = 0\\nd = 0\\nfor i in l:\\n\\tif i <= b:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in l[::-1]:\\n\\tif i <= b:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nif c >= a:\\n\\tc = a\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nf = f1 = -1\\nfor i in range(n):\\n\\tif f == -1:\\n\\t\\tif a[i] > k:\\n\\t\\t\\tf = i\\n\\tif f1 == -1:\\n\\t\\tif a[n - i - 1] > k:\\n\\t\\t\\tf1 = i\\nprint(f + f1 if f + f1 >= 0 else n)\\n\", \"(n, m) = map(int, input().split())\\nls = list(map(int, input().split()))\\ncnt = 0\\n(L, R) = (0, n - 1)\\nwhile L < n and ls[L] <= m:\\n\\tL += 1\\n\\tcnt += 1\\nwhile R > L and ls[R] <= m:\\n\\tR -= 1\\n\\tcnt += 1\\nprint(cnt)\\n\", \"def inp():\\n\\treturn map(int, input().split())\\n(n, k) = inp()\\na = list(inp())\\nans = 0\\ni = 0\\nwhile i != n and a[i] <= k:\\n\\tans += 1\\n\\ti += 1\\nj = n - 1\\nwhile i < j and a[j] <= k:\\n\\tans += 1\\n\\tj -= 1\\nprint(ans)\\n\", \"x = input().split()\\nn = int(x[0])\\nk = int(x[1])\\nc = 0\\ny = input().split()\\nfor i in range(n):\\n\\ty[i] = int(y[i])\\nfor j in range(n):\\n\\tif y[j] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tw = j\\n\\t\\tbreak\\nif c != n:\\n\\tfor q in range(n):\\n\\t\\tif y[n - 1 - q] <= k and n - 1 - q > w:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(c)\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, queue, copy\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\nmod = 10 ** 9 + 7\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef S():\\n\\treturn input()\\n\\ndef main():\\n\\t(n, k) = LI()\\n\\tl1 = LI()\\n\\tl2 = copy.deepcopy(l1)\\n\\tl2.reverse()\\n\\tmx1 = mx2 = 0\\n\\tf = True\\n\\tfor (i, x) in enumerate(l1):\\n\\t\\tif k < x:\\n\\t\\t\\tf = False\\n\\t\\t\\tmx1 = max(mx1, i)\\n\\t\\t\\tbreak\\n\\tif f:\\n\\t\\treturn n\\n\\tfor (i, x) in enumerate(l2):\\n\\t\\tif k < x:\\n\\t\\t\\tf = False\\n\\t\\t\\tmx2 = max(mx2, i)\\n\\t\\t\\tbreak\\n\\tif f:\\n\\t\\treturn n\\n\\treturn mx1 + mx2\\nprint(main())\\n\", \"__author__ = 'Dilshod'\\n(n, k) = map(int, input().split())\\nm = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(n):\\n\\tif m[0] <= m[-1] and m[0] <= k:\\n\\t\\tdel m[0]\\n\\t\\tcnt += 1\\n\\telif m[0] > m[-1] and m[-1] <= k:\\n\\t\\tdel m[-1]\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(i, ans) = (0, 0)\\nwhile a[i] <= k and i < n - 1:\\n\\tans += 1\\n\\ti += 1\\nwhile a[n - 1] <= k and n - 1 >= i:\\n\\tans += 1\\n\\tn = n - 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nm = 0\\na = [int(i) for i in input().split()]\\nwhile a[0] <= k:\\n\\tm += 1\\n\\tdel a[0]\\n\\tn -= 1\\n\\tif n == 0:\\n\\t\\tbreak\\nif n > 0:\\n\\twhile a[n - 1] <= k:\\n\\t\\tm += 1\\n\\t\\tdel a[n - 1]\\n\\t\\tn -= 1\\n\\t\\tif n == 0:\\n\\t\\t\\tbreak\\nprint(m)\\n\", \"input = __import__('sys').stdin.readline\\nMIS = lambda : map(int, input().split())\\n(n, k) = MIS()\\nprob = list(MIS())\\nwhile prob and prob[0] <= k:\\n\\tprob.pop(0)\\nwhile prob and prob[-1] <= k:\\n\\tprob.pop()\\nprint(n - len(prob))\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nf1 = 0\\nf2 = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tf1 += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tf2 += 1\\n\\telse:\\n\\t\\tbreak\\nprint(f1 + f2 if f1 + f2 <= n else n)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\nwhile len(a) != 0:\\n\\tif k >= a[0]:\\n\\t\\tcount += 1\\n\\t\\ta.pop(0)\\n\\telif k >= a[-1]:\\n\\t\\tcount += 1\\n\\t\\ta.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"a = input().split()\\nn = int(a[0])\\nk = int(a[1])\\na = input().split()\\nx = 0\\nz = 0\\nwhile x < 2:\\n\\tif len(a) == 0:\\n\\t\\tbreak\\n\\tif x == 0:\\n\\t\\tif int(a[0]) <= k:\\n\\t\\t\\tz += 1\\n\\t\\t\\ta = a[1:]\\n\\t\\telse:\\n\\t\\t\\tx = 1\\n\\tif x == 1:\\n\\t\\tif int(a[-1]) <= k:\\n\\t\\t\\tz += 1\\n\\t\\t\\ta = a[:-1]\\n\\t\\telse:\\n\\t\\t\\tx = 2\\nprint(z)\\n\", \"(n, po) = list(map(int, input().split()))\\nop = list(map(int, input().split()))\\nkam = len(op)\\ncou = 0\\nfor x in range(kam):\\n\\tif len(op) > 1:\\n\\t\\tif op[0] <= po:\\n\\t\\t\\top.remove(op[0])\\n\\t\\t\\tcou += 1\\n\\t\\telif op[-1] <= po:\\n\\t\\t\\top[-1] = 555555\\n\\t\\t\\top.remove(op[-1])\\n\\t\\t\\tcou += 1\\n\\t\\telse:\\n\\t\\t\\tprint(cou)\\n\\t\\t\\tbreak\\n\\telif len(op) == 1:\\n\\t\\tif op[0] <= po:\\n\\t\\t\\tcou += 1\\n\\t\\t\\tprint(cou)\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tprint(cou)\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tprint(cou)\\n\\t\\tbreak\\n\", \"(n, k) = map(int, input().split())\\na = ''.join(map(lambda x: '01'[int(x) <= k], input().split()))\\nprint(n if '0' not in a else n - a.rindex('0') + a.index('0') - 1)\\n\", \"from bisect import bisect\\nfrom collections import defaultdict\\nfrom math import gcd, sqrt, ceil\\nfrom collections import Counter\\nimport sys\\nsys.setrecursionlimit(10 ** 9)\\n(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ncount = 0\\nwhile True:\\n\\tif l[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tl.pop()\\n\\telif l[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tl.pop(0)\\n\\telse:\\n\\t\\tbreak\\n\\tif l == []:\\n\\t\\tbreak\\nprint(count)\\n\", \"def I():\\n\\treturn map(int, input().split())\\n(n, k) = I()\\na = list(I())\\nwhile a:\\n\\tif a[0] <= k:\\n\\t\\ta.pop(0)\\n\\telif a[-1] <= k:\\n\\t\\ta.pop(-1)\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(a))\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nl = [int(x) for x in input().split()]\\nc = 0\\nwhile True:\\n\\tx = len(l)\\n\\tif x == 0:\\n\\t\\tbreak\\n\\tif l[0] <= k:\\n\\t\\tdel l[0]\\n\\t\\tc += 1\\n\\t\\tcontinue\\n\\tif l[x - 1] <= k:\\n\\t\\tdel l[x - 1]\\n\\t\\tc += 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nwhile a:\\n\\tif a[0] > k and a[-1] > k:\\n\\t\\tbreak\\n\\tif a[0] <= k:\\n\\t\\ta.pop(0)\\n\\t\\tc += 1\\n\\telif a[-1] <= k:\\n\\t\\ta.pop()\\n\\t\\tc += 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\n(l, c) = (list(map(int, input().split())), 0)\\nfor i in l:\\n\\tif i <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nif c == n:\\n\\tprint(c)\\nelse:\\n\\tl = l[::-1]\\n\\tfor i in l:\\n\\t\\tif i <= k:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(c)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\na = [int(i) for i in input().split()]\\nschet = 0\\no = 0\\nwhile o < n and a[o] <= k:\\n\\tschet = schet + 1\\n\\to = o + 1\\no = -1\\nwhile o > -n - 1 and a[o] <= k:\\n\\tschet = schet + 1\\n\\to = o - 1\\nif schet > n:\\n\\tprint(n)\\nelse:\\n\\tprint(schet)\\n\", \"n = input()\\n(n, k) = n.split()\\n(n, k) = (int(n), int(k))\\ny = input().split()\\nx = []\\nfor i in range(n):\\n\\tx.append(int(y[i]))\\ncount = 0\\nflag = 0\\nfor i in range(n):\\n\\tif x[i] > k:\\n\\t\\tflag = i\\n\\t\\tbreak\\n\\tcount += 1\\n\\tif i == n - 1:\\n\\t\\tflag = n\\nfor i in range(n - 1, flag, -1):\\n\\tif x[i] > k:\\n\\t\\tbreak\\n\\tcount += 1\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\narr = [int(i) for i in input().split()]\\ncount = 0\\nwhile len(arr) > 0 and arr[0] <= k:\\n\\tcount += 1\\n\\tarr.pop(0)\\nwhile len(arr) > 0 and arr[-1] <= k:\\n\\tcount += 1\\n\\tarr.pop(-1)\\nprint(count)\\n\", \"p = [int(n) for n in input().split()]\\nd = [int(m) for m in input().split()]\\ncount = 0\\nfor i in range(len(d)):\\n\\tif d[i] <= p[1]:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nj = len(d) - 1\\nwhile j > i:\\n\\tif d[j] <= p[1]:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\n\\tj = j - 1\\nprint(count)\\n\", \"(n, k) = [int(x) for x in input().split(' ')]\\na = [int(x) for x in input().split(' ')]\\ncnt = 0\\nfor i in range(len(a)):\\n\\tif a[0] <= k:\\n\\t\\tcnt += 1\\n\\t\\ta.pop(0)\\n\\tif len(a) > 0 and a[len(a) - 1] <= k:\\n\\t\\tcnt += 1\\n\\t\\ta.pop()\\n\\tif len(a) == 0 or (a[0] > k and a[len(a) - 1] > k):\\n\\t\\tbreak\\nprint(cnt)\\n\", \"s = input().split()\\nn = int(s[0])\\nk = int(s[1])\\narr = []\\ns = input().split()\\nfor i in range(n):\\n\\tarr.append(int(s[i]))\\ncounter = 0\\ni = 0\\nleft = n\\nwhile i < n:\\n\\tif arr[i] <= k:\\n\\t\\tcounter += 1\\n\\telse:\\n\\t\\tif i > 0:\\n\\t\\t\\tleft = i - 1\\n\\t\\telse:\\n\\t\\t\\tleft = 0\\n\\t\\tbreak\\n\\ti += 1\\ni = n - 1\\nwhile i > left:\\n\\tif arr[i] <= k:\\n\\t\\tcounter += 1\\n\\telse:\\n\\t\\tbreak\\n\\ti -= 1\\nprint(counter)\\n\", \"(n, k) = map(int, input().split())\\ndilema = [int(x) for x in input().split()]\\nl = 0\\nrezistor = 0\\nfor x in dilema:\\n\\tif x <= k:\\n\\t\\trezistor += 1\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tbreak\\nif n != l:\\n\\tfor x in range(n):\\n\\t\\tn -= 1\\n\\t\\tif dilema[n] <= k:\\n\\t\\t\\trezistor += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\t\\tprint('why im here')\\nprint(rezistor)\\n\", \"problemList = []\\nn = 0\\nk = 0\\n\\ndef FindMax(l: int, r: int):\\n\\tret = 0\\n\\tside = l\\n\\ttwoSidesBlocked = 0\\n\\twhile l <= r:\\n\\t\\tif side == l and problemList[l] <= k:\\n\\t\\t\\tret += 1\\n\\t\\t\\tl += 1\\n\\t\\t\\tside = l\\n\\t\\t\\ttwoSidesBlocked = 0\\n\\t\\telif side == l:\\n\\t\\t\\tif twoSidesBlocked == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tside = r\\n\\t\\t\\ttwoSidesBlocked += 1\\n\\t\\telif side == r and problemList[r] <= k:\\n\\t\\t\\tret += 1\\n\\t\\t\\tr -= 1\\n\\t\\t\\tside = r\\n\\t\\t\\ttwoSidesBlocked = 0\\n\\t\\telif side == r:\\n\\t\\t\\tif twoSidesBlocked == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tside = l\\n\\t\\t\\ttwoSidesBlocked += 1\\n\\treturn ret\\n(n, k) = map(int, input().split())\\nn = int(n)\\nk = int(k)\\nproblemList = list(map(int, input().split()))\\nresult = FindMax(0, n - 1)\\nprint(result)\\n\", \"(a, b) = input().split()\\na = int(a)\\nb = int(b)\\nx = [int(x) for x in input().split()]\\ncnt = 0\\nfor i in x:\\n\\tif i <= b:\\n\\t\\tcnt = cnt + 1\\n\\telse:\\n\\t\\tbreak\\nx.reverse()\\nfor j in x:\\n\\tif j <= b:\\n\\t\\tcnt = cnt + 1\\n\\telse:\\n\\t\\tbreak\\nif cnt > a:\\n\\tprint(a)\\nelse:\\n\\tprint(cnt)\\n\", \"import collections\\n\\nclass Solution:\\n\\n\\tdef solve(self, n, k, problems):\\n\\t\\ti = 0\\n\\t\\tj = n - 1\\n\\t\\tans = 0\\n\\t\\twhile i <= j:\\n\\t\\t\\tleftProblemDifficulty = problems[i]\\n\\t\\t\\trightProblemDifficulty = problems[j]\\n\\t\\t\\tif leftProblemDifficulty <= k:\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telif rightProblemDifficulty <= k:\\n\\t\\t\\t\\tj -= 1\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\treturn ans\\nsol = Solution()\\n[n, k] = list(map(int, input().strip().split()))\\nproblems = list(map(int, input().strip().split()))\\nprint(sol.solve(n, k, problems))\\n\", \"(a, b) = map(int, input().split())\\nc = list(map(int, input().split()))\\nl = []\\nm = []\\nfor i in range(a):\\n\\tif c[i] > b:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tl.append(1)\\nfor i in range(a - 1, -1, -1):\\n\\tif c[i] > b:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tm.append(1)\\nif sum(l) == a:\\n\\tprint(a)\\nelse:\\n\\tprint(sum(l) + sum(m))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nwhile c < n and a[c] <= k:\\n\\tc += 1\\nc1 = n - 1\\nwhile c1 > c and a[c1] <= k:\\n\\tc1 -= 1\\nprint(c + n - 1 - c1)\\n\", \"(n, m) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\ni = 0\\nwhile i < n and a[i] <= m:\\n\\tcount += 1\\n\\ti += 1\\nj = n - 1\\nwhile j > i and a[j] <= m:\\n\\tcount += 1\\n\\tj -= 1\\nprint(count)\\n\", \"def main():\\n\\t(n, k) = list(map(int, input().split()))\\n\\tA = list(map(int, input().split()))\\n\\t(tusk_left, tusk_right) = (0, 0)\\n\\tfor i in A:\\n\\t\\tif i <= k:\\n\\t\\t\\ttusk_left += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif A[i] <= k:\\n\\t\\t\\ttusk_right += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(min(tusk_left + tusk_right, n))\\nmain()\\n\", \"a = [int(q) for q in input().strip().split()]\\nb = [int(q) for q in input().strip().split()]\\nct = 0\\nwhile len(b) > 0:\\n\\tif b[0] <= a[1]:\\n\\t\\tb.remove(b[0])\\n\\t\\tct += 1\\n\\telse:\\n\\t\\tbreak\\nb = b[::-1]\\nwhile len(b) > 0:\\n\\tif b[0] <= a[1]:\\n\\t\\tb.remove(b[0])\\n\\t\\tct += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ct)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount1 = 0\\ncount2 = 0\\nfor i in a:\\n\\tif i <= k:\\n\\t\\tcount1 += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in reversed(a):\\n\\tif i <= k:\\n\\t\\tcount2 += 1\\n\\telse:\\n\\t\\tbreak\\nif count1 + count2 > n:\\n\\tprint(n)\\nelse:\\n\\tprint(count1 + count2)\\n\", \"def solve(i, j):\\n\\tif num[i] > k and num[j] > k:\\n\\t\\treturn 0\\n\\tif i > j:\\n\\t\\treturn 0\\n\\telif i == j:\\n\\t\\treturn 1 if num[i] <= k else 0\\n\\ta = 0\\n\\tb = 0\\n\\tif num[i] <= k:\\n\\t\\ta = 1\\n\\t\\ti += 1\\n\\tif num[j] <= k:\\n\\t\\tb = 1\\n\\t\\tj -= 1\\n\\treturn a + b + solve(i, j)\\n(n, k) = [int(i) for i in input().split()]\\nnum = [int(i) for i in input().split()]\\nprint(solve(0, n - 1))\\n\", \"(n, k) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\ncount = 0\\nwhile True:\\n\\tif a[0] > k and a[-1] > k:\\n\\t\\tbreak\\n\\tif a[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel a[0]\\n\\tif len(a) == 0:\\n\\t\\tbreak\\n\\tif a[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel a[-1]\\n\\tif len(a) == 0:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nc = 0\\nfor d in a:\\n\\tif d <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tfor d in a[::-1]:\\n\\t\\t\\tif d <= k:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nprint(c)\\n\", \"import math\\nfrom collections import *\\nimport sys\\nfrom functools import reduce\\n\\ndef get_ints():\\n\\treturn map(int, input().strip().split())\\n\\ndef get_list():\\n\\treturn list(get_ints())\\n\\ndef get_string():\\n\\treturn list(input().strip().split())\\n\\ndef printxsp(*args):\\n\\treturn print(*args, end='')\\n\\ndef printsp(*args):\\n\\treturn print(*args, end=' ')\\nDIRECTIONS = [[0, 1], [0, -1], [1, 0], [1, -1]]\\nNEIGHBOURS = [(i, j) for i in range(-1, 2) for j in range(-1, 2) if i != 0 or j != 0]\\nOrdUnicode_a = ord('a')\\nOrdUnicode_A = ord('A')\\nCAPS_ALPHABETS = {chr(i + OrdUnicode_A): i for i in range(26)}\\nSMOL_ALPHABETS = {chr(i + OrdUnicode_a): i for i in range(26)}\\nUGLYMOD = int(1000000000.0) + 7\\nSEXYMOD = 998244353\\nMAXN = int(100000.0) + 1\\nINFINITY = float('inf')\\n(n, k) = get_ints()\\nli = get_list()\\nans = 0\\nfor i in li:\\n\\tif i > k:\\n\\t\\tbreak\\n\\tans += 1\\nfor i in li[::-1]:\\n\\tif i > k:\\n\\t\\tbreak\\n\\tans += 1\\nprint(min(ans, n))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nresult = status = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tresult += i\\n\\t\\tstatus = 1\\n\\t\\tbreak\\na.reverse()\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tresult += i\\n\\t\\tbreak\\nif status == 1:\\n\\tprint(result)\\nelse:\\n\\tprint(n)\\n\", \"yoar = list(map(int, input().split()))\\nn = yoar[0]\\nk = yoar[1]\\narr = list(map(int, input().split()))\\nl = -1\\nr = n\\nans = 0\\nfor i in range(n):\\n\\tif arr[i] <= k:\\n\\t\\tl = i\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, i, -1):\\n\\tif arr[i] <= k:\\n\\t\\tr = i\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tbreak\\nans = l + 1 + (n - r)\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nx = list(map(int, input().split()))\\ncnt = 0\\nflag = False\\nfor i in range(n):\\n\\tif x[i] <= k:\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tx.reverse()\\n\\t\\tfor j in range(n):\\n\\t\\t\\tif x[j] <= k:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nprint(cnt)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nans = 0\\nj = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tj = i\\n\\t\\tbreak\\n\\tans += 1\\nelse:\\n\\tj = n\\nfor i in range(n - 1, 0, -1):\\n\\tif j > i or a[i] > k:\\n\\t\\tbreak\\n\\tans += 1\\nprint(ans)\\n\", \"def prog():\\n\\t(n, k) = map(int, input().split())\\n\\tmas = list(map(int, input().split()))\\n\\trez = 0\\n\\tfor i in range(n):\\n\\t\\tif mas[0] <= k:\\n\\t\\t\\trez += 1\\n\\t\\t\\tmas.pop(0)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(len(mas) - 1, -1, -1):\\n\\t\\tif mas[i] <= k:\\n\\t\\t\\trez += 1\\n\\t\\t\\tmas.pop()\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(rez)\\nprog()\\n\", \"from collections import deque\\n\\ndef count_problems(n, k):\\n\\tq = deque(n)\\n\\tcnt = 0\\n\\twhile q:\\n\\t\\tif q[0] <= k:\\n\\t\\t\\tq.popleft()\\n\\t\\t\\tcnt += 1\\n\\t\\telif q[-1] <= k:\\n\\t\\t\\tq.pop()\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(cnt)\\n(n, k) = list(map(int, input().split()))\\nproblems = list(map(int, input().split()))\\ncount_problems(problems, k)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nb = [x > k for x in a]\\nif not any(b):\\n\\tprint(n)\\nelse:\\n\\tl = b.index(True)\\n\\tr = n - b[::-1].index(True) - 1\\n\\tc = r - l + 1\\n\\tprint(n - c)\\n\", \"(n, k) = map(int, input().split())\\nar = list(map(int, input().split()))\\ni = 0\\nfor x in ar:\\n\\tif x > k:\\n\\t\\tbreak\\n\\ti += 1\\nans = i\\nfor x in ar[::-1]:\\n\\tif x > k:\\n\\t\\tbreak\\n\\tans += 1\\nans = min(n, ans)\\nprint(ans)\\n\", \"(a, b) = [int(i) for i in input().split()]\\nS = [int(i) for i in input().split()]\\nk = 0\\nwhile 1:\\n\\tif len(S) == 0:\\n\\t\\tbreak\\n\\tif S[0] <= b:\\n\\t\\tk += 1\\n\\t\\tS = S[1:]\\n\\telse:\\n\\t\\tbreak\\nwhile 1:\\n\\tif len(S) == 0:\\n\\t\\tbreak\\n\\tif S[-1] <= b:\\n\\t\\tk += 1\\n\\t\\tS = S[:-1]\\n\\telse:\\n\\t\\tbreak\\nprint(k)\\n\", \"(n, k) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\ni = 0\\nwhile i < len(a):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\ti += 1\\ncount = i\\nj = len(a) - 1\\nwhile j >= i:\\n\\tif a[j] > k:\\n\\t\\tbreak\\n\\tcount += 1\\n\\tj -= 1\\nprint(count)\\n\", \"l1 = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nc = 0\\nfor i in range(l1[0]):\\n\\tif l[-i - 1] <= l1[1]:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(l1[0]):\\n\\tif c == len(l):\\n\\t\\tbreak\\n\\tif l[i] <= l1[1]:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"rd = lambda : list(map(int, input().split()))\\n(n, k) = rd()\\na = rd()\\nans = 0\\nfor i in range(0, n - 1):\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(ans, n))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(l, r) = (0, 0)\\n(bl, br) = (0, n)\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\tl += 1\\n\\tbl = i\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\tr += 1\\n\\tbr = i\\nif bl < br:\\n\\tprint(l + r)\\nelse:\\n\\tprint(l)\\n\", \"(n, k) = map(int, input().split())\\ns = list(map(int, input().split()))\\nans = 0\\nx = n - 1\\nwhile x > -1:\\n\\tif s[x] <= k:\\n\\t\\tans += 1\\n\\t\\tx -= 1\\n\\telse:\\n\\t\\tbreak\\nx1 = x\\nfor i in range(x1):\\n\\tif s[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = [int(x) for x in input().split()]\\nl = [int(x) for x in input().split()]\\nres = 0\\ni = 0\\nwhile i < n and l[i] <= k:\\n\\ti += 1\\nres = i\\nif i != n:\\n\\ti = n - 1\\n\\twhile l[i] <= k:\\n\\t\\ti -= 1\\n\\tres += max(0, n - i - 1)\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nfor i in a:\\n\\tif i > k:\\n\\t\\tc += 1\\nif c == 0:\\n\\tprint(n)\\nelse:\\n\\tfor i in range(0, n):\\n\\t\\tif a[i] > k:\\n\\t\\t\\tc = i\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif a[i] > k:\\n\\t\\t\\td = i\\n\\t\\t\\tbreak\\n\\tans = n - d + c - 1\\n\\tprint(ans)\\n\", \"(n, k) = tuple(map(int, input().split()))\\na = list(map(int, input().split()))\\nleft = -1\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tleft = i\\n\\t\\tbreak\\nright = -1\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] > k:\\n\\t\\tright = i\\n\\t\\tbreak\\nif left == -1 or right == -1:\\n\\tprint(str(n))\\nelse:\\n\\tprint(str(n - (right - left + 1)))\\n\", \"a = input()\\nb = input()\\nlist1 = a.split(' ')\\nn = int(list1[0])\\nk = int(list1[1])\\nlist2 = b.split(' ')\\nL = int(list2[0])\\nR = int(list2[-1])\\ncount = 0\\nwhile (L <= k or R <= k) and count < n:\\n\\tL = int(list2[0])\\n\\tR = int(list2[-1])\\n\\tif L <= k:\\n\\t\\tlist2.pop(0)\\n\\t\\tcount = count + 1\\n\\telif R <= k:\\n\\t\\tlist2.pop(-1)\\n\\t\\tcount = count + 1\\nprint(count)\\n\", \"(a, b) = input().split()\\n(a, b) = (int(a), int(b))\\nk = 0\\nc = input().split()\\nfor i in range(a):\\n\\tif int(c[i]) > b:\\n\\t\\tbreak\\n\\telif c[i] != '-1':\\n\\t\\tif int(c[i]) <= b:\\n\\t\\t\\tc[i] = '-1'\\n\\t\\t\\tk += 1\\nfor i in range(a):\\n\\tif int(c[-(i + 1)]) > b:\\n\\t\\tbreak\\n\\telif c[-(i + 1)] != '-1':\\n\\t\\tc[-(i + 1)] = '-1'\\n\\t\\tk += 1\\nprint(k)\\n\", \"(n, k) = list(map(int, input().split()))\\np = 0\\na = list(map(int, input().split()))\\nq = [1] * n\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\telif q[i] != 0:\\n\\t\\tq[i] = 0\\n\\t\\tp += 1\\nfor i in range(1, n + 1):\\n\\tif a[-i] > k:\\n\\t\\tbreak\\n\\telif q[-i] != 0:\\n\\t\\tq[-i] = 0\\n\\t\\tp += 1\\nprint(p)\\n\", \"import logging\\nfrom collections import deque\\n\\ndef solve(sequence, k):\\n\\tn = len(sequence)\\n\\tq = deque(sequence)\\n\\twhile q and (q[0] <= k or q[-1] <= k):\\n\\t\\tif q[0] <= k:\\n\\t\\t\\tq.popleft()\\n\\t\\telif q[-1] <= k:\\n\\t\\t\\tq.pop()\\n\\treturn n - len(q)\\n\\ndef main():\\n\\t(_, k) = map(int, input().strip().split())\\n\\tsequence = [int(x) for x in input().strip().split()]\\n\\tresult = solve(sequence, k)\\n\\tprint(result)\\nmain()\\n\", \"from collections import Counter, defaultdict\\nBS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\\n\\ndef to_base(s, b):\\n\\tres = ''\\n\\twhile s:\\n\\t\\tres += BS[s % b]\\n\\t\\ts //= b\\n\\treturn res[::-1] or '0'\\nalpha = 'abcdefghijklmnopqrstuvwxyz'\\nfrom math import floor, ceil, pi\\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919]\\n\\ndef primef(n, plst=[]):\\n\\tif n == 1:\\n\\t\\treturn plst\\n\\telse:\\n\\t\\tfor m in primes:\\n\\t\\t\\tif n % m == 0:\\n\\t\\t\\t\\treturn primef(n // m, plst + [m])\\n\\t\\treturn primef(1, plst + [n])\\n\\ndef scoreBad(s):\\n\\tres = 0\\n\\tcounter = 0\\n\\twhile True:\\n\\t\\tcur = int(counter)\\n\\t\\tok = True\\n\\t\\tfor i in range(len(s)):\\n\\t\\t\\tres += 1\\n\\t\\t\\tif s[i] == '+':\\n\\t\\t\\t\\tcur += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcur -= 1\\n\\t\\t\\tif cur < 0:\\n\\t\\t\\t\\tok = False\\n\\t\\t\\t\\tbreak\\n\\t\\tcounter += 1\\n\\t\\tif ok:\\n\\t\\t\\tbreak\\n\\treturn res\\n\\ndef lmii():\\n\\treturn list(map(int, input().split()))\\n\\ndef ii():\\n\\treturn int(input())\\n(n, m) = lmii()\\nnums = lmii()\\ntot = 0\\nwhile nums:\\n\\ta = nums.pop(0)\\n\\tif a <= m:\\n\\t\\ttot += 1\\n\\telse:\\n\\t\\tbreak\\nwhile nums:\\n\\ta = nums.pop(-1)\\n\\tif a <= m:\\n\\t\\ttot += 1\\n\\telse:\\n\\t\\tbreak\\nprint(tot)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nl = [int(i) for i in input().split()]\\nt = 0\\nend = len(l)\\np = 0\\nwhile p < end and l[p] <= k:\\n\\tt += 1\\n\\tp += 1\\nif p != end:\\n\\tp = end - 1\\n\\twhile p > 0 and l[p] <= k:\\n\\t\\tt += 1\\n\\t\\tp -= 1\\nprint(t)\\n\", \"(n, k) = [int(i) for i in input().split()]\\ntasks = [int(i) for i in input().split()]\\ncount = 0\\nwhile len(tasks) != 1 and tasks[0] <= k:\\n\\tcount += 1\\n\\tdel tasks[0]\\n\\tif len(tasks) == 0:\\n\\t\\tbreak\\nwhile len(tasks) != 1 and tasks[len(tasks) - 1] <= k:\\n\\tcount += 1\\n\\tdel tasks[len(tasks) - 1]\\n\\tif len(tasks) == 0:\\n\\t\\tbreak\\nif len(tasks) == 1:\\n\\tif tasks[0] <= k:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"import re\\nimport math\\nimport decimal\\nimport bisect\\n\\ndef read():\\n\\treturn input().strip()\\n\\ndef iread():\\n\\treturn int(input().strip())\\n\\ndef viread():\\n\\treturn list(map(int, input().strip().split()))\\nfrom collections import deque\\n(n, k) = viread()\\nd = deque(viread())\\nsolved = 0\\nwhile len(d) != 0 and (d[0] <= k or d[-1] <= k):\\n\\tif d[0] <= k:\\n\\t\\td.popleft()\\n\\t\\tsolved += 1\\n\\telif d[-1] <= k:\\n\\t\\td.pop()\\n\\t\\tsolved += 1\\nprint(solved)\\n\", \"(n, k) = [int(x) for x in input().split()]\\nq = [int(x) for x in input().split()]\\nl = 0\\nr = n - 1\\nans = 0\\nwhile l <= r and (q[l] <= k or q[r] <= k):\\n\\tif l == r:\\n\\t\\tans += 1\\n\\t\\tbreak\\n\\tif q[l] <= k:\\n\\t\\tans += 1\\n\\t\\tl += 1\\n\\tif q[r] <= k:\\n\\t\\tans += 1\\n\\t\\tr -= 1\\nprint(ans)\\n\", \"(n, d) = map(int, input().split())\\na = list(map(int, input().split()))\\nif max(a) <= d:\\n\\tprint(n)\\n\\texit()\\nwhile a[0] <= d:\\n\\ta = a[1:]\\nwhile a[-1] <= d:\\n\\ta = a[:-1]\\nprint(n - len(a))\\n\", \"(n, h) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i < n and a[i] <= h:\\n\\ti += 1\\nm = n - 1\\nwhile m > i and a[m] <= h:\\n\\tm -= 1\\nprint(n - (m - i + 1))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = 0\\ni = 0\\nj = n - 1\\nwhile True:\\n\\tif a[i] > k and a[j] > k:\\n\\t\\tbreak\\n\\telif a[j] > k:\\n\\t\\ts += 1\\n\\t\\ti += 1\\n\\telif a[i] > k:\\n\\t\\ts += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\ts += 1\\n\\t\\ti += 1\\n\\tif i == n:\\n\\t\\tbreak\\nprint(s)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\ndict1 = {}\\nans1 = 0\\nflag1 = 0\\nfor i in range(n):\\n\\tif arr[i] > k:\\n\\t\\tans1 = i\\n\\t\\tflag1 = 1\\n\\t\\tbreak\\nans2 = 0\\nflag2 = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif arr[i] > k:\\n\\t\\tans2 = n - 1 - i\\n\\t\\tflag2 = 1\\n\\t\\tbreak\\nif flag1 == 0 or flag2 == 0:\\n\\tprint(n)\\nelse:\\n\\tprint(ans1 + ans2)\\n\", \"(n, m) = map(int, input().split())\\nl = [int(x) for x in input().split()]\\nz = 0\\nfor i in range(0, len(l)):\\n\\tif m >= l[i]:\\n\\t\\tz += 1\\n\\telse:\\n\\t\\tbreak\\nx = 0\\nfor i in range(len(l) - 1, -1, -1):\\n\\tif m >= l[i]:\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tbreak\\nif x + z > len(l):\\n\\tprint(z)\\nelse:\\n\\tprint(x + z)\\n\", \"(n, m) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\nfor i in range(0, len(a)):\\n\\tif a[i] <= m:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nif count == len(a):\\n\\tprint(count)\\n\\texit()\\na.reverse()\\nfor i in range(0, len(a)):\\n\\tif a[i] <= m:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nx = input()\\nx = x.split(' ')\\nflag1 = -1\\nflag2 = -1\\ncount = 0\\nfor i in range(len(x)):\\n\\tif int(x[i]) <= k and flag1 == -1:\\n\\t\\tcount += 1\\n\\tif int(x[i]) > k and flag1 == -1:\\n\\t\\tflag1 = i\\nx.reverse()\\nfor j in range(len(x)):\\n\\tif int(x[j]) <= k and flag1 != -1 and (flag2 == -1):\\n\\t\\tcount += 1\\n\\tif int(x[j]) > k and flag1 != -1 and (flag2 == -1):\\n\\t\\tflag2 = j\\nprint(count)\\n\", \"(n, k) = map(int, input().split(' '))\\nlist1 = list(map(int, input().split(' ')))\\n(p, c) = (0, 0)\\nfor j in range(n):\\n\\tif list1[j] > k:\\n\\t\\tp += 1\\n\\t\\tbreak\\n\\telse:\\n\\t\\tc += 1\\nif p == 0:\\n\\tprint(c)\\nelse:\\n\\tfor j in range(n - 1, 0, -1):\\n\\t\\tif list1[j] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tc += 1\\n\\tprint(c)\\n\", \"(n, k) = [int(x) for x in input().split()]\\nL = [int(x) for x in input().split()]\\ns = 0\\nfor i in L:\\n\\tif i > k:\\n\\t\\ts += 1\\nif s == 0:\\n\\tprint(n)\\nelif s == 1:\\n\\tprint(n - 1)\\nelse:\\n\\tleft = 0\\n\\tright = n - 1\\n\\twhile left < n:\\n\\t\\tif L[left] > k:\\n\\t\\t\\tbreak\\n\\t\\tleft += 1\\n\\twhile right > -1:\\n\\t\\tif L[right] > k:\\n\\t\\t\\tbreak\\n\\t\\tright -= 1\\n\\tprint(left + (n - 1 - right))\\n\", \"from collections import deque\\n(n, k) = list(map(int, input().split()))\\nl = deque(map(int, input().split()))\\ncount = 0\\nwhile l:\\n\\tif l[0] <= k or l[-1] <= k:\\n\\t\\tif l[0] >= l[-1]:\\n\\t\\t\\tl.pop()\\n\\t\\telse:\\n\\t\\t\\tl.popleft()\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"from sys import stdin, stdout\\nfrom collections import deque\\nread = stdin.readline\\nwrite = stdout.write\\nprint = lambda x: write(str(x) + '\\\\n')\\n\\ndef readint():\\n\\treturn int(read())\\n\\nclass Sol:\\n\\n\\t@classmethod\\n\\tdef input(cls):\\n\\t\\treturn cls()\\n\\n\\tdef solve(self):\\n\\t\\t(n, k) = map(int, read().split())\\n\\t\\tarr = deque(map(int, read().split()))\\n\\t\\ttry:\\n\\t\\t\\twhile arr[-1] <= k:\\n\\t\\t\\t\\tarr.pop()\\n\\t\\t\\twhile arr[0] <= k:\\n\\t\\t\\t\\tarr.popleft()\\n\\t\\t\\treturn n - len(arr)\\n\\t\\texcept IndexError:\\n\\t\\t\\treturn n\\nprint(Sol.input().solve())\\n\", \"def main():\\n\\t[n, k] = [int(_) for _ in input().split()]\\n\\tproblems = [int(_) for _ in input().split()]\\n\\ttry:\\n\\t\\ta = next((i for i in range(n) if problems[i] > k))\\n\\t\\tb = next((j for j in range(n - 1, -1, -1) if problems[j] > k))\\n\\t\\tprint(a + (n - 1 - b))\\n\\texcept StopIteration:\\n\\t\\tprint(n)\\nmain()\\n\", \"from collections import deque\\n(n, k) = [int(i) for i in input().split()]\\nseq = deque((int(i) for i in input().split()))\\nwhile seq:\\n\\tif k >= seq[0]:\\n\\t\\tseq.popleft()\\n\\telif k >= seq[-1]:\\n\\t\\tseq.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(seq))\\n\", \"st = [int(i) for i in input().split(' ')]\\nn = st[0]\\nk = st[1]\\nt = 0\\na = [int(n) for n in input().split(' ')]\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\tt += 1\\na = a[::-1]\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\tt += 1\\nif t == 2 * len(a):\\n\\tt = t / 2\\nprint(int(t))\\n\", \"(n, m) = map(int, input().split())\\na = list(map(int, input().split()))\\nhead = 0\\ntail = len(a) - 1\\nres = 0\\nwhile 1:\\n\\tif res == len(a):\\n\\t\\tbreak\\n\\tif a[head] <= m:\\n\\t\\tres += 1\\n\\t\\thead += 1\\n\\telif a[tail] <= m:\\n\\t\\ttail -= 1\\n\\t\\tres += 1\\n\\telse:\\n\\t\\tbreak\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\nA = [int(x) for x in input().split()]\\nif max(A) <= k:\\n\\tprint(n)\\nelse:\\n\\tresult = 0\\n\\ti = 0\\n\\twhile A[i] <= k:\\n\\t\\tresult += 1\\n\\t\\ti += 1\\n\\ti = n - 1\\n\\twhile A[i] <= k:\\n\\t\\tresult += 1\\n\\t\\ti -= 1\\n\\tprint(result)\\n\", \"(N, K) = map(int, input().split(' '))\\narray = [int(i) for i in input().split(' ')]\\ni = 0\\ncount = 0\\nwhile i < N and array[i] <= K:\\n\\tcount += 1\\n\\ti += 1\\nj = N - 1\\nwhile j >= i and array[j] <= K:\\n\\tcount += 1\\n\\tj -= 1\\nprint(count)\\n\", \"l = [int(num) for num in input().split()]\\nl1 = [int(num) for num in input().split()]\\ncount1 = 0\\ncount2 = 0\\nfor i in range(l[0]):\\n\\tif l1[i] <= l[1]:\\n\\t\\tcount1 += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(l[0]):\\n\\tif l1[l[0] - 1 - i] <= l[1]:\\n\\t\\tcount2 += 1\\n\\telse:\\n\\t\\tbreak\\nif count1 == l[0]:\\n\\tprint(count1)\\nelse:\\n\\tprint(count1 + count2)\\n\", \"(n, k) = map(int, input().split())\\nproblems = list(map(int, input().split()))\\n(left, right) = (0, n)\\nfor i in range(n):\\n\\tif k < problems[i]:\\n\\t\\tbreak\\n\\tleft += 1\\nfor i in range(n):\\n\\tif k < problems[n - 1 - i]:\\n\\t\\tbreak\\n\\tright -= 1\\nif left == n:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (right - left))\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\na = deque(a)\\nans = 0\\nwhile len(a) > 0:\\n\\tx = a[0]\\n\\tif x <= k:\\n\\t\\ta.popleft()\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tx = a[-1]\\n\\t\\tif x <= k:\\n\\t\\t\\ta.pop()\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(ans)\\n\", \"from sys import stdin, stdout\\nfrom math import gcd, ceil, sqrt\\nfrom collections import Counter\\nii1 = lambda : int(stdin.readline().strip())\\nis1 = lambda : stdin.readline().strip()\\niia = lambda : list(map(int, stdin.readline().strip().split()))\\nisa = lambda : stdin.readline().strip().split()\\nmod = 1000000007\\n(n, k) = iia()\\narr = iia()\\nres = 0\\nwhile len(arr):\\n\\tif arr[0] <= k:\\n\\t\\tarr.pop(0)\\n\\t\\tres += 1\\n\\telif arr[-1] <= k:\\n\\t\\tarr.pop()\\n\\t\\tres += 1\\n\\telse:\\n\\t\\tbreak\\nprint(res)\\n\", \"NK = list(map(int, input().split()))\\nith = list(map(int, input().split()))\\ni = 0\\nwhile len(ith) > 0:\\n\\tif ith[0] <= NK[1]:\\n\\t\\tdel ith[0]\\n\\telif ith[-1] <= NK[1]:\\n\\t\\tdel ith[-1]\\n\\telif ith[-1] > NK[1] and ith[0] > NK[1]:\\n\\t\\tbreak\\n\\ti += 1\\nprint(i)\\n\", \"(n, k) = input().split()\\ns = [int(w) for w in input().split()]\\nn = int(n)\\nk = int(k)\\nfl = False\\nfr = False\\nfor i in range(n):\\n\\tif s[i] > k:\\n\\t\\tleft = i\\n\\t\\tfl = True\\n\\t\\tbreak\\nfor i in range(n):\\n\\tif s[n - 1 - i] > k:\\n\\t\\tright = n - 1 - i\\n\\t\\tfr = True\\n\\t\\tbreak\\nif fl == False and fr == False:\\n\\tprint(n)\\nelse:\\n\\tprint(left + n - 1 - right)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nb = arr[:]\\ncnt = 0\\nfor i in b:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tarr.remove(i)\\n\\t\\tcnt += 1\\nfor i in range(len(arr) - 1, -1, -1):\\n\\tif arr[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tarr.pop()\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"i = list(map(int, input().strip().split()))\\nj = list(map(int, input().strip().split()))\\ncount = 0\\nq = 0\\nwhile j[q] <= i[1]:\\n\\tcount = count + 1\\n\\tdel j[q]\\n\\ttry:\\n\\t\\tj[q]\\n\\texcept:\\n\\t\\tbreak\\nq = len(j) - 1\\nif q >= 0:\\n\\twhile j[q] <= i[1]:\\n\\t\\tcount = count + 1\\n\\t\\tdel j[q]\\n\\t\\tq = q - 1\\n\\t\\tif q == 0:\\n\\t\\t\\tbreak\\nprint(count)\\n\", \"def main():\\n\\t(n, k) = map(int, input().split(' '))\\n\\ttotal = 0\\n\\tlist1 = list(map(int, input().split(' ')))\\n\\tfor i in range(n):\\n\\t\\tif list1[i] <= k:\\n\\t\\t\\ttotal = total + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\tif list1[i] <= k:\\n\\t\\t\\ttotal = total + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif total > n:\\n\\t\\ttotal = n\\n\\tprint(int(total))\\nmain()\\n\", \"(n, m) = map(int, input().split())\\nS = input()\\na = [int(i) for i in S.split()]\\nans = 0\\nfor i in range(n):\\n\\tif a[i] <= m:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nif ans < n:\\n\\tfor i in reversed(a):\\n\\t\\tif i <= m:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nL = list(map(int, input().split()))\\ni = 0\\nm = n - 1\\nwhile m > i and (L[i] <= k or L[m] <= k):\\n\\tif L[i] <= k:\\n\\t\\ti += 1\\n\\telif L[m] <= k:\\n\\t\\tm -= 1\\nif i == m:\\n\\tif L[i] <= k:\\n\\t\\tprint(i + n - m)\\n\\telse:\\n\\t\\tprint(i + n - m - 1)\\nelse:\\n\\tprint(i + n - m - 1)\\n\", \"from sys import stdin, stdout\\n\\ndef main():\\n\\t(a, k) = map(int, input().split())\\n\\tans = 0\\n\\tarr = [int(x) for x in stdin.readline().split()]\\n\\twhile len(arr) > 0:\\n\\t\\tif k >= arr[len(arr) - 1]:\\n\\t\\t\\tans += 1\\n\\t\\t\\tarr.pop(len(arr) - 1)\\n\\t\\telif k >= arr[0]:\\n\\t\\t\\tans += 1\\n\\t\\t\\tarr.pop(0)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tstdout.write(str(ans))\\nmain()\\n\", \"(n, k) = map(int, input().split())\\narr = [int(X) for X in input().split()]\\nflag = 1\\nno = 0\\nwhile True:\\n\\tif arr == []:\\n\\t\\tbreak\\n\\tif arr[0] <= k:\\n\\t\\tdel arr[0]\\n\\t\\tno += 1\\n\\telif arr[-1] <= k:\\n\\t\\tdel arr[-1]\\n\\t\\tno += 1\\n\\telse:\\n\\t\\tbreak\\nprint(no)\\n\", \"(n, k) = map(int, input().split())\\nc = 0\\na = list(map(int, input().split()))\\nj = n - 1\\ni = 0\\nwhile True:\\n\\tif a[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti += 1\\n\\telif a[j] <= k:\\n\\t\\tc += 1\\n\\t\\tj -= 1\\n\\tif i > j or (a[j] > k and a[i] > k):\\n\\t\\tbreak\\nprint(c)\\n\", \"def main():\\n\\t(n, k) = list(map(int, input().split()))\\n\\ta = list(map(int, input().split()))\\n\\tstart = 0\\n\\tend = n\\n\\twhile start < n and a[start] <= k:\\n\\t\\tstart += 1\\n\\twhile end >= 0 and a[end - 1] <= k:\\n\\t\\tend -= 1\\n\\tif end <= start:\\n\\t\\tprint(n)\\n\\t\\treturn 0\\n\\tprint(n - end + start)\\n\\treturn 0\\nmain()\\n\", \"(n, k) = map(int, input().split())\\nls = list(map(int, input().split()))\\ns = 0\\nfor i in ls:\\n\\tif i > k:\\n\\t\\tbreak\\n\\ts += 1\\nif s != n:\\n\\tfor i in ls[::-1]:\\n\\t\\tif i > k:\\n\\t\\t\\tbreak\\n\\t\\ts += 1\\nprint(s)\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nflag = 0\\ncount = 0\\nfor i in range(len(a)):\\n\\tif a[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tstart = i\\n\\t\\tflag = 1\\n\\t\\tbreak\\nif flag == 1:\\n\\tfor i in range(len(a) - 1, start, -1):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = list(map(int, input().split()))\\ne = 0\\nt = 0\\ni = n - 1\\nwhile a[i] <= k and i >= 0:\\n\\te = e + 1\\n\\ti = i - 1\\na.reverse()\\ni = n - 1\\nwhile a[i] <= k and i >= 0:\\n\\te = e + 1\\n\\ti = i - 1\\nprint(min(n, e))\\n\", \"def main():\\n\\t(n, k) = [int(v) for v in input().split()]\\n\\tvals = [int(v) for v in input().split()]\\n\\td = len(vals)\\n\\twhile len(vals) != 0:\\n\\t\\tchanged = False\\n\\t\\tc = vals[0]\\n\\t\\tif c <= k:\\n\\t\\t\\tvals = vals[1:]\\n\\t\\t\\tchanged = True\\n\\t\\tif changed:\\n\\t\\t\\tcontinue\\n\\t\\tc = vals[-1]\\n\\t\\tif c <= k:\\n\\t\\t\\tvals = vals[:-1]\\n\\t\\t\\tchanged = True\\n\\t\\tif not changed:\\n\\t\\t\\tbreak\\n\\tprint(d - len(vals))\\nmain()\\n\", \"from sys import stdin, stdout\\nnk = list(map(int, stdin.readline().strip().split()))\\nn = nk[0]\\nk = nk[1]\\ndiff_lst = list(map(int, stdin.readline().split()))\\ncount = 0\\ni = 0\\nwhile diff_lst and (diff_lst[0] <= k or diff_lst[-1] <= k):\\n\\tif diff_lst[i] <= k:\\n\\t\\tcount += 1\\n\\t\\tdiff_lst.pop(i)\\n\\t\\tif i != 0:\\n\\t\\t\\ti -= 1\\n\\telse:\\n\\t\\ti = len(diff_lst) - i - 1\\nstdout.write(str(count))\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n):\\n\\tif arr[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\narr = arr[::-1]\\nfor i in range(n):\\n\\tif arr[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nif count == 2 * n:\\n\\tprint(count // 2)\\nelse:\\n\\tprint(count)\\n\", \"tmp = input().split(' ')\\nn = int(tmp[0])\\nl = 0\\nk = int(tmp[1])\\na = input().split(' ')\\nr = 0\\nfor i in a:\\n\\tif int(i) <= k:\\n\\t\\tr = r + 1\\n\\telse:\\n\\t\\tbreak\\nfor i in a[::-1]:\\n\\tif int(i) <= k and r != n:\\n\\t\\tr = r + 1\\n\\telse:\\n\\t\\tbreak\\nprint(r)\\n\", \"(n, k) = input().split(' ')\\nn = int(n)\\nk = int(k)\\nc = input().split(' ', n)\\nc = list(map(int, c))\\nh = 0\\nl = 0\\nfor i in range(0, n):\\n\\tif k > c[i] or k == c[i]:\\n\\t\\th += 1\\n\\t\\tl = i\\n\\telse:\\n\\t\\tl = i\\n\\t\\tbreak\\nif l == 0 and l != n - 1:\\n\\tc.reverse()\\n\\tfor i in c:\\n\\t\\tif k > i or k == i:\\n\\t\\t\\th += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nelif l != 0:\\n\\tfor j in range(n - 1, l, -1):\\n\\t\\tif k > c[j] or k == c[j]:\\n\\t\\t\\th += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(h)\\n\", \"(n, d) = map(int, input().split())\\na = list(map(int, input().split()))\\nc1 = 0\\nans = 0\\nwhile c1 < n and a[c1] <= d:\\n\\tc1 += 1\\n\\tans += 1\\nc2 = n - 1\\nwhile c2 > c1 and a[c2] <= d:\\n\\tc2 -= 1\\n\\tans += 1\\nprint(ans)\\n\", \"(n, k) = input().split()\\n(n, k) = (int(n), int(k))\\nproblems = list(map(int, input().split()))\\nindex = 0\\nreverse = n - 1\\nn = len(problems)\\noutput = []\\nfor i in range(n):\\n\\tif problems[index] <= k:\\n\\t\\toutput.append(problems[index])\\n\\t\\tindex += 1\\n\\telif problems[reverse] <= k:\\n\\t\\toutput.append(problems[reverse])\\n\\t\\treverse -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(len(output))\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nanswer = 0\\nwhile n > 0 and l[0] <= k:\\n\\tanswer += 1\\n\\tl = l[1:]\\n\\tn -= 1\\nwhile n > 0 and l[-1] <= k:\\n\\tanswer += 1\\n\\tl = l[:n - 1]\\n\\tn -= 1\\nprint(answer)\\n\", \"(a, b) = map(int, input().split())\\nar = list(map(int, input().split()))\\nj = 0\\ncount = 0\\ncount1 = 0\\nfor i in range(a):\\n\\tif ar[i] > b:\\n\\t\\tj = i\\n\\t\\tcount1 = 1\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcount += 1\\nif count1 == 1:\\n\\tfor i in range(a - 1, j, -1):\\n\\t\\tif ar[i] > b:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\nelse:\\n\\tprint(count)\\n\", \"(n, m) = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\nul = 0\\nl = 0\\nfor i in range(len(arr)):\\n\\tif arr[i] > m:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tul += 1\\nfor i in reversed(arr):\\n\\tif i > m:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tl += 1\\nprint(min(n, ul + l))\\n\", \"import sys\\n(number_of_problems, skill) = [int(i) for i in input().split()]\\nproblem_array = [int(p) for p in input().split()]\\ncount = 0\\nrunning = True\\nwhile running:\\n\\tif len(problem_array) == 0:\\n\\t\\tprint(number_of_problems)\\n\\t\\tsys.exit()\\n\\telif problem_array[0] <= skill:\\n\\t\\tcount += 1\\n\\t\\tdel problem_array[0]\\n\\telif problem_array[-1] <= skill:\\n\\t\\tcount += 1\\n\\t\\tdel problem_array[-1]\\n\\telse:\\n\\t\\trunning = False\\nprint(count)\\n\", \"(n, k) = map(int, input().split(' '))\\nl = list(map(int, input().split(' ')))\\nc = 0\\nle = len(l)\\nwhile True:\\n\\tif le - c != 0 and l[0] <= k:\\n\\t\\tdel l[0]\\n\\t\\tc += 1\\n\\telif le - c != 0 and l[le - c - 1] <= k:\\n\\t\\tdel l[le - c - 1]\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"NK = [int(x) for x in input().split()]\\nlist = [int(x) for x in input().split()]\\nn = NK[0]\\nk = NK[1]\\nleftPointer = 0\\nrightPointer = n\\nmaxPL = 0\\nmaxPR = 0\\nmaxT = 0\\nif k >= max(list):\\n\\tprint(n)\\nelse:\\n\\tfor i in list:\\n\\t\\tif k >= i:\\n\\t\\t\\tmaxPL += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\tif k >= list[i]:\\n\\t\\t\\tmaxPR += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tmaxT = maxPL + maxPR\\n\\tprint(maxT)\\n\", \"f = lambda : map(int, input().split())\\n(n, k) = f()\\nl = list(f())\\nl1 = ['1' if i <= k else '0' for i in l]\\nprint(n - len(''.join(l1).strip('1')))\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nl = True\\nr = True\\nc = 0\\nwhile (l or r) and len(a) > 0:\\n\\tif a[0] <= k:\\n\\t\\tc += 1\\n\\t\\ta.pop(0)\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tl = False\\n\\tif a[len(a) - 1] <= k:\\n\\t\\tc += 1\\n\\t\\ta.pop()\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tr = False\\nprint(c)\\n\", \"while True:\\n\\ttry:\\n\\t\\t(n, k) = map(int, input().split())\\n\\t\\tlis = list(map(int, input().split()))\\n\\t\\tans = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif lis[i] > k:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tans = ans + 1\\n\\t\\tlis = lis[::-1]\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif lis[i] > k:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tans = ans + 1\\n\\t\\tif ans > n:\\n\\t\\t\\tans = n\\n\\t\\tprint(ans)\\n\\texcept:\\n\\t\\tbreak\\n\", \"b = []\\n(m, k) = input().split()\\ncount = 0\\nb = list(map(int, input().split()))\\nfor i in range(int(m)):\\n\\tif int(k) >= b[i]:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tfor j in range(int(m) - i):\\n\\t\\t\\tif int(k) >= b[int(m) - j - 1]:\\n\\t\\t\\t\\tcount = count + 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nprint(count)\\n\", \"(N, K) = map(int, input().split(' '))\\na = list(map(int, input().split(' ')))\\nj1 = 1\\nj2 = 1\\nco = 0\\nif N % 2 == 0:\\n\\tM = N // 2\\nelse:\\n\\tM = N // 2 + 1\\ni = 0\\nwhile j1 != 0 and i < N:\\n\\tif a[i] <= K and j1 == 1:\\n\\t\\tco = co + 1\\n\\telse:\\n\\t\\tj1 = 0\\n\\t\\tpos = i\\n\\ti = i + 1\\nif j1 == 0:\\n\\ti = pos + 1\\n\\tj = N - 1\\n\\twhile j >= i and j2 != 0:\\n\\t\\tif a[j] <= K and j2 == 1:\\n\\t\\t\\tco = co + 1\\n\\t\\telse:\\n\\t\\t\\tj2 = 0\\n\\t\\tj = j - 1\\nprint(co)\\n\", \"(n, k) = map(int, input().split())\\narr = [int(x) for x in input().split()]\\nctr = 0\\nptr = 0\\nwhile ptr < n and arr[ptr] <= k:\\n\\tctr += 1\\n\\tptr += 1\\nmark = ctr\\nptr = n - 1\\nwhile arr[ptr] <= k and ptr >= mark:\\n\\tptr -= 1\\n\\tctr += 1\\nprint(ctr)\\n\", \"(n, k) = map(int, input().split())\\np = list(map(int, input().split()))\\ntotal = 0\\nfor dif in p:\\n\\tif dif > k:\\n\\t\\tbreak\\n\\ttotal += 1\\nfor remaining in p[total:][::-1]:\\n\\tif remaining > k:\\n\\t\\tbreak\\n\\ttotal += 1\\nprint(total)\\n\", \"(n, k) = map(int, input().split())\\nhard = list(map(int, input().split()))\\nsum = 0\\nfor l in hard:\\n\\tif l <= k:\\n\\t\\tsum += 1\\n\\telse:\\n\\t\\tbreak\\nif sum == n:\\n\\tprint(sum)\\nelse:\\n\\tfor t in range(n - 1, -1, -1):\\n\\t\\tif hard[t] <= k:\\n\\t\\t\\tsum += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(sum)\\n\", \"(a, max) = map(int, input().split())\\nls = list(map(int, input().split()))\\ncount = 0\\nfor el in ls:\\n\\tif el <= max:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nls = ls[count:]\\nfor el in ls[::-1]:\\n\\tif el <= max:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(num, max_chislo) = map(int, input().split())\\nlist_chisla = list(map(int, input().split()))\\nx = 0\\na = 1\\ni = 0\\nz = 0\\nwhile num != 0:\\n\\tif list_chisla[i] <= max_chislo and a != 0:\\n\\t\\tx += 1\\n\\t\\ti += 1\\n\\telse:\\n\\t\\ti = z\\n\\t\\ta = 0\\n\\t\\tif list_chisla[-1 - i] <= max_chislo:\\n\\t\\t\\tx += 1\\n\\t\\t\\tz += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tnum -= 1\\nprint(x)\\n\", \"import sys\\nlines = [line.strip() for line in sys.stdin.readlines()]\\n(n, k) = list(map(int, lines[0].split(' ')))\\ntasks = list(map(int, lines[1].split(' ')))\\ndone_tasks = 0\\nwhile tasks:\\n\\tif tasks[0] <= k:\\n\\t\\tdel tasks[0]\\n\\t\\tdone_tasks += 1\\n\\telif tasks[-1] <= k:\\n\\t\\tdel tasks[-1]\\n\\t\\tdone_tasks += 1\\n\\telse:\\n\\t\\tbreak\\nprint(done_tasks)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\np = 0\\nf = 0\\nwhile f < n and a[f] <= k:\\n\\tp += 1\\n\\tf += 1\\nf = n - 1\\nwhile f >= 0 and a[f] <= k:\\n\\tp += 1\\n\\tf -= 1\\nif p > n:\\n\\tprint(p // 2)\\nelse:\\n\\tprint(p)\\n\", \"from sys import stdin\\nfrom math import *\\nline = stdin.readline().rstrip().split()\\nn = int(line[0])\\nk = int(line[1])\\nnumbers = list(map(int, stdin.readline().rstrip().split()))\\ncant = 0\\nfor num in numbers:\\n\\tif num > k:\\n\\t\\tbreak\\n\\tcant += 1\\nj = cant\\nfor i in range(n - 1, 0, -1):\\n\\tif i == j - 1:\\n\\t\\tbreak\\n\\tif numbers[i] > k:\\n\\t\\tbreak\\n\\tcant += 1\\nprint(cant)\\n\", \"def go():\\n\\t(n, k) = (int(i) for i in input().split(' '))\\n\\ta = [int(i) for i in input().split(' ')]\\n\\tt = 0\\n\\ti = 0\\n\\twhile i < n and a[i] <= k:\\n\\t\\ti += 1\\n\\t\\tt += 1\\n\\tif i == n:\\n\\t\\treturn t\\n\\ta = a[::-1]\\n\\ti = 0\\n\\twhile a[i] <= k:\\n\\t\\ti += 1\\n\\t\\tt += 1\\n\\treturn t\\nprint(go())\\n\", \"import sys\\ninput = sys.stdin.readline\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nl = 0\\nwhile l < n:\\n\\tif a[l] > k:\\n\\t\\tbreak\\n\\tl += 1\\nr = n - 1\\nwhile l < r:\\n\\tif a[r] > k:\\n\\t\\tbreak\\n\\tr -= 1\\nprint(l + (n - r - 1))\\n\", \"nk = list(map(int, input().rstrip().split(' ')))\\nn = nk[0]\\nk = nk[1]\\narray = list(map(int, input().rstrip().split(' ')))\\nar_len = len(array)\\nmin = -1\\nmax = ar_len\\nfor i in range(ar_len):\\n\\tif array[i] > k:\\n\\t\\tmin = i\\n\\t\\tbreak\\nfor i in range(ar_len - 1, -1, -1):\\n\\tif array[i] > k:\\n\\t\\tmax = i\\n\\t\\tbreak\\ncan_play = n - (max - min + 1)\\nif can_play < 0:\\n\\tprint(n)\\nelse:\\n\\tprint(can_play)\\n\", \"def solve(lst, k):\\n\\tmax = 0\\n\\ttemp = 0\\n\\tfor i in range(len(lst)):\\n\\t\\tif lst[i] <= k:\\n\\t\\t\\tmax += 1\\n\\t\\t\\ttemp = i\\n\\t\\telse:\\n\\t\\t\\ttemp = i\\n\\t\\t\\tbreak\\n\\ti = len(lst) - 1\\n\\twhile i > temp:\\n\\t\\tif lst[i] <= k:\\n\\t\\t\\tmax += 1\\n\\t\\t\\ti -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn max\\n(n, k) = map(int, input().split())\\nlst = list(map(int, input().split()))\\nprint(solve(lst, k))\\n\", \"(n, k) = map(int, input().split())\\na = [i for i in map(int, input().split())]\\nans = 0\\nfor i in a[::-1]:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nfor i in a:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nprint(ans if ans <= n else n)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import *\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nif max(a) <= k:\\n\\tprint(n)\\n\\texit()\\nans = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"q = lambda : map(int, input().split())\\nqi = lambda : int(input())\\nqs = lambda : input().split()\\n(n, m) = q()\\na = list(q())\\n(x, y) = (0, 0)\\nfor i in range(n):\\n\\tif a[i] > m:\\n\\t\\tx = i\\n\\t\\tbreak\\nfor i in a[::-1]:\\n\\tif i > m:\\n\\t\\ty = len(a) - a[::-1].index(i)\\n\\t\\tbreak\\nprint(len(a) - (y - x))\\n\", \"(n, k) = [int(i) for i in input().split()]\\nnum = [int(i) for i in input().split()]\\ni = 0\\nj = n - 1\\nres = 0\\nwhile i < n and num[i] <= k:\\n\\tres += 1\\n\\ti += 1\\nwhile i <= j and num[j] <= k:\\n\\tres += 1\\n\\tj -= 1\\nprint(res)\\n\", \"def main():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tleft = 0\\n\\tans = 0\\n\\twhile left < n and a[left] <= k:\\n\\t\\tleft += 1\\n\\t\\tans += 1\\n\\tright = n - 1\\n\\twhile right >= 0 and a[right] <= k:\\n\\t\\tright -= 1\\n\\t\\tans += 1\\n\\tprint(min(ans, n))\\nmain()\\n\", \"(n, k) = map(int, input().split())\\ndata = [int(x) for x in input().split()]\\nl = 0\\notvet = 0\\nfor x in data:\\n\\tif x <= k:\\n\\t\\totvet += 1\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tbreak\\nif n != l:\\n\\tfor x in range(n):\\n\\t\\tn -= 1\\n\\t\\tif data[n] <= k:\\n\\t\\t\\totvet += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(otvet)\\n\", \"inp = input().rstrip().split(' ')\\nn = int(inp[0])\\nk = int(inp[1])\\ncnt = 0\\nif n >= 1 and n <= 100 and (k >= 1) and (k <= 100):\\n\\tdiff = [int(x) for x in input().rstrip().split(' ') if int(x) >= 1 and int(x) <= 100]\\n\\tflag = 0\\n\\tfor i in diff:\\n\\t\\tif i <= k:\\n\\t\\t\\tcnt = cnt + 1\\n\\t\\telse:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag == 1 and cnt < len(diff):\\n\\t\\tdiff2 = diff[::-1]\\n\\t\\tfor i in diff2:\\n\\t\\t\\tif i <= k:\\n\\t\\t\\t\\tcnt = cnt + 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\nprint(cnt)\\n\", \"import sys\\ninput = sys.stdin.readline\\n(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nfor i in range(n):\\n\\tif l[i] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif l[i] <= k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(n, c))\\n\", \"(n, k) = map(int, input().split())\\ndq = [int(x) for x in input().split()]\\ncount = 0\\ncount = 0\\nflag = True\\nfor i in range(n):\\n\\tif dq[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tflag = False\\n\\t\\tbreak\\ndq.reverse()\\nif flag is False:\\n\\tfor i in range(n):\\n\\t\\tif dq[i] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(count)\\n\", \"def inp():\\n\\treturn map(int, input().split())\\n\\ndef arr_inp():\\n\\treturn [int(x) for x in input().split()]\\n(n, k) = inp()\\na = arr_inp()\\nout = 0\\nfor i in a:\\n\\tif i <= k:\\n\\t\\tout += 1\\n\\telse:\\n\\t\\tbreak\\nif out < n:\\n\\tfor i in range(n - 1, out, -1):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tout += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(out)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nx = 0\\nfor i in l:\\n\\tif i <= k:\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tbreak\\nl.reverse()\\nfor i in l:\\n\\tif i <= k:\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tbreak\\nif x > len(l):\\n\\tprint(len(l))\\nelse:\\n\\tprint(x)\\n\", \"inp = str(input())\\npnum = int(inp.split(' ')[0])\\nskill = int(inp.split(' ')[1])\\ninp = str(input())\\ndiff = inp.split(' ')\\ndiff = [int(x) for x in diff]\\nc = 0\\nwhile len(diff) > 0:\\n\\tif diff[0] <= skill:\\n\\t\\tdiff.pop(0)\\n\\t\\tc += 1\\n\\telif diff[len(diff) - 1] <= skill:\\n\\t\\tdiff.pop()\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(m, k) = map(int, input().split())\\nd = list(map(int, input().split()))\\np = 0\\ncount = 0\\nwhile p < len(d):\\n\\tif d[p] > k:\\n\\t\\tbreak\\n\\tcount += 1\\n\\tp += 1\\nc = 0\\np = len(d) - p\\nwhile c < p:\\n\\tif d[-1 - c] > k:\\n\\t\\tbreak\\n\\tcount += 1\\n\\tc += 1\\nprint(count)\\n\", \"(a, b) = map(int, input().split())\\nk = list(map(int, input().split()))\\nm = 0\\nn = 0\\nfor i in k:\\n\\tif i <= b:\\n\\t\\tm += 1\\n\\telse:\\n\\t\\tbreak\\nk = k[::-1]\\nfor j in k:\\n\\tif j <= b:\\n\\t\\tn += 1\\n\\telse:\\n\\t\\tbreak\\nif m + n >= len(k):\\n\\tprint(len(k))\\nelse:\\n\\tprint(m + n)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nm = []\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tm.append(i)\\nif len(m) == 0:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (m[-1] - m[0] + 1))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\npos = 0\\nwhile pos < n and a[pos] <= k:\\n\\tcount += 1\\n\\tpos += 1\\npos = n - 1\\nif count != n:\\n\\twhile pos >= 0 and a[pos] <= k:\\n\\t\\tcount += 1\\n\\t\\tpos -= 1\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncnt = 0\\nfor el in a:\\n\\tif el > k:\\n\\t\\tbreak\\n\\tcnt += 1\\nfor el in a[::-1]:\\n\\tif el > k:\\n\\t\\tbreak\\n\\tcnt += 1\\nprint(min(cnt, n))\\n\", \"(n, k) = [int(c) for c in input().split()]\\npd = [int(c) for c in input().split()]\\n(i, j) = (0, n - 1)\\nans = 0\\nwhile i <= j:\\n\\tif pd[i] <= k:\\n\\t\\ti += 1\\n\\t\\tans += 1\\n\\telif pd[j] <= k:\\n\\t\\tj -= 1\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(a, k) = input().split()\\nar = list(map(int, input().rstrip().split()))\\ncounter = 0\\nfor i in range(int(a)):\\n\\tif ar[0] <= int(k):\\n\\t\\tar.pop(0)\\n\\t\\tcounter += 1\\n\\telif ar[len(ar) - 1] <= int(k):\\n\\t\\tar.pop(len(ar) - 1)\\n\\t\\tcounter += 1\\n\\telse:\\n\\t\\tbreak\\nprint(counter)\\n\", \"def solving_tests():\\n\\tcases = input().split()\\n\\ttests = input().split()\\n\\tcases = [int(i) for i in cases]\\n\\toutput = 0\\n\\twhile True:\\n\\t\\tif len(tests) > 0:\\n\\t\\t\\tif cases[1] >= int(tests[0]):\\n\\t\\t\\t\\toutput += 1\\n\\t\\t\\t\\ttests.pop(0)\\n\\t\\t\\telif cases[1] >= int(tests[-1]):\\n\\t\\t\\t\\toutput += 1\\n\\t\\t\\t\\ttests.pop()\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(output)\\n\\t\\t\\t\\treturn\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(output)\\n\\treturn\\nsolving_tests()\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nres = []\\nc = 0\\ni = 0\\nwhile i < len(a):\\n\\tif a[i] <= k:\\n\\t\\tc += 1\\n\\t\\ta.pop(i)\\n\\t\\ti = 0\\n\\telif a[len(a) - 1 - i] <= k:\\n\\t\\tc += 1\\n\\t\\ta.pop(len(a) - 1)\\n\\t\\ti = 0\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nA = list(map(int, input().split(' ')[:n]))\\ntemp = 0\\nfor i in range(n):\\n\\tif A[i] <= k:\\n\\t\\ttemp += 1\\n\\t\\tA[i] += k\\n\\telse:\\n\\t\\tbreak\\nA.reverse()\\nfor i in A:\\n\\tif i <= k:\\n\\t\\ttemp += 1\\n\\telse:\\n\\t\\tprint(temp)\\n\\t\\texit()\\nprint(temp)\\n\", \"(n, k) = map(int, input().split())\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\ni = 0\\nl = 0\\nwhile i < n and a[i] <= k:\\n\\tl += 1\\n\\ti += 1\\ni = n - 1\\nwhile i >= 0 and a[i] <= k:\\n\\tl += 1\\n\\ti -= 1\\nif l // 2 == n:\\n\\tprint(n)\\nelse:\\n\\tprint(l)\\n\", \"TN = 1\\n\\ndef solution():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\ti1 = 0\\n\\ti2 = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\ti1 += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\ti2 = -n\\n\\tfor i in reversed(range(n)):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\ti2 += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(i1 + i2)\\nwhile TN != 0:\\n\\tsolution()\\n\\tTN -= 1\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\n(x, y) = (0, n - 1)\\nt = 0\\nfor i in range(n):\\n\\tif a[x] <= k:\\n\\t\\tt += 1\\n\\t\\tx += 1\\n\\telif a[y] <= k:\\n\\t\\tt += 1\\n\\t\\ty -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(t)\\n\", \"inp = [int(x) for x in input().split()]\\nn = inp[0]\\nk = inp[1]\\nzad = [int(x) for x in input().split()]\\ncounter = 0\\nfor x in zad:\\n\\tif x > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcounter += 1\\nif counter == len(zad):\\n\\tprint(counter)\\n\\texit(0)\\nfor x in range(len(zad) - 1, -1, -1):\\n\\tif zad[x] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcounter += 1\\nprint(counter)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nwhile a and a[0] <= k:\\n\\ta.pop(0)\\n\\tans += 1\\na.reverse()\\nwhile a and a[0] <= k:\\n\\ta.pop(0)\\n\\tans += 1\\nprint(ans)\\n\", \"nk = input().split(' ')\\nproblems = input().split(' ')\\ncount = 0\\nfor i in range(len(problems)):\\n\\tif int(nk[1]) >= int(problems[0]):\\n\\t\\tproblems.pop(0)\\n\\t\\tcount += 1\\n\\telif int(nk[1]) >= int(problems[-1]):\\n\\t\\tproblems.pop()\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nmas = list(map(int, input().split()))\\nf = 0\\nfor i in range(n):\\n\\tif mas[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tf += 1\\nmas = mas[f:]\\nmas.reverse()\\nfor i in range(n - f):\\n\\tif mas[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tf += 1\\nprint(f)\\n\", \"(n, k) = map(int, input().split(' '))\\naa = list(map(int, input().split(' ')))\\nm = max(aa)\\nif m <= k:\\n\\tprint(len(aa))\\nelse:\\n\\tres = 0\\n\\tfor a in aa:\\n\\t\\tif a > k:\\n\\t\\t\\tbreak\\n\\t\\tres += 1\\n\\tfor a in aa[::-1]:\\n\\t\\tif a > k:\\n\\t\\t\\tbreak\\n\\t\\tres += 1\\n\\tprint(res)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(l, r) = (-1, -1)\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tl = i\\n\\t\\tbreak\\nfor j in range(n - 1, -1, -1):\\n\\tif a[j] > k:\\n\\t\\tr = j\\n\\t\\tbreak\\nif l == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(n - r + l - 1)\\n\", \"N = input().split()\\nA = int(N[1])\\nB = int(N[0])\\narr = input().split()\\nans = 0\\np = 0\\nfor i in range(B):\\n\\tif int(arr[i]) <= A:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tp = 1\\n\\t\\tbreak\\nfor j in range(B - 1, -1, -1):\\n\\tif int(arr[j]) <= A:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tp = 1\\n\\t\\tbreak\\nif p == 0:\\n\\tprint(int(ans // 2))\\nelse:\\n\\tprint(ans)\\n\", \"import sys\\n(N, K) = map(int, sys.stdin.readline().split())\\na = [int(x) for x in input().split()]\\n\\ndef foo(arr):\\n\\tif not arr:\\n\\t\\treturn 0\\n\\telif arr[0] <= K:\\n\\t\\tarr.pop(0)\\n\\t\\treturn foo(arr) + 1\\n\\telif arr[len(arr) - 1] <= K:\\n\\t\\tarr.pop(len(arr) - 1)\\n\\t\\treturn foo(arr) + 1\\n\\telse:\\n\\t\\treturn 0\\nprint(foo(a))\\n\", \"import collections\\n(n, k) = map(int, input().split())\\na = collections.deque(map(int, input().split()))\\nf = 0\\ncount = 0\\nfl1 = True\\nfl2 = True\\nwhile True:\\n\\tif f == 0 and fl1 == True:\\n\\t\\tif a[0] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\ta.popleft()\\n\\t\\telse:\\n\\t\\t\\tfl1 = False\\n\\telif f == 1 and fl2 == True:\\n\\t\\tif a[-1] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\ta.pop()\\n\\t\\telse:\\n\\t\\t\\tfl2 = False\\n\\tif f == 0:\\n\\t\\tf = 1\\n\\telse:\\n\\t\\tf = 0\\n\\tif fl1 == False and fl2 == False:\\n\\t\\tbreak\\n\\tif len(a) == 0:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nprob = list(map(int, input().split()))\\ncount = 0\\nwhile len(prob) > 0:\\n\\tfirst = prob[0]\\n\\tlast = prob[-1]\\n\\tif k >= first:\\n\\t\\tprob.pop(0)\\n\\t\\tcount += 1\\n\\telif k >= last:\\n\\t\\tprob.pop(-1)\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ncnt = 0\\nwhile True:\\n\\tif len(a) == 0:\\n\\t\\tbreak\\n\\tif a[0] <= k:\\n\\t\\tcnt += 1\\n\\t\\ta = a[1:]\\n\\t\\tcontinue\\n\\telif a[-1] <= k:\\n\\t\\tcnt += 1\\n\\t\\ta = a[:-1]\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tbreak\\nprint(cnt)\\n\", \"def read_input():\\n\\treturn list(map(int, input().split()))\\ninputs = read_input()\\nproblems_input = read_input()\\nn = inputs[0]\\nk = inputs[1]\\nproblems = problems_input\\nsolved = 0\\n\\ndef solve_side(k, problems, right=False):\\n\\tsolved_problems = 0\\n\\tif right:\\n\\t\\tproblems.reverse()\\n\\twhile len(problems) > 0:\\n\\t\\tif problems[0] <= k:\\n\\t\\t\\tproblems.remove(problems[0])\\n\\t\\t\\tsolved_problems += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn solved_problems\\nsolved += solve_side(k, problems)\\nsolved += solve_side(k, problems, right=True)\\nprint(solved)\\n\", \"(n, k, count) = (0, 0, 0)\\nflag = True\\ninp = [int(i) for i in input().split()]\\nn = inp[0]\\nk = inp[1]\\ninp = [int(i) for i in input().split()]\\nlst = []\\nfor i in range(0, n):\\n\\tl = inp[i]\\n\\tif flag and l <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tflag = False\\n\\t\\tlst.append(l)\\nfor i in range(0, len(lst)):\\n\\tif lst[len(lst) - i - 1] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"A = input().split(' ')\\nb = [int(num) for num in A]\\n(n, k) = (b[0], b[1])\\nB = input().split(' ')\\na = [int(num) for num in B]\\ncount = 0\\nl = len(a)\\ni = 0\\nj = l - 1\\nwhile i >= 0 and i < n and (j >= 0) and (j < n) and (i != j):\\n\\tif a[i] > k and a[j] > k:\\n\\t\\tbreak\\n\\tif a[i] <= k:\\n\\t\\tcount += 1\\n\\t\\ti += 1\\n\\telif a[j] <= k:\\n\\t\\tcount += 1\\n\\t\\tj -= 1\\nif i == j:\\n\\tif a[i] <= k:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"(n, k) = input().split()\\nk = int(k)\\nL = [int(x) for x in input().split()]\\ncount = 0\\nfor i in range(int(n)):\\n\\tif L[0] <= k:\\n\\t\\tL.pop(0)\\n\\t\\tcount = count + 1\\n\\telif L[-1] <= k:\\n\\t\\tL.pop()\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"string = input().split(' ')\\nn = int(string[0])\\nk = int(string[1])\\nproblems = input().split(' ')\\nwhile True:\\n\\tif len(problems) != 0:\\n\\t\\tif int(problems[0]) <= k:\\n\\t\\t\\tproblems.pop(0)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tbreak\\nwhile True:\\n\\tif len(problems) != 0:\\n\\t\\tif int(problems[len(problems) - 1]) <= k:\\n\\t\\t\\tproblems.pop()\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tbreak\\nprint(str(n - len(problems)))\\n\", \"(n, k) = list(map(int, input().split(' ')))\\na_list = list(map(int, input().split(' ')))\\n(i, j) = (0, len(a_list) - 1)\\ncount = 0\\nwhile i <= j:\\n\\tif a_list[i] <= k:\\n\\t\\tcount += 1\\n\\t\\ti += 1\\n\\telif a_list[j] <= k:\\n\\t\\tcount += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"def problem_checker(n, k, problems):\\n\\tstart = 0\\n\\tend = n\\n\\tresult = 0\\n\\tif problems[start] > k and problems[end] > k:\\n\\t\\treturn result\\n\\telif k == 100:\\n\\t\\treturn len(problems)\\n\\telse:\\n\\t\\twhile start != end + 1:\\n\\t\\t\\tif problems[start] <= k:\\n\\t\\t\\t\\tresult += 1\\n\\t\\t\\t\\tstart += 1\\n\\t\\t\\telif problems[end] <= k:\\n\\t\\t\\t\\tresult += 1\\n\\t\\t\\t\\tend -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\treturn result\\nnk = list(map(int, input().split()))\\nproblems = list(map(int, input().split()))\\nprint(problem_checker(nk[0] - 1, nk[1], problems))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nl = len(a)\\nwhile i < l and a[i] <= k:\\n\\ti += 1\\nj = 0\\nwhile j < l - 1 and i < l - j - 1 and (a[l - j - 1] <= k):\\n\\tj += 1\\nprint(i + j)\\n\", \"import itertools\\nimport sys\\n\\ndef i_ints():\\n\\treturn map(int, sys.stdin.readline().split())\\n(n, k) = i_ints()\\na = i_ints()\\na = itertools.dropwhile(k.__ge__, a)\\na = itertools.dropwhile(k.__ge__, reversed(list(a)))\\nprint(n - len(list(a)))\\n\", \"def solve(data):\\n\\t(n, k) = map(int, data[0].split())\\n\\tarr = list(map(int, data[1].split()))\\n\\tc = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] > k:\\n\\t\\t\\tbreak\\n\\t\\tc += 1\\n\\tif c == n:\\n\\t\\treturn c\\n\\tfor j in range(n - 1, i - 1, -1):\\n\\t\\tif arr[j] > k:\\n\\t\\t\\tbreak\\n\\t\\tc += 1\\n\\treturn c\\ndata = []\\ndata.append(input().strip())\\ndata.append(input().strip())\\nres = solve(data)\\nprint(res)\\n\", \"(n, m) = map(int, input().split())\\ndifficult = list(map(int, input().split()))\\ncalc = 0\\nd = 0\\nfor k in range(n):\\n\\td = k\\n\\tif m >= difficult[k]:\\n\\t\\tcalc += 1\\n\\telse:\\n\\t\\tbreak\\nif d != n - 1:\\n\\tfor z in range(n - 1, -1, -1):\\n\\t\\tif m >= difficult[z]:\\n\\t\\t\\tcalc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(calc)\\n\", \"a = input()\\n(n, k) = list(map(int, a.split()))\\nb = input()\\nt = 0\\np = 0\\ns = 0\\nr = 0\\nb1 = list(map(int, b.split()))\\nfor i in range(len(b1)):\\n\\tif b1[i] > k:\\n\\t\\tt = i\\n\\t\\tr = 1\\n\\t\\tbreak\\nb1.reverse()\\nfor i in range(len(b1)):\\n\\tif b1[i] > k:\\n\\t\\tp = i\\n\\t\\ts = 1\\n\\t\\tbreak\\nif s == 0 and r == 0:\\n\\tprint(len(b1))\\nelse:\\n\\tprint(t + p)\\n\", \"line1 = list(map(int, input().strip().split()))\\nproblems = list(map(int, input().strip().split()))\\nn = line1[0]\\nk = line1[1]\\nj = n - 1\\nanswered = 0\\nhappened = True\\nwhile happened and len(problems) > 0:\\n\\thappened = False\\n\\tif problems[0] <= k:\\n\\t\\tdel problems[0]\\n\\t\\tj -= 1\\n\\t\\tanswered += 1\\n\\t\\thappened = True\\n\\tif len(problems) > 0 and problems[j] <= k:\\n\\t\\tdel problems[j]\\n\\t\\tj -= 1\\n\\t\\tanswered += 1\\n\\t\\thappened = True\\nprint(answered)\\n\", \"(N, K) = map(int, input().split())\\nL = list(map(int, input().split()))\\ncount = 0\\nif max(L) <= K:\\n\\tprint(len(L))\\nelse:\\n\\twhile L[0] <= K:\\n\\t\\tL.pop(0)\\n\\t\\tcount += 1\\n\\tif L:\\n\\t\\twhile L[-1] <= K:\\n\\t\\t\\tL.pop()\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\n\", \"import sys\\nimport math\\nget_string = lambda : sys.stdin.readline().strip()\\nget_list = lambda : list(map(int, sys.stdin.readline().strip().split()))\\nget_intList_from_str = lambda : list(map(int, list(sys.stdin.readline().strip())))\\nget_charList_from_str = lambda : list(sys.stdin.readline().strip())\\nget_int = lambda : int(sys.stdin.readline().strip())\\npt = lambda x: sys.stdout.write(str(x))\\n(n, k) = get_list()\\nproblem = get_list()\\nfirst = last = -1\\nfor i in range(n):\\n\\tif problem[i] > k:\\n\\t\\tfirst = i\\n\\t\\tbreak\\nfor j in range(n - 1, -1, -1):\\n\\tif problem[j] > k:\\n\\t\\tlast = j\\n\\t\\tbreak\\nif first == -1 or last == -1:\\n\\tprint(n)\\nelse:\\n\\tunsolved = last - first + 1\\n\\tprint(n - unsolved)\\n\", \"s = input().split(' ')\\nn = int(s[0])\\nk = int(s[1])\\ns = input().split(' ')\\narr = [int(s[i]) for i in range(n)]\\nres = 0\\nfor i in range(n):\\n\\tif arr[i] <= k:\\n\\t\\tres += 1\\n\\telse:\\n\\t\\tbreak\\nif res == n:\\n\\tprint(n)\\nelse:\\n\\tfor i in range(n):\\n\\t\\tif arr[-i - 1] <= k:\\n\\t\\t\\tres += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(res)\\n\", \"(_, k) = map(int, input().split())\\nlst = list(map(int, input().split()))\\nc = 0\\nwhile len(lst) > 0 and (lst[0] <= k or lst[-1] <= k):\\n\\tif lst[0] <= k:\\n\\t\\tlst = lst[1:]\\n\\t\\tc += 1\\n\\telif lst[-1] <= k:\\n\\t\\tlst = lst[:-1]\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\na = [int(k) for k in input().split()]\\ncount = 0\\ni = 0\\nwhile i < len(a) and a[i] <= k:\\n\\tcount += 1\\n\\ti += 1\\nj = len(a) - 1\\nwhile j >= i and a[j] <= k:\\n\\tcount += 1\\n\\tj -= 1\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nimport collections\\ndat = collections.deque(list(map(int, input().split())))\\nwhile True:\\n\\tif len(dat) == 0:\\n\\t\\tbreak\\n\\tp = dat.popleft()\\n\\tif p <= k:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tdat.appendleft(p)\\n\\tif len(dat) == 0:\\n\\t\\tbreak\\n\\tp = dat.pop()\\n\\tif p <= k:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tdat.append(p)\\n\\tbreak\\nprint(n - len(dat))\\n\", \"(a, c) = map(int, input().split())\\nb = list(map(int, input().split()))\\nn = 0\\nfor i in range(a):\\n\\tif b[0] <= c:\\n\\t\\tb.pop(0)\\n\\t\\ta -= 1\\n\\telif b[a - 1] <= c:\\n\\t\\tb.pop(a - 1)\\n\\t\\ta -= 1\\n\\telse:\\n\\t\\tbreak\\n\\tn += 1\\nprint(n)\\n\", \"(a, b) = map(int, input().split())\\nc = list(map(int, input().split()))\\nd = list(reversed(c))\\nx = y = k = int(0)\\nwhile x < a:\\n\\tif c[x] <= b:\\n\\t\\tk = k + 1\\n\\telse:\\n\\t\\tbreak\\n\\tx = x + 1\\nif k != a:\\n\\twhile y < a:\\n\\t\\tif d[y] <= b:\\n\\t\\t\\tk = k + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\ty = y + 1\\nprint(k)\\n\", \"(n, k) = [int(x) for x in input().strip().split(' ')]\\nl = [int(x) for x in input().strip().split(' ')]\\nc = 0\\nwhile l != []:\\n\\tif l[0] <= k:\\n\\t\\tc += 1\\n\\t\\tl.pop(0)\\n\\telif l[len(l) - 1] <= k:\\n\\t\\tc += 1\\n\\t\\tl.pop(len(l) - 1)\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\ni = 0\\nwhile i < n and a[i] <= k:\\n\\ti += 1\\ns = i\\nif i != n:\\n\\ti = n - 1\\n\\twhile i >= 0 and a[i] <= k:\\n\\t\\ti -= 1\\n\\ts += n - i - 1\\nprint(s)\\n\", \"(n, k) = map(int, input().split())\\nL = list(map(int, input().split()))\\ns = 0\\nwhile True:\\n\\tif len(L) == 0:\\n\\t\\tprint(s)\\n\\t\\tbreak\\n\\tif L[0] <= k:\\n\\t\\ts += 1\\n\\t\\tdel L[0]\\n\\telif L[-1] <= k:\\n\\t\\ts += 1\\n\\t\\tdel L[-1]\\n\\telse:\\n\\t\\tprint(s)\\n\\t\\tbreak\\n\", \"(a, b) = map(int, input().split())\\nl = list(map(int, input().split()))\\ncount = 0\\nadd = 0\\nfor i in range(a):\\n\\tif l[i] <= b:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nl.reverse()\\nfor i in range(a):\\n\\tif l[i] <= b:\\n\\t\\tadd += 1\\n\\telse:\\n\\t\\tbreak\\nif count == a:\\n\\tprint(count)\\nelse:\\n\\tprint(count + add)\\n\", \"str = list(map(int, input().split(' ')))\\nn = str[0]\\nk = str[1]\\nlt = []\\nsum = 0\\nlt = list(map(int, input().split(' ')))\\ny = 1\\nwhile n is not 0:\\n\\tif lt[0] <= k:\\n\\t\\tsum = sum + 1\\n\\t\\tdel lt[0]\\n\\t\\tn = n - 1\\n\\telif lt[-1] <= k:\\n\\t\\tsum = sum + 1\\n\\t\\tdel lt[-1]\\n\\t\\tn = n - 1\\n\\telse:\\n\\t\\tbreak\\nprint(sum)\\n\", \"o = input().rstrip().split(' ')\\np = input().rstrip().split(' ')\\nk = int(o[1])\\nS = 0\\nfor i in range(0, len(p)):\\n\\tif int(p[i]) <= k:\\n\\t\\tS += 1\\n\\telse:\\n\\t\\tbreak\\nif S == int(o[0]):\\n\\tprint(S)\\nelse:\\n\\tfor i in range(len(p) - 1, -1, -1):\\n\\t\\tif int(p[i]) <= k:\\n\\t\\t\\tS += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(S)\\n\", \"(n, k) = map(int, input().split())\\nproblem = list(map(int, input().split()))\\nleft = 0\\nright = n - 1\\ncount = 0\\nwhile True:\\n\\tif problem[left] <= k and left <= right:\\n\\t\\tcount += 1\\n\\t\\tleft += 1\\n\\telif problem[right] <= k and left <= right:\\n\\t\\tcount += 1\\n\\t\\tright -= 1\\n\\telse:\\n\\t\\tbreak\\n\\tif left > right:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\n(c1, i, j) = (0, 0, n - 1)\\nwhile i < n:\\n\\tif l[i] <= k:\\n\\t\\tc1 += 1\\n\\t\\ti += 1\\n\\telif l[j] <= k:\\n\\t\\tc1 += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(c1)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nj = len(a) - 1\\ncount = 0\\nwhile True:\\n\\tif j != -1 and a[i] <= k:\\n\\t\\ta.pop(i)\\n\\t\\tcount += 1\\n\\t\\tj -= 1\\n\\telif j != -1 and a[j] <= k:\\n\\t\\ta.pop(j)\\n\\t\\tcount += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\n(l, r) = (0, n - 1)\\nwhile l <= r:\\n\\tif a[l] <= k or a[r] <= k:\\n\\t\\tcount += 1\\n\\t\\tif a[l] <= k:\\n\\t\\t\\tl += 1\\n\\t\\telif a[r] <= k:\\n\\t\\t\\tr -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"def solve(a, k):\\n\\tc = 0\\n\\ti = 0\\n\\tj = len(a) - 1\\n\\twhile j >= i:\\n\\t\\tif a[i] > k and a[j] > k:\\n\\t\\t\\tprint(c)\\n\\t\\t\\treturn\\n\\t\\telif a[i] <= a[j] and a[i] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\ti += 1\\n\\t\\telif a[j] <= a[i] and a[j] <= k:\\n\\t\\t\\tc += 1\\n\\t\\t\\tj -= 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\t\\t\\tj -= 1\\n\\tprint(c)\\n(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nsolve(a, k)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nj = -1\\nflag = 0\\nc = 0\\nwhile flag == 0 and i <= len(a) + j:\\n\\tif a[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti += 1\\n\\t\\tcontinue\\n\\tif a[j] <= k:\\n\\t\\tc += 1\\n\\t\\tj -= 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tflag = 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nmass = list(map(int, input().split()))\\nx = 0\\nfor i in range(n):\\n\\tif mass[i] <= k:\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif mass[i] <= k:\\n\\t\\tx += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(x, n))\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nans = 0\\nwhile 1:\\n\\tif len(l) == 0:\\n\\t\\tbreak\\n\\tif l[0] <= k:\\n\\t\\tl.pop(0)\\n\\t\\tans += 1\\n\\telif l[len(l) - 1] <= k:\\n\\t\\tl.pop(len(l) - 1)\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"import sys\\nimport collections\\n\\ndef readArray(type=int):\\n\\tline = input()\\n\\treturn [type(x) for x in line.split()]\\n\\ndef solve():\\n\\t(n, k) = readArray()\\n\\tar = readArray()\\n\\tcb = ca = 0\\n\\ti = 0\\n\\twhile i < n:\\n\\t\\tif ar[i] > k:\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\t\\tca += 1\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tif ar[i] > k:\\n\\t\\t\\tbreak\\n\\t\\ti -= 1\\n\\t\\tcb += 1\\n\\tprint(ca + cb if ca + cb < n else n)\\nsolve()\\n\", \"(n, k) = map(int, input().split())\\narr = [int(x) for x in input().split()]\\ncount = 0\\nwhile len(arr) != 0:\\n\\tif arr[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tarr.remove(arr[0])\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(arr) - 1, -1, -1):\\n\\tif arr[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ncnt = 0\\np = n\\nfor i in range(p):\\n\\tfg = 0\\n\\tif l[0] <= k:\\n\\t\\tcnt += 1\\n\\t\\tl = l[1:]\\n\\t\\tn -= 1\\n\\t\\tfg += 1\\n\\tif l != [] and l[n - 1] <= k:\\n\\t\\tcnt += 1\\n\\t\\tl = l[0:n - 1]\\n\\t\\tn -= 1\\n\\t\\tfg += 1\\n\\tif fg == 0 or l == []:\\n\\t\\tbreak\\nprint(cnt)\\n\", \"(n, k) = [int(ele) for ele in str(input()).split()]\\ndif = [1] + [int(ele) for ele in str(input()).split()]\\nsolNum = 0\\nleftPos = 0\\nrightPos = n\\nfor idx in range(1, n + 1, 1):\\n\\tif dif[idx] > k:\\n\\t\\tbreak\\n\\tsolNum = solNum + 1\\n\\tleftPos = leftPos + 1\\nfor idx in range(n, 0, -1):\\n\\tif dif[idx] > k or rightPos <= leftPos:\\n\\t\\tbreak\\n\\tsolNum = solNum + 1\\n\\trightPos = rightPos - 1\\nprint(solNum)\\n\", \"(n, m) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\nl = 0\\nr = n - 1\\nc = 0\\nwhile l <= r:\\n\\tif l == r:\\n\\t\\tif a[l] <= m:\\n\\t\\t\\tc += 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tif a[l] <= m:\\n\\t\\t\\tl += 1\\n\\t\\t\\tc += 1\\n\\t\\tif a[r] <= m:\\n\\t\\t\\tr -= 1\\n\\t\\t\\tc += 1\\n\\t\\tif a[l] > m and a[r] > m:\\n\\t\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nnums = []\\nc = 0\\nlistInputs = input().split(' ')\\nfor i in range(len(listInputs)):\\n\\tif len(listInputs) >= 1 and int(listInputs[-1]) <= k:\\n\\t\\tlistInputs.pop(-1)\\n\\t\\tc += 1\\n\\tif len(listInputs) >= 1 and int(listInputs[0]) <= k:\\n\\t\\tlistInputs.pop(0)\\n\\t\\tc += 1\\nprint(c)\\n\", \"(n, k) = [int(x) for x in input().split()]\\nl = [int(x) for x in input().split()]\\ni = 0\\nj = n - 1\\nc = 0\\nwhile i < n and l[i] <= k:\\n\\tc += 1\\n\\ti += 1\\nwhile j > i and l[j] <= k:\\n\\tc += 1\\n\\tj -= 1\\nprint(c)\\n\", \"a = input()\\nb = input()\\ns = 0\\nL1 = a.split()\\nL2 = b.split()\\nfor i in range(2):\\n\\tL1[i] = int(L1[i])\\nfor i in range(len(L2)):\\n\\tL2[i] = int(L2[i])\\nfor i in range(len(L2)):\\n\\tif L2[i] <= L1[1]:\\n\\t\\ts = s + 1\\n\\telse:\\n\\t\\tbreak\\nif s != len(L2):\\n\\tL2.reverse()\\n\\tfor i in range(len(L2)):\\n\\t\\tif L2[i] <= L1[1]:\\n\\t\\t\\ts = s + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(s)\\n\", \"import sys\\nimport math\\nimport os\\nimport itertools\\nimport string\\nimport heapq\\nimport _collections\\nfrom collections import Counter\\nfrom collections import defaultdict\\nfrom functools import lru_cache\\nimport bisect\\nimport re\\nimport queue\\nfrom decimal import *\\n\\nclass Scanner:\\n\\n\\t@staticmethod\\n\\tdef int():\\n\\t\\treturn int(sys.stdin.readline().rstrip())\\n\\n\\t@staticmethod\\n\\tdef string():\\n\\t\\treturn sys.stdin.readline().rstrip()\\n\\n\\t@staticmethod\\n\\tdef map_int():\\n\\t\\treturn [int(x) for x in Scanner.string().split()]\\n\\n\\t@staticmethod\\n\\tdef string_list(n):\\n\\t\\treturn [Scanner.string() for i in range(n)]\\n\\n\\t@staticmethod\\n\\tdef int_list_list(n):\\n\\t\\treturn [Scanner.map_int() for i in range(n)]\\n\\n\\t@staticmethod\\n\\tdef int_cols_list(n):\\n\\t\\treturn [Scanner.int() for i in range(n)]\\n\\nclass Math:\\n\\n\\t@staticmethod\\n\\tdef gcd(a, b):\\n\\t\\tif b == 0:\\n\\t\\t\\treturn a\\n\\t\\treturn Math.gcd(b, a % b)\\n\\n\\t@staticmethod\\n\\tdef lcm(a, b):\\n\\t\\treturn a * b // Math.gcd(a, b)\\n\\n\\t@staticmethod\\n\\tdef divisor(n):\\n\\t\\tres = []\\n\\t\\ti = 1\\n\\t\\tfor i in range(1, int(n ** 0.5) + 1):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\tres.append(i)\\n\\t\\t\\t\\tif i != n // i:\\n\\t\\t\\t\\t\\tres.append(n // i)\\n\\t\\treturn res\\n\\n\\t@staticmethod\\n\\tdef round_up(a, b):\\n\\t\\treturn -(-a // b)\\n\\n\\t@staticmethod\\n\\tdef is_prime(n):\\n\\t\\tif n < 2:\\n\\t\\t\\treturn False\\n\\t\\tif n == 2:\\n\\t\\t\\treturn True\\n\\t\\tif n % 2 == 0:\\n\\t\\t\\treturn False\\n\\t\\td = int(n ** 0.5) + 1\\n\\t\\tfor i in range(3, d + 1, 2):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n\\ndef pop_count(x):\\n\\tx = x - (x >> 1 & 6148914691236517205)\\n\\tx = (x & 3689348814741910323) + (x >> 2 & 3689348814741910323)\\n\\tx = x + (x >> 4) & 1085102592571150095\\n\\tx = x + (x >> 8)\\n\\tx = x + (x >> 16)\\n\\tx = x + (x >> 32)\\n\\treturn x & 127\\nMOD = int(1000000000.0) + 7\\nINF = int(1000000000000000.0)\\n\\ndef solve():\\n\\t(N, K) = Scanner.map_int()\\n\\tA = Scanner.map_int()\\n\\tl = N\\n\\tfor i in range(N):\\n\\t\\tif A[i] > K:\\n\\t\\t\\tl = i\\n\\t\\t\\tbreak\\n\\tr = 0\\n\\tfor i in reversed(range(N)):\\n\\t\\tif A[i] > K:\\n\\t\\t\\tr = N - 1 - i\\n\\t\\t\\tbreak\\n\\tprint(l + r)\\n\\ndef main():\\n\\tsolve()\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = n - 1\\nwhile len(a) > 0 and (a[0] <= k or a[i] <= k):\\n\\tif a[0] <= k:\\n\\t\\ta.remove(a[0])\\n\\t\\ti -= 1\\n\\tif i < 0:\\n\\t\\tbreak\\n\\tif a[i] <= k:\\n\\t\\ta.pop(i)\\n\\t\\ti -= 1\\nprint(n - len(a))\\n\", \"(nb, skill) = map(int, input('').split(' '))\\nproblems = input('').split(' ')\\nfor i in range(len(problems)):\\n\\tproblems[i] = int(problems[i])\\nindicateur = True\\nresult = 0\\nwhile indicateur and problems != []:\\n\\tif problems[0] <= skill:\\n\\t\\tdel problems[0]\\n\\t\\tresult += 1\\n\\telse:\\n\\t\\tindicateur = not indicateur\\nwhile not indicateur and problems != []:\\n\\tif problems[-1] <= skill:\\n\\t\\tdel problems[-1]\\n\\t\\tresult += 1\\n\\telse:\\n\\t\\tindicateur = not indicateur\\nprint(result)\\n\", \"(x, y) = map(int, input().split())\\na = list(map(int, input().split()))\\nk = 0\\nt = 0\\nz = [0] * 2\\nif x == 1 and y >= a[0]:\\n\\tprint(1)\\nelif y < a[0] and len(a) == 1:\\n\\tprint('0')\\nelse:\\n\\tfor i in range(1, len(a) + 1):\\n\\t\\tif k == 1 and t == 1:\\n\\t\\t\\tbreak\\n\\t\\tif a[i - 1] > y and k == 0:\\n\\t\\t\\tz[0] = i\\n\\t\\t\\tk = k + 1\\n\\t\\tif a[len(a) - i] > y and t == 0:\\n\\t\\t\\tz[1] = len(a) - i + 1\\n\\t\\t\\tt = t + 1\\n\\t\\tif k == 1 and t == 1:\\n\\t\\t\\tbreak\\n\\tif z[0] != 0 or z[1] != 0:\\n\\t\\tprint(len(a) - z[1] + z[0] - 1)\\n\\telse:\\n\\t\\tprint(len(a))\\n\", \"import sys, os\\nfrom io import BytesIO, IOBase\\nimport collections, itertools, bisect, heapq, math, string\\nfrom decimal import *\\nBUFSIZE = 8192\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef main():\\n\\t(n, k) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tif a[i] > k:\\n\\t\\t\\tbreak\\n\\t\\tans += 1\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif a[i] > k:\\n\\t\\t\\tbreak\\n\\t\\tans += 1\\n\\tprint(min(ans, n))\\nmain()\\n\", \"(n, m) = map(int, input().split())\\nl = list(map(int, input().split()))\\ni = j = k = c = 0\\nd = 0\\nwhile len(l) != 0 and d != 1:\\n\\tif i % 2 == 0:\\n\\t\\tif l[0] <= m:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tj = 1\\n\\t\\t\\ti -= 1\\n\\t\\tl = l[1:]\\n\\telse:\\n\\t\\tif l[-1] <= m:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tk = 1\\n\\t\\t\\ti -= 1\\n\\t\\tl = l[:-1]\\n\\tif j == 1 and k == 1:\\n\\t\\td = 1\\n\\telif j == 1 or k == 1:\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\np = list(map(int, input().split()))\\nc = 0\\nwhile len(p) > 0 and p[0] <= k:\\n\\tc += 1\\n\\tp.pop(0)\\ni = len(p) - 1\\nwhile i >= 0 and p[i] <= k:\\n\\tc += 1\\n\\ti -= 1\\nprint(c)\\n\", \"def lower_from_edge_count(k, array):\\n\\tcount = 0\\n\\ti = 0\\n\\tj = len(array) - 1\\n\\twhile i < len(array) and array[i] <= k:\\n\\t\\ti += 1\\n\\t\\tcount += 1\\n\\tif i == len(array):\\n\\t\\treturn count\\n\\twhile j > 0 and array[j] <= k:\\n\\t\\tj -= 1\\n\\t\\tcount += 1\\n\\treturn count\\n(n, k) = map(int, input().split())\\narray = list(map(int, input().split()))\\nprint(lower_from_edge_count(k, array))\\n\", \"(n, k) = map(int, input().split())\\ns = list(map(int, input().split()))\\nz = n\\nwhile n != 0 and s[0] <= k:\\n\\ts.pop(0)\\n\\tn -= 1\\nwhile n != 0 and s[n - 1] <= k:\\n\\ts.pop()\\n\\tn -= 1\\nprint(z - n)\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nl = min((i for (i, x) in enumerate(a) if x > k), default=None)\\nif l is None:\\n\\tprint(n)\\n\\texit()\\nr = max((i for (i, x) in enumerate(a) if x > k))\\nprint(l + n - r - 1)\\n\", \"(n, k) = map(int, input().split())\\nM = list(map(int, input().split()))\\nc = 0\\nfor i in range(n):\\n\\tif M[i] < k or M[i] == k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor j in range(n - 1, -1, -1):\\n\\tif M[j] < k or M[j] == k:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nif c == 2 * n:\\n\\tprint(n)\\nelse:\\n\\tprint(c)\\n\", \"nk = [int(i) for i in input().strip().split()]\\n(n, k) = (nk[0], nk[1])\\na = [int(i) for i in input().strip().split()]\\ncount = 0\\ni = 0\\nwhile i < n:\\n\\tif a[i] <= k:\\n\\t\\tcount += 1\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tbreak\\nif i == n:\\n\\tprint(count)\\nelse:\\n\\tj = n - 1\\n\\twhile j > i:\\n\\t\\tif a[j] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tj -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(count)\\n\", \"(a, b) = map(int, input().split())\\nd = 0\\nc = list(map(int, input().split()))\\nif max(c) <= b:\\n\\tprint(len(c))\\nelse:\\n\\twhile c[0] <= b or c[len(c) - 1] <= b:\\n\\t\\tif c[0] <= b:\\n\\t\\t\\tc.pop(0)\\n\\t\\telif c[len(c) - 1] <= b:\\n\\t\\t\\tc.pop(len(c) - 1)\\n\\t\\td += 1\\n\\tprint(d)\\n\", \"arr = [int(x) for x in input().split()]\\n(n, k) = (arr[0], arr[1])\\na = [int(x) for x in input().split()]\\n(count, lf, rf) = (0, 1, 1)\\nwhile lf and len(a):\\n\\tif a[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel a[0]\\n\\telse:\\n\\t\\tlf = 0\\nwhile rf and len(a):\\n\\tif a[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel a[-1]\\n\\telse:\\n\\t\\trf = 0\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nv = [int(i) for i in input().split()]\\nflag1 = 0\\nflag2 = 0\\nfor i in range(n):\\n\\tif v[i] <= k:\\n\\t\\tflag1 += 1\\n\\telse:\\n\\t\\tbreak\\nif flag1 != n:\\n\\tfor i in range(n):\\n\\t\\tif v[n - 1 - i] <= k:\\n\\t\\t\\tflag1 += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(flag1)\\n\", \"def func(ki, kl):\\n\\th1 = 0\\n\\th2 = 0\\n\\tfor i in range(len(kl)):\\n\\t\\tif kl[i] > ki:\\n\\t\\t\\th1 = i\\n\\t\\t\\tbreak\\n\\t\\tif i == len(kl) - 1:\\n\\t\\t\\treturn len(kl)\\n\\tfor i in range(len(kl) - 1, -1, -1):\\n\\t\\tif kl[i] > ki:\\n\\t\\t\\th2 = len(kl) - i - 1\\n\\t\\t\\tbreak\\n\\treturn h1 + h2\\ncount = input().split()\\nfor i in range(len(count)):\\n\\tcount[i] = int(count[i])\\nli = input().split()\\nfor i in range(len(li)):\\n\\tli[i] = int(li[i])\\nk = count[1]\\nrez = func(k, li)\\nprint(rez)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\na = []\\nfor x in range(n):\\n\\tif l[x] > k:\\n\\t\\ta.append(x)\\nif a == []:\\n\\tprint(n)\\nelse:\\n\\tprint(a[0] + (n - a[-1] - 1))\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n(x, y) = (0, n - 1)\\nc = 0\\nwhile x <= y:\\n\\tif a[x] > k and a[y] > k:\\n\\t\\tbreak\\n\\telif a[x] > k:\\n\\t\\ty -= 1\\n\\telse:\\n\\t\\tx += 1\\n\\tc += 1\\nprint(c)\\n\", \"line1 = input().split()\\nline2 = input().split()\\nl = [int(j) for j in line2]\\nline1 = [int(i) for i in line1]\\nn = line1[0]\\nk = line1[1]\\n\\ndef cheak_endes(l, k):\\n\\tif len(l) == 0:\\n\\t\\treturn 'no'\\n\\telif l[0] > k and l[-1] > k:\\n\\t\\treturn 'no'\\n\\ndef forward(li, k):\\n\\tdelated = []\\n\\tfor i in li:\\n\\t\\tif i <= k:\\n\\t\\t\\tdelated.append(i)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor j in delated:\\n\\t\\tli.remove(j)\\n\\treturn li\\n\\ndef backward(li, k):\\n\\tdelated = []\\n\\tfor i in reversed(li):\\n\\t\\tif i <= k:\\n\\t\\t\\tdelated.append(i)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor j in delated:\\n\\t\\tli.remove(j)\\n\\treturn li\\n\\ndef calc_num_of_tasks_can_be_solved(l, k):\\n\\tif cheak_endes(l, k) == 'no':\\n\\t\\treturn 0\\n\\tl = forward(l, k)\\n\\tif cheak_endes(l, k) == 'no':\\n\\t\\treturn n - len(l)\\n\\tl = backward(l, k)\\n\\tif cheak_endes(l, k) == 'no':\\n\\t\\treturn n - len(l)\\n\\treturn n - len(l)\\nx = calc_num_of_tasks_can_be_solved(l, k)\\nprint(x)\\n\", \"(l, m) = input().split()\\nstring = input()\\nstring = string.split()\\nflag = True\\ntemp = None\\nfor (index, s) in enumerate(string):\\n\\tif int(m) < int(s):\\n\\t\\ttemp = string[index:]\\n\\t\\tbreak\\n\\tif index + 1 == len(string):\\n\\t\\tflag = False\\n\\t\\tprint(l)\\nif temp != None:\\n\\ttemp = list(reversed(temp))\\n\\ttemp2 = list\\n\\tfor (index, s) in enumerate(temp):\\n\\t\\tif int(m) < int(s):\\n\\t\\t\\ttemp2 = temp[index:]\\n\\t\\t\\tbreak\\n\\tif flag == True:\\n\\t\\tprint(int(l) - len(temp2))\\n\", \"s = input()\\ns = list(map(int, s.split()))\\nl = input()\\nl = list(map(int, l.split()))\\nn = 0\\nt = 1\\nwhile t == 1 and len(l) != 0:\\n\\tif l[0] > s[1]:\\n\\t\\tif l[s[0] - 1] > s[1]:\\n\\t\\t\\tt = 0\\n\\t\\telse:\\n\\t\\t\\tn += 1\\n\\t\\t\\tdel l[s[0] - 1]\\n\\t\\t\\ts[0] -= 1\\n\\telse:\\n\\t\\tn += 1\\n\\t\\tdel l[0]\\n\\t\\ts[0] -= 1\\nprint(n)\\n\", \"m = input()\\nn = list(map(int, m.split(' ')))\\narr = input()\\nl = list(map(int, arr.split(' ')))\\ni = 0\\nc = 0\\nwhile i < n[0]:\\n\\tif l[i] > n[1]:\\n\\t\\tbreak\\n\\ti += 1\\n\\tc += 1\\nm1 = -1\\nwhile True and i != n[0]:\\n\\tif l[m1] > n[1]:\\n\\t\\tbreak\\n\\tm1 -= 1\\n\\tc += 1\\nprint(c)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\ncnt = 0\\nl = list(map(int, input().split()))\\nfor i in l:\\n\\tif i <= k:\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(cnt):\\n\\tl.pop(0)\\nfor i in reversed(l):\\n\\tif i <= k:\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tbreak\\nprint(cnt)\\n\", \"from collections import Counter\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nimport sys\\nfrom collections import Counter\\n(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\nif max(arr) <= k:\\n\\tprint(n)\\n\\texit()\\nwhile i <= j:\\n\\tif arr[i] <= k:\\n\\t\\ti += 1\\n\\tif arr[j] <= k:\\n\\t\\tj -= 1\\n\\tif arr[i] > k and arr[j] > k:\\n\\t\\tbreak\\nprint(i + n - 1 - j)\\n\", \"def answer():\\n\\ta = [int(x) for x in input().split()]\\n\\tk = a[1]\\n\\tn = [int(x) for x in input().split()]\\n\\tans = 0\\n\\twhile n:\\n\\t\\tif k >= n[0]:\\n\\t\\t\\tans += 1\\n\\t\\t\\tn = n[1:]\\n\\t\\telif k >= n[-1]:\\n\\t\\t\\tans += 1\\n\\t\\t\\tn = n[:-1]\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(ans)\\nanswer()\\n\", \"class CodeforcesTask999ASolution:\\n\\n\\tdef __init__(self):\\n\\t\\tself.result = ''\\n\\t\\tself.n_k = []\\n\\t\\tself.problems = []\\n\\n\\tdef read_input(self):\\n\\t\\tself.n_k = [int(x) for x in input().split(' ')]\\n\\t\\tself.problems = [int(x) for x in input().split(' ')]\\n\\n\\tdef process_task(self):\\n\\t\\tleft = 0\\n\\t\\tright = 0\\n\\t\\tfor x in range(len(self.problems)):\\n\\t\\t\\tif self.n_k[1] >= self.problems[x]:\\n\\t\\t\\t\\tleft += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor x in range(len(self.problems)):\\n\\t\\t\\tif self.n_k[1] >= self.problems[len(self.problems) - x - 1]:\\n\\t\\t\\t\\tright += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tif left + right > len(self.problems):\\n\\t\\t\\tresult = len(self.problems)\\n\\t\\telse:\\n\\t\\t\\tresult = left + right\\n\\t\\tself.result = str(result)\\n\\n\\tdef get_result(self):\\n\\t\\treturn self.result\\nSolution = CodeforcesTask999ASolution()\\nSolution.read_input()\\nSolution.process_task()\\nprint(Solution.get_result())\\n\", \"from sys import stdin, stdout\\n\\ndef main():\\n\\t(line1, line2) = [x for x in stdin.readlines()]\\n\\t(number_of_problems, skill) = [int(x) for x in line1.split()]\\n\\tproblems = [int(x) for x in line2.split()]\\n\\talist = []\\n\\tresult = len(problems)\\n\\tfor (index, element) in enumerate(problems):\\n\\t\\tif element > skill:\\n\\t\\t\\talist.append(index)\\n\\tif len(alist) == 1:\\n\\t\\tresult = len(problems) - 1\\n\\tif len(alist) > 1:\\n\\t\\tresult = len(problems) - (alist[-1] - alist[0] + 1)\\n\\tprint(result)\\n\\treturn result\\nmain()\\n\", \"(n, k) = tuple(map(lambda x: int(x), input().split()))\\nprobs = list(map(lambda x: int(x), input().split()))\\ncount = 0\\ni = 0\\nwhile i < len(probs) and probs[i] <= k:\\n\\tcount += 1\\n\\ti += 1\\nj = len(probs) - 1\\nwhile j > i and probs[j] <= k:\\n\\tcount += 1\\n\\tj -= 1\\nprint(count)\\n\", \"s = input().split()\\nn = int(s[0])\\nk = int(s[1])\\nl = list(map(int, input().split()))\\ncnt = 0\\nwhile len(l) > 0 and l[0] <= k:\\n\\tcnt += 1\\n\\tl.pop(0)\\nwhile len(l) > 0 and l[len(l) - 1] <= k:\\n\\tcnt += 1\\n\\tl.pop()\\nprint(cnt)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nh = 0\\ng = 0\\na = [int(i) for i in input().split()]\\nfor i in range(0, n):\\n\\tc = i\\n\\tif a[c] <= k:\\n\\t\\th = h + 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n, 0, -1):\\n\\tb = i - 1\\n\\tif a[b] <= k:\\n\\t\\tg = g + 1\\n\\telse:\\n\\t\\tbreak\\ns = int(g + h)\\nif s <= n:\\n\\tprint(int(s))\\nelse:\\n\\tprint(int(s / 2))\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nr = l[::-1]\\nleft = 0\\nLEFT = True\\nRIGHT = True\\nright = 0\\nfor i in range(len(l)):\\n\\ts = left + right\\n\\tif l[i] <= k and LEFT and (s != len(l)):\\n\\t\\tleft += 1\\n\\telse:\\n\\t\\tLEFT = False\\n\\tif r[i] <= k and RIGHT and (s != len(l)):\\n\\t\\tright += 1\\n\\telse:\\n\\t\\tRIGHT = False\\n\\tif left + right >= len(l):\\n\\t\\tbreak\\nans = left + right\\nif ans > len(l):\\n\\tprint(len(l))\\nelse:\\n\\tprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nli = list(map(int, input().split()))\\n(s, e) = (-1, -1)\\nfor i in range(n):\\n\\tif s == -1:\\n\\t\\tif li[i] > k:\\n\\t\\t\\ts = i\\n\\tif li[i] > k:\\n\\t\\te = i\\nif e == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (e - s + 1))\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ni = 0\\nh = 1\\nc = 0\\np = 0\\ns = 1\\nwhile i < n:\\n\\tif l[i] <= k:\\n\\t\\tp += 1\\n\\telse:\\n\\t\\tc += 1\\n\\t\\ti = n\\n\\t\\th = -1\\n\\tif c == 2:\\n\\t\\ts = 0\\n\\t\\tprint(p)\\n\\t\\tbreak\\n\\ti += h\\nif s == 1:\\n\\tprint(n)\\n\", \"def calc(n, m, a):\\n\\ti = 0\\n\\tj = n - 1\\n\\tcount = 0\\n\\twhile i <= j:\\n\\t\\tif a[i] <= m:\\n\\t\\t\\tcount += 1\\n\\t\\t\\ti += 1\\n\\t\\telif a[j] <= m:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tj -= 1\\n\\t\\telif a[i] > m and a[j] > m:\\n\\t\\t\\tbreak\\n\\tprint(count)\\n(n, m) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ncalc(n, m, a)\\n\", \"def main():\\n\\t(n, k) = map(int, input().split())\\n\\tproblems = list(map(int, input().split()))\\n\\twhile len(problems) != 0:\\n\\t\\tif k >= problems[0]:\\n\\t\\t\\tproblems.pop(0)\\n\\t\\telif k >= problems[-1]:\\n\\t\\t\\tproblems.pop()\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(n - len(problems))\\nmain()\\n\", \"(n, k) = [int(inp) for inp in input().split()]\\na = [int(inp) for inp in input().split()]\\ncounter = 0\\nleft = None\\nfor (i, el) in enumerate(a):\\n\\tif el > k:\\n\\t\\tleft = i\\n\\t\\tbreak\\nif left is None:\\n\\tprint(len(a))\\n\\texit()\\nfor i in reversed(range(n)):\\n\\tif a[i] > k:\\n\\t\\tright = i\\n\\t\\tbreak\\nprint(left + n - right - 1)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nflag = 0\\nfor i in range(n):\\n\\tif arr[i] <= k:\\n\\t\\tflag = flag + 1\\n\\telse:\\n\\t\\tbreak\\nif flag != n:\\n\\tfor j in reversed(range(n)):\\n\\t\\tif arr[j] <= k:\\n\\t\\t\\tflag = flag + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(flag)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ni = 0\\nc = 1\\nwhile c and i < n:\\n\\tif l[i] <= k:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tc = 0\\nsum = i\\nc = 1\\ni = n - 1\\nwhile c and i > sum:\\n\\tif l[i] <= k:\\n\\t\\ti -= 1\\n\\telse:\\n\\t\\tc = 0\\nsum += n - 1 - i\\nprint(sum)\\n\", \"a = input()\\na = a.split()\\nl = int(a[0])\\nm = int(a[1])\\nb = input()\\nb = b.split()\\ns = 0\\nfor i in range(l):\\n\\tx = b[i]\\n\\tx = int(x)\\n\\tif x <= m:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tbreak\\nb.reverse()\\nfor i in range(l):\\n\\tx = b[i]\\n\\tx = int(x)\\n\\tif x <= m:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tbreak\\nif s > l:\\n\\tprint(l)\\nelse:\\n\\tprint(s)\\n\", \"(n, k) = map(int, input().split())\\nd = [int(x) for x in input().split()]\\ncf = cb = 0\\nfor i in d:\\n\\tif i > k:\\n\\t\\tbreak\\n\\tcf += 1\\nd.reverse()\\nfor i in d:\\n\\tif i > k:\\n\\t\\tbreak\\n\\tcb += 1\\nprint(min(n, cb + cf))\\n\", \"def solve(ls, k):\\n\\tres = 0\\n\\tidx = 0\\n\\tfor (i, num) in enumerate(ls):\\n\\t\\tif num <= k:\\n\\t\\t\\tres += 1\\n\\t\\t\\tidx = i\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(len(ls) - 1, idx, -1):\\n\\t\\tif ls[i] <= k:\\n\\t\\t\\tres += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn res\\n(_, k) = list(map(int, input().split()))\\nls = list(map(int, input().split()))\\nprint(solve(ls, k))\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\ncount = 0\\nf = 0\\nfor i in range(n):\\n\\tif l[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tf = 1\\n\\t\\tbreak\\nc2 = 0\\nf1 = 0\\nfor j in range(n - 1, 0, -1):\\n\\tif l[j] <= k:\\n\\t\\tc2 += 1\\n\\telse:\\n\\t\\tf1 = 1\\n\\t\\tbreak\\nif n == 1 and l[0] > k:\\n\\tprint(0)\\nelif i < j:\\n\\tprint(count + c2)\\nelif f == 1 and f1 == 1:\\n\\tprint(n - 1)\\nelse:\\n\\tprint(n)\\n\", \"(a, b) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nfor i in range(a):\\n\\tif l[i] <= b:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(a - 1, -1, -1):\\n\\tif l[i] <= b:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(a, c))\\n\", \"inp = input()\\nn = int(inp.split(' ')[0])\\nk = int(inp.split(' ')[1])\\nc = 0\\nlist = input().split(' ')\\nfor i in range(0, n):\\n\\tlist[i] = int(list[i])\\nwhile len(list) > 0 and list[0] <= k:\\n\\tlist.pop(0)\\n\\tc += 1\\nlist.reverse()\\nwhile len(list) > 0 and list[0] <= k:\\n\\tlist.pop(0)\\n\\tc += 1\\nprint(c)\\n\", \"from functools import cmp_to_key\\ns = input()\\ns = s.split(' ')\\nn = int(s[0])\\nk = int(s[1])\\ns = input()\\ns = s.split(' ')\\na = []\\nfor i in range(0, n):\\n\\ta.append(int(s[i]))\\nx = -1\\ny = n\\nfor i in range(0, n):\\n\\tif a[i] <= k:\\n\\t\\tx = i\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\ty = i\\n\\telse:\\n\\t\\tbreak\\nif y <= x:\\n\\tprint(n)\\nelse:\\n\\tprint(n - y + x + 1)\\n\", \"(n, k) = map(int, input().split())\\ntasks = list(map(int, input().split()))\\ncounter = 0\\nfor i in range(0, n):\\n\\tif tasks[i] <= k:\\n\\t\\tcounter += 1\\n\\telse:\\n\\t\\tbreak\\nif counter != n:\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif tasks[i] <= k:\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(counter)\\n\", \"import sys\\nimport math\\nimport bisect\\n\\ndef main():\\n\\t(n, m) = map(int, input().split())\\n\\tA = list(map(int, input().split()))\\n\\tif max(A) <= m:\\n\\t\\tprint(n)\\n\\telse:\\n\\t\\ti = 0\\n\\t\\tj = n - 1\\n\\t\\twhile i < n and A[i] <= m:\\n\\t\\t\\ti += 1\\n\\t\\twhile j >= 0 and A[j] <= m:\\n\\t\\t\\tj -= 1\\n\\t\\tprint(n - (j - i + 1))\\nmain()\\n\", \"(n, k) = map(int, input().split())\\ns = [int(i) for i in input().split()]\\na = 0\\nb = n - 1\\nans = 0\\nwhile a < len(s) and b >= 0 and (s[a] <= k or s[b] <= k):\\n\\tif s[a] <= k:\\n\\t\\tans += 1\\n\\t\\ta += 1\\n\\t\\tcontinue\\n\\tans += 1\\n\\tb -= 1\\nprint(ans)\\n\", \"import sys\\ndata = sys.stdin.readlines()\\nlis = []\\nfor line in data:\\n\\tlis.append(line)\\n(n, k) = list(map(int, lis[0].split()))\\nseq = list(map(int, lis[1].split()))\\nctr = 0\\nwhile seq:\\n\\tif seq[0] <= k:\\n\\t\\tctr += 1\\n\\t\\tseq.pop(0)\\n\\telse:\\n\\t\\tbreak\\nwhile seq:\\n\\tif seq[-1] <= k:\\n\\t\\tctr += 1\\n\\t\\tseq.pop(-1)\\n\\telse:\\n\\t\\tbreak\\nprint(ctr)\\n\", \"(n, k) = map(int, input().split())\\nb = list(map(int, input().split()))\\nj = 0\\nq = 0\\nr = 0\\nwhile j < n:\\n\\tif b[j] > k:\\n\\t\\tq = j + 1\\n\\t\\tbreak\\n\\tj += 1\\nj = n - 1\\nwhile j >= 0:\\n\\tif b[j] > k:\\n\\t\\tr = n - j - 1\\n\\t\\tbreak\\n\\tj += -1\\nif q == 0:\\n\\tprint(n)\\nelse:\\n\\tprint(q + r - 1)\\n\", \"s = input()\\nl = int(s.split()[0])\\nc = int(s.split()[1])\\ncpt = 0\\nli = list()\\nfor k in input().split():\\n\\tli.append(int(k))\\nfor i in li:\\n\\tif i <= c:\\n\\t\\tcpt += 1\\n\\telse:\\n\\t\\tbreak\\nif cpt != len(li):\\n\\tfor i in li[::-1]:\\n\\t\\tif i <= c:\\n\\t\\t\\tcpt += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(cpt)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\na = input().split()\\na = [int(i) for i in a]\\nfor (i, p) in enumerate(a):\\n\\tif p > k:\\n\\t\\tout = i\\n\\t\\tfor (j, q) in enumerate(reversed(a)):\\n\\t\\t\\tif q > k:\\n\\t\\t\\t\\tout += j\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nelse:\\n\\tout = len(a)\\nprint(out)\\n\", \"(n, m) = list(map(int, input().strip().split()))\\nl = list(map(int, input().strip().split()))\\nif max(l) <= m:\\n\\tprint(n)\\nelse:\\n\\tt = 0\\n\\tfor j in l:\\n\\t\\tif j <= m:\\n\\t\\t\\tt += 1\\n\\t\\telse:\\n\\t\\t\\tp = l[::-1]\\n\\t\\t\\tfor j in p:\\n\\t\\t\\t\\tif j <= m:\\n\\t\\t\\t\\t\\tt += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(t)\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tprint(t)\\n\", \"(n, k) = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\noff = -1\\nans = 0\\nfor (idx, val) in enumerate(arr):\\n\\tif val <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\toff = idx\\n\\t\\tbreak\\nif off != -1:\\n\\tarr = arr[off:]\\n\\tarr = reversed(arr)\\n\\tfor val in arr:\\n\\t\\tif val <= k:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [int(m) for m in input().split()]\\nwhile len(a) > 0:\\n\\tif a[0] <= k:\\n\\t\\ta.pop(0)\\n\\telse:\\n\\t\\tbreak\\nwhile len(a) > 0:\\n\\tif a[len(a) - 1] <= k:\\n\\t\\ta.pop()\\n\\telse:\\n\\t\\tbreak\\nprint(n - len(a))\\n\", \"(n, k) = map(int, input().split())\\ndata = map(int, input().split())\\ndata = list(data)\\nl = 0\\nr = n - 1\\nans = 0\\nwhile True:\\n\\tcan = False\\n\\tif l > r:\\n\\t\\tbreak\\n\\tif data[l] <= k:\\n\\t\\tl += 1\\n\\t\\tans += 1\\n\\t\\tcan = True\\n\\tif l > r:\\n\\t\\tbreak\\n\\tif data[r] <= k:\\n\\t\\tr -= 1\\n\\t\\tans += 1\\n\\t\\tcan = True\\n\\tif not can:\\n\\t\\tbreak\\nprint(ans)\\n\", \"arr = list(map(int, input().split(' ')))\\nar = list(map(int, input().split(' ')))\\nt = 0\\nfor i in range(arr[0]):\\n\\tif ar[i] > arr[1]:\\n\\t\\tt = ar.index(ar[i])\\n\\t\\tbreak\\nar.reverse()\\nz = 0\\nfor each in ar:\\n\\tif each > arr[1]:\\n\\t\\tz = ar.index(each)\\n\\t\\tbreak\\nar = sorted(ar)\\ns = 0\\nfor h in ar:\\n\\tif h > arr[1]:\\n\\t\\ts = 1\\nif s == 0:\\n\\tprint(arr[0])\\nelse:\\n\\tprint(z + t)\\n\", \"(n, m) = map(int, input().split())\\nar = list(map(int, input().split()))\\nans = 0\\nlst = 0\\nfor i in range(n):\\n\\tlst = i\\n\\tif ar[i] > m:\\n\\t\\tbreak\\n\\tans = ans + 1\\nfor i in range(n - 1, lst, -1):\\n\\tif ar[i] > m:\\n\\t\\tbreak\\n\\tans = ans + 1\\nprint(ans)\\n\", \"(x, y) = map(int, input().split())\\nA = list(map(int, input().split()))\\n(n, count) = ([], 0)\\nfor i in range(len(A)):\\n\\tif A[i] > y:\\n\\t\\tcount += 1\\n\\t\\tbreak\\n\\telse:\\n\\t\\tn.append(A[i])\\nA.reverse()\\nfor i in range(len(A)):\\n\\tif A[i] > y:\\n\\t\\tcount += 1\\n\\t\\tbreak\\n\\telse:\\n\\t\\tn.append(A[i])\\nif count == 0:\\n\\tprint(x)\\nelse:\\n\\tprint(len(n))\\n\", \"f = lambda : map(int, input().split())\\n(n, k) = f()\\na = list(f())\\n(ans, l, r) = (0, 0, n - 1)\\nwhile True:\\n\\tif l > r:\\n\\t\\tbreak\\n\\tif l == r and a[l] <= k:\\n\\t\\tans += 1\\n\\t\\tbreak\\n\\tif a[l] > k and a[r] > k:\\n\\t\\tbreak\\n\\tif a[l] <= k:\\n\\t\\tl += 1\\n\\t\\tans += 1\\n\\tif a[r] <= k:\\n\\t\\tr -= 1\\n\\t\\tans += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\nlist1 = list(map(int, input().split()))\\nglobal cout\\ncout = 0\\nm = len(list1)\\nfor i in range(m):\\n\\tif list1[i] <= k:\\n\\t\\tcout += 1\\n\\t\\tlist1[i] = k + 1\\n\\telse:\\n\\t\\tbreak\\nlist1.reverse()\\nfor i in range(m):\\n\\tif list1[i] <= k:\\n\\t\\tcout += 1\\n\\t\\tlist1[i] = k + 1\\n\\telse:\\n\\t\\tbreak\\nprint(cout)\\n\", \"(n, s) = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i < n and min(a[0], a[-1]) <= s:\\n\\ti += 1\\n\\tk = min(a[0], a[-1])\\n\\tif k == a[0]:\\n\\t\\ta.remove(k)\\n\\telse:\\n\\t\\ta.pop()\\nprint(i)\\n\", \"(n, k) = map(int, input().split())\\na = [int(i) for i in input().split()]\\ngame = 1\\nres = 0\\nwhile game:\\n\\ttry:\\n\\t\\tif a[0] <= k:\\n\\t\\t\\ta.remove(a[0])\\n\\t\\t\\tres += 1\\n\\t\\tif a[-1] <= k:\\n\\t\\t\\ta.reverse()\\n\\t\\t\\ta.remove(a[0])\\n\\t\\t\\tres += 1\\n\\t\\tif not a[0] <= k and (not a[-1] <= k):\\n\\t\\t\\tgame = 0\\n\\texcept:\\n\\t\\tbreak\\nprint(res)\\n\", \"(n, k) = map(int, input().split())\\nli1 = list(map(int, input().split()))\\na = 0\\nb = 0\\ncoun = -0\\nfor i in range(n):\\n\\tif li1[i] <= k and a == 0:\\n\\t\\tcoun += 1\\n\\t\\tli1[i] = -10\\n\\telif li1[i] > k:\\n\\t\\ta = 1\\n\\t\\tbreak\\nfor i in range(n)[::-1]:\\n\\tif li1[i] <= k and li1[i] != -10 and (b == 0):\\n\\t\\tcoun += 1\\n\\t\\tli1[i] = -10\\n\\telif li1[i] > k:\\n\\t\\tb = 1\\n\\t\\tbreak\\nprint(coun)\\n\", \"(n, k) = map(int, input().split())\\nproblem_list = list(map(int, input().split()))\\nans = 0\\nfor item in problem_list:\\n\\tif item <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nif ans != n:\\n\\tfor item in reversed(problem_list):\\n\\t\\tif item <= k:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [int(i) for i in input().split()]\\nt = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tt += 1\\n\\t\\ta[i] = k + 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tt += 1\\n\\telse:\\n\\t\\tbreak\\nprint(t)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\nflag = 0\\nfor i in a:\\n\\tif i > k:\\n\\t\\tflag = 1\\n\\t\\tbreak\\n\\tcount += 1\\na.reverse()\\nfor i in a:\\n\\tif i > k:\\n\\t\\tbreak\\n\\tcount += 1\\nif flag == 0:\\n\\tprint(n)\\nelse:\\n\\tprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nN = 0\\nfor x in range(len(a)):\\n\\tif a[0] <= k or a[len(a) - 1] <= k:\\n\\t\\tN += 1\\n\\t\\tif a[0] <= k:\\n\\t\\t\\tdel a[0]\\n\\t\\telse:\\n\\t\\t\\tdel a[len(a) - 1]\\n\\telse:\\n\\t\\tbreak\\nprint(N)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nmish = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tmish += i\\n\\t\\tbreak\\nelse:\\n\\tmish = n\\nif mish != n:\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif a[i] > k:\\n\\t\\t\\tmish += n - i - 1\\n\\t\\t\\tbreak\\nprint(mish)\\n\", \"(n, k) = map(int, input().split())\\nl = [int(x) for x in input().split()]\\ni = 0\\nj = n - 1\\nf = 0\\nc = 0\\nwhile f == 0 and i < n and (j >= 0):\\n\\tif l[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti = i + 1\\n\\telif l[j] <= k:\\n\\t\\tc += 1\\n\\t\\tj = j - 1\\n\\telse:\\n\\t\\tf = 1\\n\\t\\tbreak\\nprint(c)\\n\", \"def maxProbs(l, k, n):\\n\\ti = 0\\n\\tj = len(l) - 1\\n\\tnum = 0\\n\\twhile l[i] <= k:\\n\\t\\tnum += 1\\n\\t\\ti += 1\\n\\t\\tif i >= n:\\n\\t\\t\\tbreak\\n\\twhile l[j] <= k and j > i:\\n\\t\\tnum += 1\\n\\t\\tj -= 1\\n\\treturn num\\n(n, k) = map(int, input().split())\\nl = [int(i) for i in input().split()]\\nnum = maxProbs(l, k, n)\\nprint(num)\\n\", \"(n, k) = [int(x) for x in input().split()]\\nproblems = [int(x) for x in input().split()]\\nprobs = problems[:]\\nfor i in range(2):\\n\\twhile len(probs) > 0:\\n\\t\\tif probs[-1] <= k:\\n\\t\\t\\tprobs.pop()\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprobs = probs[::-1]\\nprint(n - len(probs))\\n\", \"(n, k) = map(int, input().split())\\narr = [int(x) for x in input().split()]\\nans = 0\\n\\ndef solve(arr):\\n\\ttemp = 0\\n\\tfor x in arr:\\n\\t\\tif x <= k:\\n\\t\\t\\ttemp += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn temp\\nans = solve(arr)\\nans += solve(arr[ans:][::-1])\\nprint(ans)\\n\", \"(n, k) = (int(x) for x in input().split())\\np = [int(x) for x in input().split()]\\ni = 0\\nr1 = 0\\nr2 = 0\\nwhile r1 is 0 or r2 is 0:\\n\\ttry:\\n\\t\\tif i % 2 is 0:\\n\\t\\t\\tif p[0] <= k:\\n\\t\\t\\t\\tdel p[0]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tr1 = 1\\n\\t\\telif p[-1] <= k:\\n\\t\\t\\tdel p[-1]\\n\\t\\telse:\\n\\t\\t\\tr2 = 1\\n\\t\\ti += 1\\n\\texcept:\\n\\t\\tbreak\\nprint(n - len(p))\\n\", \"(n, k) = input().split()\\n(n, k) = [int(n), int(k)]\\na = [int(i) for i in input().split()]\\nc = 0\\ni = 0\\nj = n - 1\\nwhile i < n and j >= 0:\\n\\tif a[i] <= k and a[j] <= k:\\n\\t\\tc += 1\\n\\t\\ti += 1\\n\\telif a[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti += 1\\n\\telif a[j] <= k:\\n\\t\\tc += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split(' '))\\nalist = list(map(int, input().split()))\\ni = 0\\ncount = 0\\nfor i in range(0, n, 1):\\n\\tif alist[i] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nif n - 1 >= 1:\\n\\tfor j in range(n - 1, i, -1):\\n\\t\\tif alist[j] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = list(map(int, input().split(' ')))\\na = list(map(int, input().split(' ')))\\nanswer = 0\\nleft = 0\\nright = 0\\ni = 0\\nwhile i < len(a) and i + left <= n - i - 1 + right:\\n\\tends_levels = (a[i + left], a[n - i - 1 + right])\\n\\tif i + left < n - i - 1 + right:\\n\\t\\tif k >= ends_levels[0] and k >= ends_levels[1]:\\n\\t\\t\\tanswer += 2\\n\\t\\telif k >= ends_levels[0] or k >= ends_levels[1]:\\n\\t\\t\\tanswer += 1\\n\\t\\tif k < ends_levels[0]:\\n\\t\\t\\tleft -= 1\\n\\t\\tif k < ends_levels[1]:\\n\\t\\t\\tright += 1\\n\\t\\tif k < ends_levels[0] and k < ends_levels[1]:\\n\\t\\t\\tbreak\\n\\tif i + left == n - i - 1 + right and a[i + left] <= k:\\n\\t\\tanswer += 1\\n\\ti += 1\\nprint(answer)\\n\", \"(n, k) = input().split()\\n(n, k) = (int(n), int(k))\\na = [int(i) for i in input().split()]\\nwhile a[0] <= k and a != []:\\n\\ta = a[1:]\\n\\tif a == []:\\n\\t\\tbreak\\nif a != []:\\n\\twhile a[-1] <= k and a != []:\\n\\t\\ta = a[:-1]\\nprint(n - len(a))\\n\", \"t = input()\\nt = t.split()\\nn = int(t[0])\\nk = int(t[1])\\np = 0\\na = input()\\na = a.split()\\nfor x in range(n):\\n\\ta[p] = int(a[p])\\n\\tp = p + 1\\ni = 0\\nj = 0\\ne = -1\\nfor x in range(n):\\n\\tif k >= a[i]:\\n\\t\\tj = j + 1\\n\\t\\ti = i + 1\\n\\telif k >= a[e]:\\n\\t\\te = e - 1\\n\\t\\tj = j + 1\\n\\telse:\\n\\t\\tbreak\\nprint(j)\\n\", \"(n, k) = map(int, input().split())\\nl = [int(n) for n in input().split()]\\ni = 0\\ncount = 0\\nwhile len(l) > 0:\\n\\tn = len(l)\\n\\tif l[0] > k and l[n - 1] > k:\\n\\t\\tbreak\\n\\tif l[0] <= k and l[0] <= l[n - 1]:\\n\\t\\tl = l[1:n]\\n\\telif l[0] > l[n - 1] and l[n - 1] <= k:\\n\\t\\tl = l[0:n - 1]\\n\\tcount += 1\\nprint(count)\\n\", \"(z, zz) = (input, lambda : list(map(int, z().split())))\\nzzz = lambda : [int(i) for i in stdin.readline().split()]\\n(szz, graph, mod, szzz) = (lambda : sorted(zz()), {}, 10 ** 9 + 7, lambda : sorted(zzz()))\\nfrom string import *\\nfrom re import *\\nfrom collections import *\\nfrom queue import *\\nfrom sys import *\\nfrom collections import *\\nfrom math import *\\nfrom heapq import *\\nfrom itertools import *\\nfrom bisect import *\\nfrom collections import Counter as cc\\nfrom math import factorial as f\\nfrom bisect import bisect as bs\\nfrom bisect import bisect_left as bsl\\nfrom itertools import accumulate as ac\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\n\\ndef prime(x):\\n\\tp = ceil(x ** 0.5) + 1\\n\\tfor i in range(2, p):\\n\\t\\tif x % i == 0 and x != 2 or x == 0:\\n\\t\\t\\treturn 0\\n\\treturn 1\\n\\ndef dfs(u, visit, graph):\\n\\tvisit[u] = True\\n\\tfor i in graph[u]:\\n\\t\\tif not visit[i]:\\n\\t\\t\\tdfs(i, visit, graph)\\n(n, k) = zz()\\narr = zzz()\\n(l, r) = (0, n - 1)\\nc = 0\\nd = 0\\nwhile l <= r:\\n\\tif arr[l] <= k:\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tc = 1\\n\\tif arr[r] <= k:\\n\\t\\tr -= 1\\n\\telse:\\n\\t\\td = 1\\n\\tif c + d == 2:\\n\\t\\tbreak\\nprint(min(n, l + (n - r - 1)))\\n\", \"(n, k) = map(int, input().split())\\nar = list(map(int, input().split()))\\ncount = 0\\nwhile len(ar) > 0 and ar[0] <= k:\\n\\tcount += 1\\n\\tar.pop(0)\\nwhile len(ar) > 0 and ar[-1] <= k:\\n\\tcount += 1\\n\\tar.pop()\\nprint(count)\\n\", \"def cntFromLeft(A, N, K):\\n\\tcnt = 0\\n\\tfor i in range(N):\\n\\t\\tif A[i] <= K:\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\treturn cnt\\n\\treturn cnt\\n\\ndef cntFromRight(A, N, K):\\n\\tcnt = 0\\n\\tfor i in range(N - 1, -1, -1):\\n\\t\\tif A[i] <= K:\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\treturn cnt\\n\\treturn cnt\\n\\ndef both(A, N, k):\\n\\ti = 0\\n\\tj = N - 1\\n\\tcnt = 0\\n\\twhile True:\\n\\t\\ttry:\\n\\t\\t\\tif A[i] <= k:\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\telif A[j] <= k:\\n\\t\\t\\t\\tj -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn cnt\\n\\t\\texcept:\\n\\t\\t\\treturn cnt\\n\\t\\tcnt += 1\\n\\treturn cnt\\n(N, K) = map(int, input().split())\\nA = list(map(int, input().split()))\\nprint(both(A, N, K))\\n\", \"def parseInt(s):\\n\\treturn int(s)\\n\\ndef f():\\n\\tarrlen = list(map(parseInt, input().split()))\\n\\tarr = list(map(parseInt, input().split()))\\n\\tcont = 0\\n\\tprobs = 0\\n\\twhile len(arr) > 0 and (arr[0] <= arrlen[1] or arr[len(arr) - 1] <= arrlen[1]):\\n\\t\\tif arr[0] <= arrlen[1]:\\n\\t\\t\\tprobs += 1\\n\\t\\t\\tdel arr[0]\\n\\t\\telif arr[len(arr) - 1] <= arrlen[1]:\\n\\t\\t\\tprobs += 1\\n\\t\\t\\tdel arr[len(arr) - 1]\\n\\t\\tcont += 1\\n\\tprint(probs)\\nf()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\ts = s + 1\\n\\telse:\\n\\t\\tbreak\\ns2 = 0\\nfor j in range(n):\\n\\ti = n - j - 1\\n\\tif a[i] <= k and i > s:\\n\\t\\ts2 += 1\\n\\telse:\\n\\t\\tbreak\\nprint(s + s2)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nl = max(a)\\nif l <= k:\\n\\tprint(n)\\nelse:\\n\\ti = 0\\n\\tp = 0\\n\\twhile i < n:\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tp = p + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tp = p + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\ti -= 1\\n\\tprint(p)\\n\", \"l = input().split()\\nk = int(l[1])\\nl = input().split()\\ni = 0\\nfor j in range(len(l)):\\n\\tl[j] = int(l[j])\\nwhile len(l) > 0 and l[0] <= k:\\n\\ti += 1\\n\\tdel l[0]\\nwhile len(l) > 0 and l[-1] <= k:\\n\\ti += 1\\n\\tdel l[-1]\\nprint(i)\\n\", \"(x, y) = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nf = 0\\nfor i in a:\\n\\tif i > y:\\n\\t\\tf = 1\\n\\t\\tbreak\\n\\tans += 1\\nif f:\\n\\ta = a[::-1]\\n\\tfor i in a:\\n\\t\\tif i > y:\\n\\t\\t\\tbreak\\n\\t\\tans += 1\\nprint(ans)\\n\", \"line = input().split()\\nk = int(line[1])\\narr = input().split()\\narr = list(map(lambda x: int(x), arr))\\nleft = 0\\nright = 0\\ni = 0\\nwhile i < len(arr) and arr[i] <= k:\\n\\tleft += 1\\n\\ti += 1\\ni = len(arr) - 1\\nwhile i >= 0 and arr[i] <= k:\\n\\tright += 1\\n\\ti -= 1\\nprint(min(left + right, len(arr)))\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nl1 = []\\nfor i in range(len(l)):\\n\\tif l[i] <= k:\\n\\t\\tl1.append(l[i])\\n\\telse:\\n\\t\\tbreak\\nl = list(reversed(l))\\nfor i in range(n - len(l1)):\\n\\tif l[i] <= k:\\n\\t\\tl1.append(l[i])\\n\\telse:\\n\\t\\tbreak\\nprint(len(l1))\\n\", \"(a, b) = map(int, input().split())\\nc = list(map(int, input().split()))\\ncnt = 0\\nd = 0\\nx = []\\ny = []\\nfor i in range(a):\\n\\tif c[i] <= b:\\n\\t\\tcnt += 1\\n\\t\\tx.append(c[i])\\n\\telse:\\n\\t\\tbreak\\nfor i in range(a):\\n\\tif c[a - 1 - i] <= b:\\n\\t\\ty.append(c[a - 1 - i])\\n\\telse:\\n\\t\\tbreak\\nif len(x) == len(y) == a:\\n\\tprint(len(x))\\nelse:\\n\\tprint(len(x) + len(y))\\n\", \"(n, k) = (int(x) for x in input().split())\\nx = [int(x) for x in input().split()]\\nl = -1\\nr = -1\\nfor i in range(n):\\n\\tif x[i] > k:\\n\\t\\tl = i\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif x[i] > k:\\n\\t\\tr = i\\n\\t\\tbreak\\nif r == -1 and l == -1:\\n\\tprint(n)\\nelif l == r:\\n\\tprint(n - 1)\\nelse:\\n\\tprint(n - (r - l + 1))\\n\", \"n_k = input().split()\\nn = int(n_k[0])\\nk = int(n_k[1])\\nsol = 0\\na = list(map(int, input().split()))\\nwhile a and a[0] <= k:\\n\\ta.pop(0)\\n\\tsol += 1\\na.reverse()\\nwhile a and a[0] <= k:\\n\\ta.pop(0)\\n\\tsol += 1\\nprint(sol)\\n\", \"(n, k) = input().split()\\n(n, k) = [int(n), int(k)]\\nlist = [int(x) for x in input().split()]\\nc = 0\\ni = 0\\nwhile n > i and list[i] <= k:\\n\\tc += 1\\n\\ti += 1\\ni = n - 1\\nif n == c:\\n\\tprint(c)\\nelse:\\n\\twhile i >= 0 and list[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti -= 1\\n\\tprint(c)\\n\", \"import sys\\n(n, k) = map(int, sys.stdin.readline().split())\\nl = list(map(int, sys.stdin.readline().split()))\\ntotal = 0\\nsolvable = True\\nwhile l != [] and solvable:\\n\\tsolvable = False\\n\\tif l[0] <= k:\\n\\t\\ttotal += 1\\n\\t\\tl.pop(0)\\n\\t\\tsolvable = True\\n\\telif l[len(l) - 1] <= k:\\n\\t\\ttotal += 1\\n\\t\\tl.pop(len(l) - 1)\\n\\t\\tsolvable = True\\nprint(total)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nq = [int(i) for i in input().split()]\\nans = 0\\nwhile 1:\\n\\tflag = 0\\n\\tif len(q) > 0 and q[0] <= k:\\n\\t\\tans += 1\\n\\t\\tdel q[0]\\n\\t\\tflag += 1\\n\\tif len(q) > 0 and q[-1] <= k:\\n\\t\\tans += 1\\n\\t\\tdel q[-1]\\n\\t\\tflag += 1\\n\\tif flag == 0:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\nans = 0\\ni = 0\\nflag = 0\\nj = n - 1\\nwhile i <= j:\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\t\\ti += 1\\n\\t\\tcontinue\\n\\tif a[j] <= k:\\n\\t\\tans += 1\\n\\t\\tj -= 1\\n\\tif a[i] > k and a[j] > k:\\n\\t\\tbreak\\nprint(ans)\\n\", \"def main():\\n\\t[n, k] = map(int, input().split())\\n\\tarr = list(map(int, input().split()))\\n\\tans = 0\\n\\tle = 0\\n\\twhile le < len(arr):\\n\\t\\tif arr[le] > k:\\n\\t\\t\\tbreak\\n\\t\\tans += 1\\n\\t\\tle += 1\\n\\tif le < len(arr):\\n\\t\\tri = len(arr) - 1\\n\\t\\twhile ri >= 0:\\n\\t\\t\\tif arr[ri] > k:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tans += 1\\n\\t\\t\\tri -= 1\\n\\tprint(ans)\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ncnt = 0\\nfor i in a:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcnt += 1\\nfor i in a[::-1]:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcnt += 1\\nif cnt == 2 * n:\\n\\tcnt //= 2\\nprint(cnt)\\n\", \"(n, m) = map(int, input().split())\\nl = list(map(int, input().split()))\\ns = 0\\nfor i in l:\\n\\tif i <= m:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tbreak\\nif n != s:\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tif l[i] <= m:\\n\\t\\t\\ts += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(s)\\n\", \"(m, n) = map(int, input().split())\\nnums = list(map(int, input().split()))\\na = 0\\nb = len(nums) - 1\\ntotal = 0\\nif max(nums) <= n:\\n\\tprint(len(nums))\\nelse:\\n\\twhile nums[a] <= n or nums[b] <= n:\\n\\t\\tif nums[a] <= n:\\n\\t\\t\\ttotal = total + 1\\n\\t\\t\\ta = a + 1\\n\\t\\tif nums[b] <= n:\\n\\t\\t\\ttotal = total + 1\\n\\t\\t\\tb = b - 1\\n\\tprint(total)\\n\", \"(n, k) = map(int, input().split())\\nmat = list(map(int, input().split()))\\nresult = 0\\nfor i in range(n):\\n\\tif mat[i] > k:\\n\\t\\tbreak\\n\\tresult += 1\\nfor j in range(n - 1, i, -1):\\n\\tif mat[j] > k:\\n\\t\\tbreak\\n\\tresult += 1\\nprint(result)\\n\", \"n = list(map(int, input().split(' ')))\\na = list(map(int, input().split(' ')))\\ncount = 0\\nwhile len(a) != 0:\\n\\tif a[0] > n[1] and a[-1] > n[1]:\\n\\t\\tbreak\\n\\tif a[0] <= n[1]:\\n\\t\\tdel a[0]\\n\\t\\tcount = count + 1\\n\\telif a[-1] <= n[1]:\\n\\t\\tdel a[-1]\\n\\t\\tcount = count + 1\\nprint(count)\\n\", \"(s, k) = [int(x) for x in input().split()]\\nn = [int(x) for x in input().split()]\\nlr = 0\\nrl = 0\\nfor i in range(0, s):\\n\\tif n[i] <= k:\\n\\t\\tlr += 1\\n\\telse:\\n\\t\\tbreak\\nif lr != s:\\n\\tfor i in range(s - 1, -1, -1):\\n\\t\\tif n[i] <= k:\\n\\t\\t\\trl += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(lr + rl)\\n\", \"inp = input().split()\\nn = int(inp[0])\\na = int(inp[1])\\nlst = input().split()\\nintLst = [int(i) for i in lst]\\ncount = 0\\nwhile intLst:\\n\\tif intLst[0] <= a:\\n\\t\\tcount += 1\\n\\t\\tintLst = intLst[1:]\\n\\telif intLst[-1] <= a:\\n\\t\\tcount += 1\\n\\t\\tintLst = intLst[:-1]\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"n = [int(num) for num in input().split()]\\na = [int(num) for num in input().split()]\\ncount = 0\\nwhile len(a) > 0:\\n\\tif a[0] < n[1] + 1:\\n\\t\\ta.pop(0)\\n\\t\\tcount = count + 1\\n\\telif a[-1] < n[1] + 1:\\n\\t\\ta.pop(-1)\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nls = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(len(ls)):\\n\\tif ls[i] <= k:\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tbreak\\nif i != len(ls) - 1:\\n\\tfor j in range(len(ls) - 1, 0, -1):\\n\\t\\tif ls[j] <= k:\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(cnt)\\n\", \"(n, k) = map(int, input().split())\\nalist = list(map(int, input().split()))\\ncount = 0\\ni = 0\\nwhile i < n and alist[i] <= k:\\n\\ti += 1\\ncount += i\\nalist.reverse()\\ni = 0\\nwhile i < n and alist[i] <= k:\\n\\ti += 1\\ncount += i\\nprint(min(n, count))\\n\", \"def reshenie(lst, k):\\n\\t(count, count1) = (0, 0)\\n\\tif all((i <= k for i in lst)):\\n\\t\\treturn len(lst)\\n\\telif lst[0] > k and lst[len(lst) - 1] > k:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\tfor i in range(len(lst) - 1):\\n\\t\\t\\tif lst[i] <= k:\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(lst) - 1):\\n\\t\\t\\tif lst[len(lst) - i - 1] <= k:\\n\\t\\t\\t\\tcount1 += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\treturn count + count1\\n(s, m) = [int(j) for j in input().split()]\\na = [int(i) for i in input().split()]\\nprint(reshenie(a, m))\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nans = 0\\nwhile len(a) > 0 and k >= a[0]:\\n\\tans += 1\\n\\ta.remove(a[0])\\nwhile len(a) > 0 and k >= a[len(a) - 1]:\\n\\tans += 1\\n\\ta = a[:-1]\\nprint(ans)\\n\", \"(n, k) = list(map(int, input().split()))\\nt = list(map(int, input().split()))\\ni = 0\\ncnt = 0\\nwhile t[i] <= k:\\n\\ti += 1\\n\\tcnt += 1\\n\\tif i == n:\\n\\t\\tbreak\\nif i < n:\\n\\tj = n - 1\\n\\twhile t[j] <= k:\\n\\t\\tj -= 1\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"(n, k) = map(int, input().split())\\nlist1 = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n):\\n\\tif list1[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tlist1.pop(0)\\n\\telif list1[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tlist1.pop()\\n\\telif list1[-1] > k and list1[0] > k:\\n\\t\\tbreak\\nprint(count)\\n\", \"f = lambda : map(int, input().split())\\n(n, k) = f()\\nc = 0\\nl = list(f())\\nwhile (l[0] <= k or l[-1] <= k) and len(l) > 1:\\n\\tif l[0] <= k:\\n\\t\\tc += 1\\n\\t\\tl.pop(0)\\n\\telif l[-1] <= k:\\n\\t\\tc += 1\\n\\t\\tl.pop(-1)\\n\\telse:\\n\\t\\tbreak\\nprint(c + 1 if l[0] <= k else c)\\n\", \"(a, b) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 0\\nwhile l != [] and l[-1] <= b:\\n\\tc += 1\\n\\tl.pop()\\nl = l[::-1]\\nwhile l != [] and l[-1] <= b:\\n\\tc += 1\\n\\tl.pop()\\nprint(c)\\n\", \"from collections import deque\\n(n, k) = map(int, input().split())\\nelements = list(map(int, input().split()))\\nd = deque(elements)\\ncount = 0\\nwhile True:\\n\\tif len(d) != 0:\\n\\t\\tif d[0] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\td.popleft()\\n\\t\\telif d[-1] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\td.pop()\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\ni = 0\\nc = 0\\nwhile l:\\n\\tif l[i] <= k:\\n\\t\\tl.pop(0)\\n\\telif l[-1] <= k:\\n\\t\\tl.pop(-1)\\n\\telse:\\n\\t\\tbreak\\n\\tc = c + 1\\nprint(c)\\n\", \"import itertools\\n(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nbs = list(itertools.dropwhile(lambda x: x <= k, arr))\\nes = list(itertools.dropwhile(lambda x: x <= k, reversed(bs)))\\nprint('{}'.format(n - len(es)))\\n\", \"tmp = input().split()\\nn = int(tmp[0])\\nk = int(tmp[1])\\ntmp = input().split()\\na = []\\nfor i in tmp:\\n\\ta.append(int(i))\\nans = 0\\ni = 0\\nj = n - 1\\nf = 1\\nwhile i < j:\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\t\\ti += 1\\n\\telif a[j] <= k:\\n\\t\\tj -= 1\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tf = 0\\n\\t\\tbreak\\nif f and a[i] <= k:\\n\\tans += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nl = 0\\ntest = True\\noops = True\\nindex = -1\\nfor i in range(n):\\n\\tif test and k >= a[i]:\\n\\t\\tl += 1\\n\\telif test and k < a[i]:\\n\\t\\ttest = False\\n\\t\\tindex = i\\nif index != -1:\\n\\tfor i in range(n - 1, index, -1):\\n\\t\\tif oops and k >= a[i]:\\n\\t\\t\\tl += 1\\n\\t\\telse:\\n\\t\\t\\toops = False\\nprint(l)\\n\", \"import math\\n[a, b] = map(int, input().split())\\nz = list(input().split())\\nn = 0\\nfor i in range(a):\\n\\tif b < int(z[i]):\\n\\t\\tbreak\\n\\telse:\\n\\t\\tn = n + 1\\nfor d in reversed(range(a)):\\n\\tif b < int(z[d]):\\n\\t\\tbreak\\n\\telif i >= d:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tn = n + 1\\nprint(n)\\n\", \"nk = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ncnt = 0\\nok = True\\nwhile ok:\\n\\tif a[0] <= nk[1]:\\n\\t\\tcnt += 1\\n\\t\\ta.pop(0)\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tok = False\\nok = True\\nif len(a) > 0:\\n\\twhile ok:\\n\\t\\tif a[len(a) - 1] <= nk[1]:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\ta.pop(len(a) - 1)\\n\\t\\t\\tif len(a) == 0:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tok = False\\nprint(cnt)\\n\", \"import sys\\na = sys.stdin.read()\\na = a.split('\\\\n')\\ninfo = a[0].split()\\nability = int(info[1])\\nproblem = a[1].split()\\ncount = 0\\nreverse = False\\nfor i in problem:\\n\\tif int(i) <= ability:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\treverse = True\\n\\t\\tbreak\\nif reverse:\\n\\tfor i in problem[::-1]:\\n\\t\\tif int(i) <= ability:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(count)\\n\", \"def read_nums():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef main():\\n\\t(n, k) = read_nums()\\n\\tnums = read_nums()\\n\\tres = 0\\n\\tindex = 0\\n\\tfor num in nums:\\n\\t\\tif num > k:\\n\\t\\t\\tbreak\\n\\t\\tres += 1\\n\\t\\tindex += 1\\n\\tr_index = n - 1\\n\\twhile r_index > index:\\n\\t\\tnum = nums[r_index]\\n\\t\\tif num > k:\\n\\t\\t\\tbreak\\n\\t\\tres += 1\\n\\t\\tr_index -= 1\\n\\tprint(res)\\nmain()\\n\", \"(n, k) = map(int, input().split(' '))\\nli = [int(x) for x in input().split(' ')]\\ncount = 0\\ni = len(li) - 1\\nwhile i >= 0 and li[i] <= k:\\n\\tcount += 1\\n\\ti -= 1\\n\\tli.pop()\\nleng = len(li)\\ni = 0\\nwhile i < leng and li[i] <= k:\\n\\tcount += 1\\n\\ti += 1\\nprint(count)\\n\", \"def Bitplus():\\n\\tn = int(input())\\n\\tx = 0\\n\\tfor i in range(n):\\n\\t\\ta = input()\\n\\t\\tif '+' in a:\\n\\t\\t\\tx += 1\\n\\t\\telse:\\n\\t\\t\\tx -= 1\\n\\tprint(x)\\n\\ndef GiftSetidk():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tall = input().split(' ')\\n\\t\\tx = int(all[0])\\n\\t\\ty = int(all[1])\\n\\t\\ta = int(all[2])\\n\\t\\tb = int(all[3])\\n\\t\\tcounter = 0\\n\\t\\tcount = True\\n\\t\\twhile count:\\n\\t\\t\\tif x >= a and y >= b:\\n\\t\\t\\t\\tx -= a\\n\\t\\t\\t\\ty -= b\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\telif x >= b and y >= a:\\n\\t\\t\\t\\tx -= b\\n\\t\\t\\t\\ty -= a\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcount = False\\n\\t\\tprint(counter)\\n\\ndef Team():\\n\\tn = int(input())\\n\\tproblemcount = 0\\n\\tfor i in range(n):\\n\\t\\tcount = 0\\n\\t\\tanswer = input().split(' ')\\n\\t\\tfor i in range(len(answer)):\\n\\t\\t\\tanswer[i] = int(answer[i])\\n\\t\\tfor i in answer:\\n\\t\\t\\tif i == 1:\\n\\t\\t\\t\\tcount += 1\\n\\t\\tif count >= 2:\\n\\t\\t\\tproblemcount += 1\\n\\tprint(problemcount)\\n\\ndef NextRound():\\n\\tnk = input().split(' ')\\n\\tn = int(nk[0])\\n\\tk = int(nk[1])\\n\\tprint(n, k)\\n\\tscores = input().split(' ')\\n\\tcount = 0\\n\\tfor i in range(n):\\n\\t\\tscores[i] = int(scores[i])\\n\\tfive = scores[k]\\n\\tfor i in range(n):\\n\\t\\tif scores[i] >= five and scores[i] > 0:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\n\\ndef Beautifulmatrix():\\n\\tsteps = 0\\n\\tmatrixes = []\\n\\tfor i in range(5):\\n\\t\\ti = [input().split(' ')]\\n\\t\\tmatrixes += i\\n\\tfor i in range(5):\\n\\t\\tfor j in range(5):\\n\\t\\t\\tmatrixes[i][j] = int(matrixes[i][j])\\n\\tfor i in range(5):\\n\\t\\tfor j in range(5):\\n\\t\\t\\tif matrixes[i][j] > 0:\\n\\t\\t\\t\\tx = j\\n\\t\\t\\t\\ty = i\\n\\t\\t\\t\\tbreak\\n\\twhile x != 2 or y != 2:\\n\\t\\tif x > 2:\\n\\t\\t\\tx -= 1\\n\\t\\t\\tsteps += 1\\n\\t\\telif x < 2:\\n\\t\\t\\tx += 1\\n\\t\\t\\tsteps += 1\\n\\t\\telif y > 2:\\n\\t\\t\\ty -= 1\\n\\t\\t\\tsteps += 1\\n\\t\\telif y < 2:\\n\\t\\t\\ty += 1\\n\\t\\t\\tsteps += 1\\n\\tprint(steps)\\n\\ndef HelpfulMahts():\\n\\ts = input().split('+')\\n\\ts.sort()\\n\\tprint('+'.join(s))\\n\\ndef WordCapitalization():\\n\\tword = input()\\n\\tList = []\\n\\tfor i in word:\\n\\t\\tList.append(i)\\n\\tList[0] = List[0].upper()\\n\\ts = ''\\n\\tfor i in List:\\n\\t\\ts += i\\n\\tprint(s)\\n\\ndef Stonesonthetable():\\n\\tn = int(input())\\n\\tstones = []\\n\\trrg = input()\\n\\tcounter = 0\\n\\tfor i in rrg:\\n\\t\\tstones.append(i)\\n\\tfor i in range(n - 1):\\n\\t\\tif stones[i] == stones[i + 1]:\\n\\t\\t\\tcounter += 1\\n\\tprint(counter)\\n\\ndef BearandBigBrother():\\n\\tinpuut = input().split(' ')\\n\\ta = int(inpuut[0])\\n\\tb = int(inpuut[1])\\n\\tyear = 0\\n\\twhile a <= b:\\n\\t\\ta *= 3\\n\\t\\tb *= 2\\n\\t\\tyear += 1\\n\\tprint(year)\\n\\ndef Wrongsubtraction():\\n\\tnk = input().split(' ')\\n\\tn = int(nk[0])\\n\\tk = int(nk[1])\\n\\tfor i in range(k):\\n\\t\\tp = str(n)\\n\\t\\tif p[len(p) - 1] == '0':\\n\\t\\t\\tn //= 10\\n\\t\\telse:\\n\\t\\t\\tn -= 1\\n\\tprint(n)\\nimport string\\n\\ndef Word():\\n\\tword = input()\\n\\tlower = 0\\n\\tupper = 0\\n\\tfor i in word:\\n\\t\\tif i in string.ascii_lowercase:\\n\\t\\t\\tlower += 1\\n\\t\\telse:\\n\\t\\t\\tupper += 1\\n\\tif upper > lower:\\n\\t\\tword = word.upper()\\n\\telse:\\n\\t\\tword = word.lower()\\n\\tprint(word)\\n\\ndef QueueattheSchool():\\n\\tnt = input().split(' ')\\n\\tn = nt[0]\\n\\tt = int(nt[1])\\n\\ta = input()\\n\\tb = []\\n\\tref = ''\\n\\tfor i in a:\\n\\t\\tb.append(i)\\n\\tfor k in range(t):\\n\\t\\twhre = []\\n\\t\\tfor i in range(len(b) - 1):\\n\\t\\t\\tif b[i] == 'B' and b[i + 1] != 'B':\\n\\t\\t\\t\\twhre.insert(0, i)\\n\\t\\tfor j in whre:\\n\\t\\t\\tb.pop(j)\\n\\t\\t\\tb.insert(j + 1, 'B')\\n\\tfor i in b:\\n\\t\\tref += i\\n\\tprint(ref)\\n\\ndef Nearlyluckynumber():\\n\\tn = input()\\n\\tif n.count('7') + n.count('4') == 7 or n.count('7') + n.count('4') == 4:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef Translation():\\n\\ts = input()\\n\\tt = input()\\n\\tn = []\\n\\tfor i in t:\\n\\t\\tn.insert(0, i)\\n\\tt = ''\\n\\tfor i in n:\\n\\t\\tt += i\\n\\tif t == s:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef ANTONandDanik():\\n\\tn = int(input())\\n\\ts = input()\\n\\tA = s.count('A')\\n\\tD = s.count('D')\\n\\tif A > D:\\n\\t\\tprint('Anton')\\n\\telif D > A:\\n\\t\\tprint('Danik')\\n\\telse:\\n\\t\\tprint('Friendship')\\n\\ndef GeorgeandAccomodation():\\n\\tn = int(input())\\n\\trooms = 0\\n\\tfor i in range(n):\\n\\t\\tpq = input().split(' ')\\n\\t\\tp = int(pq[0])\\n\\t\\tq = int(pq[1])\\n\\t\\tif q - p >= 2:\\n\\t\\t\\trooms += 1\\n\\tprint(rooms)\\n\\ndef Magnets():\\n\\tn = int(input())\\n\\tRows = []\\n\\tgroups = 1\\n\\tfor i in range(n):\\n\\t\\tRows += [input()]\\n\\tfor i in range(n - 1):\\n\\t\\tif Rows[i] != Rows[i + 1]:\\n\\t\\t\\tgroups += 1\\n\\tprint(groups)\\n\\ndef InSearcoanEasyProblem():\\n\\tn = int(input())\\n\\tcounter = 0\\n\\ts = input().split(' ')\\n\\tif '1' in s:\\n\\t\\tprint('HARD')\\n\\telse:\\n\\t\\tprint('EASY')\\n\\ndef Hulk():\\n\\tc = int(input())\\n\\ti = 'I'\\n\\ts = ''\\n\\tit = 'it'\\n\\tfor i in range(1, c + 1):\\n\\t\\tif i == 1:\\n\\t\\t\\ts += 'hate '\\n\\t\\telif i % 2 == 0:\\n\\t\\t\\ts += 'that I love '\\n\\t\\telse:\\n\\t\\t\\ts += 'that I hate '\\n\\tprint(f'I {s}it')\\n\\ndef CalculatingFunctionidk():\\n\\tn = int(input())\\n\\tc = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i % 2 != 0:\\n\\t\\t\\tc -= i\\n\\t\\telse:\\n\\t\\t\\tc += i\\n\\tprint(c)\\n\\ndef IWannaBetheGuyidk():\\n\\tn = int(input())\\n\\tp = input().split(' ')\\n\\tq = input().split(' ')\\n\\tcounter = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif str(i) in p or str(i) in q:\\n\\t\\t\\tcounter += 1\\n\\tif counter == n:\\n\\t\\tprint('I become the guy.')\\n\\telse:\\n\\t\\tprint('Oh, my keyboard!')\\n\\ndef horsesheo():\\n\\tn = input().split(' ')\\n\\tmany = 4\\n\\twhatwas = []\\n\\tfor i in range(len(n)):\\n\\t\\tn[i] = int(n[i])\\n\\t\\tif n[i] not in whatwas:\\n\\t\\t\\twhatwas.append(n[i])\\n\\tprint(many - len(whatwas))\\n\\ndef ArrivaloftheGeneralidk():\\n\\tn = int(input())\\n\\ta = input().split(' ')\\n\\tmax = 0\\n\\tminlist = []\\n\\tfor i in range(n):\\n\\t\\ta[i] = int(a[i])\\n\\tfor i in a:\\n\\t\\tif i > max:\\n\\t\\t\\tmax = i\\n\\tmaxloc = a.index(max)\\n\\tfor i in a:\\n\\t\\tminlist.insert(0, i)\\n\\tmin = max\\n\\tfor i in a:\\n\\t\\tif i < min:\\n\\t\\t\\tmin = i\\n\\tminloc = minlist.index(min)\\n\\tprint(minloc + maxloc)\\n\\ndef UltraFastMathematician():\\n\\tfirst = input()\\n\\tsecond = input()\\n\\ts = ''\\n\\tfor i in range(len(first)):\\n\\t\\tif first[i] == '0' and second[i] == '1':\\n\\t\\t\\ts += '1'\\n\\t\\telif first[i] == '1' and second[i] == '0':\\n\\t\\t\\ts += '1'\\n\\t\\telif first[i] == '0' and second[i] == '0':\\n\\t\\t\\ts += '0'\\n\\t\\telif first[i] == '1' and second[i] == '1':\\n\\t\\t\\ts += '0'\\n\\tprint(s)\\n\\ndef Insomniacure():\\n\\tklmn = []\\n\\tfor i in range(4):\\n\\t\\tklmn.append(int(input()))\\n\\td = int(input())\\n\\tList = []\\n\\tif 1 in klmn:\\n\\t\\treturn d\\n\\tfor i in range(4):\\n\\t\\tmulit = klmn[i]\\n\\t\\twhile klmn[i] <= d:\\n\\t\\t\\tif klmn[i] not in List:\\n\\t\\t\\t\\tList.append(klmn[i])\\n\\t\\t\\tklmn[i] += mulit\\n\\treturn len(List)\\n\\ndef AntonandLetters():\\n\\tfirst = input()\\n\\tList = []\\n\\tfor i in first:\\n\\t\\tif i not in List and i in string.ascii_lowercase:\\n\\t\\t\\tList.append(i)\\n\\tprint(len(List))\\n\\ndef Pangram():\\n\\tn = int(input())\\n\\tword = input().lower()\\n\\tList = []\\n\\tif n >= 26:\\n\\t\\tfor i in word:\\n\\t\\t\\tif i not in List:\\n\\t\\t\\t\\tList.append(i)\\n\\t\\tif len(List) == 26:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef Collectingcoons():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tabcd = input().split(' ')\\n\\t\\tfor i in range(len(abcd)):\\n\\t\\t\\tabcd[i] = int(abcd[i])\\n\\t\\td = abcd[3]\\n\\t\\tabcd.pop()\\n\\t\\tmaxi = 0\\n\\t\\tfor i in abcd:\\n\\t\\t\\tif i > maxi:\\n\\t\\t\\t\\tmaxi = i\\n\\t\\tallindexes = [0, 1, 2]\\n\\t\\tindexmax = abcd.index(maxi)\\n\\t\\tallindexes.pop(indexmax)\\n\\t\\tallminus = 0\\n\\t\\tfor i in allindexes:\\n\\t\\t\\tallminus += abcd[indexmax] - abcd[i]\\n\\t\\td -= allminus\\n\\t\\tif d % 3 == 0 and d >= 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\ndef Brainsphotos():\\n\\tnm = input().split(' ')\\n\\tcolors = []\\n\\tfor i in range(int(nm[0])):\\n\\t\\tcolors += input().split(' ')\\n\\tfor i in colors:\\n\\t\\tif i == 'C' or i == 'M' or i == 'Y':\\n\\t\\t\\treturn '#Color'\\n\\treturn '#Black&White'\\n\\ndef SerejaandDima():\\n\\tn = int(input())\\n\\tcard = input().split(' ')\\n\\tS = 0\\n\\tD = 0\\n\\tsturn = True\\n\\tfor i in range(n):\\n\\t\\tif int(card[0]) > int(card[len(card) - 1]):\\n\\t\\t\\tif sturn:\\n\\t\\t\\t\\tS += int(card[0])\\n\\t\\t\\t\\tcard.pop(0)\\n\\t\\t\\t\\tsturn = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tD += int(card[0])\\n\\t\\t\\t\\tcard.pop(0)\\n\\t\\t\\t\\tsturn = True\\n\\t\\telif sturn:\\n\\t\\t\\tS += int(card[len(card) - 1])\\n\\t\\t\\tcard.pop(len(card) - 1)\\n\\t\\t\\tsturn = False\\n\\t\\telse:\\n\\t\\t\\tD += int(card[len(card) - 1])\\n\\t\\t\\tcard.pop(len(card) - 1)\\n\\t\\t\\tsturn = True\\n\\tprint(f'{S} {D}')\\n\\ndef Vanyaandcubes():\\n\\tn = int(input())\\n\\tcounter = 1\\n\\tcountdodo = 0\\n\\trows = 0\\n\\twhile n > 0:\\n\\t\\tcountdodo += counter\\n\\t\\tcounter += 1\\n\\t\\trows += 1\\n\\t\\tn -= countdodo\\n\\tif n == 0:\\n\\t\\tprint(rows)\\n\\telse:\\n\\t\\tprint(rows - 1)\\n\\ndef GennadyandaCarGame():\\n\\tcard = input()\\n\\tcards = input().replace(' ', '')\\n\\tfor i in card:\\n\\t\\tfor j in cards:\\n\\t\\t\\tif i == j:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\n\\ndef FafaandhisCompany():\\n\\tn = int(input())\\n\\tways = 0\\n\\tfor i in range(1, n):\\n\\t\\ta = n\\n\\t\\ta -= i\\n\\t\\tif a % i == 0:\\n\\t\\t\\tways += 1\\n\\tprint(ways)\\n\\ndef Mahmoudandehabandtheevenoddgame():\\n\\tn = int(input())\\n\\tMahmoudsturn = True\\n\\tMahmoudlsot = False\\n\\tEhablost = False\\n\\ta = 0\\n\\twhile not Mahmoudlsot and (not Ehablost):\\n\\t\\tif Mahmoudsturn:\\n\\t\\t\\tif n % 2 == 0 and n >= 2:\\n\\t\\t\\t\\tEhablost = True\\n\\t\\t\\telif n % 2 != 0 and n >= 2:\\n\\t\\t\\t\\ta = n - 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tMahmoudlsot = True\\n\\t\\telif n % 2 == 1 and n >= 1:\\n\\t\\t\\tMahmoudlsot = True\\n\\t\\telif n % 2 == 0 and n >= 1:\\n\\t\\t\\ta = n - 1\\n\\t\\telse:\\n\\t\\t\\tEhablost = False\\n\\t\\tn -= a\\n\\t\\tif Mahmoudsturn == True:\\n\\t\\t\\tMahmoudsturn = False\\n\\t\\telse:\\n\\t\\t\\tMahmoudsturn = True\\n\\tif Mahmoudlsot == True:\\n\\t\\tprint('Ehab')\\n\\telse:\\n\\t\\tprint('Mahmoud')\\n\\ndef FloorNumber():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tnx = input().split(' ')\\n\\t\\tn = int(nx[0])\\n\\t\\tx = int(nx[1])\\n\\t\\taparteements = 2\\n\\t\\tfloor = 1\\n\\t\\twhile n > aparteements:\\n\\t\\t\\taparteements += x\\n\\t\\t\\tfloor += 1\\n\\t\\tprint(floor)\\n\\ndef VustheCossackandaContest():\\n\\tnmk = input().split(' ')\\n\\tn = int(nmk[0])\\n\\tm = int(nmk[1])\\n\\tk = int(nmk[2])\\n\\tif n <= m and n <= k:\\n\\t\\tprint('Yes')\\n\\telse:\\n\\t\\tprint('No')\\n\\ndef NightattheMuseum():\\n\\tword = input()\\n\\trotations = 0\\n\\tlower = string.ascii_lowercase + string.ascii_lowercase + string.ascii_lowercase\\n\\tloc = lower.index('a', 26, 2 * 26)\\n\\tfor i in word:\\n\\t\\tcplus = loc\\n\\t\\tcminus = loc\\n\\t\\tkeep = True\\n\\t\\twhile keep:\\n\\t\\t\\tif i == lower[cplus] or i == lower[cminus]:\\n\\t\\t\\t\\tkeep = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcplus += 1\\n\\t\\t\\t\\tcminus -= 1\\n\\t\\t\\t\\trotations += 1\\n\\t\\t\\t\\tloc = lower.index(i, 26, 2 * 26)\\n\\tprint(rotations)\\n\\ndef OrdinarYnumbers():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tk = int(input())\\n\\t\\tcounter = 0\\n\\t\\tfor j in range(1, k + 1):\\n\\t\\t\\ta = str(j)\\n\\t\\t\\tif len(a) == a.count(a[0]):\\n\\t\\t\\t\\tcounter += 1\\n\\t\\tprint(counter)\\n\\ndef DieRoll():\\n\\tn = input().split(' ')\\n\\ty = int(n[0])\\n\\tw = int(n[1])\\n\\tnumber = 0\\n\\tdec = 6\\n\\tif y >= w:\\n\\t\\tfor i in range(y, 7):\\n\\t\\t\\tnumber += 1\\n\\telse:\\n\\t\\tfor i in range(w, 7):\\n\\t\\t\\tnumber += 1\\n\\tif number % 6 == 0:\\n\\t\\tnumber = number // 6\\n\\t\\tdec = 1\\n\\telif number % 3 == 0:\\n\\t\\tnumber = number // 3\\n\\t\\tdec = 2\\n\\telif number % 2 == 0:\\n\\t\\tnumber = number // 2\\n\\t\\tdec = 3\\n\\tprint(f'{number}/{dec}')\\n\\ndef Borze():\\n\\tn = input()\\n\\tl = ''\\n\\tk = ''\\n\\tfor i in n:\\n\\t\\tif i == '.' and len(l) == 0:\\n\\t\\t\\tk += '0'\\n\\t\\telse:\\n\\t\\t\\tl += i\\n\\t\\t\\tif len(l) == 2:\\n\\t\\t\\t\\tif l == '-.':\\n\\t\\t\\t\\t\\tk += '1'\\n\\t\\t\\t\\t\\tl = ''\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tk += '2'\\n\\t\\t\\t\\t\\tl = ''\\n\\tprint(k)\\n\\ndef FairPlayoff():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tloser = {}\\n\\t\\twinner = {}\\n\\t\\tcount = 0\\n\\t\\tk = input().split(' ')\\n\\t\\tif int(k[0]) > int(k[1]):\\n\\t\\t\\tloser['one'] = int(k[1])\\n\\t\\t\\twinner['two'] = int(k[0])\\n\\t\\telse:\\n\\t\\t\\tloser['one'] = int(k[0])\\n\\t\\t\\twinner['two'] = int(k[1])\\n\\t\\tif int(k[2]) > int(k[3]):\\n\\t\\t\\tloser['two'] = int(k[3])\\n\\t\\t\\twinner['one'] = int(k[2])\\n\\t\\telse:\\n\\t\\t\\tloser['two'] = int(k[2])\\n\\t\\t\\twinner['one'] = int(k[3])\\n\\t\\tfor i in loser:\\n\\t\\t\\tif loser[i] < winner[i]:\\n\\t\\t\\t\\tcount += 1\\n\\t\\tif count >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\ndef Bustoudaylanbd():\\n\\tn = int(input())\\n\\ts = []\\n\\trem = -1\\n\\tfirst = True\\n\\tss = ''\\n\\tfor i in range(n):\\n\\t\\ts += input().split('|')\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i] == 'OO' and first:\\n\\t\\t\\trem = i\\n\\t\\t\\ts[i] = '++'\\n\\t\\t\\tfirst = False\\n\\tfor i in range(len(s)):\\n\\t\\tif i % 2 == 0:\\n\\t\\t\\tss += s[i] + '|'\\n\\t\\telse:\\n\\t\\t\\tss += s[i] + '\\\\n'\\n\\tif not first:\\n\\t\\tprint('YES')\\n\\t\\tprint(ss)\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef Maximumincrease():\\n\\tn = int(input())\\n\\tarraa = input().split(' ')\\n\\tfor i in range(len(arraa)):\\n\\t\\tarraa[i] = int(arraa[i])\\n\\tcounter = {}\\n\\tfor i in range(n):\\n\\t\\tcounter[i] = 0\\n\\tcount = 0\\n\\tlast = 0\\n\\tfor i in arraa:\\n\\t\\tif i > last:\\n\\t\\t\\tlast = i\\n\\t\\t\\tcounter[count] += 1\\n\\t\\telse:\\n\\t\\t\\tlast = i\\n\\t\\t\\tcount += 1\\n\\t\\t\\tcounter[count] += 1\\n\\tmax = 0\\n\\tfor i in range(n):\\n\\t\\tif counter[i] > max:\\n\\t\\t\\tmax = counter[i]\\n\\tprint(max)\\n\\ndef Jugglingletters():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tk = int(input())\\n\\t\\ts = ''\\n\\t\\tmap = {}\\n\\t\\tpossible = True\\n\\t\\tfor i in range(k):\\n\\t\\t\\ts += input()\\n\\t\\tfor i in s:\\n\\t\\t\\tif i not in map:\\n\\t\\t\\t\\tmap[i] = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmap[i] += 1\\n\\t\\tfor i in map:\\n\\t\\t\\tif map[i] % k != 0:\\n\\t\\t\\t\\tpossible = False\\n\\t\\tif possible:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\ndef Panoramixsprediction():\\n\\tnm = input().split(' ')\\n\\tn = int(nm[0])\\n\\tm = int(nm[1])\\n\\tfirst = True\\n\\tfor i in range(n + 1, m):\\n\\t\\tcount = 0\\n\\t\\tfor j in range(2, i):\\n\\t\\t\\tif i % j == 0:\\n\\t\\t\\t\\tcount += 1\\n\\t\\tif count == 0:\\n\\t\\t\\tfirst = False\\n\\t\\t\\tbreak\\n\\tif first:\\n\\t\\tcount = 0\\n\\t\\tfor j in range(2, m):\\n\\t\\t\\tif m % j == 0:\\n\\t\\t\\t\\tcount += 1\\n\\t\\tif count == 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef ThreepilesofCanides():\\n\\tk = int(input())\\n\\tfor i in range(k):\\n\\t\\tn = input().split(' ')\\n\\t\\tcanides = 0\\n\\t\\tfor i in n:\\n\\t\\t\\tcanides += int(i)\\n\\t\\tif canides % 2 != 0:\\n\\t\\t\\tcanides -= 1\\n\\t\\tprint(canides // 2)\\n\\ndef filename():\\n\\tn = int(input())\\n\\tname = input()\\n\\tmore = 0\\n\\tmap = {}\\n\\tmap[more] = 0\\n\\tcount = 0\\n\\tfor i in name:\\n\\t\\tif i == 'x':\\n\\t\\t\\tmap[more] += 1\\n\\t\\telif map[more] != 0:\\n\\t\\t\\tmore += 1\\n\\t\\t\\tmap[more] = 0\\n\\tfor i in map:\\n\\t\\tif map[i] >= 3:\\n\\t\\t\\twhile map[i] > 2:\\n\\t\\t\\t\\tmap[i] -= 1\\n\\t\\t\\t\\tcount += 1\\n\\tprint(count)\\n\\ndef Football():\\n\\tmap = {}\\n\\tcurrent = 0\\n\\ts = input()\\n\\tf = s[0]\\n\\tmap[current] = 0\\n\\tcheck = False\\n\\tfor i in s:\\n\\t\\tif i == f:\\n\\t\\t\\tmap[current] += 1\\n\\t\\telse:\\n\\t\\t\\tcurrent += 1\\n\\t\\t\\tmap[current] = 1\\n\\t\\t\\tf = i\\n\\tfor i in map:\\n\\t\\tif map[i] >= 7:\\n\\t\\t\\tcheck = True\\n\\tif check:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef CombinationLock1():\\n\\tn = int(input())\\n\\tfl = input()\\n\\tsl = input()\\n\\tcount = 0\\n\\tfor i in range(n):\\n\\t\\tgoup = int(fl[i])\\n\\t\\tgod = int(fl[i])\\n\\t\\tcu = 0\\n\\t\\tcd = 0\\n\\t\\tkeep = True\\n\\t\\twhile keep:\\n\\t\\t\\tif goup + 1 <= 9:\\n\\t\\t\\t\\tgoup += 1\\n\\t\\t\\t\\tcu += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tgoup = 0\\n\\t\\t\\t\\tcu += 1\\n\\t\\t\\tif god - 1 >= 0:\\n\\t\\t\\t\\tgod -= 1\\n\\t\\t\\t\\tcd += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tgod = 9\\n\\t\\t\\t\\tcd += 1\\n\\t\\t\\tif goup == int(sl[i]):\\n\\t\\t\\t\\tcount += cu\\n\\t\\t\\t\\tkeep = False\\n\\t\\t\\telif god == int(sl[i]):\\n\\t\\t\\t\\tcount += cd\\n\\t\\t\\t\\tkeep = False\\n\\tprint(count)\\n\\ndef Watermelon():\\n\\tn = int(input())\\n\\tdown = n // 2\\n\\tup = n - down\\n\\trge = up\\n\\tfor i in range(rge):\\n\\t\\tif up % 2 == 0 and down % 2 == 0:\\n\\t\\t\\treturn print('YES')\\n\\t\\telif up + 1 < n and down - 1 > 0:\\n\\t\\t\\tup += 1\\n\\t\\t\\tdown -= 1\\n\\t\\telse:\\n\\t\\t\\treturn print('NO')\\n\\ndef Dominopiling():\\n\\tnk = input().split(' ')\\n\\tn = int(nk[0])\\n\\tk = int(nk[1])\\n\\tmnk = n * k\\n\\tprint(mnk // 2)\\n\\ndef yetanotherBookshelf():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tle = int(input())\\n\\t\\tK = input().split(' ')\\n\\t\\tSK = []\\n\\t\\tlili = []\\n\\t\\tfor i in range(le):\\n\\t\\t\\tif i + 1 <= le - 1:\\n\\t\\t\\t\\tif K[i] == '1' and K[i + 1] == '1':\\n\\t\\t\\t\\t\\tlili.append(i)\\n\\t\\tlili.reverse()\\n\\t\\tfor i in lili:\\n\\t\\t\\tK.pop(i)\\n\\t\\tcoun = 0\\n\\t\\twhile K.count('1') > 1:\\n\\t\\t\\tf = K.index('1')\\n\\t\\t\\tK.pop(f)\\n\\t\\t\\tK.insert(f + 1, '1')\\n\\t\\t\\tf += 1\\n\\t\\t\\tif K[f + 1] == '1':\\n\\t\\t\\t\\tK.pop(f)\\n\\t\\t\\tcoun += 1\\n\\t\\tprint(coun)\\n\\ndef Combinationlockittakestolong():\\n\\tn = int(input())\\n\\tfl = input()\\n\\tsl = input()\\n\\tcounter = 0\\n\\tfor i in range(n):\\n\\t\\tup = int(fl[i])\\n\\t\\tdown = int(fl[i])\\n\\t\\twhile True:\\n\\t\\t\\tif up + 1 <= 9:\\n\\t\\t\\t\\tup += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tup = 0\\n\\t\\t\\tif down - 1 >= 0:\\n\\t\\t\\t\\tdown -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdown = 9\\n\\t\\t\\tcounter += 1\\n\\t\\t\\tif up == int(sl) or down == int(sl):\\n\\t\\t\\t\\tbreak\\n\\ndef iwannabetheguytolong():\\n\\tn = int(input())\\n\\tlvl = input().split(' ')\\n\\tlvls = input().split(' ')\\n\\tfor i in range(1, n + 1):\\n\\t\\tif str(i) not in lvl and str(i) not in lvls:\\n\\t\\t\\treturn print('Oh, my keyboard!')\\n\\treturn print('I become the guy.')\\n\\ndef giftsettolong():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\trb = input().split(' ')\\n\\t\\tx = int(rb[0])\\n\\t\\ty = int(rb[1])\\n\\t\\ta = int(rb[2])\\n\\t\\tb = int(rb[3])\\n\\t\\tgiftset = 0\\n\\t\\twhile True:\\n\\t\\t\\tif x - a >= 0 and y - b >= 0:\\n\\t\\t\\t\\tx -= a\\n\\t\\t\\t\\ty -= b\\n\\t\\t\\t\\tgiftset += 1\\n\\t\\t\\telif x - b >= 0 and y - a >= 0:\\n\\t\\t\\t\\tx -= b\\n\\t\\t\\t\\ty -= a\\n\\t\\t\\t\\tgiftset += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tprint(giftset)\\n\\ndef uniquwbidauctiontime():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tk = int(input())\\n\\t\\tlist = input().split(' ')\\n\\t\\to = -1\\n\\t\\tfor i in range(k):\\n\\t\\t\\tif list.count(list[i]) == 1:\\n\\t\\t\\t\\tif o == -1 or list[i] < o:\\n\\t\\t\\t\\t\\to = list[i]\\n\\t\\tif o != -1:\\n\\t\\t\\tprint(list.index(o) + 1)\\n\\t\\telse:\\n\\t\\t\\tprint(o)\\n\\ndef equalizepriceagain():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tk = int(input())\\n\\t\\tnumbers = input().split(' ')\\n\\t\\tfor i in range(len(numbers)):\\n\\t\\t\\tnumbers[i] = int(numbers[i])\\n\\t\\ttotal = 0\\n\\t\\tfor i in numbers:\\n\\t\\t\\ttotal += i\\n\\t\\tif total % k == 0:\\n\\t\\t\\tprint(total // k)\\n\\t\\telse:\\n\\t\\t\\twhile total % k != 0:\\n\\t\\t\\t\\ttotal += 1\\n\\t\\t\\tprint(total // k)\\n\\ndef shortsubstrings():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\ts = input()\\n\\t\\tlaist = []\\n\\t\\tfor i in range(len(s)):\\n\\t\\t\\tif i % 2 != 0 and i != len(s) - 1:\\n\\t\\t\\t\\tlaist.append(i)\\n\\t\\tlaist.reverse()\\n\\t\\ts = list(s)\\n\\t\\tfor i in laist:\\n\\t\\t\\ts.pop(i)\\n\\t\\tsa = ''\\n\\t\\tfor i in s:\\n\\t\\t\\tsa += i\\n\\t\\tprint(sa)\\n\\ndef policerecruits():\\n\\tn = int(input())\\n\\tk = input().split(' ')\\n\\tofficers = 0\\n\\tcrimes = 0\\n\\tfor i in k:\\n\\t\\tif int(i) == -1:\\n\\t\\t\\tif officers == 0:\\n\\t\\t\\t\\tcrimes += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tofficers -= 1\\n\\t\\telse:\\n\\t\\t\\tofficers += int(i)\\n\\tprint(crimes)\\n\\ndef thenewyear():\\n\\txxx = input().split(' ')\\n\\tfor i in range(len(xxx)):\\n\\t\\txxx[i] = int(xxx[i])\\n\\txxx.sort()\\n\\tway = 0\\n\\tway += abs(int(xxx[1]) - int(xxx[0]))\\n\\tway += abs(int(xxx[1]) - int(xxx[2]))\\n\\tprint(way)\\n\\ndef frogjumpingtimelimit():\\n\\tn = int(input())\\n\\tfor i in range(n):\\n\\t\\tabk = input().split(' ')\\n\\t\\ta = int(abk[0])\\n\\t\\tb = int(abk[1])\\n\\t\\tk = int(abk[2])\\n\\t\\tall = 0\\n\\t\\tfor i in range(k):\\n\\t\\t\\tif i % 2 == 0:\\n\\t\\t\\t\\tall += a\\n\\t\\t\\telse:\\n\\t\\t\\t\\tall -= b\\n\\t\\tprint(all)\\n\\ndef patrickandshopping():\\n\\td = input().split(' ')\\n\\td3 = 0\\n\\tfor i in range(len(d)):\\n\\t\\tif int(d[i]) > d3:\\n\\t\\t\\td3 = int(d[i])\\n\\td.pop(d.index(str(d3)))\\n\\td1 = int(d[0])\\n\\td2 = int(d[1])\\n\\tdistance = d1 + d2\\n\\tif d3 <= distance:\\n\\t\\tdistance += d3\\n\\telse:\\n\\t\\tdistance += distance\\n\\tprint(distance)\\n\\ndef Freeicecream():\\n\\tnx = input().split(' ')\\n\\tn = int(nx[0])\\n\\tice = int(nx[1])\\n\\tdiskid = 0\\n\\tfor i in range(n):\\n\\t\\tk = input().split(' ')\\n\\t\\tif k[0] == '+':\\n\\t\\t\\tice += int(k[1])\\n\\t\\telif ice >= int(k[1]):\\n\\t\\t\\tice -= int(k[1])\\n\\t\\telse:\\n\\t\\t\\tdiskid += 1\\n\\tprint(ice, diskid)\\n\\ndef Reviewsite():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tupvotes = 0\\n\\t\\tvotes = input().split(' ')\\n\\t\\tfor i in votes:\\n\\t\\t\\tif i != '2':\\n\\t\\t\\t\\tupvotes += 1\\n\\t\\tprint(upvotes)\\n\\ndef Lastyeasrtssubstring():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\ts = input()\\n\\t\\tif s[0:4] == '2020' or s[n - 4:n] == '2020':\\n\\t\\t\\tprint('YES')\\n\\t\\telif s[0:3] == '202' and s[n - 1] == '0':\\n\\t\\t\\tprint('YES')\\n\\t\\telif s[n - 3:n] == '020' and s[0] == '2':\\n\\t\\t\\tprint('YES')\\n\\t\\telif s[0:2] == '20' and s[n - 2] == '20':\\n\\t\\t\\tprint('YES')\\n\\t\\telif s[n - 2:n] == '20' and s[0:2] == '20':\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\ndef Arena():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\theros = input().split(' ')\\n\\t\\theorsint = [int(i) for i in heros]\\n\\t\\theorsint.sort()\\n\\t\\tmin = heorsint[0]\\n\\t\\twinner = n - heorsint.count(min)\\n\\t\\tprint(winner)\\n\\ndef twoRabbitstoolongbutright():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\txyab = input().split(' ')\\n\\t\\tx = int(xyab[0])\\n\\t\\ty = int(xyab[1])\\n\\t\\ta = int(xyab[2])\\n\\t\\tb = int(xyab[3])\\n\\t\\tseconds = 0\\n\\t\\twhile x < y:\\n\\t\\t\\tx += a\\n\\t\\t\\ty -= b\\n\\t\\t\\tseconds += 1\\n\\t\\tif x == y:\\n\\t\\t\\tprint(seconds)\\n\\t\\telse:\\n\\t\\t\\tprint(-1)\\n\\ndef systemofequations():\\n\\tnm = input().split(' ')\\n\\tn = int(nm[0])\\n\\tm = int(nm[1])\\n\\tnm = [int(i) for i in nm]\\n\\tnm.sort()\\n\\tcount = 0\\n\\tfor i in range(nm[0] + 1):\\n\\t\\tfor j in range(nm[0] + 1):\\n\\t\\t\\tif i ** 2 + j == n and j ** 2 + i == m:\\n\\t\\t\\t\\tcount += 1\\n\\tprint(count)\\n\\ndef polycarpwspockets():\\n\\tn = int(input())\\n\\tcoins = input().split(' ')\\n\\tcoins = [int(i) for i in coins]\\n\\tpocket = 0\\n\\tfor i in coins:\\n\\t\\tnmumbver = coins.count(i)\\n\\t\\tif nmumbver > pocket:\\n\\t\\t\\tpocket = nmumbver\\n\\tprint(pocket)\\n\\ndef repeaqtijgcipher():\\n\\tn = int(input())\\n\\ts = input()\\n\\tcounter = 0\\n\\trep = 1\\n\\tns = ''\\n\\twhile counter < n:\\n\\t\\tcounter += rep\\n\\t\\tns += s[counter - 1]\\n\\t\\trep += 1\\n\\tprint(ns)\\n\\ndef Neaarestinterestingnumber():\\n\\ta = input()\\n\\ts = int(a)\\n\\twhile True:\\n\\t\\tif sum((int(i) for i in str(s))) % 4 == 0:\\n\\t\\t\\treturn print(s)\\n\\t\\telse:\\n\\t\\t\\ts += 1\\n\\ndef therearetwotzpesofburgers():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tess = input().split(' ')\\n\\t\\tess = [int(i) for i in ess]\\n\\t\\tprice = input().split(' ')\\n\\t\\tbuns = int(ess[0])\\n\\t\\ttotalmoney = 0\\n\\t\\tfirst = True\\n\\t\\tif int(price[0]) > int(price[1]):\\n\\t\\t\\tpatties = ess[1]\\n\\t\\t\\totherpatties = ess[2]\\n\\t\\t\\tmoney = int(price[0])\\n\\t\\t\\tothermoney = int(price[1])\\n\\t\\telse:\\n\\t\\t\\tpatties = ess[2]\\n\\t\\t\\totherpatties = ess[1]\\n\\t\\t\\tmoney = int(price[1])\\n\\t\\t\\tothermoney = int(price[0])\\n\\t\\tkeep = True\\n\\t\\twhile keep:\\n\\t\\t\\tif buns - 2 >= 0 and patties - 1 >= 0:\\n\\t\\t\\t\\tbuns -= 2\\n\\t\\t\\t\\tpatties -= 1\\n\\t\\t\\t\\ttotalmoney += money\\n\\t\\t\\telif buns - 2 >= 0 and patties == 0:\\n\\t\\t\\t\\tif first:\\n\\t\\t\\t\\t\\tpatties = otherpatties\\n\\t\\t\\t\\t\\tmoney = othermoney\\n\\t\\t\\t\\t\\tfirst = False\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(totalmoney)\\n\\t\\t\\t\\t\\tkeep = False\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(totalmoney)\\n\\t\\t\\t\\tkeep = False\\n\\ndef threeswimmerstimelimitebutseemsright():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tpabc = input().split(' ')\\n\\t\\tpabc = [int(i) for i in pabc]\\n\\t\\ta = 0\\n\\t\\tb = 0\\n\\t\\tc = 0\\n\\t\\tp = pabc[0]\\n\\t\\tkeep = True\\n\\t\\twhile keep:\\n\\t\\t\\tif a < p:\\n\\t\\t\\t\\ta += pabc[1]\\n\\t\\t\\tif b < p:\\n\\t\\t\\t\\tb += pabc[2]\\n\\t\\t\\tif c < p:\\n\\t\\t\\t\\tc += pabc[3]\\n\\t\\t\\tif a >= p and b >= p and (c >= p):\\n\\t\\t\\t\\tlist = [a - p, b - p, c - p]\\n\\t\\t\\t\\tlist.sort()\\n\\t\\t\\t\\tprint(list[0])\\n\\t\\t\\t\\tkeep = False\\n\\ndef Gregsworkout():\\n\\tn = int(input())\\n\\ttraining = input().split(' ')\\n\\ttraining = [int(i) for i in training]\\n\\tmap = [0, 0, 0]\\n\\tcurrent = 0\\n\\tfor i in training:\\n\\t\\tmap[current] += i\\n\\t\\tif current < 2:\\n\\t\\t\\tcurrent += 1\\n\\t\\telse:\\n\\t\\t\\tcurrent = 0\\n\\tsorte = []\\n\\tfor i in map:\\n\\t\\tsorte.append(i)\\n\\tsorte.sort()\\n\\tindex = map.index(sorte[2])\\n\\tif index == 0:\\n\\t\\tprint('chest')\\n\\telif index == 1:\\n\\t\\tprint('biceps')\\n\\telse:\\n\\t\\tprint('back')\\n\\ndef heisttimelimitebutseemsright():\\n\\tn = int(input())\\n\\tall = input().split(' ')\\n\\tall = [int(i) for i in all]\\n\\tall.sort()\\n\\tcounter = 0\\n\\tfor i in range(all[0], all[len(all) - 1]):\\n\\t\\tif i not in all:\\n\\t\\t\\tcounter += 1\\n\\tprint(counter)\\n\\ndef nonzero():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tnumbers = input().split(' ')\\n\\t\\tcount = numbers.count('0')\\n\\t\\tfor i in range(count):\\n\\t\\t\\tind = numbers.index('0')\\n\\t\\t\\tnumbers.pop(ind)\\n\\t\\t\\tnumbers.insert(ind, '1')\\n\\t\\tnumbers = [int(i) for i in numbers]\\n\\t\\tif sum(numbers) == 0:\\n\\t\\t\\tcount += 1\\n\\t\\tprint(count)\\n\\ndef distinctdigits():\\n\\tlr = input().split(' ')\\n\\tfor i in range(int(lr[0]), int(lr[1]) + 1):\\n\\t\\tcouynt = []\\n\\t\\tfor j in str(i):\\n\\t\\t\\tif j not in couynt:\\n\\t\\t\\t\\tcouynt.append(j)\\n\\t\\tif len(couynt) == len(str(i)):\\n\\t\\t\\treturn print(i)\\n\\telse:\\n\\t\\treturn print(-1)\\n\\ndef dawidandbagsofcandies():\\n\\tbags = input().split(' ')\\n\\tbags = [int(i) for i in bags]\\n\\tbags.sort()\\n\\tif bags[0] + bags[3] == bags[1] + bags[2]:\\n\\t\\tprint('YES')\\n\\telif bags[3] == bags[0] + bags[1] + bags[2]:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef lastminuteenhancements():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tnotes = input().split(' ')\\n\\t\\tlists = []\\n\\t\\tfor i in notes:\\n\\t\\t\\tif int(i) not in lists:\\n\\t\\t\\t\\tlists.append(int(i))\\n\\t\\t\\telif int(i) + 1 not in lists:\\n\\t\\t\\t\\tlists.append(int(i) + 1)\\n\\t\\tprint(len(lists))\\n\\ndef Cakeminator():\\n\\trc = input().split(' ')\\n\\tcake = []\\n\\tpices = 0\\n\\trows = 0\\n\\tfor i in range(int(rc[0])):\\n\\t\\tcake.append([i for i in input()])\\n\\tfor i in range(int(rc[1])):\\n\\t\\tcount = 0\\n\\t\\tfor j in range(int(rc[0])):\\n\\t\\t\\tif cake[j][i] == '.':\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\tif count == int(rc[0]):\\n\\t\\t\\t\\tpices += count\\n\\t\\t\\t\\trows += 1\\n\\tfor i in range(int(rc[0])):\\n\\t\\tif 'S' not in cake[i]:\\n\\t\\t\\tpices += int(rc[1]) - rows\\n\\tprint(pices)\\n\\ndef CME():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tfour = 4\\n\\t\\twhile four < n:\\n\\t\\t\\tfour += 2\\n\\t\\tprint(four - n)\\n\\ndef FriendsandCandies():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tcadies = input().split(' ')\\n\\t\\tcadies = [int(i) for i in cadies]\\n\\t\\tall = sum(cadies) % n\\n\\t\\tcount = 0\\n\\t\\tif all != 0:\\n\\t\\t\\tprint(-1)\\n\\t\\telse:\\n\\t\\t\\tfor i in cadies:\\n\\t\\t\\t\\tif i > sum(cadies) // n:\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\tprint(count)\\n\\ndef tworivalstudents():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tnxab = input().split(' ')\\n\\t\\tn = int(nxab[0])\\n\\t\\tx = int(nxab[1])\\n\\t\\tif int(nxab[2]) >= int(nxab[3]):\\n\\t\\t\\tbigger = int(nxab[2])\\n\\t\\t\\tsmaller = int(nxab[3])\\n\\t\\telse:\\n\\t\\t\\tbigger = int(nxab[3])\\n\\t\\t\\tsmaller = int(nxab[2])\\n\\t\\tfor i in range(x):\\n\\t\\t\\tif bigger < n:\\n\\t\\t\\t\\tbigger += 1\\n\\t\\t\\telif smaller > 1:\\n\\t\\t\\t\\tsmaller -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tprint(bigger - smaller)\\n\\ndef OmkarandPassword():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tarray = input().split(' ')\\n\\t\\tarray = [int(i) for i in array]\\n\\t\\tpointer = 0\\n\\t\\twhile array.count(array[0]) != len(array):\\n\\t\\t\\tif array[pointer] != array[pointer + 1]:\\n\\t\\t\\t\\tarray.insert(pointer, array[pointer] + array[pointer + 1])\\n\\t\\t\\t\\tarray.pop(pointer)\\n\\t\\t\\t\\tarray.pop(pointer + 1)\\n\\t\\t\\telif pointer + 1 < len(array) - 1:\\n\\t\\t\\t\\tpointer += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpointer = 0\\n\\t\\tprint(len(array))\\n\\ndef tanyaasndstairways():\\n\\tn = int(input())\\n\\tk = input().split(' ')\\n\\tk = [int(i) for i in k]\\n\\tlast = []\\n\\tstoreys = k.count(1)\\n\\tfor i in range(n - 1):\\n\\t\\tif k[i] >= k[i + 1]:\\n\\t\\t\\tlast.append(k[i])\\n\\tlast.append(k[n - 1])\\n\\tprint(storeys)\\n\\tprintable = ''\\n\\tfor i in last:\\n\\t\\tprintable += str(i) + ' '\\n\\tprint(printable)\\n\\ndef adjacentreplacements():\\n\\tt = int(input())\\n\\twowowo = input()\\n\\two = wowowo.split(' ')\\n\\two = [int(i) for i in wo]\\n\\tfor i in range(t):\\n\\t\\tif wo[i] % 2 == 0:\\n\\t\\t\\two[i] -= 1\\n\\ts = ''\\n\\tfor i in wo:\\n\\t\\ts += str(i) + ' '\\n\\tprint(s)\\n\\ndef Divideit():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tcounter = 0\\n\\t\\twhile n > 1:\\n\\t\\t\\tif n % 2 == 0:\\n\\t\\t\\t\\tn = n // 2\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\telif n % 3 == 0:\\n\\t\\t\\t\\tn = 2 * n // 3\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\telif n % 5 == 0:\\n\\t\\t\\t\\tn = 4 * n // 5\\n\\t\\t\\t\\tcounter += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcounter = -1\\n\\t\\t\\t\\tbreak\\n\\t\\tprint(counter)\\n\\ndef DiverseTeam():\\n\\tnk = input().split(' ')\\n\\tn = int(nk[0])\\n\\tk = int(nk[1])\\n\\trating = input().split(' ')\\n\\tlist = []\\n\\ts = ''\\n\\tfor i in range(n):\\n\\t\\tif rating[i] not in list:\\n\\t\\t\\tlist.append(rating[i])\\n\\t\\t\\ts += str(i + 1) + ' '\\n\\t\\tif len(list) == k:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn print(s)\\n\\treturn print('NO')\\n\\ndef phoenixandgold():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tnx = input().split(' ')\\n\\t\\tn = int(nx[0])\\n\\t\\tx = int(nx[1])\\n\\t\\tgold = input().split(' ')\\n\\t\\tgold = [int(i) for i in gold]\\n\\t\\tcount = 0\\n\\t\\ts = ''\\n\\t\\tif sum(gold) == x:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\twhile len(gold) != 0:\\n\\t\\t\\t\\tfor i in range(len(gold)):\\n\\t\\t\\t\\t\\tif i < len(gold):\\n\\t\\t\\t\\t\\t\\tif gold[i] + count != x:\\n\\t\\t\\t\\t\\t\\t\\tcount += gold[i]\\n\\t\\t\\t\\t\\t\\t\\ts += str(gold[i]) + ' '\\n\\t\\t\\t\\t\\t\\t\\tgold.pop(i)\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tprint(s)\\n\\ndef ingamechat():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\ts = input()\\n\\t\\tc = 0\\n\\t\\tfor i in s:\\n\\t\\t\\tif i == ')':\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc = 0\\n\\t\\tif c > n - c:\\n\\t\\t\\tprint('Yes')\\n\\t\\telse:\\n\\t\\t\\tprint('No')\\n\\ndef IntegerSAequencedividing():\\n\\tlist = [int(i) for i in range(1, int(input()) + 1)]\\n\\tlist.reverse()\\n\\tA = 0\\n\\tB = 0\\n\\twhile len(list) > 0:\\n\\t\\tif len(list) != 1:\\n\\t\\t\\tone = list[0]\\n\\t\\t\\ttwo = list[1]\\n\\t\\t\\tlist.pop(0)\\n\\t\\t\\tlist.pop(0)\\n\\t\\telse:\\n\\t\\t\\tone = list[0]\\n\\t\\t\\tlist.pop(0)\\n\\t\\t\\ttwo = 0\\n\\t\\tif abs(A + one - (B + two) <= abs(B + one - (A + two))):\\n\\t\\t\\tA += one\\n\\t\\t\\tB += two\\n\\t\\telse:\\n\\t\\t\\tA += two\\n\\t\\t\\tB += one\\n\\tprint(abs(A - B))\\n\\ndef shortestpathwithobstacle():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\ts = input()\\n\\t\\tA = [int(i) for i in input().split(' ')]\\n\\t\\tB = [int(i) for i in input().split(' ')]\\n\\t\\tF = [int(i) for i in input().split(' ')]\\n\\t\\tdistance = abs(A[0] - B[0]) + abs(A[1] - B[1])\\n\\t\\tif A[0] == B[0] and A[0] == F[0] and (min(A[1], B[1]) < F[1]) and (F[1] < max(A[1], B[1])) or (A[1] == B[1] and A[1] == F[1] and (min(A[0], B[0]) < F[0]) and (F[0] < max(A[0], B[0]))):\\n\\t\\t\\tdistance += 2\\n\\t\\tprint(distance)\\n\\ndef Removeduplicates():\\n\\tt = int(input())\\n\\tnumbers = input().split(' ')\\n\\tnumbers.reverse()\\n\\tremoved = []\\n\\tfor i in numbers:\\n\\t\\tif i not in removed:\\n\\t\\t\\tremoved.append(i)\\n\\tremoved.reverse()\\n\\ts = ''\\n\\tfor i in removed:\\n\\t\\ts += i + ' '\\n\\tprint(len(removed))\\n\\tprint(s)\\n\\ndef Threestrings():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\ta = input()\\n\\t\\tb = input()\\n\\t\\tc = input()\\n\\t\\twork = True\\n\\t\\tfor i in range(len(a)):\\n\\t\\t\\tif a[i] != c[i] and b[i] != c[i]:\\n\\t\\t\\t\\twork = False\\n\\t\\tif work:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\ndef specifictastesofandre():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tli = [1 for i in range(int(input()))]\\n\\t\\ts = ''\\n\\t\\tfor i in li:\\n\\t\\t\\ts += str(i) + ' '\\n\\t\\tprint(s)\\n\\ndef dejavu():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\ts = input()\\n\\t\\tif s + 'a' == 'a' + s:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tsl = list(s + 'a')\\n\\t\\t\\trsl = []\\n\\t\\t\\tfor i in sl:\\n\\t\\t\\t\\trsl.insert(0, i)\\n\\t\\t\\tif sl != rsl:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tprint(s + 'a')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tprint('a' + s)\\n\\ndef buythestring():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tncch = [int(i) for i in input().split(' ')]\\n\\t\\ts = input()\\n\\t\\tmoney = 0\\n\\t\\tfor i in s:\\n\\t\\t\\tif i == '0':\\n\\t\\t\\t\\tmoney += min(ncch[1], ncch[2] + ncch[3])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmoney += min(ncch[2], ncch[1] + ncch[3])\\n\\t\\tprint(money)\\n\\ndef Keyraces():\\n\\tsvvtt = [int(i) for i in input().split(' ')]\\n\\tfirst = 2 * svvtt[3] + svvtt[0] * svvtt[1]\\n\\tscond = 2 * svvtt[4] + svvtt[0] * svvtt[2]\\n\\tif first > scond:\\n\\t\\tprint('Second')\\n\\telif first < scond:\\n\\t\\tprint('First')\\n\\telse:\\n\\t\\tprint('Friendship')\\n\\ndef Angrystudents():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tlen = int(input())\\n\\t\\ts = list(input())\\n\\t\\tcounter = 0\\n\\t\\tcounterlist = [0]\\n\\t\\tif s.count('A') != 0:\\n\\t\\t\\tfirstp = s.index('A')\\n\\t\\t\\tfor i in range(firstp, len):\\n\\t\\t\\t\\tif s[i] == 'P':\\n\\t\\t\\t\\t\\tcounter += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcounterlist.append(counter)\\n\\t\\t\\t\\t\\tcounter = 0\\n\\t\\t\\tcounterlist.append(counter)\\n\\t\\tprint(max(counterlist))\\n\\ndef Frence():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\td = sum([int(i) for i in input().split(' ')]) - 1\\n\\t\\tprint(d)\\n\\ndef playongwhithdice():\\n\\tab = [int(i) for i in input().split(' ')]\\n\\ta = ab[0]\\n\\tb = ab[1]\\n\\tawins = 0\\n\\tdraw = 0\\n\\tbwins = 0\\n\\tfor i in range(1, 7):\\n\\t\\tif abs(i - a) < abs(i - b):\\n\\t\\t\\tawins += 1\\n\\t\\telif abs(i - a) > abs(i - b):\\n\\t\\t\\tbwins += 1\\n\\t\\telse:\\n\\t\\t\\tdraw += 1\\n\\tprint(awins, draw, bwins)\\n\\ndef arrayandpeaks():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\t(n, k) = [int(i) for i in input().split(' ')]\\n\\t\\tlistaa = [i for i in range(1, n - k + 1)]\\n\\t\\tlistoo = [i for i in range(n - k + 1, n + 1)]\\n\\t\\ts = ''\\n\\t\\tif len(listaa) > len(listoo):\\n\\t\\t\\tfor i in range(len(listaa)):\\n\\t\\t\\t\\ts += str(listaa[0]) + ' '\\n\\t\\t\\t\\tlistaa.pop(0)\\n\\t\\t\\t\\tif len(listoo) != 0:\\n\\t\\t\\t\\t\\ts += str(listoo[0]) + ' '\\n\\t\\t\\t\\t\\tlistoo.pop(0)\\n\\t\\telse:\\n\\t\\t\\ts = '-1'\\n\\t\\tprint(s)\\n\\ndef mishkaandContest():\\n\\t(n, k) = [int(i) for i in input().split()]\\n\\tproblems = [int(i) for i in input().split()]\\n\\tfp = 0\\n\\tsp = 0\\n\\tfirst = True\\n\\tfor i in problems:\\n\\t\\tif i <= k and first:\\n\\t\\t\\tfp += 1\\n\\t\\telif i > k and first:\\n\\t\\t\\tfirst = False\\n\\t\\telif i <= k and (not first):\\n\\t\\t\\tsp += 1\\n\\t\\telse:\\n\\t\\t\\tsp = 0\\n\\tprint(sp + fp)\\nmishkaandContest()\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n(l, r) = (0, 0)\\ns = set()\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\ts.add(i)\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\ts.add(i)\\n\\telse:\\n\\t\\tbreak\\nprint(len(s))\\n\", \"inp = lambda : map(int, input().split())\\n(n, k) = inp()\\na = list(inp())\\nleft = 0\\nright = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tleft += 1\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tright += 1\\nprint(min(n, left + right))\\n\", \"t = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\ncou = 0\\nw = 0\\nwhile True:\\n\\tw = w + 1\\n\\tif l[0] <= t[1]:\\n\\t\\tl.pop(0)\\n\\t\\tcou += 1\\n\\t\\tif w >= t[0]:\\n\\t\\t\\tbreak\\n\\t\\tcontinue\\n\\telif l[-1] <= t[1]:\\n\\t\\tl.pop()\\n\\t\\tcou += 1\\n\\t\\tif w >= t[0]:\\n\\t\\t\\tbreak\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tbreak\\nprint(cou)\\n\", \"import time\\n(n, k) = (int(i) for i in input().split())\\na = [int(i) for i in input().split()]\\nstart = time.time()\\nif max(a) <= k:\\n\\tprint(n)\\nelse:\\n\\tfor i in range(n):\\n\\t\\tif a[i] > k:\\n\\t\\t\\tbreak\\n\\tj = n - 1\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tif a[j] > k:\\n\\t\\t\\tbreak\\n\\tprint(i + n - j - 1)\\nfinish = time.time()\\n\", \"(n, k) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nl = str(n)\\nl = int(l)\\nfor i in a:\\n\\tif i <= k:\\n\\t\\tl -= 1\\n\\telse:\\n\\t\\tbreak\\nif l != 0:\\n\\tfor i in a[::-1]:\\n\\t\\tif i <= k:\\n\\t\\t\\tl -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(n - l)\\n\", \"from sys import exit\\n(n, k) = map(int, input().split())\\npdl = [int(x) for x in input().split()]\\nc = 0\\nfor pd in pdl:\\n\\tif k < pd:\\n\\t\\tbreak\\n\\tc += 1\\nelse:\\n\\tprint(c)\\n\\texit(0)\\npdl.reverse()\\nfor pd in pdl:\\n\\tif k < pd:\\n\\t\\tbreak\\n\\tc += 1\\nprint(c)\\n\", \"import sys\\n\\ndef GetProblemSoloved(a, k):\\n\\ti = 0\\n\\tl = len(a) - 1\\n\\tk = int(k)\\n\\tcount = 0\\n\\tfor diff in a:\\n\\t\\tif diff <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tC = count\\n\\tfor i in range(len(a) - 1, C, -1):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn count\\ni = 0\\na = []\\nn = 0\\nk = 0\\n(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\na = input().split()\\nfor c in range(len(a)):\\n\\ta[c] = int(a[c])\\nr = GetProblemSoloved(a, k)\\nprint(r)\\n\", \"(a, b) = map(int, input().split())\\nc = list(map(int, input().split()))\\nd = 0\\nfor i in range(len(c)):\\n\\tif c[0] <= b:\\n\\t\\tdel c[0]\\n\\t\\td += 1\\n\\telif c[-1] <= b:\\n\\t\\tdel c[-1]\\n\\t\\td += 1\\n\\telse:\\n\\t\\tbreak\\nprint(d)\\n\", \"(m, n) = [int(i) for i in input().split()]\\nmas = []\\nmas = [int(i) for i in input().split()]\\nk = 0\\nwhile mas[0] <= n:\\n\\tif len(mas) == 1:\\n\\t\\tk += 1\\n\\t\\tbreak\\n\\telse:\\n\\t\\tmas.pop(0)\\n\\t\\tk += 1\\nwhile mas[-1] <= n:\\n\\tif len(mas) == 1:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tmas.pop(-1)\\n\\t\\tk += 1\\nprint(k)\\n\", \"l1 = [int(i) for i in input().split(' ')]\\nl2 = [int(i) for i in input().split(' ')]\\na = 0\\nb = 0\\nfor i in range(l1[0]):\\n\\tif l2[i] <= l1[1]:\\n\\t\\ta += 1\\n\\t\\tb = i\\n\\telse:\\n\\t\\tbreak\\nfor i in range(l1[0] - 1, b, -1):\\n\\tif l2[i] <= l1[1]:\\n\\t\\ta += 1\\n\\telse:\\n\\t\\tbreak\\nprint(a)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\np = 0\\nflag = 0\\nl = []\\nfor i in range(len(a)):\\n\\tif a[i] <= k:\\n\\t\\tp += 1\\n\\telif a[i] > k:\\n\\t\\ta.reverse()\\n\\t\\tfor j in range(len(a)):\\n\\t\\t\\tif a[j] <= k:\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tbreak\\nprint(p)\\n\", \"def mishkaAndContest(arr1, arr2):\\n\\tk = arr1[1]\\n\\tn = arr1[0] - 1\\n\\tini = 0\\n\\tsum = 0\\n\\twhile ini <= n:\\n\\t\\tif arr2[ini] <= k:\\n\\t\\t\\tsum = sum + 1\\n\\t\\t\\tini = ini + 1\\n\\t\\telif arr2[n] <= k:\\n\\t\\t\\tsum = sum + 1\\n\\t\\t\\tn = n - 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn sum\\n\\ndef main():\\n\\tarr1 = [int(c) for c in input().split()]\\n\\tarr2 = [int(c) for c in input().split()]\\n\\tprint(mishkaAndContest(arr1, arr2))\\nmain()\\n\", \"(n, k) = map(int, input().split())\\nA = list(map(int, input().split()))\\nleft = 0\\nwhile left < n and A[left] <= k:\\n\\tleft += 1\\nfor right in range(n - left):\\n\\tif A[-right - 1] > k:\\n\\t\\tprint(left + right)\\n\\t\\tbreak\\nelse:\\n\\tprint(n)\\n\", \"(n, k) = (int(x) for x in input().split())\\narr = [int(x) for x in input().split()]\\nunable = [i for i in range(len(arr)) if arr[i] > k]\\nif len(unable) == 0:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (max(unable) - min(unable) + 1))\\n\", \"(n, k) = map(int, input().strip().split())\\narr = list(map(int, input().strip().split()))\\ncount = 0\\ncountleft = 0\\ncountright = 0\\nfor i in range(len(arr)):\\n\\tif arr[i] <= k:\\n\\t\\tcountleft += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(arr)):\\n\\tif arr[n - 1 - i] <= k:\\n\\t\\tcountright += 1\\n\\telse:\\n\\t\\tbreak\\ncount += countleft + countright\\nif count == 2 * len(arr):\\n\\tprint(int(count / 2))\\nelse:\\n\\tprint(count)\\n\", \"(a, b) = map(int, input().split())\\ns = input()\\nn = [int(s) for s in s.split()]\\nu = 0\\nt = 0\\nfor i in range(a):\\n\\tt = len(n) - 1\\n\\tif n[0] <= b and n[t] > b:\\n\\t\\tn.pop(0)\\n\\t\\tu += 1\\n\\telif n[0] > b and n[t] <= b:\\n\\t\\tn.pop(t)\\n\\t\\tu += 1\\n\\telif n[0] <= b and n[t] <= b:\\n\\t\\tn.pop(0)\\n\\t\\tu += 1\\nprint(u)\\n\", \"(n, k) = [int(i) for i in input().split()]\\np = []\\na = [int(i) for i in input().split()]\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tp.append(i + 1)\\nif len(p) > 0:\\n\\tprint(p[0] - 1 + n - p[-1])\\nelse:\\n\\tprint(n)\\n\", \"A = [int(i) for i in input().split()]\\nn = A[0]\\nk = A[1]\\nB = [int(i) for i in input().split()]\\nl = 0\\nr = 0\\nfor i in range(len(B)):\\n\\tif B[i] <= k:\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(len(B)):\\n\\tif B[len(B) - 1 - i] <= k:\\n\\t\\tl += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(l + r, n))\\n\", \"(n, k) = map(int, input().split())\\nmas = list(map(int, input().split()))\\ns = len(mas)\\nwhile True:\\n\\tif mas[0] > k and mas[len(mas) - 1] > k:\\n\\t\\tbreak\\n\\tif mas[0] <= k:\\n\\t\\tmas.pop(0)\\n\\tif len(mas) == 0:\\n\\t\\tbreak\\n\\tif mas[len(mas) - 1] <= k:\\n\\t\\tmas.pop()\\n\\tif len(mas) == 0:\\n\\t\\tbreak\\nprint(s - len(mas))\\n\", \"(n, m) = map(int, input().split())\\na = list(map(int, input().split()))\\nuttor = 0\\nwhile True:\\n\\tif uttor == n:\\n\\t\\tbreak\\n\\tif a[0] <= m:\\n\\t\\tuttor += 1\\n\\t\\tdel a[0]\\n\\telif a[-1] <= m:\\n\\t\\tuttor += 1\\n\\t\\tdel a[-1]\\n\\telse:\\n\\t\\tbreak\\nprint(uttor)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\np1 = 0\\np2 = n - 1\\nr = 0\\nif n == 1 and k >= a[0]:\\n\\tprint(1)\\nelse:\\n\\twhile p1 <= p2:\\n\\t\\tif a[p1] <= k:\\n\\t\\t\\tp1 += 1\\n\\t\\t\\tr += 1\\n\\t\\telif a[p2] <= k:\\n\\t\\t\\tr += 1\\n\\t\\t\\tp2 -= 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(r)\\n\", \"a = input().split()\\nb = input().split()\\nn = int(a[0])\\nk = int(a[1])\\ncount = 0\\nfor i in range(n):\\n\\tb[i] = int(b[i])\\nfor j in range(n):\\n\\tif k >= b[0]:\\n\\t\\tdel b[0]\\n\\t\\tcount = count + 1\\n\\telif k >= b[-1]:\\n\\t\\tdel b[-1]\\n\\t\\tcount = count + 1\\nprint(count)\\n\", \"n_k = input().split(' ')\\nn = int(n_k[0])\\nk = int(n_k[1])\\ncount = 0\\nques = input().split(' ')\\nques = [int(ques[i]) for i in range(n)]\\nwhile ques:\\n\\tif ques[0] <= k:\\n\\t\\tdel ques[0]\\n\\t\\tcount += 1\\n\\telif ques[-1] <= k:\\n\\t\\tdel ques[-1]\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"n = list(map(int, input().split()))\\nz = list(map(int, input().split()))\\ncount = 0\\nstep = 0\\nwhile step < len(z) + count:\\n\\tif z[0] <= n[1]:\\n\\t\\tcount += 1\\n\\t\\tdel z[0]\\n\\t\\tstep += 1\\n\\telse:\\n\\t\\tbreak\\nstep = 0\\ncounti = 0\\nwhile step < len(z) + counti:\\n\\tif z[-1] <= n[1]:\\n\\t\\tcounti += 1\\n\\t\\tdel z[-1]\\n\\t\\tstep += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count + counti)\\n\", \"(n, k) = [int(x) for x in input().strip().split()]\\na = [int(x) for x in input().strip().split()]\\ni = 0\\nj = len(a) - 1\\ncnt = 0\\nwhile i <= j and a[i] <= k:\\n\\ti += 1\\n\\tcnt += 1\\nwhile i <= j and a[j] <= k:\\n\\tj -= 1\\n\\tcnt += 1\\nprint(cnt)\\n\", \"def main():\\n\\t(n, k) = list(map(int, input().split()))\\n\\ta = list(map(int, input().split()))\\n\\tl = 0\\n\\tr = n - 1\\n\\tc = 0\\n\\twhile (a[l] <= k or a[r] <= k) and l <= r:\\n\\t\\tif a[l] <= k:\\n\\t\\t\\tl += 1\\n\\t\\telif a[r] <= k:\\n\\t\\t\\tr -= 1\\n\\t\\tc += 1\\n\\t\\tif l > r:\\n\\t\\t\\tbreak\\n\\tprint(c)\\nmain()\\n\", \"(n, m) = map(int, input().split())\\nl = [int(i) for i in input().split()]\\nk = 0\\nj = n - 1\\nfor i in range(n):\\n\\tif l[i] > m:\\n\\t\\tj = i\\n\\t\\tbreak\\n\\tk += 1\\nfor i in range(n):\\n\\tif l[n - 1 - i] > m or n - 1 - i <= j:\\n\\t\\tbreak\\n\\tk += 1\\nprint(k)\\n\", \"(n, k) = [int(x) for x in input().split()]\\nstr1 = [int(x) for x in input().split()]\\ncount = 0\\ntemp = len(str1) - 1\\nfor i in range(0, len(str1)):\\n\\tif str1[i] <= k:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\ttemp = i\\n\\t\\tbreak\\npro = len(str1) - 1 - temp\\nfor i in range(len(str1) - 1, temp, -1):\\n\\tif str1[i] <= k:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().strip().split())\\nv = list(map(int, input().strip().split()))\\nl = 0\\nc = 0\\nr = n - 1\\nwhile l <= r and (v[r] <= k or v[l] <= k):\\n\\tif v[l] <= k:\\n\\t\\tc += 1\\n\\t\\tl += 1\\n\\tif l <= r and v[r] <= k:\\n\\t\\tc += 1\\n\\t\\tr -= 1\\nprint(c)\\n\", \"n = input().split()\\nk = int(n[1])\\nn = int(n[0])\\na = [int(i) for i in input().split()]\\nq = 0\\nwhile k >= a[0]:\\n\\tdel a[0]\\n\\tq += 1\\n\\tif len(a) == 0:\\n\\t\\tbreak\\nif len(a) != 0:\\n\\twhile k >= a[-1]:\\n\\t\\tdel a[-1]\\n\\t\\tq += 1\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\nprint(q)\\n\", \"(n, k) = map(int, input().split())\\nguizes = list(map(int, input().split()))\\nresalt = 0\\ntry:\\n\\twhile guizes[0] <= k:\\n\\t\\tresalt += 1\\n\\t\\tguizes.pop(0)\\n\\twhile guizes[-1] <= k:\\n\\t\\tresalt += 1\\n\\t\\tguizes.pop(-1)\\nexcept:\\n\\tpass\\nprint(resalt)\\n\", \"(n, k) = (int(x) for x in input().split())\\na = [int(x) for x in input().split()]\\ni = 0\\ncnt = 0\\nwhile i < n and a[i] <= k:\\n\\tcnt += 1\\n\\ti += 1\\ni = -1\\nwhile i * -1 < n + 1 and a[i] <= k:\\n\\tcnt += 1\\n\\ti -= 1\\nif cnt > n:\\n\\tcnt = n\\nprint(cnt)\\n\", \"import math\\ngetInputList = lambda : list(input().split())\\ngetInputIntList = lambda : list(map(int, input().split()))\\n(n, k) = getInputIntList()\\narr = getInputIntList()\\ncount = 0\\nfor i in arr:\\n\\tif i > k:\\n\\t\\tbreak\\n\\tcount += 1\\nif count != n:\\n\\tfor i in range(len(arr) - 1, -1, -1):\\n\\t\\tif arr[i] > k:\\n\\t\\t\\tbreak\\n\\t\\tcount += 1\\nprint(count)\\n\", \"(temp, n) = map(int, input().split())\\na = list(map(int, input().split()))\\nresult = 0\\nwhile len(a) > 0:\\n\\tif a[0] <= n:\\n\\t\\tresult += 1\\n\\t\\ta = a[1:]\\n\\telse:\\n\\t\\tbreak\\nwhile len(a) > 0:\\n\\tif a[-1] <= n:\\n\\t\\tresult += 1\\n\\t\\ta = a[:-1]\\n\\telse:\\n\\t\\tbreak\\nprint(result)\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef main():\\n\\t(n, k) = LI()\\n\\ta = LI()\\n\\tt = max(a)\\n\\tif t <= k:\\n\\t\\treturn len(a)\\n\\tr = 0\\n\\tfor c in a:\\n\\t\\tif c > k:\\n\\t\\t\\tbreak\\n\\t\\tr += 1\\n\\tfor c in a[::-1]:\\n\\t\\tif c > k:\\n\\t\\t\\tbreak\\n\\t\\tr += 1\\n\\treturn r\\nprint(main())\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfront = 0\\nback = n - 1\\nnumber = 0\\nwhile front <= back:\\n\\tj = min(a[front], a[back])\\n\\tif j > k:\\n\\t\\tbreak\\n\\tif j == a[front] and j == a[back] and (front != back):\\n\\t\\tfront += 1\\n\\t\\tnumber += 2\\n\\t\\tback -= 1\\n\\telif j == a[front]:\\n\\t\\tfront += 1\\n\\t\\tnumber += 1\\n\\telse:\\n\\t\\tback -= 1\\n\\t\\tnumber += 1\\nprint(number)\\n\", \"import sys, math, collections\\nfrom collections import defaultdict\\n\\ndef file():\\n\\tsys.stdin = open('input.py', 'r')\\n\\tsys.stdout = open('output.py', 'w')\\n\\ndef get_array():\\n\\tl = list(map(int, input().split()))\\n\\treturn l\\n\\ndef get_2_ints():\\n\\t(a, b) = map(int, input().split())\\n\\treturn (a, b)\\n\\ndef get_3_ints():\\n\\t(a, b, c) = map(int, input().split())\\n\\treturn (a, b, c)\\n\\ndef sod(n):\\n\\t(n, c) = (str(n), 0)\\n\\tfor i in n:\\n\\t\\tc += int(i)\\n\\treturn c\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\tif n <= 3:\\n\\t\\treturn True\\n\\tif n % 2 == 0 or n % 3 == 0:\\n\\t\\treturn False\\n\\ti = 5\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0 or n % (i + 2) == 0:\\n\\t\\t\\treturn False\\n\\t\\ti = i + 6\\n\\treturn True\\n\\ndef getFloor(A, x):\\n\\t(left, right) = (0, len(A) - 1)\\n\\tfloor = -1\\n\\twhile left <= right:\\n\\t\\tmid = (left + right) // 2\\n\\t\\tif A[mid] == x:\\n\\t\\t\\treturn A[mid]\\n\\t\\telif x < A[mid]:\\n\\t\\t\\tright = mid - 1\\n\\t\\telse:\\n\\t\\t\\tfloor = A[mid]\\n\\t\\t\\tleft = mid + 1\\n\\treturn floor\\n\\ndef floorSqrt(x):\\n\\tif x == 0 or x == 1:\\n\\t\\treturn x\\n\\tstart = 1\\n\\tend = x\\n\\twhile start <= end:\\n\\t\\tmid = (start + end) // 2\\n\\t\\tif mid * mid == x:\\n\\t\\t\\treturn mid\\n\\t\\tif mid * mid < x:\\n\\t\\t\\tstart = mid + 1\\n\\t\\t\\tans = mid\\n\\t\\telse:\\n\\t\\t\\tend = mid - 1\\n\\treturn ans\\n\\ndef main():\\n\\t(n, m) = get_2_ints()\\n\\tl = get_array()\\n\\tc = 0\\n\\tfor i in range(n):\\n\\t\\tif l[i] <= m:\\n\\t\\t\\tl[i] = 'h'\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tl.reverse()\\n\\tfor i in range(n):\\n\\t\\tif l[i] == 'h':\\n\\t\\t\\tbreak\\n\\t\\telif l[i] <= m:\\n\\t\\t\\tc += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(c)\\nmain()\\n\", \"(n, k) = map(int, input().split())\\nps = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n):\\n\\tif k < min(ps[0], ps[-1]):\\n\\t\\tbreak\\n\\telse:\\n\\t\\tcount += 1\\n\\t\\tif ps[0] <= ps[-1]:\\n\\t\\t\\tps.pop(0)\\n\\t\\telse:\\n\\t\\t\\tps.pop(-1)\\nprint(count)\\n\", \"def solve(n, k, a):\\n\\twhile a[0] <= k and a != []:\\n\\t\\ta = a[1:]\\n\\t\\tif a == []:\\n\\t\\t\\tbreak\\n\\tif a != []:\\n\\t\\twhile a[-1] <= k and a != []:\\n\\t\\t\\ta = a[:-1]\\n\\treturn n - len(a)\\n(n, k) = map(int, input().split())\\nnumbers = list(map(int, input().strip().split()))\\nprint(solve(n, k, numbers))\\n\", \"(n, k) = list(map(int, input().split()))\\nh = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n\\tif h[0] <= k:\\n\\t\\tans += 1\\n\\t\\tdel h[0]\\n\\telse:\\n\\t\\tbreak\\nn = len(h)\\nfor i in range(n):\\n\\tif h[-1] <= k:\\n\\t\\tans += 1\\n\\t\\tdel h[-1]\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tbreak\\n\\ta[i] = -1\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] > k or a[i] == -1:\\n\\t\\tbreak\\n\\ta[i] = -1\\nprint(a.count(-1))\\n\", \"def gogo(n, k, t):\\n\\ti = 0\\n\\tj = n - 1\\n\\tcount = 0\\n\\twhile True:\\n\\t\\tif t[i] > k and t[j] > k or i == j:\\n\\t\\t\\tif t[i] <= k:\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\tbreak\\n\\t\\tif t[i] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\ti += 1\\n\\t\\telif t[j] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tj -= 1\\n\\treturn count\\n\\ndef main():\\n\\t(n, k) = map(int, input().split())\\n\\tt = list(map(int, input().split()))\\n\\tprint(gogo(n, k, t))\\nmain()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nl = a[0]\\nr = a[-1]\\nc = 0\\nm = 0\\nfor i in range(n):\\n\\tif l <= k:\\n\\t\\tc = c + 1\\n\\t\\tif i < n - 1:\\n\\t\\t\\tl = a[i + 1]\\n\\t\\tif i == n - 1:\\n\\t\\t\\tl = [n - 1]\\n\\telse:\\n\\t\\tm = m + 1\\n\\t\\tif r <= k:\\n\\t\\t\\tc = c + 1\\n\\t\\t\\tr = a[-(m + 1)]\\n\\t\\telse:\\n\\t\\t\\tprint(c)\\n\\t\\t\\tbreak\\nelse:\\n\\tprint(n)\\n\", \"(n, k) = map(int, input().split())\\ndifficulties = list(map(int, input().split()))\\nsolved = True\\ncount = 0\\nleft = 0\\nright = n - 1\\nwhile solved and left <= right:\\n\\tsolved = False\\n\\tif difficulties[left] <= k:\\n\\t\\tleft += 1\\n\\t\\tsolved = True\\n\\t\\tcount += 1\\n\\telif difficulties[right] <= k:\\n\\t\\tright -= 1\\n\\t\\tsolved = True\\n\\t\\tcount += 1\\nprint(count)\\n\", \"a = [int(i) for i in input().split(' ')]\\nn = a[0]\\nk = a[1]\\ns = [int(i) for i in input().split(' ')]\\nctr = 0\\nif k >= max(s):\\n\\tprint(n)\\nelse:\\n\\tfor i in s:\\n\\t\\tif i <= k:\\n\\t\\t\\tctr += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in reversed(s):\\n\\t\\tif i <= k:\\n\\t\\t\\tctr += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(ctr)\\n\", \"input1 = input()\\ninputL = input1.split(' ')\\nn = int(inputL[0])\\nk = int(inputL[1])\\ninput2 = input()\\nnum_problems = 0\\nproblemsL = input2.split(' ')\\nif n != 0:\\n\\twhile True:\\n\\t\\tif problemsL == []:\\n\\t\\t\\tbreak\\n\\t\\tif k >= int(problemsL[0]):\\n\\t\\t\\tnum_problems += 1\\n\\t\\t\\tdel problemsL[0]\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\twhile True:\\n\\t\\tif problemsL == []:\\n\\t\\t\\tbreak\\n\\t\\tif k >= int(problemsL[-1]):\\n\\t\\t\\tnum_problems += 1\\n\\t\\t\\tdel problemsL[-1]\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(num_problems)\\nelse:\\n\\tprint('0')\\n\", \"def count(i, max, index):\\n\\treturn (max, index)\\n(n, k) = [int(x) for x in input().split()]\\nps = [int(x) for x in input().split()]\\ncount = 0\\nfor p in ps:\\n\\tif p <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nj = n - 1\\nwhile j >= 0:\\n\\tif ps[j] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\n\\tj -= 1\\nif count == 2 * n:\\n\\tprint(n)\\nelse:\\n\\tprint(count)\\n\", \"def Miksha():\\n\\t(n, k) = list(map(int, input().split()))\\n\\ta = list(map(int, input().split()))\\n\\tt = 0\\n\\tif max(a) <= k:\\n\\t\\tprint(n)\\n\\t\\treturn\\n\\telse:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif a[i] <= k:\\n\\t\\t\\t\\tt += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor j in range(n - 1, -1, -1):\\n\\t\\t\\tif a[j] <= k:\\n\\t\\t\\t\\tt += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\tprint(t)\\nMiksha()\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nt = []\\nfor i in range(len(l)):\\n\\tif l[i] > k:\\n\\t\\tt.append(i)\\nif len(t) == 0:\\n\\tprint(len(l))\\nelif len(t) == 1:\\n\\tprint(len(l) - 1)\\nelse:\\n\\tlow = t[0]\\n\\thigh = t[len(t) - 1]\\n\\tprint(low + (len(l) - high - 1))\\n\", \"a = input().split(' ')\\nk = int(a[1])\\nb = input().split(' ')\\np = list(map(int, b))\\nx = 0\\ny = int(a[0]) - 1\\n\\ndef calcX():\\n\\tglobal x\\n\\txflag = 0\\n\\twhile True:\\n\\t\\tif p[x] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif x == y:\\n\\t\\t\\t\\tx = x + 1\\n\\t\\t\\t\\txflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tx = x + 1\\n\\treturn xflag\\n\\ndef calcY():\\n\\tglobal y\\n\\twhile True:\\n\\t\\tif p[y] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif y == x:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ty = y - 1\\nwhile True:\\n\\tflag = calcX()\\n\\tif flag:\\n\\t\\tbreak\\n\\tcalcY()\\n\\tbreak\\ntotalNumber = x + int(a[0]) - y - 1\\nprint(totalNumber)\\n\", \"import sys\\n(n, k) = map(int, sys.stdin.readline().split(' '))\\na = list(map(int, sys.stdin.readline().split(' ')))\\n\\ndef do():\\n\\ti = 0\\n\\twhile i < n and a[i] <= k:\\n\\t\\ti += 1\\n\\tif i == n:\\n\\t\\treturn i\\n\\tj = n - 1\\n\\twhile j >= 0 and a[j] <= k:\\n\\t\\tj -= 1\\n\\treturn i + (n - 1 - j)\\nprint(do())\\n\", \"(n, m) = map(int, input().split())\\nlst = list(map(int, input().split()))\\nfor i in range(n):\\n\\tif lst[i] <= m and lst[i] != -1:\\n\\t\\tlst[i] = -1\\n\\telse:\\n\\t\\tbreak\\nrlst = list(reversed(lst))\\nfor i in range(n):\\n\\tif rlst[i] <= m and rlst[i] != -1:\\n\\t\\trlst[i] = -1\\n\\telse:\\n\\t\\tbreak\\nc = 0\\nfor i in range(n):\\n\\tif rlst[i] == -1:\\n\\t\\tc += 1\\nprint(c)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nans = 0\\nwhile len(a) > 0 and a[0] <= k:\\n\\tans += 1\\n\\ta = a[1:]\\nwhile len(a) > 0 and a[-1] <= k:\\n\\tans += 1\\n\\ta = a[:-1]\\nprint(ans)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\na = list(map(int, input().split()))\\n(q, i, z) = (0, 0, n - 1)\\nwhile i <= n - 1 and a[i] <= k:\\n\\tq += 1\\n\\ti += 1\\nwhile z >= 0 and a[z] <= k:\\n\\tq += 1\\n\\tz -= 1\\nif q > n:\\n\\tq = n\\nprint(q)\\n\", \"(n, k) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nind1 = -1\\nind2 = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tif ind1 == -1:\\n\\t\\t\\tind1 = i\\n\\t\\tind2 = i\\nif ind1 == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(min(n, n - (ind2 - ind1 + 1)))\\n\", \"(n, k) = [int(i) for i in input().split()]\\nlst = list(map(int, input().split()))\\n(i, j) = (0, n - 1)\\nc = 0\\nwhile (lst[i] <= k or lst[j] <= k) and i <= j:\\n\\tif i < j and lst[i] <= k:\\n\\t\\tc += 1\\n\\t\\ti += 1\\n\\tif i < j and lst[j] <= k:\\n\\t\\tc += 1\\n\\t\\tj -= 1\\n\\tif i == j and lst[i] <= k:\\n\\t\\tc += 1\\n\\t\\tbreak\\nprint(c)\\n\", \"(a, b) = map(int, input().split())\\nlst = [int(i) for i in input().split()]\\nsum = 0\\nsum1 = 0\\nfor k in range(len(lst)):\\n\\tif lst[k] <= b:\\n\\t\\tsum = sum + 1\\n\\telse:\\n\\t\\tbreak\\nlst.reverse()\\nfor j in range(len(lst)):\\n\\tif lst[j] <= b:\\n\\t\\tsum1 = sum1 + 1\\n\\telse:\\n\\t\\tbreak\\ns = sum1 + sum\\nprint(min(a, s))\\n\", \"def main():\\n\\t(n, k) = [int(i) for i in input().split(' ')]\\n\\tp = [int(i) for i in input().split(' ')]\\n\\tl = 0\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tif p[i] <= k:\\n\\t\\t\\tl = i\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1, l, -1):\\n\\t\\tif p[i] <= k:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(ans)\\nmain()\\n\", \"(a, b) = map(int, input().split())\\nl = [int(i) for i in input().split()]\\nc = 0\\nwhile len(l) > 0:\\n\\tpremier = l[0]\\n\\tlast = l[-1]\\n\\tif premier <= b:\\n\\t\\tc += 1\\n\\t\\tdel l[0]\\n\\telif last <= b:\\n\\t\\tc += 1\\n\\t\\tdel l[-1]\\n\\telse:\\n\\t\\tbreak\\nprint(c)\\n\", \"(n, k) = map(int, input().split())\\nproblems = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif problems[i] <= k:\\n\\t\\tproblems[i] = 0\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nfor p in problems:\\n\\tif p <= k and p != 0:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"import sys\\nimport math\\n(n, k) = map(int, input().split())\\nlista = [int(x) for x in input().strip().split()]\\nconta = 0\\nvisited = [0 for i in range(n)]\\nfor i in range(n):\\n\\tif lista[i] <= k:\\n\\t\\tconta += 1\\n\\t\\tvisited[i] = 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif lista[i] <= k and visited[i] == 0:\\n\\t\\tconta += 1\\n\\telse:\\n\\t\\tbreak\\nprint(conta)\\n\", \"(n, k) = list(map(int, input().split()))\\npb = list(map(int, input().split()))\\nvisited = [False] * n\\ncount = 0\\nstart = 0\\nend = n - 1\\nwhile True:\\n\\tif start < n and pb[start] <= k and (visited[start] == False):\\n\\t\\tvisited[start] = True\\n\\t\\tcount += 1\\n\\t\\tstart += 1\\n\\telse:\\n\\t\\tbreak\\nwhile True:\\n\\tif end >= 0 and pb[end] <= k and (visited[end] == False):\\n\\t\\tvisited[end] = True\\n\\t\\tcount += 1\\n\\t\\tend -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nsp = [int(i) for i in input().split()]\\ntiller = 0\\nFlag = True\\nwhile sp != []:\\n\\tif sp[0] <= k:\\n\\t\\tsp.pop(0)\\n\\t\\ttiller += 1\\n\\telif sp[-1] <= k:\\n\\t\\tsp.pop(-1)\\n\\t\\ttiller += 1\\n\\telse:\\n\\t\\tprint(tiller)\\n\\t\\tbreak\\nif sp == []:\\n\\tprint(n)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\ncount = 0\\nif k >= max(a):\\n\\tprint(n)\\nelse:\\n\\tfor i in range(n):\\n\\t\\tif int(a[i]) > int(k):\\n\\t\\t\\tz = i\\n\\t\\t\\tbreak\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tif int(a[j]) > int(k):\\n\\t\\t\\tl = j\\n\\t\\t\\tbreak\\n\\tprint(z + (n - 1 - l))\\n\", \"(N, K) = map(int, input().split())\\nA = [int(i) for i in input().split()]\\nL = -1\\nR = -1\\nfor i in range(N):\\n\\tif A[i] > K:\\n\\t\\tL = i\\n\\t\\tbreak\\nif L == -1:\\n\\tprint(N)\\n\\texit()\\nfor i in range(N):\\n\\tif A[::-1][i] > K:\\n\\t\\tR = i\\n\\t\\tbreak\\nprint(L + R)\\n\", \"(number, skill) = input().split()\\nnumber = int(number)\\nskill = int(skill)\\nproblems = list(map(int, input().split()))\\nstop_at = 0\\nchecked = 0\\nindex = 0\\nsolved = 0\\nfor index in range(len(problems)):\\n\\tif number == checked:\\n\\t\\tbreak\\n\\telif skill >= problems[index]:\\n\\t\\tsolved = solved + 1\\n\\t\\tchecked = checked + 1\\n\\telse:\\n\\t\\tstop_at = index\\n\\t\\tbreak\\nfor i in range(len(problems) - 1, -1, -1):\\n\\tif number == checked:\\n\\t\\tbreak\\n\\telif i == stop_at:\\n\\t\\tbreak\\n\\telif skill >= problems[i]:\\n\\t\\tsolved = solved + 1\\n\\t\\tchecked = checked + 1\\n\\telse:\\n\\t\\tbreak\\nprint(solved)\\n\", \"(x, y) = map(int, input().split())\\na = list(map(int, input().split()))\\ncount = 0\\ncount1 = 0\\nfor i in a:\\n\\tif y >= i:\\n\\t\\tcount = count + 1\\n\\telse:\\n\\t\\tbreak\\nb = a[::-1]\\nfor k in b:\\n\\tif y >= k:\\n\\t\\tcount1 = count1 + 1\\n\\telse:\\n\\t\\tbreak\\ntotal = count + count1\\nif total > x:\\n\\tprint(x)\\nelse:\\n\\tprint(total)\\n\", \"import collections\\nfrom functools import cmp_to_key\\nimport math\\nimport sys\\n\\ndef getIntList():\\n\\treturn list(map(int, input().split()))\\nimport bisect\\ntry:\\n\\timport debug\\n\\tdprint = print\\n\\tdprint('debug mode')\\nexcept ModuleNotFoundError:\\n\\n\\tdef dprint(*args, **kwargs):\\n\\t\\tpass\\n\\ndef makePair(z):\\n\\treturn [(z[i], z[i + 1]) for i in range(0, len(z), 2)]\\ndprint(1)\\n(N, K) = getIntList()\\nza = getIntList()\\ns = 0\\nfor x in za:\\n\\tif x <= K:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tbreak\\nza.reverse()\\nfor x in za:\\n\\tif x <= K:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tbreak\\nif s > N:\\n\\ts = N\\nprint(s)\\n\", \"def solve(n, k, a):\\n\\ts = 0\\n\\tfor i in range(n):\\n\\t\\tif a[0] <= k:\\n\\t\\t\\ts += 1\\n\\t\\t\\ta.pop(0)\\n\\t\\telif a[-1] <= k:\\n\\t\\t\\ts += 1\\n\\t\\t\\ta.pop(-1)\\n\\treturn s\\n\\ndef main():\\n\\t(n, k) = list(map(int, input().split()))\\n\\ta = list(map(int, input().split()))\\n\\tprint(solve(n, k, a))\\nmain()\\n\", \"(n, k) = map(int, input().split())\\nnums = list(map(int, input().split()))\\ncount = 0\\nfor (i, num) in enumerate(nums):\\n\\tif num <= k:\\n\\t\\tcount += 1\\n\\t\\tnums[i] = k + 1\\n\\telse:\\n\\t\\tbreak\\nfor num in nums[::-1]:\\n\\tif num <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = (int(x) for x in input().split())\\na = [int(x) for x in input().split()]\\nbegin = -1\\nend = -2\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tif begin == -1:\\n\\t\\t\\tbegin = i\\n\\t\\tend = i\\nprint(n - max(end - begin + 1, 0))\\n\", \"(n, k) = [int(z) for z in input().split()]\\na = [int(j) for j in input().split()]\\nq = 0\\ncounter = 0\\nwhile a[q] <= k:\\n\\tcounter += 1\\n\\tif q >= n - 1:\\n\\t\\tbreak\\n\\tq += 1\\nq = n - 1\\nwhile a[q] <= k:\\n\\tcounter += 1\\n\\tq -= 1\\n\\tif q <= 0:\\n\\t\\tbreak\\nif counter >= n:\\n\\tprint(n)\\nelse:\\n\\tprint(counter)\\n\", \"def gen(a, k):\\n\\tfor i in a:\\n\\t\\tif i <= k:\\n\\t\\t\\tyield k\\n\\t\\telse:\\n\\t\\t\\treturn\\nF = lambda : map(int, input().split())\\n(n, k) = F()\\na = list(F())\\nprint(len([i for i in gen(a, k)]) + (len([i for i in gen(a[::-1], k)]) if any((t > k for t in a)) else 0))\\n\", \"(n, k) = map(int, input().split())\\nproblems = tuple(map(int, input().split()))\\ni = 0\\nans = 0\\nwhile i < n:\\n\\tif problems[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\n\\ti += 1\\nj = n - 1\\nwhile j > i:\\n\\tif problems[j] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\n\\tj -= 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = [int(num) for num in input().split()]\\nc = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tc = c + 1\\n\\telse:\\n\\t\\tbreak\\na.reverse()\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tc = c + 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(n, c))\\n\", \"(n, k) = map(int, input().split())\\nls = list(map(int, input().split()))\\ni1 = -1\\ni2 = -2\\nans = 0\\nfor i in ls:\\n\\tif i > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nfor i in range(n):\\n\\tif ans == n:\\n\\t\\tbreak\\n\\telif ls[n - 1 - i] > k:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\ns = 0\\nwhile len(a) > 1 and min(a[0], a[-1]) <= k:\\n\\tif a[-1] <= k:\\n\\t\\ta.pop()\\n\\telse:\\n\\t\\tdel a[0]\\n\\ts += 1\\nif len(a) == 1:\\n\\tif a[0] <= k:\\n\\t\\ts += 1\\nprint(s)\\n\", \"(n, k) = map(int, input().split())\\nproblem = [int(x) for x in input().split()]\\ncount = 0\\nfor x in problem:\\n\\tif x <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nfor y in range(-1, -(len(problem) + 1), -1):\\n\\tif problem[y] <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nif count > n:\\n\\tprint(int(count / 2))\\nelse:\\n\\tprint(count)\\n\", \"a = input()\\nb = a.split(' ')\\nn = int(b[0])\\nk = int(b[1])\\na = input()\\nb = a.split()\\ni = 0\\nwhile (i < n - 1) & (int(b[i]) <= k):\\n\\ti = i + 1\\nj = n - 1\\nwhile (j >= 0) & (int(b[j]) <= k):\\n\\tj = j - 1\\nnum = n - j + i - 1\\nif num > n:\\n\\tprint(n)\\nelse:\\n\\tprint(num)\\n\", \"(n, m) = map(int, input().split())\\na = list(map(int, input().split()))\\nres = 0\\nc = 0\\nfor i in range(n):\\n\\tif a[i] > m:\\n\\t\\tres = i\\n\\t\\tbreak\\nfor i in range(n):\\n\\tif a[i] > m:\\n\\t\\tc = i + 1\\nprint(res + n - c)\\n\", \"(a, k) = [int(i) for i in input().split()]\\nc = [int(i) for i in input().split()]\\ni = 0\\nwhile i < a and c[i] <= k:\\n\\ti += 1\\nj = 1\\nwhile a - j > i and c[-j] <= k:\\n\\tj += 1\\nprint(i + j - 1)\\n\", \"import sys\\nfrom math import sqrt, floor, factorial\\nfrom collections import deque, Counter\\ninp = sys.stdin.readline\\nread = lambda : list(map(int, inp().strip().split()))\\n\\ndef solve():\\n\\t(n, k) = read()\\n\\tarr = read()\\n\\ts = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] <= k:\\n\\t\\t\\ts += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor j in range(-1, -(n - i), -1):\\n\\t\\tif arr[j] <= k:\\n\\t\\t\\ts += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(s)\\nsolve()\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nleft_cnt = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tleft_cnt += 1\\n\\telse:\\n\\t\\tbreak\\nright_cnt = 0\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tright_cnt += 1\\n\\telse:\\n\\t\\tbreak\\nif right_cnt + left_cnt > n:\\n\\tprint(n)\\nelse:\\n\\tprint(right_cnt + left_cnt)\\n\", \"(n, m) = list(map(int, input().split()))\\np = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n):\\n\\tif p[i] > m:\\n\\t\\tbreak\\n\\telif p[i] <= m:\\n\\t\\tcount += 1\\nif count == n:\\n\\tprint(count)\\nelif count != n:\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tif p[j] > m:\\n\\t\\t\\tbreak\\n\\t\\telif p[j] <= m:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\n\", \"(n, k) = map(int, input().split())\\nar = list(map(int, input().split()))\\nfindL = -1\\nfindR = -1\\nfor i in range(len(ar)):\\n\\tif ar[i] > k and findL == -1:\\n\\t\\tfindL = i\\n\\tif ar[n - 1 - i] > k and findR == -1:\\n\\t\\tfindR = n - i - 1\\nif findL == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(findL + n - 1 - findR)\\n\", \"def solve(n, m, t):\\n\\tcount = 0\\n\\twhile True:\\n\\t\\tif len(t) == 0:\\n\\t\\t\\treturn count\\n\\t\\telif t[0] <= m:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tt.pop(0)\\n\\t\\telif t[-1] <= m:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tt.pop()\\n\\t\\telse:\\n\\t\\t\\treturn count\\n(n, m) = map(int, input().split())\\nt = list(map(int, input().split()))\\nprint(solve(n, m, t))\\n\", \"(n, k) = map(int, input().split())\\na = []\\ncnt = 0\\na = list(map(int, input().split()))\\nif len(a) == n:\\n\\tfor i in range(n):\\n\\t\\tif a[0] <= k:\\n\\t\\t\\ta.pop(0)\\n\\t\\t\\tcnt = cnt + 1\\n\\t\\telif a[len(a) - 1] <= k:\\n\\t\\t\\ta.pop(len(a) - 1)\\n\\t\\t\\tcnt = cnt + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(cnt)\\n\", \"(n, k) = input().split()\\n(n, k) = [int(n), int(k)]\\nprob = input().split()\\nfor i in range(len(prob)):\\n\\tprob[i] = int(prob[i])\\ncount = 0\\nleft = 0\\nright = n - 1\\nmark = True\\nwhile mark and right >= 0 and (left <= n - 1):\\n\\tif prob[left] > k and prob[right] > k:\\n\\t\\tmark = False\\n\\telif prob[left] <= k:\\n\\t\\tmark = True\\n\\t\\tcount = count + 1\\n\\t\\tleft = left + 1\\n\\telif prob[right] <= k:\\n\\t\\tmark = True\\n\\t\\tcount = count + 1\\n\\t\\tright = right - 1\\nprint(count)\\n\", \"a = input()\\na = a.split(' ')\\nk = int(a[1])\\na = input()\\na = a.split(' ')\\ny = len(a)\\nt = 0\\nwhile int(a[0]) <= k:\\n\\tdel a[0]\\n\\tif len(a) == 0:\\n\\t\\tbreak\\na.reverse()\\nif len(a) > 0:\\n\\twhile int(a[0]) <= k:\\n\\t\\tdel a[0]\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\nprint(y - len(a))\\n\", \"(n, k) = list(map(int, input().split()))\\npb = list(map(int, input().split()))\\n(front, back) = (pb[0], pb[-1])\\ncount = 0\\nstatus = True\\nwhile status and bool(len(pb)):\\n\\tcount += 1\\n\\tif k >= front:\\n\\t\\tpb.pop(0)\\n\\t\\tif len(pb) != 0:\\n\\t\\t\\tfront = pb[0]\\n\\telif k >= back:\\n\\t\\tpb.pop(-1)\\n\\t\\tif len(pb) != 0:\\n\\t\\t\\tback = pb[-1]\\n\\telse:\\n\\t\\tstatus = False\\n\\t\\tcount -= 1\\nprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\n(mn, mx) = (n, -1)\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tmn = min(mn, i)\\n\\t\\tmx = max(mx, i)\\nif mn > mx:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (mx - mn + 1))\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nlist1 = [int(x) for x in input().split()]\\ncounter = 0\\nwhile len(list1) > 0:\\n\\tif list1[0] <= k or list1[-1] <= k:\\n\\t\\tif list1[0] <= k:\\n\\t\\t\\tlist1.remove(list1[0])\\n\\t\\telif list1[-1] <= k:\\n\\t\\t\\tlist1.pop()\\n\\t\\tcounter += 1\\n\\telse:\\n\\t\\tbreak\\nprint(counter)\\n\", \"List = []\\nflag = 0\\n(n, k) = [int(x) for x in input().split()]\\nList = [int(x) for x in input().split()]\\nright = 0\\nwhile flag < 2:\\n\\tflag = 0\\n\\tif len(List) > 0:\\n\\t\\tif List[right] <= k:\\n\\t\\t\\tList.pop(right)\\n\\t\\telse:\\n\\t\\t\\tflag = flag + 1\\n\\tif len(List) > 0:\\n\\t\\tleft = len(List) - 1\\n\\t\\tif List[left] <= k:\\n\\t\\t\\tList.pop(left)\\n\\t\\telse:\\n\\t\\t\\tflag = flag + 1\\n\\telse:\\n\\t\\tflag = 2\\nprint(n - len(List))\\n\", \"inp = list(map(int, input().split()))\\nn = inp[0]\\nk = inp[1]\\ninp = list(map(int, input().split()))\\ncount = 0\\nfor item in inp:\\n\\tif item > k:\\n\\t\\tcount += 1\\nif count == 0:\\n\\tprint(len(inp))\\nelse:\\n\\ta = inp\\n\\tcount = 0\\n\\tfor i in range(len(a)):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\ta.reverse()\\n\\tfor i in range(len(a)):\\n\\t\\tif a[i] <= k:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(count)\\n\", \"def contest(arr, k):\\n\\tans = 0\\n\\twhile True:\\n\\t\\ttry:\\n\\t\\t\\tif arr.pop(0) <= k:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\texcept IndexError:\\n\\t\\t\\tbreak\\n\\twhile True:\\n\\t\\ttry:\\n\\t\\t\\tif arr.pop() <= k:\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\texcept IndexError:\\n\\t\\t\\tbreak\\n\\treturn ans\\n(n, k) = list(map(int, input().rstrip().split()))\\narr = list(map(int, input().rstrip().split()))\\nprint(contest(arr, k))\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nr = a[::-1]\\ncount = 0\\nfor i in range(len(a)):\\n\\tif a[0] <= k:\\n\\t\\tcount = count + 1\\n\\t\\ta.pop(0)\\n\\telse:\\n\\t\\tfor j in range(len(a)):\\n\\t\\t\\tif r[0] <= k:\\n\\t\\t\\t\\tcount = count + 1\\n\\t\\t\\t\\tr.pop(0)\\nprint(count)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nx = [int(i) for i in input().split()]\\ns = [i for (i, v) in enumerate(x) if v > k]\\nif len(s) == 0:\\n\\tprint(len(x))\\nelse:\\n\\tprint(len(x) - (s[-1] - s[0] + 1))\\n\", \"o = input().rstrip().split(' ')\\np = input().rstrip().split(' ')\\ns = 0\\nG = -789\\nfor i in range(0, len(p)):\\n\\tif int(p[i]) <= int(o[1]):\\n\\t\\ts = s + 1\\n\\telse:\\n\\t\\tG = i\\n\\t\\tbreak\\nif G != -789:\\n\\tfor i in range(len(p) - 1, G, -1):\\n\\t\\tif int(p[i]) <= int(o[1]):\\n\\t\\t\\ts = s + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(s)\\n\", \"def main():\\n\\t(n, k) = map(int, input().split())\\n\\tl = list(map(int, input().split()))\\n\\tfor (i, a) in enumerate(l):\\n\\t\\tif k < a:\\n\\t\\t\\tr = i\\n\\t\\t\\tbreak\\n\\tfor (i, a) in enumerate(reversed(l)):\\n\\t\\tif k < a:\\n\\t\\t\\tr += i\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tr = n\\n\\tprint(r)\\nmain()\\n\", \"n = input()\\nn = n.split()\\nk = int(n[1])\\nn1 = int(n[0])\\nd = 0\\ne = 0\\na = input()\\na = a.split()\\nfor i in range(n1):\\n\\tif int(a[i]) <= k:\\n\\t\\td += 1\\n\\telse:\\n\\t\\te = 1\\n\\t\\tbreak\\nif e == 1:\\n\\tfor i in range(n1 - 1, -1, -1):\\n\\t\\tif int(a[i]) <= k:\\n\\t\\t\\td += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(d)\\n\", \"(n, k) = [int(i) for i in input().split()]\\nres = 0\\nmas = [int(i) for i in input().split()]\\nlmas = len(mas)\\nwhile lmas > 0 and (mas[-1] <= k or mas[0] <= k):\\n\\tif mas[0] <= k:\\n\\t\\tlmas -= 1\\n\\t\\tres += 1\\n\\t\\tmas = mas[1:]\\n\\tif lmas > 0 and mas[-1] <= k:\\n\\t\\tlmas -= 1\\n\\t\\tres += 1\\n\\t\\tmas = mas[:-1]\\nprint(res)\\n\", \"(a, y) = [int(i) for i in input().split()]\\nz = [int(i) for i in input().split()]\\nx = 0\\np = 0\\nfor i in range(a):\\n\\tif z[i] <= y:\\n\\t\\tx = x + 1\\n\\telse:\\n\\t\\tbreak\\nfor j in range(a):\\n\\tif z[a - p - 1] <= y:\\n\\t\\tx = x + 1\\n\\t\\tp = p + 1\\n\\telse:\\n\\t\\tbreak\\ns = x\\nif s > a:\\n\\tprint(s // 2)\\nelse:\\n\\tprint(s)\\n\", \"(a, b) = map(int, input().split())\\nc = list(map(int, input().split()))\\nt = []\\np = 0\\nl = 0\\nn = 0\\nfor i in range(len(c)):\\n\\tt.append(c[p])\\n\\tp = p + 1\\nz = len(t)\\nif not len(t) == 0:\\n\\twhile t[0] <= b:\\n\\t\\tt.remove(t[0])\\n\\t\\tif len(t) == 0:\\n\\t\\t\\tbreak\\nif not len(t) == 0:\\n\\tt.reverse()\\n\\twhile t[0] <= b:\\n\\t\\tt.remove(t[0])\\n\\t\\tif len(t) == 0:\\n\\t\\t\\tbreak\\nprint(a - len(t))\\n\", \"R = lambda : map(int, input().split())\\n(n, k) = R()\\na = list(R())\\nD = lambda l: next((i for (i, x) in enumerate(l) if x > k), len(a))\\nr = D(a)\\nprint((r, r + D(a[::-1]))[r < len(a)])\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\ncount = 0\\nl = 0\\nr = 0\\nwhile len(arr):\\n\\tz = arr.pop()\\n\\tif z <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\narr.reverse()\\nwhile len(arr):\\n\\tz = arr.pop()\\n\\tif z <= k:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = input().split()\\n(n, k) = (int(k), int(k))\\narr = list(map(int, input().split()))\\nl = 0\\nn = len(arr)\\nr = n - 1\\ncount = 0\\nfor i in range(n):\\n\\tif r < l:\\n\\t\\tbreak\\n\\tif arr[l] <= k:\\n\\t\\tcount += 1\\n\\t\\tl += 1\\n\\telif arr[r] <= k:\\n\\t\\tcount += 1\\n\\t\\tr -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = map(int, input().split(' '))\\ns = list(map(int, input().split(' ')))\\nl = -1\\nfor i in range(n):\\n\\tif s[i] > k:\\n\\t\\tl = i\\n\\t\\tbreak\\nr = -1\\nfor i in reversed(range(n)):\\n\\tif s[i] > k:\\n\\t\\tr = i\\n\\t\\tbreak\\nif l == -1:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (r - l + 1))\\n\", \"(n, k) = (int(v) for v in input().split())\\nlist1 = [int(u) for u in input().split()]\\nans = 0\\nfor i in range(n):\\n\\tif list1[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nfor j in range(n):\\n\\tif list1[n - 1 - j] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(min(ans, n))\\n\", \"(a, b) = map(int, input().split())\\ns = [int(x) for x in input().split()]\\nans = 0\\nkey = False\\nfor (i, x) in enumerate(s):\\n\\tif x > b:\\n\\t\\tans = i\\n\\t\\tkey = True\\n\\t\\tbreak\\nif key:\\n\\tfor (i, x) in enumerate(s[::-1]):\\n\\t\\tif x > b:\\n\\t\\t\\tans += i\\n\\t\\t\\tbreak\\n\\tprint(ans)\\nelse:\\n\\tprint(a)\\n\", \"(n, k) = map(int, input().split())\\nt = list(map(int, input().split()))\\ns = 0\\nwhile s < n and t[s] <= k:\\n\\ts += 1\\nwhile n > 0 and t[n - 1] <= k:\\n\\tn -= 1\\nif s > n:\\n\\tprint(len(t))\\nelse:\\n\\tprint(len(t) - n + s)\\n\", \"(useless, k) = map(int, input().split())\\nlis = input().split(' ')\\nn = len(lis)\\ncount = 0\\nfor i in range(n):\\n\\tif int(lis[0]) <= k:\\n\\t\\tdel lis[0]\\n\\t\\tcount += 1\\n\\telif int(lis[-1]) <= k:\\n\\t\\tdel lis[-1]\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"(n, k) = [int(x) for x in input().split()]\\np = list(map(int, input().split()))\\n\\ndef find_hard(l):\\n\\thard = [i for (i, v) in enumerate(l) if v > k]\\n\\tif hard:\\n\\t\\treturn (hard[0], hard[-1])\\n\\telse:\\n\\t\\treturn (0, -1)\\n(a, b) = find_hard(p)\\nprint(len(p) - (b - a + 1))\\n\", \"l1 = list(map(int, input().split()))\\nl2 = list(map(int, input().split()))\\nn = max(l2)\\nif n <= l1[1]:\\n\\tprint(l1[0])\\n\\texit()\\nelse:\\n\\tnp = 0\\n\\tfor i in l2:\\n\\t\\tif i <= l1[1]:\\n\\t\\t\\tnp += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tl2.reverse()\\n\\tfor i in l2:\\n\\t\\tif i <= l1[1]:\\n\\t\\t\\tnp += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(np)\\n\", \"(n, k) = map(int, input().split(' '))\\nll = list(map(int, input().split(' ')))\\nprobs = 0\\nwhile len(ll) > 0:\\n\\tif ll[0] > k and ll[-1] > k:\\n\\t\\tbreak\\n\\telif ll[0] > k:\\n\\t\\tprobs += 1\\n\\t\\tll.pop(-1)\\n\\telif ll[-1] > k:\\n\\t\\tprobs += 1\\n\\t\\tll.pop(0)\\n\\telse:\\n\\t\\tprobs += 1\\n\\t\\tll.pop(0)\\nprint(probs)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nstart = 0\\nend = n - 1\\nans = 0\\nwhile start <= end:\\n\\tif a[start] <= k:\\n\\t\\tstart += 1\\n\\t\\tans += 1\\n\\telif a[end] <= k:\\n\\t\\tend -= 1\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\ncoun = 0\\nans = 0\\nfor i in range(len(a)):\\n\\tif a[i] <= k:\\n\\t\\tcoun = coun + 1\\n\\telse:\\n\\t\\tbreak\\nif coun != n:\\n\\tfor i in reversed(a):\\n\\t\\tif i <= k:\\n\\t\\t\\tans = ans + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(ans + coun)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nl = [int(i) for i in input().split()]\\ni = 0\\nmid = 0\\nwhile len(l) > 0:\\n\\tif l[i] <= k:\\n\\t\\tl.pop(i)\\n\\t\\tif mid == 1:\\n\\t\\t\\ti = len(l) - 1\\n\\telif l[i] > k and mid == 1:\\n\\t\\tbreak\\n\\telse:\\n\\t\\tmid = 1\\n\\t\\ti = len(l) - 1\\nprint(n - len(l))\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\ncnt = 0\\nfor i in range(n):\\n\\tif a[i] <= k:\\n\\t\\tcnt += 1\\n\\t\\ta[i] = 0\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k and a[i] != 0:\\n\\t\\tcnt += 1\\n\\t\\ta[i] = 0\\n\\telse:\\n\\t\\tbreak\\nprint(cnt)\\n\", \"list0 = [int(a) for a in input('').split()]\\nn = list0[0]\\nk = list0[1]\\ndifficulty = [int(b) for b in input('').split()]\\nnum = 0\\na = 0\\nfor i in range(0, n):\\n\\tif k >= difficulty[i]:\\n\\t\\tnum += 1\\n\\telse:\\n\\t\\ta = 1\\n\\t\\tbreak\\nif a == 1:\\n\\tfor j in reversed(difficulty):\\n\\t\\tif k >= j:\\n\\t\\t\\tnum += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(num)\\n\", \"(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\n(lo, hi) = (0, n - 1)\\nwhile lo <= hi and k >= arr[lo]:\\n\\tlo += 1\\nwhile lo <= hi and k >= arr[hi]:\\n\\thi -= 1\\nprint(n - (hi - lo) - 1)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\ni = 0\\narr = []\\ntotal = False\\narr = list(map(int, input().split()))\\ncount = 0\\narrcount = 0\\nfor i in arr:\\n\\tif arrcount == len(arr) - 1:\\n\\t\\ttotal = True\\n\\tif i > k:\\n\\t\\tbreak\\n\\tcount += 1\\n\\tarrcount += 1\\nfor i in reversed(arr):\\n\\tif total:\\n\\t\\tbreak\\n\\tif i > k:\\n\\t\\tbreak\\n\\tcount += 1\\nprint(count)\\n\", \"a = input()\\n(n, k) = a.split()\\nn = int(n)\\nk = int(k)\\na = input().split()\\ni = 0\\np12345 = True\\nwhile p12345:\\n\\tif int(a[0]) <= k:\\n\\t\\ti += 1\\n\\t\\tdel a[0]\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\n\\telif int(a[-1]) <= k:\\n\\t\\ti += 1\\n\\t\\tdel a[-1]\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tp12345 = False\\nprint(i)\\n\", \"(n, k) = map(int, input().split())\\na = [int(i) for i in input().split()]\\nj = 0\\nwhile len(a) > 0:\\n\\tif a[0] <= k:\\n\\t\\tj += 1\\n\\t\\tdel a[0]\\n\\telif a[len(a) - 1] <= k:\\n\\t\\tj += 1\\n\\t\\tdel a[len(a) - 1]\\n\\telse:\\n\\t\\tbreak\\nprint(j)\\n\", \"(n, k) = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nans = 0\\nl = 0\\nr = len(a) - 1\\nfor i in range(l, r + 1):\\n\\tif a[i] <= k:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nif ans == n:\\n\\tprint(ans)\\n\\texit()\\nelse:\\n\\tj = r\\n\\twhile j > l:\\n\\t\\tif a[j] <= k:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tj -= 1\\nprint(ans)\\n\", \"a = input()\\na = a.split()\\nprobs = int(a[0])\\nskill = int(a[1])\\nlst = input()\\nlst = lst.split()\\nlst = list(map(int, lst))\\nwhile len(lst) > 0:\\n\\tif lst[0] > skill and lst[-1] > skill:\\n\\t\\tbreak\\n\\tif lst[0] <= skill:\\n\\t\\tlst.pop(0)\\n\\tif len(lst) > 0:\\n\\t\\tif lst[-1] <= skill:\\n\\t\\t\\tlst.pop(-1)\\nprint(probs - len(lst))\\n\", \"s = 0\\n(x, y) = map(int, input().split())\\na = list(map(int, input().split()))\\nif max(a) <= y:\\n\\tprint(x)\\nelse:\\n\\tfor i in range(x):\\n\\t\\tif y >= a[i]:\\n\\t\\t\\ts += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tfor i in range(-1, -x - 1, -1):\\n\\t\\tif y >= a[i]:\\n\\t\\t\\ts += 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(s)\\n\", \"(n, k) = map(int, input().split())\\na = [i for i in map(int, input().split())]\\nsame = [i for i in a]\\nfor i in a:\\n\\tif same[0] <= k:\\n\\t\\tdel same[0]\\n\\telif same[-1] <= k:\\n\\t\\tdel same[-1]\\nprint(len(a) - len(same))\\n\", \"(count, m_power) = map(int, input().split())\\ntasks_power = [int(a) for a in list(input().split())]\\nlength = len(tasks_power)\\nif tasks_power[0] > m_power and tasks_power[length - 1] > m_power:\\n\\tprint(0)\\nelse:\\n\\tcount = 0\\n\\ttry:\\n\\t\\twhile tasks_power[0] <= m_power:\\n\\t\\t\\ttasks_power.pop(0)\\n\\t\\t\\tlength -= 1\\n\\t\\t\\tcount += 1\\n\\t\\twhile tasks_power[length - 1] <= m_power:\\n\\t\\t\\ttasks_power.pop(length - 1)\\n\\t\\t\\tlength -= 1\\n\\t\\t\\tcount += 1\\n\\texcept:\\n\\t\\tpass\\n\\tfinally:\\n\\t\\tprint(count)\\n\", \"(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\nl = list(map(int, input().split()))\\ni = 0\\nj = n - 1\\nans = 0\\nwhile i < n and l[i] <= k:\\n\\ti += 1\\n\\tans += 1\\nwhile j > i and l[j] <= k:\\n\\tj -= 1\\n\\tans += 1\\nprint(ans)\\n\", \"inp = input().split()\\nn = int(inp[0])\\nk = int(inp[1])\\narr = list(map(int, input().split()))\\nif k >= max(arr):\\n\\tprint(len(arr))\\nelse:\\n\\ti = 0\\n\\tj = len(arr) - 1\\n\\tcount = 0\\n\\tfor i in range(len(arr)):\\n\\t\\tif arr[i] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcount += 1\\n\\tfor i in range(len(arr) - 1, -1, -1):\\n\\t\\tif arr[i] > k:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\n\", \"(n, k) = map(int, input().split())\\na = [*map(int, input().split())]\\nres = 0\\nfor _ in range(2):\\n\\twhile a and a[-1] <= k:\\n\\t\\ta.pop()\\n\\t\\tres += 1\\n\\ta = a[::-1]\\nprint(res)\\n\", \"(a, b) = map(int, input().split())\\nx = [int(q) for q in input().split()]\\ni = 0\\nj = len(x) - 1\\ns = 0\\nwhile i < len(x):\\n\\tif x[i] <= b:\\n\\t\\ts += 1\\n\\t\\ti += 1\\n\\telif x[j] <= b:\\n\\t\\ts += 1\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\tbreak\\nprint(s)\\n\", \"(n, k) = map(int, input().split())\\nl = ['1' if int(x) <= k else '0' for x in input().split()]\\nl = ''.join(l)\\nl = l.strip('1')\\nprint(n - len(l))\\n\", \"from sys import stdin, stdout\\nfrom collections import Counter\\n(a, b) = map(int, stdin.readline().split())\\nl = list(map(int, stdin.readline().split()))\\ncount = 0\\nfor k in range(len(l)):\\n\\tif l[k] <= b:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nl = l[::-1]\\nfor j in range(len(l)):\\n\\tif l[j] <= b:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tbreak\\nstdout.write(str(min(a, count)))\\n\", \"[n, k] = list(map(int, input().split(' ')))\\ndata = list(map(int, input().split(' ')))\\ntmp = len(data)\\ncount = 0\\nwhile tmp > 0:\\n\\tif data[0] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel data[0]\\n\\telif data[-1] <= k:\\n\\t\\tcount += 1\\n\\t\\tdel data[-1]\\n\\telse:\\n\\t\\tbreak\\n\\ttmp = len(data)\\nprint(count)\\n\", \"(N, K) = map(int, input().strip().split())\\nA = list(map(int, input().strip().split()))\\nans = 0\\nfor i in range(N):\\n\\tif A[i] <= K:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nstop = ans - 1\\nfor i in range(N):\\n\\tif N - 1 - i == stop:\\n\\t\\tbreak\\n\\tif A[N - 1 - i] <= K:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\\n\", \"inp_n_k = input()\\ncount = 0\\nn = int(inp_n_k[:inp_n_k.find(' ')])\\nk = int(inp_n_k[inp_n_k.find(' ') + 1:])\\nproblems_str = input().split(' ')\\nfor i in range(n):\\n\\tif k >= int(problems_str[0]):\\n\\t\\tcount += 1\\n\\t\\tproblems_str.pop(0)\\n\\telif k >= int(problems_str[-1]):\\n\\t\\tcount += 1\\n\\t\\tproblems_str.pop(-1)\\n\\telse:\\n\\t\\tbreak\\nprint(count)\\n\", \"def read():\\n\\treturn int(input())\\n(n, k) = input().split()\\nn = int(n)\\nk = int(k)\\na = [int(i) for i in input().split()]\\nleft = right = 0\\nfor i in range(0, n):\\n\\tif a[i] <= k:\\n\\t\\tleft += 1\\n\\telse:\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] <= k:\\n\\t\\tright += 1\\n\\telse:\\n\\t\\tbreak\\nif left == right == n:\\n\\tprint(n)\\nelse:\\n\\tprint(left + right)\\n\", \"(n, k) = input().split()\\narray = []\\naux = 0\\narray = list(map(int, input().split()))\\nfor i in range(int(n)):\\n\\tif int(k) >= array[i]:\\n\\t\\taux = aux + 1\\n\\telse:\\n\\t\\tfor j in range(int(n) - i):\\n\\t\\t\\tif int(k) >= array[int(n) - j - 1]:\\n\\t\\t\\t\\taux = aux + 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nprint(aux)\\n\", \"import math\\nimport random\\nimport time\\nimport heapq\\n\\ndef getIntList():\\n\\treturn list(map(int, input().split()))\\n\\ndef getTransIntList(n):\\n\\tfirst = getIntList()\\n\\tm = len(first)\\n\\tresult = [[0] * n for _ in range(m)]\\n\\tfor i in range(m):\\n\\t\\tresult[i][0] = first[i]\\n\\tfor j in range(1, n):\\n\\t\\tcurr = getIntList()\\n\\t\\tfor i in range(m):\\n\\t\\t\\tresult[i][j] = curr[i]\\n\\treturn result\\n(n, k) = getIntList()\\na = getIntList()\\nresult = 0\\nfor x in a:\\n\\tif x > k:\\n\\t\\tbreak\\n\\tresult += 1\\nif result < n:\\n\\tfor x in a[::-1]:\\n\\t\\tif x > k:\\n\\t\\t\\tbreak\\n\\t\\tresult += 1\\nprint(result)\\n\", \"(n, k) = map(int, input().split())\\nqw = [int(i) for i in input().split()]\\nc = 0\\nfor i in range(n):\\n\\tif qw[i] > k:\\n\\t\\tbreak\\n\\tc += 1\\nfor i in range(n - 1, -1, -1):\\n\\tif qw[i] > k:\\n\\t\\tbreak\\n\\tc += 1\\nprint(min(n, c))\\n\", \"(n, k) = map(int, input().split())\\nlist1 = list(map(int, input().split()))\\nl3 = []\\ns = 0\\nfor gh in range(0, len(list1)):\\n\\tif list1[gh] <= k:\\n\\t\\ts += 1\\n\\t\\tl3.append(gh)\\n\\telse:\\n\\t\\tbreak\\nl2 = []\\np = 0\\nfor gh in range(len(list1) - 1, -1, -1):\\n\\tif list1[gh] <= k:\\n\\t\\tp += 1\\n\\t\\tl2.append(gh)\\n\\telse:\\n\\t\\tbreak\\nm = 0\\nfor t in range(0, len(l2)):\\n\\tif l2[t] in l3:\\n\\t\\tm += 1\\nprint(s + p - m)\\n\", \"(n, k) = map(int, input().split(' '))\\narr = [int(x) for x in input().split(' ')]\\ni = 0\\nj = n - 1\\ncnt = 0\\nwhile i < n and arr[i] <= k:\\n\\tcnt += 1\\n\\ti += 1\\nwhile j >= i and arr[j] <= k:\\n\\tcnt += 1\\n\\tj -= 1\\nprint(cnt)\\n\", \"(n, k) = map(int, input().split())\\nl = list(map(int, input().split()))\\nc = 1\\ncounter = 0\\nwhile len(l) > 0 and c != 0:\\n\\tif l[0] <= k:\\n\\t\\tcounter += 1\\n\\t\\tdel l[0]\\n\\telif l[-1] <= k:\\n\\t\\tcounter += 1\\n\\t\\tdel l[-1]\\n\\telse:\\n\\t\\tc = 0\\nprint(counter)\\n\", \"ch = input()\\nn = int(ch[:ch.index(' ')])\\nk = int(ch[ch.index(' ') + 1:])\\nch = input()\\nch = ch + ' '\\nl = list()\\na = ''\\nfor i in range(len(ch)):\\n\\tif ch[i] != ' ':\\n\\t\\ta = a + ch[i]\\n\\telse:\\n\\t\\tl.append(int(a))\\n\\t\\ta = ''\\ns = 0\\nwhile n > 0 and (l[0] <= k or l[n - 1] <= k):\\n\\tif l[0] <= k:\\n\\t\\tl.pop(0)\\n\\t\\tn = n - 1\\n\\t\\ts += 1\\n\\telif l[n - 1] <= k:\\n\\t\\tl.pop()\\n\\t\\tn = n - 1\\n\\t\\ts += 1\\nprint(s)\\n\", \"(n, k) = map(int, input().split())\\na = list(map(int, input().split()))\\nc = 0\\nv = 0\\nx = 0\\nfor i in range(n):\\n\\tif a[i] > k:\\n\\t\\tc = i\\n\\t\\tx = 1\\n\\t\\tbreak\\nfor i in range(n - 1, -1, -1):\\n\\tif a[i] > k:\\n\\t\\tv = i\\n\\t\\tx = 1\\n\\t\\tbreak\\nprint(n - (v - c) - x)\\n\", \"def fun(arr, n, k):\\n\\ti = 0\\n\\tj = n - 1\\n\\twhile i < n:\\n\\t\\tif arr[i] > k:\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tans = i\\n\\twhile j > i:\\n\\t\\tif arr[j] > k:\\n\\t\\t\\tbreak\\n\\t\\tj -= 1\\n\\t\\tans += 1\\n\\treturn ans\\n(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nprint(fun(arr, n, k))\\n\", \"from __future__ import print_function\\nfrom queue import Queue\\nimport sys\\nimport math\\nimport os.path\\n\\ndef log(*args, **kwargs):\\n\\tprint(*args, file=sys.stderr, **kwargs)\\n\\ndef ni():\\n\\treturn map(int, input().split())\\n\\ndef nio(offset):\\n\\treturn map(lambda x: int(x) + offset, input().split())\\n\\ndef nia():\\n\\treturn list(map(int, input().split()))\\n\\ndef toString(aList, sep=' '):\\n\\treturn sep.join((str(x) for x in aList))\\n\\ndef toMapInvertIndex(aList):\\n\\treturn {k: v for (v, k) in enumerate(aList)}\\n(n, k) = ni()\\na = nia()\\ncount = 0\\nwhile len(a) > 0 and a[0] <= k:\\n\\ta.pop(0)\\n\\tcount += 1\\nwhile len(a) > 0 and a[-1] <= k:\\n\\ta.pop()\\n\\tcount += 1\\nprint(count)\\n\", \"(n, k) = list(map(int, input().split()))\\ni = 0\\narr = list(map(int, input().split()))\\nwhile arr != []:\\n\\tif arr[0] > k:\\n\\t\\tbreak\\n\\tarr.pop(0)\\n\\ti += 1\\nwhile arr != []:\\n\\tif arr[-1] > k:\\n\\t\\tbreak\\n\\tarr.pop()\\n\\ti += 1\\nprint(i)\\n\", \"(n, m) = map(int, input().split())\\na = [int(x) for x in input().split()]\\nk = 0\\nl = 0\\ncount = 0\\nz = set()\\nr = -1\\nwhile k != 2:\\n\\tif a[l] > m:\\n\\t\\tk += 1\\n\\tif a[r] > m:\\n\\t\\tk += 1\\n\\tif a[l] <= m or a[r] <= m:\\n\\t\\tk = 0\\n\\tif a[l] <= m:\\n\\t\\tl += 1\\n\\t\\tcount += 1\\n\\telif a[r] <= m:\\n\\t\\tr -= 1\\n\\t\\tcount += 1\\n\\tif l == n or -r == n:\\n\\t\\tbreak\\nprint(count)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"8 4\\n4 2 3 1 5 1 6 4\\n\", \"5 2\\n3 1 2 1 3\\n\", \"5 100\\n12 34 55 43 21\\n\", \"100 100\\n44 47 36 83 76 94 86 69 31 2 22 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\\n\", \"100 99\\n84 82 43 4 71 3 30 92 15 47 76 43 2 17 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 17 98\\n\", \"100 69\\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 1 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 35 62 6 53 59 62 13 24 7 53 2\\n\", \"100 2\\n2 2 2 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\\n\", \"100 3\\n86 53 82 40 2 20 59 2 46 63 75 49 24 81 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 59 32 51 69 49 79 10 1\\n\", \"13 7\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"1 5\\n4\\n\", \"3 2\\n1 4 1\\n\", \"1 2\\n100\\n\", \"7 4\\n4 2 3 4 4 2 3\\n\", \"1 2\\n1\\n\", \"1 2\\n15\\n\", \"2 1\\n1 1\\n\", \"5 3\\n3 4 3 2 1\\n\", \"1 1\\n2\\n\", \"1 5\\n1\\n\", \"6 6\\n7 1 1 1 1 1\\n\", \"5 5\\n6 5 5 5 5\\n\", \"1 4\\n2\\n\", \"9 4\\n1 2 1 2 4 2 1 2 1\\n\", \"1 1\\n1\\n\", \"1 10\\n5\\n\", \"5 5\\n1 1 1 1 1\\n\", \"100 10\\n2 5 1 10 10 2 7 7 9 4 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 6 8 10 10 2 6 4\\n\", \"100 90\\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 24 90 31 12 77 36 90 67 47 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\\n\", \"100 10\\n6 4 8 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 2 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\\n\", \"100 90\\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 51 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\\n\", \"100 10\\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 10 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 10 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\\n\", \"100 90\\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 90 90 90 90 90 90 90 2 90 90 90 90 90 90 90 90 90 2 90 90 90 90 90\\n\", \"100 10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 10 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\\n\", \"100 90\\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 95 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\\n\", \"100 49\\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 11 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 49 22 7 6 24\\n\", \"100 50\\n38 68 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 33 50 50 50 50 50 50 7 4 50 50\\n\", \"100 48\\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 48 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 9 48\\n\", \"100 57\\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 57 56 34 57 24 7 57 57 57 2 57 57 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\\n\", \"100 51\\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 34 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 4 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\\n\", \"100 50\\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 86 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 31 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\\n\", \"100 50\\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 50 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 57 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\\n\", \"100 50\\n43 50 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 44 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\\n\", \"88 10\\n10 8 1 10 10 1 3 7 10 5 8 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 4 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\\n\", \"100 50\\n80 39 33 69 75 50 23 88 50 50 67 90 87 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\\n\", \"100 50\\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 50 50 31 16 50 17 50 17 31 13 25 16 50 10 50 47 50 66\\n\", \"2 8\\n8 8\\n\", \"1 6\\n3\\n\", \"1 5\\n5\\n\", \"100 3\\n86 53 82 40 2 20 59 2 46 63 75 49 24 81 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 59 32 51 69 49 79 10 1\\n\", \"100 49\\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 11 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 49 22 7 6 24\\n\", \"100 51\\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 34 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 4 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\\n\", \"100 50\\n43 50 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 44 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\\n\", \"100 69\\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 1 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 35 62 6 53 59 62 13 24 7 53 2\\n\", \"100 2\\n2 2 2 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\\n\", \"100 99\\n84 82 43 4 71 3 30 92 15 47 76 43 2 17 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 17 98\\n\", \"7 4\\n4 2 3 4 4 2 3\\n\", \"1 5\\n1\\n\", \"100 90\\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 90 90 90 90 90 90 90 2 90 90 90 90 90 90 90 90 90 2 90 90 90 90 90\\n\", \"1 6\\n3\\n\", \"100 48\\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 48 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 9 48\\n\", \"1 1\\n1\\n\", \"1 10\\n5\\n\", \"1 2\\n1\\n\", \"2 1\\n1 1\\n\", \"5 3\\n3 4 3 2 1\\n\", \"1 5\\n4\\n\", \"1 4\\n2\\n\", \"2 8\\n8 8\\n\", \"5 5\\n1 1 1 1 1\\n\", \"100 10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 10 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\\n\", \"100 50\\n80 39 33 69 75 50 23 88 50 50 67 90 87 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\\n\", \"100 10\\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 10 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 10 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\\n\", \"100 90\\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 24 90 31 12 77 36 90 67 47 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\\n\", \"1 5\\n5\\n\", \"100 100\\n44 47 36 83 76 94 86 69 31 2 22 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\\n\", \"100 10\\n6 4 8 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 2 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\\n\", \"1 2\\n100\\n\", \"100 50\\n38 68 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 33 50 50 50 50 50 50 7 4 50 50\\n\", \"6 6\\n7 1 1 1 1 1\\n\", \"1 2\\n15\\n\", \"3 2\\n1 4 1\\n\", \"100 50\\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 50 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 57 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\\n\", \"100 10\\n2 5 1 10 10 2 7 7 9 4 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 6 8 10 10 2 6 4\\n\", \"5 5\\n6 5 5 5 5\\n\", \"88 10\\n10 8 1 10 10 1 3 7 10 5 8 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 4 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\\n\", \"100 90\\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 95 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\\n\", \"1 1\\n2\\n\", \"100 57\\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 57 56 34 57 24 7 57 57 57 2 57 57 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\\n\", \"9 4\\n1 2 1 2 4 2 1 2 1\\n\", \"13 7\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"100 50\\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 86 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 31 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\\n\", \"100 50\\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 50 50 31 16 50 17 50 17 31 13 25 16 50 10 50 47 50 66\\n\", \"100 90\\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 51 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\\n\", \"100 3\\n86 53 82 40 2 20 59 2 46 63 75 49 24 81 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 0 32 51 69 49 79 10 1\\n\", \"100 49\\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 21 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 49 22 7 6 24\\n\", \"100 51\\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 54 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 4 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\\n\", \"100 50\\n43 50 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 73 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\\n\", \"100 69\\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 2 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 35 62 6 53 59 62 13 24 7 53 2\\n\", \"100 2\\n2 2 2 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 4 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\\n\", \"100 99\\n84 82 43 4 71 3 30 92 15 47 76 43 2 33 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 17 98\\n\", \"7 4\\n4 2 2 4 4 2 3\\n\", \"100 90\\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 123 90 90 90 90 90 90 2 90 90 90 90 90 90 90 90 90 2 90 90 90 90 90\\n\", \"1 0\\n1\\n\", \"2 1\\n1 0\\n\", \"5 3\\n3 3 3 2 1\\n\", \"100 10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 13 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\\n\", \"100 10\\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 10 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 2 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\\n\", \"100 90\\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 24 90 31 12 77 36 90 67 54 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\\n\", \"100 100\\n22 47 36 83 76 94 86 69 31 2 22 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\\n\", \"100 10\\n6 4 14 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 2 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\\n\", \"100 50\\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 66 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 57 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\\n\", \"100 10\\n2 5 1 10 10 2 7 7 9 4 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 10 8 10 10 2 6 4\\n\", \"88 10\\n10 8 1 10 10 1 3 7 10 5 8 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 0 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\\n\", \"100 90\\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 19 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\\n\", \"13 2\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"100 50\\n43 81 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 73 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\\n\", \"100 48\\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 77 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 11 48\\n\", \"100 10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 13 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 20 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\\n\", \"100 50\\n38 93 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 55 50 50 50 50 50 50 7 4 50 50\\n\", \"88 10\\n10 8 1 10 10 1 3 7 10 5 11 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 0 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\\n\", \"100 90\\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 167 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 123 90 90 90 90 90 90 2 90 90 61 90 90 90 90 90 90 2 90 90 90 90 90\\n\", \"100 57\\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 21 56 34 57 24 7 57 57 64 2 57 68 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\\n\", \"1 5\\n0\\n\", \"100 48\\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 48 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 11 48\\n\", \"1 2\\n2\\n\", \"1 6\\n2\\n\", \"2 8\\n8 13\\n\", \"100 50\\n80 39 33 69 75 50 23 88 50 50 67 90 65 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\\n\", \"1 2\\n101\\n\", \"100 50\\n38 93 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 33 50 50 50 50 50 50 7 4 50 50\\n\", \"6 10\\n7 1 1 1 1 1\\n\", \"3 2\\n1 4 2\\n\", \"1 1\\n3\\n\", \"100 57\\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 21 56 34 57 24 7 57 57 57 2 57 57 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\\n\", \"100 50\\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 86 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 16 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\\n\", \"100 50\\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 79 50 31 16 50 17 50 17 31 13 25 16 50 10 50 47 50 66\\n\", \"100 164\\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 51 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\\n\", \"5 2\\n3 1 1 1 3\\n\", \"8 4\\n4 1 3 1 5 1 6 4\\n\", \"5 100\\n12 34 17 43 21\\n\", \"100 3\\n86 53 82 40 2 20 59 2 46 63 75 49 24 31 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 0 32 51 69 49 79 10 1\\n\", \"100 49\\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 21 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 40 22 7 6 24\\n\", \"100 51\\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 54 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 0 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\\n\", \"100 69\\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 2 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 36 62 6 53 59 62 13 24 7 53 2\\n\", \"100 2\\n2 2 0 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 4 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\\n\", \"100 99\\n84 82 43 4 71 3 30 92 15 47 76 43 2 33 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 34 98\\n\", \"7 4\\n4 2 2 4 8 2 3\\n\", \"100 90\\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 123 90 90 90 90 90 90 2 90 90 61 90 90 90 90 90 90 2 90 90 90 90 90\\n\", \"2 1\\n0 0\\n\", \"1 2\\n0\\n\", \"2 8\\n9 13\\n\", \"100 50\\n80 39 33 69 75 50 23 88 50 98 67 90 65 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\\n\", \"100 10\\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 18 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 2 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\\n\", \"100 90\\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 25 90 31 12 77 36 90 67 54 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\\n\", \"100 100\\n22 47 36 83 76 94 86 69 31 2 9 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\\n\", \"100 10\\n6 4 14 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 0 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\\n\", \"6 10\\n7 1 1 1 0 1\\n\", \"3 1\\n1 4 2\\n\", \"100 50\\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 66 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 77 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\\n\", \"100 10\\n2 5 1 10 10 2 7 7 9 3 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 10 8 10 10 2 6 4\\n\", \"100 90\\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 26 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\\n\", \"100 57\\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 21 56 34 57 24 7 57 57 57 2 57 68 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\\n\", \"13 4\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"100 50\\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 125 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 16 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\\n\", \"100 50\\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 79 50 31 16 50 17 50 17 42 13 25 16 50 10 50 47 50 66\\n\", \"100 164\\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 17 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\\n\", \"8 4\\n4 1 3 0 5 1 6 4\\n\", \"5 100\\n19 34 17 43 21\\n\", \"100 3\\n86 53 82 40 2 20 59 2 46 63 75 49 24 31 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 61 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 0 32 51 69 49 79 10 1\\n\", \"100 49\\n71 25 14 36 36 48 36 49 28 40 49 49 49 25 40 49 33 22 49 49 14 46 8 44 49 21 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 40 22 7 6 24\\n\", \"100 51\\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 12 54 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 0 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\\n\", \"100 50\\n43 81 50 91 97 67 6 50 86 50 76 60 50 59 1 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 73 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\\n\", \"100 69\\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 2 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 6 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 36 62 6 53 59 62 13 24 7 53 2\\n\", \"100 2\\n2 2 0 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 0 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 4 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\\n\", \"100 99\\n84 82 43 4 71 3 30 92 15 47 76 43 2 33 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 57 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 34 98\\n\", \"7 4\\n4 2 2 4 8 0 3\\n\", \"100 48\\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 77 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 89 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 11 48\\n\", \"2 1\\n0 -1\\n\", \"100 10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 13 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 20 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\\n\", \"100 50\\n80 71 33 69 75 50 23 88 50 98 67 90 65 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\\n\", \"100 10\\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 18 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 2 10 10 10 10 10 10 66 10 5 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\\n\", \"100 90\\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 11 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 25 90 31 12 77 36 90 67 54 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\\n\", \"100 100\\n22 47 36 83 76 94 86 69 31 2 9 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 71 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\\n\", \"100 10\\n6 4 14 4 1 9 4 8 6 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 0 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\\n\", \"100 50\\n38 93 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 11 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 55 50 50 50 50 50 50 7 4 50 50\\n\", \"6 10\\n7 2 1 1 0 1\\n\", \"3 1\\n1 3 2\\n\", \"100 50\\n50 37 28 92 7 76 49 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 66 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 77 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\\n\", \"88 10\\n10 8 1 10 10 1 3 7 10 5 11 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 17 64 100 25 10 12 9 52 13 8 10 56 10 0 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\\n\", \"100 90\\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 26 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 82 3 90 90 90 90 90 90 90\\n\", \"13 4\\n1 1 1 1 1 1 1 1 1 1 1 0 1\\n\", \"5 2\\n3 1 2 1 3\\n\", \"8 4\\n4 2 3 1 5 1 6 4\\n\", \"5 100\\n12 34 55 43 21\\n\"], \"outputs\": [\"5\\n\", \"0\\n\", \"5\\n\", \"100\\n\", \"98\\n\", \"39\\n\", \"99\\n\", \"1\\n\", \"13\\n\", \"1\\n\", \"2\\n\", \"0\\n\", \"7\\n\", \"1\\n\", \"0\\n\", \"2\\n\", \"4\\n\", \"0\\n\", \"1\\n\", \"5\\n\", \"4\\n\", \"1\\n\", \"9\\n\", \"1\\n\", \"1\\n\", \"5\\n\", \"71\\n\", \"63\\n\", \"61\\n\", \"72\\n\", \"52\\n\", \"60\\n\", \"56\\n\", \"61\\n\", \"99\\n\", \"99\\n\", \"99\\n\", \"99\\n\", \"99\\n\", \"3\\n\", \"3\\n\", \"6\\n\", \"66\\n\", \"0\\n\", \"0\\n\", \"2\\n\", \"1\\n\", \"1\\n\", \"1\\n\", \"99\\n\", \"99\\n\", \"6\\n\", \"39\\n\", \"99\\n\", \"98\\n\", \"7\\n\", \"1\\n\", \"60\\n\", \"1\\n\", \"99\\n\", \"1\\n\", \"1\\n\", \"1\\n\", \"2\\n\", \"4\\n\", \"1\\n\", \"1\\n\", \"2\\n\", \"5\\n\", \"56\\n\", \"0\\n\", \"52\\n\", \"63\\n\", \"1\\n\", \"100\\n\", \"61\\n\", \"0\\n\", \"99\\n\", \"5\\n\", \"0\\n\", \"2\\n\", \"3\\n\", \"71\\n\", \"4\\n\", \"66\\n\", \"61\\n\", \"0\\n\", \"99\\n\", \"9\\n\", \"13\\n\", \"3\\n\", \"0\\n\", \"72\\n\", \"1\\n\", \"99\\n\", \"21\\n\", \"6\\n\", \"39\\n\", \"81\\n\", \"98\\n\", \"7\\n\", \"51\\n\", \"0\\n\", \"2\\n\", \"5\\n\", \"56\\n\", \"52\\n\", \"63\\n\", \"100\\n\", \"31\\n\", \"3\\n\", \"71\\n\", \"66\\n\", \"61\\n\", \"13\\n\", \"4\\n\", \"64\\n\", \"41\\n\", \"11\\n\", \"43\\n\", \"44\\n\", \"78\\n\", \"1\\n\", \"99\\n\", \"1\\n\", \"1\\n\", \"1\\n\", \"0\\n\", \"0\\n\", \"99\\n\", \"6\\n\", \"2\\n\", \"0\\n\", \"99\\n\", \"3\\n\", \"0\\n\", \"100\\n\", \"0\\n\", \"5\\n\", \"5\\n\", \"1\\n\", \"99\\n\", \"21\\n\", \"39\\n\", \"81\\n\", \"98\\n\", \"6\\n\", \"51\\n\", \"2\\n\", \"1\\n\", \"0\\n\", \"0\\n\", \"52\\n\", \"63\\n\", \"100\\n\", \"31\\n\", \"6\\n\", \"1\\n\", \"3\\n\", \"71\\n\", \"61\\n\", \"81\\n\", \"13\\n\", \"3\\n\", \"0\\n\", \"100\\n\", \"5\\n\", \"5\\n\", \"1\\n\", \"99\\n\", \"21\\n\", \"4\\n\", \"39\\n\", \"81\\n\", \"98\\n\", \"6\\n\", \"44\\n\", \"2\\n\", \"41\\n\", \"0\\n\", \"52\\n\", \"63\\n\", \"100\\n\", \"31\\n\", \"11\\n\", \"6\\n\", \"1\\n\", \"3\\n\", \"43\\n\", \"61\\n\", \"13\\n\", \"0\\n\", \"5\\n\", \"5\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['brute force', 'implementation']",
    "name": null,
    "source": "codeforces",
    "tags": "['Implementation', 'Complete search']",
    "skill_types": "['Complete search']",
    "url": "https://codeforces.com/problemset/problem/999/A",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": "2019-12-31",
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "You are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\nABA\n\nOutput\nNO\n\nInput\nBACFAB\n\nOutput\nYES\n\nInput\nAXBYBXA\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample test, despite the fact that there are substrings \"AB\" and \"BA\", their occurrences overlap, so the answer is \"NO\".\n\nIn the second sample test there are the following occurrences of the substrings: BACFAB.\n\nIn the third sample test there is no substring \"AB\" nor substring \"BA\".",
    "solutions": "[\"s = input()\\na = s.find('AB')\\nb = s.rfind('BA')\\nc = s.find('BA')\\nd = s.rfind('AB')\\nif a == -1 or b == -1:\\n\\tprint('NO')\\nelif abs(a - b) <= 1 and abs(c - d) <= 1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"def substrings(s):\\n\\tif 'AB' not in s or 'BA' not in s:\\n\\t\\treturn 'NO'\\n\\tx = s.replace('AB', 'X', 1)\\n\\tif 'BA' in x:\\n\\t\\treturn 'YES'\\n\\ty = s.replace('BA', 'X', 1)\\n\\tif 'AB' in y:\\n\\t\\treturn 'YES'\\n\\treturn 'NO'\\ns = input()\\nprint(substrings(s))\\n\", \"s = input()\\n\\ndef d(s, a, b):\\n\\tif a in s:\\n\\t\\tindex = s.index(a)\\n\\t\\t(s1, s2) = (s[:index], s[index + 2:])\\n\\t\\tif b in s1 or b in s2:\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\treturn False\\nif d(s, 'AB', 'BA') or d(s, 'BA', 'AB'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"l = input()\\ni = 0\\nf1 = False\\nf2 = False\\nf3 = False\\nf4 = False\\nwhile i < len(l) - 1:\\n\\tif (l[i] == 'A' and l[i + 1] == 'B') and (not f1):\\n\\t\\tf1 = True\\n\\t\\ti += 2\\n\\telif (l[i] == 'B' and l[i + 1] == 'A') and (not f2):\\n\\t\\tf2 = True\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\ni = len(l) - 1\\nif not (f1 and f2):\\n\\twhile i > 1:\\n\\t\\tif (l[i] == 'B' and l[i - 1] == 'A') and (not f3):\\n\\t\\t\\tf3 = True\\n\\t\\t\\ti -= 2\\n\\t\\telif (l[i] == 'A' and l[i - 1] == 'B') and (not f4):\\n\\t\\t\\tf4 = True\\n\\t\\t\\ti -= 2\\n\\t\\telse:\\n\\t\\t\\ti -= 1\\nif f1 and f2 or (f3 and f4):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nfi = s.find('AB')\\nse = s.find('BA')\\nab = s.count('AB')\\nba = s.count('BA')\\nif fi == -1 or se == -1:\\n\\tprint('NO')\\nelif (s.count('ABAB') == 1 or s.count('BABA') == 1) and s.count('A') == 2 and (s.count('B') == 2):\\n\\tprint('NO')\\nelif ab == 1 and ba == 1:\\n\\tif max(fi, se) - min(fi, se) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"from sys import stdin, stdout, stderr, setrecursionlimit\\nsetrecursionlimit(100000)\\n\\ndef debug(*e):\\n\\tif not __debug__:\\n\\t\\tprint(*e, file=stderr)\\n\\ndef dd(*vals):\\n\\timport inspect, re\\n\\tframe = inspect.getframeinfo(inspect.stack()[1][0])\\n\\tvs = re.search('dd\\\\\\\\((.+)\\\\\\\\)', frame.code_context[0]).group(1).split(',')\\n\\tif vs:\\n\\t\\tdebug(','.join(('{0} = {1}'.format(vs[i], v) for (i, v) in enumerate(vals))))\\n\\ndef trace(f):\\n\\n\\tdef traced(*args, **kw):\\n\\t\\tdebug('calling {} with args {}, {}'.format(f.__name__, args, kw))\\n\\t\\treturn f(*args, **kw)\\n\\treturn traced\\n\\ndef read():\\n\\treturn stdin.readline().rstrip()\\n\\ndef readarr(sep=None, maxsplit=-1):\\n\\treturn read().split(sep, maxsplit)\\n\\ndef readint():\\n\\treturn int(read())\\n\\ndef readia(sep=None, maxsplit=-1):\\n\\treturn [int(a) for a in readarr(sep, maxsplit)]\\n\\ndef write(*args, **kwargs):\\n\\tsep = kwargs.get('sep', ' ')\\n\\tend = kwargs.get('end', '\\\\n')\\n\\tstdout.write(sep.join((str(a) for a in args)) + end)\\n\\ndef writea(arr, sep=' ', end='\\\\n'):\\n\\tstdout.write(sep.join((str(a) for a in arr)) + end)\\nimport re\\n\\ndef findallBA(s):\\n\\treturn [m.start(0) for m in re.finditer('BA', s)]\\n\\ndef f(s):\\n\\ti = 0\\n\\tbs = findallBA(s)\\n\\twhile True:\\n\\t\\ta = s.find('AB', i)\\n\\t\\tif a == -1:\\n\\t\\t\\treturn False\\n\\t\\tfor b in bs:\\n\\t\\t\\tif abs(a - b) > 1:\\n\\t\\t\\t\\treturn True\\n\\t\\ti = a + 1\\nS = read()\\nr = f(S)\\nif r:\\n\\twrite('YES')\\nelse:\\n\\tr = f(S[::-1])\\n\\twrite('YES' if r else 'NO')\\n\", \"s = input()\\nAB = []\\nBA = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B':\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tBA.append(i)\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tAB.append(i)\\nANS = False\\nfor i in range(len(AB)):\\n\\tfor j in range(len(BA)):\\n\\t\\tif abs(AB[i] - BA[j]) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.find('BA')\\nc = s.find('BA', a + 2)\\nd = s.find('AB', b + 2)\\nif a != -1 and c != -1 or (b != -1 and d != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab = s.count('AB')\\nba = s.count('BA')\\naba = s.count('ABA')\\nbab = s.count('BAB')\\nif ab + ba - aba - bab >= 2 and ab > 0 and (ba > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab_count = s.count('AB')\\nba_count = s.count('BA')\\nif ab_count == 0 or ba_count == 0:\\n\\tprint('NO')\\nelif ab_count == 1:\\n\\ts = s.replace('AB', '--')\\n\\tprint('YES' if 'BA' in s else 'NO')\\nelif ba_count == 1:\\n\\ts = s.replace('BA', '--')\\n\\tprint('YES' if 'AB' in s else 'NO')\\nelse:\\n\\tprint('YES')\\n\", \"def findAB(A):\\n\\ta = A.find('AB')\\n\\tif a == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tb = A[a + 2:].find('BA')\\n\\t\\treturn b != -1\\n\\ndef findBA(B):\\n\\ta = B.find('BA')\\n\\tif a == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tb = B[a + 2:].find('AB')\\n\\t\\treturn b != -1\\ns = input()\\nif findAB(s) or findBA(s):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def main():\\n\\ts = input()\\n\\tif 'AB' not in s or 'BA' not in s:\\n\\t\\tprint('NO')\\n\\telif s.index('AB') + 1 < s.rindex('BA'):\\n\\t\\tprint('YES')\\n\\telif s.index('BA') + 1 < s.rindex('AB'):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"def main():\\n\\ts = input()\\n\\tf = False\\n\\tif 'AB' in s:\\n\\t\\ti = s.index('AB')\\n\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\tf = True\\n\\tif 'BA' in s:\\n\\t\\ti = s.index('BA')\\n\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\tf = True\\n\\tprint('YES' if f else 'NO')\\nmain()\\n\", \"s = input()\\n\\ndef helper(s, seq):\\n\\tfor x in range(len(s) - 1):\\n\\t\\tif s[x] == seq[0] and s[x + 1] == seq[1]:\\n\\t\\t\\treturn True\\n\\treturn False\\n\\ndef f(s):\\n\\tif len(s) < 4:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tcount = 0\\n\\t\\tfor x in range(len(s) - 1):\\n\\t\\t\\tif s[x] == 'B' and s[x + 1] == 'A':\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tif helper(s[x + 2:], 'AB'):\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\t\\telif count == 2:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\tif s[x] == 'A' and s[x + 1] == 'B':\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\tif helper(s[x + 2:], 'BA'):\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\t\\telif count == 2:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\treturn False\\nif not f(s):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = list(input())\\nn = len(s)\\nindex = n + 1\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tindex = i + 2\\n\\t\\tbreak\\nfor i in range(index, n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tprint('YES')\\n\\t\\texit()\\nindex = n + 1\\nfor i in range(n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tindex = i + 2\\n\\t\\tbreak\\nfor i in range(index, n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nw = ''\\nif 'AB' in s:\\n\\tw = s.replace('AB', '.', 1)\\nelse:\\n\\tprint('NO')\\n\\texit()\\nif 'BA' in w:\\n\\tprint('YES')\\nelse:\\n\\tif 'BA' in s:\\n\\t\\ts = s.replace('BA', '.', 1)\\n\\telse:\\n\\t\\tprint('NO')\\n\\t\\texit()\\n\\tif 'AB' in s:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nabc = [0, 0, 0]\\nn = len(s)\\ni = 0\\nwhile i < n:\\n\\tch = s[i]\\n\\tif ch == 'A':\\n\\t\\tif i < n - 1 and s[i + 1] == 'B':\\n\\t\\t\\tif i < n - 2 and s[i + 2] == 'A':\\n\\t\\t\\t\\tabc[2] += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tabc[0] = 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telif ch == 'B':\\n\\t\\tif i < n - 1 and s[i + 1] == 'A':\\n\\t\\t\\tif i < n - 2 and s[i + 2] == 'B':\\n\\t\\t\\t\\tabc[2] += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tabc[1] = 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telse:\\n\\t\\ti += 1\\nif abc[0] == 1 and abc[1] == 1:\\n\\tprint('YES')\\nelif abc[2] != 0 and max(abc[0], abc[1]) != 0:\\n\\tprint('YES')\\nelif abc[0] == 0 and abc[1] == 0 and (abc[2] >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin, stdout\\ns = stdin.readline().rstrip()\\n\\ndef find(s):\\n\\n\\tdef scan(a, b):\\n\\t\\t(ix, i) = (-1, 0)\\n\\t\\twhile i < len(s) - 1:\\n\\t\\t\\tcand = s[i:i + 2]\\n\\t\\t\\tif cand == a:\\n\\t\\t\\t\\tif ix == -1:\\n\\t\\t\\t\\t\\tix = i\\n\\t\\t\\telif cand == b:\\n\\t\\t\\t\\tif ix != -1 and i - ix > 1:\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\ti += 1\\n\\t\\treturn False\\n\\treturn scan('AB', 'BA') or scan('BA', 'AB')\\nif find(s):\\n\\tstdout.write('YES\\\\n')\\nelse:\\n\\tstdout.write('NO\\\\n')\\n\", \"data = input()\\nabs = []\\nbas = []\\nfor i in range(len(data) - 1):\\n\\tif data[i:i + 2] == 'AB':\\n\\t\\tabs.append(i)\\n\\telif data[i:i + 2] == 'BA':\\n\\t\\tbas.append(i)\\n\\ndef is_valid(l1, l2):\\n\\tfor i in l1:\\n\\t\\tfor j in l2:\\n\\t\\t\\tif j > i + 1:\\n\\t\\t\\t\\treturn True\\n\\treturn False\\nprint('YES' if is_valid(abs, bas) or is_valid(bas, abs) else 'NO')\\n\", \"ans = {True: 'YES', False: 'NO'}\\ns = input()\\nflag = False\\np = s.find('AB')\\nif 'AB' in s and 'BA' in s:\\n\\twhile p != -1:\\n\\t\\ts = s[:p] + 'ab' + s[p + 2:]\\n\\t\\tbuf = s[:p].upper() + 'ab' + s[p + 2:]\\n\\t\\tif 'BA' in buf:\\n\\t\\t\\tflag = True\\n\\t\\t\\tbreak\\n\\t\\tp = s.find('AB')\\nprint(ans[flag])\\n\", \"da_str = input()\\nab = ba = concurrence = False\\ni = 0\\nwhile i < len(da_str) - 1:\\n\\ta = da_str[i]\\n\\tb = da_str[i + 1]\\n\\tif a == 'A' and b == 'B':\\n\\t\\tif i + 2 < len(da_str) and da_str[i + 2] == 'A':\\n\\t\\t\\tif concurrence == True:\\n\\t\\t\\t\\tab = True\\n\\t\\t\\tconcurrence = True\\n\\t\\t\\ti += 3\\n\\t\\telse:\\n\\t\\t\\tab = True\\n\\t\\t\\ti += 2\\n\\telif a == 'B' and b == 'A':\\n\\t\\tif i + 2 < len(da_str) and da_str[i + 2] == 'B':\\n\\t\\t\\tif concurrence == True:\\n\\t\\t\\t\\tab = True\\n\\t\\t\\tconcurrence = True\\n\\t\\t\\ti += 3\\n\\t\\telse:\\n\\t\\t\\tba = True\\n\\t\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\nif ab == True and ba == True or (concurrence == True and (ab == True or ba == True)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from math import *\\ns = input()\\nif 'AB' not in s or 'BA' not in s:\\n\\tprint('NO')\\nelif abs(s.index('AB') - s.rfind('BA')) > 1 or abs(s.index('BA') - s.rfind('AB')) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nf = 0\\nn = len(s)\\nind = n\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tind = i + 2\\n\\t\\tbreak\\nfor i in range(ind, n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tf = 1\\n\\t\\tbreak\\nind = n\\nfor i in range(n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tind = i + 2\\n\\t\\tbreak\\nfor i in range(ind, n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tf = 1\\n\\t\\tbreak\\nif f:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin\\n\\ndef solve(s):\\n\\tn = len(s)\\n\\tgotba = False\\n\\ti = 1\\n\\twhile i < n:\\n\\t\\tif gotba and s[i - 1] == 'A' and (s[i] == 'B'):\\n\\t\\t\\treturn 'YES'\\n\\t\\tif not gotba and s[i - 1] == 'B' and (s[i] == 'A'):\\n\\t\\t\\ti += 1\\n\\t\\t\\tgotba = True\\n\\t\\ti += 1\\n\\tgotab = False\\n\\ti = 1\\n\\twhile i < n:\\n\\t\\tif gotab and s[i - 1] == 'B' and (s[i] == 'A'):\\n\\t\\t\\treturn 'YES'\\n\\t\\tif not gotab and s[i - 1] == 'A' and (s[i] == 'B'):\\n\\t\\t\\ti += 1\\n\\t\\t\\tgotab = True\\n\\t\\ti += 1\\n\\treturn 'NO'\\ns = stdin.readline()\\nprint(solve(s))\\n\", \"check = 0\\ns = input()\\nt = s\\nif 'AB' in s:\\n\\ts = s.replace('AB', '*', 1)\\n\\tif 'BA' in s:\\n\\t\\tcheck += 1\\nif 'BA' in t:\\n\\tt = t.replace('BA', '*', 1)\\n\\tif 'AB' in t:\\n\\t\\tcheck += 1\\nprint('YES' if check > 0 else 'NO')\\n\", \"string = input()\\nfound = 0\\nab = string.find('AB')\\nif ab != -1:\\n\\tif string[ab + 2:].find('BA') != -1:\\n\\t\\tfound = 1\\nba = string.find('BA')\\nif ba != -1:\\n\\tif string[ba + 2:].find('AB') != -1:\\n\\t\\tfound = 1\\nif found == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def main():\\n\\ts = input()\\n\\tif 'AB' in s and 'BA' in s:\\n\\t\\tif s.rindex('BA') - s.index('AB') > 1 or s.rindex('AB') - s.index('BA') > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"s = input()\\nif 'BA' in s and 'AB' in s:\\n\\tx = s.index('BA')\\n\\ty = s.index('AB')\\n\\tif 'AB' in s[x + 2:] or 'BA' in s[y + 2:]:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"from collections import Counter\\nimport string\\nimport math\\nimport sys\\nsys.setrecursionlimit(10 ** 6)\\nfrom fractions import Fraction\\n\\ndef array_int():\\n\\treturn [int(i) for i in sys.stdin.readline().split()]\\n\\ndef vary(arrber_of_variables):\\n\\tif arrber_of_variables == 1:\\n\\t\\treturn int(sys.stdin.readline())\\n\\tif arrber_of_variables >= 2:\\n\\t\\treturn map(int, sys.stdin.readline().split())\\n\\ndef makedict(var):\\n\\treturn dict(Counter(var))\\n\\ndef printDivisors(n):\\n\\tdivisors = []\\n\\ti = 1\\n\\twhile i <= math.sqrt(n):\\n\\t\\tif n % i == 0:\\n\\t\\t\\tif n // i == i:\\n\\t\\t\\t\\tdivisors.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdivisors.extend((i, n // i))\\n\\t\\ti = i + 1\\n\\treturn divisors\\n\\ndef countTotalBits(num):\\n\\tbinary = bin(num)[2:]\\n\\treturn len(binary)\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\tif n <= 3:\\n\\t\\treturn True\\n\\tif n % 2 == 0 or n % 3 == 0:\\n\\t\\treturn False\\n\\ti = 5\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0 or n % (i + 2) == 0:\\n\\t\\t\\treturn False\\n\\t\\ti = i + 6\\n\\treturn True\\nmod = 10 ** 9 + 7\\n\\ndef ncr(n, r):\\n\\tif n < r:\\n\\t\\treturn 0\\n\\tif n == r:\\n\\t\\treturn 1\\n\\tnumer = fact[n]\\n\\tdenm = fact[n - r] * fact[r]\\n\\treturn numer * pow(denm, mod - 2, mod)\\nfact = [1] * 1001\\nc = 1\\nmod = 10 ** 9 + 7\\nfor i in range(1, 1001):\\n\\tfact[i] = fact[i - 1] * i % mod\\n\\ndef comp(x):\\n\\treturn x[1]\\n\\ndef binary_search(arr, x):\\n\\tlow = 0\\n\\thigh = len(arr) - 1\\n\\tmid = 0\\n\\twhile low <= high:\\n\\t\\tmid = (high + low) // 2\\n\\t\\tif arr[mid] < x:\\n\\t\\t\\tlow = mid + 1\\n\\t\\telif arr[mid] > x:\\n\\t\\t\\thigh = mid - 1\\n\\t\\telse:\\n\\t\\t\\treturn mid\\n\\treturn -1\\ns = input()\\nif 0:\\n\\tpass\\nelif 0:\\n\\tpass\\nelif s.count('BA') == 0 or s.count('AB') == 0:\\n\\tprint('NO')\\nelif s.count('AB') == 2 and s.count('BA') == 1:\\n\\tif s[s.find('AB') + 2:s.find('AB') + 4] == 'AB':\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif s.count('BA') == 2 and s.count('AB') == 1:\\n\\tif s[s.find('BA') + 2:s.find('BA') + 4] == 'BA':\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif s.count('AB') == 1 and s.count('BA') == 1 and (s.find('AB') < s.find('BA')):\\n\\tif s.find('AB') + 1 == s.find('BA'):\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif s.count('BA') == 1 and s.count('AB') == 1:\\n\\tif s.find('BA') + 1 == s.find('AB'):\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('YES')\\n\", \"def next(arr, target):\\n\\tstart = 0\\n\\tend = len(arr) - 1\\n\\tans = -1\\n\\twhile start <= end:\\n\\t\\tmid = (start + end) // 2\\n\\t\\tif arr[mid] <= target:\\n\\t\\t\\tstart = mid + 1\\n\\t\\telse:\\n\\t\\t\\tans = mid\\n\\t\\t\\tend = mid - 1\\n\\treturn ans\\n\\ndef isFound(s):\\n\\tabIndexes = []\\n\\tbaIndexes = []\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tabIndexes.append(i)\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tbaIndexes.append(i)\\n\\tfor index in abIndexes:\\n\\t\\tif next(baIndexes, index + 1) != -1:\\n\\t\\t\\treturn True\\n\\tfor index in baIndexes:\\n\\t\\tif next(abIndexes, index + 1) != -1:\\n\\t\\t\\treturn True\\n\\treturn False\\ns = input()\\nmemo = dict()\\nif isFound(s):\\n\\tprint('Yes')\\nelse:\\n\\tprint('No')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.rfind('AB')\\nc = s.find('BA')\\nd = s.rfind('BA')\\nprint('NYOE S'[min(a, b, c, d) > -1 and (abs(a - d) > 1 or abs(b - c) > 1)::2])\\n\", \"c = str(input())\\nn = len(c)\\nx = [i for i in range(n - 1) if c[i:i + 2] == 'AB']\\ny = [i for i in range(n - 1) if c[i:i + 2] == 'BA']\\nif x and y and (x[0] < y[-1] - 1 or y[0] < x[-1] - 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nis_ab = s.find('AB') != -1\\nis_ba = s.find('BA', s.find('AB') + 2) != -1\\nif is_ab and is_ba:\\n\\tprint('YES')\\n\\texit()\\nis_ba = s.find('BA') != -1\\nis_ab = s.find('AB', s.find('BA') + 2) != -1\\nif is_ba and is_ab:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nmaxAB = -1\\nminAB = -1\\nmaxBA = -1\\nminBA = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\tif minAB == -1:\\n\\t\\t\\tminAB = i\\n\\t\\tmaxAB = i\\n\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\tif minBA == -1:\\n\\t\\t\\tminBA = i\\n\\t\\tmaxBA = i\\nif (abs(maxAB - minBA) > 1 or abs(maxBA - minAB) > 1) and minAB > -1 and (minBA > -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def solve(str, s1, s2):\\n\\ti = str.find(s1)\\n\\treturn i > -1 and str.find(s2, i + 2) != -1\\nstr = input()\\nres = solve(str, 'AB', 'BA') or solve(str, 'BA', 'AB')\\nprint('YES' if res else 'NO')\\n\", \"s = input()\\nk = s\\nl = s\\nif len(s) <= 3:\\n\\tprint('NO')\\nelse:\\n\\tk = k.replace('AB', '.', 1)\\n\\tk = k.replace('BA', '.', 1)\\n\\tif k.count('.') == 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tl = l.replace('BA', '.', 1)\\n\\t\\tl = l.replace('AB', '.', 1)\\n\\t\\tif l.count('.') == 2:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"def main():\\n\\ts = input()\\n\\ta = s.find('AB')\\n\\tb = s.find('BA')\\n\\tif a == -1 or b == -1:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\tif s[a + 2:].find('BA') != -1 or s[b + 2:].find('AB') != -1:\\n\\t\\tprint('YES')\\n\\t\\treturn\\n\\tprint('NO')\\n\\treturn\\nmain()\\n\", \"s = input()\\ndone = 0\\nab_start_index_list = []\\nba_start_index_list = []\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab_start_index_list.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tba_start_index_list.append(i)\\nfor m in ab_start_index_list:\\n\\tfor n in ba_start_index_list:\\n\\t\\tif m != n - 1 and m != n + 1:\\n\\t\\t\\tdone += 1\\n\\t\\t\\tbreak\\nif done == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"sequence = str(input())\\nvariant_first = sequence.replace('AB', '5', 1).replace('BA', '9', 1)\\nvariant_two = sequence.replace('BA', '4', 1).replace('AB', '2', 1)\\nif '5' in variant_first and '9' in variant_first or ('2' in variant_two and '4' in variant_two):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"l = input()\\na = 0\\nb = 0\\nfor i in range(len(l) - 2):\\n\\tif l[i] == 'A' and l[i + 1] == 'B' and (l[i + 2] != 'A'):\\n\\t\\ta = 1\\n\\tif l[i] == 'B' and l[i + 1] == 'A' and (l[i + 2] != 'B'):\\n\\t\\tb = 1\\nif l[len(l) - 3:] != 'BAB' and l[len(l) - 2:] == 'AB':\\n\\ta = 1\\nif l[len(l) - 3:] != 'ABA' and l[len(l) - 2:] == 'BA':\\n\\tb = 1\\nc = 0\\nd = 0\\nk = 0\\nj = 0\\nfor i in range(len(l) - 1):\\n\\tif l[i] == 'A' and l[i + 1] == 'B' and (c == 0):\\n\\t\\tc = 1\\n\\t\\tk = i + 1\\n\\tif l[i] == 'B' and l[i + 1] == 'A' and (c == 1) and (i != k):\\n\\t\\ta = 1\\n\\t\\tb = 1\\n\\tif l[i] == 'B' and l[i + 1] == 'A' and (d == 0):\\n\\t\\td = 1\\n\\t\\tj = i + 1\\n\\tif l[i] == 'A' and l[i + 1] == 'B' and (d == 1) and (j != i):\\n\\t\\ta = 1\\n\\t\\tb = 1\\nif a + b == 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab = s.find('AB')\\nba = s.find('BA')\\nif ab != -1 and ba != -1:\\n\\tif abs(ab - ba) > 1:\\n\\t\\tprint('YES')\\n\\telif abs(ab - ba) == 1:\\n\\t\\tmx = max(ab, ba) + 2\\n\\t\\tif s[mx:].find('AB') != -1 or s[mx:].find('BA') != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"x = input()\\nlab = 1000000000.0\\nrab = -1000000000.0\\nlba = 1000000000.0\\nrba = -1000000000.0\\nfor i in range(len(x) - 1):\\n\\tif x[i:i + 2] == 'AB':\\n\\t\\tlab = min(lab, i)\\n\\t\\trab = max(rab, i)\\n\\tif x[i:i + 2] == 'BA':\\n\\t\\tlba = min(lba, i)\\n\\t\\trba = max(rba, i)\\nif lab < 1000000000.0 and lba < 1000000000.0:\\n\\tif lab + 1 < rba or lba + 1 < rab:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif s.find('AB') >= 0 and s.replace('AB', '-', 1).find('BA') >= 0:\\n\\tprint('YES')\\nelif s.find('BA') >= 0 and s.replace('BA', '-', 1).find('AB') >= 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif s.count('AB') == 0 or s.count('BA') == 0:\\n\\tprint('NO')\\nelse:\\n\\tt = s.replace('AB', 'xx', 1)\\n\\ttt = s.replace('BA', 'xx', 1)\\n\\tif t.count('BA') >= 1 or tt.count('AB') >= 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nid = s.find('AB')\\nif id != -1:\\n\\tp = s[id + 2:]\\n\\tif 'BA' in p:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nid = s.find('BA')\\nif id == -1:\\n\\tprint('NO')\\n\\texit()\\np = s[id + 2:]\\nif 'AB' in p:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\na = s.find('AB')\\nb = s.find('BA')\\nc = s.rfind('AB')\\nd = s.rfind('BA')\\nif a == -1 or b == -1:\\n\\tprint('NO')\\nelif abs(a - b) >= 2 or abs(a - d) >= 2 or abs(b - c) >= 2 or (abs(c - d) >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = input()\\nn = list(n)\\na = 0\\nb = 0\\nc = 0\\nfor i in range(0, len(n) - 2):\\n\\tif n[i] == 'A' and n[i + 1] == 'B' and (n[i + 2] == 'A'):\\n\\t\\tc += 1\\n\\t\\tn[i] = ' '\\n\\t\\tn[i + 1] = ' '\\n\\t\\tn[i + 2] = ' '\\n\\tif n[i] == 'B' and n[i + 1] == 'A' and (n[i + 2] == 'B'):\\n\\t\\tc += 1\\n\\t\\tn[i] = ' '\\n\\t\\tn[i + 1] = ' '\\n\\t\\tn[i + 2] = ' '\\nif c >= 2:\\n\\tprint('YES')\\n\\texit()\\nfor i in range(0, len(n) - 1):\\n\\tif n[i] == 'A' and n[i + 1] == 'B':\\n\\t\\ta += 1\\n\\tif n[i] == 'B' and n[i + 1] == 'A':\\n\\t\\tb += 1\\nif a & b or a & c or b & c:\\n\\tprint('YES')\\n\\texit()\\nelse:\\n\\tprint('NO')\\n\", \"def solve(s):\\n\\t(ab1, ab2) = (s.find('AB'), s.rfind('AB'))\\n\\t(ba1, ba2) = (s.find('BA'), s.rfind('BA'))\\n\\tif ab1 >= 0 and ba1 >= 0 and (abs(ab1 - ba2) > 1 or abs(ab2 - ba1) > 1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nsolve(input())\\n\", \"s = input()\\nab = []\\nba = []\\nlast = -9\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nF = False\\nfor x in ab:\\n\\tfor y in ba:\\n\\t\\tif abs(x - y) != 1:\\n\\t\\t\\tF = True\\n\\t\\t\\tbreak\\nif F:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nl = len(s)\\na = -1\\nb = -1\\nfor i in range(0, l - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta = i + 1\\n\\t\\tbreak\\nfor i in range(l - 1, 0, -1):\\n\\tif s[i] == 'A' and s[i - 1] == 'B':\\n\\t\\tb = i - 1\\n\\t\\tbreak\\nc = -1\\nd = -1\\nfor i in range(0, l - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tc = i + 1\\n\\t\\tbreak\\nfor i in range(l - 1, 0, -1):\\n\\tif s[i] == 'B' and s[i - 1] == 'A':\\n\\t\\td = i - 1\\n\\t\\tbreak\\nif a == -1 or b == -1:\\n\\tprint('NO')\\nelif a != b and a - b != 2 or (c != d and c - d != 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"str2 = input()\\n\\ndef test(str1):\\n\\tif str1.count('AB') >= 1:\\n\\t\\tstr1 = str1.replace('AB', 'Z', 1)\\n\\t\\tif str1.count('BA') >= 1:\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\telse:\\n\\t\\treturn False\\n\\ndef test1(str1):\\n\\tif str1.count('BA') >= 1:\\n\\t\\tstr1 = str1.replace('BA', 'Z', 1)\\n\\t\\tif str1.count('AB') >= 1:\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\treturn False\\n\\telse:\\n\\t\\treturn False\\nif test(str2) or test1(str2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.rfind('AB')\\nc = s.find('BA')\\nd = s.rfind('BA')\\nif 'AB' in s and 'BA' in s:\\n\\tif abs(a - d) >= 2 or abs(b - c) >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"S = input()\\nLen = len(S)\\na = []\\nb = []\\ni = 0\\nwhile i < Len:\\n\\tif i + 1 < Len and S[i] == 'A' and (S[i + 1] == 'B'):\\n\\t\\ta.append(i)\\n\\telif i + 1 < Len and S[i] == 'B' and (S[i + 1] == 'A'):\\n\\t\\tb.append(i)\\n\\ti += 1\\nif len(a) == 0 or len(b) == 0:\\n\\tprint('NO')\\nelif len(a) == 2 and len(b) == 1:\\n\\tif a[0] == b[0] - 1 and b[0] == a[1] - 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif len(b) == 2 and len(a) == 1:\\n\\tif b[0] == a[0] - 1 and a[0] == b[1] - 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif len(a) > 1 and len(b) >= 1:\\n\\tprint('YES')\\nelif len(b) > 1 and len(a) >= 1:\\n\\tprint('YES')\\nelif a[0] != b[0] + 1 and b[0] != a[0] + 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nc = 0\\nif 'AB' in s:\\n\\ta = s.replace('AB', ',', 1)\\n\\tc += 1\\n\\tif 'BA' in a:\\n\\t\\tc += 1\\nif c != 2:\\n\\tc = 0\\n\\tif 'BA' in s:\\n\\t\\ta = s.replace('BA', ',', 1)\\n\\t\\tc += 1\\n\\t\\tif 'AB' in a:\\n\\t\\t\\tc += 1\\nprint(['NO', 'YES'][c == 2])\\n\", \"s = input()\\nif s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB') - 1:\\n\\tif s.count('AB') and s.count('BA'):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"n = input()\\nab1 = n.find('AB')\\nba1 = n.find('BA', ab1 + 2)\\nba2 = n.find('BA')\\nab2 = n.find('AB', ba2 + 2)\\nif ab1 == -1 or ba1 == -1 or abs(ab1 - ba1) <= 1:\\n\\tif ab2 == -1 or ba2 == -1 or abs(ab2 - ba2) <= 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('YES')\\n\", \"a = input()\\ni = 0\\nj = len(a) - 1\\nt1 = t2 = 0\\nwhile i < len(a) and j > 0:\\n\\ttry:\\n\\t\\tif a[i] == 'A' and a[i + 1] == 'B':\\n\\t\\t\\tt1 = (i, i + 1)\\n\\t\\tif a[j] == 'A' and a[j - 1] == 'B':\\n\\t\\t\\tt2 = (j - 1, j)\\n\\t\\tif t1[0] not in t2 and t1[1] not in t2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\texcept:\\n\\t\\tpass\\n\\ti += 1\\n\\tj -= 1\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nt = 'AB'\\nr = 'BA'\\nif t in a and r in a:\\n\\tw = str(a)\\n\\tw = w.replace(r, ' ', 1)\\n\\ta = a.replace(t, ' ', 1)\\n\\tif t in w:\\n\\t\\tprint('YES')\\n\\telif r in a:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nk = len(a)\\nab = 0\\nba = 0\\naba = 0\\nbab = 0\\nm = 0\\nfor i in range(0, k - 2):\\n\\tif a[i] == 'A' and a[i + 1] == 'B' and (a[i + 2] == 'A') and (i + 2 < k):\\n\\t\\taba = aba + 1\\n\\t\\tbreak\\n\\telif a[i] == 'A' and a[i + 1] == 'B' and (i + 1 < k):\\n\\t\\tab = ab + 1\\n\\t\\tbreak\\n\\telif a[i] == 'B' and a[i + 1] == 'A' and (a[i + 2] == 'B') and (i + 2 < k):\\n\\t\\tbab = bab + 1\\n\\t\\tbreak\\n\\telif a[i] == 'B' and a[i + 1] == 'A' and (i + 1 < k):\\n\\t\\tba = ba + 1\\n\\t\\tbreak\\nif aba > 0:\\n\\tfor j in range(i + 3, k - 1):\\n\\t\\tif a[j] == 'A' and a[j + 1] == 'B':\\n\\t\\t\\tab = ab + 1\\n\\t\\t\\tbreak\\n\\t\\telif a[j] == 'B' and a[j + 1] == 'A':\\n\\t\\t\\tba = ba + 1\\n\\t\\t\\tbreak\\n\\tif ab > 0 or ba > 0:\\n\\t\\tm = 1\\n\\t\\tprint('YES')\\nelif ab > 0:\\n\\tfor j in range(i + 2, k - 1):\\n\\t\\tif a[j] == 'B' and a[j + 1] == 'A':\\n\\t\\t\\tba = ba + 1\\n\\t\\t\\tbreak\\n\\tif ba > 0:\\n\\t\\tm = 1\\n\\t\\tprint('YES')\\nelif bab > 0:\\n\\tfor j in range(i + 3, k - 1):\\n\\t\\tif a[j] == 'A' and a[j + 1] == 'B':\\n\\t\\t\\tab = ab + 1\\n\\t\\t\\tbreak\\n\\t\\telif a[j] == 'B' and a[j + 1] == 'A':\\n\\t\\t\\tba = ba + 1\\n\\t\\t\\tbreak\\n\\tif ab > 0 or ba > 0:\\n\\t\\tm = 1\\n\\t\\tprint('YES')\\nelif ba > 0:\\n\\tfor j in range(i + 2, k - 1):\\n\\t\\tif a[j] == 'A' and a[j + 1] == 'B':\\n\\t\\t\\tab = ab + 1\\n\\t\\t\\tbreak\\n\\tif ab > 0:\\n\\t\\tm = 1\\n\\t\\tprint('YES')\\nif m == 0:\\n\\tprint('NO')\\n\", \"def comprobar(cadena, tam):\\n\\tif tam <= 3:\\n\\t\\treturn 'NO'\\n\\tk = 0\\n\\tfor i in range(tam - 2):\\n\\t\\tif cadena[i] == 'A' and cadena[i + 1] == 'B':\\n\\t\\t\\tk = i + 2\\n\\t\\t\\tbreak\\n\\tif k != 0:\\n\\t\\tfor j in range(k, tam - 1):\\n\\t\\t\\tif cadena[j] == 'B' and cadena[j + 1] == 'A':\\n\\t\\t\\t\\treturn 'YES'\\n\\tk = 0\\n\\tfor i in range(tam - 2):\\n\\t\\tif cadena[i] == 'B' and cadena[i + 1] == 'A':\\n\\t\\t\\tk = i + 2\\n\\t\\t\\tbreak\\n\\tif k != 0:\\n\\t\\tfor j in range(k, tam - 1):\\n\\t\\t\\tif cadena[j] == 'A' and cadena[j + 1] == 'B':\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nA = input()\\nt = len(A)\\nif t > 100000:\\n\\tprint('NO')\\nelse:\\n\\tprint(comprobar(A, t))\\n\", \"f = lambda l, r: abs(l - r) > 1 and l >= 0 and (r >= 0)\\n(lambda s: print('YES' if f(s.find('AB'), s.rfind('BA')) or f(s.find('BA'), s.rfind('AB')) else 'NO'))(input())\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\ta = s.find('AB')\\n\\tb1 = s[a + 2:].find('BA')\\n\\tif b1 != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tb = s.find('BA')\\n\\t\\ta1 = s[b + 2:].find('AB')\\n\\t\\tif a1 != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def f(inp, ab, ba):\\n\\ti = inp.find(ab)\\n\\treturn i != -1 and inp.find(ba, i + 2) != -1\\ninp = input()\\nif f(inp, 'AB', 'BA') or f(inp, 'BA', 'AB'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"inp = input()\\ni = inp.find('AB')\\nj = inp.find('BA')\\nif i == -1 or j == -1:\\n\\tprint('NO')\\n\\texit()\\nx = inp.find('BA', i + 2)\\nif x != -1:\\n\\tprint('YES')\\n\\texit()\\ny = inp.find('AB', j + 2)\\nif y != -1:\\n\\tprint('YES')\\n\\texit()\\nprint('NO')\\n\", \"s = input()\\na = False\\nb = False\\nif 'AB' in s:\\n\\tia = s.find('AB')\\n\\ta = True\\n\\tb = False\\n\\tif 'BA' in s[ia + 2:]:\\n\\t\\tb = True\\nif (a == False or b == False) and 'BA' in s:\\n\\tib = s.find('BA')\\n\\tb = True\\n\\ta = False\\n\\tif 'AB' in s[ib + 2:]:\\n\\t\\ta = True\\nif b and a:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\n(q, w) = (a.count('ABA'), a.count('BAB'))\\n(r, t) = (a.count('AB'), a.count('BA'))\\nif min(r, t) == 0 or r + t - (w + q) < 2:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"inp = input()\\nlastab = None\\nlastba = None\\nif 'BA' not in inp or 'AB' not in inp:\\n\\tprint('NO')\\nelse:\\n\\tab = inp.find('AB')\\n\\tba = inp.find('BA')\\n\\tfor i in range(min(ab, ba), len(inp)):\\n\\t\\tif i < len(inp) - 2:\\n\\t\\t\\tsecond = inp[i + 1]\\n\\t\\t\\tthird = inp[i + 2]\\n\\t\\t\\tsubB = second + third\\n\\t\\t\\tif subB == 'BA':\\n\\t\\t\\t\\tlastba = i\\n\\t\\t\\telif subB == 'AB':\\n\\t\\t\\t\\tlastab = i\\n\\tif ab != lastba and lastba is not None:\\n\\t\\tprint('YES')\\n\\telif ba != lastab and lastab is not None:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"from sys import stdin\\nmax_val = int(10000000000000.0)\\nmin_val = int(-10000000000000.0)\\n\\ndef read_int():\\n\\treturn int(stdin.readline())\\n\\ndef read_ints():\\n\\treturn [int(x) for x in stdin.readline().split()]\\n\\ndef read_str():\\n\\treturn input()\\n\\ndef read_strs():\\n\\treturn [x for x in stdin.readline().split()]\\ns = read_str()\\nab = s.find('AB')\\nba = s.find('BA')\\nif ab != -1 and s.find('BA', ab + 2) > -1 or (ba != -1 and s.find('AB', ba + 2) > -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def solve(s):\\n\\tab = s.find('AB')\\n\\tba = s.find('BA')\\n\\tif ab == -1 or ba == -1:\\n\\t\\treturn False\\n\\tba1 = s.find('BA', ab + 2)\\n\\tab1 = s.find('AB', ba + 2)\\n\\treturn ba1 != -1 or ab1 != -1\\ns = input().rstrip()\\nprint('YES' if solve(s) else 'NO')\\n\", \"s = input()\\nl = len(s)\\ncount = 0\\ntrig = []\\nfor i in range(l - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tcount = 1\\n\\t\\tm = i\\n\\t\\ttrig.append(m)\\nif count > 0:\\n\\tfor i in range(l - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tfor m in trig:\\n\\t\\t\\t\\tif i != m + 1 and i + 1 != m:\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\t\\tbreak\\nif count >= 2:\\n\\tres = 'YES'\\nelse:\\n\\tres = 'NO'\\nprint(res)\\n\", \"string = input()\\nindex1 = []\\nindex2 = []\\njudge = False\\nif 'AB' not in string or 'BA' not in string:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(len(string) - 1):\\n\\t\\tif string[i] == 'A' and string[i + 1] == 'B':\\n\\t\\t\\tindex1.append(i)\\n\\t\\telif string[i] == 'B' and string[i + 1] == 'A':\\n\\t\\t\\tindex2.append(i)\\n\\tfor i in index1:\\n\\t\\tfor j in index2:\\n\\t\\t\\tif abs(i - j) != 1:\\n\\t\\t\\t\\tjudge = True\\n\\t\\t\\t\\tbreak\\n\\tif judge == True:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"n = input()\\nres = 'NO'\\nmylist = ['BABAB', 'BAAAB', 'ABABA', 'ABBBA']\\nif 'ABA' not in n and 'BAB' not in n:\\n\\tif 'AB' in n and 'BA' in n:\\n\\t\\tres = 'YES'\\nelse:\\n\\tfor i in mylist:\\n\\t\\tif i in n:\\n\\t\\t\\tres = 'YES'\\n\\tif 'ABA' in n:\\n\\t\\tn = n.replace('ABA', '', 1)\\n\\t\\tif 'AB' in n or 'BA' in n:\\n\\t\\t\\tres = 'YES'\\n\\telif 'BAB' in n:\\n\\t\\tn = n.replace('BAB', '', 1)\\n\\t\\tif 'AB' in n or 'BA' in n:\\n\\t\\t\\tres = 'YES'\\nprint(res)\\n\", \"a = input()\\nb = a.count('AB')\\nc = a.replace('AB', '.', 1)\\nd = c.count('BA')\\ne = a.count('BA')\\nf = a.replace('BA', '.', 1)\\ng = f.count('AB')\\nif b > 0 and d > 0 or (g > 0 and e > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"x = input()\\nm = False\\nfor i in range(len(x)):\\n\\tif i + 1 < len(x) and x[i] == 'A' and (x[i + 1] == 'B'):\\n\\t\\tn = min(i + 2, len(x) - 1)\\n\\t\\tif 'BA' in x[:i] + ' ' + x[n:]:\\n\\t\\t\\tm = True\\nif m:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"st = input().strip()\\ncab = st.count('AB')\\ncba = st.count('BA')\\nif cab == 0 or cba == 0:\\n\\tprint('NO')\\nelse:\\n\\tfound = False\\n\\tidx = None\\n\\tfor i in range(cab):\\n\\t\\tif idx == None:\\n\\t\\t\\tidx = st.find('AB')\\n\\t\\telse:\\n\\t\\t\\tidx = idx + 1 + st[idx + 1:].find('AB')\\n\\t\\ttry:\\n\\t\\t\\tif max(st[0:idx].count('BA'), st[idx + 2:].count('BA')) > 0:\\n\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\tbreak\\n\\t\\texcept:\\n\\t\\t\\tpass\\n\\tif found:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nlab = None\\nlba = None\\nrab = None\\nrba = None\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif lab == None:\\n\\t\\t\\tlab = i\\n\\t\\trab = i\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif lba == None:\\n\\t\\t\\tlba = i\\n\\t\\trba = i\\n\\ti += 1\\nif lab == None or lba == None:\\n\\tprint('NO')\\nelif rab != lab and rba != lba:\\n\\tprint('YES')\\nelif rab == lab and rab + 1 == rba and (rab - 1 == lba):\\n\\tprint('NO')\\nelif rba == lba and rba + 1 == rab and (rba - 1 == lab):\\n\\tprint('NO')\\nelif rba == lba and rab == lab and (rab + 1 == rba or rab - 1 == rba):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\na = 0\\nb = 0\\nAB = []\\nBA = []\\nflag = True\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tAB.append([i, i + 1])\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tBA.append([i, i + 1])\\nfor i in AB:\\n\\tfor j in BA:\\n\\t\\tflag = True\\n\\t\\tif i[1] != j[0] and i[0] != j[1]:\\n\\t\\t\\tflag = False\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\tif not flag:\\n\\t\\tbreak\\nif flag:\\n\\tprint('NO')\\n\", \"s = str(input())\\n(aba, ab, ba, skip) = (0, 0, 0, 0)\\nn = len(s)\\nfor i in range(n):\\n\\tif i < skip:\\n\\t\\tcontinue\\n\\tif i + 2 < n and (s[i] == 'B' and s[i + 1] == 'A' and (s[i + 2] == 'B') or (s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'A'))):\\n\\t\\taba += 1\\n\\t\\tskip = i + 3\\n\\telif i + 1 < n and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\tab += 1\\n\\t\\tskip = i + 2\\n\\telif i + 1 < n and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\tba += 1\\n\\t\\tskip = i + 2\\nif min(ab, ba) > 0 or (aba > 0 and max(ab, ba) > 0) or aba > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nt = False\\nif s.find('AB') >= 0 and s.replace('AB', 'Z', 1).find('BA') >= 0 or (s.find('BA') >= 0 and s.replace('BA', 'Z', 1).find('AB') >= 0):\\n\\tt = True\\nprint('YES' if t else 'NO')\\n\", \"import unittest\\nfrom random import randint\\nfrom sys import maxsize\\n\\nclass StressTest(unittest.TestCase):\\n\\tknown_values = (('ABA', 'NO'), ('BACFAB', 'YES'), ('AXBYBXA', 'NO'), ('ABBA', 'YES'), ('ABABAB', 'YES'), ('A', 'NO'), ('ABAXXXAB', 'YES'))\\n\\n\\tdef test_known_cases(self):\\n\\t\\tfor (S, expected) in self.known_values:\\n\\t\\t\\tself.assertEqual(expected, NaiveSolution().twoSubs(S))\\n\\n\\tdef test_all_cases(self):\\n\\t\\twhile True:\\n\\t\\t\\tbreak\\n\\nclass NaiveSolution:\\n\\n\\tdef twoSubs(self, S):\\n\\t\\t(ab_1, ba_1, i) = (0, 0, 0)\\n\\t\\t(ab_2, ba_2, j) = (0, 0, len(S) - 1)\\n\\t\\twhile i < len(S) - 1:\\n\\t\\t\\tss = S[i] + S[i + 1]\\n\\t\\t\\tif ab_1 == 0 and ss == 'AB':\\n\\t\\t\\t\\tab_1 += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\telif ba_1 == 0 and ab_1 == 1 and (ss == 'BA'):\\n\\t\\t\\t\\tba_1 += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 1\\n\\t\\twhile j > 0:\\n\\t\\t\\tss = S[j - 1] + S[j]\\n\\t\\t\\tif ab_2 == 0 and ss == 'AB':\\n\\t\\t\\t\\tab_2 += 1\\n\\t\\t\\t\\tj -= 2\\n\\t\\t\\telif ba_2 == 0 and ab_2 == 1 and (ss == 'BA'):\\n\\t\\t\\t\\tba_2 += 1\\n\\t\\t\\t\\tj -= 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\tj -= 1\\n\\t\\tscenario_1 = ab_1 == 1 and ba_1 == 1\\n\\t\\tscenario_2 = ab_2 == 1 and ba_2 == 1\\n\\t\\treturn 'YES' if scenario_1 or scenario_2 else 'NO'\\n\\nclass BestSolution:\\n\\tpass\\nans = NaiveSolution().twoSubs(input().strip())\\nprint(ans)\\n\", \"def solve(s):\\n\\t(ab_s, ba_s) = ([], [])\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tab_s.append(i)\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tba_s.append(i)\\n\\t(lab, lba) = (len(ab_s), len(ba_s))\\n\\tif lab > 0 and lba > 0:\\n\\t\\t(left, right) = (0, 0)\\n\\t\\twhile left < lab or right < lba:\\n\\t\\t\\tif left < lab and right < lba and (abs(ab_s[left] - ba_s[right]) > 1):\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\tif left > lab - 2 and right < lba or (right < lba - 1 and ab_s[left] <= ba_s[right]):\\n\\t\\t\\t\\tright += 1\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif right > lba - 2 and left < lab or (left < lab - 1 and ab_s[left] >= ba_s[right]):\\n\\t\\t\\t\\tleft += 1\\n\\t\\t\\t\\tcontinue\\n\\treturn 'NO'\\n\\ndef main():\\n\\ts = input()\\n\\tprint(solve(s))\\nmain()\\n\", \"s = input()\\n(i, j) = (0, len(s) - 1)\\n(lab, lba, rab, rba) = (-999999, -999999, -999999, -999999)\\nwhile i <= len(s) - 2 and j >= 1:\\n\\tif (s[i] == 'A' and s[i + 1] == 'B') and lab == -999999:\\n\\t\\tlab = i\\n\\tif (s[i] == 'B' and s[i + 1] == 'A') and lba == -999999:\\n\\t\\tlba = i\\n\\tif (s[j - 1] == 'B' and s[j] == 'A') and rba == -999999:\\n\\t\\trba = j - 1\\n\\tif (s[j - 1] == 'A' and s[j] == 'B') and rab == -999999:\\n\\t\\trab = j - 1\\n\\tif lab != -999999 and lba != -999999 and (rab != -999999) and (rba != -999999):\\n\\t\\tbreak\\n\\ti += 1\\n\\tj -= 1\\nm = max(lab, rba) - min(lab, rba)\\nn = max(lba, rab) - min(lba, rab)\\nif m >= 2 and m <= 100000 or (n >= 2 and n <= 100000):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nb = a\\nf1 = 0\\nf2 = 0\\nif a.find('AB') != -1:\\n\\ta = a.replace('AB', 'C', 1)\\n\\tif a.find('BA') != -1:\\n\\t\\tf1 = 1\\nif b.find('BA') != -1:\\n\\tb = b.replace('BA', 'C', 1)\\n\\tif b.find('AB') != -1:\\n\\t\\tf2 = 1\\nif f1 == 0 and f2 == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"(s, ix1, ix2) = (input(), [], [])\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tix1.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tix2.append(i)\\nif ix1 == [] or ix2 == []:\\n\\tprint('NO')\\nelif abs(ix1[-1] - ix2[0]) > 1 or abs(ix1[0] - ix2[-1]) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = s.count('AB')\\nb = s.count('BA')\\nc = s.count('ABA')\\nd = s.count('BAB')\\ne = c + d\\nif a > 0 and b > 0 and (a + b - e >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"prevc = ''\\nfirstab = firstba = i = 0\\nfor c in input():\\n\\ti += 1\\n\\tif prevc == 'A' and c == 'B':\\n\\t\\tif firstab == 0:\\n\\t\\t\\tfirstab = i\\n\\t\\tif firstba and i - firstba > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\n\\telif prevc == 'B' and c == 'A':\\n\\t\\tif firstba == 0:\\n\\t\\t\\tfirstba = i\\n\\t\\tif firstab and i - firstab > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\n\\tprevc = c\\nprint('NO')\\n\", \"string = input()\\nstring2 = string\\nstring = string.replace('AB', '1', 1)\\nstring = string.replace('BA', '1', 1)\\ncount = string.count('1')\\nif count == 2:\\n\\tprint('YES')\\nelse:\\n\\tstring2 = string2.replace('BA', '1', 1)\\n\\tstring2 = string2.replace('AB', '1', 1)\\n\\tcount = string2.count('1')\\n\\tif count == 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"strr = input()\\ncntab = strr.count('AB')\\ncntba = strr.count('BA')\\nif cntba > 1 and cntab > 1:\\n\\tprint('YES')\\nelif cntba == 2 and cntab == 1 and (strr.find('BABA') == -1):\\n\\tprint('YES')\\nelif cntab == 2 and cntba == 1 and (strr.find('ABAB') == -1):\\n\\tprint('YES')\\nelif cntba == 1 and cntab == 1 and (strr.find('ABA') == -1 and strr.find('BAB') == -1):\\n\\tprint('YES')\\nelif cntab > 2 and cntba == 1:\\n\\tprint('YES')\\nelif cntba > 2 and cntab == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif not 'AB' in s:\\n\\tprint('NO')\\nelif not 'BA' in s.replace('AB', ' ', 1):\\n\\tif 'BA' in s:\\n\\t\\tif not 'AB' in s.replace('BA', ' ', 1):\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"def solve():\\n\\ts = input()\\n\\tn = len(s)\\n\\tab = []\\n\\tba = []\\n\\tif n == 1 or n == 2 or n == 3:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\ti = 0\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif 'AB' in s[i:i + 2]:\\n\\t\\t\\t\\tab.append(i)\\n\\t\\t\\telif 'BA' in s[i:i + 2]:\\n\\t\\t\\t\\tba.append(i)\\n\\t\\t\\ti += 1\\n\\t\\tf = 0\\n\\t\\tfor i in ab:\\n\\t\\t\\tfor j in ba:\\n\\t\\t\\t\\tif abs(j - i) >= 2:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tf = 0\\n\\t\\t\\tif f == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\tif f == 1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nsolve()\\n\", \"s = input()\\na = []\\nb = []\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\ta.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tb.append(i)\\nfor x in a:\\n\\tfor y in b:\\n\\t\\tif abs(x - y) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tquit()\\nprint('NO')\\n\", \"s = list(input())\\nab = 0\\nba = 0\\naba = 0\\nbab = 0\\nflag = 0\\nn = len(s)\\ni = 1\\nwhile i < n:\\n\\tif ab == 0 and s[i] == 'A' and (s[i - 1] == 'B'):\\n\\t\\tab += 1\\n\\t\\ti += 2\\n\\t\\tcontinue\\n\\tif ab > 0 and s[i] == 'B' and (s[i - 1] == 'A'):\\n\\t\\tba += 1\\n\\t\\tbreak\\n\\ti += 1\\nflag = 1 if ab > 0 and ba > 0 else 0\\nif flag == 0:\\n\\ti = 1\\n\\tab = 0\\n\\tba = 0\\n\\twhile i < n:\\n\\t\\tif ab == 0 and s[i] == 'B' and (s[i - 1] == 'A'):\\n\\t\\t\\tab += 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tcontinue\\n\\t\\tif ab > 0 and s[i] == 'A' and (s[i - 1] == 'B'):\\n\\t\\t\\tba += 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tflag = 1 if ab > 0 and ba > 0 else 0\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nq = s\\nv = 0\\nu = 0\\nif 'AB' in s:\\n\\tv = v + 1\\n\\tz = s.index('AB')\\n\\ts = s[:z] + 'ab' + s[z + 2:]\\nif 'BA' in s:\\n\\tv = v + 1\\nif 'BA' in q:\\n\\tu = u + 1\\n\\tz = q.index('BA')\\n\\tq = q[:z] + 'ba' + q[z + 2:]\\nif 'AB' in q:\\n\\tu = u + 1\\nif v == 2 or u == 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def check(string):\\n\\tstring = string.upper()\\n\\tif 'AB' in string and 'BA' in string.replace('AB', '-', 1) or ('BA' in string and 'AB' in string.replace('BA', '-', 1)):\\n\\t\\treturn 'YES'\\n\\telse:\\n\\t\\treturn 'NO'\\nprint(check(input()))\\n\", \"s = input()\\nflag = 0\\nif 'AB' in s:\\n\\tx = s.index('AB')\\n\\tr = s[:x] + 'CC' + s[x + 2:]\\n\\tif 'BA' in r:\\n\\t\\tflag = 1\\nif 'BA' in s:\\n\\tx = s.index('BA')\\n\\tr = s[:x] + 'CC' + s[x + 2:]\\n\\tif 'AB' in r:\\n\\t\\tflag = 1\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\ns = -1\\nans = 'NO'\\nif len(string) < 2:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(len(string) - 1):\\n\\t\\tif string[i:i + 2] == 'AB':\\n\\t\\t\\tbreak\\n\\tfor j in range(i + 2, len(string) - 1):\\n\\t\\tif string[j:j + 2] == 'BA':\\n\\t\\t\\tans = 'YES'\\n\\tfor i in range(len(string) - 1):\\n\\t\\tif string[i:i + 2] == 'BA':\\n\\t\\t\\tbreak\\n\\tfor j in range(i + 2, len(string) - 1):\\n\\t\\tif string[j:j + 2] == 'AB':\\n\\t\\t\\tans = 'YES'\\n\\tprint(ans)\\n\", \"string = str(input())\\n\\ndef main(string):\\n\\tAB_faced = False\\n\\tBA_faced = False\\n\\tindex = string.find('AB')\\n\\tif index == -1:\\n\\t\\treturn 'NO'\\n\\telse:\\n\\t\\tAB_faced = True\\n\\t\\tBA_faced = False if string.find('BA', 0, index) == -1 else True\\n\\t\\tif BA_faced is False:\\n\\t\\t\\tBA_faced = False if string.find('BA', index + 2) == -1 else True\\n\\tif AB_faced and BA_faced:\\n\\t\\treturn 'YES'\\n\\tAB_faced = False\\n\\tBA_faced = False\\n\\tindex = string.find('BA')\\n\\tif index == -1:\\n\\t\\treturn 'NO'\\n\\telse:\\n\\t\\tBA_faced = True\\n\\t\\tAB_faced = False if string.find('AB', 0, index) == -1 else True\\n\\t\\tif AB_faced is False:\\n\\t\\t\\tAB_faced = False if string.find('AB', index + 2) == -1 else True\\n\\treturn 'YES' if AB_faced and BA_faced else 'NO'\\nprint(main(string))\\n\", \"s = input()\\ni = 0\\nab = False\\nba = False\\no = 0\\nwhile i < len(s) - 1:\\n\\tif i < len(s) - 2 and (not o and (not ab) and (not ba)) and (s[i:i + 2] == 'AB' and s[i + 1:i + 3] == 'BA') or (s[i:i + 2] == 'BA' and s[i + 1:i + 3] == 'AB'):\\n\\t\\to += 1\\n\\t\\ti += 2\\n\\telif s[i:i + 2] == 'AB' and (not ab):\\n\\t\\tab = True\\n\\t\\ti += 1\\n\\telif s[i:i + 2] == 'BA' and (not ba):\\n\\t\\tba = True\\n\\t\\ti += 1\\n\\ti += 1\\nif ab + ba + o >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def reverse(a):\\n\\treturn a[::-1]\\n\\ndef find_all(str, sub):\\n\\tstart = 0\\n\\ta = []\\n\\twhile start < len(str):\\n\\t\\td = str.find(sub, start)\\n\\t\\tif not d == -1:\\n\\t\\t\\ta.append(d)\\n\\t\\t\\tstart = d + len(sub)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif len(a) == 3:\\n\\t\\t\\tbreak\\n\\treturn a\\n\\ndef find_rev(str, sub):\\n\\tstart = 0\\n\\ta = []\\n\\tstr = reverse(str)\\n\\twhile start < len(str):\\n\\t\\td = str.find(sub, start)\\n\\t\\tif not d == -1:\\n\\t\\t\\tp = len(m) - d - 2\\n\\t\\t\\ta.append(p)\\n\\t\\t\\tstart = d + len(sub)\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\t\\tif len(a) == 0:\\n\\t\\t\\tbreak\\n\\treturn a\\nm = input()\\na = []\\na = find_all(m, 'AB')\\nb = []\\nb = find_all(m, 'BA')\\nc = 0\\nb = reverse(b)\\nfor x in a:\\n\\tfor y in b:\\n\\t\\td = abs(x - y)\\n\\t\\tif d > 1:\\n\\t\\t\\tc = 1\\n\\t\\t\\tbreak\\nif c == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nk = s.find('AB')\\nj = s.find('BA')\\nm = min(k, j)\\nif m == -1:\\n\\tprint('NO')\\nelse:\\n\\tflag = 1\\n\\tif m == k:\\n\\t\\tb = s[m + 2:].find('BA')\\n\\t\\tif b != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tflag = 0\\n\\telse:\\n\\t\\tb = s[m + 2:].find('AB')\\n\\t\\tif b != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tflag = 0\\n\\tif flag == 0:\\n\\t\\tif s.count('AB') > 1 or s.count('BA') > 1:\\n\\t\\t\\tif s.count('AB') > 1:\\n\\t\\t\\t\\tif s[j + 2:].find('AB') != -1:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telif s.count('BA') > 1:\\n\\t\\t\\t\\tif s[k + 2:].find('BA') != -1:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"import sys\\ns = input()\\nif 'AB' not in s or 'BA' not in s:\\n\\tprint('NO')\\n\\tsys.exit()\\npos = s.find('AB')\\nif pos + 2 < len(s) and 'BA' in s[pos + 2:]:\\n\\tprint('YES')\\n\\tsys.exit()\\npos = s.find('BA')\\nif pos + 2 < len(s) and 'AB' in s[pos + 2:]:\\n\\tprint('YES')\\n\\tsys.exit()\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nx = s.find('AB')\\ny = s.find('BA')\\nif x + 1 and s.find('BA', x + 2) + 1 or (y + 1 and s.find('AB', y + 2) + 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nimport collections\\nimport math\\nimport functools\\nimport itertools\\nimport bisect\\nimport operator\\nimport heapq\\nimport random\\ntrue = True\\nfalse = False\\nnull = None\\ntcid = 0\\ntcmax = 99999999\\n\\ndef compute(val, func):\\n\\treturn func(val)\\n\\ndef seq(lo, hi, step=1):\\n\\treturn range(lo, hi + 1, step)\\n\\ndef sround(val, nd):\\n\\treturn f'{val:.{nd}f}'\\n\\ndef ceil(a, b):\\n\\tans = a // b\\n\\tif a % b != 0:\\n\\t\\tans += 1\\n\\treturn ans\\n\\ndef perr(*args, **kwargs):\\n\\tprint(*args, file=sys.stderr, **kwargs)\\n\\ndef line():\\n\\tln = sys.stdin.readline().strip()\\n\\tif ln == '':\\n\\t\\tsys.exit()\\n\\treturn ln\\n\\ndef lines(n):\\n\\treturn [line() for i in range(n)]\\n\\ndef split(ln=None):\\n\\treturn (ln or line()).split()\\n\\ndef num(str=None):\\n\\tstr = str or line()\\n\\treturn float(str) if '.' in str else int(str)\\n\\ndef nums(o=None):\\n\\tif o is not None:\\n\\t\\tif isinstance(o, int):\\n\\t\\t\\to = lines(o)\\n\\t\\telif isinstance(o, str):\\n\\t\\t\\to = split(o)\\n\\treturn list(map(num, o or split()))\\n\\ndef mainloop(tcid=1):\\n\\ts = line()\\n\\n\\tdef aaa(aa, bb):\\n\\t\\tii = s.find(aa)\\n\\t\\tif ii < 0:\\n\\t\\t\\treturn false\\n\\t\\tjj = s.find(bb, ii + 2)\\n\\t\\treturn jj > -1\\n\\tab = 'AB'\\n\\tba = 'BA'\\n\\n\\tdef bbb():\\n\\t\\treturn aaa(ab, ba) or aaa(ba, ab)\\n\\tyes = 'YES'\\n\\tno = 'NO'\\n\\tans = [no, yes]\\n\\tans = ans[bbb()]\\n\\tprint(ans)\\nwhile tcid < tcmax:\\n\\ttcid += 1\\n\\tmainloop(tcid)\\n\", \"a = input()\\nb = a\\nflag1 = 0\\nflag2 = 0\\nif a.find('AB') != -1:\\n\\ta = a.replace('AB', '#', 1)\\n\\tif a.find('BA') != -1:\\n\\t\\tflag1 = 1\\nif b.find('BA') != -1:\\n\\tb = b.replace('BA', '#', 1)\\n\\tif b.find('AB') != -1:\\n\\t\\tflag2 = 1\\nif flag1 == 0 and flag2 == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\ntry:\\n\\ti1 = s.index('AB')\\n\\ti2 = s.index('BA')\\n\\tif abs(i1 - i2) == 1:\\n\\t\\ttry:\\n\\t\\t\\ts.index('AB', min(i1, i2) + 3)\\n\\t\\texcept ValueError:\\n\\t\\t\\ts.index('BA', min(i1, i2) + 3)\\n\\telif i1 < i2:\\n\\t\\ts.index('BA', i1 + 2)\\n\\telse:\\n\\t\\ts.index('AB', i2 + 2)\\n\\tprint('YES')\\nexcept ValueError:\\n\\tprint('NO')\\n\", \"data = input()\\n\\ndef run():\\n\\tfor index in range(len(data) - 1):\\n\\t\\tif data[index:index + 2] == 'AB':\\n\\t\\t\\tif data[index + 2:].count('BA') > 0:\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\tif data[index:index + 2] == 'BA':\\n\\t\\t\\tif data[index + 2:].count('AB') > 0:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(run())\\n\", \"n = input()\\na = n.find('AB')\\nb = n[a + 2:].find('BA')\\nc = n.find('BA')\\nd = n[c + 2:].find('AB')\\nprint('YES' if a >= 0 and b >= 0 or (c >= 0 and d >= 0) else 'NO  ')\\n\", \"s = input()\\na = None\\nb = None\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif a is None:\\n\\t\\t\\ta = i\\n\\t\\tif b is not None and abs(i - b) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif b is None:\\n\\t\\t\\tb = i\\n\\t\\tif a is not None and abs(a - i) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"def fd70000000():\\n\\ts = input()\\n\\trs = s\\n\\tAB = s.find('AB')\\n\\tsw = False\\n\\tif AB != -1:\\n\\t\\ts = s[:AB] + ' ' + s[AB + 2:]\\n\\t\\tAB = s.find('BA')\\n\\t\\tif AB != -1:\\n\\t\\t\\tsw = True\\n\\tAB = rs.rfind('AB')\\n\\tif AB != -1:\\n\\t\\trs = rs[:AB] + ' ' + rs[AB + 2:]\\n\\t\\tAB = rs.find('BA')\\n\\t\\tif AB != -1:\\n\\t\\t\\tsw = True\\n\\tif sw:\\n\\t\\treturn print('YES')\\n\\treturn print('NO')\\nfd70000000()\\n\", \"def main():\\n\\t(a, ab, ba) = ('*', [], [])\\n\\tfor (i, b) in enumerate(input()):\\n\\t\\tif a == 'A' and b == 'B':\\n\\t\\t\\tab.append(i)\\n\\t\\telif a == 'B' and b == 'A':\\n\\t\\t\\tba.append(i)\\n\\t\\ta = b\\n\\tprint(('NO', 'YES')[bool(ab and ba) and (ba[-1] - ab[0] > 1 or ab[-1] - ba[0] > 1)])\\nmain()\\n\", \"s = input()\\nx = s.find('AB')\\ny = s.find('BA', x + 2)\\ni = s.find('BA')\\nj = s.find('AB', i + 2)\\nif x > -1 and y > -1:\\n\\tprint('YES')\\nelif i > -1 and j > -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns_len = len(s)\\nresult = 'NO'\\nab = None\\nba = None\\nab2 = None\\nba2 = None\\nfor i in range(s_len - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (ab is None):\\n\\t\\tab = i + i + 1\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba = i + i + 1\\n\\t\\tif ab and abs(ab - ba) >= 4:\\n\\t\\t\\tresult = 'YES'\\n\\t\\t\\tbreak\\n\\tif s[i] == 'B' and s[i + 1] == 'A' and (ba2 is None):\\n\\t\\tba2 = i + i + 1\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab2 = i + i + 1\\n\\t\\tif ba2 and abs(ab2 - ba2) >= 4:\\n\\t\\t\\tresult = 'YES'\\n\\t\\t\\tbreak\\nprint(result)\\n\", \"s = input()\\n\\ndef isPresent(s, t):\\n\\tk = s.find(t)\\n\\tif k == -1:\\n\\t\\treturn False\\n\\tif s[:k].find(t[::-1]) == -1 and s[k + 2:].find(t[::-1]) == -1:\\n\\t\\treturn False\\n\\treturn True\\nif isPresent(s, 'AB') or isPresent(s, 'BA'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\na = 99999\\nb = 99999\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif a == 99999 or b == 99999:\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\ta = i\\n\\t\\telif s[i:i + 2] == 'BA':\\n\\t\\t\\tb = i\\n\\telif s[i:i + 2] == 'AB' and (not abs(i - b) < 2):\\n\\t\\ta = i\\n\\telif s[i:i + 2] == 'BA' and (not abs(a - i) < 2):\\n\\t\\tb = i\\n\\tif abs(a - b) >= 2 and (not a == 99999) and (not b == 99999):\\n\\t\\tbreak\\n\\ti += 1\\nif abs(a - b) >= 2 and (not a == 99999) and (not b == 99999):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\tct = s.index('AB')\\n\\td = 0\\n\\tif 'BA' in s[ct + 2:]:\\n\\t\\td = 1\\n\\telse:\\n\\t\\td = 0\\n\\tif d == 0:\\n\\t\\tct = s.index('BA')\\n\\t\\tif 'AB' in s[ct + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\tif d:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns1 = s.replace('AB', 'x', 1)\\ns2 = s.replace('BA', 'x', 1)\\nif len(s1) < len(s) and s1.find('BA') != -1:\\n\\tprint('YES')\\nelif len(s2) < len(s) and s2.find('AB') != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom math import ceil, floor, factorial\\n\\ndef swaparr(arr, a, b):\\n\\ttemp = arr[a]\\n\\tarr[a] = arr[b]\\n\\tarr[b] = temp\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b % a, a)\\n\\ndef nCr(n, k):\\n\\tif k > n - k:\\n\\t\\tk = n - k\\n\\tres = 1\\n\\tfor i in range(k):\\n\\t\\tres = res * (n - i)\\n\\t\\tres = res / (i + 1)\\n\\treturn int(res)\\n\\ndef upper_bound(a, x, lo=0):\\n\\thi = len(a)\\n\\twhile lo < hi:\\n\\t\\tmid = (lo + hi) // 2\\n\\t\\tif a[mid] < x:\\n\\t\\t\\tlo = mid + 1\\n\\t\\telse:\\n\\t\\t\\thi = mid\\n\\treturn lo\\n\\ndef primefs(n):\\n\\tprimes = {}\\n\\twhile n % 2 == 0:\\n\\t\\tprimes[2] = primes.get(2, 0) + 1\\n\\t\\tn = n // 2\\n\\tfor i in range(3, int(n ** 0.5) + 2, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tprimes[i] = primes.get(i, 0) + 1\\n\\t\\t\\tn = n // i\\n\\tif n > 2:\\n\\t\\tprimes[n] = primes.get(n, 0) + 1\\n\\treturn primes\\n\\ndef power(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef swap(a, b):\\n\\ttemp = a\\n\\ta = b\\n\\tb = temp\\n\\treturn (a, b)\\n\\ndef find(x, link):\\n\\tp = x\\n\\twhile p != link[p]:\\n\\t\\tp = link[p]\\n\\twhile x != p:\\n\\t\\tnex = link[x]\\n\\t\\tlink[x] = p\\n\\t\\tx = nex\\n\\treturn p\\n\\ndef union(x, y, link, size):\\n\\tx = find(x, link)\\n\\ty = find(y, link)\\n\\tif size[x] < size[y]:\\n\\t\\t(x, y) = swap(x, y)\\n\\tif x != y:\\n\\t\\tsize[x] += size[y]\\n\\t\\tlink[y] = x\\n\\ndef sieve(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\treturn prime\\nMAXN = int(1000000.0 + 5)\\n\\ndef spf_sieve():\\n\\tspf[1] = 1\\n\\tfor i in range(2, MAXN):\\n\\t\\tspf[i] = i\\n\\tfor i in range(4, MAXN, 2):\\n\\t\\tspf[i] = 2\\n\\tfor i in range(3, ceil(MAXN ** 0.5), 2):\\n\\t\\tif spf[i] == i:\\n\\t\\t\\tfor j in range(i * i, MAXN, i):\\n\\t\\t\\t\\tif spf[j] == j:\\n\\t\\t\\t\\t\\tspf[j] = i\\n\\ndef factoriazation(x):\\n\\tret = {}\\n\\twhile x != 1:\\n\\t\\tret[spf[x]] = ret.get(spf[x], 0) + 1\\n\\t\\tx = x // spf[x]\\n\\treturn ret\\n\\ndef int_array():\\n\\treturn list(map(int, input().strip().split()))\\n\\ndef str_array():\\n\\treturn input().strip().split()\\nMOD = int(1000000000.0) + 7\\nCMOD = 998244353\\nINF = float('inf')\\nNINF = -float('inf')\\ns = input().strip()\\nab = []\\nba = []\\nn = len(s)\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\ntry:\\n\\tif abs(min(ab) - max(ba)) > 1 or abs(max(ab) - min(ba)) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nexcept:\\n\\tprint('NO')\\n\", \"from itertools import accumulate\\n\\ndef bin_search(x, left, right, num_list):\\n\\tif right - left <= 1:\\n\\t\\tif x <= num_list[left]:\\n\\t\\t\\treturn left + 1\\n\\t\\telse:\\n\\t\\t\\treturn right + 1\\n\\telse:\\n\\t\\tmiddle = (left + right) // 2\\n\\t\\tif x < num_list[middle]:\\n\\t\\t\\treturn bin_search(x, left, middle, num_list)\\n\\t\\telif x > num_list[middle]:\\n\\t\\t\\treturn bin_search(x, middle + 1, right, num_list)\\n\\t\\telse:\\n\\t\\t\\treturn middle + 1\\ns = input()\\nif s.find('AB') >= 0 and s.find('BA') >= 0:\\n\\tif abs(s.find('AB') - s.rfind('BA')) >= 2 or abs(s.rfind('AB') - s.find('BA')) >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def solve():\\n\\ta = s.find('AB')\\n\\tb = s.rfind('AB')\\n\\tc = s.find('BA')\\n\\td = s.rfind('BA')\\n\\tfound = (abs(a - d) > 1 or abs(b - c) > 1) and min(a, b, c, d) >= 0\\n\\treturn 'NO YES'.split()[found]\\n\\ndef main():\\n\\tglobal s\\n\\ts = input()\\n\\tprint(solve())\\nmain()\\n\", \"s = input()\\na = b = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tif a == -1:\\n\\t\\t\\t\\ta = i\\n\\t\\t\\tif 0 <= b < i - 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\telif s[i] == 'B':\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tif b == -1:\\n\\t\\t\\t\\tb = i\\n\\t\\t\\tif 0 <= a < i - 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nab = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab += [i]\\nn = len(ab)\\nif n > 0:\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tif n == 1 and abs(ab[0] - i) == 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telif n == 2 and abs(ab[0] - ab[1]) == 2 and (i - ab[0] == 1):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif i - 1 not in ab or (i - 1 in ab and n > 1):\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\nprint('NO')\\n\", \"string = input()\\n(nAB, nBA) = (string.count('AB'), string.count('BA'))\\nif nAB == 0 or nBA == 0:\\n\\tprint('NO')\\n\\texit()\\n(dBA, dAB) = (-2, -2)\\nfor i in range(nAB):\\n\\tdAB = string.find('AB', dAB + 2)\\n\\tfor j in range(nBA):\\n\\t\\tdBA = string.find('BA', dBA + 2)\\n\\t\\tif abs(dBA - dAB) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\n\\tdBA = -2\\nprint('NO')\\n\", \"s = input()\\nans1 = []\\nans2 = []\\nif len(s) < 2:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(1, len(s)):\\n\\t\\tif s[i - 1] == 'A' and s[i] == 'B':\\n\\t\\t\\tans1.append('AB')\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\tfor e in range(i, len(s)):\\n\\t\\tif s[e - 1] == 'B' and s[e] == 'A':\\n\\t\\t\\tans1.append('BA')\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\tfor i in range(1, len(s)):\\n\\t\\tif s[i - 1] == 'B' and s[i] == 'A':\\n\\t\\t\\tans2.append('BA')\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\tfor e in range(i, len(s)):\\n\\t\\tif s[e - 1] == 'A' and s[e] == 'B':\\n\\t\\t\\tans2.append('AB')\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\tif ans1.count('AB') == 1 and ans1.count('BA') == 1 or (ans2.count('AB') == 1 and ans2.count('BA') == 1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\naf = s.find('AB')\\nae = s.rfind('AB')\\nbf = s.find('BA')\\nbe = s.rfind('BA')\\nif min(af, ae, bf, be) >= 0:\\n\\tif abs(af - be) > 1 or abs(ae - bf) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"import re\\ns = input()\\na1 = s.find('BA') + 1 < s.rfind('AB')\\na2 = s.find('AB') + 1 < s.rfind('BA')\\nprint('YES' if s.find('AB') >= 0 and s.find('BA') >= 0 and (a1 or a2) else 'NO')\\n\", \"s = input()\\np = list(s)\\nq = list(s)\\no = 0\\ne = 0\\nmark1 = 0\\nmark2 = 0\\nfor i in range(len(p) - 1):\\n\\tif mark1 == 0:\\n\\t\\tif p[i] == 'A' and p[i + 1] == 'B':\\n\\t\\t\\to += 1\\n\\t\\t\\tp[i] = 0\\n\\t\\t\\tp[i + 1] = 0\\n\\t\\t\\tmark1 += 1\\n\\tif mark1 != 0 and mark2 == 0:\\n\\t\\tif p[i] == 'B' and p[i + 1] == 'A':\\n\\t\\t\\to += 1\\n\\t\\t\\tp[i] = 0\\n\\t\\t\\tp[i + 1] = 0\\n\\t\\t\\tmark2 += 1\\nmark1 = 0\\nmark2 = 0\\nfor i in range(len(q) - 1):\\n\\tif mark1 == 0:\\n\\t\\tif q[i] == 'B' and q[i + 1] == 'A':\\n\\t\\t\\te += 1\\n\\t\\t\\tq[i] = 0\\n\\t\\t\\tq[i + 1] = 0\\n\\t\\t\\tmark1 += 1\\n\\tif mark1 != 0 and mark2 == 0:\\n\\t\\tif q[i] == 'A' and q[i + 1] == 'B':\\n\\t\\t\\te += 1\\n\\t\\t\\tq[i] = 0\\n\\t\\t\\tq[i + 1] = 0\\n\\t\\t\\tmark2 += 1\\nif e == 2 or o == 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ni = 0\\n(AB, BA) = (0, 0)\\nff = True\\ndd = True\\nover = 0\\nwhile i <= len(s) - 2:\\n\\tif s[i:i + 3] == 'ABA' or s[i:i + 3] == 'BAB':\\n\\t\\ti += 3\\n\\t\\tover += 1\\n\\tif s[i:i + 2] == 'AB' and ff == True:\\n\\t\\ti += 2\\n\\t\\tAB = 1\\n\\t\\tff = False\\n\\telif s[i:i + 2] == 'BA' and dd == True:\\n\\t\\tBA = 1\\n\\t\\ti += 2\\n\\t\\tdd = False\\n\\telse:\\n\\t\\ti += 1\\nif AB == 1 and BA == 1 or (AB == 1 and over >= 1) or (BA == 1 and over >= 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ninput = lambda : sys.stdin.readline()\\nint_arr = lambda : list(map(int, input().split()))\\nstr_arr = lambda : list(map(str, input().split()))\\nget_str = lambda : map(str, input().split())\\nget_int = lambda : map(int, input().split())\\nget_flo = lambda : map(float, input().split())\\nmod = 1000000007\\n\\ndef solve(s):\\n\\tff = 0\\n\\tif 'AB' in s and 'BA' in s:\\n\\t\\tab = s.find('AB') + 2\\n\\t\\tif s[ab:].find('BA') != -1:\\n\\t\\t\\tff = 1\\n\\t\\tba = s.find('BA') + 2\\n\\t\\tif s[ba:].find('AB') != -1:\\n\\t\\t\\tff = 1\\n\\t\\tif ff:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\ns = str(input())\\nsolve(s)\\n\", \"word = input()\\nn = len(word)\\nab = []\\nba = []\\nfor i in range(0, n - 1):\\n\\tif word[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif word[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nif len(ab) >= 1 and len(ba) >= 1 and (len(ab) + len(ba) >= 4):\\n\\tprint('YES')\\nelif len(ab) == 1 and len(ba) == 1 and (abs(ab[0] - ba[0]) != 1):\\n\\tprint('YES')\\nelif len(ab) >= 2 and len(ba) == 1 and (abs(ab[0] - ba[0]) != 1 or abs(ab[1] - ba[0]) != 1):\\n\\tprint('YES')\\nelif len(ab) == 1 and len(ba) >= 2 and (abs(ab[0] - ba[0]) != 1 or abs(ab[0] - ba[1]) != 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def isValid(i):\\n\\tc1 = s[i]\\n\\tc2 = s[i - 1]\\n\\tc3 = s[i - 2]\\n\\tdp_AB[i] = dp_AB[i - 1]\\n\\tdp_BA[i] = dp_BA[i - 1]\\n\\tif c1 == 'A':\\n\\t\\tif c2 == 'B':\\n\\t\\t\\tif c3 == 'A':\\n\\t\\t\\t\\tif dp_AB[i - 3] or dp_BA[i - 3]:\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t(dp_AB[i], dp_BA[i]) = (True, True)\\n\\t\\t\\telif dp_AB[i - 2]:\\n\\t\\t\\t\\treturn True\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp_BA[i] = True\\n\\telif c1 == 'B':\\n\\t\\tif c2 == 'A':\\n\\t\\t\\tif c3 == 'B':\\n\\t\\t\\t\\tif dp_AB[i - 3] or dp_BA[i - 3]:\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t(dp_AB[i], dp_BA[i]) = (True, True)\\n\\t\\t\\telif dp_BA[i - 2]:\\n\\t\\t\\t\\treturn True\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp_AB[i] = True\\n\\treturn False\\ns = input()\\nif len(s) < 4:\\n\\tprint('NO')\\nelif len(s) == 4:\\n\\tif s == 'ABBA' or s == 'BAAB':\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tdp_AB = [False] * len(s)\\n\\tdp_BA = [False] * len(s)\\n\\tfor i in range(1, 4):\\n\\t\\tdp_AB[i] = 'AB' in s[:i + 1]\\n\\t\\tdp_BA[i] = 'BA' in s[:i + 1]\\n\\tfor i in range(4, len(s)):\\n\\t\\tif isValid(i):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import math\\ns = input()\\nb = False\\nA = -5\\nB = -5\\nA1 = len(s)\\nB1 = len(s)\\nn = len(s)\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tA = i\\n\\tif s[n - i - 2] == 'B' and s[n - i - 1] == 'A':\\n\\t\\tB = n - i - 2\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tB1 = i\\n\\tif s[n - i - 2] == 'A' and s[n - i - 1] == 'B':\\n\\t\\tA1 = n - i - 2\\nif A == -5 or B == -5:\\n\\tprint('NO')\\nelif math.fabs(A - B) != 1:\\n\\tprint('YES')\\nelif math.fabs(A1 - B1) != 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ncnt_a = 0\\ncnt_b = 0\\ncnt_c = 0\\ncnt_d = 0\\na = 'AB'\\nb = 'BA'\\nc = 'ABA'\\nd = 'BAB'\\ncnt_a = s.count(a)\\ncnt_b = s.count(b)\\ncnt_c = s.count(c)\\ncnt_d = s.count(d)\\nif cnt_a != 0 and cnt_b != 0:\\n\\tif cnt_a + cnt_b - (cnt_c + cnt_d) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(AB, BA, BOTH) = (False, False, False)\\nindex = 0\\nfor i in range(len(s)):\\n\\tif s[i:i + 3] == 'ABA' or s[i:i + 3] == 'BAB':\\n\\t\\tindex = i\\n\\t\\tBOTH = True\\n\\t\\tbreak\\n\\telif s[i:i + 2] == 'AB':\\n\\t\\tindex = i\\n\\t\\tAB = True\\n\\t\\tbreak\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tindex = i\\n\\t\\tBA = True\\n\\t\\tbreak\\nif AB or BA or BOTH:\\n\\tfor j in range(len(s)):\\n\\t\\tif BOTH and j > index + 2:\\n\\t\\t\\tif s[j:j + 2] == 'AB' or s[j:j + 2] == 'BA':\\n\\t\\t\\t\\t(AB, BA) = (True, True)\\n\\t\\t\\t\\tbreak\\n\\t\\telif AB and j > index + 1 and (s[j:j + 2] == 'BA'):\\n\\t\\t\\tBA = True\\n\\t\\t\\tbreak\\n\\t\\telif BA and j > index + 1 and (s[j:j + 2] == 'AB'):\\n\\t\\t\\tAB = True\\n\\t\\t\\tbreak\\nif AB and BA:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nfor pattern in [('AB', 'BA'), ('BA', 'AB')]:\\n\\tfound1 = False\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tsub = s[i:i + 2]\\n\\t\\tif sub == pattern[0] and (not found1):\\n\\t\\t\\tfound1 = True\\n\\t\\t\\ti += 1\\n\\t\\telif sub == pattern[1] and found1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\n\\t\\ti += 1\\nprint('NO')\\n\", \"arr = input()\\nn = len(arr)\\nab = 0\\nba = 0\\nab2 = 0\\nba2 = 0\\ncheck = 0\\nmark = [0 for _ in range(n)]\\nmark2 = [0 for _ in range(n)]\\nfor i in range(n - 1):\\n\\tif arr[i] == 'A' and arr[i + 1] == 'B' and (ab == 0):\\n\\t\\tif mark[i] == 0 and mark[i + 1] == 0:\\n\\t\\t\\tab += 1\\n\\t\\t\\tmark[i] = 1\\n\\t\\t\\tmark[i + 1] = 1\\n\\telif arr[i] == 'B' and arr[i + 1] == 'A' and (ba == 0):\\n\\t\\tif mark[i] == 0 and mark[i + 1] == 0:\\n\\t\\t\\tba += 1\\n\\t\\t\\tmark[i] = 1\\n\\t\\t\\tmark[i + 1] = 1\\n\\tif arr[n - 2 - i] == 'A' and arr[n - 1 - i] == 'B' and (ab2 == 0):\\n\\t\\tif mark2[n - 2 - i] == 0 and mark2[n - 1 - i] == 0:\\n\\t\\t\\tab2 += 1\\n\\t\\t\\tmark2[n - 2 - i] = 1\\n\\t\\t\\tmark2[n - 1 - i] = 1\\n\\telif arr[n - 2 - i] == 'B' and arr[n - 1 - i] == 'A' and (ba2 == 0):\\n\\t\\tif mark2[n - 2 - i] == 0 and mark2[n - 1 - i] == 0:\\n\\t\\t\\tba2 += 1\\n\\t\\t\\tmark2[n - 2 - i] = 1\\n\\t\\t\\tmark2[n - 1 - i] = 1\\nif ab == ba == 1 or ab2 == ba2 == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ncrossing = 0\\nab = 0\\nba = 0\\nn = len(s)\\ni = 0\\nwhile i < n - 1:\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tif s[i + 1:i + 3] == 'BA':\\n\\t\\t\\tcrossing += 1\\n\\t\\t\\ti += 3\\n\\t\\telse:\\n\\t\\t\\tab += 1\\n\\t\\t\\ti += 1\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tif s[i + 1:i + 3] == 'AB':\\n\\t\\t\\tcrossing += 1\\n\\t\\t\\ti += 3\\n\\t\\telse:\\n\\t\\t\\tba += 1\\n\\t\\t\\ti += 1\\n\\telse:\\n\\t\\ti += 1\\nif ab > 0 and ba > 0 or (ab > 0 and crossing > 0) or (ba > 0 and crossing > 0) or (crossing > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import re\\nstring1 = input()\\nflag = 0\\ntry:\\n\\tc = [m.start() for m in re.finditer('AB', string1)]\\n\\td = [m.start() for m in re.finditer('BA', string1)]\\n\\tfor c1 in c:\\n\\t\\tfor d1 in d:\\n\\t\\t\\tif d1 - c1 > 1 or c1 - d1 > 1:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 1:\\n\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nexcept:\\n\\tprint('NO')\\n\", \"s = input()\\nfor x in range(len(s) - 1):\\n\\tif s[x] == 'A' and s[x + 1] == 'B':\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\\tquit()\\nfor y in range(x + 2, len(s) - 1):\\n\\tif s[y] == 'B' and s[y + 1] == 'A':\\n\\t\\tprint('YES')\\n\\t\\tquit()\\nfor a in range(len(s) - 1):\\n\\tif s[a] == 'B' and s[a + 1] == 'A':\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\\tquit()\\nfor b in range(a + 2, len(s) - 1):\\n\\tif s[b] == 'A' and s[b + 1] == 'B':\\n\\t\\tprint('YES')\\n\\t\\tquit()\\nprint('NO')\\n\", \"import re\\ns = input()\\np1 = [m.start() for m in re.finditer('AB', s)]\\np2 = [m.start() for m in re.finditer('BA', s)]\\nif p1 and p2:\\n\\tfound = False\\n\\tfor i in p1:\\n\\t\\tif found:\\n\\t\\t\\tbreak\\n\\t\\tfor j in p2:\\n\\t\\t\\tif not found and abs(i - j) >= 2:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\tbreak\\n\\tif not found:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nL1 = []\\nL2 = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tL1.append(i)\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tL2.append(i)\\nflag = True\\ni = 0\\nwhile i < len(L1) and flag:\\n\\tj = 0\\n\\twhile j < len(L2) and flag:\\n\\t\\tif abs(L2[j] - L1[i]) > 1:\\n\\t\\t\\tflag = False\\n\\t\\tj = j + 1\\n\\ti = i + 1\\nif flag == False:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nu = s.find('AB')\\nv = s.find('BA')\\nif u + 1 and s.find('BA', u + 2) != -1:\\n\\tprint('YES')\\nelif v + 1 and s.find('AB', v + 2) != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nok = False\\np = s.replace('AB', 'OO', 1)\\nif 'BA' in p and 'AB' in s:\\n\\tok = True\\np = s.replace('BA', 'OO', 1)\\nif 'AB' in p and 'BA' in s:\\n\\tok = True\\nprint('YES' if ok else 'NO')\\n\", \"a = input()\\ni = 0\\nb = 0\\nA = 0\\nB = 0\\nwhile i < len(a):\\n\\tif a[i:i + 3] == 'ABA' or a[i:i + 3] == 'BAB':\\n\\t\\tb += 1\\n\\t\\ti += 3\\n\\telif a[i:i + 2] == 'AB':\\n\\t\\tA += 1\\n\\t\\ti += 2\\n\\telif a[i:i + 2] == 'BA':\\n\\t\\tB += 1\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\nif b > 1:\\n\\tprint('YES')\\nelif b > 0 and (A > 0 or B > 0):\\n\\tprint('YES')\\nelif A > 0 and B > 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nAB = [x for x in range(len(s) - 1) if s[x] + s[x + 1] == 'AB']\\nBA = [x for x in range(len(s) - 1) if s[x] + s[x + 1] == 'BA']\\ntry:\\n\\tprint('YES' if AB[0] + 1 < BA[-1] or BA[0] + 1 < AB[-1] else 'NO')\\nexcept IndexError:\\n\\tprint('NO')\\n\", \"s = input()\\nprev = s[0]\\ncond = False\\nfor i in range(1, len(s)):\\n\\tif prev + s[i] == 'AB':\\n\\t\\tcond = 'BA' in s[0:i - 1] + '  ' + s[i + 1:len(s)]\\n\\telif prev + s[i] == 'BA':\\n\\t\\tcond = 'AB' in s[0:i - 1] + '  ' + s[i + 1:len(s)]\\n\\tprev = s[i]\\n\\tif cond:\\n\\t\\tbreak\\nprint(['NO', 'YES'][cond])\\n\", \"s = input()\\nflag = False\\nif 'AB' in s:\\n\\ts1 = s.replace('AB', ' ', 1)\\n\\tif 'BA' in s1:\\n\\t\\tflag = True\\nif 'BA' in s:\\n\\ts2 = s.replace('BA', ' ', 1)\\n\\tif 'AB' in s2:\\n\\t\\tflag = True\\nif flag == False:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"class CodeforcesTask550ASolution:\\n\\n\\tdef __init__(self):\\n\\t\\tself.result = ''\\n\\t\\tself.string = ''\\n\\n\\tdef read_input(self):\\n\\t\\tself.string = input()\\n\\n\\tdef process_task(self):\\n\\t\\tif 'AB' in self.string and 'BA' in self.string:\\n\\t\\t\\tif 'BA' in self.string.replace('AB', '__', 1):\\n\\t\\t\\t\\tself.result = 'YES'\\n\\t\\t\\telif 'AB' in self.string.replace('BA', '__', 1):\\n\\t\\t\\t\\tself.result = 'YES'\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself.result = 'NO'\\n\\t\\telse:\\n\\t\\t\\tself.result = 'NO'\\n\\n\\tdef get_result(self):\\n\\t\\treturn self.result\\nSolution = CodeforcesTask550ASolution()\\nSolution.read_input()\\nSolution.process_task()\\nprint(Solution.get_result())\\n\", \"i = input()\\nt = 0\\nfor j in range(len(i) - 1):\\n\\tif i[j] + i[j + 1] == 'AB':\\n\\t\\tif j + 2 < len(i):\\n\\t\\t\\tif 'BA' in i[j + 2:]:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tt = 1\\n\\t\\t\\t\\tbreak\\nif t == 0:\\n\\tfor j in range(len(i) - 1):\\n\\t\\tif i[j] + i[j + 1] == 'BA':\\n\\t\\t\\tif j + 2 < len(i):\\n\\t\\t\\t\\tif 'AB' in i[j + 2:]:\\n\\t\\t\\t\\t\\tt = 1\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\tbreak\\nif t == 0:\\n\\tprint('NO')\\n\", \"s = input()\\nl1 = s.find('AB')\\nr1 = s.rfind('BA')\\nl2 = s.find('BA')\\nr2 = s.rfind('AB')\\nif l1 >= 0 and r1 >= 0 and (l1 - r1 > 1 or l1 - r1 < -1) or (l2 >= 0 and r2 >= 0 and (l2 - r2 > 1 or l2 - r2 < -1)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"k = input()\\nj = k\\nj = j.replace('AB', '*', 1)\\nj = j.replace('BA', '^', 1)\\nif '*' in j and '^' in j:\\n\\tprint('YES')\\n\\texit(0)\\nj = k\\nj = j.replace('BA', '*', 1)\\nj = j.replace('AB', '^', 1)\\nif '*' in j and '^' in j:\\n\\tprint('YES')\\n\\texit(0)\\nprint('NO')\\n\", \"s = input()\\nl = len(s)\\nlba = []\\nlab = []\\nfor i in range(l - 1):\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tlba.append(i)\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tlab.append(i)\\nif len(lab) == 0 or len(lba) == 0:\\n\\tprint('NO')\\nelif abs(lba[0] - lab[-1]) >= 2 or abs(lba[0] - lab[0]) >= 2 or abs(lba[-1] - lab[0]) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n_AB = 0\\n_BA = 0\\nflag = 0\\nn = len(s)\\ni = 0\\nwhile i < n:\\n\\tif s[i] == 'A':\\n\\t\\tif i + 1 < n and s[i + 1] == 'B':\\n\\t\\t\\t_AB = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\ti += 1\\nwhile i < n:\\n\\tif s[i] == 'B':\\n\\t\\tif i + 1 < n and s[i + 1] == 'A':\\n\\t\\t\\t_BA = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\ti += 1\\nif _AB and _BA:\\n\\tprint('YES')\\n\\tflag = 1\\n_AB = 0\\n_BA = 0\\ni = 0\\nwhile i < n:\\n\\tif s[i] == 'B':\\n\\t\\tif i + 1 < n and s[i + 1] == 'A':\\n\\t\\t\\t_AB = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\ti += 1\\nwhile i < n:\\n\\tif s[i] == 'A':\\n\\t\\tif i + 1 < n and s[i + 1] == 'B':\\n\\t\\t\\t_BA = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\ti += 1\\nif flag == 0:\\n\\tif _AB and _BA:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import re\\na = input()\\nb = a\\nflag = 0\\nif 'AB' in a:\\n\\ta = re.sub('AB', ' ', a, 1)\\n\\tif 'BA' in a:\\n\\t\\tflag = 1\\nif 'BA' in b:\\n\\tb = re.sub('BA', ' ', b, 1)\\n\\tif 'AB' in b:\\n\\t\\tflag = 1\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif 'AB' in s:\\n\\ts1 = s.replace('AB', 'X', 1)\\n\\tif 'BA' in s1:\\n\\t\\tprint('YES')\\n\\telif 'BA' in s:\\n\\t\\ts1 = s.replace('BA', 'X', 1)\\n\\t\\tif 'AB' in s1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\npass\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\tif s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB') >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\nab = s.find('AB')\\nba = s.find('BA')\\nif ab != -1 and s.find('BA', ab + 2) != -1 or (ba != -1 and s.find('AB', ba + 2) != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def main():\\n\\n\\tdef isin(s, t):\\n\\t\\tres = []\\n\\t\\tfor i in range(len(s) - 1):\\n\\t\\t\\tif s[i:i + 2] == t:\\n\\t\\t\\t\\tres.append(i)\\n\\t\\treturn res\\n\\ts = input()\\n\\tab = isin(s, 'AB')\\n\\tba = isin(s, 'BA')\\n\\tif len(ab) == 0 or len(ba) == 0:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tfor a in ab:\\n\\t\\t\\tfor b in ba:\\n\\t\\t\\t\\tif abs(a - b) >= 2:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\texit()\\n\\t\\tprint('NO')\\nmain()\\n\", \"string = input()\\nif string.find('AB') == -1 or string.find('BA') == -1:\\n\\tprint('NO')\\nelif string.find('AB', string.find('BA') + 2) != -1 or string.find('BA', string.find('AB') + 2) != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nans = []\\ngans = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tans.append(i)\\n\\tif s[i] == 'B':\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tgans.append(i)\\nif min(len(ans), len(gans)) == 0:\\n\\tprint('NO')\\n\\texit()\\nif abs(gans[-1] - ans[0]) > 1 or abs(gans[0] - ans[-1]) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nl = s.find('AB')\\nl1 = s.find('BA')\\nr = s.rfind('BA')\\nr1 = s.rfind('AB')\\nif l == -1 or r == -1:\\n\\tprint('NO')\\nelif r - l > 1 or r1 - l1 > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def search_podstroki(s, t):\\n\\tt1 = t + '$' + s\\n\\tp = [-1] * len(t1)\\n\\tprefix(t1, p)\\n\\tc1 = 0\\n\\tfor i in range(1, len(t1)):\\n\\t\\tif p[i] == len(t) - 1:\\n\\t\\t\\tc1 = -1\\n\\t\\t\\treturn i - len(t) - 1\\n\\tif c1 != -1:\\n\\t\\treturn False\\n\\ndef prefix(t, p):\\n\\tk = 0\\n\\tfor i in range(1, len(t)):\\n\\t\\tk = p[i - 1]\\n\\t\\twhile k >= 0 and t[k + 1] != t[i]:\\n\\t\\t\\tk = p[k]\\n\\t\\tif t[k + 1] == t[i]:\\n\\t\\t\\tk = k + 1\\n\\t\\tp[i] = k\\ns = input()\\ns1 = 'AB'\\ns2 = 'BA'\\nr = search_podstroki(s, s1)\\nif r == False:\\n\\tprint('NO')\\nelse:\\n\\ts3 = s[r + 1:]\\n\\te = search_podstroki(s3, s2)\\n\\tif e == False:\\n\\t\\tr = search_podstroki(s, s2)\\n\\t\\tif r == False:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\ts3 = s[r + 1:]\\n\\t\\t\\te = search_podstroki(s3, s1)\\n\\t\\t\\tif e == False:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"def run():\\n\\timport sys\\n\\tsys.stdin = open('/home/punit/Documents/Cpp Programs/input.txt', 'r')\\n\\tsys.stdout = open('/home/punit/Documents/Cpp Programs/output.txt', 'w')\\n\\tfrom math import ceil, sqrt, floor\\ns = input()\\nflag1 = 0\\nj = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tflag1 += 1\\n\\t\\tj = i + 2\\n\\t\\tbreak\\nfor i in range(j, len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tflag1 += 1\\n\\t\\tbreak\\nflag2 = 0\\nj = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tflag2 += 1\\n\\t\\tj = i + 2\\n\\t\\tbreak\\nfor i in range(j, len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tflag2 += 1\\n\\t\\tbreak\\nif flag2 == 2 or flag1 == 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nABfirst = s.find('AB')\\nBAfirst = s.find('BA')\\nif ABfirst == -1 or BAfirst == -1:\\n\\tprint('NO')\\nelif abs(ABfirst - BAfirst) > 1:\\n\\tprint('YES')\\nelse:\\n\\tnext_pos = min(ABfirst, BAfirst) + 3\\n\\tif s.find('AB', next_pos) >= 0 or s.find('BA', next_pos) >= 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nx = s.find('AB')\\nif x == -1:\\n\\tprint('NO')\\nelse:\\n\\tk = s.replace('AB', 'l', 1)\\n\\ty = k.find('BA')\\n\\tif y == -1:\\n\\t\\tx = s.find('BA')\\n\\t\\tif x == -1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tk = s.replace('BA', 'l', 1)\\n\\t\\t\\ty = k.find('AB')\\n\\t\\t\\tif y == -1:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"s = input()\\nn = len(s)\\nab = []\\nba = []\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nfor x in ab:\\n\\tfor y in ba:\\n\\t\\tif y + 1 < x or x + 1 < y:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nl = len(s)\\na = 0\\nb = 0\\nfor i in range(l - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta += 1\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb += 1\\nr = 'YES'\\nif a * b == 0:\\n\\tr = 'NO'\\nif a == b == 1:\\n\\tif 'ABA' in s or 'BAB' in s:\\n\\t\\tr = 'NO'\\nif a == 1 and b == 2 or (a == 2 and b == 1):\\n\\tif 'ABAB' in s or 'BABA' in s:\\n\\t\\tr = 'NO'\\nprint(r)\\n\", \"s = input()\\nsucc = False\\nx = s.find('AB')\\nif x != -1:\\n\\tz = s[:x].find('BA')\\n\\ty = s[x + 2:].find('BA')\\n\\tif z != -1 or y != -1:\\n\\t\\tsucc = True\\nx = s.find('BA')\\nif x != -1:\\n\\tz = s[:x].find('AB')\\n\\ty = s[x + 2:].find('AB')\\n\\tif z != -1 or y != -1:\\n\\t\\tsucc = True\\nprint(['NO', 'YES'][succ])\\n\", \"a = input()\\nc = int(0)\\nd = int(0)\\ne = int(0)\\nf = int(0)\\nfor i in range(len(a) - 1):\\n\\tif a[i] + a[i + 1] == 'AB':\\n\\t\\tc = i + 1\\n\\t\\tbreak\\nfor i in range(len(a) - 2, -1, -1):\\n\\tif a[i] + a[i + 1] == 'BA':\\n\\t\\td = i + 1\\n\\t\\tbreak\\nfor i in range(len(a) - 2, -1, -1):\\n\\tif a[i] + a[i + 1] == 'AB':\\n\\t\\te = i + 1\\n\\t\\tbreak\\nfor i in range(len(a) - 1):\\n\\tif a[i] + a[i + 1] == 'BA':\\n\\t\\tf = i + 1\\n\\t\\tbreak\\nif max(abs(c - d), max(abs(c - f), max(abs(e - d), abs(e - f)))) > 1 and (c > 0 and d > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ni1 = s.find('AB')\\ni2 = s.find('BA')\\nfound = False\\nif i1 >= 0:\\n\\ti3 = s.find('BA', i1 + 2)\\n\\tif i3 != -1:\\n\\t\\tprint('YES')\\n\\t\\tfound = True\\nif not found and i2 >= 0:\\n\\ti3 = s.find('AB', i2 + 2)\\n\\tif i3 != -1:\\n\\t\\tprint('YES')\\n\\t\\tfound = True\\nif not found:\\n\\tprint('NO')\\n\", \"from __future__ import division, print_function\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nimport re\\nfrom bisect import *\\nfrom math import floor, sqrt, ceil, factorial as F, gcd, pi, log\\nfrom itertools import chain, combinations, permutations, accumulate\\nfrom collections import Counter, defaultdict, OrderedDict, deque\\nfrom functools import cmp_to_key, reduce\\nINT_MAX = sys.maxsize\\nINT_MIN = -sys.maxsize - 1\\nmod = 1000000007\\nch = 'abcdefghijklmnopqrstuvwxyz'\\nlcm = lambda a, b: a * b // gcd(a, b)\\nsetbit = lambda x: bin(x)[2:].count('1')\\nif sys.version_info[0] < 3:\\n\\tfrom __builtin__ import xrange as range\\n\\tfrom future_builtins import ascii, filter, hex, map, oct, zip\\n\\ndef solve():\\n\\ts = input()\\n\\t(ab, ba) = (s.find('AB'), s.find('BA'))\\n\\tprint('YES' if ab + 1 and s.find('BA', ab + 2) + 1 or (ba + 1 and s.find('AB', ba + 2) + 1) else 'NO')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nsolve()\\n\", \"s = input()\\nif len(s) < 4:\\n\\tprint('NO')\\n\\texit(0)\\nk_AB = 0\\nk_A = 0\\nk_B = 0\\nfor i in range(len(s) - 2):\\n\\tif s[i] + s[i + 1] + s[i + 2] == 'ABA' or s[i] + s[i + 1] + s[i + 2] == 'BAB':\\n\\t\\tk_AB += 1\\n\\t\\ts = s[:i] + '000' + s[i + 3:]\\n\\t\\tbuf = i\\nif k_AB == 1:\\n\\ts = s[:buf] + s[buf + 3:]\\nif k_AB > 1:\\n\\tprint('YES')\\nelse:\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\t\\tk_A += 1\\n\\t\\telif s[i] + s[i + 1] == 'BA':\\n\\t\\t\\tk_B += 1\\n\\tif k_AB > 2 or (k_AB == 1 and k_A + k_B > 0) or (k_AB == 0 and k_A > 0 and (k_B > 0)):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nif n == 1 or n == 2 or n == 3:\\n\\tprint('NO')\\nelse:\\n\\tcnt1 = 0\\n\\tcnt2 = 0\\n\\ti = 0\\n\\tind1 = []\\n\\tind2 = []\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tcnt1 += 1\\n\\t\\t\\tind1.append(i)\\n\\t\\t\\ti += 1\\n\\t\\ti += 1\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tcnt2 += 1\\n\\t\\t\\tind2.append(i)\\n\\t\\t\\ti += 1\\n\\t\\ti += 1\\n\\tif cnt1 * cnt2 > 0:\\n\\t\\tf = 0\\n\\t\\tfor i in range(len(ind1)):\\n\\t\\t\\tfor j in range(len(ind2)):\\n\\t\\t\\t\\tif abs(ind1[i] - ind2[j]) > 1:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif f == 1:\\n\\t\\t\\t\\tbreak\\n\\t\\tif f == 1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"n = input()\\nab = -1\\nba = -1\\nfound = False\\nfor i in range(len(n) - 1):\\n\\tcheck = n[i:i + 2]\\n\\tif check == 'AB':\\n\\t\\tif ba > -1 and ba != i - 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tfound = True\\n\\t\\t\\tbreak\\n\\t\\telif ab == -1:\\n\\t\\t\\tab = i\\n\\telif check == 'BA':\\n\\t\\tif ab > -1 and ab != i - 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tfound = True\\n\\t\\t\\tbreak\\n\\t\\telif ba == -1:\\n\\t\\t\\tba = i\\nif found == False:\\n\\tprint('NO')\\n\", \"s = input()\\n\\ndef findPattern():\\n\\tans = ''\\n\\tba_pos = s.find('BA')\\n\\tab_pos = s.find('AB')\\n\\tif ab_pos != -1:\\n\\t\\ts_new = s[ab_pos + 2:]\\n\\t\\tif s_new.find('BA') != -1:\\n\\t\\t\\tans = 'YES'\\n\\t\\telse:\\n\\t\\t\\tans = 'NO'\\n\\telse:\\n\\t\\tans = 'NO'\\n\\tif ba_pos != -1 and ans == 'NO':\\n\\t\\ts_new = s[ba_pos + 2:]\\n\\t\\tif s_new.find('AB') != -1:\\n\\t\\t\\tans = 'YES'\\n\\t\\telse:\\n\\t\\t\\tans = 'NO'\\n\\treturn ans\\nprint(findPattern())\\n\", \"s = input()\\nf = 'NO'\\nif 'AB' in s:\\n\\tk = s.index('AB')\\n\\tfor i in range(k + 2, len(s) - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tf = 'YES'\\n\\t\\t\\tbreak\\n\\tif f == 'NO':\\n\\t\\tfor i in range(k - 1):\\n\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tf = 'YES'\\n\\t\\t\\t\\tbreak\\nif 'BA' in s and f == 'NO':\\n\\tk = s.index('BA')\\n\\tfor i in range(k + 2, len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tf = 'YES'\\n\\t\\t\\tbreak\\n\\tif f == 'NO':\\n\\t\\tfor i in range(k - 1):\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\tf = 'YES'\\n\\t\\t\\t\\tbreak\\nprint(f)\\n\", \"string = input()\\nk1 = 0\\ni = 0\\nk2 = 0\\nk3 = 0\\nk4 = 0\\nfor i in range(len(string) - 1):\\n\\tif string[i] == 'A' and string[i + 1] == 'B':\\n\\t\\tif i > 0 and string[i - 1] == 'B':\\n\\t\\t\\tk3 += 1\\n\\t\\telse:\\n\\t\\t\\tk1 += 1\\n\\telif string[i] == 'B' and string[i + 1] == 'A':\\n\\t\\tif i > 0 and string[i - 1] == 'A':\\n\\t\\t\\tk4 += 1\\n\\t\\telse:\\n\\t\\t\\tk2 += 1\\nif k1 >= 1 and k2 >= 1:\\n\\tprint('YES')\\nelif k1 >= 2 and k4 >= 1:\\n\\tprint('YES')\\nelif k2 >= 2 and k3 >= 1:\\n\\tprint('YES')\\nelif max(k3, k4) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nprint('YES' if s.find('AB') >= 0 and s[s.find('AB') + 2:].find('BA') >= 0 or (s.find('BA') >= 0 and s[s.find('BA') + 2:].find('AB') >= 0) else 'NO')\\n\", \"a = input()\\nif 'AB' in a:\\n\\tif 'BA' in a[a.index('AB') + 2:]:\\n\\t\\texit(print('YES'))\\nif 'BA' in a:\\n\\tif 'AB' in a[a.index('BA') + 2:]:\\n\\t\\texit(print('YES'))\\nprint('NO')\\n\", \"(z, zz) = (input, lambda : list(map(int, z().split())))\\nzzz = lambda : [int(i) for i in stdin.readline().split()]\\n(szz, graph, mod, szzz) = (lambda : sorted(zz()), {}, 10 ** 9 + 7, lambda : sorted(zzz()))\\nfrom string import *\\nfrom re import *\\nfrom collections import *\\nfrom queue import *\\nfrom sys import *\\nfrom collections import *\\nfrom math import *\\nfrom heapq import *\\nfrom itertools import *\\nfrom bisect import *\\nfrom collections import Counter as cc\\nfrom math import factorial as f\\nfrom bisect import bisect as bs\\nfrom bisect import bisect_left as bsl\\nfrom itertools import accumulate as ac\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\n\\ndef prime(x):\\n\\tp = ceil(x ** 0.5) + 1\\n\\tfor i in range(2, p):\\n\\t\\tif x % i == 0 and x != 2 or x == 0:\\n\\t\\t\\treturn 0\\n\\treturn 1\\n\\ndef dfs(u, visit, graph):\\n\\tvisit[u] = True\\n\\tfor i in graph[u]:\\n\\t\\tif not visit[i]:\\n\\t\\t\\tdfs(i, visit, graph)\\nl = z()\\na = l.count('AB')\\nb = l.count('BA')\\nc = l.count('ABA')\\nd = l.count('BAB')\\nif a == 0 or b == 0:\\n\\tprint('NO')\\n\\texit()\\nif a + b - c - d >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"i = input()\\nl = len(i)\\npos_ab = []\\npos_ba = []\\nfor x in range(l - 1):\\n\\tif i[x:x + 2] == 'AB':\\n\\t\\tpos_ab.append(x)\\n\\telif i[x:x + 2] == 'BA':\\n\\t\\tpos_ba.append(x)\\ndone = False\\nfor p in pos_ab:\\n\\tfor p2 in pos_ba:\\n\\t\\tif abs(p - p2) >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tdone = True\\n\\t\\t\\tbreak\\n\\tif done:\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"import sys, io, os, time\\nfrom collections import defaultdict\\nfrom collections import OrderedDict\\nfrom collections import deque\\nfrom itertools import combinations\\nfrom itertools import permutations\\nimport bisect, math, heapq\\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\\ninput = sys.stdin.readline\\ns = input()\\nn = len(s)\\nif n < 4:\\n\\tprint('NO')\\n\\texit()\\n\\ndef check(a):\\n\\tind = -1\\n\\tind3 = -1\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == a[0] and s[i + 1] == a[1]:\\n\\t\\t\\tind3 = i\\n\\t\\t\\tind = i + 1\\n\\t\\t\\tbreak\\n\\tind2 = -1\\n\\tind4 = -1\\n\\tk = i + 1\\n\\tfor i in range(k, n - 1):\\n\\t\\tif s[i] == a[1] and s[i + 1] == a[0]:\\n\\t\\t\\tind4 = i + 1\\n\\t\\t\\tind2 = i\\n\\tif ind == -1 or ind2 == -1 or ind3 == -1 or (ind4 == -1):\\n\\t\\treturn False\\n\\telif ind != ind2 and ind3 != ind4:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\nif check('AB') or check('BA'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"str = input()\\npos = str.find('AB')\\nflag = False\\nif pos != -1:\\n\\tif pos != 0:\\n\\t\\tmystr = str[0:pos - 1:1] + str[pos + 2:len(str):1]\\n\\telse:\\n\\t\\tmystr = str[pos + 2:len(str):1]\\n\\tpos = mystr.find('BA')\\n\\tif pos != -1:\\n\\t\\tflag = True\\n\\telse:\\n\\t\\tflag = False\\nelse:\\n\\tflag = False\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tpos = str.find('BA')\\n\\tif pos != -1:\\n\\t\\tif pos != 0:\\n\\t\\t\\tmystr = str[0:pos - 1:1] + str[pos + 2:len(str):1]\\n\\t\\telse:\\n\\t\\t\\tmystr = str[pos + 2:len(str):1]\\n\\t\\tpos = mystr.find('AB')\\n\\t\\tif pos != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nabmin = s.find('AB')\\nabmax = s.rfind('AB')\\nbamin = s.find('BA')\\nbamax = s.rfind('BA')\\nif min(abmin, bamin) == -1:\\n\\tprint('NO')\\nelse:\\n\\tz1 = abs(abmin - bamin)\\n\\tz2 = abs(abmin - bamax)\\n\\tz3 = abs(abmax - bamin)\\n\\tz4 = abs(abmax - bamax)\\n\\tif max(z1, z2, z3, z4) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"string = input()\\nprint('YES' if 'AB' in string and 'BA' in string.replace('AB', '-', 1) or ('BA' in string and 'AB' in string.replace('BA', '-', 1)) else 'NO')\\n\", \"i = str(input())\\nif 'AB' in i and 'BA' in i:\\n\\tk = i.index('AB')\\n\\td = i.index('BA')\\n\\tif 'BA' in i[k + 2:]:\\n\\t\\tprint('YES')\\n\\telif 'AB' in i[d + 2:]:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nf = False\\nif 'AB' in s:\\n\\ta = s.index('AB')\\n\\tif 'BA' in s[a + 2:]:\\n\\t\\tf = True\\nif 'BA' in s:\\n\\ta = s.index('BA')\\n\\tif 'AB' in s[a + 2:]:\\n\\t\\tf = True\\nprint('YES' if f else 'NO')\\n\", \"import sys\\ns = list(sys.stdin.readline())\\nd = 0\\ne = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (d == 0):\\n\\t\\td = i + 2\\n\\telif s[i] == 'B' and s[i + 1] == 'A' and (e == 0):\\n\\t\\te = i + 2\\na = ''.join(s[d:])\\nb = ''.join(s[e:])\\nif d != 0 and 'BA' in a:\\n\\tprint('YES')\\nelif e != 0 and 'AB' in b:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def check(a, k):\\n\\tif a.count(-1) == 0 or a.count(1) == 0:\\n\\t\\treturn 'NO'\\n\\tfor i in range(k - 1):\\n\\t\\tif a[i] != 0:\\n\\t\\t\\tfor j in range(i + 2, k):\\n\\t\\t\\t\\tif a[i] + a[j] == 0:\\n\\t\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\ns = input()\\na = [0] * (len(s) - 1)\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\ta[i] = -1\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta[i] = 1\\nprint(check(a, len(s) - 1))\\n\", \"s = input()\\nans = False\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif i + 2 < len(s) - 1 and s[i + 2:].count('BA') != 0:\\n\\t\\t\\tans = True\\n\\t\\t\\tbreak\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif i + 2 < len(s) - 1 and s[i + 2:].count('AB') != 0:\\n\\t\\t\\tans = True\\n\\t\\t\\tbreak\\nif ans:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"X = input()\\nif 'AB' in X:\\n\\tZ = X.replace('AB', '1', 1)\\n\\tY = X[::-1].replace('BA', '1', 1)\\n\\tif 'BA' in Z or 'AB' in Y:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def any_in(subs, ss):\\n\\treturn any((x in s for x in subs for s in ss))\\ns = input()\\nif 'ABA' in s:\\n\\tl = s.split('ABA', 1)\\n\\tif any_in(['AB', 'BA'], l):\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\n\\tif 'BAB' not in s:\\n\\t\\tprint('NO')\\n\\t\\texit(0)\\nif 'BAB' in s:\\n\\tl = s.split('BAB', 1)\\n\\tif any_in(['AB', 'BA'], l):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\texit(0)\\nif 'AB' in s and 'BA' in s:\\n\\tprint('YES')\\n\\texit(0)\\nprint('NO')\\n\", \"a = input()\\nn = len(a)\\nif a.count('AB') > 0 and a.count('BA') > 0 and (n >= 4):\\n\\tx1 = -1\\n\\ty1 = -1\\n\\tx2 = -1\\n\\ty2 = -1\\n\\tx1 = a.find('AB')\\n\\tif x1 != -1:\\n\\t\\ty1 = a.find('BA', x1 + 2)\\n\\tx2 = a.find('BA')\\n\\tif x2 != -1:\\n\\t\\ty2 = a.find('AB', x2 + 2)\\n\\tif x1 != -1 and y1 != -1:\\n\\t\\tprint('YES')\\n\\telif x2 != -1 and y2 != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"q = input()\\ny = len(q)\\n(r, t) = (-1, -1)\\nl = 0\\nh = 0\\nfor i in range(y - 1):\\n\\tif q[i] + q[i + 1] == 'AB':\\n\\t\\tr = i\\n\\telif q[i] + q[i + 1] == 'BA':\\n\\t\\tt = i\\nif r == -1 or t == -1:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(r - 1):\\n\\t\\tif q[i] + q[i + 1] == 'BA':\\n\\t\\t\\tl = 1\\n\\tfor i in range(r + 2, y - 1):\\n\\t\\tif q[i] + q[i + 1] == 'BA':\\n\\t\\t\\tl = 1\\n\\tfor i in range(t - 1):\\n\\t\\tif q[i] + q[i + 1] == 'AB':\\n\\t\\t\\th = 1\\n\\tfor i in range(t + 2, y - 1):\\n\\t\\tif q[i] + q[i + 1] == 'AB':\\n\\t\\t\\th = 1\\n\\tif max(l, h) == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"def checkSubString(s, sub):\\n\\tfoundAB = False\\n\\tfoundBA = False\\n\\tfound = False\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tif not found:\\n\\t\\t\\tif s[i] == sub[0] and s[i + 1] == sub[1]:\\n\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\tif i + 2 < len(s):\\n\\t\\t\\t\\t\\ti += 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 1\\n\\t\\telif s[i] == sub[1] and s[i + 1] == sub[0]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn True\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\treturn False\\ns = input()\\nif not checkSubString(s, 'AB'):\\n\\tif not checkSubString(s, 'BA'):\\n\\t\\tprint('NO')\\n\", \"s = input()\\nx1 = s.find('AB')\\ny1 = s.rfind('BA')\\nx2 = s.rfind('AB')\\ny2 = s.find('BA')\\nif x1 == -1 or y1 == -1:\\n\\tfrom sys import exit\\n\\tprint('NO')\\n\\texit()\\nif max(x1, y1) - min(x1, y1) - 1 > 0 or max(x2, y2) - min(x2, y2) - 1 > 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"k = input()\\n(a, b, c, i) = (0, 0, 0, 0)\\nwhile i < len(k):\\n\\tif k[i:i + 3] == 'ABA' or k[i:i + 3] == 'BAB':\\n\\t\\ta = a + 1\\n\\t\\ti = i + 3\\n\\telif k[i:i + 2] == 'AB':\\n\\t\\tb = b + 1\\n\\t\\ti = i + 2\\n\\telif k[i:i + 2] == 'BA':\\n\\t\\tc = c + 1\\n\\t\\ti = i + 2\\n\\telse:\\n\\t\\ti = i + 1\\nif a > 1 or (a > 0 and (b > 0 or c > 0)) or (b > 0 and c > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\nab_indexes = []\\nba_indexes = []\\nfor k in range(len(string) - 1):\\n\\tpart = string[k] + string[k + 1]\\n\\tif part == 'AB':\\n\\t\\tab_indexes.append(k)\\n\\tif part == 'BA':\\n\\t\\tba_indexes.append(k)\\n\\ndef exists():\\n\\tfor k in ab_indexes:\\n\\t\\tfor i in ba_indexes:\\n\\t\\t\\tif abs(i - k) > 1:\\n\\t\\t\\t\\treturn True\\n\\treturn False\\nif exists():\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"p = ['ABBA', 'BAAB']\\nb = [0, 0]\\npc = 'X'\\nblock = False\\nfor c in input():\\n\\tif not (p[0] and p[1]):\\n\\t\\tbreak\\n\\tfor i in [0, 1]:\\n\\t\\tif b[i]:\\n\\t\\t\\tb[i] = 0\\n\\t\\t\\tcontinue\\n\\t\\tif p[i][1] == c and p[i][0] == pc:\\n\\t\\t\\tp[i] = p[i][2:]\\n\\t\\t\\tb[i] = 1\\n\\tpc = c\\nprint('YNEOS'[bool(p[0] and p[1])::2])\\n\", \"s = input()\\nli_s1 = []\\nli_s2 = []\\ntemp = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tli_s1.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tli_s2.append(i)\\nif len(li_s1) >= 1 and len(li_s2) >= 1:\\n\\ttemp.append(li_s1[0] - li_s2[-1])\\n\\ttemp.append(li_s2[0] - li_s1[-1])\\nflag = any((i >= 2 or i <= -2 for i in temp))\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def occurence():\\n\\ts = input()\\n\\tl = len(s)\\n\\tcount_ab = 0\\n\\tcount_ba = 0\\n\\ti = 0\\n\\twhile i < l:\\n\\t\\tif i < l - 1 and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\t\\tif count_ba > 0:\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\telif i < l - 2 and s[i + 2] == 'A':\\n\\t\\t\\t\\tcount_ab += 1\\n\\t\\t\\t\\tcount_ba += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcount_ab += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telif i < l - 1 and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\t\\tif count_ab > 0:\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\telif i < l - 2 and s[i + 2] == 'B':\\n\\t\\t\\t\\tcount_ab += 1\\n\\t\\t\\t\\tcount_ba += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcount_ba += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\treturn 'NO'\\nprint(occurence())\\n\", \"s = input()\\nn = len(s)\\nans = [-1] * n\\nba = False\\nab = False\\nab_1 = False\\nba_1 = False\\nfor i in range(n):\\n\\tif s[i] == 'B':\\n\\t\\tans[i] = 2\\n\\telif s[i] == 'A':\\n\\t\\tans[i] = 1\\nans_1 = ans[:]\\nfor i in range(n - 1):\\n\\tif ans[i] == 2 and ans[i + 1] == 1:\\n\\t\\tba = True\\n\\t\\tans[i] = -1\\n\\t\\tans[i + 1] = -1\\n\\t\\tbreak\\nfor i in range(n - 1):\\n\\tif ans[i] == 1 and ans[i + 1] == 2:\\n\\t\\tab = True\\n\\t\\tans[i] = -1\\n\\t\\tans[i + 1] = -1\\n\\t\\tbreak\\nfor i in range(n - 1):\\n\\tif ans_1[i] == 1 and ans_1[i + 1] == 2:\\n\\t\\tab_1 = True\\n\\t\\tans_1[i] = -1\\n\\t\\tans_1[i + 1] = -1\\n\\t\\tbreak\\nfor i in range(n - 1):\\n\\tif ans_1[i] == 2 and ans_1[i + 1] == 1:\\n\\t\\tba_1 = True\\n\\t\\tans_1[i] = -1\\n\\t\\tans_1[i + 1] = -1\\n\\t\\tbreak\\nif ba and ab:\\n\\tprint('YES')\\nelif ab_1 and ba_1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"inputList = input().split()\\nif len(inputList) == 0:\\n\\tprint('NO')\\nelse:\\n\\tABCounter = 0\\n\\tBACounter = 0\\n\\tOverlapCounter = 0\\n\\tMayOverlapFlag = False\\n\\ttestStr = inputList[0]\\n\\ti = 0\\n\\twhile i < len(testStr) - 1:\\n\\t\\tcurrentValue = testStr[i]\\n\\t\\tnextValue = testStr[i + 1]\\n\\t\\tif currentValue == 'A' and nextValue == 'B':\\n\\t\\t\\tABCounter += 1\\n\\t\\t\\tif MayOverlapFlag:\\n\\t\\t\\t\\tOverlapCounter += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tMayOverlapFlag = True\\n\\t\\telif currentValue == 'B' and nextValue == 'A':\\n\\t\\t\\tBACounter += 1\\n\\t\\t\\tif MayOverlapFlag:\\n\\t\\t\\t\\tOverlapCounter += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tMayOverlapFlag = True\\n\\t\\telse:\\n\\t\\t\\tMayOverlapFlag = False\\n\\t\\ti += 1\\n\\tif ABCounter >= 1 and BACounter >= 1 and (ABCounter + BACounter > 3):\\n\\t\\tprint('YES')\\n\\telif ABCounter >= 1 and BACounter >= 1 and (ABCounter + BACounter == 3) and (OverlapCounter < 2):\\n\\t\\tprint('YES')\\n\\telif ABCounter == 1 and BACounter == 1 and (OverlapCounter == 0):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import math\\nimport operator as op\\nfrom functools import reduce\\nfrom fractions import Fraction as frac\\n\\ndef tkp():\\n\\timport sys\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\n\\ndef solve():\\n\\ts = input('')\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\tprint('NO')\\n\\ndef local():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tprint('Case', i)\\n\\t\\tsolve()\\n\\ndef judge():\\n\\tsolve()\\njudge()\\n\", \"mot = input()\\nif len(mot) <= 3:\\n\\tprint('NO')\\nelse:\\n\\tab = mot.count('AB')\\n\\tba = mot.count('BA')\\n\\taba = mot.count('ABA')\\n\\tbab = mot.count('BAB')\\n\\tabab = mot.count('ABAB')\\n\\tbaba = mot.count('BABA')\\n\\tif abab == 1 and ab == 2 and (ba == 1):\\n\\t\\tprint('NO')\\n\\telif baba == 1 and ba == 2 and (ab == 1):\\n\\t\\tprint('NO')\\n\\telif aba == 1 and ab == 1 and (ba == 1):\\n\\t\\tprint('NO')\\n\\telif bab == 1 and ab == 1 and (ba == 1):\\n\\t\\tprint('NO')\\n\\telif ab == 0 or ba == 0:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"s = input()\\nif 'AB' not in s or 'BA' not in s:\\n\\tprint('NO')\\n\\texit()\\nab = [i for i in range(len(s) - 1) if s[i:i + 2] == 'AB']\\nba = [i for i in range(len(s) - 1) if s[i:i + 2] == 'BA']\\nprint(('NO', 'YES')[max(max(ab) - min(ba), max(ba) - min(ab)) > 1])\\n\", \"s = input()\\nlength = len(s)\\nflag = 0\\nfor x in range(length - 1):\\n\\tif flag == 0:\\n\\t\\tif s[x:x + 2] == 'AB':\\n\\t\\t\\tflag = 1\\n\\telif flag == 1:\\n\\t\\tflag += 1\\n\\telif s[x:x + 2] == 'BA':\\n\\t\\tprint('YES')\\n\\t\\texit()\\nflag = 0\\nfor x in range(length - 1):\\n\\tif flag == 0:\\n\\t\\tif s[x:x + 2] == 'BA':\\n\\t\\t\\tflag = 1\\n\\telif flag == 1:\\n\\t\\tflag += 1\\n\\telif s[x:x + 2] == 'AB':\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"s = input().rstrip()\\nn = int(len(s))\\nif n <= 3:\\n\\tprint('NO')\\nelse:\\n\\td = [0] * n\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\td[i] = 1\\n\\tans = 'NO'\\n\\tfor i in range(1, n):\\n\\t\\td[i] += d[i - 1]\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tif i - 2 >= 0:\\n\\t\\t\\t\\tif d[i - 2] >= 1 or d[-1] - d[i + 1] >= 1:\\n\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\telif i + 2 < n:\\n\\t\\t\\t\\tif d[-1] - d[i + 1] >= 1:\\n\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\tbreak\\n\\tprint(ans)\\n\", \"def foo(string, sub):\\n\\tans = []\\n\\tfor i in range(len(string) - len(sub) + 1):\\n\\t\\tfor j in range(len(sub)):\\n\\t\\t\\tif string[i + j] != sub[j]:\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tans.append(i)\\n\\treturn ans\\ns = input()\\na1 = foo(s, 'AB')\\na2 = foo(s, 'BA')\\nf = 0\\nfor elm in a2:\\n\\tfor start in a1:\\n\\t\\tif elm not in range(start, start + 2) and elm + 1 not in range(start, start + 2):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f:\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"word = list(input())\\nflag = False\\nfor i in range(len(word) - 1):\\n\\tif word[i] == 'A' and word[i + 1] == 'B':\\n\\t\\tfor j in range(i + 2, len(word) - 1):\\n\\t\\t\\tif word[j] == 'B' and word[j + 1] == 'A':\\n\\t\\t\\t\\tflag = True\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nfor i in range(len(word) - 1):\\n\\tif word[i] == 'B' and word[i + 1] == 'A':\\n\\t\\tfor j in range(i + 2, len(word) - 1):\\n\\t\\t\\tif word[j] == 'A' and word[j + 1] == 'B':\\n\\t\\t\\t\\tflag = True\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nindex = 0\\na0 = s.replace('AB', 'cc', 1).replace('BA', 'cc', 1)\\na1 = s.replace('BA', 'cc', 1).replace('AB', 'cc', 1)\\nif a0.count('c') == 4 or a1.count('c') == 4:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def fun(s):\\n\\tx = s.find('AB')\\n\\ty = s.find('BA')\\n\\tif x == -1 or y == -1:\\n\\t\\treturn 'NO'\\n\\tif x > 1 and s[0:x - 1].find('BA') != -1 or s[x + 2:].find('BA') != -1:\\n\\t\\treturn 'YES'\\n\\tif y > 1 and s[0:y - 1].find('AB') != -1 or s[y + 2:].find('AB') != -1:\\n\\t\\treturn 'YES'\\n\\treturn 'NO'\\ns = input()\\nprint(fun(s))\\n\", \"s = input()\\nab = []\\nba = []\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nif len(ab) == 0 or len(ba) == 0:\\n\\tprint('NO')\\nelse:\\n\\tworks = False\\n\\tfor i in ab:\\n\\t\\tif works:\\n\\t\\t\\tbreak\\n\\t\\tfor j in ba:\\n\\t\\t\\tif works:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif i != j - 1 and i != j + 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tworks = True\\n\\tif not works:\\n\\t\\tprint('NO')\\n\", \"i = input()\\n\\ndef contains(string):\\n\\tab = False\\n\\tabpos = -3\\n\\tba = False\\n\\ti = 0\\n\\taba = False\\n\\tif string.count('AB') == 0 or string.count('BA') == 0 or ((string.count('ABAB') == 1 or string.count('BABA') == 1) and string.count('A') + string.count('B') == 4):\\n\\t\\treturn 'NO'\\n\\tif string.count('AB') > 1 and string.count('BA') > 1 or (string.count('AB') > 0 and string.count('BA') > 0 and (string.count('ABA') == 0) and (string.count('BAB') == 0)) or (string.count('AB') > 1 and string.count('BAB') == 1) or (string.count('BA') > 1 and string.count('ABA') == 1):\\n\\t\\treturn 'YES'\\n\\twhile (i < len(string) - 1 or (ab and i < len(string))) and (not (ab and ba)):\\n\\t\\tif string[i] == 'A':\\n\\t\\t\\tif not ab:\\n\\t\\t\\t\\tif i < len(string) - 2 and string[i + 1] == 'B' and (string[i + 2] == 'A'):\\n\\t\\t\\t\\t\\taba = True\\n\\t\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tab = string[i + 1] == 'B'\\n\\t\\t\\t\\t\\tabpos = i if ab else -3\\n\\t\\t\\t\\t\\tif i > 0 and (not ba) and (not ab):\\n\\t\\t\\t\\t\\t\\tba = string[i - 1] == 'B'\\n\\t\\t\\t\\t\\t\\tif ba:\\n\\t\\t\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\telif i > abpos + 2:\\n\\t\\t\\t\\tba = string[i - 1] == 'B'\\n\\t\\ti += 1\\n\\treturn 'YES' if (ab or aba) and ba or (ab and (ba or aba)) else 'NO'\\nprint(contains(i))\\n\", \"s = input()\\nn = len(s)\\nl = []\\nk = []\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tl.append([i + 1, i])\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tk.append([i, i + 1])\\nif len(l) == 0 or len(k) == 0:\\n\\tprint('NO')\\nelse:\\n\\tif abs(len(l) - len(k)) > 0 and (len(l) > 2 or len(k) > 2):\\n\\t\\tflag = 1\\n\\telse:\\n\\t\\tflag = 0\\n\\t\\tfor i in range(len(l)):\\n\\t\\t\\tif l[i][0] != k[0][0] and l[i][1] != k[0][1]:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tfor i in range(len(k)):\\n\\t\\t\\tif k[i][0] != l[0][0] and k[i][1] != l[0][1]:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"x = input()\\ncount = 0\\nif 'AB' in x:\\n\\ts = x[x.index('AB') + 2::1]\\n\\tif 'BA' in s:\\n\\t\\tcount += 1\\nif 'BA' in x:\\n\\ts = x[x.index('BA') + 2::1]\\n\\tif 'AB' in s:\\n\\t\\tcount += 1\\nif count >= 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\ni = 0\\nwhile i < n - 3:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ti += 2\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\t\\ti += 1\\n\\ti += 1\\ni = 0\\nwhile i < n - 3:\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\ti += 2\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\t\\ti += 1\\n\\ti += 1\\nprint('NO')\\n\", \"s = input()\\na = s.count('AB')\\nb = s.count('BA')\\nc = s.count('ABA')\\nd = s.count('BAB')\\nif a * b == c + d or a == 0 or b == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"a = input()\\nb = a.find('AB')\\nc = a.find('BA')\\nflag = 0\\nif b + 1 and a.find('BA', b + 2) + 1 or (c + 1 and a.find('AB', c + 2) + 1):\\n\\tflag = 1\\nprint('YES' if flag else 'NO')\\n\", \"s = input()\\ni = 0\\nlistAB = []\\nlistBA = []\\nwhile i < len(s) - 1:\\n\\tcCurr = s[i + 1]\\n\\tcPrev = s[i]\\n\\tif cCurr == 'B' and cPrev == 'A':\\n\\t\\tlistAB += [i]\\n\\tif cCurr == 'A' and cPrev == 'B':\\n\\t\\tlistBA += [i]\\n\\ti += 1\\nif len(listAB) > 0 and len(listBA) > 0 and (listAB[0] + 1 < listBA[-1] or listBA[0] + 1 < listAB[-1]):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin\\ns = list(stdin.readline().rstrip())\\na = 0\\nb = 0\\nc = 0\\nd = 0\\nle = len(s)\\nfor i in range(le - 1):\\n\\tif i < le - 2 and s[i] == 'A' and (s[i + 1] == 'B') and (s[i + 2] == 'A'):\\n\\t\\ts[i] = s[i + 1] = s[i + 2] = ''\\n\\t\\tc += 1\\n\\telif i < le - 2 and s[i] == 'B' and (s[i + 1] == 'A') and (s[i + 2] == 'B'):\\n\\t\\ts[i] = s[i + 1] = s[i + 2] = ''\\n\\t\\td += 1\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\ts[i] = s[i + 1] = ''\\n\\t\\tb = 1\\n\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta = 1\\n\\t\\ts[i] = s[i + 1] = ''\\nif a + b >= 2 or a + d >= 2 or a + c >= 2 or (b + d >= 2) or (b + c >= 2) or (c + d >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nfrom collections import Counter\\nsys.setrecursionlimit(1000000)\\n\\ndef I():\\n\\treturn list(map(int, input().split()))\\ns = input()\\nn = len(s)\\nab = []\\nba = []\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nif ba and ab and (abs(ba[-1] - ab[0]) > 1 or abs(ab[-1] - ba[0]) > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin, stdout\\nnmbr = lambda : int(stdin.readline())\\nlst = lambda : list(map(int, stdin.readline().split()))\\nfor _ in range(1):\\n\\ts = input()\\n\\tn = len(s)\\n\\tif s.count('A') <= 1 or s.count('B') <= 1:\\n\\t\\tprint('NO')\\n\\t\\tcontinue\\n\\taba = bab = ab = ba = 0\\n\\tp = 0\\n\\twhile p < n:\\n\\t\\tif p + 2 < n and s[p:p + 3] == 'ABA':\\n\\t\\t\\taba += 1\\n\\t\\t\\tp += 3\\n\\t\\tif p + 2 < n and s[p:p + 3] == 'BAB':\\n\\t\\t\\tbab += 1\\n\\t\\t\\tp += 3\\n\\t\\telif p + 1 < n and s[p:p + 2] == 'AB':\\n\\t\\t\\tab += 1\\n\\t\\t\\tp += 2\\n\\t\\telif p + 1 < n and s[p:p + 2] == 'BA':\\n\\t\\t\\tba += 1\\n\\t\\t\\tp += 2\\n\\t\\telse:\\n\\t\\t\\tp += 1\\n\\tz = 0\\n\\tfor v in [ab, ba, aba, bab]:\\n\\t\\tif v == 0:\\n\\t\\t\\tz += 1\\n\\tprint('YES' if z < 3 else 'NO')\\n\", \"s = input()\\nlenS = len(s)\\ni = 0\\nt = s[:]\\nif 'AB' in t:\\n\\ti = t.index('AB')\\n\\tt = t[:i] + 'CC' + t[i + 2:]\\n\\tif 'BA' in t:\\n\\t\\tprint('YES')\\n\\t\\treturn\\nt = s[:]\\nif 'BA' in t:\\n\\ti = t.index('BA')\\n\\tt = t[:i] + 'CC' + t[i + 2:]\\n\\tif 'AB' in t:\\n\\t\\tprint('YES')\\n\\t\\treturn\\nprint('NO')\\n\", \"s = input()\\nx1 = s.find('AB')\\nx2 = s.find('BA', x1 + 2)\\ny1 = s.find('BA')\\ny2 = s.find('AB', y1 + 2)\\nif x1 != -1 and x2 != -1 or (y1 != -1 and y2 != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\nlastone = ''\\na = []\\nb = []\\nconse = 'a'\\nfor i in range(len(string) - 1):\\n\\tif string[i] + string[i + 1] == 'AB':\\n\\t\\ta.append(i)\\n\\telif string[i] + string[i + 1] == 'BA':\\n\\t\\tb.append(i)\\nif not a or not b:\\n\\tprint('NO')\\nelif abs(max(a) - min(b)) >= 2 or abs(max(b) - min(a)) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nk1 = s.count('BA')\\nk2 = s.count('AB')\\nk3 = s.count('ABA')\\nk4 = s.count('BAB')\\nk5 = s.count('BABA')\\nk6 = s.count('ABAB')\\nif k1 == 0 or k2 == 0:\\n\\tprint('NO')\\nelif (k3 == 1 or k4 == 1) and k1 == 1 and (k2 == 1):\\n\\tprint('NO')\\nelif k5 == 1 and k1 == 2 and (k2 == 1) or (k6 == 1 and k2 == 2 and (k1 == 1)):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"c = str(input())\\nbacount = 0\\nabcount = 0\\nprev = c[0]\\nfor i in range(1, len(c)):\\n\\tif prev == 'B' and c[i] == 'A' and (bacount < 1):\\n\\t\\tbacount += 1\\n\\t\\tif i + 1 < len(c):\\n\\t\\t\\ti += 1\\n\\telif (prev == 'A' and c[i] == 'B') and abcount < 1:\\n\\t\\tabcount += 1\\n\\t\\tif i + 1 < len(c):\\n\\t\\t\\ti += 1\\n\\tprev = c[i]\\nif abcount > 0 and bacount > 0:\\n\\tprint('YES')\\nelse:\\n\\tabcount = 0\\n\\tbacount = 0\\n\\tc = c[::-1]\\n\\tfor i in range(1, len(c)):\\n\\t\\tif prev == 'B' and c[i] == 'A' and (bacount < 1):\\n\\t\\t\\tbacount += 1\\n\\t\\t\\tif i + 1 < len(c):\\n\\t\\t\\t\\ti += 1\\n\\t\\telif (prev == 'A' and c[i] == 'B') and abcount < 1:\\n\\t\\t\\tabcount += 1\\n\\t\\t\\tif i + 1 < len(c):\\n\\t\\t\\t\\ti += 1\\n\\t\\tprev = c[i]\\n\\tif abcount > 0 and bacount > 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import sys\\ns = input()\\nt = 0\\nf = len(s) - 2\\ni = 0\\nwhile i < f:\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'A'):\\n\\t\\ts = s[:i] + s[i + 3:]\\n\\t\\tt += 1\\n\\telif s[i] == 'B' and s[i + 1] == 'A' and (s[i + 2] == 'B'):\\n\\t\\ts = s[:i] + s[i + 3:]\\n\\t\\tt += 1\\n\\tf = len(s) - 2\\n\\ti += 1\\nif t >= 2:\\n\\tprint('YES')\\n\\tsys.exit()\\nt2 = 0\\nt1 = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tt2 = 1\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tt1 = 1\\nif t2 * t1 == 1:\\n\\tprint('YES')\\nelif t == 1:\\n\\tif t1 == 1 or t2 == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nsc = s\\ny = len(s)\\ns = s.replace('AB', ';);', 1)\\ns = s.replace('BA', ';);', 1)\\nsc = sc.replace('BA', ';);', 1)\\nsc = sc.replace('AB', ';);', 1)\\nprint('YES' if y + 2 in (len(s), len(sc)) else 'NO')\\n\", \"from collections import deque\\nfrom math import log, sqrt, ceil\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef si():\\n\\treturn input()\\n\\ndef mi():\\n\\treturn map(int, input().strip().split(' '))\\n\\ndef li():\\n\\treturn list(mi())\\ns = si()\\n(f1, f2, f3) = (0, 0, 0)\\nn = len(s)\\ni = 1\\nwhile i < n - 1:\\n\\tif s[i - 1] == 'B' and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\tf3 += 1\\n\\t\\ti += 3\\n\\telif s[i - 1] == 'A' and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\tf3 += 1\\n\\t\\ti += 3\\n\\telif s[i - 1] == 'A' and s[i] == 'B':\\n\\t\\tf1 += 1\\n\\t\\ti += 2\\n\\telif s[i - 1] == 'B' and s[i] == 'A':\\n\\t\\tf2 += 1\\n\\t\\ti += 2\\n\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif i + 2 < n and s[i + 2] == 'A':\\n\\t\\t\\tf3 += 1\\n\\t\\t\\ti += 4\\n\\t\\telse:\\n\\t\\t\\tf1 += 1\\n\\t\\t\\ti += 3\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif i + 2 < n and s[i + 2] == 'B':\\n\\t\\t\\tf3 += 1\\n\\t\\t\\ti += 4\\n\\t\\telse:\\n\\t\\t\\tf2 += 1\\n\\t\\t\\ti += 3\\n\\telse:\\n\\t\\ti += 1\\nif i == n - 1 and (s[i] == 'B' and s[i - 1] == 'A'):\\n\\tf1 += 1\\nif i == n - 1 and (s[i] == 'A' and s[i - 1] == 'B'):\\n\\tf2 += 1\\nif f3 >= 2:\\n\\tprint('YES')\\nelif f1 and f2:\\n\\tprint('YES')\\nelif f3 == 1 and f1 + f2 + f3 >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\n(ab, ba, anyp) = (False, False, 0)\\ni = 0\\nwhile i < n:\\n\\tif i + 2 < n and (s[i:i + 3] == 'ABA' or s[i:i + 3] == 'BAB'):\\n\\t\\tanyp += 1\\n\\t\\ti += 3\\n\\telif i + 1 < n and s[i:i + 2] == 'AB':\\n\\t\\tab = True\\n\\t\\ti += 2\\n\\telif i + 1 < n and s[i:i + 2] == 'BA':\\n\\t\\tba = True\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\nprint('YES' if anyp > 1 or (anyp > 0 and ab) or (anyp > 0 and ba) or (ab and ba) else 'NO')\\n\", \"def main():\\n\\timport sys\\n\\ts = sys.stdin.read().strip()\\n\\tn = len(s)\\n\\tresult = False\\n\\tflag = False\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tif not flag and s[i:i + 2] == 'AB':\\n\\t\\t\\tflag = True\\n\\t\\t\\ti += 2\\n\\t\\telif flag and s[i:i + 2] == 'BA':\\n\\t\\t\\tresult = True\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tflag = False\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tif not flag and s[i:i + 2] == 'BA':\\n\\t\\t\\tflag = True\\n\\t\\t\\ti += 2\\n\\t\\telif flag and s[i:i + 2] == 'AB':\\n\\t\\t\\tresult = True\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tprint('YES' if result else 'NO')\\nmain()\\n\", \"s = input()\\nx = s.count('AB')\\ny = s.count('BA')\\na1 = s.count('ABA')\\na2 = s.count('BAB')\\na3 = s.count('ABAB')\\na4 = s.count('BABA')\\nf = 0\\nif a3 > 0:\\n\\tif x > 2 or y > 1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nelif a4 > 0:\\n\\tif y > 2 or x > 1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nelif a1 > 0 or a2 > 0:\\n\\tif x > 1 or y > 1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nelif x > 0 and y > 0:\\n\\tprint('YES')\\n\\texit()\\nprint('NO')\\n\", \"import re\\ntxt = input()\\nt = False\\nif re.search('AB', txt) != None:\\n\\tst = txt.replace('AB', 'X', 1)\\n\\tif re.search('BA', st) != None:\\n\\t\\tt = True\\nif re.search('BA', txt) != None:\\n\\tst = txt.replace('BA', 'X', 1)\\n\\tif re.search('AB', st) != None:\\n\\t\\tt = True\\nif t == False:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"def soln(s):\\n\\tfounds1 = []\\n\\tfounds2 = []\\n\\tj = float('-inf')\\n\\tfor i in range(len(s) - 1):\\n\\t\\tc1 = s[i]\\n\\t\\tc2 = s[i + 1]\\n\\t\\tif c1 == 'A' and c2 == 'B':\\n\\t\\t\\tfounds1.append(i)\\n\\t\\telif c1 == 'B' and c2 == 'A':\\n\\t\\t\\tfounds2.append(i)\\n\\tif len(founds1) == 0 or len(founds2) == 0:\\n\\t\\treturn 'NO'\\n\\tif len(founds1) >= 3 or len(founds2) >= 3:\\n\\t\\treturn 'YES'\\n\\tfor i in founds1:\\n\\t\\tfor j in founds2:\\n\\t\\t\\tif abs(i - j) > 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\n\\ndef main():\\n\\ts = input()\\n\\tresult = soln(s)\\n\\tprint(result)\\nmain()\\n\", \"s = input()\\ncheck1 = []\\nres = 'NO'\\ncheck2 = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tcheck1.append([i, i + 1])\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tcheck2.append([i, i + 1])\\nfor a in check1:\\n\\tfor b in check2:\\n\\t\\tif abs(a[0] - b[1]) > 2 or abs(a[1] - b[0]) > 2:\\n\\t\\t\\tres = 'YES'\\n\\t\\t\\tbreak\\nprint(res)\\n\", \"s = input()\\na = 0\\nb = 0\\nc = 0\\nd = 0\\nj = 0\\nA = []\\na2 = 0\\nb2 = 0\\nfor i in s:\\n\\tA.append(i)\\nwhile j < len(A) - 1:\\n\\tif A[j] == 'A' and A[j + 1] == 'B' and (c != 1):\\n\\t\\tc = 1\\n\\t\\ta = j\\n\\t\\tj = j + 1\\n\\telif A[j] == 'B' and A[j + 1] == 'A' and (d != 1):\\n\\t\\td = 1\\n\\t\\tb = j\\n\\t\\tj = j + 1\\n\\telif A[j] == 'A' and A[j + 1] == 'B' and (c == 1):\\n\\t\\ta2 = j\\n\\telif A[j] == 'B' and A[j + 1] == 'A' and (d == 1):\\n\\t\\tb2 = j\\n\\tj = j + 1\\nif c == 1 and d == 1:\\n\\tprint('YES')\\nelif c == 0 and d == 0:\\n\\tprint('NO')\\nelif c == 1 and d == 0 and (a2 != 0):\\n\\tx = 0\\n\\twhile x < a2 - 1:\\n\\t\\tif A[x] == 'B' and A[x + 1] == 'A':\\n\\t\\t\\td = 1\\n\\t\\t\\tbreak\\n\\t\\tx = x + 1\\n\\tif c == 1 and d == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif c == 0 and d == 1 and (b2 != 0):\\n\\ty = 0\\n\\twhile y < b2 - 1:\\n\\t\\tif A[y] == 'A' and A[y + 1] == 'B':\\n\\t\\t\\tc = 1\\n\\t\\t\\tbreak\\n\\t\\ty = y + 1\\n\\tif c == 1 and d == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\nflag = 0\\nfor i in range(len(s) - 1):\\n\\tt = s[i] + s[i + 1]\\n\\tif t == 'AB':\\n\\t\\tflag = 1 if 'BA' in s[i + 2:] else 0\\n\\telif t == 'BA':\\n\\t\\tflag = 1 if 'AB' in s[i + 2:] else 0\\n\\tif flag:\\n\\t\\tbreak\\nprint('YES' if flag else 'NO')\\n\", \"s = input().strip()\\n\\ndef check(s):\\n\\tab = []\\n\\tba = []\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tab.append(i)\\n\\t\\telif s[i:i + 2] == 'BA':\\n\\t\\t\\tba.append(i)\\n\\tif len(ab) == 0 or len(ba) == 0:\\n\\t\\treturn False\\n\\tif ba[0] != ab[-1] - 1 and ba[0] != ab[-1] + 1 or (ab[0] != ba[-1] - 1 and ab[0] != ba[-1] + 1):\\n\\t\\treturn True\\n\\treturn False\\nif check(s):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\n(flag1, flag2) = (0, 0)\\nk = 0\\nwhile k < n:\\n\\tif s[k:k + 2] == 'AB' and (not flag1):\\n\\t\\tflag1 = True\\n\\t\\tk += 1\\n\\telif s[k:k + 2] == 'BA' and (not flag2):\\n\\t\\tflag2 = True\\n\\t\\tk += 1\\n\\tk += 1\\n\\tif flag1 and flag2:\\n\\t\\tbreak\\nif not flag1 or not flag2:\\n\\t(flag1, flag2) = (0, 0)\\n\\tk = n - 1\\n\\twhile k > 0:\\n\\t\\tif s[k - 1:k + 1] == 'AB' and (not flag1):\\n\\t\\t\\tflag1 = True\\n\\t\\t\\tk -= 1\\n\\t\\telif s[k - 1:k + 1] == 'BA' and (not flag2):\\n\\t\\t\\tflag2 = True\\n\\t\\t\\tk -= 1\\n\\t\\tk -= 1\\n\\t\\tif flag1 and flag2:\\n\\t\\t\\tbreak\\nprint(['NO', 'YES'][flag1 and flag2])\\n\", \"s = input()\\niab = s.find('AB')\\niba = s.find('BA')\\nif iab >= 0 and s.find('BA', iab + 2) >= 0:\\n\\tprint('YES')\\nelif iba >= 0 and s.find('AB', iba + 2) >= 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ns = input()\\nab = []\\nba = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba.append(i)\\nc = 0\\nfor i in ab:\\n\\tfor x in ba:\\n\\t\\tif abs(i - x) >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tsys.exit()\\nprint('NO')\\n\", \"s = input()\\ns1 = s\\ns2 = s\\ny = False\\nif 'AB' not in s and 'BA' not in s:\\n\\tprint('NO')\\nelse:\\n\\tif 'AB' in s:\\n\\t\\ts1 = s1.replace('AB', '00', 1)\\n\\t\\tif 'BA' in s1:\\n\\t\\t\\ty = True\\n\\tif 'BA' in s:\\n\\t\\ts2 = s2.replace('BA', '00', 1)\\n\\t\\tif 'AB' in s2:\\n\\t\\t\\ty = True\\n\\tif y:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = 'a' + input() + 'a'\\n(cab, cba) = ([], [])\\nfor i in range(1, len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tcab.append(i)\\n\\t\\tfor j in cba:\\n\\t\\t\\tif j != i - 1 and j != i + 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tcba.append(i)\\n\\t\\tfor j in cab:\\n\\t\\t\\tif j != i - 1 and j != i + 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\ni = s.find('AB')\\nj = s.find('BA')\\nif i != -1 and s.find('BA', i + 2) != -1 or (j != -1 and s.find('AB', j + 2) != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nr = range(len(s))\\nab_indexes = [i for i in r if s.startswith('AB', i)]\\nba_indexes = [i for i in r if s.startswith('BA', i)]\\nbreaked = False\\nif all([len(ab_indexes), len(ba_indexes)]):\\n\\tfor i in ab_indexes:\\n\\t\\tif breaked:\\n\\t\\t\\tbreak\\n\\t\\tfor j in ba_indexes:\\n\\t\\t\\tif j - 1 != i and j + 1 != i:\\n\\t\\t\\t\\tbreaked = True\\n\\t\\t\\t\\tbreak\\nprint('YES' if breaked else 'NO')\\n\", \"import sys\\ns = input()\\nAB = []\\nBA = []\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tfor j in BA:\\n\\t\\t\\tif abs(j - i) != 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit(0)\\n\\t\\tAB.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tfor j in AB:\\n\\t\\t\\tif abs(j - i) != 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit(0)\\n\\t\\tBA.append(i)\\nprint('NO')\\n\", \"from collections import defaultdict\\ns = input().strip()\\nd = defaultdict(list)\\nfor i in range(len(s) - 1):\\n\\td[s[i:i + 2]].append(i)\\nk = 0\\nfor i in d['AB']:\\n\\tfor j in d['BA']:\\n\\t\\tif abs(i - j) > 1:\\n\\t\\t\\tk = 1\\n\\t\\t\\tbreak\\n\\tif k == 1:\\n\\t\\tbreak\\nprint('YES' if k == 1 else 'NO')\\n\", \"def f(s):\\n\\tif len(s) < 4:\\n\\t\\treturn 'NO'\\n\\tab = []\\n\\tba = []\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tab.append(i)\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tba.append(i)\\n\\tfor i in range(len(ab)):\\n\\t\\tfor j in range(len(ba)):\\n\\t\\t\\tif abs(ab[i] - ba[j]) >= 2:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\ns = input()\\nprint(f(s))\\n\", \"s = input()\\n\\ndef fn(s):\\n\\tt1 = len(s)\\n\\tfor i in range(t1 - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tt2 = s[:i] + '1' + s[i + 2:]\\n\\t\\t\\tif 'BA' in t2:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(fn(s))\\n\", \"s = input()\\ns1 = s.find('AB')\\nwhile s1 != -1:\\n\\tif s[:s1].find('BA') != -1 or s[s1 + 2:].find('BA') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\n\\ts1 = s.find('AB', s1 + 1)\\nprint('NO')\\n\", \"import sys\\ninput = []\\ninput_index = 0\\n\\ndef next(type, number=None):\\n\\n\\tdef next():\\n\\t\\tglobal input, input_index\\n\\t\\twhile input_index == len(input):\\n\\t\\t\\tif sys.stdin:\\n\\t\\t\\t\\tinput = sys.stdin.readline().split()\\n\\t\\t\\t\\tinput_index = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\traise Exception()\\n\\t\\tinput_index += 1\\n\\t\\treturn input[input_index - 1]\\n\\tif number is None:\\n\\t\\tresult = type(next())\\n\\telse:\\n\\t\\tresult = [type(next()) for _ in range(number)]\\n\\treturn result\\ns = next(str)\\n_abs = []\\n_bas = []\\nfor index in range(1, len(s)):\\n\\tif s[index - 1:index + 1] == 'AB':\\n\\t\\t_abs.append(index)\\n\\telif s[index - 1:index + 1] == 'BA':\\n\\t\\t_bas.append(index)\\nif _abs and _bas and (abs(min(_abs) - max(_bas)) >= 2):\\n\\tprint('YES')\\nelif _abs and _bas and (abs(max(_abs) - min(_bas)) >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import math\\ns = input()\\nl = len(s)\\n(ab, ba) = ([], [])\\nfor i in range(l - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba.append(i)\\nif len(ab) == 0 or len(ba) == 0:\\n\\tprint('NO')\\nelif max(abs(ab[0] - ba[-1]), abs(ab[-1] - ba[0])) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nyes = False\\ntry:\\n\\tab = s.index('AB')\\n\\tba = s.rindex('BA')\\n\\tif ba - ab > 1:\\n\\t\\tyes = True\\n\\tab = s.index('BA')\\n\\tba = s.rindex('AB')\\n\\tif ba - ab > 1:\\n\\t\\tyes = True\\nexcept ValueError:\\n\\tpass\\nprint('YES' if yes else 'NO')\\n\", \"s = input()\\nr1 = s.find('AB')\\nr2 = s.rfind('BA')\\nr3 = s.find('BA')\\nr4 = s.rfind('AB')\\nif r1 == -1 and r4 == -1 or (r2 == -1 and r3 == -1):\\n\\tprint('NO')\\nelif abs(r4 - r3) > 1 or abs(r1 - r2) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\npos = -1\\npos1 = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tpos = i\\n\\t\\tbreak\\nfor i in range(len(s) - 1, 0, -1):\\n\\tif s[i] == 'A' and s[i - 1] == 'B':\\n\\t\\tpos1 = i - 1\\n\\t\\tbreak\\npos2 = -1\\npos3 = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tpos2 = i\\n\\t\\tbreak\\nfor i in range(len(s) - 1, 0, -1):\\n\\tif s[i] == 'B' and s[i - 1] == 'A':\\n\\t\\tpos3 = i - 1\\n\\t\\tbreak\\nif pos == -1 or pos1 == -1:\\n\\tflag = False\\nelif abs(pos - pos1) > 1:\\n\\tflag = True\\nelse:\\n\\tflag = False\\nif flag:\\n\\tprint('YES')\\nelif pos2 == -1 or pos3 == -1:\\n\\tprint('NO')\\nelif abs(pos2 - pos3) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import atexit\\nimport io\\nimport sys\\n_I_B = sys.stdin.read().splitlines()\\ninput = iter(_I_B).__next__\\n_O_B = io.StringIO()\\nsys.stdout = _O_B\\n\\n@atexit.register\\ndef write():\\n\\tsys.__stdout__.write(_O_B.getvalue())\\n\\ndef main():\\n\\ts = input()\\n\\tls = len(s)\\n\\ti = 0\\n\\tab = 0\\n\\taba = 0\\n\\tbab = 0\\n\\tba = 0\\n\\twhile i + 1 < ls:\\n\\t\\tf = 1\\n\\t\\tif i + 2 < ls:\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'A'):\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\t\\taba += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telif s[i] == 'B' and s[i + 1] == 'A' and (s[i + 2] == 'B'):\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\t\\tbab += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\tif f:\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\tab += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tba += 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tf = 0\\n\\t\\ti += f\\n\\tans = (ab > 0) + (aba > 0) + (ba > 0) + (bab > 0)\\n\\tif ans > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"s = str(input())\\nn = len(s)\\nab = []\\nba = []\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nif len(ab) > 0 and len(ba) > 0:\\n\\tcheck1 = 0\\n\\tcheck2 = 0\\n\\ti = ab[0]\\n\\tj = ba[0]\\n\\tfor x in ba:\\n\\t\\tif x > i + 1:\\n\\t\\t\\tcheck1 = 1\\n\\t\\t\\tbreak\\n\\tfor x in ab:\\n\\t\\tif x > j + 1:\\n\\t\\t\\tcheck2 = 1\\n\\t\\t\\tbreak\\n\\tif check2 + check1 > 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"test = input()\\ntest1 = test\\ni = j = None\\ntry:\\n\\ti = test.index('AB')\\n\\ttest = test.replace('AB', '__', 1)\\n\\tj = test.index('BA')\\n\\tprint('YES')\\nexcept:\\n\\ttry:\\n\\t\\ti = test1.index('BA')\\n\\t\\ttest1 = test1.replace('BA', '__', 1)\\n\\t\\tj = test1.index('AB')\\n\\t\\tprint('YES')\\n\\texcept:\\n\\t\\tprint('NO')\\n\", \"string = input()\\npos1 = []\\npos2 = []\\nflag = 0\\nfor i in range(0, len(string) - 1):\\n\\tif string[i] == 'A':\\n\\t\\tif string[i + 1] == 'B':\\n\\t\\t\\tpos1.append(i)\\n\\telif string[i] == 'B':\\n\\t\\tif string[i + 1] == 'A':\\n\\t\\t\\tpos2.append(i)\\nif len(pos1) > len(pos2):\\n\\tfor i in range(0, len(pos1)):\\n\\t\\tif flag == 1:\\n\\t\\t\\tbreak\\n\\t\\tfor j in range(0, len(pos2)):\\n\\t\\t\\tif abs(pos1[i] - pos2[j]) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\nelse:\\n\\tfor i in range(0, len(pos2)):\\n\\t\\tif flag == 1:\\n\\t\\t\\tbreak\\n\\t\\tfor j in range(0, len(pos1)):\\n\\t\\t\\tif abs(pos2[i] - pos1[j]) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\nif flag == 0:\\n\\tprint('NO')\\n\", \"s = str(input())\\nab = len(s)\\nba = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab = i\\n\\t\\tbreak\\nfor i in range(len(s) - 2, -1, -1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba = i\\n\\t\\tbreak\\nif ba > ab + 1:\\n\\tprint('YES')\\n\\texit()\\nab = 0\\nba = len(s)\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba = i\\n\\t\\tbreak\\nfor i in range(len(s) - 2, -1, -1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab = i\\n\\t\\tbreak\\nif ab > ba + 1:\\n\\tprint('YES')\\n\\texit()\\nprint('NO')\\n\", \"st = str(input())\\ni = 0\\nif 'AB' in st and 'BA' in st:\\n\\tif not 'ABA' in st:\\n\\t\\tif not 'BAB' in st:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\twhile i < len(st) - 5 and st[i:i + 3] != 'BAB':\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\tif 'AB' in st[i + 3:len(st) + 1] or 'BA' in st[i + 3:len(st) + 1]:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\twhile i < len(st) - 5 and st[i:i + 3] != 'ABA':\\n\\t\\t\\ti += 1\\n\\t\\tif 'AB' in st[i + 3:len(st) + 1] or 'BA' in st[i + 3:len(st) + 1]:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\na = input()\\nab = a.count('AB')\\nba = a.count('BA')\\naba = a.count('ABA')\\nbab = a.count('BAB')\\nif ab != 0 and ba != 0 and (ab + ba - aba - bab > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = []\\nb = []\\nif 'AB' in s and 'BA' in s:\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\ta.append(i)\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tb.append(i)\\n\\tif abs(min(a) - max(b)) <= 1 and abs(min(b) - max(a)) <= 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def fact(x):\\n\\tif x == 0:\\n\\t\\treturn 1\\n\\telse:\\n\\t\\treturn x * fact(x - 1)\\n\\ndef lower_bound(li, num):\\n\\tanswer = -1\\n\\tstart = 0\\n\\tend = len(li) - 1\\n\\twhile start <= end:\\n\\t\\tmiddle = (end + start) // 2\\n\\t\\tif li[middle] >= num:\\n\\t\\t\\tanswer = middle\\n\\t\\t\\tend = middle - 1\\n\\t\\telse:\\n\\t\\t\\tstart = middle + 1\\n\\treturn answer\\n\\ndef upper_bound(li, num):\\n\\tanswer = -1\\n\\tstart = 0\\n\\tend = len(li) - 1\\n\\twhile start <= end:\\n\\t\\tmiddle = (end + start) // 2\\n\\t\\tif li[middle] <= num:\\n\\t\\t\\tanswer = middle\\n\\t\\t\\tstart = middle + 1\\n\\t\\telse:\\n\\t\\t\\tend = middle - 1\\n\\treturn answer\\n\\ndef abs(x):\\n\\treturn x if x >= 0 else -x\\n\\ndef binary_search(li, val, lb, ub):\\n\\tans = 0\\n\\twhile lb <= ub:\\n\\t\\tmid = (lb + ub) // 2\\n\\t\\tif li[mid] > val:\\n\\t\\t\\tub = mid - 1\\n\\t\\telif val > li[mid]:\\n\\t\\t\\tlb = mid + 1\\n\\t\\telse:\\n\\t\\t\\tans = 1\\n\\t\\t\\tbreak\\n\\treturn ans\\n\\ndef kadane(x):\\n\\tsum_so_far = 0\\n\\tcurrent_sum = 0\\n\\tfor i in x:\\n\\t\\tcurrent_sum += i\\n\\t\\tif current_sum < 0:\\n\\t\\t\\tcurrent_sum = 0\\n\\t\\telse:\\n\\t\\t\\tsum_so_far = mpos(sum_so_far, current_sum)\\n\\treturn sum_so_far\\n\\ndef pref(li):\\n\\tpref_sum = [0]\\n\\tfor i in li:\\n\\t\\tpref_sum.append(pref_sum[-1] + i)\\n\\treturn pref_sum\\n\\ndef graph(n, m):\\n\\tadj = dict()\\n\\tfor i in range(1, n + 1):\\n\\t\\tadj.setdefault(i, 0)\\n\\tfor i in range(m):\\n\\t\\t(a, b) = map(int, input().split())\\n\\t\\tadj[a] += 1\\n\\t\\tadj[b] += 1\\n\\treturn adj\\nimport sys\\nimport threading\\nfrom math import *\\nsys.setrecursionlimit(300000)\\nthreading.stack_size(10 ** 8)\\npo = int(log(10 ** 18)) + 2\\nli = []\\nfor i in range(po):\\n\\tli.append(3 ** i)\\nli = li[::-1]\\ns = sum(li)\\nfor _ in range(1):\\n\\ta = input()\\n\\tn = len(a)\\n\\t(ind1, ind2) = (n + 4, -1)\\n\\t(f1, f2) = (0, 0)\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i:i + 2] == 'AB':\\n\\t\\t\\tind1 = i\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i:i + 2] == 'BA':\\n\\t\\t\\tind2 = i\\n\\tif ind2 - ind1 >= 2:\\n\\t\\tf1 = 1\\n\\t(ind1, ind2) = (n + 4, -1)\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i:i + 2] == 'BA':\\n\\t\\t\\tind1 = i\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i:i + 2] == 'AB':\\n\\t\\t\\tind2 = i\\n\\tif ind2 - ind1 >= 2:\\n\\t\\tf2 = 1\\n\\tif f1 or f2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\ntry:\\n\\tab1 = s.index('AB')\\n\\tba1 = s[::-1].index('AB')\\n\\tba1 = len(s) - 2 - ba1\\n\\tab2 = s[::-1].index('BA')\\n\\tab2 = len(s) - 2 - ab2\\n\\tba2 = s.index('BA')\\n\\tif abs(ab1 - ba1) >= 2 or abs(ab2 - ba2) >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nexcept ValueError:\\n\\tprint('NO')\\n\", \"from sys import stdin, stdout\\n\\ndef INI():\\n\\treturn int(stdin.readline())\\n\\ndef INL():\\n\\treturn [int(_) for _ in stdin.readline().split()]\\n\\ndef INS():\\n\\treturn stdin.readline()\\n\\ndef MOD():\\n\\treturn pow(10, 9) + 7\\n\\ndef OPS(ans):\\n\\tstdout.write(str(ans) + '\\\\n')\\n\\ndef OPL(ans):\\n\\t[stdout.write(str(_) + ' ') for _ in ans]\\n\\tstdout.write('\\\\n')\\nS = INS()\\nn = len(S)\\n(ans1, ans2) = (False, False)\\ni = 0\\nx = 1\\nwhile i < n - 2:\\n\\tif S[i:i + 2] == 'AB' and x:\\n\\t\\ti += 2\\n\\t\\tx = 0\\n\\tif not x and S[i:i + 2] == 'BA':\\n\\t\\tans1 = True\\n\\ti += 1\\ni = 0\\nx = 1\\nwhile i < n - 2:\\n\\tif S[i:i + 2] == 'BA' and x:\\n\\t\\ti += 2\\n\\t\\tx = 0\\n\\tif not x and S[i:i + 2] == 'AB':\\n\\t\\tans2 = True\\n\\ti += 1\\nif ans1 or ans2:\\n\\tOPS('YES')\\nelse:\\n\\tOPS('NO')\\n\", \"s = input()\\nif 'AB' and 'BA' in s:\\n\\ti = 0\\n\\tsplits = []\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tx = s[:i]\\n\\t\\t\\ty = s[i + 2:]\\n\\t\\t\\tif 'BA' in x or 'BA' in y:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nflag = 0\\nif 'AB' in s:\\n\\tres = s.find('AB')\\n\\tcopy = s[res + 2:]\\n\\tif 'BA' in copy:\\n\\t\\tflag = 1\\n\\telif flag != 1:\\n\\t\\tflag = 0\\nif 'BA' in s:\\n\\tres = s.find('BA')\\n\\tcopy = s[res + 2:]\\n\\tif 'AB' in copy:\\n\\t\\tflag = 1\\n\\telif flag != 1:\\n\\t\\tflag = 0\\nelse:\\n\\tflag = 0\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ni = s.find('AB')\\nif i != -1:\\n\\tif s[i + 2:].find('BA') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\ni = s.find('BA')\\nif i != -1:\\n\\tif s[i + 2:].find('AB') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\nprint('NO')\\n\", \"s = input()\\ns1 = 'AB'\\ns2 = 'BA'\\na1 = s.count(s1)\\na2 = s.count(s2)\\nif a1 == 0 or a2 == 0:\\n\\tprint('NO')\\nelif a2 == 1 and a1 > 1:\\n\\tk1 = s.find(s2)\\n\\tk2_1 = s.find(s1)\\n\\tk2_2 = s.find(s1, k2_1 + 1, len(s))\\n\\tk2_3 = s.find(s1, k2_2 + 1, len(s))\\n\\tif k1 != k2_1 + 1 and k1 != k2_1 - 1:\\n\\t\\tprint('YES')\\n\\telif k1 != k2_2 + 1 and k1 != k2_2 - 1:\\n\\t\\tprint('YES')\\n\\telif k1 != k2_3 + 1 and k1 != k2_3 - 1 and (k2_3 != -1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif a1 == 1 and a2 > 1:\\n\\tk1 = s.find(s1)\\n\\tk2_1 = s.find(s2)\\n\\tk2_2 = s.find(s2, k2_1 + 1, len(s))\\n\\tk2_3 = s.find(s2, k2_2 + 1, len(s))\\n\\tif k1 != k2_1 + 1 and k1 != k2_1 - 1:\\n\\t\\tprint('YES')\\n\\telif k1 != k2_2 + 1 and k1 != k2_2 - 1:\\n\\t\\tprint('YES')\\n\\telif k1 != k2_3 + 1 and k1 != k2_3 - 1 and (k2_3 != -1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif a1 == 1 and a2 == 1:\\n\\tk1 = s.find(s1)\\n\\tk2 = s.find(s2)\\n\\tif k1 != k2 + 1 and k1 != k2 - 1 and (k1 != -1) and (k2 != -1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"S = input()\\nlistA = []\\nlistB = []\\nfor i in range(0, len(S) - 1):\\n\\tif S[i] == 'A' and S[i + 1] == 'B':\\n\\t\\tlistA.append(i)\\n\\tif S[i] == 'B' and S[i + 1] == 'A':\\n\\t\\tlistB.append(i)\\nnA = len(listA)\\nnB = len(listB)\\nif nA >= 2 and nB >= 2:\\n\\tprint('YES')\\nelif nA == 0 or nB == 0:\\n\\tprint('NO')\\nelse:\\n\\tresultA = 0\\n\\tresultB = 0\\n\\tfor i in range(0, len(listA)):\\n\\t\\ttmp = 0\\n\\t\\tfor j in range(0, len(listB)):\\n\\t\\t\\tif listA[i] + 1 == listB[j] or listA[i] == listB[j] + 1:\\n\\t\\t\\t\\ttmp += 1\\n\\t\\tif tmp == 0:\\n\\t\\t\\tresultA += 1\\n\\tfor i in range(0, len(listB)):\\n\\t\\ttmp = 0\\n\\t\\tfor j in range(0, len(listA)):\\n\\t\\t\\tif listB[i] + 1 == listA[j] or listB[i] == listA[j] + 1:\\n\\t\\t\\t\\ttmp += 1\\n\\t\\tif tmp == 0:\\n\\t\\t\\tresultB += 1\\n\\tif resultA > 0 or resultB > 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import bisect\\nimport collections\\nimport math\\ns = input()\\n\\ndef prefix(src):\\n\\tpi = [0] * len(src)\\n\\tfor i in range(1, len(src)):\\n\\t\\tk = pi[i - 1]\\n\\t\\twhile k > 0 and src[k] != src[i]:\\n\\t\\t\\tk = pi[k - 1]\\n\\t\\tif src[k] == src[i]:\\n\\t\\t\\tk += 1\\n\\t\\tpi[i] = k\\n\\treturn pi\\n\\ndef KMP(t):\\n\\tpi_1 = prefix('AB#' + t)\\n\\tpi_2 = prefix('BA#' + t)\\n\\treturn ([i - 4 for (i, x) in enumerate(pi_1) if x == 2 and i > 2], [i - 4 for (i, x) in enumerate(pi_2) if x == 2 and i > 2])\\n(left, right) = KMP(s)\\nif not left or not right:\\n\\tprint('NO')\\nelif abs(right[-1] - left[0]) >= 2 or abs(right[0] - left[-1]) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif len(s) > 3 and 'AB' in s and ('BA' in s[s.index('AB') + 2:]):\\n\\tprint('YES')\\nelif len(s) > 3 and 'BA' in s and ('AB' in s[s.index('BA') + 2:]):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ns = input()\\nt1 = 0\\nt2 = 0\\nk = len(s)\\nl = len(s)\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB' and t1 == 0:\\n\\t\\tt1 = 1\\n\\t\\tk = i + 2\\n\\tif s[i:i + 2] == 'BA' and t2 == 0:\\n\\t\\tl = i + 2\\n\\t\\tt2 = 1\\n\\tif t1 == 1 and t2 == 1:\\n\\t\\tbreak\\nfor j in range(k, len(s) - 1):\\n\\tif s[j:j + 2] == 'BA':\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nfor j in range(l, len(s) - 1):\\n\\tif s[j:j + 2] == 'AB':\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nprint('NO')\\n\", \"n = input()\\nl = 0\\nc = 0\\ni = 0\\nd = 0\\nd1 = 0\\nwhile i < len(n) - 1:\\n\\tif n[i] + n[i + 1] == 'AB':\\n\\t\\tc += 1\\n\\t\\td = i\\n\\tif n[i] + n[i + 1] == 'BA':\\n\\t\\tl += 1\\n\\t\\td1 = i\\n\\ti += 1\\nif l > 1 and c > 1 or (l > 1 and c > 0 and (d1 - d != 1) and (d1 - d != -1)) or (c > 1 and l > 0 and (d1 - d != 1) and (d1 - d != -1)) or (l == 1 and c == 1 and (d1 - d != 1) and (d1 - d != -1)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nflag = False\\nright_ab = [0 for i in range(len(s))]\\nright_ba = [0 for i in range(len(s))]\\ncount = 0\\nc = 0\\nfor i in range(len(s) - 2, -1, -1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tcount += 1\\n\\tright_ab[i] = count\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tc += 1\\n\\tright_ba[i] = c\\nflag = False\\nfor i in range(2, len(s)):\\n\\tif s[i - 2:i] == 'AB' and right_ba[i] > 0 or (s[i - 2:i] == 'BA' and right_ab[i] > 0):\\n\\t\\tprint('YES')\\n\\t\\tflag = True\\n\\t\\tbreak\\nif not flag:\\n\\tprint('NO')\\n\", \"def are_substring(s):\\n\\ti = 0\\n\\tab = False\\n\\tba = False\\n\\twhile i < len(s) and s[i:i + 2] != 'BA':\\n\\t\\ti += 1\\n\\tif i < len(s) and 'AB' in s[i + 2:]:\\n\\t\\tab = True\\n\\tj = 0\\n\\twhile j < len(s) and s[j:j + 2] != 'AB':\\n\\t\\tj += 1\\n\\tif j < len(s) and 'BA' in s[j + 2:]:\\n\\t\\tba = True\\n\\tif ab or ba:\\n\\t\\treturn 'YES'\\n\\telse:\\n\\t\\treturn 'NO'\\ns = input()\\nif len(s) <= 3:\\n\\tprint('NO')\\nelse:\\n\\tprint(are_substring(s))\\n\", \"s = input()\\ni1 = s.find('AB')\\ni2 = s.find('BA', i1 + 2)\\ni3 = s.find('BA')\\ni4 = s.find('AB', i3 + 2)\\nif i1 != -1 and i2 != -1:\\n\\tprint('YES')\\nelif i3 != -1 and i4 != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = s.find('AB')\\nar = s.rfind('AB')\\nb = s.find('BA')\\nbr = s.rfind('BA')\\nif a >= 0 and br >= 0 and (abs(br - a) != 1) or (ar >= 0 and b >= 0 and (abs(ar - b) != 1)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\np = list(s)\\nflag = False\\nfor i in range(len(s) - 3):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = True\\n\\tif flag == True:\\n\\t\\tbreak\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = True\\n\\tif flag == True:\\n\\t\\tbreak\\nif flag == False:\\n\\tprint('NO')\\n\", \"s = list(input(''))\\nn = len(s)\\nindA = []\\nindB = []\\nflag = 0\\nfor i in range(n):\\n\\tif s[i] == 'A':\\n\\t\\tif i + 1 >= n:\\n\\t\\t\\tcontinue\\n\\t\\telif s[i + 1] == 'B':\\n\\t\\t\\tindA.append(i)\\n\\telif s[i] == 'B':\\n\\t\\tif i + 1 >= n:\\n\\t\\t\\tcontinue\\n\\t\\telif s[i + 1] == 'A':\\n\\t\\t\\tindB.append(i)\\nif len(indA) == 0 or len(indB) == 0:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(len(indA)):\\n\\t\\tfor j in range(len(indB)):\\n\\t\\t\\tif abs(indA[i] - indB[j]) > 1:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"str1 = input()\\nif str1.count('AB') == 0 or str1.count('BA') == 0:\\n\\tprint('NO')\\nelse:\\n\\tx = str1.find('AB')\\n\\ty = str1.rfind('BA')\\n\\tx1 = str1.find('BA')\\n\\ty1 = str1.rfind('AB')\\n\\tif abs(x - y) >= 2 or abs(x1 - y1) >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\na = []\\nb = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb.append(i)\\nif a and b and (len(a) + len(b) >= 4):\\n\\tprint('YES')\\nelif a and b and (len(a) + len(b) == 3):\\n\\tif 'ABAB' in s or 'BABA' in s:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif a and b and (len(a) + len(b) == 2):\\n\\tif 'ABA' in s or 'BAB' in s:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif 'BA' not in s or 'AB' not in s:\\n\\tprint('NO')\\nelif 'BA' in s and 'AB' in s and (s.count('A') >= 2) and (s.count('B') >= 2):\\n\\tif 'BAB' not in s and 'ABA' not in s:\\n\\t\\tprint('YES')\\n\\telif 'ABA' in s and (s.count('BA') >= 2 or s.count('AB') >= 2) and (len(s) >= 4) and (s.count('A') > 2 or s.count('B') > 2):\\n\\t\\tprint('YES')\\n\\telif 'BAB' in s and (s.count('AB') >= 2 or s.count('BA') >= 2) and (len(s) >= 4) and (s.count('A') > 2 or s.count('B') > 2):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"arr = input()\\np = arr.find('AB')\\nc = arr.find('BA')\\nif p >= 0 and arr.find('BA', p + 2) > 0:\\n\\tprint('YES')\\nelif c >= 0 and arr.find('AB', c + 2) > 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"l = input()\\nAB = 0\\nBA = 0\\nfor i in range(0, len(l) - 1):\\n\\tif l[i:i + 2] == 'AB':\\n\\t\\tAB += 1\\n\\tif l[i:i + 2] == 'BA':\\n\\t\\tBA += 1\\nif AB == 0 or BA == 0:\\n\\tprint('NO')\\nelif AB == 1 and BA == 1:\\n\\tif l.find('ABA') == -1 and l.find('BAB') == -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif AB == 1 and BA == 2:\\n\\tif l.find('BABA') == -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif BA == 1 and AB == 2:\\n\\tif l.find('ABAB') == -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"a = input()\\nn = len(a)\\nk = 0\\nl = a.find('AB')\\nif l >= 0:\\n\\tif l + 2 == n:\\n\\t\\tk = 0\\n\\telse:\\n\\t\\tb = a[l + 2:]\\n\\t\\tif b.find('BA') >= 0:\\n\\t\\t\\tk = k + 1\\n\\t\\telse:\\n\\t\\t\\tk = 0\\nl = a.find('BA')\\nif k == 0 and l >= 0:\\n\\tif l + 2 == n:\\n\\t\\tk = 0\\n\\telse:\\n\\t\\tb = a[l + 2:]\\n\\t\\tif b.find('AB') >= 0:\\n\\t\\t\\tk = k + 1\\n\\t\\telse:\\n\\t\\t\\tk = 0\\nif k == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"t = input()\\nif 'BA' not in t:\\n\\tprint('NO')\\nelif 'AB' not in t:\\n\\tprint('NO')\\nelse:\\n\\tu = []\\n\\tv = []\\n\\tfor k in range(len(t) - 1):\\n\\t\\tif t[k] == 'A' and t[k + 1] == 'B':\\n\\t\\t\\tu.append(k)\\n\\t\\telif t[k] == 'B' and t[k + 1] == 'A':\\n\\t\\t\\tv.append(k)\\n\\tif abs(min(u) - max(v)) > 1 or abs(min(v) - max(u)) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nflag1 = False\\nflag2 = False\\ns2 = ''\\ni = 0\\nwhile i < len(s):\\n\\tif i + 1 < len(s) and s[i] == 'A' and (s[i + 1] == 'B') and (flag1 == False):\\n\\t\\tflag1 = True\\n\\t\\ti += 1\\n\\t\\ts2 = s2 + '..'\\n\\telse:\\n\\t\\ts2 = s2 + s[i]\\n\\ti += 1\\nif flag1:\\n\\tif 'BA' in s2:\\n\\t\\tflag2 = True\\nif flag1 and flag2:\\n\\tprint('YES')\\nelse:\\n\\ti = 0\\n\\ts2 = ''\\n\\tflag1 = False\\n\\tflag2 = False\\n\\twhile i < len(s):\\n\\t\\tif i + 1 < len(s) and s[i] == 'B' and (s[i + 1] == 'A') and (flag1 == False):\\n\\t\\t\\tflag1 = True\\n\\t\\t\\ti += 1\\n\\t\\t\\ts2 = s2 + '..'\\n\\t\\telse:\\n\\t\\t\\ts2 = s2 + s[i]\\n\\t\\ti += 1\\n\\tif flag1:\\n\\t\\tif 'AB' in s2:\\n\\t\\t\\tflag2 = True\\n\\tif flag1 and flag2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"x = input()\\ni = x.find('AB')\\nj = x.find('BA')\\nif i >= 0 and x.find('BA', i + 2) + 1 or (j >= 0 and x.find('AB', j + 2) + 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import re\\n\\ndef subs(s):\\n\\ta = list()\\n\\tb = list()\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\ta.append(i)\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tb.append(i)\\n\\tfor x in range(len(a)):\\n\\t\\tfor y in range(len(b)):\\n\\t\\t\\tif abs(a[x] - b[y]) > 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nt = input()\\nprint(subs(t))\\n\", \"a = str(input())\\nr = 'NO'\\nn = len(a)\\nx = a.find('AB')\\nb = a[x + 2:n]\\ny = b.find('BA')\\nif x >= 0 and y >= 0:\\n\\tr = 'YES'\\nx = a.find('BA')\\nb = a[x + 2:n]\\ny = b.find('AB')\\nif x >= 0 and y >= 0:\\n\\tr = 'YES'\\nprint(r)\\n\", \"word = input()\\nabLoc_ab = word.find('AB')\\nslicedWord = word[abLoc_ab + 2:len(word)]\\nbaLoc_ab = slicedWord.rfind('BA')\\nbaLoc_ba = word.find('BA')\\nslicedWord = word[baLoc_ba + 2:len(word)]\\nabLoc_ba = slicedWord.find('AB')\\nif abLoc_ab >= 0 and baLoc_ab >= 0 or (abLoc_ba >= 0 and baLoc_ba >= 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ni = 0\\nans = False\\nif min(s.count('AB'), s.count('BA')) >= 1 and s.count('AB') + s.count('BA') - int('BAB' in s) - int('ABA' in s) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"line = str(input())\\nsize = len(line)\\nlist_ab = list()\\nlist_ba = list()\\nfor i in range(size - 1):\\n\\tif line[i:i + 2] == 'AB':\\n\\t\\tlist_ab.append(i)\\n\\tif line[i:i + 2] == 'BA':\\n\\t\\tlist_ba.append(i)\\nflag = False\\nfor i in list_ab:\\n\\tfor j in list_ba:\\n\\t\\tif abs(i - j) > 1:\\n\\t\\t\\tflag = True\\n\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tbreak\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import collections\\nimport itertools\\nimport sys\\nfrom collections import defaultdict, Counter\\nfrom math import sqrt, ceil\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n\\ndef main():\\n\\tn = insr()\\n\\tab = []\\n\\tba = []\\n\\tfor (i, c) in enumerate(n):\\n\\t\\tif i > 0:\\n\\t\\t\\tif c == 'B' and n[i - 1] == 'A':\\n\\t\\t\\t\\tba.append(i - 1)\\n\\t\\t\\tif c == 'A' and n[i - 1] == 'B':\\n\\t\\t\\t\\tab.append(i - 1)\\n\\tif ba and ab and (abs(ba[0] - ab[-1]) >= 2 or abs(ba[-1] - ab[0]) >= 2):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"import math\\nfrom collections import defaultdict, Counter, deque\\nINF = float('inf')\\n\\ndef gcd(a, b):\\n\\twhile b:\\n\\t\\t(a, b) = (b, a % b)\\n\\treturn a\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\ti = 2\\n\\twhile i ** 2 <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\treturn False\\n\\t\\ti += 1\\n\\treturn True\\n\\ndef vars():\\n\\treturn map(int, input().split())\\n\\ndef array():\\n\\treturn list(map(int, input().split()))\\n\\ndef main():\\n\\ts = input()\\n\\tn = len(s)\\n\\tl = 0\\n\\tr = 1\\n\\t(i, j) = (-1, -1)\\n\\t(i1, j1) = (-1, -1)\\n\\twhile r < n:\\n\\t\\tif s[l:r + 1] == 'AB':\\n\\t\\t\\tif i == -1:\\n\\t\\t\\t\\ti = l\\n\\t\\t\\ti1 = l\\n\\t\\tl += 1\\n\\t\\tr += 1\\n\\tl = 0\\n\\tr = 1\\n\\twhile r < n:\\n\\t\\tif s[l:r + 1] == 'BA':\\n\\t\\t\\tif j1 == -1:\\n\\t\\t\\t\\tj1 = l\\n\\t\\t\\tj = l\\n\\t\\tl += 1\\n\\t\\tr += 1\\n\\tif -1 < i < j and i + 1 != j:\\n\\t\\tprint('YES')\\n\\telif -1 < j1 < i1 and j1 + 1 != i1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nt = 1\\nfor _ in range(t):\\n\\tmain()\\n\", \"line1 = str(input())\\nabIndexes = []\\nbaIndexes = []\\nfor i in range(0, len(line1) - 1):\\n\\tif line1[i] == 'A' and line1[i + 1] == 'B':\\n\\t\\tabIndexes.append(i)\\nfor i in range(0, len(line1) - 1):\\n\\tif line1[i] == 'B' and line1[i + 1] == 'A':\\n\\t\\tbaIndexes.append(i)\\ndistinct = False\\nfor i in abIndexes:\\n\\tfor j in baIndexes:\\n\\t\\tif j != i + 1 and j != i - 1:\\n\\t\\t\\tdistinct = True\\n\\t\\t\\tbreak\\n\\t\\t\\tbreak\\nif distinct:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif s.find('AB') >= 0 and s.find('BA') >= 0 and (abs(s.find('AB') - s.rfind('BA')) > 1 or abs(s.find('BA') - s.rfind('AB')) > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nl = []\\ncount = 0\\ncount1 = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (count == 0):\\n\\t\\tif i not in l and i + 1 not in l:\\n\\t\\t\\tcount = count + 1\\n\\t\\t\\tl.append(i)\\n\\t\\t\\tl.append(i + 1)\\n\\tif s[i] == 'B' and s[i + 1] == 'A' and (count1 == 0):\\n\\t\\tif i not in l and i + 1 not in l:\\n\\t\\t\\tcount1 = count1 + 1\\n\\t\\t\\tl.append(i)\\n\\t\\t\\tl.append(i + 1)\\nif count >= 1 and count1 >= 1:\\n\\tprint('YES')\\nelse:\\n\\tl = []\\n\\tcount = 0\\n\\tcount1 = 0\\n\\ts = s[::-1]\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A' and (count1 == 0):\\n\\t\\t\\tif i not in l and i + 1 not in l:\\n\\t\\t\\t\\tcount1 = count1 + 1\\n\\t\\t\\t\\tl.append(i)\\n\\t\\t\\t\\tl.append(i + 1)\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B' and (count == 0):\\n\\t\\t\\tif i not in l and i + 1 not in l:\\n\\t\\t\\t\\tcount = count + 1\\n\\t\\t\\t\\tl.append(i)\\n\\t\\t\\t\\tl.append(i + 1)\\n\\tif count >= 1 and count1 >= 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import sys\\ns = input()\\na1 = s.find('AB')\\na2 = s.rfind('AB')\\nb1 = s.find('BA')\\nb2 = s.rfind('BA')\\nif a1 != -1 and a1 + 1 < b2:\\n\\tprint('YES')\\n\\tsys.exit(0)\\nif b1 != -1 and b1 + 1 < a2:\\n\\tprint('YES')\\n\\tsys.exit(0)\\nprint('NO')\\n\", \"mainString = str(input())\\nABfoundIndex = mainString.find('AB')\\nBAfounIndex = mainString.find('BA')\\nif ABfoundIndex != -1 and mainString.find('BA', ABfoundIndex + 2) != -1 or (BAfounIndex != -1 and mainString.find('AB', BAfounIndex + 2) != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from __future__ import division, print_function\\nfrom sys import stdin, stdout\\nimport itertools, os, sys, threading\\nfrom collections import deque, Counter, OrderedDict, defaultdict\\nimport heapq\\nfrom math import ceil, floor, log, sqrt, factorial, pow, pi, gcd\\nfrom fractions import Fraction\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef si():\\n\\treturn str(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(mi())\\n\\ndef fii():\\n\\treturn int(stdin.readline())\\n\\ndef fsi():\\n\\treturn str(stdin.readline())\\n\\ndef fmi():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef fli():\\n\\treturn list(fmi())\\nabc = 'abcdefghijklmnopqrstuvwxyz'\\nabd = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\\nmod = 1000000007\\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\\n\\ndef getKey(item):\\n\\treturn item[0]\\n\\ndef sort2(l):\\n\\treturn sorted(l, key=getKey)\\n\\ndef d2(n, m, num):\\n\\treturn [[num for x in range(m)] for y in range(n)]\\n\\ndef isPowerOfTwo(x):\\n\\treturn x and (not x & x - 1)\\n\\ndef decimalToBinary(n):\\n\\treturn bin(n).replace('0b', '')\\n\\ndef ntl(n):\\n\\treturn [int(i) for i in str(n)]\\n\\ndef powerMod(x, y, p):\\n\\tres = 1\\n\\tx %= p\\n\\twhile y > 0:\\n\\t\\tif y & 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef gcd(x, y):\\n\\twhile y:\\n\\t\\t(x, y) = (y, x % y)\\n\\treturn x\\ngraph = defaultdict(list)\\nvisited = [0] * 1000000\\ncol = [-1] * 1000000\\n\\ndef dfs(v, c):\\n\\tif visited[v]:\\n\\t\\tif col[v] != c:\\n\\t\\t\\tprint('-1')\\n\\t\\t\\texit()\\n\\t\\treturn\\n\\tcol[v] = c\\n\\tvisited[v] = 1\\n\\tfor i in graph[v]:\\n\\t\\tdfs(i, c ^ 1)\\n\\ndef bfs(d, v):\\n\\tq = []\\n\\tq.append(v)\\n\\tvisited[v] = 1\\n\\twhile len(q) != 0:\\n\\t\\tx = q[0]\\n\\t\\tq.pop(0)\\n\\t\\tfor i in d[x]:\\n\\t\\t\\tif visited[i] != 1:\\n\\t\\t\\t\\tvisited[i] = 1\\n\\t\\t\\t\\tq.append(i)\\n\\t\\tprint(x)\\n\\ndef make_graph(e):\\n\\td = {}\\n\\tfor i in range(e):\\n\\t\\t(x, y) = mi()\\n\\t\\tif x not in d.keys():\\n\\t\\t\\td[x] = [y]\\n\\t\\telse:\\n\\t\\t\\td[x].append(y)\\n\\t\\tif y not in d.keys():\\n\\t\\t\\td[y] = [x]\\n\\t\\telse:\\n\\t\\t\\td[y].append(x)\\n\\treturn d\\n\\ndef gr2(n):\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\t(x, y) = mi()\\n\\t\\tif x not in d.keys():\\n\\t\\t\\td[x] = [y]\\n\\t\\telse:\\n\\t\\t\\td[x].append(y)\\n\\treturn d\\n\\ndef connected_components(graph):\\n\\tseen = set()\\n\\n\\tdef dfs(v):\\n\\t\\tvs = set([v])\\n\\t\\tcomponent = []\\n\\t\\twhile vs:\\n\\t\\t\\tv = vs.pop()\\n\\t\\t\\tseen.add(v)\\n\\t\\t\\tvs |= set(graph[v]) - seen\\n\\t\\t\\tcomponent.append(v)\\n\\t\\treturn component\\n\\tans = []\\n\\tfor v in graph:\\n\\t\\tif v not in seen:\\n\\t\\t\\td = dfs(v)\\n\\t\\t\\tans.append(d)\\n\\treturn ans\\n\\ndef primeFactors(n):\\n\\ts = set()\\n\\twhile n % 2 == 0:\\n\\t\\ts.add(2)\\n\\t\\tn = n // 2\\n\\tfor i in range(3, int(sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\ts.add(i)\\n\\t\\t\\tn = n // i\\n\\tif n > 2:\\n\\t\\ts.add(n)\\n\\treturn s\\n\\ndef find_all(a_str, sub):\\n\\tstart = 0\\n\\twhile True:\\n\\t\\tstart = a_str.find(sub, start)\\n\\t\\tif start == -1:\\n\\t\\t\\treturn\\n\\t\\tyield start\\n\\t\\tstart += len(sub)\\ns = si()\\nif s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB') >= 2 and s.count('AB') >= 1 and (s.count('BA') >= 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif 'AB' not in s or 'BA' not in s:\\n\\tprint('NO')\\nelse:\\n\\tab = s.index('AB')\\n\\tbar = s.rindex('BA')\\n\\tabr = s.rindex('AB')\\n\\tba = s.index('BA')\\n\\tif bar - ab >= 2 or abr - ba >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nprint('YNEOS'[not ('AB' in s and 'BA' in s.replace('AB', 'X', 1)) and (not ('BA' in s and 'AB' in s.replace('BA', 'X', 1)))::2])\\n\", \"s = input()\\nL = len(s)\\nif L > 3:\\n\\tif 'ABABA' in s or 'BABAB' in s:\\n\\t\\tprint('YES')\\n\\telif 'ABA' in s:\\n\\t\\tb = s.index('ABA')\\n\\t\\ts = s[0:b] + s[b + 3:]\\n\\t\\tif 'AB' in s or 'BA' in s:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif 'BAB' in s:\\n\\t\\tb = s.index('BAB')\\n\\t\\ts = s[0:b] + s[b + 3:]\\n\\t\\tif 'AB' in s or 'BA' in s:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif 'AB' in s:\\n\\t\\ta = s.index('AB')\\n\\t\\ts = s[0:a] + s[a + 2:]\\n\\t\\tif 'BA' in s:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nx = 'AB'\\ny = 'BA'\\nfirst = -1\\nlast = -1\\nsecond = -1\\nsecond_last = -1\\nfor i in range(0, len(a) - 1):\\n\\tif a[i:i + 2] == x and first == -1:\\n\\t\\tfirst = i\\n\\tif a[i:i + 2] == y and second == -1:\\n\\t\\tsecond = i\\nfor j in range(len(a), 0, -1):\\n\\tif a[j - 1:j + 1] == y and last == -1:\\n\\t\\tlast = j - 1\\n\\tif a[j - 1:j + 1] == x and second_last == -1:\\n\\t\\tsecond_last = j - 1\\nif first == -1 and second_last == -1 or (last == -1 and second == -1):\\n\\tprint('NO')\\nelif first != -1 and last != -1 and (abs(first - last) > 1):\\n\\tprint('YES')\\nelif first != -1 and second != -1 and (abs(first - second) > 1):\\n\\tprint('YES')\\nelif second_last != -1 and last != -1 and (abs(second_last - last) > 1):\\n\\tprint('YES')\\nelif second_last != -1 and second != -1 and (abs(second_last - second) > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from collections import Counter\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\nimport math\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef divs(n, start=2):\\n\\tdivisors = []\\n\\tfor i in range(start, int(math.sqrt(n) + 1)):\\n\\t\\tif n % i == 0:\\n\\t\\t\\tif n / i == i:\\n\\t\\t\\t\\tdivisors.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdivisors.extend([i, n // i])\\n\\treturn divisors\\nimport sys\\ninf = float('inf')\\nmod = 1000000007\\n\\ndef array():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef intt():\\n\\treturn map(int, sys.stdin.readline().split())\\nfrom bisect import bisect_left\\nimport sys\\ns = input()\\nif s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB') >= 2 and (s.count('AB') > 0 and s.count('BA') > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import re\\ns = input()\\niter = re.finditer('AB', s)\\nind = [m.start(0) for m in iter]\\niter2 = re.finditer('BA', s)\\nind2 = [m.start(0) for m in iter2]\\nif ind == [] or ind2 == []:\\n\\tprint('NO')\\nelif abs(ind[0] - ind2[len(ind2) - 1]) >= 2 or abs(ind2[0] - ind[len(ind) - 1]) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"S = input()\\nif S.count('AB') == 0 or S.count('BA') == 0:\\n\\tprint('NO')\\nelif S[S.index('AB') + 2:].count('BA') > 0 or S[S.index('BA') + 2:].count('AB') > 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"ss = input()\\nflag = flag2 = 0\\ns = ss\\nif 'AB' in s:\\n\\ts = s.replace('AB', 'X', 1)\\n\\tflag = 1\\nif 'BA' in s:\\n\\ts = s.replace('BA', 'X', 1)\\n\\tflag2 = 1\\nif flag == 0 or flag2 == 0:\\n\\tflag = flag2 = 0\\n\\ts = ss\\n\\tif 'BA' in s:\\n\\t\\ts = s.replace('BA', 'X', 1)\\n\\t\\tflag2 = 1\\n\\tif 'AB' in s:\\n\\t\\ts = s.replace('AB', 'X', 1)\\n\\t\\tflag = 1\\nif flag == 1 and flag2 == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"stringInput = input()\\na = stringInput.find('AB')\\nb = stringInput.rfind('BA')\\nc = stringInput.rfind('AB')\\nd = stringInput.find('BA')\\nif a != b and a + 1 != b and (b + 1 != a) and (a != -1) and (b != -1) or (c != d and c + 1 != d and (d + 1 != c) and (c != -1) and (d != -1)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def noverlap(s):\\n\\tab = s.count('AB')\\n\\tba = s.count('BA')\\n\\taba = s.count('ABA')\\n\\tbab = s.count('BAB')\\n\\tabab = s.count('ABAB')\\n\\tbaba = s.count('BABA')\\n\\tif ab > 1 and ba > 1 or (ab == 1 and ba == 2 and (baba == 0)) or (ab == 2 and ba == 1 and (abab == 0)) or (ab == 1 and ba > 2) or (ab > 2 and ba == 1) or (ab == 1 and ba == 1 and (aba + bab == 0)):\\n\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(noverlap(input()))\\n\", \"MOD = 1000000007\\nMOD2 = 998244353\\nii = lambda : int(input())\\nsi = lambda : input()\\ndgl = lambda : list(map(int, input()))\\nf = lambda : map(int, input().split())\\nil = lambda : list(map(int, input().split()))\\nls = lambda : list(input())\\ns = si()\\nn = len(s)\\nbl = [0] * n\\n(x, y) = (0, 0)\\nfor i in range(1, n):\\n\\tif s[i - 1] + s[i] == 'AB':\\n\\t\\tbl[i] = 1\\n\\t\\tbl[i - 1] = 1\\n\\t\\tx = 1\\n\\t\\tbreak\\nfor i in range(1, n):\\n\\tif s[i - 1] + s[i] == 'BA' and bl[i] + bl[i - 1] == 0:\\n\\t\\ty = 1\\n\\t\\tbreak\\nif x and y:\\n\\tprint('YES')\\nelse:\\n\\tbl = [0] * n\\n\\t(x, y) = (0, 0)\\n\\tfor i in range(1, n):\\n\\t\\tif s[i - 1] + s[i] == 'BA':\\n\\t\\t\\tbl[i] = 1\\n\\t\\t\\tbl[i - 1] = 1\\n\\t\\t\\tx = 1\\n\\t\\t\\tbreak\\n\\tfor i in range(1, n):\\n\\t\\tif s[i - 1] + s[i] == 'AB' and bl[i] + bl[i - 1] == 0:\\n\\t\\t\\ty = 1\\n\\t\\t\\tbreak\\n\\tif x and y:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nai = 0\\nbi = 0\\n(flag1, flag2) = (0, 0)\\nif 'AB' in s:\\n\\tai = s.index('AB')\\nelse:\\n\\tflag1 = 1\\nif 'BA' in s:\\n\\tbi = s.index('BA')\\nelse:\\n\\tflag2 = 1\\nif (ai < s.find('BA', ai + 2) or bi < s.find('AB', bi + 2)) and flag1 == 0 and (flag2 == 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = list(s)\\npos1 = []\\npos2 = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and a[i + 1] == 'B':\\n\\t\\tpos1.append([i, i + 1])\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tpos2.append([i, i + 1])\\nif len(pos1) == 0 or len(pos2) == 0:\\n\\tprint('NO')\\nelif len(pos1) == 0:\\n\\tprint('NO')\\nelif len(pos2) == 0:\\n\\tprint('NO')\\nelse:\\n\\ti = 0\\n\\tm = len(pos2) - 1\\n\\tans = False\\n\\twhile i < len(pos1):\\n\\t\\tj = m\\n\\t\\twhile j >= 0:\\n\\t\\t\\tif pos1[i][0] != pos2[j][0] and pos1[i][0] != pos2[j][1] and (pos1[i][1] != pos2[j][0]) and (pos1[i][1] != pos2[j][1]):\\n\\t\\t\\t\\tans = True\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tj = j - 1\\n\\t\\t\\tif ans:\\n\\t\\t\\t\\tbreak\\n\\t\\tif ans:\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif ans == True:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import sys\\n\\ndef fastio():\\n\\tfrom io import StringIO\\n\\tfrom atexit import register\\n\\tglobal input\\n\\tsys.stdin = StringIO(sys.stdin.read())\\n\\tinput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\tsys.stdout = StringIO()\\n\\tregister(lambda : sys.__stdout__.write(sys.stdout.getvalue()))\\nfastio()\\n\\ndef debug(*var, sep=' ', end='\\\\n'):\\n\\tprint(*var, file=sys.stderr, end=end, sep=sep)\\nINF = 10 ** 20\\nMOD = 10 ** 9 + 7\\nI = lambda : list(map(int, input().split()))\\nfrom math import gcd\\nfrom math import ceil\\nfrom collections import defaultdict as dd, Counter\\nfrom bisect import bisect_left as bl, bisect_right as br\\ns = '#' + input()\\nn = len(s)\\ns += '#'\\nans = 'NO'\\n(ab, ba) = ([], [])\\nfor i in range(2, n):\\n\\tif s[i - 1] + s[i] == 'AB':\\n\\t\\tab.append(i - 1)\\n\\tif s[i - 1] + s[i] == 'BA':\\n\\t\\tba.append(i - 1)\\nfor i in ab:\\n\\tfor j in ba:\\n\\t\\tif i + 1 != j and i - 1 != j:\\n\\t\\t\\tans = 'YES'\\n\\t\\t\\tbreak\\n\\tif ans == 'YES':\\n\\t\\tbreak\\nprint(ans)\\n\", \"s = input()\\na = []\\nb = []\\nif 'AB' in s and 'BA' in s:\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\ta.append(i)\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tb.append(i)\\n\\ta = sorted(a, reverse=True)\\n\\tb = sorted(b)\\n\\tif abs(a[0] - b[0]) > 1 or abs(a[-1] - b[-1]) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\nnew_str = string\\nABA = string.count('ABA')\\nBAB = string.count('BAB')\\naba = False\\nif ABA > 1 or BAB > 1:\\n\\tprint('YES')\\n\\texit()\\nif ABA == 1:\\n\\tnew_str = string.replace('ABA', '')\\n\\tif 'BA' in new_str or 'AB' in new_str:\\n\\t\\taba = True\\nif BAB == 1 or aba:\\n\\tnew_str = string.replace('BAB', '')\\n\\tif 'AB' in new_str or 'BA' in new_str or aba:\\n\\t\\tprint('YES')\\n\\t\\texit()\\n\\telse:\\n\\t\\tprint('NO')\\n\\t\\texit()\\nif 'AB' in new_str and 'BA' in new_str:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def sol():\\n\\ts = input().strip()\\n\\tab = s.find('AB')\\n\\tba = s.find('BA')\\n\\tif ab < 0 or ba < 0:\\n\\t\\treturn False\\n\\tif abs(ba - ab) < 2:\\n\\t\\tfirst = min(ab, ba)\\n\\t\\tsecond = max(ab, ba)\\n\\t\\ttoFind = 'BA' if ab == first else 'AB'\\n\\t\\tif s.find(toFind, first + 2) > 0:\\n\\t\\t\\treturn True\\n\\t\\ttoFind = 'AB' if toFind == 'BA' else 'BA'\\n\\t\\tif s.find(toFind, second + 2) > 0:\\n\\t\\t\\treturn True\\n\\t\\treturn False\\n\\treturn True\\n\\ndef main():\\n\\tif sol():\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"string = input()\\nif 'AB' in string and 'BA' in string:\\n\\ti = string.index('AB')\\n\\taux = string[i + 2:len(string)]\\n\\tif 'BA' in aux:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\ti = string.index('BA')\\n\\t\\taux = string[i + 2:len(string)]\\n\\t\\tif 'AB' in aux:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = list(input())\\ns.append('0')\\ns.append('0')\\n(c1, c2, c3, c4, i) = (0, 0, 0, 0, 0)\\nwhile i < len(s):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'A'):\\n\\t\\tc1 += 1\\n\\t\\ti += 2\\n\\telif s[i] == 'B' and s[i + 1] == 'A' and (s[i + 2] == 'B'):\\n\\t\\tc2 += 1\\n\\t\\ti += 2\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tc3 += 1\\n\\t\\ti += 1\\n\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tc4 += 1\\n\\t\\ti += 1\\n\\ti += 1\\nif c1 == 0 and c2 == 0 and (c3 == 0) and (c4 == 0) or (c1 == 1 and c2 == 0 and (c3 == 0) and (c4 == 0)) or (c1 == 0 and c2 == 1 and (c3 == 0) and (c4 == 0)) or (c1 == 0 and c2 == 0 and (c3 >= 1) and (c4 == 0)) or (c1 == 0 and c2 == 0 and (c3 == 0) and (c4 >= 1)):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nX = []\\na = 0\\nl = len(s)\\nwhile 1:\\n\\tp = s[a:l].find('AB')\\n\\tif p == -1:\\n\\t\\tbreak\\n\\tX.append(p + a)\\n\\ta = a + p + 2\\nY = []\\na = 0\\nl = len(s)\\nwhile 1:\\n\\tp = s[a:l].find('BA')\\n\\tif p == -1:\\n\\t\\tbreak\\n\\tY.append(p + a)\\n\\ta = a + p + 2\\nf = 0\\nfor i in X:\\n\\tif f == 1:\\n\\t\\tbreak\\n\\tfor j in Y:\\n\\t\\tif i - j >= 2 or j - i >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\nelse:\\n\\tif f == 0:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nm1 = s.count('ABA')\\nm2 = s.count('BAB')\\nn1 = s.count('AB')\\nn2 = s.count('BA')\\nif n1 > 0 and n2 > 0:\\n\\tif n1 + n2 - m1 - m2 > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nx = ''\\ny = ''\\nc = 0\\nif s.find('AB') >= 0:\\n\\tx = s[s.find('AB') + 2:]\\n\\tif x.find('BA') >= 0:\\n\\t\\tc += 1\\nif s.find('BA') >= 0:\\n\\ty = s[s.find('BA') + 2:]\\n\\tif y.find('AB') >= 0:\\n\\t\\tc += 1\\nif c > 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import heapq as hp\\nimport collections\\nimport bisect\\nimport math\\nimport re\\n\\ndef unpack(func=int):\\n\\treturn map(func, input().split())\\n\\ndef l_unpack(func=int):\\n\\treturn list(map(func, input().split()))\\n\\ndef s_unpack(func=int):\\n\\treturn sorted(map(func, input().split()))\\n\\ndef range_n():\\n\\treturn range(int(input()))\\n\\ndef counter(a):\\n\\td = {}\\n\\tfor x in a:\\n\\t\\tif x in d:\\n\\t\\t\\td[x] += 1\\n\\t\\telse:\\n\\t\\t\\td[x] = 1\\n\\treturn d\\n\\ndef getint():\\n\\treturn int(input())\\n\\ndef foo(s, i, patt):\\n\\tfor i in range(i, len(s) - 1):\\n\\t\\tif s[i:i + 2] == patt:\\n\\t\\t\\treturn True\\n\\treturn False\\n\\ndef main():\\n\\ts = input()\\n\\tans = 'NO'\\n\\tfab = fba = True\\n\\tfor i in range(len(s) - 1):\\n\\t\\tx = s[i:i + 2]\\n\\t\\tif fab and x == 'AB':\\n\\t\\t\\tfab = False\\n\\t\\t\\tif foo(s, i + 2, 'BA'):\\n\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\tbreak\\n\\t\\telif fba and x == 'BA':\\n\\t\\t\\tfba = False\\n\\t\\t\\tif foo(s, i + 2, 'AB'):\\n\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\tbreak\\n\\tprint(ans)\\nmain()\\n\", \"s = input()\\nk1 = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tk1.append(i)\\nkq = 'NO'\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tfor item in k1:\\n\\t\\t\\tif item == i - 1 or item == i + 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tkq = 'YES'\\n\\t\\t\\tbreak\\nprint(kq)\\n\", \"import sys\\nsys.setrecursionlimit(10 ** 5)\\nreadline = sys.stdin.readline\\n\\ndef process():\\n\\ts = readline().strip()\\n\\ta = s.find('AB')\\n\\tif a != -1 and s[a + 2:].find('BA') != -1:\\n\\t\\tprint('YES')\\n\\t\\treturn\\n\\ta = s.find('BA')\\n\\tif a != -1 and s[a + 2:].find('AB') != -1:\\n\\t\\tprint('YES')\\n\\t\\treturn\\n\\tprint('NO')\\nprocess()\\n\", \"import sys, os, io\\n\\ndef rs():\\n\\treturn sys.stdin.readline().rstrip()\\n\\ndef ri():\\n\\treturn int(sys.stdin.readline())\\n\\ndef ria():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef ws(s):\\n\\tsys.stdout.write(s + '\\\\n')\\n\\ndef wi(n):\\n\\tsys.stdout.write(str(n) + '\\\\n')\\n\\ndef wia(a):\\n\\tsys.stdout.write(' '.join([str(x) for x in a]) + '\\\\n')\\nimport math, datetime, functools, itertools, operator, bisect, fractions, statistics\\nfrom collections import deque, defaultdict, OrderedDict, Counter\\nfrom fractions import Fraction\\nfrom decimal import Decimal\\nfrom sys import stdout\\nfrom heapq import heappush, heappop, heapify, _heapify_max, _heappop_max, nsmallest, nlargest\\nINF = 99999999999999999999999999999999\\n\\ndef outIn(x):\\n\\tprint(x, flush=True)\\n\\treturn input()\\n\\ndef main():\\n\\tmod = 1000000007\\n\\tstarttime = datetime.datetime.now()\\n\\tif os.path.exists('input.txt'):\\n\\t\\tsys.stdin = open('input.txt', 'r')\\n\\t\\tsys.stdout = open('output.txt', 'w')\\n\\ttc = 1\\n\\tfor _ in range(tc):\\n\\t\\ts = list(rs())\\n\\t\\tdab = {}\\n\\t\\tdba = {}\\n\\t\\tfor i in range(len(s) - 1):\\n\\t\\t\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\t\\t\\tdab[i] = 1\\n\\t\\t\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\t\\t\\tdba[i] = 1\\n\\t\\tflag = 1\\n\\t\\tans = 'NO'\\n\\t\\tfor i in dab:\\n\\t\\t\\tfor j in dba:\\n\\t\\t\\t\\tif abs(i - j) > 1:\\n\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\tflag = 0\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif flag == 0:\\n\\t\\t\\t\\tbreak\\n\\t\\tprint(ans)\\n\\tendtime = datetime.datetime.now()\\n\\ttime = (endtime - starttime).total_seconds() * 1000\\n\\tif os.path.exists('input.txt'):\\n\\t\\tprint('Time:', time, 'ms')\\n\\nclass FastReader(io.IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, fd, chunk_size=1024 * 8):\\n\\t\\tself._fd = fd\\n\\t\\tself._chunk_size = chunk_size\\n\\t\\tself.buffer = io.BytesIO()\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self, size=-1):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size if size == -1 else size))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\nclass FastWriter(io.IOBase):\\n\\n\\tdef __init__(self, fd):\\n\\t\\tself._fd = fd\\n\\t\\tself.buffer = io.BytesIO()\\n\\t\\tself.write = self.buffer.write\\n\\n\\tdef flush(self):\\n\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass FastStdin(io.IOBase):\\n\\n\\tdef __init__(self, fd=0):\\n\\t\\tself.buffer = FastReader(fd)\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\nclass FastStdout(io.IOBase):\\n\\n\\tdef __init__(self, fd=1):\\n\\t\\tself.buffer = FastWriter(fd)\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.flush = self.buffer.flush\\nsys.stdin = FastStdin()\\nsys.stdout = FastStdout()\\nmain()\\n\", \"from math import *\\nfrom copy import *\\nfrom heapq import *\\nfrom string import *\\nfrom random import *\\nfrom bisect import *\\nfrom sys import stdin\\nfrom sys import maxsize\\nfrom operator import *\\nfrom itertools import *\\nfrom collections import Counter\\nfrom collections import defaultdict\\n\\ndef solve(l):\\n\\tn = len(l)\\n\\ti = l.find('AB')\\n\\tj = l.rfind('BA')\\n\\tk1 = l.rfind('AB')\\n\\tk2 = l.find('BA')\\n\\tf = 1\\n\\tif i == -1 or j == -1:\\n\\t\\tf = 0\\n\\telif abs(j - i) == 1 and abs(k1 - k2) == 1:\\n\\t\\tf = 0\\n\\treturn 'YES' if f else 'NO'\\nl = input()\\nans = solve(l)\\nprint(ans)\\n\", \"import sys\\nfrom functools import lru_cache\\nfrom heapq import merge, heapify, heappop, heappush\\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\\nfrom collections import defaultdict as dd, deque, Counter as c\\nfrom itertools import combinations as comb, permutations as perm\\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\\nmod = pow(10, 9) + 7\\nmod2 = 998244353\\n\\ndef data():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef out(var):\\n\\tsys.stdout.write(str(var))\\n\\ndef outln(var):\\n\\tsys.stdout.write(str(var) + '\\\\n')\\n\\ndef l():\\n\\treturn list(sp())\\n\\ndef sl():\\n\\treturn list(ssp())\\n\\ndef sp():\\n\\treturn map(int, data().split())\\n\\ndef ssp():\\n\\treturn map(str, data().split())\\n\\ndef l1d(n, val=0):\\n\\treturn [val for i in range(n)]\\n\\ndef l2d(n, m, val=0):\\n\\treturn [l1d(n, val) for j in range(m)]\\ns = data()\\n(a, b) = ([], [])\\ni = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta.append((i, i + 1))\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb.append((i, i + 1))\\nif len(a) >= 2 and len(b) >= 2:\\n\\tout('YES')\\n\\texit()\\nif len(a) == 0 or len(b) == 0:\\n\\tout('NO')\\n\\texit()\\nif len(a) == 1:\\n\\tcnt = 0\\n\\tfor i in b:\\n\\t\\tif a[0][0] in i or a[0][1] in i:\\n\\t\\t\\tcnt += 1\\n\\tif cnt == len(b):\\n\\t\\tout('NO')\\n\\t\\texit()\\nif len(b) == 1:\\n\\tcnt = 0\\n\\tfor i in a:\\n\\t\\tif b[0][0] in i or b[0][1] in i:\\n\\t\\t\\tcnt += 1\\n\\tif cnt == len(a):\\n\\t\\tout('NO')\\n\\t\\texit()\\nout('YES')\\n\", \"s = input()\\na = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta.append((i, i + 1))\\nans = False\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tfor (x, y) in a:\\n\\t\\t\\tif x not in [i, i + 1] and y not in [i, i + 1]:\\n\\t\\t\\t\\tans = True\\n\\t\\t\\t\\tbreak\\nif ans:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nimport re\\nfrom bisect import *\\nfrom math import floor, sqrt, ceil, factorial as F, gcd, pi\\nfrom itertools import chain, combinations, permutations, accumulate\\nfrom collections import Counter, defaultdict, OrderedDict, deque\\nfrom array import array\\nINT_MAX = sys.maxsize\\nINT_MIN = -sys.maxsize - 1\\nmod = 1000000007\\nch = 'abcdefghijklmnopqrstuvwxyz'\\nlcm = lambda a, b: a * b // gcd(a, b)\\nsetbit = lambda x: bin(x)[2:].count('1')\\ninput = lambda : sys.stdin.readline()\\n\\ndef solve():\\n\\ts = input().replace('\\\\n', '')\\n\\t(ab, ba) = (s.find('AB'), s.find('BA'))\\n\\tprint('YES' if ab + 1 and s.find('BA', ab + 2) + 1 or (ba + 1 and s.find('AB', ba + 2) + 1) else 'NO')\\nsolve()\\n\", \"s = input()\\na = s.count('AB')\\nb = s.count('BA')\\nt = s.count('ABA')\\nu = s.count('BAB')\\ns = a + b - t - u\\nif s >= 2 and a > 0 and (b > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"r = input()\\nn = len(r)\\ne = 0\\ni = 0\\nfor i in range(0, n - 1):\\n\\tif r[i:i + 2] == 'AB':\\n\\t\\tbreak\\nfor j in range(i + 2, n - 1):\\n\\tif r[j:j + 2] == 'BA':\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\ni = 0\\nfor i in range(0, n - 1):\\n\\tif r[i:i + 2] == 'BA':\\n\\t\\tbreak\\nfor j in range(i + 2, n - 1):\\n\\tif r[j:j + 2] == 'AB':\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\nprint('NO')\\n\", \"fl = lambda a: s.find(a)\\nfr = lambda a: s.rfind(a)\\nf = lambda l, r: r - l > 1 and l >= 0 and (r >= 0)\\n(x, y) = ('AB', 'BA')\\ns = input()\\nprint('YES' if f(fl(x), fr(y)) or f(fl(y), fr(x)) else 'NO')\\n\", \"def ok(s, a, b):\\n\\tindexa = s.find(a)\\n\\tif indexa == -1:\\n\\t\\treturn False\\n\\treturn s.find(b, indexa + 2) != -1\\n\\ndef __starting_point():\\n\\ts = input().strip()\\n\\tif ok(s, 'AB', 'BA') or ok(s, 'BA', 'AB'):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n__starting_point()\\n\", \"s = input()\\nflagA = 0\\nflagB = 0\\nflagABBA = 0\\n(i, j) = (0, 1)\\nwhile j < len(s):\\n\\tif j + 1 < len(s) and s[i] == 'A' and (s[j] == 'B') and (s[j + 1] == 'A'):\\n\\t\\tflagABBA += 1\\n\\t\\ti += 3\\n\\t\\tj += 3\\n\\telif j + 1 < len(s) and s[i] == 'B' and (s[j] == 'A') and (s[j + 1] == 'B'):\\n\\t\\tflagABBA += 1\\n\\t\\ti += 3\\n\\t\\tj += 3\\n\\telif s[i] == 'A' and s[j] == 'B':\\n\\t\\tflagA = 1\\n\\t\\ti += 2\\n\\t\\tj += 2\\n\\telif s[i] == 'B' and s[j] == 'A':\\n\\t\\tflagB = 1\\n\\t\\ti += 2\\n\\t\\tj += 2\\n\\telse:\\n\\t\\ti += 1\\n\\t\\tj += 1\\nif flagA > 0 and flagB > 0 or (flagA > 0 and flagABBA > 0) or (flagB > 0 and flagABBA > 0) or (flagABBA > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(flag1, flag2) = (0, 0)\\ntry:\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\traise\\n\\t\\t\\tflag1 = True\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\traise\\n\\t\\t\\tflag2 = True\\n\\t\\tif flag1 and flag2:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\traise\\n\\telse:\\n\\t\\tprint('NO')\\nexcept:\\n\\tpass\\n\", \"s = input()\\nyes = False\\nif 'AB' in s:\\n\\ti = s.index('AB')\\n\\tn = s[:i] + ' ' + s[i + 2:]\\n\\tif n.count('BA') > 0:\\n\\t\\tyes = True\\nif 'BA' in s:\\n\\ti = s.index('BA')\\n\\tn = s[:i] + ' ' + s[i + 2:]\\n\\tif n.count('AB') > 0:\\n\\t\\tyes = True\\nif yes:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def check():\\n\\tid1 = s.find(order[0])\\n\\tid2 = s.rfind(order[1])\\n\\tif id1 == -1 or id2 == -1:\\n\\t\\treturn False\\n\\treturn id1 + 1 < id2\\ns = input()\\norder = ['AB', 'BA']\\nif check():\\n\\tprint('YES')\\nelse:\\n\\torder = order[::-1]\\n\\tprint('YES' if check() else 'NO')\\n\", \"s = input()\\nflag = False\\n(l1, l2) = ([], [])\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tl1.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tl2.append(i)\\nfor i in l1:\\n\\tfor j in l2:\\n\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = True\\n\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tbreak\\nif flag == False:\\n\\tprint('NO')\\n\", \"s = input()\\nx = 1\\nwhile x < len(s):\\n\\tif s[x - 1] == 'A' and s[x] == 'B':\\n\\t\\tif 'BA' in s[x + 1:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\telif s[x - 1] == 'B' and s[x] == 'A':\\n\\t\\tif 'AB' in s[x + 1:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\tx += 1\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nslen = len(s)\\nab = []\\nba = []\\nstart = 0\\nwhile start < slen - 1:\\n\\tif s[start] == 'A' and s[start + 1] == 'B':\\n\\t\\tab.append(start + 1)\\n\\telif s[start] == 'B' and s[start + 1] == 'A':\\n\\t\\tba.append(start + 1)\\n\\tstart += 1\\nflag = 0\\nfor x in ab:\\n\\tfor y in ba:\\n\\t\\tif abs(x - y) > 1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tbreak\\nprint('YES') if flag == 1 else print('NO')\\n\", \"string = str(input())\\nflag = False\\nfor i in range(len(string) - 1):\\n\\tif string[i] + string[i + 1] == 'AB':\\n\\t\\tif 'BA' in string[:i]:\\n\\t\\t\\tflag = True\\n\\t\\tif 'BA' in string[i + 2:]:\\n\\t\\t\\tflag = True\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"__author__ = 'Bian'\\nst = input()\\nab1 = st.find('AB')\\nba1 = st.find('BA', ab1 + 2)\\nba2 = st.find('BA')\\nab2 = st.find('AB', ba2 + 2)\\nif ab1 != -1 and ba1 != -1 or (ab2 != -1 and ba2 != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(ab, ba) = ([], [])\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nfor u in ab:\\n\\tfor v in ba:\\n\\t\\tif abs(u - v) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nt = s\\nhas_ab = has_ba = False\\nif 'AB' in t:\\n\\thas_ab = True\\n\\tt = t.replace('AB', ' ', 1)\\nif 'BA' in t:\\n\\thas_ba = True\\nif not (has_ab and has_ba):\\n\\thas_ab = has_ba = False\\n\\tif 'BA' in s:\\n\\t\\thas_ba = True\\n\\t\\ts = s.replace('BA', ' ', 1)\\n\\tif 'AB' in s:\\n\\t\\thas_ab = True\\nprint('YES' if has_ab and has_ba else 'NO')\\n\", \"s = input()\\nslen = len(s)\\nstart = 0\\nflag = 0\\nab = 0\\nba = 0\\nwhile start < slen - 1:\\n\\tif s[start] == 'A' and s[start + 1] == 'B':\\n\\t\\tif ba > 0 and abs(ba - (start + 1)) > 1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\t\\tif ab == 0:\\n\\t\\t\\tab = start + 1\\n\\telif s[start] == 'B' and s[start + 1] == 'A':\\n\\t\\tif ab > 0 and abs(ab - (start + 1)) > 1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\t\\tif ba == 0:\\n\\t\\t\\tba = start + 1\\n\\tstart += 1\\nprint('YES') if flag == 1 else print('NO')\\n\", \"import sys\\ns = sys.stdin.readline()\\nans = 'NO'\\nAB = []\\nBA = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tAB.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tBA.append(i)\\nfor a in AB:\\n\\tfor b in BA:\\n\\t\\tif abs(a - b) >= 2:\\n\\t\\t\\tans = 'YES'\\n\\t\\t\\tbreak\\nprint(ans)\\n\", \"s = input()\\nflag = 0\\nfor i in range(0, len(s) - 2):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"user = input()\\nstr = ' '\\nA = False\\nB = False\\nn = 0\\nif 'AB' in user:\\n\\tn = user.find('AB')\\n\\tstr = user[n + 2:]\\n\\tif 'BA' in str:\\n\\t\\tA = True\\nif A == False and 'BA' in user:\\n\\tu = user.find('BA')\\n\\tstr = user[u + 2:]\\n\\tif 'AB' in str:\\n\\t\\tB = True\\nif A == True:\\n\\tprint('YES')\\nelif B == True:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\nif 'AB' in s and 'BA' in s:\\n\\ts1 = s.replace('AB', '__', 1)\\n\\tif 'BA' in s1:\\n\\t\\tans1 = 1\\n\\telse:\\n\\t\\tans1 = 0\\n\\ts2 = s.replace('BA', '__', 1)\\n\\tif 'AB' in s2:\\n\\t\\tans2 = 1\\n\\telse:\\n\\t\\tans2 = 0\\n\\tif ans1 == 1 or ans2 == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nCA = []\\nCB = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tCA.append(i)\\n\\tif s[i] == 'B':\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tCB.append(i)\\nif len(CA) and len(CB) and (abs(CA[len(CA) - 1] - CB[0]) >= 2 or abs(CB[len(CB) - 1] - CA[0]) >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def __starting_point():\\n\\ts = input()\\n\\ta = None\\n\\tb = None\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tif a is None:\\n\\t\\t\\t\\ta = i\\n\\t\\t\\tif b is not None and abs(i - b) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tif b is None:\\n\\t\\t\\t\\tb = i\\n\\t\\t\\tif a is not None and abs(a - i) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\tprint('NO')\\n__starting_point()\\n\", \"s = input()\\n(x, y, m, n) = (-1, -1, -1, -1)\\nx = s.find('AB')\\ns1 = s[x + 2:]\\ny = s1.find('BA')\\nm = s.find('BA')\\ns2 = s[m + 2:]\\nn = s2.find('AB')\\nif m >= 0 and n >= 0 or (x >= 0 and y >= 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na1 = 0\\na2 = 0\\nb1 = []\\nb2 = []\\nfor i in range(1, len(s)):\\n\\tif s[i] == 'B' and s[i - 1] == 'A':\\n\\t\\ta1 += 1\\n\\t\\tb1.append(i - 1)\\n\\t\\tb1.append(i)\\n\\tif s[i] == 'A' and s[i - 1] == 'B':\\n\\t\\ta2 += 1\\n\\t\\tb2.append(i - 1)\\n\\t\\tb2.append(i)\\nif a1 == 0 or a2 == 0:\\n\\tprint('NO')\\nelif a1 == 1 and a2 == 2:\\n\\tif b1[0] == b2[1] and b1[1] == b2[2]:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif a2 == 1 and a1 == 2:\\n\\tif b2[0] == b1[1] and b2[1] == b1[2]:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif a1 > 1 or a2 > 1:\\n\\tprint('YES')\\nelif a1 == 1 and a2 == 1:\\n\\tif b1[1] == b2[0] or b1[0] == b2[1]:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nlf = s.find('AB')\\nls = s.find('BA')\\nrf = s.rfind('AB')\\nrs = s.rfind('BA')\\nif lf == -1 or ls == -1:\\n\\tprint('NO')\\nelif abs(ls - lf) != 1 or abs(rs - rf) != 1:\\n\\tprint('YES')\\nelif abs(rs - lf) != 1 or abs(rf - ls) != 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nl = [[0, 0] for i in range(n + 1)]\\nflag = 0\\nfor i in range(len(s) - 1):\\n\\tl[i + 2][0] = l[i + 1][0]\\n\\tl[i + 2][1] = l[i + 1][1]\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tl[i + 2][0] = l[i + 2][0] + 1\\n\\t\\tif l[i][1] >= 1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tl[i + 2][1] = l[i + 2][1] + 1\\n\\t\\tif l[i][0] >= 1:\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\nprint('YES' if flag == 1 else 'NO')\\n\", \"import math as mt\\nimport sys, string, bisect\\ninput = sys.stdin.readline\\nimport random\\nfrom collections import deque, defaultdict\\nL = lambda : list(map(int, input().split()))\\nLs = lambda : list(input().split())\\nM = lambda : map(int, input().split())\\nI = lambda : int(input())\\ns = input().strip()\\nc = 0\\ni = 0\\nwhile i < len(s):\\n\\tif c == 0:\\n\\t\\tif i + 1 < len(s):\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\ti += 1\\n\\telif c > 0:\\n\\t\\tif c == 1:\\n\\t\\t\\tif i + 1 < len(s):\\n\\t\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\texit()\\n\\ti += 1\\ni = 0\\nc = 0\\nwhile i < len(s):\\n\\tif c == 0:\\n\\t\\tif i + 1 < len(s):\\n\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\ti += 1\\n\\telif c > 0:\\n\\t\\tif c == 1:\\n\\t\\t\\tif i + 1 < len(s):\\n\\t\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\texit()\\n\\ti += 1\\nprint('NO')\\n\", \"s = input()\\nn = len(s)\\ni = 0\\nif n <= 3:\\n\\tprint('NO')\\nelse:\\n\\ti = 0\\n\\td = []\\n\\te = []\\n\\twhile i < n:\\n\\t\\tif i != n - 1:\\n\\t\\t\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\t\\t\\td.append(i + 1)\\n\\t\\t\\t\\ti = i + 1\\n\\t\\t\\telif s[i] + s[i + 1] == 'BA':\\n\\t\\t\\t\\te.append(i + 1)\\n\\t\\t\\t\\ti = i + 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti = i + 1\\n\\t\\telse:\\n\\t\\t\\ti = i + 1\\n\\tflag = 0\\n\\tif d != []:\\n\\t\\tfor i in e:\\n\\t\\t\\tif abs(d[0] - i) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag == 0:\\n\\t\\tif e != []:\\n\\t\\t\\tfor i in d:\\n\\t\\t\\t\\tif abs(e[0] - i) > 1:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\tbreak\\n\\tif flag == 0:\\n\\t\\tprint('NO')\\n\", \"import collections\\na = input()\\nflag = 0\\nflag1 = 0\\ni = 1\\nwhile i < len(a):\\n\\tif a[i] == 'B' and a[i - 1] == 'A' and (flag == 0):\\n\\t\\tflag = 1\\n\\t\\ti += 1\\n\\telif a[i] == 'A' and a[i - 1] == 'B' and (flag1 == 0) and (flag == 1):\\n\\t\\tflag1 = 1\\n\\t\\ti += 1\\n\\ti += 1\\nif flag == 1 and flag1 == 1:\\n\\tprint('YES')\\nelse:\\n\\tflag = 0\\n\\tflag1 = 0\\n\\ti = 1\\n\\twhile i < len(a):\\n\\t\\tif a[i] == 'A' and a[i - 1] == 'B' and (flag1 == 0):\\n\\t\\t\\tflag1 = 1\\n\\t\\t\\ti += 1\\n\\t\\telif a[i] == 'B' and a[i - 1] == 'A' and (flag == 0) and (flag1 == 1):\\n\\t\\t\\tflag = 1\\n\\t\\t\\ti += 1\\n\\t\\ti += 1\\n\\tif flag == 1 and flag1 == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nif 'AB' in s:\\n\\tif 'BA' in s[s.index('AB') + 2:] or 'BA' in s[0:s.index('AB')]:\\n\\t\\tprint('YES')\\n\\telif 'BA' in s:\\n\\t\\tif 'AB' in s[s.index('BA') + 2:] or 'AB' in s[0:s.index('BA')]:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def solution():\\n\\ts = input()\\n\\tcurrent_a = -2\\n\\tcurrent_b = -2\\n\\tab = []\\n\\tba = []\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i] == 'A':\\n\\t\\t\\tcurrent_a = i\\n\\t\\tif s[i] == 'B' and current_a == i - 1:\\n\\t\\t\\tab.append((i - 1, i))\\n\\tfor j in range(len(s)):\\n\\t\\tif s[j] == 'B':\\n\\t\\t\\tcurrent_b = j\\n\\t\\tif s[j] == 'A' and current_b == j - 1:\\n\\t\\t\\tba.append((j - 1, j))\\n\\tfor k in range(len(ab)):\\n\\t\\tfor l in range(len(ba)):\\n\\t\\t\\tif not ab[k][0] == ba[l][1] and (not ab[k][1] == ba[l][0]):\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\tprint('NO')\\nsolution()\\n\", \"s = input()\\na = s.find('AB')\\nb = s.find('BA')\\nif a != -1 and s.find('BA', a + 2) != -1:\\n\\tprint('YES')\\nelif b != -1 and s.find('AB', b + 2) != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\noutput = False\\nif 'AB' in string and (not output):\\n\\tstring2 = string.replace('AB', '*', 1)\\n\\tif 'BA' in string2:\\n\\t\\tprint('YES')\\n\\t\\toutput = True\\nif 'BA' in string and (not output):\\n\\tstring2 = string.replace('BA', '*', 1)\\n\\tif 'AB' in string2:\\n\\t\\tprint('YES')\\n\\t\\toutput = True\\nif not output:\\n\\tprint('NO')\\n\", \"s = input()\\ns1 = 'ABBA'\\ns2 = 'BAAB'\\nstart = 0\\nflag = 0\\nprev = 0\\nfor i in range(len(s) - 1):\\n\\tif prev == 1:\\n\\t\\tprev = 0\\n\\t\\tcontinue\\n\\tif s[i] == s1[start]:\\n\\t\\tif s[i + 1] == s1[start + 1]:\\n\\t\\t\\tstart += 2\\n\\t\\t\\tprev = 1\\n\\tif start == 4:\\n\\t\\tflag = 1\\n\\t\\tbreak\\nstart = 0\\nprev = 0\\nfor i in range(len(s) - 1):\\n\\tif prev == 1:\\n\\t\\tprev = 0\\n\\t\\tcontinue\\n\\tif s[i] == s2[start]:\\n\\t\\tif s[i + 1] == s2[start + 1]:\\n\\t\\t\\tstart += 2\\n\\t\\t\\tprev = 1\\n\\tif start == 4:\\n\\t\\tflag = 1\\n\\t\\tbreak\\nif flag == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nc1 = c2 = c3 = 0\\ni = 0\\nwhile i < len(s):\\n\\tif s[i:i + 3] == 'ABA' or s[i:i + 3] == 'BAB':\\n\\t\\tc3 += 1\\n\\t\\ti += 3\\n\\telif s[i:i + 2] == 'AB':\\n\\t\\tc1 += 1\\n\\t\\ti += 2\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tc2 += 1\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\nprint('YES' if c3 >= 2 or (c1 and (c2 or c3)) or (c2 and (c1 or c3)) else 'NO')\\n\", \"st = input()\\na = 0\\nif st.find('AB') != -1 and st.find('BA') != -1:\\n\\tk = st.replace('AB', 'NN', 1)\\n\\tl = st.replace('BA', 'NN', 1)\\n\\tif k.find('BA') != -1 or l.find('AB') != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"S = input()\\nN = len(S)\\nab = []\\nba = []\\nfor i in range(N - 1):\\n\\tif S[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif S[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nflg = False\\nfor x in ab:\\n\\tif flg:\\n\\t\\tbreak\\n\\tfor y in ba:\\n\\t\\tif abs(x - y) > 1:\\n\\t\\t\\tflg = True\\n\\t\\t\\tbreak\\nif flg:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab = []\\nflag = False\\nab = False\\nba = False\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif i < len(s) - 2 and s[i:i + 3] in ('ABA', 'BAB'):\\n\\t\\tif flag:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\t\\tflag = True\\n\\t\\ti += 3\\n\\t\\tif ab + ba + flag >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\t\\tcontinue\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab = True\\n\\t\\ti += 2\\n\\t\\tif ab + ba + flag >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\t\\tcontinue\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba = True\\n\\t\\ti += 2\\n\\t\\tif ab + ba + flag >= 2:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\t\\tcontinue\\n\\ti += 1\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nx = s.count('AB')\\ny = s.count('BA')\\nif x > 1:\\n\\tif y > 1:\\n\\t\\tprint('YES')\\n\\telif y == 1:\\n\\t\\ts = s.replace('BA', ' ')\\n\\t\\tif s.count('AB'):\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelif x == 1:\\n\\ts = s.replace('AB', ' ')\\n\\tif s.count('BA'):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def has_non_overlapping_substrings(string):\\n\\tindex = string.find('AB')\\n\\tif index >= 0 and string.find('BA', index + 2) > 0:\\n\\t\\treturn True\\n\\tindex = string.find('BA')\\n\\tif index >= 0 and string.find('AB', index + 2) > 0:\\n\\t\\treturn True\\n\\treturn False\\n\\ndef run_alg():\\n\\tresult = has_non_overlapping_substrings(input())\\n\\tprint('YES' if result else 'NO')\\nrun_alg()\\n\", \"s = input()\\nl = len(s)\\nab = []\\nba = []\\nfor i in range(l - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nif not ab or not ba:\\n\\tprint('NO')\\nelse:\\n\\tbk = False\\n\\tfor i in ab:\\n\\t\\tfor j in ba:\\n\\t\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\t\\tbk = True\\n\\t\\t\\t\\tbreak\\n\\t\\tif bk:\\n\\t\\t\\tbreak\\n\\tif bk:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\na = s.count('AB')\\nb = s.count('BA')\\nc = s.count('ABA')\\nd = s.count('BAB')\\nprint(['NO', 'YES'][(a + b) * (a != 0 and b != 0) - c - d > 1])\\n\", \"from sys import stdin, stdout\\nfrom math import gcd, ceil, sqrt\\nfrom collections import Counter\\nfrom bisect import bisect_left, bisect_right\\nii1 = lambda : int(stdin.readline().strip())\\nis1 = lambda : stdin.readline().strip()\\niia = lambda : list(map(int, stdin.readline().strip().split()))\\nisa = lambda : stdin.readline().strip().split()\\nmod = 1000000007\\ns = is1()\\n(a, b) = ([], [])\\nfor i in range(1, len(s)):\\n\\tif s[i] == 'B' and s[i - 1] == 'A':\\n\\t\\ta.append(i - 1)\\n\\telif s[i] == 'A' and s[i - 1] == 'B':\\n\\t\\tb.append(i - 1)\\nif not (len(a) and len(b)):\\n\\tprint('NO')\\nelif abs(a[0] - b[-1]) > 1 or abs(a[-1] - b[0]) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input().strip()\\nl1 = s.find('AB')\\nl2 = s.find('BA')\\nif l1 == -1 or l2 == -1:\\n\\tprint('NO')\\nelse:\\n\\tk = s[l1 + 2:].find('BA')\\n\\tif k == -1:\\n\\t\\tk = s[l2 + 2:].find('AB')\\n\\t\\tif k == -1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"S = list(input())\\n\\ndef test_target(self, target, p):\\n\\tfor i in target:\\n\\t\\tif p - i > 1:\\n\\t\\t\\treturn True\\n\\tself.append(p)\\n\\treturn False\\nAB_list = list()\\nBA_list = list()\\nfor i in range(1, len(S)):\\n\\tif S[i - 1] == 'A' and S[i] == 'B':\\n\\t\\tif test_target(AB_list, BA_list, i):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\tif S[i - 1] == 'B' and S[i] == 'A':\\n\\t\\tif test_target(BA_list, AB_list, i):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"import re\\ns = input()\\np1 = re.compile('((?!AB)[A-Z])*AB((?!BA)[A-Z])*BA[A-Z]*')\\np2 = re.compile('((?!BA)[A-Z])*BA((?!AB)[A-Z])*AB[A-Z]*')\\nprint('YES' if p1.match(s) or p2.match(s) else 'NO')\\n\", \"ab = 'AB'\\nba = 'BA'\\n\\ndef res(s, j):\\n\\tglobal ab, ba\\n\\tif j:\\n\\t\\t(ab, ba) = (ba, ab)\\n\\tai = s.find(ab)\\n\\tif ai == -1:\\n\\t\\treturn 0\\n\\tfp = s[:ai]\\n\\tsp = s[ai + 2:]\\n\\tbi = fp.find(ba)\\n\\tif bi == -1:\\n\\t\\tbi = sp.find(ba)\\n\\tif bi == -1:\\n\\t\\treturn 0\\n\\treturn 1\\ns = input()\\ns = 'YES' if res(s, 0) or res(s, 1) else 'NO'\\nprint(s)\\n\", \"x = str(input())\\nab = x.find('AB')\\nabb = x[ab + 2:].find('BA')\\nba = x.find('BA')\\nbaa = x[ba + 2:].find('AB')\\nprint('YES' if ab != -1 and abb != -1 or (ba != -1 and baa != -1) else 'NO')\\n\", \"def find(d, t1, t2):\\n\\tfor i in range(len(d)):\\n\\t\\tif i + 1 < len(d) and d[i] == t1 and (d[i + 1] == t2):\\n\\t\\t\\treturn True\\n\\treturn False\\n\\ndef solve(d):\\n\\tfound = False\\n\\tind = 0\\n\\tn = len(d)\\n\\tf = True\\n\\tl = True\\n\\twhile ind < n:\\n\\t\\tif f and d[ind] == 'A' and (ind + 1 < n) and (d[ind + 1] == 'B'):\\n\\t\\t\\tfound = find(d[ind + 2:], 'B', 'A')\\n\\t\\t\\tf = False\\n\\t\\telif l and d[ind] == 'B' and (ind + 1 < n) and (d[ind + 1] == 'A'):\\n\\t\\t\\tfound = find(d[ind + 2:], 'A', 'B')\\n\\t\\t\\tl = False\\n\\t\\tind += 1\\n\\t\\tif found:\\n\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\n\\ndef main():\\n\\td = input()\\n\\tans = solve(d)\\n\\tprint(ans)\\nmain()\\n\", \"def solve(s, s1, s2):\\n\\tpos = s.find(s1)\\n\\tif pos == -1:\\n\\t\\treturn False\\n\\tpos = s.find(s2, pos + 2)\\n\\tif pos == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\treturn True\\ns = input()\\nif solve(s, 'AB', 'BA') or solve(s, 'BA', 'AB'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nx = 0\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif i < len(s) - 2 and s[i] == 'A' and (s[i + 1] == 'B') and (s[i + 2] == 'A'):\\n\\t\\tx = 1\\n\\t\\tbreak\\n\\telif i < len(s) - 2 and s[i] == 'B' and (s[i + 1] == 'A') and (s[i + 2] == 'B'):\\n\\t\\tx = 1\\n\\t\\tbreak\\n\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tx = 2\\n\\t\\tbreak\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tx = 3\\n\\t\\tbreak\\n\\ti += 1\\nif x == 2:\\n\\ti += 2\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tx = 4\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\nelif x == 3:\\n\\ti += 2\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tx = 4\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\nelif x == 1:\\n\\ti += 3\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tx = 4\\n\\t\\t\\tbreak\\n\\t\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tx = 4\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\nif x == 4:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = input()\\nab = n.find('AB')\\nbar = n.rfind('BA')\\nabr = n.rfind('AB')\\nba = n.find('BA')\\nprint(['NO', 'YES'][(abs(ab - bar) > 1 or abs(abr - ba) > 1) and min(ab, ba, abr, bar) >= 0])\\n\", \"def isabba(s):\\n\\tn = len(s)\\n\\t(i, ab, ba) = (0, 0, 0)\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tab = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif ab == 0:\\n\\t\\treturn False\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tba = 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif ba:\\n\\t\\treturn True\\n\\treturn False\\n\\ndef isbaab(s):\\n\\tn = len(s)\\n\\t(i, ab, ba) = (0, 0, 0)\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tab = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif ab == 0:\\n\\t\\treturn False\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tba = 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif ba:\\n\\t\\treturn True\\n\\treturn False\\ns = input()\\nif isabba(s) or isbaab(s):\\n\\tprint('YES', end='')\\nelse:\\n\\tprint('NO', end='')\\n\", \"s = '*' + input() + '**'\\nn = len(s) - 3\\nif n < 1:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(1, n):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tc = 0\\n\\t\\t\\tfor j in range(i + 2, n):\\n\\t\\t\\t\\tif s[j:j + 2] == 'BA':\\n\\t\\t\\t\\t\\tc = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif c == 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit(0)\\n\\t\\t\\tbreak\\n\\tfor i in range(1, n):\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tc = 0\\n\\t\\t\\tfor j in range(i + 2, n):\\n\\t\\t\\t\\tif s[j:j + 2] == 'AB':\\n\\t\\t\\t\\t\\tc = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif c == 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit(0)\\n\\t\\t\\tbreak\\n\\tprint('NO')\\n\", \"s = input()\\n\\ndef check_ABBA(s, A, B):\\n\\tprev_c = '.'\\n\\tfor (i, c) in enumerate(s):\\n\\t\\tif c == B and prev_c == A:\\n\\t\\t\\tbreak\\n\\t\\tprev_c = c\\n\\telse:\\n\\t\\treturn False\\n\\tprev_c = '.'\\n\\tfor c in s[i + 1:]:\\n\\t\\tif c == A and prev_c == B:\\n\\t\\t\\treturn True\\n\\t\\tprev_c = c\\n\\treturn False\\nif check_ABBA(s, 'A', 'B'):\\n\\tprint('YES')\\nelif check_ABBA(s, 'B', 'A'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import *\\ninput = stdin.readline\\ns = input()\\nif 'AB' not in s or 'BA' not in s:\\n\\tprint('NO')\\nelse:\\n\\ta = s.index('AB')\\n\\tb = s.rindex('AB')\\n\\tc = s.index('BA')\\n\\td = s.rindex('BA')\\n\\tif d - a > 1 or b - c > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"def f(inp, ab, ba):\\n\\tab1 = inp.find(ab)\\n\\tif ab1 == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tba1 = inp.find(ba, ab1 + 2)\\n\\t\\tif ba1 == -1:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\treturn True\\ninp = input()\\nif f(inp, 'AB', 'BA') or f(inp, 'BA', 'AB'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"x = input()\\nab = x.count('AB')\\naba = x.count('ABA')\\nba = x.count('BA')\\nbab = x.count('BAB')\\nif ab + ba - aba - bab >= 2 and (ab >= 1 and ba >= 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\na = s.find('AB')\\nb = s.rfind('BA')\\nif abs(a - b) > 1 and min(a, b) >= 0:\\n\\tprint('YES')\\n\\texit()\\na = s.rfind('AB')\\nb = s.find('BA')\\nif abs(a - b) > 1 and min(a, b) >= 0:\\n\\tprint('YES')\\n\\texit()\\nprint('NO')\\n\", \"a = []\\nb = []\\nx = input()\\nfor i in range(len(x) - 1):\\n\\tif x[i] + x[i + 1] == 'AB':\\n\\t\\ta.append(i)\\n\\telif x[i] + x[i + 1] == 'BA':\\n\\t\\tb.append(i)\\nif a == [] or b == []:\\n\\tprint('NO')\\n\\tquit()\\nif abs(min(a) - max(b)) > 1 or abs(max(a) - min(b)) > 1:\\n\\tprint('YES')\\n\\tquit()\\nprint('NO')\\n\", \"s = input()\\ni = s.find('AB')\\nj = s.rfind('BA')\\ni2 = s.rfind('AB')\\nj2 = s.find('BA')\\nprint('YES' if i != -1 and j != -1 and (abs(i - j) > 1 or abs(i2 - j2) > 1) else 'NO')\\n\", \"s = input()\\ns1 = s\\nt = 0\\nz = 0\\nif s.find('AB') != -1:\\n\\ts = s[:s.find('AB')] + '..' + s[s.find('AB') + 2:]\\n\\tif s.find('BA') != -1:\\n\\t\\tt = 1\\nif s1.find('BA') != -1:\\n\\ts = s1[:s1.find('BA')] + '..' + s1[s1.find('BA') + 2:]\\n\\tif s.find('AB') != -1:\\n\\t\\tz = 1\\nif t == 1 or z == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nflag = 0\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\tif s[j:j + 2] == 'BA':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\tbreak\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\tif s[j:j + 2] == 'AB':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\tbreak\\nprint('NO')\\n\", \"s = input()\\nok = 'NO'\\ni1 = -1\\ni2 = -1\\nj1 = -1\\nj2 = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tif i1 == -1:\\n\\t\\t\\ti1 = i\\n\\t\\ti2 = i\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tif j1 == -1:\\n\\t\\t\\tj1 = i\\n\\t\\tj2 = i\\nif i1 != -1 and j1 != -1:\\n\\tif j2 - i1 > 1 or i2 - j1 > 1:\\n\\t\\tok = 'YES'\\nprint(ok)\\n\", \"n = input()\\na = n.find('AB')\\nb = n.find('BA')\\nprint('YES' if a != -1 and n.find('BA', a + 2) != -1 or (b != -1 and n.find('AB', b + 2) != -1) else 'NO')\\n\", \"s = input()\\nif s.count('AB'):\\n\\ttmp = s.replace('AB', ' ', 1)\\n\\tif tmp.count('BA'):\\n\\t\\tprint('YES')\\n\\telif s.count('BA'):\\n\\t\\ttmp = s.replace('BA', ' ', 1)\\n\\t\\tif tmp.count('AB'):\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\naba = 0\\nab = 0\\nba = 0\\nbab = 0\\ni = 0\\nwhile i < n:\\n\\tif i < n - 2 and s[i] == 'A' and (s[i + 1] == 'B') and (s[i + 2] == 'A'):\\n\\t\\taba += 1\\n\\t\\ti += 3\\n\\t\\tcontinue\\n\\tif i < n - 2 and s[i] == 'B' and (s[i + 1] == 'A') and (s[i + 2] == 'B'):\\n\\t\\tbab += 1\\n\\t\\ti += 3\\n\\t\\tcontinue\\n\\tif i < n - 1 and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\tab += 1\\n\\t\\ti += 2\\n\\t\\tcontinue\\n\\tif i < n - 1 and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\tba += 1\\n\\t\\ti += 2\\n\\t\\tcontinue\\n\\ti += 1\\nif ab and ba or (ab and aba) or (ba and aba) or (ab and bab) or (bab and aba) or (ba and bab):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nposs = False\\ntry:\\n\\ti = s.index('BA')\\n\\tj = s[i + 2:].index('AB')\\n\\tposs = True\\nexcept ValueError:\\n\\tpass\\ntry:\\n\\ti = s.index('AB')\\n\\tj = s[i + 2:].index('BA')\\n\\tposs = True\\nexcept ValueError:\\n\\tpass\\nif poss:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nx = s.find('AB', 0, len(s))\\nif x == -1:\\n\\tprint('NO')\\nelse:\\n\\ty = s.find('BA', 0, x)\\n\\tz = s.find('BA', x + 2, len(s))\\n\\tif y != -1 or z != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tx = s.find('BA', 0, len(s))\\n\\t\\tif x == -1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\ty = s.find('AB', 0, x)\\n\\t\\t\\tz = s.find('AB', x + 2, len(s))\\n\\t\\t\\tif y != -1 or z != -1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('NO')\\n\", \"s = input()\\na = []\\nfor i in s:\\n\\ta.append(i)\\nf = 0\\nif 'AB' in s and 'BA' in s:\\n\\tif 'ABA' not in s and 'BAB' not in s:\\n\\t\\tf = 1\\n\\telse:\\n\\t\\tif 'ABA' in s and 'BAB' in s:\\n\\t\\t\\tm = min(s.index('ABA'), s.index('BAB'))\\n\\t\\t\\ts = s[:m] + s[m + 3:]\\n\\t\\telif 'ABA' in s:\\n\\t\\t\\ts = s[:s.index('ABA')] + s[s.index('ABA') + 3:]\\n\\t\\telif 'BAB' in s:\\n\\t\\t\\ts = s[:s.index('BAB')] + s[s.index('BAB') + 3:]\\n\\t\\tif 'AB' in s or 'BA' in s:\\n\\t\\t\\tf = 1\\nif f == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nl = len(s)\\ni = 0\\nab = s.find('AB')\\nba = s.find('BA')\\nif ab >= 0 and ba >= 0:\\n\\tif ab > ba + 1 or ba > ab + 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\ts = s[max(ab, ba) + 2:]\\n\\t\\tab = s.find('AB')\\n\\t\\tba = s.find('BA')\\n\\t\\tif ab >= 0 or ba >= 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin, stdout\\ncin = stdin.readline\\ncout = stdout.write\\nmp = lambda : list(map(int, cin().split()))\\ns = cin()[:-1]\\nt = 0\\nab = []\\nba = []\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab += [i]\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tba += [i]\\n\\ti += 1\\nif not ab or not ba:\\n\\tcout('NO')\\nelif abs(min(ab) - max(ba)) > 1 or abs(min(ba) - max(ab)) > 1:\\n\\tcout('YES')\\nelse:\\n\\tcout('NO')\\n\", \"n = input().strip()\\nl = n.rfind('BA')\\nk = n.find('AB')\\nj = n.rfind('AB')\\np = n.find('BA')\\nt = False\\nfor i in [l, p]:\\n\\tfor x in [k, j]:\\n\\t\\tif i != -1 and x != -1:\\n\\t\\t\\tif min(i, x) + 2 <= max(i, x):\\n\\t\\t\\t\\tt = True\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\tif t == True:\\n\\t\\tbreak\\nif t == False:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nflag = False\\narr1 = []\\narr2 = []\\ni = 1\\nfor i in range(1, n):\\n\\tif s[i - 1:i + 1] == 'AB':\\n\\t\\tarr1.append(i)\\n\\tif s[i - 1:i + 1] == 'BA':\\n\\t\\tarr2.append(i)\\nflag = False\\nif len(arr1) >= 1 and len(arr2) >= 1:\\n\\tif arr1[0] + 1 < arr2[len(arr2) - 1]:\\n\\t\\tflag = True\\n\\tif arr2[0] + 1 < arr1[len(arr1) - 1]:\\n\\t\\tflag = True\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ncheck1 = 0\\ncheck2 = 0\\nword1 = []\\nword2 = []\\nfor i in range(len(s)):\\n\\tword1.append(s[i])\\n\\tword2.append(s[i])\\nif len(word1) <= 3:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(len(word1) - 1):\\n\\t\\tif word1[i] == 'A' and word1[i + 1] == 'B' and (check1 == 0):\\n\\t\\t\\tcheck1 += 1\\n\\t\\t\\tword1[i] = 0\\n\\t\\t\\tword1[i + 1] = 0\\n\\t\\telif word1[i] == 'B' and word1[i + 1] == 'A' and (check1 > 0):\\n\\t\\t\\tcheck2 += 1\\n\\t\\t\\tword1[i] = 0\\n\\t\\t\\tword1[i + 1] = 0\\n\\tif check1 > 0 and check2 > 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tcheck1 = check2 = 0\\n\\t\\tfor i in range(len(word2) - 1):\\n\\t\\t\\tif word2[i] == 'B' and word2[i + 1] == 'A' and (check1 == 0):\\n\\t\\t\\t\\tcheck1 += 1\\n\\t\\t\\t\\tword2[i] = 0\\n\\t\\t\\t\\tword2[i + 1] = 0\\n\\t\\t\\telif word2[i] == 'A' and word2[i + 1] == 'B' and (check1 > 0):\\n\\t\\t\\t\\tcheck2 += 1\\n\\t\\t\\t\\tword2[i] = 0\\n\\t\\t\\t\\tword2[i + 1] = 0\\n\\t\\tif check1 > 0 and check2 > 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"s = input()\\npos1 = []\\npos2 = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tpos1.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tpos2.append(i)\\nif len(pos1) > 0 and len(pos2) > 0:\\n\\tfor i in pos1:\\n\\t\\tfor c in pos2:\\n\\t\\t\\tif i + 1 != c and c + 1 != i:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef main():\\n\\ts = input()\\n\\tif s.count('AB') == 0 or s.count('BA') == 0:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tt = s.replace('AB', 'xx', 1)\\n\\t\\ttt = s.replace('BA', 'xx', 1)\\n\\t\\tif t.count('BA') >= 1 or tt.count('AB') >= 1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"import re\\ns = input()\\nab = [i.start() for i in re.finditer('AB', s)]\\nba = [i.start() for i in re.finditer('BA', s)]\\nans = 0\\nfor i in ab:\\n\\tfor j in ba:\\n\\t\\tif abs(i - j) > 1:\\n\\t\\t\\tans = 1\\n\\t\\t\\tbreak\\nif ans:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = []\\nb = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb.append(i)\\nif len(a) == 0 or len(b) == 0:\\n\\tprint('NO')\\n\\texit(0)\\nfor x in a:\\n\\tfor y in b:\\n\\t\\tif abs(x - y) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"import re\\na = input()\\nx = [m.start() for m in re.finditer('AB', a)]\\ny = [m.start() for m in re.finditer('BA', a)]\\nres = 0\\ni = 0\\nj = len(y) - 1\\nk = len(x) - 1\\nl = 0\\nwhile i < len(x) and j > -1 and (k > -1) and (l < len(y)):\\n\\tif abs(x[i] - y[j]) > 1 or abs(x[k] - y[l]) > 1:\\n\\t\\tres = 1\\n\\ti += 1\\n\\tj -= 1\\n\\tk -= 1\\n\\tl += 1\\nif res:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def solve(s):\\n\\tstarts_count = 0\\n\\tfor i in range(len(s)):\\n\\t\\tif i + 1 < len(s) and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\t\\tstarts_count += 1\\n\\tfor i in range(len(s)):\\n\\t\\tkill_count = 0\\n\\t\\tif i + 1 < len(s) and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\t\\tif i - 1 >= 0 and s[i - 1] == 'A':\\n\\t\\t\\t\\tkill_count += 1\\n\\t\\t\\tif i + 2 < len(s) and s[i + 2] == 'B':\\n\\t\\t\\t\\tkill_count += 1\\n\\t\\t\\tif starts_count - kill_count > 0:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(solve(input()))\\n\", \"import re\\nS = input()\\nif S.find('AB') >= 0 and 'BA' in S[S.find('AB') + 2:]:\\n\\tprint('YES')\\nelif S.find('BA') >= 0 and 'AB' in S[S.find('BA') + 2:]:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.rfind('AB')\\nc = s.find('BA')\\nd = s.rfind('BA')\\ne = min(a, b, c, d)\\nif (abs(a - d) > 1 or abs(b - c) > 1) and e >= 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"x = input()\\ni = 0\\nc = 0\\nd = 0\\nlol = []\\nyo = []\\nfor i in range(len(x) - 1):\\n\\tif x[i] == 'A':\\n\\t\\tif x[i + 1] == 'B':\\n\\t\\t\\tc += 1\\n\\t\\t\\tlol.append(i)\\nfor i in range(len(x) - 1):\\n\\tif x[i] == 'B':\\n\\t\\tif x[i + 1] == 'A':\\n\\t\\t\\td += 1\\n\\t\\t\\tyo.append(i)\\nif c >= 1 and d >= 1:\\n\\tif c == 1 and d == 1:\\n\\t\\tif lol[0] == yo[0] + 1 or yo[0] == lol[0] + 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif c == 1 and d == 2:\\n\\t\\tif lol[0] == yo[0] + 1 and lol[0] == yo[1] - 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif c == 2 and d == 1:\\n\\t\\tif yo[0] == lol[0] + 1 and yo[0] == lol[1] - 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"word = input()\\nAB = word.find('AB')\\nBA = word.find('BA')\\nprint('YES' if AB > -1 and word.find('BA', AB + 2) > -1 or (BA > -1 and word.find('AB', BA + 2) > -1) else 'NO')\\n\", \"s = input()\\niab = -1\\niba = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tif iab == -1:\\n\\t\\t\\tiab = i\\n\\t\\tif iba != -1 and abs(i - iba) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tif iba == -1:\\n\\t\\t\\tiba = i\\n\\t\\tif iab != -1 and abs(i - iab) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"import math\\nch = input()\\nif 'AB' in ch and 'BA' in ch:\\n\\tind1 = ch.index('AB')\\n\\tind2 = ch.index('BA')\\n\\tif 'BA' in ch[ind1 + 2:] or 'BA' in ch[:ind1] or 'AB' in ch[ind2 + 2:] or ('AB' in ch[:ind2]):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\n(abl, abr) = (s.find('AB'), s.rfind('AB'))\\n(bal, bar) = (s.find('BA'), s.rfind('BA'))\\nif abl >= 0 and bar >= 0 and (abs(abl - bar) > 1):\\n\\tprint('YES')\\nelif bal >= 0 and abr >= 0 and (abs(bal - abr) > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(cA, cB, cABA, cBAB) = (0, 0, 0, 0)\\ncA = s.count('AB')\\ncB = s.count('BA')\\ncABA = s.count('ABA')\\ncBAB = s.count('BAB')\\nif cA * cB > 2 and cA - cABA - cBAB + cB >= 0 or (cA * cB > 0 and (cA - cABA - cBAB > 0 or cB - cABA - cBAB > 0)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nfirst = s.find('AB')\\nsecond = s.find('BA', first + 2)\\nif first == -1 or second == -1:\\n\\tfirst = s.find('BA')\\n\\tsecond = s.find('AB', first + 2)\\n\\tif first == -1 or second == -1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.find('BA')\\nprint(['NO', 'YES'][a + 1 > 0 and s.find('BA', a + 2) + 1 > 0 or (b + 1 > 0 and s.find('AB', b + 2) + 1 > 0)])\\n\", \"i = input()\\nc1 = i.count('AB')\\nc2 = i.count('BA')\\nif c1 > 0 and c2 > 0:\\n\\tj = i.find('AB')\\n\\ttmp = i[:j] + '00' + i[j + 2:]\\n\\tc2 = tmp.count('BA')\\n\\tif c2 > 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tk = i.find('BA')\\n\\t\\ttmp = i[:k] + '00' + i[k + 2:]\\n\\t\\tc1 = tmp.count('AB')\\n\\t\\tif c1 > 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def indices(ls, a):\\n\\tind = []\\n\\tfor i in range(len(ls)):\\n\\t\\tif ls[i] == a:\\n\\t\\t\\tind.append(i)\\n\\treturn ind\\n\\ndef match(AB, BA):\\n\\tfor i in AB:\\n\\t\\tfor j in BA:\\n\\t\\t\\tif abs(i - j) > 1:\\n\\t\\t\\t\\treturn True\\n\\treturn False\\n\\ndef main():\\n\\ts = list(input().rstrip())\\n\\tls = []\\n\\tfor i in range(len(s) - 1):\\n\\t\\tls.append(s[i] + s[i + 1])\\n\\tAB = indices(ls, 'AB')\\n\\tBA = indices(ls, 'BA')\\n\\tflag = match(AB, BA)\\n\\tind = 0\\n\\tcheck = {True: 'YES', False: 'NO'}\\n\\tprint(check[flag])\\nmain()\\n\", \"def containsNonOverlappingABandBA(string):\\n\\tABmatches = matchingPositions(string, 'AB')\\n\\tBAmatches = matchingPositions(string, 'BA')\\n\\treturn contains(ABmatches, BAmatches) and (not overlap(ABmatches, BAmatches))\\n\\ndef matchingPositions(string, substring):\\n\\treturn set((i for i in range(len(string) - 1) if match(string, i, substring)))\\n\\ndef match(string, i, substring):\\n\\treturn string[i:i + len(substring)] == substring\\n\\ndef contains(ABmatches, BAmatches):\\n\\treturn len(ABmatches) != 0 and len(BAmatches) != 0\\n\\ndef overlap(ABmatches, BAmatches):\\n\\treturn len(ABmatches) < 3 and len(BAmatches) < 3 and all((abs(ABpos - BApos) < 2 for ABpos in ABmatches for BApos in BAmatches))\\nprint('YES' if containsNonOverlappingABandBA(input()) else 'NO')\\n\", \"s = input()\\nt = 0\\nf = 0\\ni = 0\\nwhile i < len(s) and t < 2:\\n\\tif s[i:i + 3] == 'ABA' or s[i:i + 3] == 'BAB':\\n\\t\\tf = 0\\n\\t\\tt += 1\\n\\t\\ti += 2\\n\\telif (f == 1 or f == 0) and s[i:i + 2] == 'AB':\\n\\t\\tf = 2\\n\\t\\tt += 1\\n\\t\\ti += 1\\n\\telif (f == 2 or f == 0) and s[i:i + 2] == 'BA':\\n\\t\\tf = 1\\n\\t\\tt += 1\\n\\t\\ti += 1\\n\\ti += 1\\nif t == 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nif 'AB' in a and 'BA' in a:\\n\\tb = [i for i in range(len(a) - 1) if a[i] + a[i + 1] == 'AB']\\n\\tc = [i for i in range(len(a) - 1) if a[i] + a[i + 1] == 'BA']\\n\\tif abs(max(b) - min(c)) > 1 or abs(max(c) - min(b)) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\tabi = []\\n\\tbai = []\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\t\\tabi.append(i)\\n\\t\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\t\\tbai.append(i)\\n\\tprint('YES' if abs(bai[-1] - abi[0]) > 1 or abs(bai[0] - abi[-1]) > 1 or abs(bai[0] - abi[0]) > 1 or (abs(bai[-1] - abi[-1]) > 1) else 'NO')\\nelse:\\n\\tprint('NO')\\n\", \"def find_by_ab(ab_ba, w1, w2):\\n\\ta = ab_ba.find(w1)\\n\\tif a != -1:\\n\\t\\tab_ba = ab_ba[a + 2:]\\n\\t\\tb = ab_ba.find(w2)\\n\\t\\tif b != -1:\\n\\t\\t\\treturn 'YES'\\n\\telse:\\n\\t\\treturn 'NO'\\nab_ba = input()\\nres = find_by_ab(ab_ba, 'AB', 'BA')\\nif res == 'YES':\\n\\tprint('YES')\\nelse:\\n\\tres = find_by_ab(ab_ba, 'BA', 'AB')\\n\\tif res == 'YES':\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"inputString = input()\\n(indexAB, indexBA) = ([-1 for i in range(2)], [-1 for i in range(2)])\\nfor i in range(len(inputString) - 1):\\n\\tif inputString[i] == 'A' and inputString[i + 1] == 'B':\\n\\t\\tif indexAB[0] == -1:\\n\\t\\t\\tindexAB[0] = i\\n\\t\\tif indexAB[1] < i:\\n\\t\\t\\tindexAB[1] = i\\n\\telif inputString[i] == 'B' and inputString[i + 1] == 'A':\\n\\t\\tif indexBA[0] == -1:\\n\\t\\t\\tindexBA[0] = i\\n\\t\\tif indexBA[1] < i:\\n\\t\\t\\tindexBA[1] = i\\nif indexAB[0] != -1 and indexBA[0] != -1 and (indexBA[1] - indexAB[0] >= 2 or indexAB[1] - indexBA[0] >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"st = input()\\ns1 = st.replace('AB', '0', 1)\\ns1 = s1.replace('BA', '1', 1)\\ns2 = st.replace('BA', '1', 1)\\ns2 = s2.replace('AB', '0', 1)\\nif '0' in s1 and '1' in s1 or ('0' in s2 and '1' in s2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nl1 = []\\nl2 = []\\n(c1, c2) = (0, 0)\\nn = len(s)\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tl1.append(i)\\n\\t\\tc1 += 1\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tl2.append(i)\\n\\t\\tc2 += 1\\nif c1 == 0 or c2 == 0:\\n\\tprint('NO')\\nelif abs(l1[c1 - 1] - l2[0]) >= 2 or abs(l1[0] - l2[c2 - 1]) >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nflag = 0\\npos = 0\\nab = s.find('AB')\\nif ab != -1:\\n\\tba = s.find('BA', ab + 2)\\n\\tif ba != -1:\\n\\t\\tflag = 1\\nba = s.find('BA')\\nif ba != -1:\\n\\tab = s.find('AB', ba + 2)\\n\\tif ab != -1:\\n\\t\\tpos = 1\\nif pos == 1 or flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import os\\nfrom io import BytesIO, IOBase\\nimport sys\\nfrom collections import defaultdict, deque, Counter\\nfrom bisect import *\\nfrom math import sqrt, pi\\nimport math\\nfrom itertools import permutations\\nfrom copy import deepcopy\\n\\ndef main():\\n\\ts = input().rstrip()\\n\\tn = int(len(s))\\n\\tif n <= 3:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\td = [0] * n\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\td[i] = 1\\n\\t\\tans = 'NO'\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\td[i] += d[i - 1]\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tif i - 2 >= 0:\\n\\t\\t\\t\\t\\tif d[i - 2] >= 1 or d[-1] - d[i + 1] >= 1:\\n\\t\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telif i + 2 < n:\\n\\t\\t\\t\\t\\tif d[-1] - d[i + 1] >= 1:\\n\\t\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\tprint(ans)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"s = input().strip()\\na = s.find('AB')\\nb = s.find('BA')\\nif a == -1 or b == -1:\\n\\tprint('NO')\\nelif a > b + 1 or b > a + 1:\\n\\tprint('YES')\\nelse:\\n\\ta2 = s.find('AB', b + 2)\\n\\tb2 = s.find('BA', a + 2)\\n\\tif a2 != -1 or b2 != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"def findAB(string):\\n\\tia = string.find('AB')\\n\\tif ia == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tib = string[ia + 2:].find('BA')\\n\\t\\treturn ib != -1\\n\\ndef findBA(string):\\n\\tib = string.find('BA')\\n\\tif ib == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tia = string[ib + 2:].find('AB')\\n\\t\\treturn ia != -1\\ns = input().strip()\\nif findAB(s) or findBA(s):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nind1 = a.find('AB')\\nind2 = a.find('BA')\\nind3 = a.rfind('BA')\\nind4 = a.rfind('AB')\\nsz = min(ind1 + 2, ind3 + 2) - max(ind1, ind3)\\nsz2 = min(ind2 + 2, ind4 + 2) - max(ind2, ind4)\\nif (sz <= 0 or sz2 <= 0) and ind1 != -1 and (ind2 != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import re\\ns = str(input())\\nab = len(list(re.finditer('AB', s)))\\nba = len(list(re.finditer('BA', s)))\\nif ab == 0 and ba == 0:\\n\\tprint('NO')\\n\\texit()\\naba = len(list(re.finditer('ABA', s)))\\nbab = len(list(re.finditer('BAB', s)))\\nabab = len(list(re.finditer('ABAB', s)))\\nbaba = len(list(re.finditer('BABA', s)))\\nif aba > 1 or bab > 1:\\n\\tprint('YES')\\n\\texit()\\nif len(list(re.finditer('BABAB', s))) >= 1 or len(list(re.finditer('ABABA', s))) >= 1:\\n\\tprint('YES')\\n\\texit()\\nif abab == 1 and baba == 0 and (ab < 3) and (ba < 2) or (baba == 1 and abab == 0 and (ab < 2) and (ba < 3)):\\n\\tprint('NO')\\n\\texit()\\nif bab == 1 or aba == 1:\\n\\tif ab > 1 or ba > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif bab == 0 and aba == 0:\\n\\tif ab > 0 and ba > 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"def solve():\\n\\ts = input()\\n\\t(ab, ba) = (0, 0)\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tif ab == 0 and s[i:i + 2] == 'AB':\\n\\t\\t\\tab = 1\\n\\t\\t\\ti += 1\\n\\t\\telif ba == 0 and ab != 0 and (s[i:i + 2] == 'BA'):\\n\\t\\t\\tba = 1\\n\\t\\t\\ti += 1\\n\\t\\ti += 1\\n\\tif ab == 0 or ba == 0:\\n\\t\\t(ab, ba) = (0, 0)\\n\\t\\ti = 0\\n\\t\\twhile i < len(s) - 1:\\n\\t\\t\\tif ba == 0 and s[i:i + 2] == 'BA':\\n\\t\\t\\t\\tba = 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\telif ab == 0 and ba != 0 and (s[i:i + 2] == 'AB'):\\n\\t\\t\\t\\tab = 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\ti += 1\\n\\tprint('NO' if ab == 0 or ba == 0 else 'YES')\\nsolve()\\n\", \"s = input()\\nq = 0\\nt = s.find('AB')\\nif t != -1 and t <= len(s) - 4 and (s.find('BA', t + 2) != -1):\\n\\tq = 1\\nt = s.find('BA')\\nif t != -1 and t <= len(s) - 4 and (s.find('AB', t + 2) != -1):\\n\\tq = 1\\nif q == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef prog():\\n\\ts = input().strip()\\n\\tflag = False\\n\\tworked = False\\n\\tfor i in range(len(s) - 1):\\n\\t\\tsubstring = s[i:i + 2]\\n\\t\\tif substring == 'AB' and flag == False:\\n\\t\\t\\tflag = True\\n\\t\\t\\tstart = i + 2\\n\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tfor i in range(start, len(s) - 1):\\n\\t\\t\\tsubstring = s[i:i + 2]\\n\\t\\t\\tif substring == 'BA':\\n\\t\\t\\t\\tworked = True\\n\\t\\t\\t\\tbreak\\n\\tif worked:\\n\\t\\tprint('YES')\\n\\t\\treturn\\n\\tflag = False\\n\\tworked = False\\n\\tfor i in range(len(s) - 1):\\n\\t\\tsubstring = s[i:i + 2]\\n\\t\\tif substring == 'BA' and flag == False:\\n\\t\\t\\tflag = True\\n\\t\\t\\tstart = i + 2\\n\\t\\t\\tbreak\\n\\tif flag:\\n\\t\\tfor i in range(start, len(s) - 1):\\n\\t\\t\\tsubstring = s[i:i + 2]\\n\\t\\t\\tif substring == 'AB':\\n\\t\\t\\t\\tworked = True\\n\\t\\t\\t\\tbreak\\n\\tif worked:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nprog()\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect\\nfrom itertools import chain, dropwhile, permutations, combinations\\nfrom collections import defaultdict, deque\\n\\ndef VI():\\n\\treturn list(map(int, input().split()))\\n\\ndef main(s):\\n\\tab = []\\n\\tba = []\\n\\tni = s.count('AB')\\n\\tnj = s.count('BA')\\n\\tif ni + nj >= 4 and ni >= 1 and (nj >= 1):\\n\\t\\tprint('YES')\\n\\t\\treturn\\n\\tif ni + nj <= 1 or ni == 0 or nj == 0:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\tlast = 0\\n\\tfor i in range(ni):\\n\\t\\tpi = s.index('AB', last)\\n\\t\\tlastJ = 0\\n\\t\\tfor j in range(nj):\\n\\t\\t\\tpj = s.index('BA', lastJ)\\n\\t\\t\\tif abs(pi - pj) >= 2:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\t\\t\\tlastJ = pj + 1\\n\\t\\tlast = pi + 1\\n\\tprint('NO')\\n\\ndef main_input(info=0):\\n\\ts = input()\\n\\tmain(s)\\nmain_input()\\n\", \"string = input()\\nAB = []\\nBA = []\\nfor i in range(len(string) - 1):\\n\\tcurrent = string[i:i + 2]\\n\\tif current == 'AB':\\n\\t\\tAB.append(i)\\n\\telif current == 'BA':\\n\\t\\tBA.append(i)\\nresult = 'NO'\\nfor item1 in AB:\\n\\tfor item2 in BA:\\n\\t\\tif abs(item1 - item2) > 1:\\n\\t\\t\\tresult = 'YES'\\n\\t\\t\\tbreak\\nprint(result)\\n\", \"s = [i for i in input()]\\nn = len(s)\\nfx = False\\nfy = False\\ni = 0\\nwhile i < n:\\n\\tif s[i] == 'A':\\n\\t\\tif i + 1 < n and fx is False:\\n\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\tfx = True\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tbreak\\n\\ti += 1\\nwhile i < n:\\n\\tif s[i] == 'B':\\n\\t\\tif i + 1 < n and fy is False:\\n\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\tfy = True\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tbreak\\n\\ti += 1\\nif fx and fy:\\n\\tprint('YES')\\nelse:\\n\\tfx = False\\n\\tfy = False\\n\\ti = 0\\n\\twhile i < n:\\n\\t\\tif s[i] == 'B':\\n\\t\\t\\tif i + 1 < n and fx is False:\\n\\t\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\t\\tfx = True\\n\\t\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\twhile i < n:\\n\\t\\tif s[i] == 'A':\\n\\t\\t\\tif i + 1 < n and fy is False:\\n\\t\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\t\\tfy = True\\n\\t\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif fx and fy:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"st = input()\\n\\ndef ans(st):\\n\\ttry:\\n\\t\\t(a, b) = st.split('AB', 1)\\n\\t\\tif 'BA' in a or 'BA' in b:\\n\\t\\t\\treturn 'YES'\\n\\t\\t(a, b) = st.split('BA', 1)\\n\\t\\tif 'AB' in a or 'AB' in b:\\n\\t\\t\\treturn 'YES'\\n\\t\\telse:\\n\\t\\t\\treturn 'NO'\\n\\texcept:\\n\\t\\treturn 'NO'\\nprint(ans(st))\\n\", \"import re\\ns = str(input())\\nisFind = False\\niAB = [i.start() for i in re.finditer('AB', s)]\\niBA = [i.start() for i in re.finditer('BA', s)]\\nfor i in range(int(len(iAB))):\\n\\tfor j in range(int(len(iBA))):\\n\\t\\tif abs(iAB[i] - iBA[j]) >= 2:\\n\\t\\t\\tisFind = True\\n\\t\\t\\tbreak\\nprint('YES' if isFind else 'NO')\\n\", \"a = input()\\n\\ndef valid(s, x, y):\\n\\ttry:\\n\\t\\ts.index(x)\\n\\t\\ts = s.replace(x, '*', 1)\\n\\t\\ts.index(y)\\n\\t\\ts = s.replace(y, '*', 1)\\n\\t\\treturn True\\n\\texcept:\\n\\t\\treturn False\\nprint(('NO', 'YES')[valid(a, 'AB', 'BA') or valid(a, 'BA', 'AB')])\\n\", \"s = input()\\nprint(['NO', 'YES'][s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB') > 1 and s.find('AB') >= 0 and (s.find('BA') >= 0)])\\n\", \"def func(str):\\n\\ts = str\\n\\tAB = False\\n\\tBA = False\\n\\tflag = False\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tAB = True\\n\\t\\t\\ts[i] = 'X'\\n\\t\\t\\ts[i + 1] = 'X'\\n\\t\\t\\tindex = i\\n\\t\\t\\tflag = True\\n\\t\\t\\tbreak\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tBA = True\\n\\t\\t\\tbreak\\n\\tif AB and BA:\\n\\t\\treturn True\\n\\tif flag:\\n\\t\\ts[index] = 'A'\\n\\t\\ts[index + 1] = 'B'\\n\\tAB = False\\n\\tBA = False\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tBA = True\\n\\t\\t\\ts[i] = 'X'\\n\\t\\t\\ts[i + 1] = 'X'\\n\\t\\t\\tbreak\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tAB = True\\n\\t\\t\\tbreak\\n\\tif AB and BA:\\n\\t\\treturn True\\n\\treturn False\\ns = list(input())\\nif func(s):\\n\\tprint('Yes')\\nelse:\\n\\tprint('No')\\n\", \"def solve():\\n\\ts = input()\\n\\t(c1, c2) = (s.count('AB'), s.count('BA'))\\n\\tif c1 == 0 or c2 == 0:\\n\\t\\treturn 'NO'\\n\\telse:\\n\\t\\tind = s.find('AB')\\n\\t\\tif s[ind + 2:].find('BA') != -1:\\n\\t\\t\\treturn 'YES'\\n\\t\\tind = s.find('BA')\\n\\t\\tif s[ind + 2:].find('AB') != -1:\\n\\t\\t\\treturn 'YES'\\n\\t\\treturn 'NO'\\nprint(solve())\\n\", \"s = input()\\nab = False\\nba = False\\none = False\\nx = s\\nfor i in range(len(s)):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab = True\\n\\t\\tx = s[0:i] + s[i + 2:]\\nfor i in range(len(x)):\\n\\tif x[i:i + 2] == 'BA':\\n\\t\\tba = True\\nif ab and ba:\\n\\tone = True\\nif not one:\\n\\tprint('NO')\\nelse:\\n\\tab = False\\n\\tba = False\\n\\tone = False\\n\\tx = s\\n\\tfor i in range(len(s)):\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tba = True\\n\\t\\t\\tx = s[0:i] + s[i + 2:]\\n\\tfor i in range(len(x)):\\n\\t\\tif x[i:i + 2] == 'AB':\\n\\t\\t\\tab = True\\n\\tif ab and ba:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"str = input()\\ncondition = False\\ni = 0\\nfor i in range(0, len(str)):\\n\\tif str[i:i + 2] == 'AB':\\n\\t\\tbreak\\nj = i + 2\\nfor i in range(j, len(str)):\\n\\tif str[i:i + 2] == 'BA':\\n\\t\\tcondition = True\\n\\t\\tbreak\\nif condition == True:\\n\\tprint('YES')\\nelse:\\n\\tfor i in range(0, len(str)):\\n\\t\\tif str[i:i + 2] == 'BA':\\n\\t\\t\\tbreak\\n\\tj = i + 2\\n\\tfor i in range(j, len(str)):\\n\\t\\tif str[i:i + 2] == 'AB':\\n\\t\\t\\tcondition = True\\n\\t\\t\\tbreak\\n\\tif condition == True:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import re\\ns = input()\\nx = s.find('AB')\\nif x != -1:\\n\\tif s.find('BA', x + 2) != -1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nx = s.find('BA')\\nif x != -1:\\n\\tif s.find('AB', x + 2) != -1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nn = len(s)\\ns1 = s[::-1]\\ncount = 0\\nif 'AB' in s and 'AB' in s1:\\n\\tif s.index('BA') < n - 1 - s1.index('BA'):\\n\\t\\tif s.index('BA') + 1 != n - 1 - s1.index('BA') - 1:\\n\\t\\t\\tcount += 2\\n\\t\\telse:\\n\\t\\t\\tcount -= 1\\n\\tif s.index('AB') < n - 1 - s1.index('AB'):\\n\\t\\tif s.index('AB') + 1 != n - 1 - s1.index('AB') - 1:\\n\\t\\t\\tcount += 2\\n\\t\\telse:\\n\\t\\t\\tcount -= 1\\n\\tif count <= 0:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nAB_b = False\\nBA_b = False\\nAB = []\\nBA = []\\n\\ndef f(ind, s):\\n\\tif ind > -1 and ind < len(s):\\n\\t\\treturn s[ind]\\n\\treturn None\\nfor i in range(len(s)):\\n\\tif s[i] == 'B':\\n\\t\\tif f(i - 1, s) == 'A':\\n\\t\\t\\tAB_b = True\\n\\t\\t\\tAB.append(i - 1)\\n\\t\\tif f(i + 1, s) == 'A':\\n\\t\\t\\tBA_b = True\\n\\t\\t\\tBA.append(i)\\nif AB_b and BA_b and (abs(AB[0] - BA[-1]) > 1 or abs(AB[-1] - BA[0]) > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import os\\nDEBUG = 'DEBUG' in os.environ\\n\\ndef debug(*args):\\n\\tif DEBUG:\\n\\t\\tprint('>', *args)\\n\\ndef solution(originalValue):\\n\\toriginalLength = len(originalValue)\\n\\tvalue = originalValue\\n\\tvalue = value.replace('AB', '_', 1)\\n\\tvalue = value.replace('BA', '_', 1)\\n\\tvalue = value.replace('_', '')\\n\\tif len(value) + 4 == originalLength:\\n\\t\\treturn 'YES'\\n\\tvalue = originalValue\\n\\tvalue = value.replace('BA', '_', 1)\\n\\tvalue = value.replace('AB', '_', 1)\\n\\tvalue = value.replace('_', '')\\n\\tif len(value) + 4 == originalLength:\\n\\t\\treturn 'YES'\\n\\treturn 'NO'\\ninputValue = input()\\nprint(solution(inputValue))\\n\", \"s = input()\\nab = set()\\nba = set()\\nfor i in range(len(s) - 1):\\n\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\tab.add(i)\\n\\telif s[i] + s[i + 1] == 'BA':\\n\\t\\tba.add(i)\\nfl = 0\\nif ab == set() or ba == set():\\n\\tprint('NO')\\n\\texit(0)\\nfor s1 in (min(ab), max(ab)):\\n\\tfor s2 in (min(ba), max(ba)):\\n\\t\\tif abs(s1 - s2) > 1:\\n\\t\\t\\tfl = 1\\nif fl:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(ab, ba) = (s.find('AB'), s.find('BA'))\\nans = False\\nif ab != -1 and s.find('BA', ab + 2) != -1:\\n\\tans = True\\nif ba != -1 and s.find('AB', ba + 2) != -1:\\n\\tans = True\\nprint('YES' if ans else 'NO')\\n\", \"from sys import stdin, stdout\\ns = stdin.readline().strip()\\nlAB = s.find('AB')\\nrAB = s.rfind('AB')\\nlBA = s.find('BA')\\nrBA = s.rfind('BA')\\nif lAB == -1 or lBA == -1:\\n\\tstdout.write('NO')\\nelif lAB + 1 < rBA:\\n\\tstdout.write('YES')\\nelif lBA + 1 < rAB:\\n\\tstdout.write('YES')\\nelse:\\n\\tstdout.write('NO')\\nstdout.write('\\\\n')\\n\", \"word = input()\\nab = {}\\nba = {}\\nfor i in range(len(word) - 1):\\n\\tif word[i] + word[i + 1] == 'AB':\\n\\t\\tab[i] = 1\\n\\telif word[i] + word[i + 1] == 'BA':\\n\\t\\tba[i] = 1\\nf = 0\\nfor i in ab:\\n\\tfor j in ba:\\n\\t\\tif j != i - 1 and j != i + 1:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\tbreak\\nif f == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\na = False\\nb = False\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif not a and s[i:i + 2] == 'AB':\\n\\t\\ta = True\\n\\t\\ti += 2\\n\\telif not b and s[i:i + 2] == 'BA':\\n\\t\\tb = True\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\n\\tif a and b:\\n\\t\\tbreak\\nif a and b:\\n\\tprint('YES')\\nelse:\\n\\ti = 0\\n\\ta = False\\n\\tb = False\\n\\ts = s[::-1]\\n\\twhile i < len(s) - 1:\\n\\t\\tif not a and s[i:i + 2] == 'AB':\\n\\t\\t\\ta = True\\n\\t\\t\\ti += 2\\n\\t\\telif not b and s[i:i + 2] == 'BA':\\n\\t\\t\\tb = True\\n\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\t\\tif a and b:\\n\\t\\t\\tbreak\\n\\tif a and b:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"from sys import maxsize, stdout, stdin, stderr\\nmod = int(1e+20 + 7)\\nimport sys\\n\\ndef I():\\n\\treturn int(stdin.readline())\\n\\ndef lint():\\n\\treturn [int(x) for x in stdin.readline().split()]\\n\\ndef S():\\n\\treturn input().strip()\\n\\ndef grid(r, c):\\n\\treturn [lint() for i in range(r)]\\nfrom collections import defaultdict, Counter\\nimport math\\nimport heapq\\nfrom heapq import heappop, heappush\\nimport bisect\\nfrom itertools import groupby\\n\\ndef gcd(a, b):\\n\\twhile b:\\n\\t\\ta %= b\\n\\t\\ttmp = a\\n\\t\\ta = b\\n\\t\\tb = tmp\\n\\treturn a\\n\\ndef lcm(a, b):\\n\\treturn a // gcd(a, b) * b\\n\\ndef check_prime(n):\\n\\tfor i in range(2, int(n ** (1 / 2)) + 1):\\n\\t\\tif not n % i:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef Bs(a, x):\\n\\ti = 0\\n\\tj = 0\\n\\tleft = 1\\n\\tright = x\\n\\tflag = False\\n\\twhile left < right:\\n\\t\\tmi = (left + right) // 2\\n\\t\\tif a[mi] <= x:\\n\\t\\t\\tleft = mi + 1\\n\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\tright = mi\\n\\t\\t\\tj += 1\\n\\tif left > 0 and a[left - 1] == x:\\n\\t\\treturn (i - 1, j)\\n\\telse:\\n\\t\\treturn (-1, -1)\\n\\ndef nCr(n, r):\\n\\treturn fact(n) // (fact(r) * fact(n - r))\\n\\ndef fact(n):\\n\\tres = 1\\n\\tfor i in range(2, n + 1):\\n\\t\\tres = res * i\\n\\treturn res\\n\\ndef primefactors(n):\\n\\tnum = 0\\n\\twhile n % 2 == 0:\\n\\t\\tnum += 1\\n\\t\\tn = n / 2\\n\\tfor i in range(3, int(math.sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tnum += 1\\n\\t\\t\\tn = n // i\\n\\tif n > 2:\\n\\t\\tnum += 1\\n\\treturn num\\n\\ndef ask(a):\\n\\tprint('? {}'.format(a), flush=True)\\n\\tn = I()\\n\\treturn n\\n\\ndef dfs(i, p):\\n\\t(a, tmp) = (0, 0)\\n\\tfor j in d[i]:\\n\\t\\tif j != p:\\n\\t\\t\\ta += 1\\n\\t\\t\\ttmp += dfs(j, i)\\n\\tif a == 0:\\n\\t\\treturn 0\\n\\treturn tmp / a + 1\\n\\ndef primeFactors(n):\\n\\tl = []\\n\\twhile n % 2 == 0:\\n\\t\\tl.append(2)\\n\\t\\tn = n // 2\\n\\tif n > 2:\\n\\t\\tl.append(n)\\n\\treturn l\\ns = S()\\nn = len(s)\\n(ab, ba) = ([], [])\\nflag = False\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i + 1)\\n\\t\\tif len(ba):\\n\\t\\t\\tif ba[0] != i:\\n\\t\\t\\t\\tflag = True\\n\\t\\t\\t\\tbreak\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i + 1)\\n\\t\\tif len(ab):\\n\\t\\t\\tif ab[0] != i:\\n\\t\\t\\t\\tflag = True\\n\\t\\t\\t\\tbreak\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nab = 0\\nba = 0\\nall = 0\\ni = 1\\nwhile i < len(a):\\n\\tif a[i - 1] + a[i] == 'AB':\\n\\t\\tc = 'B'\\n\\t\\ti1 = i - 1\\n\\t\\twhile i < len(a) and a[i] == c:\\n\\t\\t\\ti += 1\\n\\t\\t\\tif c == 'B':\\n\\t\\t\\t\\tc = 'A'\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc = 'B'\\n\\t\\tln = i - i1\\n\\t\\tif ln == 2:\\n\\t\\t\\tab += 1\\n\\t\\telif ln == 3 or ln == 4:\\n\\t\\t\\tall += 1\\n\\t\\telse:\\n\\t\\t\\tall += 2\\n\\t\\t\\tbreak\\n\\telif a[i - 1] + a[i] == 'BA':\\n\\t\\tc = 'A'\\n\\t\\ti1 = i - 1\\n\\t\\twhile i < len(a) and a[i] == c:\\n\\t\\t\\ti += 1\\n\\t\\t\\tif c == 'B':\\n\\t\\t\\t\\tc = 'A'\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc = 'B'\\n\\t\\tln = i - i1\\n\\t\\tif ln == 2:\\n\\t\\t\\tba += 1\\n\\t\\telif ln == 3 or ln == 4:\\n\\t\\t\\tall += 1\\n\\t\\telse:\\n\\t\\t\\tall += 2\\n\\t\\t\\tbreak\\n\\ti += 1\\nif bool(ab) and bool(ba) or (bool(all) and (bool(ab) or bool(ba))) or all > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = list(input())\\nn = len(s)\\nsplit_place = 0\\nflag1 = 0\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tsplit_place = i\\n\\t\\tflag1 = 1\\n\\t\\tbreak\\nflag = 0\\nif flag1 == 1:\\n\\ttemp_string1 = s[0:split_place]\\n\\ttemp_string2 = s[split_place + 2:n]\\n\\tfor i in range(len(temp_string1) - 1):\\n\\t\\tif temp_string1[i] == 'B' and temp_string1[i + 1] == 'A':\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag == 0:\\n\\t\\tfor i in range(len(temp_string2) - 1):\\n\\t\\t\\tif temp_string2[i] == 'B' and temp_string2[i + 1] == 'A':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\nflag1 = 0\\nflagg = 0\\nsplit_place = 0\\nfor i in range(n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tsplit_place = i\\n\\t\\tflag1 = 1\\n\\t\\tbreak\\nif flag1 == 1:\\n\\ttemp_string1 = s[0:split_place]\\n\\ttemp_string2 = s[split_place + 2:n]\\n\\tfor i in range(len(temp_string1) - 1):\\n\\t\\tif temp_string1[i] == 'A' and temp_string1[i + 1] == 'B':\\n\\t\\t\\tflagg = 1\\n\\t\\t\\tbreak\\n\\tif flagg == 0:\\n\\t\\tfor i in range(len(temp_string2) - 1):\\n\\t\\t\\tif temp_string2[i] == 'A' and temp_string2[i + 1] == 'B':\\n\\t\\t\\t\\tflagg = 1\\n\\t\\t\\t\\tbreak\\nif flag == 1 or flagg == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def overlappingStrings(s):\\n\\t(t1, t2, t3, t4) = (s.count('AB'), s.count('BA'), s.count('ABA'), s.count('BAB'))\\n\\treturn 'YES' if (t1 + t2) * (t1 != 0 and t2 != 0) - t3 - t4 > 1 else 'NO'\\ns = input()\\nprint(overlappingStrings(s))\\n\", \"a = input()\\nc = len(a)\\n(x, y, z, w) = (0, 0, 0, 0)\\nfor i in range(c - 1):\\n\\tif a[i] == 'A' and a[i + 1] == 'B':\\n\\t\\tx = x + 1\\n\\tif a[i] == 'B' and a[i + 1] == 'A':\\n\\t\\ty = y + 1\\nfor i in range(c - 2):\\n\\tif a[i] == 'A' and a[i + 1] == 'B' and (a[i + 2] == 'A'):\\n\\t\\tz = z + 1\\n\\tif a[i] == 'B' and a[i + 1] == 'A' and (a[i + 2] == 'B'):\\n\\t\\tw = w + 1\\nif x > 1 and y > 1 or (x == 1 and y > 2) or (x > 2 and y == 1):\\n\\tprint('YES')\\nelif x > 0 and y > 0 and (w == 0) and (z == 0):\\n\\tprint('YES')\\nelif w == 1 and z == 0:\\n\\tif x == 1 and y == 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif z == 1 and w == 0:\\n\\tif x == 1 and y == 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"strABA = list(input())\\nAB = []\\nBA = []\\nlg = len(strABA)\\nfor i in range(lg - 1):\\n\\tif strABA[i] == 'A' and strABA[i + 1] == 'B':\\n\\t\\tAB.append(i)\\n\\tif strABA[i] == 'B' and strABA[i + 1] == 'A':\\n\\t\\tBA.append(i)\\nif len(AB) * len(BA) > 0:\\n\\tif abs(AB[0] - BA[-1]) > 1 or abs(AB[-1] - BA[0]) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"def printFunc(string):\\n\\tab = []\\n\\tba = []\\n\\tif len(string) <= 3:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tfor i in range(len(string) - 1):\\n\\t\\t\\tif string[i:i + 2] == 'AB':\\n\\t\\t\\t\\tab.append(i)\\n\\t\\t\\tif string[i:i + 2] == 'BA':\\n\\t\\t\\t\\tba.append(i)\\n\\t\\ttry:\\n\\t\\t\\tif ba[-1] - ab[0] > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\t\\t\\tif ab[-1] - ba[0] > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\t\\t\\tprint('NO')\\n\\t\\texcept:\\n\\t\\t\\tprint('NO')\\nstring = input()\\nprintFunc(string)\\n\", \"import math\\ns = input()\\nanswer = 'NO'\\nif 'AB' in s:\\n\\ts1 = s[s.index('AB') + 2:]\\n\\tif 'BA' in s1:\\n\\t\\tanswer = 'YES'\\nif answer == 'NO':\\n\\tif 'BA' in s:\\n\\t\\ts = s[s.index('BA') + 2:]\\n\\t\\tif 'AB' in s:\\n\\t\\t\\tanswer = 'YES'\\nprint(answer)\\n\", \"def main():\\n\\tfrom sys import stdout\\n\\ts = input() + 'X'\\n\\tpure_AB = 0\\n\\tpure_BA = 0\\n\\tmixed = 0\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tsubstring = s[i - 1] + s[i]\\n\\t\\tif substring == 'AB':\\n\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\tmixed += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpure_AB += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telif substring == 'BA':\\n\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\tmixed += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpure_BA += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tif pure_AB > 0 and pure_BA > 0:\\n\\t\\tstdout.write('YES')\\n\\telif mixed > 0 and (pure_AB > 0 or pure_BA > 0):\\n\\t\\tstdout.write('YES')\\n\\telif mixed >= 2:\\n\\t\\tstdout.write('YES')\\n\\telse:\\n\\t\\tstdout.write('NO')\\nmain()\\n\", \"s = input()\\ni = s.find('AB')\\nans = False\\nif i >= 0:\\n\\tif s[i + 2:].find('BA') >= 0:\\n\\t\\tans = True\\nif ans:\\n\\tprint('YES')\\n\\texit(0)\\ni = s.find('BA')\\nif i >= 0:\\n\\tif s[i + 2:].find('AB') >= 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\texit(0)\\nprint('NO')\\n\", \"x = y = input()\\n(s1, s2) = (x.count('AB'), x.count('BA'))\\nx = x.replace('AB', '11').replace('BA', '11')\\ny = y.replace('BA', '11').replace('AB', '11')\\nif s1 > 0 and s2 > 0 and (x.count('1') >= 4) and (y.count('1') >= 4):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nans = 1\\nab = s.find('AB')\\nba = s.find('BA')\\nif ab >= 0:\\n\\tif s.find('BA', ab + 2) >= 0:\\n\\t\\tans = 0\\nif ans and ba >= 0:\\n\\tif s.find('AB', ba + 2) >= 0:\\n\\t\\tans = 0\\nprint('YNEOS'[ans % 2::2])\\n\", \"def take_AB(_list: [[str]]) -> bool:\\n\\tAB = False\\n\\tfor i in range(len(_list) - 1):\\n\\t\\tif not AB and _list[i][0] == 'A' and (_list[i + 1][0] == 'B'):\\n\\t\\t\\t_list[i][0] = 'X'\\n\\t\\t\\t_list[i + 1][0] = 'X'\\n\\t\\t\\tAB = True\\n\\tif AB:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\n\\ndef take_BA(_list: [[str]]) -> bool:\\n\\tBA = False\\n\\tfor i in range(len(_list) - 1):\\n\\t\\tif not BA and _list[i][0] == 'B' and (_list[i + 1][0] == 'A'):\\n\\t\\t\\t_list[i][0] = 'X'\\n\\t\\t\\t_list[i + 1][0] = 'X'\\n\\t\\t\\tBA = True\\n\\tif BA:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\nletter_list = []\\ndup_letter_list = []\\nstring = input()\\nfor i in range(len(string)):\\n\\tletter_list.append([])\\n\\tdup_letter_list.append([])\\n\\tletter_list[i].append(string[i])\\n\\tdup_letter_list[i].append(string[i])\\nif take_AB(letter_list) and take_BA(letter_list) or (take_BA(dup_letter_list) and take_AB(dup_letter_list)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\np = a.count('AB')\\nb = a.replace('AB', '.', 1)\\nq = b.count('BA')\\nif p > 0 and q > 0:\\n\\ty = 1\\nelse:\\n\\ty = 0\\nr = a.count('BA')\\nc = a.replace('BA', '.', 1)\\ns = c.count('AB')\\nif r > 0 and s > 0:\\n\\tx = 1\\nelse:\\n\\tx = 0\\nif x == 1 or y == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import math\\nimport collections\\nimport bisect\\nimport heapq\\nimport time\\nimport random\\nimport itertools\\nimport sys\\nS = input()\\nN = len(S)\\nif N <= 3:\\n\\tprint('NO')\\n\\texit(0)\\n(maxab, minab, maxba, minba) = (-1, N, -1, N)\\nfor i in range(N):\\n\\tif S[i:i + 2] == 'AB':\\n\\t\\tmaxab = max(maxab, i)\\n\\t\\tminab = min(minab, i)\\n\\tif S[i:i + 2] == 'BA':\\n\\t\\tmaxba = max(maxba, i)\\n\\t\\tminba = min(minba, i)\\nfor a in [maxab, minab]:\\n\\tfor b in [minba, maxba]:\\n\\t\\tif 0 <= a < N and 0 <= b < N and (abs(a - b) > 1):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"a = input()\\nb = len(a)\\nc = a.find('AB')\\nd = a.find('BA', c + 2)\\ne = a.find('BA')\\nf = a.find('AB', e + 2)\\nif c != -1 and d != -1 or (e != -1 and f != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nread = lambda : sys.stdin.readline().strip()\\nreadi = lambda : map(int, read().split())\\nfrom collections import *\\ns = read()\\nn = len(s)\\nisAB = False\\nisBA = False\\nisABA = False\\nisBAB = False\\ni = 0\\nwhile i < n - 1:\\n\\tif s[i:i + 3] == 'ABA' and (not isABA):\\n\\t\\tisABA = True\\n\\t\\ti += 2\\n\\telif s[i:i + 3] == 'BAB' and (not isBAB):\\n\\t\\tisBAB = True\\n\\t\\ti += 2\\n\\telif s[i:i + 2] == 'AB' and (not isAB):\\n\\t\\tisAB = True\\n\\t\\ti += 1\\n\\telif s[i:i + 2] == 'BA' and (not isBA):\\n\\t\\tisBA = True\\n\\t\\ti += 1\\n\\ti += 1\\nif (isAB or isBA) and (isABA or isBAB) or (isAB and isBA) or (isABA and isBAB):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input().strip()\\nf = False\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tfor j in range(i + 2, len(s) - 1):\\n\\t\\t\\tif s[j] == 'B' and s[j + 1] == 'A':\\n\\t\\t\\t\\tf = True\\n\\t\\tbreak\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tfor j in range(i + 2, len(s) - 1):\\n\\t\\t\\tif s[j] == 'A' and s[j + 1] == 'B':\\n\\t\\t\\t\\tf = True\\n\\t\\tbreak\\nif f:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = input()\\nif 'AB' not in n or 'BA' not in n:\\n\\tprint('NO')\\nelif n.count('AB') + n.count('BA') - n.count('BAB') - n.count('ABA') > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"while True:\\n\\ttry:\\n\\t\\ts = input().strip()\\n\\t\\tif s == '':\\n\\t\\t\\tbreak\\n\\t\\tidx_AB = []\\n\\t\\tidx_BA = []\\n\\t\\tfor i in range(len(s)):\\n\\t\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\t\\tidx_AB.append(i)\\n\\t\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\t\\tidx_BA.append(i)\\n\\t\\tflag = False\\n\\t\\tfor i in idx_AB:\\n\\t\\t\\tfor j in idx_BA:\\n\\t\\t\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\t\\t\\tflag = True\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif flag:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\texcept:\\n\\t\\tbreak\\n\", \"s = input()\\nx = s.find('AB')\\ny = s.find('BA')\\nif x == -1 or y == -1:\\n\\tprint('NO')\\n\\texit(0)\\nz1 = s[:x].find('BA')\\nz2 = s[x + 2:].find('BA')\\nz3 = s[:y].find('AB')\\nz4 = s[y + 2:].find('AB')\\nif z1 == z2 and z3 == z4 and (z1 == -1):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"line = input()\\nab = ba = 0\\nfor i in range(len(line) - 1):\\n\\tif line[i] + line[i + 1] == 'AB':\\n\\t\\tab += 1\\n\\telif line[i] + line[i + 1] == 'BA':\\n\\t\\tba += 1\\nif ab * ba == 0:\\n\\tprint('NO')\\nelif ab * ba == 1 and line.count('ABA') + line.count('BAB') == 1:\\n\\tprint('NO')\\nelif (max(ab, ba), min(ab, ba)) == (2, 1) and line.count('ABAB') + line.count('BABA') == 1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nflag = 0\\nif 'AB' in s:\\n\\tif 'BA' in s[s.index('AB') + 2:]:\\n\\t\\tflag = 1\\nif 'BA' in s:\\n\\tif 'AB' in s[s.index('BA') + 2:]:\\n\\t\\tflag = 1\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"flag = 1\\ns = input()\\nif s.find('AB') != -1:\\n\\ti = s.find('AB')\\n\\tif s.find('BA', i + 2) != -1:\\n\\t\\tprint('YES')\\n\\t\\tflag = 0\\nif s.find('BA') != -1 and flag == 1:\\n\\ti = s.find('BA')\\n\\tif s.find('AB', i + 2) != -1:\\n\\t\\tprint('YES')\\n\\t\\tflag = 0\\nif flag == 1:\\n\\tprint('NO')\\n\", \"import os\\nimport sys\\nfrom math import *\\nfrom collections import *\\nfrom bisect import *\\nfrom io import BytesIO, IOBase\\n\\ndef vsInput():\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef value():\\n\\treturn map(int, input().split())\\n\\ndef array():\\n\\treturn [int(i) for i in input().split()]\\ns = input()\\ntry:\\n\\tind = s.index('AB')\\nexcept:\\n\\tprint('NO')\\n\\texit()\\nif 'BA' in s[ind + 2:]:\\n\\tprint('YES')\\n\\texit()\\ntry:\\n\\tind = s.index('BA')\\nexcept:\\n\\tprint('NO')\\n\\texit()\\nif 'AB' in s[ind + 2:]:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def simplify(seq):\\n\\tnew_seq = []\\n\\tfor i in range(len(seq) - 1):\\n\\t\\tif seq[i] == 'A' or seq[i] == 'B':\\n\\t\\t\\tnew_seq.append(seq[i])\\n\\t\\telif seq[i + 1] == 'A' or seq[i + 1] == 'B':\\n\\t\\t\\tnew_seq.append(seq[i])\\n\\t\\telse:\\n\\t\\t\\tcontinue\\n\\tnew_seq.append(seq[-1])\\n\\treturn ''.join(new_seq)\\n\\ndef is_valid(seq):\\n\\tif 'AB' in seq and 'BA' in seq:\\n\\t\\treturn True\\n\\treturn False\\n\\ndef find_occurrence(seq, depth):\\n\\tif depth == 2:\\n\\t\\tfor i in range(len(seq)):\\n\\t\\t\\tif seq[i:i + 2] == 'BA':\\n\\t\\t\\t\\treturn True\\n\\t\\treturn False\\n\\telse:\\n\\t\\tfor i in range(len(seq)):\\n\\t\\t\\tif seq[i:i + 2] == 'AB':\\n\\t\\t\\t\\tnew_seq = seq[:i] + 'XX' + seq[i + 2:]\\n\\t\\t\\t\\tfound = find_occurrence(new_seq, 2)\\n\\t\\t\\t\\tif found:\\n\\t\\t\\t\\t\\treturn True\\nyour_string = input()\\nyour_string = simplify(your_string)\\nif is_valid(your_string):\\n\\tcontains_substrings = find_occurrence(your_string, 1)\\n\\tif contains_substrings:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"string = list(input())\\nstringVertwo = string.copy()\\npoints = 0\\nsubstring = []\\nsubstringVertwo = []\\nif len(string) > 3:\\n\\tfor i in range(len(string) - 1):\\n\\t\\tif string[i] == 'A' and string[i + 1] == 'B':\\n\\t\\t\\tx = string[i] + string[i + 1]\\n\\t\\t\\tsubstring.append(x)\\n\\t\\t\\tstring[i] = ''\\n\\t\\t\\tstring[i + 1] = ''\\n\\t\\t\\tbreak\\n\\tfor n in range(len(string) - 1):\\n\\t\\tif string[n] == 'B' and string[n + 1] == 'A':\\n\\t\\t\\ty = string[n] + string[n + 1]\\n\\t\\t\\tsubstring.append(y)\\n\\t\\t\\tbreak\\n\\tif 'AB' in substring and 'BA' in substring:\\n\\t\\tprint('YES')\\n\\telif len(stringVertwo) > 4:\\n\\t\\tfor j in range(len(stringVertwo) - 1):\\n\\t\\t\\tif stringVertwo[j] == 'B' and stringVertwo[j + 1] == 'A':\\n\\t\\t\\t\\ta = stringVertwo[j] + stringVertwo[j + 1]\\n\\t\\t\\t\\tsubstringVertwo.append(a)\\n\\t\\t\\t\\tstring[j] = ''\\n\\t\\t\\t\\tstring[j + 1] = ''\\n\\t\\t\\t\\tbreak\\n\\t\\tfor k in range(len(stringVertwo) - 1):\\n\\t\\t\\tif string[k] == 'A' and string[k + 1] == 'B':\\n\\t\\t\\t\\tb = string[k] + string[k + 1]\\n\\t\\t\\t\\tsubstringVertwo.append(b)\\n\\t\\t\\t\\tbreak\\n\\t\\tif 'AB' in substringVertwo and 'BA' in substringVertwo:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = list(input())\\nfound1 = False\\nfound2 = False\\nABA = False\\nfor i in range(len(s) - 2):\\n\\tif s[i] == 'A' and s[i + 2] == 'A' and (s[i + 1] == 'B') or (s[i] == 'B' and s[i + 2] == 'B' and (s[i + 1] == 'A')):\\n\\t\\tABA = True\\n\\t\\ts.pop(i)\\n\\t\\ts.pop(i)\\n\\t\\ts.pop(i)\\n\\t\\tbreak\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ts.pop(i)\\n\\t\\ts.pop(i)\\n\\t\\tfound1 = True\\n\\t\\tbreak\\nfor i in range(len(s) - 1):\\n\\tif found1 or ABA:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tfound2 = True\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tbreak\\nif found1 and found2 or (found1 and ABA) or (found2 and ABA):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"st = str(input())\\nx = []\\nfor i in range(len(st)):\\n\\tx.append(st[i:i + 2])\\nAB = []\\nBA = []\\nfor i in range(len(x)):\\n\\tif x[i] == 'AB':\\n\\t\\tAB.append(i)\\n\\telif x[i] == 'BA':\\n\\t\\tBA.append(i)\\nfor i in range(len(AB)):\\n\\tfor j in range(len(BA)):\\n\\t\\tif abs(AB[i] - BA[j]) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\nprint('NO')\\n\", \"mystr = input()\\nif 'ABA' in mystr or 'BAB' in mystr:\\n\\tif 'ABA' in mystr and 'BAB' in mystr:\\n\\t\\tfirst = mystr.find('ABA') < mystr.find('BAB')\\n\\telse:\\n\\t\\tfirst = mystr.find('ABA') >= 0\\n\\tsubst = 'ABA' * int(first) + 'BAB' * int(not first)\\n\\tstrmod = mystr.replace(subst, '', 1)\\n\\tcontains = 'AB' in strmod or 'BA' in strmod\\nelse:\\n\\tcontains = 'AB' in mystr and 'BA' in mystr\\nprint('YES' if contains else 'NO')\\n\", \"import sys\\nimport os\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmod = 10 ** 9 + 7\\n\\ndef lcm(x, y):\\n\\treturn x * y / gcd(x, y)\\n\\ndef fact(x, mod=mod):\\n\\tans = 1\\n\\tfor i in range(1, x + 1):\\n\\t\\tans = ans * i % mod\\n\\treturn ans\\n\\ndef arr2D(n, m, default=0):\\n\\tlst = []\\n\\tfor i in range(n):\\n\\t\\ttemp = [default] * m\\n\\t\\tlst.append(temp)\\n\\treturn lst\\n\\ndef sortDictV(x):\\n\\treturn {k: v for (k, v) in sorted(x.items(), key=lambda item: item[1])}\\n\\ndef solve(lst):\\n\\tn = len(lst)\\n\\toverlap = 0\\n\\ti = 0\\n\\twhile i <= n - 1:\\n\\t\\tif i + 2 < n and lst[i] == 'A' and (lst[i + 1] == 'B') and (lst[i + 2] == 'A'):\\n\\t\\t\\toverlap += 1\\n\\t\\t\\ti += 3\\n\\t\\telif i + 2 < n and lst[i] == 'B' and (lst[i + 1] == 'A') and (lst[i + 2] == 'B'):\\n\\t\\t\\toverlap += 1\\n\\t\\t\\ti += 3\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tif overlap >= 2:\\n\\t\\treturn 'YES'\\n\\tcount = [0] * 2\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tif lst[i] == 'A' and lst[i + 1] == 'B':\\n\\t\\t\\tif i + 2 >= n or lst[i + 2] != 'A':\\n\\t\\t\\t\\tcount[0] += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 3\\n\\t\\telif lst[i] == 'B' and lst[i + 1] == 'A':\\n\\t\\t\\tif i + 2 >= n or lst[i + 2] != 'B':\\n\\t\\t\\t\\tcount[1] += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 3\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tif count[0] >= 1 and count[1] >= 1:\\n\\t\\treturn 'YES'\\n\\tif overlap == 1 and count[0] + count[1] >= 1:\\n\\t\\treturn 'YES'\\n\\treturn 'NO'\\nlst = input()\\nprint(solve(lst))\\n\", \"s = input()\\na = s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB')\\nif a >= 2 and s.count('AB') > 0 and (s.count('BA') > 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nm = ''\\nn = ''\\nfor x in range(len(s) - 1):\\n\\tif s[x:x + 2] == 'AB':\\n\\t\\tm += str(x) + ' '\\n\\telse:\\n\\t\\tpass\\nfor y in range(1, len(s)):\\n\\tif s[y - 1:y + 1] == 'BA':\\n\\t\\tn += str(y) + ' '\\n\\telse:\\n\\t\\tpass\\nif m == '' or n == '':\\n\\tprint('NO')\\nelse:\\n\\tm = m.split()\\n\\tn = n.split()\\n\\tfor x in range(len(m)):\\n\\t\\tfor y in range(len(n)):\\n\\t\\t\\tif m[x] != n[y] and int(m[x]) != int(n[y]) - 2:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpass\\n\\t\\tif m[x] != n[y] and int(m[x]) != int(n[y]) - 2:\\n\\t\\t\\tbreak\\n\\t\\telif x == len(m) - 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tpass\\n\", \"s = input()\\nabEarly = 0\\nbaEarly = 0\\naSeen = False\\nbSeen = False\\ndone = False\\nfor i in range(len(s)):\\n\\tif baEarly > 0:\\n\\t\\tbaEarly += 1\\n\\tif abEarly > 0:\\n\\t\\tabEarly += 1\\n\\tnext = s[i]\\n\\tif next == 'A':\\n\\t\\tif bSeen:\\n\\t\\t\\tbaEarly += 1\\n\\t\\t\\tif abEarly > 2:\\n\\t\\t\\t\\tdone = True\\n\\t\\taSeen = True\\n\\t\\tbSeen = False\\n\\telif next == 'B':\\n\\t\\tif aSeen:\\n\\t\\t\\tabEarly += 1\\n\\t\\t\\tif baEarly > 2:\\n\\t\\t\\t\\tdone = True\\n\\t\\tbSeen = True\\n\\t\\taSeen = False\\n\\telse:\\n\\t\\taSeen = False\\n\\t\\tbSeen = False\\nif done:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nr = lambda : sys.stdin.readline().rstrip()\\n\\ndef find_ab(n):\\n\\tfor i in range(len(n) - 1):\\n\\t\\tif n[i:i + 2] == 'AB':\\n\\t\\t\\treturn i\\n\\treturn -1\\n\\ndef find_ba(n):\\n\\tfor i in range(len(n) - 1):\\n\\t\\tif n[i:i + 2] == 'BA':\\n\\t\\t\\treturn i\\n\\treturn -1\\nn = r()\\nidx1 = find_ab(n)\\nidx2 = find_ba(n)\\nif idx1 != -1 and find_ba(n[idx1 + 2:]) != -1:\\n\\tprint('YES')\\nelif idx2 != -1 and find_ab(n[idx2 + 2:]) != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nif a.find('AB') >= 0 and a[a.find('AB') + 2:].find('BA') >= 0 or (a.find('BA') >= 0 and a[a.find('BA') + 2:].find('AB') >= 0):\\n\\tprint('Yes')\\nelse:\\n\\tprint('No')\\n\", \"s = input()\\nn = len(s)\\n(b, b1) = ([], [])\\nfor i in range(n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb1.append(i)\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tb.append(i)\\nfor i in range(len(b)):\\n\\tc = 0\\n\\tif b[i] - 1 in b1:\\n\\t\\tc += 1\\n\\tif b[i] + 1 in b1:\\n\\t\\tc += 1\\n\\tif len(b1) > c:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"string = str(input())\\nanswer = 'NO'\\n(indexAB, indexBA) = (-1, -1)\\n(countAB, countBA) = (0, 0)\\nfor i in range(2, len(string) + 1):\\n\\tsub = string[i - 2:i]\\n\\tif sub == 'AB':\\n\\t\\tindexAB = i - 2\\n\\t\\tcountAB += 1\\n\\tif sub == 'BA':\\n\\t\\tindexBA = i - 2\\n\\t\\tcountBA += 1\\nif indexAB + 1 == indexBA or indexAB == indexBA + 1:\\n\\tif countAB > 1 and countBA > 1:\\n\\t\\tanswer = 'YES'\\nelif countAB != 0 and countBA != 0:\\n\\tanswer = 'YES'\\nprint(answer)\\n\", \"s = input()\\na = []\\ni = s.find('AB')\\nwhile i != -1:\\n\\ta += [i]\\n\\ti = s.find('AB', i + 2)\\nb = []\\ni = s.find('BA')\\nwhile i != -1:\\n\\tb += [i]\\n\\ti = s.find('BA', i + 2)\\nn = len(a)\\nm = len(b)\\nfor i in range(n):\\n\\tfor j in range(m):\\n\\t\\tif abs(a[i] - b[j]) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nn = len(s)\\nflag1 = 0\\nflag2 = 0\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\tif s[j] == 'B' and s[j + 1] == 'A':\\n\\t\\t\\t\\tflag1 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nfor i in range(n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\tif s[j] == 'A' and s[j + 1] == 'B':\\n\\t\\t\\t\\tflag2 = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tbreak\\nif flag1 or flag2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na1 = s.find('AB')\\na2 = s.find('BA')\\na3 = s[a1 + 2:].find('BA')\\na4 = s[a2 + 2:].find('AB')\\nif a1 >= 0 and a3 >= 0 or (a2 >= 0 and a4 >= 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import *\\ns = input()\\nif s.find('ABA') + 1:\\n\\tsc = s[:s.find('ABA')] + s[s.find('ABA') + 3:]\\n\\tif sc.find('AB') + 1 or sc.find('BA') + 1:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\nif s.find('BAB') + 1:\\n\\tsc = s[:s.rfind('BAB')] + s[s.rfind('BAB') + 3:]\\n\\tif sc.find('AB') + 1 or sc.find('BA') + 1:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\nif not s.find('ABA') + 1 and (not s.find('BAB') + 1):\\n\\tif s.find('AB') + 1 and s.find('BA') + 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nabmishe = False\\nbamishe = False\\nabmisherev = False\\nbamisherev = False\\ncnt = 0\\nwhile cnt < n - 1:\\n\\tif not abmishe and s[cnt:cnt + 2] == 'AB':\\n\\t\\tabmishe = True\\n\\t\\tcnt += 1\\n\\telif not bamishe and s[cnt:cnt + 2] == 'BA':\\n\\t\\tbamishe = True\\n\\t\\tcnt += 1\\n\\tcnt += 1\\ncnt2 = n - 1\\nwhile cnt2 > 0:\\n\\tif not bamisherev and s[cnt2 - 1:cnt2 + 1] == 'BA':\\n\\t\\tbamisherev = True\\n\\t\\tcnt2 -= 1\\n\\telif not abmisherev and s[cnt2 - 1:cnt2 + 1] == 'AB':\\n\\t\\tabmisherev = True\\n\\t\\tcnt2 -= 1\\n\\tcnt2 -= 1\\nif abmishe and bamishe or (abmisherev and bamisherev):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def compute_prefix_function(p):\\n\\ts = [0] * len(p)\\n\\tborder = 0\\n\\tfor i in range(1, len(p)):\\n\\t\\twhile border > 0 and p[i] != p[border]:\\n\\t\\t\\tborder = s[border - 1]\\n\\t\\tif p[i] == p[border]:\\n\\t\\t\\tborder += 1\\n\\t\\telse:\\n\\t\\t\\tborder = 0\\n\\t\\ts[i] = border\\n\\treturn s\\n\\ndef kmp(p, t, sep='$'):\\n\\tS = '{}{}{}'.format(p, sep, t)\\n\\ts = compute_prefix_function(S)\\n\\tresult = []\\n\\tfor i in range(len(p), len(S)):\\n\\t\\tif s[i] == len(p):\\n\\t\\t\\tresult.append(i - 2 * len(p))\\n\\treturn result\\n\\ndef exist_two_non_overlapping(first, second):\\n\\tif not first or not second:\\n\\t\\treturn False\\n\\tok = False\\n\\tfor i in first:\\n\\t\\tfor j in second:\\n\\t\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\t\\treturn True\\n\\treturn ok\\nword = input()\\nfirst = kmp('AB', word)\\nsecond = kmp('BA', word)\\nif exist_two_non_overlapping(first, second):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import exit\\n\\ndef func():\\n\\ts = input().strip()\\n\\tAIDX = []\\n\\tBIDX = []\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tAIDX.append(i)\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tBIDX.append(i)\\n\\tif len(AIDX) == 0 or len(BIDX) == 0:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\tif abs(min(AIDX) - min(BIDX)) > 1 or abs(max(AIDX) - min(BIDX)) > 1 or abs(max(BIDX) - min(AIDX)) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nfunc()\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\ta = s.count('AB')\\n\\tb = s.count('BA')\\n\\tx = s.count('ABA')\\n\\ty = s.count('BAB')\\n\\tif a == 1 and b == 1 and (x + y == 1):\\n\\t\\tprint('NO')\\n\\telif a == 1 and b == 2 and (s.count('BABA') == 1):\\n\\t\\tprint('NO')\\n\\telif a == 2 and b == 1 and (s.count('ABAB') == 1):\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from bisect import bisect_right as br\\ns = input()\\nab = []\\nba = []\\nans = 'NO'\\nfor i in range(1, len(s)):\\n\\tif s[i - 1] == 'B' and s[i] == 'A':\\n\\t\\tidx = br(ab, i - 1)\\n\\t\\tif idx > 0 and ab[idx - 1] != i - 1 or idx > 1:\\n\\t\\t\\tans = 'YES'\\n\\t\\tba.append(i)\\n\\tif s[i - 1] == 'A' and s[i] == 'B':\\n\\t\\tidx = br(ba, i - 1)\\n\\t\\tif idx > 0 and ba[idx - 1] != i - 1 or idx > 1:\\n\\t\\t\\tans = 'YES'\\n\\t\\tab.append(i)\\nprint(ans)\\n\", \"s = str(input())\\na = s.find('AB')\\nb = s.find('BA')\\nprint('YES' if a + 1 and s.find('BA', a + 2) + 1 or (b + 1 and s.find('AB', b + 2) + 1) else 'NO')\\n\", \"s = input()\\nabfound = bafound = -1\\nfor i in range(len(s) - 1):\\n\\tif abfound == -1 and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\tabfound = i\\n\\telif bafound == -1 and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\tbafound = i\\n\\tif abfound != -1 and bafound != -1:\\n\\t\\tbreak\\nif abfound == -1 or bafound == -1:\\n\\tprint('NO')\\n\\texit(0)\\nif abfound == bafound + 1 or bafound == abfound + 1:\\n\\tfor i in range(max(bafound + 2, abfound + 2), len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tnewabfound = True\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tnewbafound = True\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nelse:\\n\\tprint('YES')\\n\\texit(0)\\nprint('NO')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.rfind('AB')\\nc = s.find('BA')\\nd = s.rfind('BA')\\nprint('YNEOS'[not ((abs(a - d) > 1 or abs(b - c) > 1) and min(a, b, c, d) >= 0)::2])\\n\", \"import re\\ns = input()\\nif re.search('AB', s) is None or re.search('BA', s) is None:\\n\\tprint('NO')\\nelse:\\n\\tpresence = re.search('AB.*BA|BA.*AB', s)\\n\\tif presence is None:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"string = input()\\ntemp = string\\na = len(string)\\nstring = string.replace('AB', '  ', 1)\\nstring = string.replace('BA', '  ', 1)\\nstring = string.replace('  ', '')\\nb = len(string)\\nif a - 4 == b:\\n\\tprint('YES')\\nelse:\\n\\tstring = temp\\n\\ta = len(string)\\n\\tstring = string.replace('BA', '  ', 1)\\n\\tstring = string.replace('AB', '  ', 1)\\n\\tstring = string.replace('  ', '')\\n\\tb = len(string)\\n\\tif a - 4 == b:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import string\\na = input()\\nif 'AB' in a:\\n\\tb = a.replace('AB', '-', 1)\\n\\tif 'BA' in b:\\n\\t\\tprint('YES')\\n\\telif 'BA' in a:\\n\\t\\ta = a.replace('BA', '-', 1)\\n\\t\\tif 'AB' in a:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"list1 = list(input())\\npos = -1\\nfor i in range(len(list1) - 1):\\n\\tif list1[i] == 'A':\\n\\t\\tif list1[i + 1] == 'B':\\n\\t\\t\\tpos = i\\n\\t\\t\\tbreak\\nif pos == -1:\\n\\tprint('NO')\\nelse:\\n\\tk = 0\\n\\tfor i in range(pos + 2, len(list1) - 1):\\n\\t\\tif list1[i] == 'B':\\n\\t\\t\\tif list1[i + 1] == 'A':\\n\\t\\t\\t\\tk = 1\\n\\t\\t\\t\\tbreak\\n\\tif k == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tpos = -1\\n\\t\\tk = 0\\n\\t\\tfor i in range(len(list1) - 1):\\n\\t\\t\\tif list1[i] == 'B':\\n\\t\\t\\t\\tif list1[i + 1] == 'A':\\n\\t\\t\\t\\t\\tpos = i\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif pos == -1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tfor i in range(pos + 2, len(list1) - 1):\\n\\t\\t\\t\\tif list1[i] == 'A':\\n\\t\\t\\t\\t\\tif list1[i + 1] == 'B':\\n\\t\\t\\t\\t\\t\\tk = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif k == 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('NO')\\n\", \"inputsa = input().lower()\\ninputs = inputsa\\nab_ex = False\\nba_ex = False\\nit = True\\nvar1 = 'ab'\\nvar2 = 'ba'\\nwhile 1:\\n\\tif inputs.find(var1) > -1:\\n\\t\\ttemp = inputs.find(var1)\\n\\t\\tinputs = inputs[:temp] + '0' + inputs[temp + 2:]\\n\\t\\tab_ex = True\\n\\tif inputs.find(var2) > -1:\\n\\t\\ttemp = inputs.find(var2)\\n\\t\\tinputs = inputs[:temp] + '0' + inputs[temp + 2:]\\n\\t\\tba_ex = True\\n\\tif ab_ex == True and ba_ex == False and (it == True):\\n\\t\\tinputs = inputsa\\n\\t\\tvar1 = 'ba'\\n\\t\\tvar2 = 'ab'\\n\\t\\tab_ex = False\\n\\t\\tit = False\\n\\t\\tcontinue\\n\\tbreak\\nif ab_ex == True and ba_ex == True:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from sys import stdin, stdout\\nimport bisect\\nI = lambda : stdin.readline().strip()\\nread = lambda : map(int, stdin.readline().split())\\ns = I()\\nx = s.find('AB')\\nif x > -1:\\n\\tif s[x + 2:].find('BA') > -1:\\n\\t\\tprint('YES')\\n\\t\\tquit()\\nx = s.find('BA')\\nif x > -1:\\n\\tif s[x + 2:].find('AB') > -1:\\n\\t\\tprint('YES')\\n\\t\\tquit()\\nprint('NO')\\nquit()\\nn = int(I())\\ns = tuple(read())\\nc = tuple(read())\\nINF = 10 ** 9\\nmin_so_far = INF\\nfor j in range(n):\\n\\tm1 = min([INF] + [c[i] for i in range(j) if s[i] < s[j]])\\n\\tm2 = min([INF] + [c[i] for i in range(j + 1, n) if s[i] > s[j]])\\n\\tmin_so_far = min(min_so_far, c[j] + m1 + m2)\\nprint(min_so_far if min_so_far < INF else -1)\\nquit()\\n(n, m, d) = read()\\narr = []\\nfor i in range(n):\\n\\tarr.extend(list(read()))\\nbase = arr[0]\\nfor i in arr:\\n\\tif (i - base) % d:\\n\\t\\tprint(-1)\\n\\t\\tquit()\\narr.sort()\\ns = n * m\\nSum = 0\\ndev1 = dev2 = 0\\nif s % 2:\\n\\tmedian = arr[s // 2]\\n\\tfor i in arr:\\n\\t\\tSum += abs(i - median)\\nelse:\\n\\t(m1, m2) = (arr[s // 2 - 1], arr[s // 2])\\n\\tSum2 = 0\\n\\tfor i in arr:\\n\\t\\tSum += abs(i - m1)\\n\\t\\tSum2 += abs(i - m2)\\n\\tSum = min(Sum, Sum2)\\nprint(Sum // d)\\n\", \"s = input()\\nr = [i for i in range(len(s)) if s.startswith('AB', i)]\\nl = [i for i in range(len(s)) if s.startswith('BA', i)]\\nif len(r) and len(l) and (abs(r[len(r) - 1] - l[0]) > 1 or abs(l[len(l) - 1] - r[0]) > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nfi = s.find('AB')\\nsc = s.rfind('BA')\\nif fi == -1 or sc == -1:\\n\\tprint('NO')\\n\\texit(0)\\nif sc >= fi + 2:\\n\\tprint('YES')\\nelse:\\n\\tfi = s.rfind('AB')\\n\\tsc = s.find('BA')\\n\\tif fi >= sc + 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nAB = list()\\nBA = list()\\ni = 0\\nwhile s.find('AB', i, len(s)) != -1:\\n\\tAB.append(s.find('AB', i, len(s)))\\n\\ti = s.find('AB', i, len(s)) + 1\\ni = 0\\nwhile s.find('BA', i, len(s)) != -1:\\n\\tBA.append(s.find('BA', i, len(s)))\\n\\ti = s.find('BA', i, len(s)) + 1\\nif AB and BA:\\n\\tfor a in AB:\\n\\t\\tfor b in BA:\\n\\t\\t\\tif abs(a - b) >= 2:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\nprint('NO')\\n\", \"import math\\ns = input()\\nsl = len(s)\\naNos = []\\nbNos = []\\nfor i in range(sl - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\taNos.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tbNos.append(i)\\nif len(aNos) and len(bNos) and (abs(aNos[0] - bNos[-1]) >= 2 or abs(aNos[-1] - bNos[0]) >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nAB_left = min([i if s[i:i + 2] == 'AB' else 100000000 for i in range(len(s))])\\nAB_right = max([i if s[i:i + 2] == 'AB' else -100000000 for i in range(len(s))])\\nBA_left = min([i if s[i:i + 2] == 'BA' else 100000000 for i in range(len(s))])\\nBA_right = max([i if s[i:i + 2] == 'BA' else -100000000 for i in range(len(s))])\\nprint('YES' if AB_left + 1 < BA_right or BA_left + 1 < AB_right else 'NO')\\n\", \"s = input()\\na = []\\nb = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb.append(i)\\nif a and b and (len(a) + len(b) >= 4):\\n\\tprint('YES')\\nelif a and b and (len(a) + len(b) == 3):\\n\\tif 'ABAB' in s:\\n\\t\\tprint('NO')\\n\\telif 'BABA' in s:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif a and b and (len(a) + len(b) == 2):\\n\\tif abs(a[0] - b[0]) >= 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\npos = s.find('AB')\\nif pos < 0:\\n\\tprint('NO')\\n\\tquit()\\nls = [s[:pos], s[pos + 2:]]\\nfor m in ls:\\n\\tif 'BA' in m:\\n\\t\\tprint('YES')\\n\\t\\tquit()\\npos = s.find('BA')\\nif pos < 0:\\n\\tprint('NO')\\n\\tquit()\\nls = [s[:pos], s[pos + 2:]]\\nfor m in ls:\\n\\tif 'AB' in m:\\n\\t\\tprint('YES')\\n\\t\\tquit()\\nprint('NO')\\n\", \"from os import path\\nimport sys, time, collections as c, math as m, pprint as p\\n(maxx, localsys, mod) = (float('inf'), 0, int(1000000000.0 + 7))\\nif path.exists('input.txt'):\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\ninput = sys.stdin.readline\\nS = input()\\ns = S\\ns = s.replace('AB', '0', 1)\\ns = s.replace('BA', '1', 1)\\nif '0' in s and '1' in s:\\n\\tprint('YES')\\nelse:\\n\\tS = S.replace('BA', '1', 1)\\n\\tS = S.replace('AB', '0', 1)\\n\\tprint('YES') if '1' in S and '0' in S else print('NO')\\n\", \"s = input()\\nn = len(s)\\ni = 0\\npab = 0\\npba = 0\\nflag = 0\\nwhile i < n:\\n\\tif s[i] == 'A' and (pab == 0 or flag == 1):\\n\\t\\tif i + 1 < n and s[i + 1] == 'B':\\n\\t\\t\\tpab = 1\\n\\t\\t\\tif flag == 1:\\n\\t\\t\\t\\tpba = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif i + 2 < n and s[i + 2] == 'A':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\tif flag == 1:\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'B' and (pba == 0 or flag == 1):\\n\\t\\tif i + 1 < n and s[i + 1] == 'A':\\n\\t\\t\\tpba = 1\\n\\t\\t\\tif flag == 1:\\n\\t\\t\\t\\tpab = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif i + 2 < n and s[i + 2] == 'B':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\tif flag == 1:\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telse:\\n\\t\\ti += 1\\nif pab == 1 and pba == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string1 = input()\\nab = string1.count('ABA')\\nstring = string1.replace('ABA', 'h')\\nab += string.count('BAB')\\nstring = string.replace('BAB', 'h')\\na = string.count('AB')\\nb = string.count('BA')\\nif ab > 0 and ab + a + b > 1 or (a > 0 and b > 0) or 'BABAB' in string1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def func(s, pat1, pat2):\\n\\tif len(s) < 4:\\n\\t\\treturn False\\n\\ti1 = s.find(pat1)\\n\\ti2 = s.rfind(pat2)\\n\\tif i1 == -1 or i2 == -1:\\n\\t\\treturn False\\n\\tif max(i1 - i2, i2 - i1) > 1:\\n\\t\\treturn True\\n\\treturn False\\ns = input()\\nif func(s, 'AB', 'BA') or func(s, 'BA', 'AB'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from collections import defaultdict, deque, Counter, OrderedDict\\n\\ndef main():\\n\\ts = input()\\n\\t(aba, ab, ba) = (0, 0, 0)\\n\\tcurr = ''\\n\\tfor c in s:\\n\\t\\tif curr == 'AB' and c == 'A':\\n\\t\\t\\taba += 1\\n\\t\\t\\tcurr = ''\\n\\t\\telif curr == 'BA' and c == 'B':\\n\\t\\t\\taba += 1\\n\\t\\t\\tcurr = ''\\n\\t\\telif c == 'A' and curr == 'B':\\n\\t\\t\\tcurr = 'BA'\\n\\t\\telif c == 'B' and curr == 'A':\\n\\t\\t\\tcurr = 'AB'\\n\\t\\telse:\\n\\t\\t\\tif curr == 'AB':\\n\\t\\t\\t\\tab += 1\\n\\t\\t\\tif curr == 'BA':\\n\\t\\t\\t\\tba += 1\\n\\t\\t\\tcurr = c\\n\\tif curr == 'AB':\\n\\t\\tab += 1\\n\\tif curr == 'BA':\\n\\t\\tba += 1\\n\\tans = ab >= 1 and ba >= 1\\n\\tans |= ab >= 1 and ba + aba >= 1\\n\\tans |= ab + aba >= 1 and ba >= 1\\n\\tans |= aba >= 2\\n\\tif ans:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"a = input()\\nb = len(a)\\nc = 0\\nd = 0\\ne = 0\\nf = 0\\ng = 0\\nl = 0\\nfor i in range(0, b - 1):\\n\\tif a[i] == 'A':\\n\\t\\tif a[i + 1] == 'B':\\n\\t\\t\\tc = 1\\n\\t\\t\\tif i + 2 < b:\\n\\t\\t\\t\\tif a[i + 2] == 'A':\\n\\t\\t\\t\\t\\tf = 1\\n\\telif a[i] == 'B':\\n\\t\\tif a[i + 1] == 'A':\\n\\t\\t\\te = 1\\n\\t\\t\\tif i + 2 < b:\\n\\t\\t\\t\\tif a[i + 2] == 'B':\\n\\t\\t\\t\\t\\tg = 1\\n\\tif c == 1:\\n\\t\\tif f == 1:\\n\\t\\t\\tfor j in range(i + 3, b - 1):\\n\\t\\t\\t\\tif a[j] == 'B':\\n\\t\\t\\t\\t\\tif a[j + 1] == 'A':\\n\\t\\t\\t\\t\\t\\td = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telif a[j] == 'A':\\n\\t\\t\\t\\t\\tif a[j + 1] == 'B':\\n\\t\\t\\t\\t\\t\\td = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tfor j in range(i + 2, b - 1):\\n\\t\\t\\t\\tif a[j] == 'B':\\n\\t\\t\\t\\t\\tif a[j + 1] == 'A':\\n\\t\\t\\t\\t\\t\\td = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\tbreak\\n\\tif e == 1:\\n\\t\\tif g == 1:\\n\\t\\t\\tfor j in range(i + 3, b - 1):\\n\\t\\t\\t\\tif a[j] == 'B':\\n\\t\\t\\t\\t\\tif a[j + 1] == 'A':\\n\\t\\t\\t\\t\\t\\td = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telif a[j] == 'A':\\n\\t\\t\\t\\t\\tif a[j + 1] == 'B':\\n\\t\\t\\t\\t\\t\\td = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tfor j in range(i + 2, b - 1):\\n\\t\\t\\t\\tif a[j] == 'A':\\n\\t\\t\\t\\t\\tif a[j + 1] == 'B':\\n\\t\\t\\t\\t\\t\\td = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\tbreak\\n\\tif d == 1:\\n\\t\\tbreak\\nif d == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string = str(input())\\nABindex = string.find('AB')\\nBAindex = string.find('BA')\\nif (ABindex != -1) & (string.find('BA', ABindex + 2) != -1):\\n\\tprint('YES')\\nelif (BAindex != -1) & (string.find('AB', BAindex + 2) != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def getInts():\\n\\treturn [int(s) for s in input().split()]\\n\\ndef getInt():\\n\\treturn int(input())\\n\\ndef getStrs():\\n\\treturn [s for s in input().split()]\\n\\ndef getStr():\\n\\treturn input()\\n\\ndef listStr():\\n\\treturn list(input())\\n\\ndef solve():\\n\\tS = getStr()\\n\\t(AB, BA) = ([], [])\\n\\tfor j in range(len(S) - 1):\\n\\t\\ttmp = S[j] + S[j + 1]\\n\\t\\tif tmp == 'AB':\\n\\t\\t\\tAB.append(j)\\n\\t\\telif tmp == 'BA':\\n\\t\\t\\tBA.append(j)\\n\\t(LA, LB) = (len(AB), len(BA))\\n\\tif min(LA, LB) == 0:\\n\\t\\treturn 'NO'\\n\\tif LA > 1 and LB > 1:\\n\\t\\treturn 'YES'\\n\\tif LA == 1 and LB == 1:\\n\\t\\tif abs(AB[0] - BA[0]) > 1:\\n\\t\\t\\treturn 'YES'\\n\\t\\treturn 'NO'\\n\\tif LA == 1:\\n\\t\\tind = AB[0]\\n\\t\\tfor index in BA:\\n\\t\\t\\tif abs(index - ind) > 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\tif LB == 1:\\n\\t\\tind = BA[0]\\n\\t\\tfor index in AB:\\n\\t\\t\\tif abs(index - ind) > 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nans = solve()\\nprint(ans)\\n\", \"import sys\\na = input()\\nif a.find('AB') == -1 or a.find('BA') == -1:\\n\\tprint('NO')\\n\\tsys.exit()\\nf1 = a.find('AB')\\nif a.find('BA', f1 + 2, len(a)) != -1:\\n\\tprint('YES')\\n\\tsys.exit()\\nf2 = a.find('BA')\\nif a.find('AB', f2 + 2, len(a)) != -1:\\n\\tprint('YES')\\n\\tsys.exit()\\nprint('NO')\\n\", \"s = input()\\nk = 0\\nab = -1\\nba = -1\\nab = s.find('AB')\\nif ab != -1:\\n\\tba = s[ab + 2:].find('BA')\\n\\tif ba != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tba = s.find('BA')\\n\\t\\tif ba != -1:\\n\\t\\t\\tab = s[ba + 2:].find('AB')\\n\\t\\t\\tif ab != -1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\n(temp1, temp2) = ([], [])\\ncount = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ttemp1.append(i + i + 1)\\n\\t\\tcount += 1\\nfor i in range(len(s) - 1, 0, -1):\\n\\tif s[i] == 'A' and s[i - 1] == 'B':\\n\\t\\ttemp2.append(i - 1 + i)\\n\\t\\tcount += 1\\nif temp1 and temp2:\\n\\tif count >= 2:\\n\\t\\tif temp1 == temp2:\\n\\t\\t\\tprint('NO')\\n\\t\\telif len(temp1) + len(temp2) == 3:\\n\\t\\t\\tif sum(temp1) // 2 == sum(temp2) or sum(temp2) // 2 == sum(temp1):\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\telif len(temp1) + len(temp2) > 3:\\n\\t\\t\\tprint('YES')\\n\\t\\telif len(temp1) == 1 and len(temp2) == 1:\\n\\t\\t\\tif abs(temp1[0] - temp2[0]) == 2:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\ncnt1 = [0] * (n - 1)\\ncnt2 = [0] * (n - 1)\\nstat = 0\\nif s[0:2] == 'AB':\\n\\tcnt1[0] = 1\\nelif s[0:2] == 'BA':\\n\\tcnt2[0] = 1\\nfor i in range(1, n - 1):\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tcnt2[i] = cnt2[i - 1] + 1\\n\\t\\tif i >= 2 and cnt1[i - 2] > 0:\\n\\t\\t\\tstat = 1\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tcnt2[i] = cnt2[i - 1]\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tcnt1[i] = cnt1[i - 1] + 1\\n\\t\\tif i >= 2 and cnt2[i - 2] > 0:\\n\\t\\t\\tstat = 1\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tcnt1[i] = cnt1[i - 1]\\nif stat == 0:\\n\\tprint('NO')\\n\", \"st = input()\\nif 'AB' in st and 'BA' in st:\\n\\tstt = st\\n\\tindex = stt.index('AB')\\n\\tstt = stt[:index] + '0' + stt[index + 2:]\\n\\tif 'BA' in stt:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tstt = st\\n\\t\\tindex = stt.index('BA')\\n\\t\\tstt = stt[:index] + '0' + stt[index + 2:]\\n\\t\\tif 'AB' in stt:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"S = input()\\nk1 = 0\\nk2 = 0\\nn = len(S)\\nc = 0\\np = 0\\nfor i in range(n - 2):\\n\\tif S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] != 'A'):\\n\\t\\tk1 = 1\\n\\t\\tp = i + 2\\n\\t\\tbreak\\n\\tif S[i] == 'B' and S[i + 1] == 'A' and (S[i + 2] != 'B'):\\n\\t\\tk2 = 1\\n\\t\\tp = i + 2\\n\\t\\tbreak\\n\\tif S[i] == 'B' and S[i + 1] == 'A' and (S[i + 2] == 'B'):\\n\\t\\tk1 = 1\\n\\t\\tk2 = 1\\n\\t\\tp = i + 3\\n\\t\\tc = 1\\n\\t\\tbreak\\n\\tif S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] == 'A'):\\n\\t\\tk1 = 1\\n\\t\\tk2 = 1\\n\\t\\tp = i + 3\\n\\t\\tc = 1\\n\\t\\tbreak\\nfor i in range(p, n - 2):\\n\\tif S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] != 'A'):\\n\\t\\tk1 = k1 + 1\\n\\tif S[i] == 'B' and S[i + 1] == 'A' and (S[i + 2] != 'B'):\\n\\t\\tk2 = 1 + 1\\n\\tif S[i] == 'B' and S[i + 1] == 'A' and (S[i + 2] == 'B'):\\n\\t\\tk1 = k1 + 1\\n\\t\\tk2 = k2 + 1\\n\\tif S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] == 'A'):\\n\\t\\tk1 = k1 + 1\\n\\t\\tk2 = k2 + 1\\nif n >= 3 and p < n - 1:\\n\\tif S[n - 2] == 'A' and S[n - 1] == 'B' and (S[n - 3] != 'B'):\\n\\t\\tk1 = k1 + 1\\n\\tif S[n - 2] == 'B' and S[n - 1] == 'A' and (S[n - 3] != 'A'):\\n\\t\\tk2 = k2 + 1\\n\\tif S[n - 2] == 'A' and S[n - 1] == 'B' and (S[n - 3] == 'B'):\\n\\t\\tk1 = k1 + 1\\n\\t\\tk2 = k2 + 1\\n\\t\\tc = 1\\n\\tif S[n - 2] == 'B' and S[n - 1] == 'A' and (S[n - 3] == 'A'):\\n\\t\\tk1 = k1 + 1\\n\\t\\tk2 = k2 + 1\\n\\t\\tc = 1\\nif k1 >= 1 and k2 >= 2 and (c == 1) or (k1 >= 2 and k2 >= 1 and (c == 1)):\\n\\tprint('YES')\\nif c == 0 and k1 >= 1 and (k2 >= 1):\\n\\tprint('YES')\\nif c == 0 and k1 < 1 or (k2 < 1 and c == 0):\\n\\tprint('NO')\\nif c == 1 and k1 <= 1 and (k2 < 2) or (k2 <= 1 and c == 1 and (k1 < 2)):\\n\\tprint('NO')\\n\", \"s = input()\\nd = {'AB': [], 'BA': []}\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\td['AB'].append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\td['BA'].append(i)\\n\\ndef f(d):\\n\\tfor i in d['AB']:\\n\\t\\tfor j in d['BA']:\\n\\t\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(f(d))\\n\", \"from sys import exit\\ns = input()\\nif s.count('AB') * s.count('BA') == 0:\\n\\tprint('NO')\\n\\texit(0)\\nif s.count('AB') + s.count('BA') - s.count('BAB') - s.count('ABA') >= 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nmin_AB = len(s) + 10\\nmax_AB = 0\\nmin_BA = len(s) + 10\\nmax_BA = 0\\ni = 0\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tmin_AB = min(min_AB, i)\\n\\t\\tmax_AB = max(max_AB, i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tmin_BA = min(min_BA, i)\\n\\t\\tmax_BA = max(max_BA, i)\\nif min_AB < max_BA - 1 or min_BA < max_AB - 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n1 = input()\\nn2 = n1\\nAB1 = False\\nBA1 = False\\nAB2 = False\\nBA2 = False\\nif 'AB' in n1:\\n\\tAB1 = True\\n\\tfirstAB = n1.find('AB')\\n\\tn1 = n1[:firstAB] + ' ' + n1[firstAB + 2:]\\n\\tif 'BA' in n1:\\n\\t\\tBA1 = True\\nif 'BA' in n2:\\n\\tBA2 = True\\n\\tfirstBA = n2.find('BA')\\n\\tn2 = n2[:firstBA] + ' ' + n2[firstBA + 2:]\\n\\tif 'AB' in n2:\\n\\t\\tAB2 = True\\nif AB1 == True and BA1 == True or (AB2 == True and BA2 == True):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nw = 0\\nif 'AB' not in s or 'BA' not in s:\\n\\tprint('NO')\\nelse:\\n\\tarr1 = []\\n\\tarr2 = []\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tarr1.append(i)\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tarr2.append(i)\\n\\tif arr2[-1] > arr1[0] + 1 or arr1[-1] > arr2[0] + 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nAB = []\\nBA = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tAB.append(i)\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tBA.append(i)\\nif len(AB) >= 2 and len(BA) >= 2:\\n\\tprint('YES')\\nelif len(AB) == 0 or len(BA) == 0:\\n\\tprint('NO')\\nelif len(AB) == 1:\\n\\tout = 'NO'\\n\\tfor i in BA:\\n\\t\\tif i != AB[0] + 1 and i != AB[0] - 1:\\n\\t\\t\\tout = 'YES'\\n\\t\\t\\tbreak\\n\\tprint(out)\\nelif len(BA) == 1:\\n\\tout = 'NO'\\n\\tfor i in AB:\\n\\t\\tif i != BA[0] + 1 and i != BA[0] - 1:\\n\\t\\t\\tout = 'YES'\\n\\t\\t\\tbreak\\n\\tprint(out)\\n\", \"import sys\\nab = []\\nba = []\\n\\ndef search(txt):\\n\\tprev = txt[0]\\n\\tglobal ab\\n\\tglobal ba\\n\\tfor i in range(1, len(txt)):\\n\\t\\tcur = txt[i]\\n\\t\\tif prev == 'A' and cur == 'B':\\n\\t\\t\\tab.append(i - 1)\\n\\t\\tif prev == 'B' and cur == 'A':\\n\\t\\t\\tba.append(i - 1)\\n\\t\\tprev = cur\\ntxt = input()\\nsearch(txt)\\nfor item in ab:\\n\\tfor item2 in ba:\\n\\t\\tif item2 != item + 1 and item2 != item - 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tsys.exit()\\nprint('NO')\\n\", \"s = input().strip()\\nls = len(s)\\nflags = [0, 0]\\ni = 0\\nd = dict()\\nwhile i < ls - 1:\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tif 'AB' in d:\\n\\t\\t\\td['AB'] += [i]\\n\\t\\telse:\\n\\t\\t\\td['AB'] = [i]\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tif 'BA' in d:\\n\\t\\t\\td['BA'] += [i]\\n\\t\\telse:\\n\\t\\t\\td['BA'] = [i]\\n\\telse:\\n\\t\\tpass\\n\\ti += 1\\ns1 = {}\\ns2 = {}\\nif 'AB' in d:\\n\\ts1 = set(d['AB'])\\nif 'BA' in d:\\n\\ts2 = set(d['BA'])\\nif len(s1) > 0 and len(s2) > 0:\\n\\tif max(s2) - min(s1) > 1 or max(s1) - min(s2) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\na = s.find('AB')\\nb = s.find('BA')\\nf = 0\\nif a != -1 and s.find('BA', a + 2) != -1 or (b != -1 and s.find('AB', b + 2) != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\ni = 0\\nsa = s\\nnk = 0\\nwhile i < n - 1:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ts = s[0:i] + 'D' + s[i + 2:]\\n\\t\\tif 'BA' in s:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tnk = 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\ti += 1\\nif nk == 0:\\n\\ti = 0\\n\\ts = sa\\n\\tnk = 0\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\ts = s[0:i] + 'D' + s[i + 2:]\\n\\t\\t\\tif 'AB' in s:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tnk = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif nk == 0:\\n\\t\\tprint('NO')\\n\", \"from sys import stdin\\ninput = stdin.readline\\n\\ndef substr(s):\\n\\tb = b2 = c = c2 = -2\\n\\tfor ptr in range(len(s) - 1):\\n\\t\\tif s[ptr] == 'A':\\n\\t\\t\\tif s[ptr + 1] == 'B':\\n\\t\\t\\t\\tif 0 <= c < ptr - 1 or 0 <= c2 < ptr - 1:\\n\\t\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\t\\telif b == -2:\\n\\t\\t\\t\\t\\tb = ptr\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tb2 = ptr\\n\\t\\tif s[ptr] == 'B':\\n\\t\\t\\tif s[ptr + 1] == 'A':\\n\\t\\t\\t\\tif 0 <= b < ptr - 1 or 0 <= b2 < ptr - 1:\\n\\t\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\t\\telif c == -2:\\n\\t\\t\\t\\t\\tc = ptr\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tc2 = ptr\\n\\t\\tptr += 1\\n\\treturn 'NO'\\nprint(substr(input().strip()))\\n\", \"s = input()\\nlab = s.find('AB')\\nrab = s.rfind('AB')\\nlba = s.find('BA')\\nrba = s.rfind('BA')\\nprint(['NO', 'YES'][(abs(lab - rba) > 1 or abs(rab - lba) > 1) and min(lab, rab, lba, rba) >= 0])\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef main():\\n\\ts = [c for c in S()]\\n\\tt = []\\n\\tu = []\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif s[i] == 'A':\\n\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\tt.append(i)\\n\\t\\telif s[i] == 'B':\\n\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\tu.append(i)\\n\\tfor c in t:\\n\\t\\tfor d in u:\\n\\t\\t\\tif abs(c - d) > 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(main())\\n\", \"s = input()\\n(a, b) = (list(), list())\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ta.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb.append(i)\\nif len(a) == 0 or len(b) == 0:\\n\\tprint('NO')\\nelse:\\n\\tf = 0\\n\\tfor i in a:\\n\\t\\tfor j in b:\\n\\t\\t\\tif i - 1 != j and i + 1 != j:\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif f == 1:\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"str = input()\\nab = []\\nba = []\\nfor i in range(len(str) - 1):\\n\\tif str[i] == 'A' and str[i + 1] == 'B':\\n\\t\\tab.append(i)\\n\\tif str[i] == 'B' and str[i + 1] == 'A':\\n\\t\\tba.append(i)\\nfor i in range(len(ab)):\\n\\tfor j in range(len(ba)):\\n\\t\\tif abs(ab[i] - ba[j]) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tcontinue\\n\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(k, x) = (s, 1)\\nif 'AB' in s:\\n\\ts = s.replace('AB', ' ', 1)\\n\\tif 'BA' in s:\\n\\t\\tx = 0\\ns = k\\nif 'BA' in s:\\n\\ts = s.replace('BA', ' ', 1)\\n\\tif 'AB' in s:\\n\\t\\tx = 0\\nprint('YNEOS'[x::2])\\n\", \"def two_substring(string):\\n\\tAB = []\\n\\tBA = []\\n\\tfor i in range(len(string)):\\n\\t\\tif string[i] == 'A' and i < len(string) - 1:\\n\\t\\t\\tif string[i + 1] == 'B':\\n\\t\\t\\t\\tAB.append([i, i + 1])\\n\\t\\telif string[i] == 'B' and i < len(string) - 1:\\n\\t\\t\\tif string[i + 1] == 'A':\\n\\t\\t\\t\\tBA.append([i, i + 1])\\n\\tif len(AB) == 0 or len(BA) == 0:\\n\\t\\treturn 'no'\\n\\tfor i in range(len(AB)):\\n\\t\\tfor j in range(len(BA)):\\n\\t\\t\\tif AB[i][0] == BA[j][1] or AB[i][1] == BA[j][0]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn 'yes'\\n\\treturn 'no'\\nstring = input().strip()\\nprint(two_substring(string))\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\tif s.count('A') == 2 and s.count('B') == 2:\\n\\t\\tif s.count('AABB') != 0 or s.count('ABAB') != 0 or s.count('BBAA') != 0 or s.count('BABA') or s.count('AABB'):\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif s.count('AB') > 1 or s.count('BA') > 1:\\n\\t\\tprint('YES')\\n\\telif 'ABA' not in s and 'BAB' not in s:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nx = len(s)\\ni = 0\\nt = ''\\nl = ''\\ndone = 0\\na = -1\\nb = -1\\nwhile i < x - 1:\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tif b != i:\\n\\t\\t\\t\\tif len(l) != 0:\\n\\t\\t\\t\\t\\tif l[0] == 'B' and l[1] == 'A':\\n\\t\\t\\t\\t\\t\\tdone = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif len(t) == 0:\\n\\t\\t\\t\\tt += 'AB'\\n\\t\\t\\t\\ta = i + 1\\n\\telif s[i] == 'B':\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tif a != i:\\n\\t\\t\\t\\tif len(t) != 0:\\n\\t\\t\\t\\t\\tif t[0] == 'A' and t[1] == 'B':\\n\\t\\t\\t\\t\\t\\tdone = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif len(l) == 0:\\n\\t\\t\\t\\tl += 'BA'\\n\\t\\t\\t\\tb = i + 1\\n\\ti += 1\\nif done == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\ni = 0\\nflag = False\\nif s.count('AB') != 0:\\n\\th = s.index('AB')\\n\\tfor i in range(h + 2, len(s) - 1):\\n\\t\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\t\\tflag = True\\nif s.count('BA') != 0:\\n\\th = s.index('BA')\\n\\tfor i in range(h + 2, len(s) - 1):\\n\\t\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\t\\tflag = True\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def f(s):\\n\\t(ab, ba) = (0, 0)\\n\\t(last_ab, last_ba) = (-1, -1)\\n\\tn = len(s)\\n\\tfor i in range(n):\\n\\t\\tif s[i] == 'B' and (i > 0 and s[i - 1] == 'A'):\\n\\t\\t\\tj = i - 1\\n\\t\\t\\tab += 1\\n\\t\\t\\tif ba > 1 or (last_ba >= 0 and last_ba != j - 1):\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\tlast_ab = j\\n\\t\\tif s[i] == 'B' and (i + 1 < n and s[i + 1] == 'A'):\\n\\t\\t\\tba += 1\\n\\t\\t\\tif ab > 1 or (last_ab >= 0 and last_ab != i - 1):\\n\\t\\t\\t\\treturn 'YES'\\n\\t\\t\\tlast_ba = i\\n\\treturn 'NO'\\nassert f('BAB') == 'NO'\\nassert f('ABABAB') == 'YES'\\nassert f('BABABA') == 'YES'\\nassert f('ABA') == 'NO'\\nassert f('BACFAB') == 'YES'\\nassert f('AXBYBXA') == 'NO'\\nassert f('ABAXXXAB') == 'YES'\\ns = input()\\nans = f(s)\\nprint(ans)\\n\", \"s = input()\\nab = 0\\nba = 0\\naba = 0\\nbab = 0\\nn = len(s)\\nif n < 4:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tab += 1\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tba += 1\\n\\tfor i in range(n - 2):\\n\\t\\tif s[i:i + 3] == 'ABA':\\n\\t\\t\\taba += 1\\n\\tfor i in range(n - 2):\\n\\t\\tif s[i:i + 3] == 'BAB':\\n\\t\\t\\tbab += 1\\n\\tif ab == 0 or ba == 0:\\n\\t\\tprint('NO')\\n\\telif ab == 1 and ba == 1:\\n\\t\\tif bab == 1 or aba == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif ab == 1 and ba == 2:\\n\\t\\tif bab == 1 and aba == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif ab == 2 and ba == 1:\\n\\t\\tif bab == 1 and aba == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"s = input()\\nss = s\\ns = s.replace('AB', 'x', 1)\\ns = s.replace('BA', 'y', 1)\\nss = ss.replace('BA', 'y', 1)\\nss = ss.replace('AB', 'x', 1)\\nif 'x' in s and 'y' in s:\\n\\tprint('YES')\\nelif 'x' in ss and 'y' in ss:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import math\\nfrom collections import defaultdict\\nfrom heapq import heappush, heappop\\nfrom decimal import Decimal, getcontext\\n\\ndef solve(arr):\\n\\tab_ints = []\\n\\tba_ints = []\\n\\tfor i in range(len(arr) - 1):\\n\\t\\tif arr[i] == 'A' and arr[i + 1] == 'B':\\n\\t\\t\\tab_ints.append((i, i + 1))\\n\\tfor i in range(len(arr) - 1):\\n\\t\\tif arr[i] == 'B' and arr[i + 1] == 'A':\\n\\t\\t\\tba_ints.append((i, i + 1))\\n\\tfor ab in ab_ints:\\n\\t\\tfor ba in ba_ints:\\n\\t\\t\\tif ab[0] != ba[0] and ab[0] != ba[1] and (ab[1] != ba[0]) and (ab[1] != ba[1]):\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\tprint('NO')\\narr = list(input())\\nsolve(arr)\\n\", \"s = input()\\nab = 0\\nba = 0\\ni = 0\\nfor i in range(len(s) - 1):\\n\\tif i != len(s) - 1:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tab += 1\\n\\t\\t\\tbreak\\nfor j in range(i + 2, len(s) - 1):\\n\\tif j != len(s) - 1:\\n\\t\\tif s[j] == 'B' and s[j + 1] == 'A':\\n\\t\\t\\tba += 1\\n\\t\\t\\tbreak\\nif ab >= 1 and ba >= 1:\\n\\tprint('YES')\\nelse:\\n\\tab = 0\\n\\tba = 0\\n\\ti = 0\\n\\tfor i in range(len(s) - 1):\\n\\t\\tif i != len(s) - 1:\\n\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tba += 1\\n\\t\\t\\t\\tbreak\\n\\tfor j in range(i + 2, len(s) - 1):\\n\\t\\tif j != len(s) - 1:\\n\\t\\t\\tif s[j] == 'A' and s[j + 1] == 'B':\\n\\t\\t\\t\\tab += 1\\n\\t\\t\\t\\tbreak\\n\\tif ab >= 1 and ba >= 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import sys, math\\nfrom collections import deque, defaultdict\\nimport operator as op\\nfrom functools import reduce\\nfrom itertools import permutations\\nsys.setrecursionlimit(10 ** 4)\\nI = sys.stdin.readline\\n\\ndef ii():\\n\\treturn int(I().strip())\\n\\ndef li():\\n\\treturn list(map(int, I().strip().split()))\\n\\ndef mi():\\n\\treturn map(int, I().strip().split())\\n\\ndef ncr(n, r, p):\\n\\tnum = den = 1\\n\\tfor i in range(r):\\n\\t\\tnum = num * (n - i) % p\\n\\t\\tden = den * (i + 1) % p\\n\\treturn num * pow(den, p - 2, p) % p\\n\\ndef gcd(x, y):\\n\\twhile y:\\n\\t\\t(x, y) = (y, x % y)\\n\\treturn x\\n\\ndef valid(row, col, rows, cols, rcross, lcross):\\n\\treturn rows[row] == 0 and cols[col] == 0 and (rcross[col + row] == 0) and (lcross[col - row] == 0)\\n\\ndef div(n):\\n\\tif n == 1:\\n\\t\\treturn 1\\n\\tcnt = 2\\n\\tfor i in range(2, int(n ** 0.5) + 1):\\n\\t\\tif n % i == 0:\\n\\t\\t\\tif i != n // i:\\n\\t\\t\\t\\tcnt += 2\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcnt += 1\\n\\treturn cnt\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\telif n <= 2:\\n\\t\\treturn True\\n\\telse:\\n\\t\\tflag = True\\n\\t\\tfor i in range(2, int(n ** 0.5) + 1):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\treturn flag\\n\\ndef s(b):\\n\\tans = []\\n\\twhile b > 0:\\n\\t\\ttmp = b % 10\\n\\t\\tans.append(tmp)\\n\\t\\tb = b // 10\\n\\treturn ans\\n\\ndef main():\\n\\ts = I().strip()\\n\\tab = []\\n\\tba = []\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tab.append(i + 1)\\n\\t\\telif s[i:i + 2] == 'BA':\\n\\t\\t\\tba.append(i + 1)\\n\\t\\ti += 1\\n\\tif len(ab) == 0 or len(ba) == 0:\\n\\t\\tprint('NO')\\n\\telif abs(ba[-1] - ab[0]) > 1:\\n\\t\\tprint('YES')\\n\\telif abs(ba[0] - ab[-1]) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"s = input()\\nans = False\\nab = False\\nba = False\\nn = len(s)\\ni = 0\\nwhile i < n - 1:\\n\\tif ab == False:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tab = True\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba = True\\n\\ti += 1\\nif ab and ba:\\n\\tans = True\\nab = False\\nba = False\\ni = 0\\nwhile i < n - 1:\\n\\tif ba == False:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tba = True\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab = True\\n\\ti += 1\\nif ab and ba:\\n\\tans = True\\nif ans:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nc = []\\nd = []\\nfor i in range(len(a) - 1):\\n\\tif a[i] + a[i + 1] == 'AB':\\n\\t\\tc.append(i)\\n\\telif a[i] + a[i + 1] == 'BA':\\n\\t\\td.append(i)\\nif len(c) >= 1 and len(d) >= 1:\\n\\tfor i in c:\\n\\t\\tfor e in d:\\n\\t\\t\\tif abs(e - i) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tquit()\\n\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\na = string.count('AB')\\nb = string.count('BA')\\nc = string.count('ABA')\\nd = string.count('BAB')\\nans = a + b - c - d\\nif a == 0 or b == 0:\\n\\tprint('NO')\\n\\texit()\\nprint('YES' if ans > 1 else 'NO')\\n\", \"a = input()\\nflag = 0\\ni = 0\\nn = len(a)\\nwhile i < n - 1:\\n\\tif a[i] == 'A' and a[i + 1] == 'B':\\n\\t\\ti += 2\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif a[i] == 'B' and a[i + 1] == 'A':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ti += 1\\n\\ti += 1\\ni = 0\\nwhile i < n - 1:\\n\\tif a[i] == 'B' and a[i + 1] == 'A':\\n\\t\\ti += 2\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif a[i] == 'A' and a[i + 1] == 'B':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ti += 1\\n\\ti += 1\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = len(s)\\nc = 0\\ni = 0\\nwhile i < n - 1:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tc += 1\\n\\t\\ti += 2\\n\\t\\tbreak\\n\\telse:\\n\\t\\ti += 1\\nfor j in range(i, n - 1):\\n\\tif s[j] == 'B' and s[j + 1] == 'A':\\n\\t\\tc += 1\\n\\t\\tbreak\\nii = 0\\nd = 0\\nwhile ii < n - 1:\\n\\tif s[ii] == 'B' and s[ii + 1] == 'A':\\n\\t\\td += 1\\n\\t\\tii += 2\\n\\t\\tbreak\\n\\telse:\\n\\t\\tii += 1\\nfor jj in range(ii, n - 1):\\n\\tif s[jj] == 'A' and s[jj + 1] == 'B':\\n\\t\\td += 1\\n\\t\\tbreak\\nif c % 2 == 0 or d % 2 == 0:\\n\\tif d % 2 == 0 and d != 0:\\n\\t\\tprint('YES')\\n\\telif c % 2 == 0 and c != 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nc = a[:]\\nk = a.find('BA')\\no = 0\\noz = 0\\nif k != -1:\\n\\ta = a[k + 2:]\\n\\tk1 = a.find('AB')\\n\\tif k1 != -1:\\n\\t\\to = 1\\nkk = c.find('AB')\\nif kk != -1:\\n\\ta = c[kk + 2:]\\n\\tkk1 = a.find('BA')\\n\\tif kk1 != -1:\\n\\t\\toz = 1\\nif o == 1 or oz == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def findAB(s):\\n\\tab = s.find('AB')\\n\\tba = s.rfind('BA')\\n\\tif ab == -1 or ba == -1:\\n\\t\\treturn False\\n\\tif ab + 1 < ba:\\n\\t\\treturn True\\n\\tba = s.find('BA')\\n\\tab = s.rfind('AB')\\n\\tif ba + 1 < ab:\\n\\t\\treturn True\\n\\treturn False\\nif findAB(input()):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"substring = input()[0:]\\nsubtext = ''\\nab = 0\\nba = 0\\naba = 0\\ncontain = False\\nfor i in range(0, len(substring)):\\n\\tif len(subtext) >= 3:\\n\\t\\taba += 1\\n\\t\\tsubtext = ''\\n\\tif subtext == '':\\n\\t\\tif substring[i] == 'A' or substring[i] == 'B':\\n\\t\\t\\tsubtext += substring[i]\\n\\t\\t\\tcontinue\\n\\tif substring[i] == 'A' or substring[i] == 'B':\\n\\t\\tif substring[i] != substring[i - 1]:\\n\\t\\t\\tsubtext += substring[i]\\n\\t\\telse:\\n\\t\\t\\tif subtext == 'AB':\\n\\t\\t\\t\\tab = 1\\n\\t\\t\\telif subtext == 'BA':\\n\\t\\t\\t\\tba = 1\\n\\t\\t\\tsubtext = substring[i]\\n\\t\\tcontinue\\n\\tif subtext == 'AB':\\n\\t\\tab = 1\\n\\telif subtext == 'BA':\\n\\t\\tba = 1\\n\\telif len(subtext) >= 3:\\n\\t\\taba += 1\\n\\tsubtext = ''\\n\\tif ab + ba + aba > 1:\\n\\t\\tcontain = True\\n\\t\\tbreak\\nif subtext == 'AB':\\n\\tab = 1\\nelif subtext == 'BA':\\n\\tba = 1\\nelif len(subtext) >= 3:\\n\\taba += 1\\nif ab + ba + aba > 1:\\n\\tcontain = True\\nif contain:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\nsuc = 0\\nsuc2 = 0\\nk = [0]\\nj = [0]\\nif 'AB' in s:\\n\\tsuc += 1\\n\\tk = s.replace('AB', 'DD', 1)\\nif 'BA' in k:\\n\\tsuc += 1\\nif suc == 2:\\n\\tprint('YES')\\nelse:\\n\\tif 'BA' in s:\\n\\t\\tsuc2 += 1\\n\\t\\tj = s.replace('BA', 'DD', 1)\\n\\tif 'AB' in j:\\n\\t\\tsuc2 += 1\\n\\tif suc2 == 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\ns = s.upper()\\nl = s.find('AB')\\nm = s.find('BA')\\nif l != -1 and s.find('BA', l + 2) != -1:\\n\\tprint('YES')\\nelif m != -1 and s.find('AB', m + 2) != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"x = input()\\ny1 = x.find('AB')\\ny2 = x.find('BA')\\nflag = 0\\nif y1 >= 0:\\n\\ty3 = x.find('BA', y1 + 2)\\n\\tif y3 >= 0:\\n\\t\\tflag = 1\\nif flag == 0 and y2 >= 0:\\n\\ty4 = x.find('AB', y2 + 2)\\n\\tif y4 >= 0:\\n\\t\\tflag = 1\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns = list(s)\\nab = []\\nba = []\\nn = len(s)\\nfor i in range(len(s)):\\n\\tif i + 1 < n and s[i] == 'A' and (s[i + 1] == 'B'):\\n\\t\\tab.append(i)\\n\\tif i + 1 < n and s[i] == 'B' and (s[i + 1] == 'A'):\\n\\t\\tba.append(i)\\nif len(ab) == 0 or len(ba) == 0:\\n\\tprint('NO')\\nelif abs(ab[0] - ba[len(ba) - 1]) > 1 or abs(ab[len(ab) - 1] - ba[0]) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import math\\nimport operator as op\\nfrom functools import reduce\\nfrom fractions import Fraction as frac\\ns = input('')\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit()\\nprint('NO')\\n\", \"string = list(input())\\nn = len(string)\\ni = 0\\ncheckAB = []\\ncheckBA = []\\nwhile i < n - 1:\\n\\tif string[i] == 'A' and string[i + 1] == 'B':\\n\\t\\tcheckAB.append([i, i + 1])\\n\\telif string[i] == 'B' and string[i + 1] == 'A':\\n\\t\\tcheckBA.append([i, i + 1])\\n\\ti += 1\\ncheck = False\\nfor x in checkAB:\\n\\tfor y in checkBA:\\n\\t\\tif x[0] not in y and x[1] not in y:\\n\\t\\t\\tcheck = True\\n\\t\\t\\tbreak\\nif check:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ns = input()\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\ti += 2\\n\\t\\twhile i < len(s) - 1:\\n\\t\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tsys.exit()\\n\\t\\t\\ti += 1\\n\\ti += 1\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\ti += 2\\n\\t\\twhile i < len(s) - 1:\\n\\t\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tsys.exit()\\n\\t\\t\\ti += 1\\n\\ti += 1\\nprint('NO')\\n\", \"import re\\nmystr = input()\\nindexOFB = []\\ncount = 0\\ntempsaleem = mystr.find('AB')\\ntempreverse = mystr.rfind('AB')\\nif tempsaleem != -1 and tempsaleem != tempreverse:\\n\\ttempstr1 = mystr.find('BA', 0, tempsaleem)\\n\\ttempstr2 = mystr.find('BA', tempsaleem + 2)\\n\\ttempstr3 = mystr.find('BA', 0, tempreverse)\\n\\ttempstr4 = mystr.find('BA', tempreverse + 2)\\n\\tif tempstr1 != -1 or tempstr2 != -1 or tempstr3 != -1 or (tempstr4 != -1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif tempsaleem != -1:\\n\\ttempstr1 = mystr.find('BA', 0, tempsaleem)\\n\\ttempstr2 = mystr.find('BA', tempsaleem + 2)\\n\\tif tempstr1 != -1 or tempstr2 != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"x = input()\\nba = x.rfind('BA')\\nbar = x.find('BA')\\nab = x.find('AB')\\nabr = x.rfind('AB')\\nif abs(ab - ba) >= 2 and ab != -1 and (ba != -1) or (abs(ab - bar) >= 2 and ab != -1 and (bar != -1)) or (abs(ba - abr) >= 2 and ba != -1 and (abr != -1)) or (abs(abr - bar) >= 2 and abr != -1 and (bar != -1)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def pos_ab(s, direction):\\n\\tif direction is True:\\n\\t\\tfor i in range(len(s) - 1):\\n\\t\\t\\tif 'AB' == s[i:i + 2]:\\n\\t\\t\\t\\treturn i + 1\\n\\telse:\\n\\t\\tql = len(s) - 1\\n\\t\\tfor i in range(ql):\\n\\t\\t\\tif 'AB' == s[ql - i - 1:ql - i + 1]:\\n\\t\\t\\t\\treturn ql - i - 1\\n\\treturn None\\n\\ndef pos_ba(s, k, direction):\\n\\tif direction is True:\\n\\t\\tfor i in range(k + 1, len(s) - 1):\\n\\t\\t\\tif 'BA' == s[i:i + 2]:\\n\\t\\t\\t\\treturn i + 1\\n\\telse:\\n\\t\\tfor i in range(k):\\n\\t\\t\\tif 'BA' == s[k - i - 2:k - i]:\\n\\t\\t\\t\\treturn k\\n\\treturn None\\nS = input()\\nif not pos_ab(S, True) is None:\\n\\tif not pos_ba(S, pos_ab(S, True), True) is None:\\n\\t\\tprint('Yes')\\n\\telif not pos_ab(S, False) is None:\\n\\t\\tif pos_ba(S, pos_ab(S, False), False) is None:\\n\\t\\t\\tprint('No')\\n\\t\\telse:\\n\\t\\t\\tprint('Yes')\\nelse:\\n\\tprint('No')\\n\", \"s = input()\\n(left, right) = (s.find('AB'), s.rfind('BA'))\\n(left1, right1) = (s.find('BA'), s.rfind('AB'))\\n(r1, r2) = (abs(left - right), abs(left1 - right1))\\nif left < 0 or right < 0:\\n\\tprint('NO')\\nelif r1 + r2 == 2:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nab = 0\\nba = 0\\nn = len(s)\\nfor i in range(1, n):\\n\\tif s[i] == 'A' and s[i - 1] == 'B':\\n\\t\\tba += 1\\n\\telif s[i] == 'B' and s[i - 1] == 'A':\\n\\t\\tab += 1\\nif ab == 0 or ba == 0:\\n\\tprint('NO')\\nelif ab == 1 and ba == 1:\\n\\tif 'ABA' in s:\\n\\t\\tprint('NO')\\n\\telif 'BAB' in s:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif ab == 1 and ba == 2:\\n\\tif 'BABA' in s:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif ba == 1 and ab == 2:\\n\\tif 'ABAB' in s:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nif 'AB' in s and 'BA' in s:\\n\\ts1 = s.replace('AB', '*', 1)\\n\\ts2 = s.replace('BA', '*', 1)\\n\\tif 'BA' in s1:\\n\\t\\tprint('YES')\\n\\telif 'AB' in s2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nif s.find('AB') == -1 or s.find('BA') == -1:\\n\\tprint('NO')\\n\\texit()\\n\\ndef func(a, b):\\n\\tidx = s.find(a)\\n\\tif s[idx + 2:].find(b) != -1:\\n\\t\\treturn True\\nif func('AB', 'BA') or func('BA', 'AB'):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def method(a, string):\\n\\tcount = a.count(string)\\n\\ta = a.replace(string, ' ', 1)\\n\\tcount *= a.count(string[::-1])\\n\\treturn count\\n\\ndef find_str(a):\\n\\tcount = method(a, 'AB')\\n\\tif count:\\n\\t\\treturn 'YES'\\n\\telse:\\n\\t\\tcount = method(a, 'BA')\\n\\treturn 'YES' if count else 'NO'\\na = input()\\nprint(find_str(a))\\n\", \"def solve():\\n\\t(ins, used, ab, ba) = (input(), [], 0, 0)\\n\\tuppend = used.append\\n\\tfor i in range(len(ins)):\\n\\t\\tuppend(0)\\n\\tfor i in range(len(ins) - 1):\\n\\t\\tif not ab and ins[i] == 'A' and (ins[i + 1] == 'B') and (not used[i]):\\n\\t\\t\\t(ab, used[i], used[i + 1]) = (1, 1, 1)\\n\\t\\tif ab and ins[i] == 'B' and (ins[i + 1] == 'A') and (not used[i]):\\n\\t\\t\\t(ba, used[i], used[i + 1]) = (1, 1, 1)\\n\\t\\t\\tbreak\\n\\tif ba:\\n\\t\\tprint('YES')\\n\\t\\treturn 0\\n\\t(ab, ba) = (0, 0)\\n\\tfor i in range(len(used)):\\n\\t\\tused[i] = 0\\n\\tfor i in range(len(ins) - 1):\\n\\t\\tif not ba and ins[i] == 'B' and (ins[i + 1] == 'A') and (not used[i]):\\n\\t\\t\\t(ba, used[i], used[i + 1]) = (1, 1, 1)\\n\\t\\tif ba and ins[i] == 'A' and (ins[i + 1] == 'B') and (not used[i]):\\n\\t\\t\\t(ab, used[i], used[i + 1]) = (1, 1, 1)\\n\\t\\t\\tbreak\\n\\tif ab:\\n\\t\\tprint('YES')\\n\\t\\treturn 0\\n\\tprint('NO')\\nsolve()\\n\", \"s = input()\\nl = []\\ncnt = 0\\nfor i in range(len(s) - 1):\\n\\tl.append(s[i] + s[i + 1])\\nn = -10\\nm = -10\\nn1 = 1000000\\nm1 = 1000000\\ncnt = 0\\nva = 0\\nif 'AB' not in l or 'BA' not in l:\\n\\tprint('NO')\\nelse:\\n\\tfor i in range(len(l) - 1):\\n\\t\\tif l[i] == 'AB':\\n\\t\\t\\tm = i\\n\\t\\t\\tbreak\\n\\t\\telif l[i] == 'BA':\\n\\t\\t\\tn = i\\n\\t\\t\\tbreak\\n\\tfor i in range(len(l) - 1, -1, -1):\\n\\t\\tif l[i] == 'AB':\\n\\t\\t\\tm = i\\n\\t\\t\\tbreak\\n\\t\\telif l[i] == 'BA':\\n\\t\\t\\tn = i\\n\\t\\t\\tbreak\\n\\tif n > m:\\n\\t\\tfor i in range(len(l)):\\n\\t\\t\\tif l[i] == 'AB':\\n\\t\\t\\t\\tif abs(n - i) >= 2:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\tva = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcnt = 1\\n\\telif n1 < m1 and va != 1:\\n\\t\\tfor i in range(len(l) - 1, -1, -1):\\n\\t\\t\\tif l[i] == 'AB':\\n\\t\\t\\t\\tif abs(n - i) >= 2:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcnt = 1\\n\\tif m > n:\\n\\t\\tfor i in range(len(l)):\\n\\t\\t\\tif l[i] == 'BA':\\n\\t\\t\\t\\tif abs(m - i) >= 2:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\tva = 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcnt = 1\\n\\telif m1 < n1 and va != 1:\\n\\t\\tfor i in range(len(l) - 1, -1, -1):\\n\\t\\t\\tif l[i] == 'BA':\\n\\t\\t\\t\\tif abs(m - i) >= 2:\\n\\t\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcnt = 1\\n\\tif cnt == 1:\\n\\t\\tprint('NO')\\n\", \"def containsNonOverlappingABandBA(string):\\n\\tABp = string.find('AB')\\n\\tif ABp == -1:\\n\\t\\treturn False\\n\\tBAp = string.find('BA')\\n\\tif BAp == -1:\\n\\t\\treturn False\\n\\tif abs(ABp - BAp) > 1:\\n\\t\\treturn True\\n\\treturn string.find('BA', ABp + 2) != -1 or string.find('AB', BAp + 2) != -1\\nprint('YES' if containsNonOverlappingABandBA(input()) else 'NO')\\n\", \"a = input()\\nb = 0\\nd = 0\\nc = []\\nf = []\\ni = 0\\nwhile i < len(a) - 1:\\n\\tif a[i] == 'B' and a[i + 1] == 'A':\\n\\t\\tf.append([i, i + 1])\\n\\t\\td += 1\\n\\tif a[i] == 'A' and a[i + 1] == 'B':\\n\\t\\tc.append([i, i + 1])\\n\\t\\tb += 1\\n\\ti += 1\\n\\tif b > 2 and d >= 1 or (b >= 1 and d > 2) or (b >= 2 and d >= 2):\\n\\t\\ti = len(a) + 5\\n\\t\\tprint('YES')\\nif i != len(a) + 5:\\n\\tfor i in c:\\n\\t\\tfor j in f:\\n\\t\\t\\tif i[0] != j[0] and i[0] != j[1] and (i[1] != j[0]) and (i[1] != j[1]):\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\ti = -2\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif i == -2:\\n\\t\\t\\t\\tbreak\\n\\t\\tif i == -2:\\n\\t\\t\\tbreak\\n\\tif i != -2:\\n\\t\\tprint('NO')\\n\", \"def solve_wa():\\n\\ts = input()\\n\\tz = [False for c in s]\\n\\tn = len(s)\\n\\tif n < 4:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tz[i] = True\\n\\t\\t\\tz[i + 1] = True\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tif not z[i] and (not z[i + 1]):\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\tprint('NO')\\n\\ndef find(t, s, n):\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i] == t[0] and s[i + 1] == t[1]:\\n\\t\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\t\\tif s[j] == t[1] and s[j + 1] == t[0]:\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\treturn False\\n\\treturn False\\n\\ndef solve():\\n\\ts = input()\\n\\tn = len(s)\\n\\tif n < 4:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\tx = find('AB', s, n)\\n\\ty = find('BA', s, n)\\n\\tprint('YES' if x or y else 'NO')\\nsolve()\\n\", \"s = input()\\np = s.find('AB')\\nif p + 1:\\n\\tif s.find('BA', p + 2) + 1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\np = s.find('BA')\\nif p + 1:\\n\\tif s.find('AB', p + 2) + 1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\nans = False\\nfind1 = s.find('AB')\\nfind2 = s.find('BA')\\nif find1 != -1:\\n\\tif s.find('BA', find1 + 2) != -1:\\n\\t\\tans = True\\nif find2 != -1:\\n\\tif s.find('AB', find2 + 2) != -1:\\n\\t\\tans = True\\nif ans:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\nimport sys\\nsys.exit(0)\\n\", \"def solve():\\n\\tm = [[[False for _ in range(2)] for _ in range(2)] for _ in range(n + 1)]\\n\\tfor i in range(n, -1, -1):\\n\\t\\tfor ab in [0, 1]:\\n\\t\\t\\tfor ba in [0, 1]:\\n\\t\\t\\t\\tif i >= n - 1:\\n\\t\\t\\t\\t\\tm[i][ab][ba] = True if ab == ba == 1 else False\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tx = m[i + 1][ab][ba]\\n\\t\\t\\t\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\t\\t\\t\\tm[i][ab][ba] = m[i + 2][1][ba] or x\\n\\t\\t\\t\\t\\telif s[i:i + 2] == 'BA':\\n\\t\\t\\t\\t\\t\\tm[i][ab][ba] = m[i + 2][ab][1] or x\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tm[i][ab][ba] = x\\n\\treturn 'YES' if m[0][0][0] else 'NO'\\n\\ndef main():\\n\\tglobal s, n\\n\\ts = input()\\n\\tn = len(s)\\n\\tprint(solve())\\nmain()\\n\", \"str = input()\\nab1 = ab2 = ba1 = ba2 = -1\\nfor i in range(1, len(str)):\\n\\tif str[i - 1] == 'A' and str[i] == 'B':\\n\\t\\tif ab1 == -1:\\n\\t\\t\\tab1 = i\\n\\t\\tab2 = i\\n\\tif str[i - 1] == 'B' and str[i] == 'A':\\n\\t\\tif ba1 == -1:\\n\\t\\t\\tba1 = i\\n\\t\\tba2 = i\\nif ab1 == -1 or ba1 == -1 or (not (ba2 - ab1 >= 2 or ab2 - ba1 >= 2)):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"a = input()\\np1 = a.find('AB')\\np2 = a.find('BA')\\np3 = a.rfind('AB')\\np4 = a.rfind('BA')\\nif p1 == -1 or p2 == -1:\\n\\tprint('NO')\\nelif abs(p1 - p4) != 1 or abs(p2 - p3) != 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns1 = s.find('AB')\\ns2 = s.find('BA', s1 + 2)\\ns3 = s.find('BA')\\ns4 = s.find('AB', s3 + 2)\\nif s1 >= 0 and s2 >= 0 or (s3 >= 0 and s4 >= 0):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input().strip()\\nn = len(s)\\nT = False\\nif s[:2] == 'AB' or s[:2] == 'BA':\\n\\th = 1\\nk = []\\nh = []\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tk.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\th.append(i)\\nif len(k) > 1 and len(h) > 1:\\n\\tprint('YES')\\nelif len(h) == 0 or len(k) == 0:\\n\\tprint('NO')\\nelif len(h) == 1 or len(k) == 1:\\n\\tif abs(h[-1] - k[-1]) == 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nfl = False\\nt = s.find('BA')\\nif t != -1:\\n\\tx = s[t + 2:]\\n\\tif x.find('AB') != -1:\\n\\t\\tfl = True\\nt = s.find('AB')\\nif t != -1:\\n\\tx = s[t + 2:]\\n\\tif x.find('BA') != -1:\\n\\t\\tfl = True\\nif fl:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nimport math\\nimport operator as op\\nfrom functools import reduce\\n\\ndef read_line():\\n\\treturn sys.stdin.readline()[:-1]\\n\\ndef read_int():\\n\\treturn int(sys.stdin.readline())\\n\\ndef read_int_line():\\n\\treturn [int(v) for v in sys.stdin.readline().split()]\\n\\ndef read_float_line():\\n\\treturn [float(v) for v in sys.stdin.readline().split()]\\n\\ndef ncr(n, r):\\n\\tr = min(r, n - r)\\n\\tnumer = reduce(op.mul, range(n, n - r, -1), 1)\\n\\tdenom = reduce(op.mul, range(1, r + 1), 1)\\n\\treturn numer / denom\\nt = 1\\nfor i in range(t):\\n\\ts = read_line()\\n\\tcnt1 = 0\\n\\tcnt2 = 0\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'A' and cnt1 < 1:\\n\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\tcnt1 += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'B' and cnt2 < 1:\\n\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\tcnt2 += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tcnt3 = 0\\n\\tcnt4 = 0\\n\\ti = 0\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'B' and cnt3 < 1:\\n\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\tcnt3 += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\twhile i < len(s) - 1:\\n\\t\\tif s[i] == 'A' and cnt4 < 1:\\n\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\tcnt4 += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tif cnt1 > 0 and cnt2 > 0 or (cnt3 > 0 and cnt4 > 0):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import re\\ns = input()\\nab = s.find('AB')\\nba = s.find('BA')\\nprint('NYOE S'[(ab > -1 and s.find('BA', ab + 2) > -1 or s.find('BA', 0, max(0, ab - 1)) > -1) or (ba > -1 and s.find('AB', ba + 2) > -1 or s.find('AB', 0, max(0, ba - 1)) > -1)::2])\\n\", \"def NotOverlap(i, y, z, x):\\n\\td = set()\\n\\td.add(i)\\n\\td.add(y)\\n\\td.add(z)\\n\\td.add(x)\\n\\tif len(d) == 4:\\n\\t\\treturn True\\n\\treturn False\\nn = input()\\n(A, B, BAs, ABs) = (0, 0, [], [])\\nfor i in range(len(n) - 1):\\n\\tif n[i] == 'A' and n[i + 1] == 'B':\\n\\t\\tABs.append((i, i + 1))\\n\\telif n[i] == 'B' and n[i + 1] == 'A':\\n\\t\\tBAs.append((i, i + 1))\\noverlap = False\\nif BAs != [] or ABs != []:\\n\\tfor i in ABs:\\n\\t\\tfor j in BAs:\\n\\t\\t\\tif NotOverlap(i[0], i[1], j[0], j[1]):\\n\\t\\t\\t\\toverlap = True\\n\\t\\t\\t\\tbreak\\nif overlap:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input().strip()\\nabIndices = []\\nbaIndices = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tabIndices.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tbaIndices.append(i)\\nif len(abIndices) == 0 or len(baIndices) == 0:\\n\\tprint('NO')\\nelif baIndices[-1] - abIndices[0] > 1 or abIndices[-1] - baIndices[0] > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = str(input())\\nn = len(s)\\nA = []\\nB = []\\nfor i in range(n - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tA += [i]\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tB += [i]\\nok = 0\\nfor a in A:\\n\\tfor b in B:\\n\\t\\tif abs(a - b) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tok = 1\\n\\t\\t\\tbreak\\n\\tif ok:\\n\\t\\tbreak\\nif ok == 0:\\n\\tprint('NO')\\n\", \"from __future__ import print_function\\nimport sys\\nfrom collections import *\\nfrom heapq import *\\nINF = float('inf')\\nNINF = float('-inf')\\ntry:\\n\\tinput = raw_input\\nexcept:\\n\\tpass\\n\\ndef read_string():\\n\\treturn input()\\n\\ndef read_int_line():\\n\\treturn [int(x) for x in input().split(' ')]\\n\\ndef read_int():\\n\\treturn int(input())\\n\\nclass TreeNode(object):\\n\\n\\tdef __init__(self, x):\\n\\t\\tself.val = x\\n\\t\\tself.left = None\\n\\t\\tself.right = None\\n\\n\\tdef __str__(self):\\n\\t\\tq = deque()\\n\\t\\tans = []\\n\\t\\tq.append(self)\\n\\t\\tans.append(self.val)\\n\\t\\twhile q:\\n\\t\\t\\tcur = q.popleft()\\n\\t\\t\\tans.append(cur.left.val if cur.left else 'null')\\n\\t\\t\\tans.append(cur.right.val if cur.right else 'null')\\n\\t\\t\\tif cur.left:\\n\\t\\t\\t\\tq.append(cur.left)\\n\\t\\t\\tif cur.right:\\n\\t\\t\\t\\tq.append(cur.right)\\n\\t\\twhile ans and ans[-1] == 'null':\\n\\t\\t\\tans.pop()\\n\\t\\treturn str(ans).replace(\\\"'null'\\\", 'null')\\n\\ndef toTreeNode(s):\\n\\tl = eval(s.replace('null', 'None'))\\n\\tn = len(l)\\n\\tif not n:\\n\\t\\treturn None\\n\\troot = TreeNode(l[0])\\n\\tq = deque()\\n\\tq.append(root)\\n\\ti = 1\\n\\twhile q and i < n:\\n\\t\\tcur = q.popleft()\\n\\t\\tif l[i] != None:\\n\\t\\t\\tcur.left = TreeNode(l[i])\\n\\t\\t\\tq.append(cur.left)\\n\\t\\ti += 1\\n\\t\\tif i >= n:\\n\\t\\t\\tbreak\\n\\t\\tif l[i] != None:\\n\\t\\t\\tcur.right = TreeNode(l[i])\\n\\t\\t\\tq.append(cur.right)\\n\\t\\ti += 1\\n\\treturn root\\n\\nclass Djs:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.w = [1] * n\\n\\t\\tself.p = [-1] * n\\n\\n\\tdef find(self, x):\\n\\t\\tp = self.p[x]\\n\\t\\tif p == -1:\\n\\t\\t\\treturn x\\n\\t\\telse:\\n\\t\\t\\tself.p[x] = self.find(p)\\n\\t\\t\\treturn self.p[x]\\n\\n\\tdef union(self, x, y):\\n\\t\\t(x, y) = (self.find(x), self.find(y))\\n\\t\\tif x == y:\\n\\t\\t\\treturn\\n\\t\\tif self.w[x] > self.w[y]:\\n\\t\\t\\t(x, y) = (y, x)\\n\\t\\tself.p[x] = y\\n\\t\\tself.w[y] += self.w[x]\\n\\n\\tdef roots(self):\\n\\t\\treturn [x for (x, y) in enumerate(self.p) if y == -1]\\n\\ndef doit():\\n\\ts = read_string()\\n\\t(minAB, minBA, maxAB, maxBA) = (INF, INF, NINF, NINF)\\n\\tfor i in range(0, len(s) - 1):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tminAB = min(minAB, i)\\n\\t\\t\\tmaxAB = max(maxAB, i)\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tminBA = min(minBA, i)\\n\\t\\t\\tmaxBA = max(maxBA, i)\\n\\tprint('%s' % ('YES' if minAB + 1 < maxBA or minBA + 1 < maxAB else 'NO'))\\ntry:\\n\\twhile True:\\n\\t\\tdoit()\\nexcept EOFError:\\n\\tpass\\n\", \"s = str(input())\\ni = 0\\narr1 = []\\narr2 = []\\nwhile i < len(s) - 1:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tarr1.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tarr2.append(i)\\n\\ti += 1\\nif len(arr1) == 0 or len(arr2) == 0:\\n\\tprint('NO')\\nelif max(len(arr1), len(arr2)) > 2 and min(len(arr1), len(arr2)) >= 1:\\n\\tprint('YES')\\nelif len(arr1) == 2 and len(arr2) == 2:\\n\\tprint('YES')\\nelif len(arr1) == 2 and len(arr2) == 1:\\n\\tif arr1[0] + 1 == arr2[0] and arr1[1] == arr2[0] + 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif len(arr1) == 1 and len(arr2) == 2:\\n\\tif arr2[0] + 1 == arr1[0] and arr2[1] == arr1[0] + 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif arr1[0] + 1 == arr2[0] or arr2[0] + 1 == arr1[0]:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nslen = len(s)\\nif slen <= 3:\\n\\tprint('NO')\\nelse:\\n\\tabCount = s.count('AB')\\n\\tbaCount = s.count('BA')\\n\\tflag1 = 0\\n\\tflag2 = 0\\n\\tif abCount > 0 and baCount > 0:\\n\\t\\tf1 = s.find('AB')\\n\\t\\tx1 = s.count('BA', f1 + 2, slen)\\n\\t\\tif x1 > 0:\\n\\t\\t\\tflag1 = 1\\n\\t\\tf2 = s.find('BA')\\n\\t\\tx2 = s.count('AB', f2 + 2, slen)\\n\\t\\tif x2 > 0:\\n\\t\\t\\tflag2 = 1\\n\\tif flag1 == 1 or flag2 == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = str(input())\\ntab = s.count('AB')\\ntba = s.count('BA')\\nflag = 1 if tab > 0 and tba > 0 and (tab + tba - s.count('ABA') - s.count('BAB') >= 2) else 0\\nprint('YES' if flag else 'NO')\\n\", \"s = input()\\nmatches = {'AB': [], 'BA': []}\\nfor i in range(len(s) - 1):\\n\\tsubstring = s[i:i + 2]\\n\\tif substring in matches:\\n\\t\\tmatches[substring].append(i)\\nif not matches['AB'] or not matches['BA']:\\n\\tprint('NO')\\nelif abs(max(matches['AB']) - min(matches['BA'])) > 1:\\n\\tprint('YES')\\nelif abs(min(matches['AB']) - max(matches['BA'])) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n = input()\\nprint(['NO', 'YES'][n.count('AB') + n.count('BA') - n.count('ABA') - n.count('BAB') >= 2 and n.count('AB') > 0 and (n.count('BA') > 0)])\\n\", \"a = input().strip()\\nn = len(a)\\nans = False\\ntry:\\n\\tx = a.index('AB')\\n\\ty = a.rindex('BA')\\n\\tif abs(x - y) > 1:\\n\\t\\tans = True\\nexcept:\\n\\tpass\\ntry:\\n\\tx = a.index('BA')\\n\\ty = a.rindex('AB')\\n\\tif abs(x - y) > 1:\\n\\t\\tans = True\\nexcept:\\n\\tpass\\nif ans:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def solve(s):\\n\\tn = len(s)\\n\\ttry:\\n\\t\\tfab = s.index('AB')\\n\\t\\tfba = s.index('BA')\\n\\texcept ValueError:\\n\\t\\treturn False\\n\\tgood = [False] * (n + 1)\\n\\tfor i in range(4, n + 1):\\n\\t\\tss = s[i - 2:i]\\n\\t\\tif ss == 'AB':\\n\\t\\t\\tgood[i] = good[i - 1] or fba + 1 < i - 2\\n\\t\\telif ss == 'BA':\\n\\t\\t\\tgood[i] = good[i - 1] or fab + 1 < i - 2\\n\\t\\telse:\\n\\t\\t\\tgood[i] = good[i - 1]\\n\\treturn good[n]\\ns = input()\\nprint('YES' if solve(s) else 'NO')\\n\", \"inp_str = input()\\nl_inp_str = len(inp_str)\\nfound = False\\nx = inp_str.find('AB')\\nif x != -1:\\n\\trem_str = inp_str[x + 2:]\\n\\ty = rem_str.find('BA')\\n\\tif y != -1:\\n\\t\\tfound = True\\nif found == False:\\n\\tx = inp_str.find('BA')\\n\\tif x != -1:\\n\\t\\trem_str = inp_str[x + 2:]\\n\\t\\ty = rem_str.find('AB')\\n\\t\\tif y != -1:\\n\\t\\t\\tfound = True\\nif found:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nl = len(a)\\nf = 0\\nif l <= 3:\\n\\tprint('NO')\\nelse:\\n\\ts = a\\n\\tif 'AB' in s:\\n\\t\\ts = s.replace('AB', ' ', 1)\\n\\t\\tif 'BA' in s:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tf = 1\\n\\ts = a\\n\\tif 'BA' in s and f == 0:\\n\\t\\ts = s.replace('BA', ' ', 1)\\n\\t\\tif 'AB' in s:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tf = 1\\n\\tif f == 0:\\n\\t\\tprint('NO')\\n\", \"def find(st):\\n\\ta = 'AB'\\n\\tb = 'BA'\\n\\treturn check(st, a, b) or check(st, b, a)\\n\\ndef check(st, x, y):\\n\\ttemp = st.find(x)\\n\\tif temp < 0:\\n\\t\\treturn False\\n\\treturn st.find(y, temp + len(x)) >= 0\\ns = input()\\nif find(s):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import math as m\\ns = input()\\nl = len(s)\\nabPos = []\\nbaPos = []\\nfor i in range(0, l - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tabPos.append(i)\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tbaPos.append(i)\\nf = 0\\nfor a in abPos:\\n\\tfor b in baPos:\\n\\t\\tif m.fabs(a - b) >= 2:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\nif f == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nif s.count('AB') > 0:\\n\\tl = s.find('AB')\\n\\tt = s[:l]\\n\\tv = s[l + 2:]\\n\\tif t.count('BA') > 0 or v.count('BA'):\\n\\t\\tprint('YES')\\n\\telif s.count('BA') > 0:\\n\\t\\tl = s.find('BA')\\n\\t\\tt = s[:l]\\n\\t\\tv = s[l + 2:]\\n\\t\\tif t.count('AB') > 0 or v.count('AB'):\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nc = 0\\nd = 0\\nfor i in range(len(a) - 1):\\n\\tif a[i] == 'A':\\n\\t\\tif a[i + 1] == 'B':\\n\\t\\t\\tc = c + 1\\n\\tif a[i] == 'B':\\n\\t\\tif a[i + 1] == 'A':\\n\\t\\t\\td = d + 1\\nif c == 0:\\n\\tprint('NO')\\nelif d == 0:\\n\\tprint('NO')\\nif c > 1:\\n\\tif d > 1:\\n\\t\\tprint('YES')\\n\\tif d == 1:\\n\\t\\ta = a.replace('ABAB', '')\\n\\t\\tif a.find('AB') != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nif d > 1:\\n\\tif c == 1:\\n\\t\\ta = a.replace('BABA', '')\\n\\t\\tif a.find('BA') != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nif c == 1:\\n\\tif d == 1:\\n\\t\\ta = a.replace('AB', '')\\n\\t\\tif a.find('BA') != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"def main():\\n\\ta = input()\\n\\tc = 0\\n\\td = 0\\n\\tfor i in range(1, len(a)):\\n\\t\\tif a[i] == 'A' and a[i - 1] == 'B':\\n\\t\\t\\td = 1\\n\\t\\t\\tif i == len(a) - 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif a[i + 1] != 'B':\\n\\t\\t\\t\\tbreak\\n\\t\\telif a[i] == 'B' and a[i - 1] == 'A':\\n\\t\\t\\tc = 1\\n\\t\\t\\tif i == len(a) - 1:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif a[i + 1] != 'A':\\n\\t\\t\\t\\tbreak\\n\\t\\tif c == 1 and d == 1:\\n\\t\\t\\tbreak\\n\\tif c == 1 and i < len(a) - 2:\\n\\t\\tfor j in range(i + 2, len(a)):\\n\\t\\t\\tif a[j] == 'A' and a[j - 1] == 'B':\\n\\t\\t\\t\\tc = 2\\n\\t\\t\\t\\tbreak\\n\\tif d == 1 and i < len(a) - 2:\\n\\t\\tfor j in range(i + 2, len(a)):\\n\\t\\t\\tif a[j] == 'B' and a[j - 1] == 'A':\\n\\t\\t\\t\\td = 2\\n\\t\\t\\t\\tbreak\\n\\tif c == 2 or d == 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nmain()\\n\", \"flag = 0\\ns = input().strip(' ')\\ntry:\\n\\ti = s.index('AB')\\n\\tif 'BA' in s[i + 2:]:\\n\\t\\tprint('YES')\\n\\t\\tflag = 1\\nexcept ValueError:\\n\\tpass\\nif not flag:\\n\\ttry:\\n\\t\\ti = s.index('BA')\\n\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = 1\\n\\texcept:\\n\\t\\tpass\\n\\tif not flag:\\n\\t\\tprint('NO')\\n\", \"def work():\\n\\tfor i in a:\\n\\t\\tfor j in b:\\n\\t\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\t\\treturn True\\n\\treturn False\\ns = input()\\nl = len(s)\\na = []\\nb = []\\nfor i in range(l - 1):\\n\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\ta.append(i)\\n\\telif s[i] + s[i + 1] == 'BA':\\n\\t\\tb.append(i)\\nif a and b:\\n\\tif work():\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\np = s.find('AB')\\nf = s.find('BA')\\nif p != -1 and s.find('BA', p + 2) != -1:\\n\\tprint('YES')\\nelif f != -1 and s.find('AB', f + 2) != -1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import re\\na = input()\\nz = re.compile('BA')\\nd = z.search(str(a))\\nif d == None:\\n\\tprint('NO')\\nelse:\\n\\tp = re.compile('AB')\\n\\te = p.search(str(a))\\n\\tif e == None:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tx = re.compile('AB.*BA')\\n\\t\\tb = x.search(str(a))\\n\\t\\ty = re.compile('BA.*AB')\\n\\t\\tc = y.search(str(a))\\n\\t\\tif c != None or b != None:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"s = input()\\nabx = s.replace('AB', 'X', 1)\\nbax = s.replace('BA', 'X', 1)\\nprint('YES' if len(abx) != len(s) and abx.count('BA') or (len(bax) != len(s) and bax.count('AB')) else 'NO')\\n\", \"def substrings(s):\\n\\ta = s.count('AB')\\n\\tb = s.count('BA')\\n\\tc = s.count('ABA')\\n\\td = s.count('BAB')\\n\\tif (a != 0 and b != 0) and a + b - c - d > 1:\\n\\t\\treturn 'YES'\\n\\telse:\\n\\t\\treturn 'NO'\\ns = input()\\nprint(substrings(s))\\n\", \"s = input().strip()\\n(acnt, bcnt) = (0, 0)\\n(MaxA, MaxB, MinA, MinB) = (-1, -1, 9999999999999, 9999999999999)\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tacnt += 1\\n\\t\\tif i < MinA:\\n\\t\\t\\tMinA = i\\n\\t\\tif i > MaxA:\\n\\t\\t\\tMaxA = i\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tbcnt += 1\\n\\t\\tif i < MinB:\\n\\t\\t\\tMinB = i\\n\\t\\tif i > MaxB:\\n\\t\\t\\tMaxB = i\\nif (acnt >= 1 and bcnt >= 1) and (MaxB - MinA > 1 or MaxA - MinB > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def main():\\n\\ts = input().strip()\\n\\tab_idxs = []\\n\\tba_idxs = []\\n\\tfind_e_idxs(s, ab_idxs, 'AB')\\n\\tfind_e_idxs(s, ba_idxs, 'BA')\\n\\tfound_two_substrings = False\\n\\tfor i in range(len(ab_idxs)):\\n\\t\\tcurr_ab_idx = ab_idxs[i]\\n\\t\\tfor j in range(len(ba_idxs)):\\n\\t\\t\\tcurr_ba_idx = ba_idxs[j]\\n\\t\\t\\tif curr_ba_idx + 2 <= curr_ab_idx or curr_ab_idx + 2 <= curr_ba_idx:\\n\\t\\t\\t\\tfound_two_substrings = True\\n\\t\\t\\t\\tbreak\\n\\t\\tif found_two_substrings:\\n\\t\\t\\tbreak\\n\\tprint('YES' if found_two_substrings else 'NO')\\n\\ndef find_e_idxs(lst, idxs, e):\\n\\tlst_len = len(lst)\\n\\tfor i in range(lst_len):\\n\\t\\tif i + 1 < lst_len and lst[i] == e[0] and (lst[i + 1] == e[1]):\\n\\t\\t\\tidxs.append(i)\\nmain()\\n\", \"a = list(input())\\ni = 0\\nab = 0\\nba = 0\\nf = 0\\nwhile i < len(a) - 1:\\n\\tif (a[i] == 'A' and a[i + 1] == 'B') and ab == 0:\\n\\t\\tab = 1\\n\\t\\tf = 1\\n\\t\\ti += 2\\n\\telif (a[i] == 'B' and a[i + 1] == 'A') and f == 1 and (ba == 0):\\n\\t\\tba = 1\\n\\t\\tf = 2\\n\\t\\ti += 2\\n\\telse:\\n\\t\\ti += 1\\n\\tif ab == 1 and ba == 1:\\n\\t\\tbreak\\nif f == 2:\\n\\tprint('YES')\\nelse:\\n\\ti = 0\\n\\tab = 0\\n\\tba = 0\\n\\tf = 0\\n\\twhile i < len(a) - 1:\\n\\t\\tif (a[i] == 'B' and a[i + 1] == 'A') and ba == 0:\\n\\t\\t\\tba = 1\\n\\t\\t\\tf = 1\\n\\t\\t\\ti += 2\\n\\t\\telif (a[i] == 'A' and a[i + 1] == 'B') and f == 1 and (ab == 0):\\n\\t\\t\\tab = 1\\n\\t\\t\\tf = 2\\n\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\t\\tif ab == 1 and ba == 1:\\n\\t\\t\\tbreak\\n\\tif f == 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\na = s.rfind('AB')\\nb = s.find('BA')\\nx = False\\nif a != -1 and b != -1 and (abs(a - b) >= 2):\\n\\tx = True\\na = s.rfind('BA')\\nb = s.find('AB')\\ny = False\\nif a != -1 and b != -1 and (abs(a - b) >= 2):\\n\\ty = True\\nif x or y:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s1 = input().strip()\\nAB = []\\nBA = []\\nfor i in range(len(s1) - 1):\\n\\tif s1[i] == 'A' and s1[i + 1] == 'B':\\n\\t\\tAB.append(i)\\n\\telif s1[i] == 'B' and s1[i + 1] == 'A':\\n\\t\\tBA.append(i)\\nx = True\\nfor i in AB:\\n\\tfor j in BA:\\n\\t\\tif abs(i - j) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tx = False\\n\\t\\t\\tbreak\\n\\tif not x:\\n\\t\\tbreak\\nif x:\\n\\tprint('NO')\\n\", \"def mod(a):\\n\\tif a < 0:\\n\\t\\treturn -a\\n\\telse:\\n\\t\\treturn a\\ns = input()\\nx = []\\nindAB = []\\nindBA = []\\nfor i in range(0, len(s) - 1):\\n\\tx.append(s[i] + s[i + 1])\\nif 'AB' in x and 'BA' in x:\\n\\tfor i in range(0, len(s) - 1):\\n\\t\\tif x[i] == 'AB':\\n\\t\\t\\tindAB.append(i)\\n\\t\\telif x[i] == 'BA':\\n\\t\\t\\tindBA.append(i)\\n\\tsorted(indAB)\\n\\tsorted(indBA)\\n\\tif indAB[len(indAB) - 1] - indBA[0] > 1:\\n\\t\\tprint('YES')\\n\\t\\tquit()\\n\\telif indBA[len(indBA) - 1] - indAB[0] > 1:\\n\\t\\tprint('YES')\\n\\t\\tquit()\\nprint('NO')\\n\", \"s = input()\\nx = s.find('AB')\\ny = s.rfind('BA')\\nz = s.find('BA')\\nw = s.rfind('AB')\\nif (abs(y - x) > 1 or abs(w - z) > 1) and min(x, z, y, w) >= 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"st = input()\\nab1 = st.find('AB')\\nba1 = st.find('BA')\\nab2 = st.rfind('AB')\\nba2 = st.rfind('BA')\\nif ab1 == -1 or ba1 == -1:\\n\\tprint('NO')\\nelif ab1 == ab2 and ba1 == ba2 and (abs(ba1 - ab1) < 2):\\n\\tprint('NO')\\nelif ab1 + 2 == ab2 and ba1 == ba2:\\n\\tprint('NO')\\nelif ba1 + 2 == ba2 and ab1 == ab2:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"t = input()\\nab = t.count('AB')\\nba = t.count('BA')\\nif ab == 0 or ba == 0:\\n\\tprint('NO')\\nelif ab > 1 or ba > 1:\\n\\tif ba == 2 and ab == 1:\\n\\t\\tif t.count('BABA') == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif ab == 2 and ba == 1:\\n\\t\\tif t.count('ABAB') == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\nelif abs(t.index('AB') - t.index('BA')) == 1:\\n\\tprint('NO')\\nelif t.count('ABA') == 1 or t.count('BAB') == 1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nl = len(s)\\nidx = -1\\nfor i in range(l - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tidx = i + 1\\n\\t\\tbreak\\nflag = 0\\nif idx != -1:\\n\\tfor i in range(idx + 1, l - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tidx = -1\\n\\tfor i in range(l - 1):\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tidx = i + 1\\n\\t\\t\\tbreak\\n\\tflag = 0\\n\\tif idx != -1:\\n\\t\\tfor i in range(idx + 1, l - 1):\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nL = len(s)\\nAB = 0\\nBA = 0\\nABA = 0\\nBAB = 0\\ni = 0\\nwhile i < L - 1:\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tif i + 2 < L and s[i + 2] == 'A':\\n\\t\\t\\t\\tABA += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tAB += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'B':\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tif i + 2 < L and s[i + 2] == 'B':\\n\\t\\t\\t\\tBAB += 1\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tBA += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telse:\\n\\t\\ti += 1\\nif AB >= 1 and BA >= 1:\\n\\tprint('YES')\\nelif ABA > 0 and BA > 0:\\n\\tprint('YES')\\nelif ABA > 0 and AB > 0:\\n\\tprint('YES')\\nelif ABA > 0 and BAB > 0:\\n\\tprint('YES')\\nelif BAB > 0 and BA > 0:\\n\\tprint('YES')\\nelif BAB > 0 and AB > 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def is_ab(prev, current):\\n\\treturn prev == 'A' and current == 'B'\\n\\ndef is_ba(prev, current):\\n\\treturn prev == 'B' and current == 'A'\\n\\ndef is_matched(prev, current):\\n\\treturn is_ab(prev, current) or is_ba(prev, current)\\n\\ndef main():\\n\\ts = input()\\n\\ti = 0\\n\\ttotal_ab = 0\\n\\ttotal_ba = 0\\n\\ttotal_confused = 0\\n\\tcurrent_len = 0\\n\\tprev = ''\\n\\twhile i < len(s):\\n\\t\\tcurrent = s[i]\\n\\t\\tif current_len != 0:\\n\\t\\t\\tif is_matched(prev, current):\\n\\t\\t\\t\\tcurrent_len += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif current_len == 2:\\n\\t\\t\\t\\t\\tif is_ab(s[i - 2], s[i - 1]):\\n\\t\\t\\t\\t\\t\\ttotal_ab += 1\\n\\t\\t\\t\\t\\telif is_ba(s[i - 2], s[i - 1]):\\n\\t\\t\\t\\t\\t\\ttotal_ba += 1\\n\\t\\t\\t\\telif current_len == 3:\\n\\t\\t\\t\\t\\ttotal_confused += 1\\n\\t\\t\\t\\telif current_len == 4:\\n\\t\\t\\t\\t\\ttotal_confused += 1\\n\\t\\t\\t\\telif current_len > 4:\\n\\t\\t\\t\\t\\ttotal_confused += 2\\n\\t\\t\\t\\tif current == 'A' or current == 'B':\\n\\t\\t\\t\\t\\tcurrent_len = 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcurrent_len = 0\\n\\t\\telif current == 'A' or current == 'B':\\n\\t\\t\\tcurrent_len = 1\\n\\t\\tprev = current\\n\\t\\ti += 1\\n\\tif len(s) >= 2 and current_len >= 2:\\n\\t\\tcurrent = s[len(s) - 1]\\n\\t\\tprev = s[len(s) - 2]\\n\\t\\tif current_len == 2:\\n\\t\\t\\tif is_ab(prev, current):\\n\\t\\t\\t\\ttotal_ab += 1\\n\\t\\t\\telif is_ba(prev, current):\\n\\t\\t\\t\\ttotal_ba += 1\\n\\t\\telif current_len == 3:\\n\\t\\t\\ttotal_confused += 1\\n\\t\\telif current_len == 4:\\n\\t\\t\\ttotal_confused += 1\\n\\t\\telif current_len > 4:\\n\\t\\t\\ttotal_confused += 2\\n\\tif total_ba >= 1 and total_ab >= 1:\\n\\t\\tprint('YES')\\n\\telif total_confused >= 2:\\n\\t\\tprint('YES')\\n\\telif (total_ab >= 1 or total_ba >= 1) and total_confused >= 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"from __future__ import division, print_function\\nfrom fractions import Fraction\\nimport sys\\nimport os\\nfrom io import BytesIO, IOBase\\nfrom heapq import *\\nfrom math import gcd, factorial, floor, ceil\\nfrom copy import deepcopy\\nfrom collections import deque\\nfrom bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\nfrom types import GeneratorType\\n\\ndef iterative(f, stack=[]):\\n\\n\\tdef wrapped_func(*args, **kwargs):\\n\\t\\tif stack:\\n\\t\\t\\treturn f(*args, **kwargs)\\n\\t\\tto = f(*args, **kwargs)\\n\\t\\twhile True:\\n\\t\\t\\tif type(to) is GeneratorType:\\n\\t\\t\\t\\tstack.append(to)\\n\\t\\t\\t\\tto = next(to)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tstack.pop()\\n\\t\\t\\tif not stack:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tto = stack[-1].send(to)\\n\\t\\treturn to\\n\\treturn wrapped_func\\nmod = 10 ** 9 + 7\\n\\ndef inp():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef out(var):\\n\\tsys.stdout.write(str(var))\\n\\ndef lis():\\n\\treturn list(map(int, inp().split()))\\n\\ndef stringlis():\\n\\treturn list(map(str, inp().split()))\\n\\ndef sep():\\n\\treturn map(int, inp().split())\\n\\ndef strsep():\\n\\treturn map(str, inp().split())\\n\\ndef zerolist(n):\\n\\treturn [0] * n\\n\\ndef nextline():\\n\\tout('\\\\n')\\n\\ndef testcase(t):\\n\\tfor pp in range(t):\\n\\t\\tsolve(pp)\\n\\ndef printlist(a):\\n\\tfor p in range(0, len(a)):\\n\\t\\tout(str(a[p]) + ' ')\\n\\ndef google(p):\\n\\tprint('Case #' + str(p) + ': ', end='')\\n\\ndef lcm(a, b):\\n\\treturn a * b // gcd(a, b)\\n\\ndef power(x, y, p):\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef ncr(n, r):\\n\\treturn factorial(n) // (factorial(r) * factorial(max(n - r, 1)))\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\tif n <= 3:\\n\\t\\treturn True\\n\\tif n % 2 == 0 or n % 3 == 0:\\n\\t\\treturn False\\n\\ti = 5\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0 or n % (i + 2) == 0:\\n\\t\\t\\treturn False\\n\\t\\ti = i + 6\\n\\treturn True\\n\\ndef solve(case):\\n\\ta = inp()\\n\\tcnt1 = 0\\n\\tcnt2 = 0\\n\\tcnt3 = 0\\n\\tn = len(a)\\n\\tprev = -1\\n\\tfor i in range(1, n):\\n\\t\\tif i <= n - 1 and (a[i - 1:i + 2] == 'ABA' or a[i - 1:i + 2] == 'BAB') and (i > prev + 1):\\n\\t\\t\\tprev = i\\n\\t\\t\\tcnt3 += 1\\n\\t\\telif a[i - 1:i + 1] == 'AB' and a[i - 2] != 'B':\\n\\t\\t\\tcnt1 += 1\\n\\t\\telif a[i - 1:i + 1] == 'BA' and a[i - 2] != 'A':\\n\\t\\t\\tcnt2 += 1\\n\\tif cnt1 > 0:\\n\\t\\tif cnt2 > 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telif cnt3 > 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif cnt2 > 0:\\n\\t\\tif cnt3 > 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif cnt3 > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\ntestcase(1)\\n\", \"a = input()\\nb = a[:]\\ncounter = 0\\nif 'AB' in a:\\n\\tres = a.find('AB')\\n\\ta = a[:res] + '**' + a[res + 2:]\\n\\tcounter += 1\\nif 'BA' in a:\\n\\tres = a.find('BA')\\n\\ta = a[:res] + '**' + a[res + 2:]\\n\\tcounter += 1\\nif counter == 2:\\n\\tprint('YES')\\nelse:\\n\\tcounter = 0\\n\\tif 'BA' in b:\\n\\t\\tres = b.find('BA')\\n\\t\\tb = b[:res] + '**' + b[res + 2:]\\n\\t\\tcounter += 1\\n\\tif 'AB' in b:\\n\\t\\tres = b.find('AB')\\n\\t\\tb = b[:res] + '**' + b[res + 2:]\\n\\t\\tcounter += 1\\n\\tif counter == 2:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import sys\\ninputStr = input()\\nif 'AB' in inputStr:\\n\\ti = inputStr.index('AB')\\n\\tif 'BA' in inputStr[:i] or 'BA' in inputStr[i + 2:]:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nif 'BA' in inputStr:\\n\\ti = inputStr.index('BA')\\n\\tif 'AB' in inputStr[:i] or 'AB' in inputStr[i + 2:]:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nprint('NO')\\n\", \"from sys import stdin, stdout\\nimport math, sys, heapq\\nfrom itertools import permutations, combinations\\nfrom collections import defaultdict, deque, OrderedDict\\nfrom os import path\\nimport random\\nimport bisect as bi\\n\\ndef yes():\\n\\tprint('YES')\\n\\ndef no():\\n\\tprint('NO')\\nif path.exists('input.txt'):\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\n\\n\\tdef I():\\n\\t\\treturn int(input())\\n\\n\\tdef In():\\n\\t\\treturn map(int, input().split())\\nelse:\\n\\n\\tdef I():\\n\\t\\treturn int(stdin.readline())\\n\\n\\tdef In():\\n\\t\\treturn map(int, stdin.readline().split())\\n\\ndef dict(a):\\n\\td = {}\\n\\tfor x in a:\\n\\t\\tif d.get(x, -1) != -1:\\n\\t\\t\\td[x] += 1\\n\\t\\telse:\\n\\t\\t\\td[x] = 1\\n\\treturn d\\n\\ndef find_gt(a, x):\\n\\ti = bi.bisect_left(a, x)\\n\\tif i != len(a):\\n\\t\\treturn i\\n\\telse:\\n\\t\\treturn -1\\n\\ndef main():\\n\\ttry:\\n\\t\\tl = list(input())\\n\\t\\tflag = [0, 0]\\n\\t\\tcount = 0\\n\\t\\ti = 0\\n\\t\\tansa = []\\n\\t\\tansb = []\\n\\t\\tn = len(l)\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif l[i] == 'A' and l[i - 1] == 'B':\\n\\t\\t\\t\\tansa.append([i - 1, i])\\n\\t\\t\\telif l[i] == 'B' and l[i - 1] == 'A':\\n\\t\\t\\t\\tansb.append([i - 1, i])\\n\\t\\tif len(ansb) == 0 or len(ansa) == 0:\\n\\t\\t\\tno()\\n\\t\\telse:\\n\\t\\t\\tflag = 0\\n\\t\\t\\tfor x in range(len(ansa)):\\n\\t\\t\\t\\tfor y in range(len(ansb)):\\n\\t\\t\\t\\t\\tif ansa[x][1] != ansb[y][0] and ansa[x][0] != ansb[y][1]:\\n\\t\\t\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif flag:\\n\\t\\t\\t\\tyes()\\n\\t\\t\\telse:\\n\\t\\t\\t\\tno()\\n\\texcept:\\n\\t\\tpass\\nM = 998244353\\nP = 1000000007\\nfor _ in range(1):\\n\\tmain()\\n\", \"import itertools\\ns = input()\\na1 = s.find('AB')\\nb1 = s.find('BA')\\na2 = -1 if a1 == -1 else s.find('AB', a1 + 1)\\nb2 = -1 if b1 == -1 else s.find('BA', b1 + 1)\\na3 = -1 if a2 == -1 else s.find('AB', a2 + 1)\\nb3 = -1 if b2 == -1 else s.find('BA', b2 + 1)\\nfor (a, b) in itertools.product((a1, a2, a3), (b1, b2, b3)):\\n\\tif a != -1 and b != -1 and (abs(a - b) >= 2):\\n\\t\\tprint('YES')\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nch = 1\\nm = str(s)\\nn = len(s)\\nch1 = 0\\nch2 = 0\\nfor i in range(n - 1):\\n\\tif s[i] == 'B' and s[i + 1] == 'A' and (ch1 == 0):\\n\\t\\ts = s[:i] + '11' + s[i + 2:]\\n\\t\\tch1 = 1\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (ch2 == 0) and (ch1 == 1):\\n\\t\\ts = s[:i] + '11' + s[i + 2:]\\n\\t\\tch2 = 1\\nif ch1 == 1 and ch2 == 1:\\n\\tch = 1\\nelse:\\n\\tch = 0\\ns = str(m)\\nn = len(s)\\nch1 = 0\\nch2 = 0\\nfor i in range(n - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (ch1 == 0):\\n\\t\\ts = s[:i] + '11' + s[i + 2:]\\n\\t\\tch1 = 1\\n\\tif s[i] == 'B' and s[i + 1] == 'A' and (ch2 == 0) and (ch1 == 1):\\n\\t\\ts = s[:i] + '11' + s[i + 2:]\\n\\t\\tch2 = 1\\nif ch1 == 1 and ch2 == 1:\\n\\tch = 1\\nelse:\\n\\tch = ch\\nif ch == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def func(n):\\n\\tif 'AB' not in n or 'BA' not in n:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\ta = n.index('AB')\\n\\tb = n.index('BA')\\n\\tfor i in range(a + 2, len(n) - 1):\\n\\t\\tif n[i] + n[i + 1] == 'BA':\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn\\n\\tfor i in range(b + 2, len(n) - 1):\\n\\t\\tif n[i] + n[i + 1] == 'AB':\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn\\n\\tprint('NO')\\nn = input()\\nfunc(n)\\n\", \"st = input()\\n(ab, ba) = ([], [])\\nfor i in range(len(st) - 1):\\n\\tif st[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif st[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\nif ab == [] or ba == []:\\n\\tprint('NO')\\n\\texit(0)\\nfor i in ab:\\n\\tfor j in ba:\\n\\t\\tif abs(i - j) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"s = str(input())\\nab_ba = 0\\nba_ab = 0\\ni = 0\\nn = len(s)\\nwhile i < n - 1:\\n\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\tif ab_ba == 0:\\n\\t\\t\\tab_ba = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tcontinue\\n\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\tif ab_ba == 1:\\n\\t\\t\\tab_ba = 2\\n\\t\\t\\ti += 2\\n\\t\\t\\tcontinue\\n\\ti += 1\\ni = 0\\nwhile i < n - 1:\\n\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\tif ba_ab == 0:\\n\\t\\t\\tba_ab = 1\\n\\t\\t\\ti += 2\\n\\t\\t\\tcontinue\\n\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\tif ba_ab == 1:\\n\\t\\t\\tba_ab = 2\\n\\t\\t\\ti += 2\\n\\t\\t\\tcontinue\\n\\ti += 1\\nif ab_ba == 2 or ba_ab == 2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nw = str(input().strip())\\nc = w.find('AB')\\nwhile c != -1:\\n\\tc2 = w.find('BA', 0, c)\\n\\tif c2 == -1:\\n\\t\\tc2 = w.find('BA', c + 2)\\n\\telse:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\n\\tif c2 == -1:\\n\\t\\tc = w.find('AB', c + 2)\\n\\telse:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nprint('NO')\\n\", \"s = input()\\nif s.count('AB') > 0 and s.count('BA') > 0:\\n\\tif s.find('ABA') <= s.find('AB') and s.find('ABA') <= s.find('BA') and (s.find('ABA') != -1):\\n\\t\\tif s.find('AB', s.find('ABA') + 3, len(s)) != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telif s.find('BA', s.find('ABA') + 3, len(s)) != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif s.find('BAB') <= s.find('AB') and s.find('BAB') <= s.find('BA') and (s.find('BAB') != -1):\\n\\t\\tif s.find('AB', s.find('BAB') + 3, len(s)) != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telif s.find('BA', s.find('BAB') + 3, len(s)) != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif s.find('AB') < s.find('BA'):\\n\\t\\tif s.find('BA', s.find('AB') + 2, len(s)) != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif s.find('BA') < s.find('AB'):\\n\\t\\tif s.find('AB', s.find('BA') + 2, len(s)) != -1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef main():\\n\\ts = input()\\n\\tn = len(s)\\n\\tab = 0\\n\\tba = 0\\n\\tx = 0\\n\\twhile x < n:\\n\\t\\tif x + 1 < n and s[x] == 'A' and (s[x + 1] == 'B') and (ab == 0):\\n\\t\\t\\tab = 1\\n\\t\\t\\tx += 1\\n\\t\\telif x + 1 < n and s[x] == 'B' and (s[x + 1] == 'A') and (ba == 0) and (ab == 1):\\n\\t\\t\\tba = 1\\n\\t\\t\\tx += 1\\n\\t\\tx += 1\\n\\tx = 0\\n\\tabb = 0\\n\\tbaa = 0\\n\\twhile x < n:\\n\\t\\tif x + 1 < n and s[x] == 'B' and (s[x + 1] == 'A') and (baa == 0):\\n\\t\\t\\tbaa = 1\\n\\t\\t\\tx += 1\\n\\t\\telif x + 1 < n and s[x] == 'A' and (s[x + 1] == 'B') and (abb == 0) and (baa == 1):\\n\\t\\t\\tabb = 1\\n\\t\\t\\tx += 1\\n\\t\\tx += 1\\n\\tif ab == 1 and ba == 1 or (abb == 1 and baa == 1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"st = input()\\na = st.find('AB')\\nb = st.find('BA')\\nprint('NYOE S'[a >= 0 and st[a + 2:].find('BA') >= 0 or (b >= 0 and st[b + 2:].find('AB') >= 0)::2])\\n\", \"str = input()\\nstr += 'NNNNNNNN'\\nk_ab = 0\\nk_ba = 0\\nk_aba = 0\\nans = 'NO'\\ni = 0\\nwhile i < len(str) - 6:\\n\\tif str[i] == 'A':\\n\\t\\tif str[i + 1] == 'B':\\n\\t\\t\\tif str[i + 2] == 'A':\\n\\t\\t\\t\\tif str[i + 3] == 'B':\\n\\t\\t\\t\\t\\tif str[i + 4] == 'A':\\n\\t\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\t\\ti += 5\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tk_aba += 1\\n\\t\\t\\t\\t\\t\\ti += 4\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tk_aba += 1\\n\\t\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tk_ab += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telif str[i] == 'B':\\n\\t\\tif str[i + 1] == 'A':\\n\\t\\t\\tif str[i + 2] == 'B':\\n\\t\\t\\t\\tif str[i + 3] == 'A':\\n\\t\\t\\t\\t\\tif str[i + 4] == 'B':\\n\\t\\t\\t\\t\\t\\tans = 'YES'\\n\\t\\t\\t\\t\\t\\ti += 5\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tk_aba += 1\\n\\t\\t\\t\\t\\t\\ti += 4\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tk_aba += 1\\n\\t\\t\\t\\t\\ti += 3\\n\\t\\t\\telse:\\n\\t\\t\\t\\tk_ba += 1\\n\\t\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\telse:\\n\\t\\ti += 1\\nif k_ab > 0 and (k_ba > 0 or k_aba > 0):\\n\\tans = 'YES'\\nelif k_ba > 0 and (k_ab > 0 or k_aba > 0):\\n\\tans = 'YES'\\nelif ans == 'YES':\\n\\tans = 'YES'\\nelse:\\n\\tans = 'NO'\\nprint(ans)\\n\", \"s = list(input())\\nz = []\\nz += s\\nl = 0\\nfor n in range(len(s) - 1):\\n\\tif s[n] + s[n + 1] == 'AB':\\n\\t\\tl = 1\\n\\t\\ts[n] = s[n + 1] = 'D'\\n\\t\\tbreak\\nif l == 0:\\n\\tl = 0\\nelse:\\n\\tfor n in range(len(s) - 1):\\n\\t\\tif s[n] + s[n + 1] == 'BA':\\n\\t\\t\\tl = 2\\n\\t\\t\\ts[n] = s[n + 1] = 'D'\\n\\t\\t\\tbreak\\n\\tif l == 1:\\n\\t\\tl = 0\\n\\telif l == 2:\\n\\t\\tprint('YES')\\nif l == 0:\\n\\tfor n in range(len(z) - 1):\\n\\t\\tif z[n] + z[n + 1] == 'BA':\\n\\t\\t\\tz[n] = z[n + 1] = 'D'\\n\\t\\t\\tl = 1\\n\\t\\t\\tbreak\\n\\tif l == 0:\\n\\t\\tl = 0\\n\\telse:\\n\\t\\tfor n in range(len(z) - 1):\\n\\t\\t\\tif z[n] + z[n + 1] == 'AB':\\n\\t\\t\\t\\tl = 2\\n\\t\\t\\t\\tbreak\\n\\t\\tif l == 1:\\n\\t\\t\\tprint('NO')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\tif l == 0:\\n\\t\\tprint('NO')\\n\", \"n = input()\\nclis = []\\ndlis = []\\nfor i in range(0, len(n) - 1):\\n\\tif n[i] + n[i + 1] == 'AB':\\n\\t\\tclis.append(i)\\n\\tif n[i] + n[i + 1] == 'BA':\\n\\t\\tdlis.append(i)\\n\\ndef judge(clis, dlis):\\n\\tfor i in clis:\\n\\t\\tfor j in dlis:\\n\\t\\t\\tif i != j and abs(i - j) > 1:\\n\\t\\t\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(judge(clis, dlis))\\n\", \"s = input()\\n(c, c1, c2) = (0, 0, 0)\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i] == 'A' and c1 != 1:\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tif i + 2 < len(s) and s[i + 2] == 'A':\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc1 += 1\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'B' and c2 != 1:\\n\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\tif i + 2 < len(s) and s[i + 2] == 'B':\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc2 += 1\\n\\t\\t\\ti += 1\\n\\tif c1 + c2 + c >= 2:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\n\\ti += 1\\nprint('NO')\\n\", \"s = input().strip()\\nn = len(s)\\n\\ndef has():\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\t\\tif s[j:j + 2] == 'BA':\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\tbreak\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tfor j in range(i + 2, n - 1):\\n\\t\\t\\t\\tif s[j:j + 2] == 'AB':\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\tbreak\\n\\treturn False\\nprint('YES' if has() else 'NO')\\n\", \"import sys\\ns = sys.stdin.readline()\\nn = len(s)\\nret = False\\na = s.find('AB')\\nif a != -1 and s.find('BA', a + 2) != -1:\\n\\tret = True\\nif not ret:\\n\\ta = s.find('BA')\\n\\tif a != -1 and s.find('AB', a + 2) != -1:\\n\\t\\tret = True\\nsys.stdout.write('YES\\\\n' if ret else 'NO\\\\n')\\n\", \"s = input()\\nans = False\\nans_2 = False\\ni = 0\\nl = len(s)\\nwhile i < l:\\n\\tif not ans and s[i] == 'A' and (i + 1 < l) and (s[i + 1] == 'B'):\\n\\t\\tans = True\\n\\t\\ti += 2\\n\\telif ans and s[i] == 'B' and (i + 1 < l) and (s[i + 1] == 'A'):\\n\\t\\tans_2 = True\\n\\t\\tbreak\\n\\telse:\\n\\t\\ti += 1\\nif ans * ans_2:\\n\\tprint('YES')\\n\\texit()\\nans = False\\nans_2 = False\\ni = 0\\nwhile i < l:\\n\\tif not ans_2 and s[i] == 'B' and (i + 1 < l) and (s[i + 1] == 'A'):\\n\\t\\tans_2 = True\\n\\t\\ti += 2\\n\\telif ans_2 and s[i] == 'A' and (i + 1 < l) and (s[i + 1] == 'B'):\\n\\t\\tans = True\\n\\t\\tbreak\\n\\telse:\\n\\t\\ti += 1\\nif ans * ans_2:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nind = s.find('AB')\\nflag = 0\\nif ind > -1 and 'BA' in s[ind + 2:]:\\n\\tflag = 1\\nind = s.find('BA')\\nif ind > -1 and 'AB' in s[ind + 2:]:\\n\\tflag = 1\\nif flag:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns1 = s\\nif 'BA' in s:\\n\\ts = s.replace('BA', '//', 1)\\nelse:\\n\\ts = s.replace('AB', '//')\\nif 'AB' in s:\\n\\tt = True\\nelse:\\n\\tt = False\\ns = s1\\nif 'AB' in s:\\n\\ts = s.replace('AB', '//', 1)\\nelse:\\n\\ts = s.replace('BA', '//')\\nif 'BA' in s:\\n\\tt1 = True\\nelse:\\n\\tt1 = False\\nif t or t1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"inp = input().strip()\\nif len(inp) < 4:\\n\\tprint('NO')\\nelif inp.count('AB') == 1 and inp.count('BA') == 1:\\n\\tif inp.count('ABA') + inp.count('BAB') >= 1:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif inp.count('AB') < 1 or inp.count('BA') < 1:\\n\\tprint('NO')\\nelif inp.count('AB') + inp.count('BA') == 3 and inp.count('ABAB') + inp.count('BABA') >= 1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\ni = 0\\nb_ab = False\\nb = False\\nwhile i < len(s) - 1:\\n\\tif not b_ab:\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tb_ab = True\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tb = True\\n\\t\\tbreak\\n\\ti += 1\\ni = 0\\nb_ba = False\\nb1 = False\\nwhile i < len(s) - 1:\\n\\tif not b_ba:\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tb_ba = True\\n\\t\\t\\ti += 1\\n\\telif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tb1 = True\\n\\t\\tbreak\\n\\ti += 1\\nif b or b1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"a = input()\\nf = False\\nfor i in range(len(a) - 1):\\n\\tif a[i] + a[i + 1] == 'AB':\\n\\t\\tif a[i + 2:].rfind('BA') != -1:\\n\\t\\t\\tf = True\\n\\tif a[i] + a[i + 1] == 'BA':\\n\\t\\tif a[i + 2:].rfind('AB') != -1:\\n\\t\\t\\tf = True\\nif f:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"S = input()\\nA = 0\\nB = 0\\nfor i in range(len(S) - 1):\\n\\tif S[i] == 'A' and S[i + 1] == 'B':\\n\\t\\tA += 1\\n\\tif S[i] == 'B' and S[i + 1] == 'A':\\n\\t\\tB += 1\\nif A * B == 0:\\n\\tprint('NO')\\nelif A == B == 1:\\n\\tif 'ABA' in S or 'BAB' in S:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelif A == 1 and B == 2 or (A == 2 and B == 1):\\n\\tif 'ABAB' in S or 'BABA' in S:\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tprint('YES')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\ns1 = s\\ntry:\\n\\ti = s.index('AB')\\n\\ts = s.replace('AB', '..', 1)\\n\\tj = s.index('BA')\\n\\tprint('YES')\\nexcept:\\n\\ttry:\\n\\t\\ti = s1.index('BA')\\n\\t\\ts1 = s1.replace('BA', '..', 1)\\n\\t\\tj = s1.index('AB')\\n\\t\\tprint('YES')\\n\\texcept:\\n\\t\\tprint('NO')\\n\", \"s = input()\\nABL = s.find('AB')\\nABR = s.rfind('AB')\\nBAL = s.find('BA')\\nBAR = s.rfind('BA')\\nif (abs(ABL - BAR) > 1 or abs(BAL - ABR) > 1) and ABL != -1 and (BAL != -1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"string = input()\\nflag1 = 0\\nflag2 = 0\\nflag3 = 0\\nflag4 = 0\\nif 'AB' in string:\\n\\tflag1 = 1\\n\\tpos1 = string.find('AB')\\n\\tif 'BA' in string[:pos1] or 'BA' in string[pos1 + 2:]:\\n\\t\\tflag2 = 1\\nif 'BA' in string:\\n\\tflag3 = 1\\n\\tpos1 = string.find('BA')\\n\\tif 'AB' in string[:pos1] or 'AB' in string[pos1 + 2:]:\\n\\t\\tflag4 = 1\\nif flag1 == 1 and flag2 == 1 or (flag3 == 1 and flag4 == 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nimport math\\nimport os\\nimport itertools\\nimport string\\nimport heapq\\nimport _collections\\nfrom collections import Counter\\nfrom collections import defaultdict\\nfrom functools import lru_cache\\nimport bisect\\nimport re\\nimport queue\\n\\nclass Scanner:\\n\\n\\t@staticmethod\\n\\tdef int():\\n\\t\\treturn int(sys.stdin.readline().rstrip())\\n\\n\\t@staticmethod\\n\\tdef string():\\n\\t\\treturn sys.stdin.readline().rstrip()\\n\\n\\t@staticmethod\\n\\tdef map_int():\\n\\t\\treturn [int(x) for x in Scanner.string().split()]\\n\\n\\t@staticmethod\\n\\tdef string_list(n):\\n\\t\\treturn [input() for i in range(n)]\\n\\n\\t@staticmethod\\n\\tdef int_list_list(n):\\n\\t\\treturn [Scanner.map_int() for i in range(n)]\\n\\n\\t@staticmethod\\n\\tdef int_cols_list(n):\\n\\t\\treturn [int(input()) for i in range(n)]\\n\\nclass Math:\\n\\n\\t@staticmethod\\n\\tdef gcd(a, b):\\n\\t\\tif b == 0:\\n\\t\\t\\treturn a\\n\\t\\treturn Math.gcd(b, a % b)\\n\\n\\t@staticmethod\\n\\tdef lcm(a, b):\\n\\t\\treturn a * b // Math.gcd(a, b)\\n\\n\\t@staticmethod\\n\\tdef divisor(n):\\n\\t\\tres = []\\n\\t\\ti = 1\\n\\t\\tfor i in range(1, int(n ** 0.5) + 1):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\tres.append(i)\\n\\t\\t\\t\\tif i != n // i:\\n\\t\\t\\t\\t\\tres.append(n // i)\\n\\t\\treturn res\\n\\n\\t@staticmethod\\n\\tdef round_up(a, b):\\n\\t\\treturn -(-a // b)\\n\\n\\t@staticmethod\\n\\tdef is_prime(n):\\n\\t\\tif n < 2:\\n\\t\\t\\treturn False\\n\\t\\tif n == 2:\\n\\t\\t\\treturn True\\n\\t\\tif n % 2 == 0:\\n\\t\\t\\treturn False\\n\\t\\td = int(n ** 0.5) + 1\\n\\t\\tfor i in range(3, d + 1, 2):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n\\nclass PriorityQueue:\\n\\n\\tdef __init__(self, l=[]):\\n\\t\\tself.q = l\\n\\t\\theapq.heapify(self.q)\\n\\t\\treturn\\n\\n\\tdef push(self, n):\\n\\t\\theapq.heappush(self.q, n)\\n\\t\\treturn\\n\\n\\tdef pop(self):\\n\\t\\treturn heapq.heappop(self.q)\\nMOD = int(1000000000.0) + 7\\nINF = int(1000000000000000.0)\\n\\ndef main():\\n\\tS = Scanner.string()\\n\\n\\tdef solve():\\n\\t\\tif 'AB' in S:\\n\\t\\t\\tp = S.index('AB')\\n\\t\\t\\tif 'BA' in S[p + 2:]:\\n\\t\\t\\t\\treturn True\\n\\t\\tif 'BA' in S:\\n\\t\\t\\tp = S.index('BA')\\n\\t\\t\\tif 'AB' in S[p + 2:]:\\n\\t\\t\\t\\treturn True\\n\\t\\treturn False\\n\\tprint('NYOE S'[solve()::2])\\nmain()\\n\", \"s = input()\\nn = len(s)\\ntemp = ''\\ntent = ''\\nflag = 0\\ni = 0\\na = []\\nb = []\\nwhile i < n - 1:\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\ta.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tb.append(i)\\n\\ti += 1\\ni = 0\\nwhile i < len(a):\\n\\tfor j in range(len(b)):\\n\\t\\tif a[i] != b[j] + 1 and a[i] != b[j] - 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\tif flag != 1:\\n\\t\\ti += 1\\n\\telse:\\n\\t\\tbreak\\nif flag == 0:\\n\\tprint('NO')\\n\", \"s = input().strip()\\nif s.find('AB') != -1:\\n\\tx = s.find('AB')\\n\\tt = s[x + 2:]\\n\\tif t.find('BA') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\nif s.find('BA') != -1:\\n\\tx = s.find('BA')\\n\\tt = s[x + 2:]\\n\\tif t.find('AB') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit(0)\\nprint('NO')\\n\", \"s = input()\\n(x, y) = (s, s)\\nvar = 0\\nif 'AB' in x:\\n\\tl = x.index('AB')\\n\\tif 'BA' in x[:l] or 'BA' in x[l + 2:]:\\n\\t\\tvar = 1\\nif var == 1:\\n\\tprint('YES')\\nelse:\\n\\tif 'BA' in y:\\n\\t\\tl = y.index('BA')\\n\\t\\tif 'AB' in y[:l] or 'AB' in y[l + 2:]:\\n\\t\\t\\tvar = 1\\n\\tif var == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"def main():\\n\\tx = input()\\n\\tfound = False\\n\\tif 'AB' in x:\\n\\t\\ty = x.split('AB', 1)\\n\\t\\tfor i in y:\\n\\t\\t\\tif 'BA' in i:\\n\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\tif 'BA' in x:\\n\\t\\ty = x.split('BA', 1)\\n\\t\\tfor i in y:\\n\\t\\t\\tif 'AB' in i:\\n\\t\\t\\t\\tfound = True\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\treturn\\n\\tif not found:\\n\\t\\tprint('NO')\\nmain()\\n\", \"n = input()\\nif 'AB' not in n or 'BA' not in n:\\n\\tprint('NO')\\n\\texit()\\nfi = []\\nse = []\\nx = len(n)\\nfor i in range(x - 1):\\n\\tif n[i] + n[i + 1] == 'AB':\\n\\t\\tfi.append(i)\\n\\telif n[i] + n[i + 1] == 'BA':\\n\\t\\tse.append(i)\\nx = len(se)\\nfor i in fi:\\n\\tif se.count(i + 1) + se.count(i - 1) != x:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"__author__ = 'victormion'\\nleftAB = None\\nleftBA = None\\nrightAB = None\\nrightBA = None\\ns = input()\\n\\ndef function():\\n\\tif leftAB == None or leftBA == None:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tif rightAB - leftBA > 1:\\n\\t\\t\\treturn True\\n\\t\\tif rightBA - leftAB > 1:\\n\\t\\t\\treturn True\\n\\treturn False\\nfor i in range(0, len(s) - 1):\\n\\tif 'AB' == s[i:i + 2]:\\n\\t\\tif leftAB == None:\\n\\t\\t\\tleftAB = i\\n\\t\\trightAB = i\\n\\tif 'BA' == s[i:i + 2]:\\n\\t\\tif leftBA == None:\\n\\t\\t\\tleftBA = i\\n\\t\\trightBA = i\\nif function():\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"from __future__ import division, print_function\\nfrom sys import stdin, stdout\\nimport bisect\\nfrom bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nimport itertools\\nfrom collections import Counter\\nimport collections\\nimport math\\nimport heapq\\nimport re\\n\\ndef modinv(n, p):\\n\\treturn pow(n, p - 2, p)\\n\\ndef cin():\\n\\treturn map(int, sin().split())\\n\\ndef ain():\\n\\treturn list(map(int, sin().split()))\\n\\ndef sin():\\n\\treturn input()\\n\\ndef inin():\\n\\treturn int(input())\\n\\ndef Divisors(n):\\n\\tl = []\\n\\tfor i in range(1, int(math.sqrt(n) + 1)):\\n\\t\\tif n % i == 0:\\n\\t\\t\\tif n // i == i:\\n\\t\\t\\t\\tl.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tl.append(i)\\n\\t\\t\\t\\tl.append(n // i)\\n\\treturn l\\n\\ndef most_frequent(list):\\n\\treturn max(set(list), key=list.count)\\n\\ndef GCD(x, y):\\n\\twhile y:\\n\\t\\t(x, y) = (y, x % y)\\n\\treturn x\\n\\ndef ncr(n, r, p):\\n\\tt = fact[n] * (ifact[r] * ifact[n - r] % p) % p\\n\\treturn t\\n\\ndef Convert(string):\\n\\tli = list(string.split(''))\\n\\treturn li\\n\\ndef SieveOfEratosthenes(n):\\n\\tglobal prime\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\tf = []\\n\\tfor p in range(2, n):\\n\\t\\tif prime[p]:\\n\\t\\t\\tf.append(p)\\n\\treturn f\\nprime = []\\nq = []\\n\\ndef dfs(n, d, v, c):\\n\\tglobal q\\n\\tv[n] = 1\\n\\tx = d[n]\\n\\tq.append(n)\\n\\tj = c\\n\\tfor i in x:\\n\\t\\tif i not in v:\\n\\t\\t\\tf = dfs(i, d, v, c + 1)\\n\\t\\t\\tj = max(j, f)\\n\\treturn j\\n\\ndef main():\\n\\ts = sin()\\n\\tflag = 0\\n\\tfor i in range(len(s) - 2):\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\telif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\tif flag == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\npy2 = round(0.5)\\nif py2:\\n\\tfrom future_builtins import ascii, filter, hex, map, oct, zip\\n\\trange = xrange\\nimport os, sys\\nfrom io import IOBase, BytesIO\\nBUFSIZE = 8192\\n\\nclass FastIO(BytesIO):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._file = file\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.writable = 'x' in file.mode or 'w' in file.mode\\n\\t\\tself.write = super(FastIO, self).write if self.writable else None\\n\\n\\tdef _fill(self):\\n\\t\\ts = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\tself.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\\n\\t\\treturn s\\n\\n\\tdef read(self):\\n\\t\\twhile self._fill():\\n\\t\\t\\tpass\\n\\t\\treturn super(FastIO, self).read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\ts = self._fill()\\n\\t\\t\\tself.newlines = s.count(b'\\\\n') + (not s)\\n\\t\\tself.newlines -= 1\\n\\t\\treturn super(FastIO, self).readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.getvalue())\\n\\t\\t\\t(self.truncate(0), self.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tif py2:\\n\\t\\t\\tself.write = self.buffer.write\\n\\t\\t\\tself.read = self.buffer.read\\n\\t\\t\\tself.readline = self.buffer.readline\\n\\t\\telse:\\n\\t\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"inputstr = input()\\nstrlen = len(inputstr)\\nab = []\\nba = []\\nimport re\\nfor m in re.finditer('AB', inputstr):\\n\\tab.append([m.start(), m.end() - 1])\\nfor m in re.finditer('BA', inputstr):\\n\\tba.append([m.start(), m.end() - 1])\\nfound = False\\nfor i in range(len(ab)):\\n\\tfor j in range(len(ba)):\\n\\t\\tif ab[i][0] != ba[j][0] and ab[i][0] != ba[j][1] and (ab[i][1] != ba[j][0]) and (ab[i][1] != ba[j][1]):\\n\\t\\t\\tfound = True\\n\\t\\t\\tbreak\\n\\tif found:\\n\\t\\tbreak\\nif found:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"word = input()\\n(ab1, ab2) = (word.find('AB'), word.rfind('AB'))\\n(ba1, ba2) = (word.find('BA'), word.rfind('BA'))\\nif ab1 != -1 and ba1 != -1:\\n\\tif ab2 - ba1 > 1 or ba2 - ab1 > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nidx = s.find('AB')\\nif idx != -1 and s.find('BA', idx + 2) != -1:\\n\\tprint('YES')\\nelse:\\n\\tidx = s.find('BA')\\n\\tif idx != -1 and s.find('AB', idx + 2) != -1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import re\\ns = input()\\ns1 = 'AB'\\ns2 = 'BA'\\nif 'AB' not in s:\\n\\tprint('NO')\\nelse:\\n\\tm1 = re.finditer(s1, s)\\n\\tm2 = re.finditer(s2, s)\\n\\tl1 = [match.start() for match in m1]\\n\\tl2 = [match.start() for match in m2]\\n\\tfor i in l1:\\n\\t\\tfor j in l2:\\n\\t\\t\\tif abs(i - j) >= 2:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit(0)\\n\\tprint('NO')\\n\", \"from math import *\\nfrom itertools import *\\nfrom collections import *\\nfrom bisect import *\\ns = input()\\na = []\\nb = []\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\ta.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tb.append(i)\\nfor i in a:\\n\\tfor j in b:\\n\\t\\tif abs(i - j) > 1:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"string = input()\\nal = string.find('AB')\\nar = string.rfind('AB')\\nbl = string.find('BA')\\nbr = string.rfind('BA')\\nif al >= 0 and bl >= 0 and (br - al > 1 or ar - bl > 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef solution(s):\\n\\tn = len(s)\\n\\tif n <= 3:\\n\\t\\twrite('NO')\\n\\t\\treturn\\n\\tloc_a = None\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\tloc_a = (i, i + 1)\\n\\t\\t\\tbreak\\n\\tloc_b = None\\n\\tfor i in range(n - 1):\\n\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\tloc_b = (i, i + 1)\\n\\t\\t\\tbreak\\n\\tif loc_a:\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif s[i:i + 2] == 'BA':\\n\\t\\t\\t\\tif i + 1 < loc_a[0]:\\n\\t\\t\\t\\t\\twrite('YES')\\n\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\tif i > loc_a[1]:\\n\\t\\t\\t\\t\\twrite('YES')\\n\\t\\t\\t\\t\\treturn\\n\\tif loc_b:\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\tif s[i:i + 2] == 'AB':\\n\\t\\t\\t\\tif i + 1 < loc_b[0]:\\n\\t\\t\\t\\t\\twrite('YES')\\n\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\tif i > loc_b[1]:\\n\\t\\t\\t\\t\\twrite('YES')\\n\\t\\t\\t\\t\\treturn\\n\\twrite('NO')\\n\\ndef main():\\n\\ts = input()\\n\\tsolution(s)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\n\\ndef input():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef write(*args, end='\\\\n'):\\n\\tfor x in args[:-1]:\\n\\t\\tsys.stdout.write(str(x) + ' ')\\n\\tsys.stdout.write(str(args[-1]))\\n\\tsys.stdout.write(end)\\n\\ndef r_array():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef r_int():\\n\\treturn int(input())\\nmain()\\n\", \"s = input()\\none = -1\\ntwo = -1\\nfor i in range(0, len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (one == -1):\\n\\t\\tone = i\\n\\tif s[i] == 'B' and s[i + 1] == 'A' and (two == -1):\\n\\t\\ttwo = i\\nisTrue = False\\nfor i in range(len(s) - 1, 1, -1):\\n\\tif s[i - 1] == 'A' and s[i] == 'B' and (two != -1) and (i > two + 2):\\n\\t\\tisTrue = True\\n\\t\\tbreak\\n\\tif s[i - 1] == 'B' and s[i] == 'A' and (one != -1) and (i > one + 2):\\n\\t\\tisTrue = True\\n\\t\\tbreak\\nif isTrue:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"_str = input()\\na = 'AB'\\nb = 'BA'\\n_str1 = _str.replace(a, '__', 1).replace(b, '__', 1)\\n_str2 = _str.replace(b, '__', 1).replace(a, '__', 1)\\nif _str1.count('_') == 4 or _str2.count('_') == 4:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab = s.find('AB')\\nba = s.find('BA')\\n\\ndef lookForMyVariable(s):\\n\\tresult = str\\n\\tif ab != -1 and s.find('BA', ab + 2) != -1 or (ba != -1 and s.find('AB', ba + 2) != -1):\\n\\t\\tresult = 'YES'\\n\\telse:\\n\\t\\tresult = 'NO'\\n\\treturn result\\nprint(lookForMyVariable(s))\\n\", \"s = input()\\npA = -10\\npB = -10\\nal = []\\nbl = []\\nfor i in range(len(s)):\\n\\tif s[i] == 'A' and pA == -10:\\n\\t\\tpA = i\\n\\tif s[i] == 'B' and pB == -10:\\n\\t\\tpB = i\\n\\tif s[i] == 'A':\\n\\t\\tif i - pB == 1:\\n\\t\\t\\tbl.append(i)\\n\\t\\tpA = i\\n\\tif s[i] == 'B':\\n\\t\\tif i - pA == 1:\\n\\t\\t\\tal.append(i)\\n\\t\\tpB = i\\nbr = False\\nfor i in bl:\\n\\tif br:\\n\\t\\tbreak\\n\\ttS = set(al[:])\\n\\tif i - 1 in tS:\\n\\t\\ttS.remove(i - 1)\\n\\tif i + 1 in tS:\\n\\t\\ttS.remove(i + 1)\\n\\tif len(tS) > 0:\\n\\t\\tbr = True\\n\\t\\tbreak\\nif br:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"t = 1\\nfor __ in range(t):\\n\\ts = input()\\n\\ts1 = 'AB'\\n\\ts2 = 'BA'\\n\\t(f, se) = (0, 0)\\n\\tn = len(s)\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tif f == 1:\\n\\t\\t\\tif s2 == s[i:i + 2]:\\n\\t\\t\\t\\tse = 1\\n\\t\\t\\t\\ti += 1\\n\\t\\tif s1 == s[i:i + 2] and f == 0:\\n\\t\\t\\tf = 1\\n\\t\\t\\ti += 1\\n\\t\\ti += 1\\n\\tif f == 1 and se == 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\t(f, se) = (0, 0)\\n\\t\\ti = 0\\n\\t\\ti = 0\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif se == 1:\\n\\t\\t\\t\\tif s1 == s[i:i + 2]:\\n\\t\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\tif s2 == s[i:i + 2] and se == 0:\\n\\t\\t\\t\\tse = 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\ti += 1\\n\\t\\tif f == se == 1:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"import re\\nmystr = input()\\nr1 = mystr.find('AB')\\nr2 = mystr.rfind('BA')\\nif r1 != -1 and r2 != -1 and (r1 != r2 - 1) and (r2 != r1 - 1):\\n\\tprint('YES')\\nelse:\\n\\tr1 = mystr.find('BA')\\n\\tr2 = mystr.rfind('AB')\\n\\tif r1 != -1 and r2 != -1 and (r1 != r2 - 1) and (r2 != r1 - 1):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"a = input()\\nn = len(a)\\nb = [False] * n\\nc = [False] * n\\ni = 1\\nok = False\\nwhile i < n:\\n\\tb[i] = b[i - 1]\\n\\tc[i] = c[i - 1]\\n\\tif a[i - 1:i + 1] == 'AB':\\n\\t\\tb[i] = 1\\n\\t\\tif i > 1 and c[i - 2]:\\n\\t\\t\\tok = 1\\n\\tif a[i - 1:i + 1] == 'BA':\\n\\t\\tc[i] = 1\\n\\t\\tif i > 1 and b[i - 2]:\\n\\t\\t\\tok = 1\\n\\ti += 1\\nif ok:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns += '...'\\nab = 'AB'\\nba = 'BA'\\ni = s.find(ab)\\nif i == -1:\\n\\tprint('NO')\\nelse:\\n\\ta = s.find(ba)\\n\\tif a == -1:\\n\\t\\tprint('NO')\\n\\telif a == i - 1:\\n\\t\\tif s[i + 2:].find(ba) == -1:\\n\\t\\t\\tif s[i + 1:].find(ab) == -1:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telif a == i + 1:\\n\\t\\tif s[i + 2:].find(ba) == -1:\\n\\t\\t\\tif s[i + 3:].find(ab) == -1:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('YES')\\n\", \"s = input()\\ns2 = s\\ni = s.find('AB')\\nnfound = 1\\nif i != -1:\\n\\ts = s[:i] + 'F' + s[i + 2:]\\n\\tif s.find('BA') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\ni = s2.find('BA')\\nif i != -1:\\n\\ts2 = s2[:i] + 'f' + s2[i + 2:]\\n\\tif s2.find('AB') != -1:\\n\\t\\tprint('YES')\\n\\t\\texit()\\nif nfound:\\n\\tprint('NO')\\n\", \"s = str(input())\\ni = 0\\nab = []\\nba = []\\nwhile i < len(s):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tab.append(i)\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tba.append(i)\\n\\ti += 1\\nif len(ab) == 0 or len(ba) == 0:\\n\\tprint('NO')\\nelse:\\n\\tfor i in ab:\\n\\t\\tfor j in ba:\\n\\t\\t\\tif i - 1 != j and i + 1 != j:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tquit()\\n\\tprint('NO')\\n\", \"s = str(input())\\nok1 = False\\nok2 = False\\nok = False\\ni = 0\\ns = s + 'ah'\\nwhile i < len(s) - 1:\\n\\tif s[i] == 'A' or s[i] == 'B':\\n\\t\\tif ok1 == False:\\n\\t\\t\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\t\\t\\tok1 = True\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telif s[i + 1] == 'A' and s[i + 2] == 'B':\\n\\t\\t\\t\\tok1 = True\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\t\\tcontinue\\n\\t\\tif s[i] == 'B' and s[i + 1] == 'A' and (ok2 == False):\\n\\t\\t\\tok2 = True\\n\\t\\t\\ti += 1\\n\\ti += 1\\ni = 0\\nif ok1 and ok2:\\n\\tok = True\\nok1 = False\\nok2 = False\\nwhile i < len(s) - 1:\\n\\tif s[i] == 'A' or s[i] == 'B':\\n\\t\\tif ok2 == False:\\n\\t\\t\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\t\\t\\tok2 = True\\n\\t\\t\\t\\ti += 2\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telif s[i + 1] == 'B' and s[i + 2] == 'A':\\n\\t\\t\\t\\tok2 = True\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\t\\tcontinue\\n\\t\\tif s[i] == 'A' and s[i + 1] == 'B' and (ok1 == False):\\n\\t\\t\\tok1 = True\\n\\t\\t\\ti += 1\\n\\ti += 1\\nif ok or (ok1 and ok2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def finder(input_str):\\n\\tidx = input_str.find('AB')\\n\\tif idx != -1:\\n\\t\\tif input_str[idx + 2:].find('BA') != -1:\\n\\t\\t\\treturn True\\n\\tidx = input_str.find('BA')\\n\\tif idx != -1:\\n\\t\\treturn input_str[idx + 2:].find('AB') != -1\\nprint('YES' if finder(input()) else 'NO')\\n\", \"import sys\\nimport math\\nfrom collections import Counter\\nfrom collections import OrderedDict\\nfrom collections import defaultdict\\nfrom functools import reduce\\nsys.setrecursionlimit(10 ** 6)\\n\\ndef inputt():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef printt(n):\\n\\tsys.stdout.write(str(n) + '\\\\n')\\n\\ndef listt():\\n\\treturn [int(i) for i in inputt().split()]\\n\\ndef gcd(a, b):\\n\\treturn math.gcd(a, b)\\n\\ndef lcm(a, b):\\n\\treturn a * b // gcd(a, b)\\n\\ndef factors(n):\\n\\tstep = 2 if n % 2 else 1\\n\\treturn set(reduce(list.__add__, ([i, n // i] for i in range(1, int(math.sqrt(n)) + 1, step) if n % i == 0)))\\n\\ndef comb(n, k):\\n\\tfactn = math.factorial(n)\\n\\tfactk = math.factorial(k)\\n\\tfact = math.factorial(n - k)\\n\\tans = factn // (factk * fact)\\n\\treturn ans\\n\\ndef is_prime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\tif n == 2:\\n\\t\\treturn True\\n\\tif n > 2 and n % 2 == 0:\\n\\t\\treturn False\\n\\tmax_div = math.floor(math.sqrt(n))\\n\\tfor i in range(3, 1 + max_div, 2):\\n\\t\\tif n % i == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef maxpower(n, x):\\n\\tB_max = int(math.log(n, x)) + 1\\n\\treturn B_max\\nt = 1\\nfor _ in range(t):\\n\\ts = inputt()\\n\\tif s.count('AB') + s.count('BA') - s.count('ABA') - s.count('BAB') >= 2 and s.count('AB') and (s.count('BA') > 0):\\n\\t\\tprintt('YES')\\n\\telse:\\n\\t\\tprintt('NO')\\n\", \"s = input()\\nab_r = s.rfind('AB')\\nab_l = s.find('AB')\\nba_r = s.rfind('BA')\\nba_l = s.find('BA')\\nif ab_l == -1 or ba_l == -1:\\n\\tprint('NO')\\n\\texit()\\nif abs(ab_r - ba_l) > 1 or abs(ab_l - ba_r) > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ny = 'YES'\\nif s.find('AB', s.find('BA') + 2) > 0 and s.find('BA') >= 0:\\n\\tprint(y)\\nelif s.find('BA', s.find('AB') + 2) > 0 and s.find('AB') >= 0:\\n\\tprint(y)\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\ns = sys.stdin.readline()\\ni = s.find('AB')\\nj = s.find('BA')\\nif i != -1 and s.find('BA', i + 2) != -1:\\n\\tsys.stdout.write('YES\\\\n')\\nelif j != -1 and s.find('AB', j + 2) != -1:\\n\\tsys.stdout.write('YES\\\\n')\\nelse:\\n\\tsys.stdout.write('NO\\\\n')\\n\", \"a = str(input())\\nn = len(a)\\np = 0\\nr = 'NO'\\ni = 0\\nwhile i < n - 1:\\n\\tif a[i] == 'B' and a[i + 1] == 'A' and (p == 1):\\n\\t\\tr = 'YES'\\n\\tif a[i] == 'A' and a[i + 1] == 'B' and (p == 0):\\n\\t\\tp = 1\\n\\t\\ti = i + 1\\n\\ti = i + 1\\np = 0\\ni = 0\\nwhile i < n - 1:\\n\\tif a[i] == 'A' and a[i + 1] == 'B' and (p == 1):\\n\\t\\tr = 'YES'\\n\\tif a[i] == 'B' and a[i + 1] == 'A' and (p == 0):\\n\\t\\tp = 1\\n\\t\\ti = i + 1\\n\\ti = i + 1\\nprint(r)\\n\", \"S = input()\\nN = len(S)\\nBA = 0\\nAB = 0\\nfla = 0\\nfor i in range(1, N):\\n\\tif S[i] == 'A':\\n\\t\\tif S[i - 1] == 'B':\\n\\t\\t\\tif AB == 0:\\n\\t\\t\\t\\tBA += 1\\n\\t\\t\\telif AB == 1 and S[i - 2] == 'A':\\n\\t\\t\\t\\tBA += 1\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfla = 1\\n\\t\\t\\t\\tbreak\\n\\telif S[i] == 'B':\\n\\t\\tif S[i - 1] == 'A':\\n\\t\\t\\tif BA == 0:\\n\\t\\t\\t\\tAB += 1\\n\\t\\t\\telif BA == 1 and S[i - 2] == 'B':\\n\\t\\t\\t\\tAB += 1\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfla = 1\\n\\t\\t\\t\\tbreak\\nif fla:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nm = []\\nn = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tm.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tn.append(i)\\nif min(len(m), len(n)) == 0:\\n\\tprint('NO')\\nelif max(len(m), len(n)) > 2:\\n\\tprint('YES')\\nelif len(m) == 2 and len(n) == 2:\\n\\tprint('YES')\\nelif len(m) == 1 and len(n) == 2:\\n\\tif max(m[0] - n[0], n[0] - m[0]) > 1 or max(m[0] - n[1], n[1] - m[0]) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif len(n) == 1 and len(m) == 2:\\n\\tif max(n[0] - m[0], m[0] - n[0]) > 1 or max(n[0] - m[1], -n[0] + m[1]) > 1:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif m[0] - n[0] > 1 or n[0] - m[0] > 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(a, a1, b, b1) = (s.count('AB'), s.count('BA'), s.count('ABA'), s.count('BAB'))\\nif a > 0 and a1 > 0 and (a + a1 - (b + b1) >= 2):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ns = s.replace('C', 'Z')\\ns = s.replace('D', 'Z')\\ns2 = s\\ns = s.replace('AB', 'C', 1)\\ns = s.replace('BA', 'D', 1)\\ns2 = s2.replace('BA', 'C', 1)\\ns2 = s2.replace('AB', 'D', 1)\\nans = s.find('C') != -1 and s.find('D') != -1 or (s2.find('C') != -1 and s2.find('D') != -1)\\nprint('YES' * ans + 'NO' * (1 - ans))\\n\", \"string = input()\\nstring1 = string[:]\\n\\ndef unsc(string):\\n\\tab = string.find('AB')\\n\\tif ab == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tstring = string.replace('AB', ',', 1)\\n\\t\\tba = string.find('BA')\\n\\t\\tif ba == -1:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\treturn True\\n\\ndef unsc1(string1):\\n\\tba = string1.find('BA')\\n\\tif ba == -1:\\n\\t\\treturn False\\n\\telse:\\n\\t\\tstring1 = string1.replace('BA', ',', 1)\\n\\t\\tab = string1.find('AB')\\n\\t\\tif ab == -1:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\treturn True\\nif unsc(string) == False and unsc1(string1) == False:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nans = False\\na = s.find('AB')\\nif a != -1:\\n\\tif s[a + 2:].find('BA') != -1:\\n\\t\\tans = True\\nif not ans:\\n\\ta = s.find('BA')\\n\\tif a != -1:\\n\\t\\tif s[a + 2:].find('AB') != -1:\\n\\t\\t\\tans = True\\nprint('YES' if ans else 'NO')\\n\", \"s = input()\\nn = len(s)\\ni = 0\\nf1 = 0\\nf2 = 0\\nwhile i < n - 1:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\ti += 2\\n\\t\\tbreak\\n\\ti += 1\\nwhile i < n - 1:\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tf1 = 1\\n\\t\\tbreak\\n\\ti += 1\\ni = 0\\nwhile i < n - 1:\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\ti += 2\\n\\t\\tbreak\\n\\ti += 1\\nwhile i < n - 1:\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tf2 = 1\\n\\t\\tbreak\\n\\ti += 1\\nif f1 == 1 or f2 == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(cA, cB, cABA, cBAB) = (0, 0, 0, 0)\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tcA += 1\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tcB += 1\\nfor i in range(len(s) - 2):\\n\\tif s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'A'):\\n\\t\\tcABA += 1\\n\\tif s[i] == 'B' and s[i + 1] == 'A' and (s[i + 2] == 'B'):\\n\\t\\tcBAB += 1\\nif cA * cB > 2 and cA - cABA - cBAB + cB >= 0 or (cA * cB > 0 and (cA - cABA - cBAB > 0 or cB - cABA - cBAB > 0)):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nn = s.find('AB')\\nm = s.find('BA')\\nj = s.find('ABA')\\nk = s.find('BAB')\\nif m >= 0 or n >= 0 or j >= 0 or (k >= 0):\\n\\tif j >= 0 or k >= 0:\\n\\t\\tif 'ABA' in s[0:j + 3] and ('AB' in s[j + 3:] or 'BA' in s[j + 3:]) or ('BAB' in s[0:k + 3] and ('AB' in s[k + 3:] or 'BA' in s[k + 3:])):\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif m > n:\\n\\t\\tif 'AB' in s[0:n + 2] and 'BA' in s[n + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\\telif n > m:\\n\\t\\tif 'BA' in s[0:m + 2] and 'AB' in s[m + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\n(c, ct) = (0, 0)\\nst = s\\nk = s.find('AB')\\nif k >= 0:\\n\\ts = s[:k] + 'XX' + s[k + 2:]\\n\\tct = 1\\nk = s.find('BA')\\nif k >= 0:\\n\\ts = s[:k] + 'XX' + s[k + 2:]\\n\\tc = 1\\n(p, pt) = (0, 0)\\nk = st.find('BA')\\nif k >= 0:\\n\\tst = st[:k] + 'XX' + st[k + 2:]\\n\\tpt = 1\\nk = st.find('AB')\\nif k >= 0:\\n\\tst = st[:k] + 'XX' + st[k + 2:]\\n\\tp = 1\\nif ct == 1 and c == 1 or (pt == 1 and p == 1):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nfor i in range(len(s)):\\n\\tif i + 1 < len(s) and s[i:i + 2] == 'AB':\\n\\t\\tfor j in range(i + 2, len(s), 1):\\n\\t\\t\\tif s[j:j + 2] == 'BA':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\tbreak\\nfor i in range(len(s)):\\n\\tif i + 1 < len(s) and s[i:i + 2] == 'BA':\\n\\t\\tfor j in range(i + 2, len(s), 1):\\n\\t\\t\\tif s[j:j + 2] == 'AB':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\t\\tbreak\\nprint('NO')\\n\", \"def ham(a, b):\\n\\tif a[1] == b[0] or b[1] == a[0]:\\n\\t\\treturn 0\\n\\treturn 1\\na = input()\\nab = []\\nba = []\\nfor i in range(len(a) - 1):\\n\\tif a[i:i + 2] == 'AB':\\n\\t\\tab.append([i, i + 1])\\n\\tif a[i:i + 2] == 'BA':\\n\\t\\tba.append([i, i + 1])\\ns = 0\\nfor i in range(len(ab)):\\n\\tfor l in range(len(ba)):\\n\\t\\tif ham(ab[i], ba[l]):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\ts = 1\\n\\t\\t\\tbreak\\n\\tif s == 1:\\n\\t\\tbreak\\nif s == 0:\\n\\tprint('NO')\\n\", \"s = input()\\nflag = 0\\nif s.find('AB') >= 0:\\n\\ttemp = s.find('AB')\\n\\tif s.find('BA', temp + 2) >= 0:\\n\\t\\tflag = 1\\nif s.find('BA') >= 0:\\n\\ttemp = s.find('BA')\\n\\tif s.find('AB', temp + 2) >= 0:\\n\\t\\tflag = 1\\nif flag == 1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\ntry:\\n\\tindAB = s.index('AB')\\nexcept:\\n\\tindAB = len(s)\\ntry:\\n\\tindBA = s.index('BA')\\nexcept:\\n\\tindBA = len(s)\\nif 'BA' in s[indAB + 2:] or 'AB' in s[indBA + 2:]:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"import sys\\nr = input()\\ns = r[:]\\nf = 0\\na = 'AB'\\nb = 'BA'\\nif s.find(a) != -1:\\n\\tj = s.find(a)\\n\\tt = s[j + 2:]\\n\\tif t.find(b) != -1:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nif s.find(b) != -1:\\n\\tj = s.find(b)\\n\\tt = s[j + 2:]\\n\\tif t.find(a) != -1:\\n\\t\\tprint('YES')\\n\\t\\tsys.exit()\\nprint('NO')\\n\", \"s = input()\\na = -1\\na1 = -1\\nb = -1\\nb1 = -1\\nfor i in range(len(s) - 1):\\n\\ts1 = s[i:i + 2]\\n\\tif s1 == 'AB':\\n\\t\\tif a == -1:\\n\\t\\t\\ta = i\\n\\t\\ta1 = i\\n\\telif s1 == 'BA':\\n\\t\\tif b == -1:\\n\\t\\t\\tb = i\\n\\t\\tb1 = i\\nif a == -1 or b == -1 or (abs(b1 - a) == 1 and abs(a1 - b) == 1):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\n(abH, abT) = (s.find('AB'), s.rfind('AB'))\\n(baH, baT) = (s.find('BA'), s.rfind('BA'))\\nflag = abH >= 0 and baT >= 0 and (baT - abH > 1) or (abT >= 0 and baH >= 0 and (abT - baH > 1))\\nprint('YES' if flag else 'NO')\\n\", \"s = input()\\nans = False\\nres = False\\nn = len(s)\\ni = 0\\nwhile i < n - 1:\\n\\tif s[i] == 'A':\\n\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\tans = True\\n\\tif ans:\\n\\t\\ti += 2\\n\\t\\twhile i < n - 1:\\n\\t\\t\\tif s[i] == 'B':\\n\\t\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\t\\tres = True\\n\\t\\t\\ti += 1\\n\\tif res:\\n\\t\\tbreak\\n\\ti += 1\\nif res:\\n\\tprint('YES')\\nelse:\\n\\tans = False\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tif s[i] == 'B':\\n\\t\\t\\tif s[i + 1] == 'A':\\n\\t\\t\\t\\tans = True\\n\\t\\tif ans:\\n\\t\\t\\ti += 2\\n\\t\\t\\twhile i < n - 1:\\n\\t\\t\\t\\tif s[i] == 'A':\\n\\t\\t\\t\\t\\tif s[i + 1] == 'B':\\n\\t\\t\\t\\t\\t\\tres = True\\n\\t\\t\\t\\ti += 1\\n\\t\\tif res:\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif res:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = input()\\na = s.count('AB')\\nb = s.count('BA')\\nif a * b == 0:\\n\\tprint('NO')\\nelif a > 2 or b > 2:\\n\\tprint('YES')\\nelif a == 2 and b == 2:\\n\\tprint('YES')\\nelif a == 2 and b == 1:\\n\\tif s.count('ABAB') == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif a == 1 and b == 2:\\n\\tif s.count('BABA') == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif a == 1 and b == 1:\\n\\tif s.count('ABA') == 0 and s.count('BAB') == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"s = ''\\n\\ndef hasCombination(s):\\n\\tpos_first_AB = s.find('AB')\\n\\tpos_first_BA = s.find('BA')\\n\\tif pos_first_AB == -1 or pos_first_BA == -1:\\n\\t\\treturn False\\n\\tpos_last_AB = s.rfind('AB')\\n\\tpos_last_BA = s.rfind('BA')\\n\\treturn abs(pos_first_AB - pos_first_BA) > 1 or abs(pos_first_AB - pos_last_BA) > 1 or abs(pos_last_AB - pos_first_BA) > 1\\ns = input()\\nif hasCombination(s):\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def check(string):\\n\\tif 'AB' in string and 'BA' in string.replace('AB', 'X', 1):\\n\\t\\treturn 'YES'\\n\\tif 'BA' in string and 'AB' in string.replace('BA', 'X', 1):\\n\\t\\treturn 'YES'\\n\\treturn 'NO'\\nprint(check(input()))\\n\", \"import sys\\ninput = sys.stdin.readline\\ns = input()\\nab = False\\nba = False\\nfor i in range(len(s) - 1):\\n\\tcur = s[i] + s[i + 1]\\n\\tif cur == 'AB' and ab is False:\\n\\t\\tab = True\\n\\t\\tfor j in range(i + 2, len(s) - 1):\\n\\t\\t\\tif s[j] + s[j + 1] == 'BA':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\n\\telif cur == 'BA' and ba is False:\\n\\t\\tba = True\\n\\t\\tfor j in range(i + 2, len(s) - 1):\\n\\t\\t\\tif s[j] + s[j + 1] == 'AB':\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit()\\nprint('NO')\\n\", \"s = input()\\n(a1, a2) = (s.find('AB'), s.rfind('AB'))\\n(b1, b2) = (s.find('BA'), s.rfind('BA'))\\nif abs(a1 - b1) < 2 and abs(a1 - b2) < 2 and (abs(a2 - b1) < 2) or min(a1, b1) == -1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nd = 'AB'\\nif not 'AB' in s or not 'BA' in s:\\n\\tprint('NO')\\nelse:\\n\\tg = s[s.index(d) + 2:]\\n\\td = d[1] + d[0]\\n\\tif d in g:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tg = s[s.index(d) + 2:]\\n\\t\\td = d[1] + d[0]\\n\\t\\tif d in g:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"s = input()\\nfirst_AB_index = -1\\nfirst_BA_index = -1\\nlast_AB_index = -1\\nlast_BA_index = -1\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tfirst_AB_index = i\\n\\t\\tbreak\\nfor i in range(len(s) - 1):\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tfirst_BA_index = i\\n\\t\\tbreak\\nfor i in range(len(s) - 1, -1, -1):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tlast_AB_index = i\\n\\t\\tbreak\\nfor i in range(len(s) - 1, -1, -1):\\n\\tif s[i:i + 2] == 'BA':\\n\\t\\tlast_BA_index = i\\n\\t\\tbreak\\nif first_AB_index == -1 or first_BA_index == -1:\\n\\tprint('NO')\\nelif first_AB_index + 2 <= last_BA_index or first_BA_index + 2 <= last_AB_index:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nresult = False\\nab = s.find('AB')\\nba = -1\\nif ab != -1:\\n\\tba = s.find('BA', ab + 2)\\n\\tif ba != -1:\\n\\t\\tresult = True\\nif not result:\\n\\tba = s.find('BA')\\n\\tif ba != -1:\\n\\t\\tab = s.find('AB', ba + 2)\\n\\t\\tif ab != -1:\\n\\t\\t\\tresult = True\\nif result:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"def find_str(a):\\n\\ttemp = a\\n\\tcount = a.count('AB')\\n\\ta = a.replace('AB', ' ', 1)\\n\\tcount *= a.count('BA')\\n\\tif count:\\n\\t\\treturn 'YES' if count else 'NO'\\n\\telse:\\n\\t\\tcount = temp.count('BA')\\n\\t\\ttemp = temp.replace('BA', ' ', 1)\\n\\t\\tcount *= temp.count('AB')\\n\\t\\treturn 'YES' if count else 'NO'\\na = input()\\nprint(find_str(a))\\n\", \"def nonoverlapping(mystr):\\n\\tif mystr is None:\\n\\t\\treturn 'NO'\\n\\t(x1, x2) = (0, 0)\\n\\tx1 = mystr.find('AB')\\n\\tx2 = mystr.find('BA', x1 + 2)\\n\\ty1 = mystr.find('BA')\\n\\ty2 = mystr.find('AB', y1 + 2)\\n\\tif x1 != -1 and x2 != -1 or (y1 != -1 and y2 != -1):\\n\\t\\treturn 'YES'\\n\\telse:\\n\\t\\treturn 'NO'\\nmy = str(input().strip())\\nprint(nonoverlapping(my))\\n\", \"s = input()\\ni = 0\\nflag = 0\\nwhile i < len(s):\\n\\tif s[i:i + 2] == 'AB':\\n\\t\\tif 'BA' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\telif s[i:i + 2] == 'BA':\\n\\t\\tif 'AB' in s[i + 2:]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tflag = 1\\n\\t\\t\\tbreak\\n\\ti += 1\\nif flag == 0:\\n\\tprint('NO')\\n\", \"s = str(input())\\na = []\\nb = []\\nfor _ in range(len(s) - 1):\\n\\tif s[_:_ + 2] == 'AB':\\n\\t\\ta.append(_)\\n\\telif s[_:_ + 2] == 'BA':\\n\\t\\tb.append(_)\\nif len(a) == 0 or len(b) == 0 or (abs(a[0] - b[-1]) < 2 and abs(b[0] - a[-1]) < 2):\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\", \"s = input()\\nl = [s[i:i + 2] for i in range(len(s) - 1)]\\nAB = [i for (i, x) in enumerate(l) if x == 'AB']\\nBA = [i for (i, x) in enumerate(l) if x == 'BA']\\nflag = 1\\nif len(AB) != 0 and len(BA) != 0:\\n\\tfor i in AB:\\n\\t\\tfor j in BA:\\n\\t\\t\\ta = abs(i - j)\\n\\t\\t\\tif a <= 1:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag = 0\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 0:\\n\\t\\t\\tbreak\\nif flag == 0:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab = []\\nba = []\\nfor i in range(len(s) - 1):\\n\\tif s[i] == 'A' and s[i + 1] == 'B':\\n\\t\\tab.append(i)\\n\\tif s[i] == 'B' and s[i + 1] == 'A':\\n\\t\\tba.append(i)\\n\\tif len(ab) > 0 and len(ba) > 0 and (abs(ab[0] - ba[-1]) > 1 or abs(ab[-1] - ba[0]) > 1):\\n\\t\\tprint('YES')\\n\\t\\texit()\\nprint('NO')\\n\", \"import copy\\nsi = list(input())\\ns = copy.deepcopy(si)\\nc1 = 0\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == ['A', 'B']:\\n\\t\\ts[i] = '.'\\n\\t\\ts[i + 1] = '.'\\n\\t\\tc1 = 1\\n\\t\\tbreak\\n\\ti += 1\\nc2 = 0\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == ['B', 'A']:\\n\\t\\ts[i] = '.'\\n\\t\\ts[i + 1] = '.'\\n\\t\\tc2 = 1\\n\\t\\tbreak\\n\\ti += 1\\nif c1 and c2:\\n\\tc3 = 1\\nelse:\\n\\tc3 = 0\\ns = copy.deepcopy(si)\\nc2 = 0\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == ['B', 'A']:\\n\\t\\ts[i] = '.'\\n\\t\\ts[i + 1] = '.'\\n\\t\\tc2 = 1\\n\\t\\tbreak\\n\\ti += 1\\nc1 = 0\\ni = 0\\nwhile i < len(s) - 1:\\n\\tif s[i:i + 2] == ['A', 'B']:\\n\\t\\ts[i] = '.'\\n\\t\\ts[i + 1] = '.'\\n\\t\\tc1 = 1\\n\\t\\tbreak\\n\\ti += 1\\nif c1 and c2 or c3:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nab = 0\\npre = -2\\nwhile ab != -1:\\n\\tab = s.find('AB', pre + 2, len(s))\\n\\tpre = ab\\n\\tif ab == -1:\\n\\t\\tpass\\n\\telse:\\n\\t\\tba = s.find('BA', 0, ab)\\n\\t\\tif ba == -1:\\n\\t\\t\\tba = s.find('BA', ab + 2, len(s))\\n\\t\\t\\tif ba == -1:\\n\\t\\t\\t\\tpass\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\texit(0)\\n\\t\\telse:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\texit(0)\\nprint('NO')\\n\", \"a = input()\\nf = False\\nq = False\\np = -2\\nfor i in range(len(a)):\\n\\tif i < len(a) - 1 and (not f) and (a[i] == 'A') and (a[i + 1] == 'B'):\\n\\t\\tf = True\\n\\t\\tp = i\\n\\telif i < len(a) - 1 and f and (a[i] == 'B') and (a[i + 1] == 'A') and (p != i - 1):\\n\\t\\tq = True\\nf1 = False\\nq1 = False\\np1 = -2\\nfor i in range(len(a)):\\n\\tif i < len(a) - 1 and (not f1) and (a[i] == 'B') and (a[i + 1] == 'A'):\\n\\t\\tf1 = True\\n\\t\\tp1 = i\\n\\telif i < len(a) - 1 and f1 and (a[i] == 'A') and (a[i + 1] == 'B') and (p1 != i - 1):\\n\\t\\tq1 = True\\nif q or q1:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"s = input()\\nda = {}\\ndb = {}\\nfor i in range(len(s) - 1):\\n\\tif s[i] + s[i + 1] == 'AB':\\n\\t\\tda[i] = 1\\n\\tif s[i] + s[i + 1] == 'BA':\\n\\t\\tdb[i] = 1\\nif len(da) == len(db) == 1:\\n\\tfor x in da:\\n\\t\\tfor y in db:\\n\\t\\t\\tif abs(x - y) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint('NO')\\nelif len(da) == 0 or len(db) == 0:\\n\\tprint('NO')\\nelif len(da) == 1 and len(db) == 2:\\n\\tfor x in da:\\n\\t\\tfor y in db:\\n\\t\\t\\tif abs(x - y) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelif len(da) == 2 and len(db) == 1:\\n\\tfor x in db:\\n\\t\\tfor y in da:\\n\\t\\t\\tif abs(x - y) > 1:\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"ABA\\n\", \"BACFAB\\n\", \"AXBYBXA\\n\", \"ABABAB\\n\", \"BBBBBBBBBB\\n\", \"ABBA\\n\", \"ABAXXXAB\\n\", \"TESTABAXXABTEST\\n\", \"A\\n\", \"B\\n\", \"X\\n\", \"BA\\n\", \"AB\\n\", \"AA\\n\", \"BB\\n\", \"BAB\\n\", \"AAB\\n\", \"BAA\\n\", \"ABB\\n\", \"BBA\\n\", \"AAA\\n\", \"BBB\\n\", \"AXBXBXA\\n\", \"SKDSKDJABSDBADKFJDK\\n\", \"ABAXXBBXXAA\\n\", \"ABAB\\n\", \"BABA\\n\", \"AAAB\\n\", \"AAAA\\n\", \"AABA\\n\", \"ABAA\\n\", \"BAAA\\n\", \"AABB\\n\", \"BAAB\\n\", \"BBAA\\n\", \"BBBA\\n\", \"BBAB\\n\", \"BABB\\n\", \"ABBB\\n\", \"BBBB\\n\", \"BABAB\\n\", \"ABABA\\n\", \"AAABAAACBBBC\\n\", \"AABBBACBBBBBBAACBCCACBBAABBBBBCAACABAACABCACCBCBCCCBCBCABCBBCCBCBBAACBACAABACBBCACCBCCACCABBCBABBAAC\\n\", \"CBBABDDBBADAC\\n\", \"ABYFAB\\n\", \"BABXXAB\\n\", \"ABAXAB\\n\", \"ABABXAB\\n\", \"ABXABXABXABXABXBAXBAXBAXBA\\n\", \"QQQQQQQQQABABQQQQQQQQ\\n\", \"BAAA\\n\", \"BAA\\n\", \"ABABA\\n\", \"BABAB\\n\", \"AABBBACBBBBBBAACBCCACBBAABBBBBCAACABAACABCACCBCBCCCBCBCABCBBCCBCBBAACBACAABACBBCACCBCCACCABBCBABBAAC\\n\", \"BABXXAB\\n\", \"AAABAAACBBBC\\n\", \"BBBB\\n\", \"ABYFAB\\n\", \"BAAB\\n\", \"BBB\\n\", \"BB\\n\", \"BA\\n\", \"AB\\n\", \"QQQQQQQQQABABQQQQQQQQ\\n\", \"AAA\\n\", \"ABAA\\n\", \"ABAB\\n\", \"AA\\n\", \"AAB\\n\", \"CBBABDDBBADAC\\n\", \"BABB\\n\", \"A\\n\", \"AABA\\n\", \"BBBBBBBBBB\\n\", \"ABAXXXAB\\n\", \"BAB\\n\", \"AABB\\n\", \"AAAB\\n\", \"TESTABAXXABTEST\\n\", \"BABA\\n\", \"BBBA\\n\", \"X\\n\", \"ABBB\\n\", \"B\\n\", \"AAAA\\n\", \"ABAXXBBXXAA\\n\", \"SKDSKDJABSDBADKFJDK\\n\", \"ABAXAB\\n\", \"ABABAB\\n\", \"ABXABXABXABXABXBAXBAXBAXBA\\n\", \"AXBXBXA\\n\", \"ABB\\n\", \"BBAA\\n\", \"BBAB\\n\", \"BBA\\n\", \"ABABXAB\\n\", \"ABBA\\n\", \"CAAA\\n\", \"CAABBABCBBACCACCBCCACBBCABAACABCAABBCBCCBBCBACBCBCCCBCBCCACBACAABACAACBBBBBAABBCACCBCAABBBBBBCABBBAA\\n\", \"CAB\\n\", \"ABAAA\\n\", \"BAXXBAB\\n\", \"AAABAABCBBBC\\n\", \"AA@B\\n\", \"ABYGAB\\n\", \"AACB\\n\", \"@BA\\n\", \"AC\\n\", \"CA\\n\", \"@B\\n\", \"A@A\\n\", \"@BAA\\n\", \"CAAB\\n\", \"CB\\n\", \"@AB\\n\", \"CADABBDDBABBC\\n\", \"BAB@\\n\", \"@\\n\", \"A@BA\\n\", \"ABBBBBBBBB\\n\", \"ABAXYXAB\\n\", \"BB@\\n\", \"BBBC\\n\", \"BAA@\\n\", \"TSETBAXXABATSET\\n\", \"B@AA\\n\", \"BCBA\\n\", \"W\\n\", \"BABC\\n\", \"C\\n\", \"@AAA\\n\", \"AAXXBBXXABA\\n\", \"KDJFKDABDSBAJDKSDKS\\n\", \"ABABAC\\n\", \"ABXABXABXABXBAXBAXBAXBAXBA\\n\", \"BXBXBXA\\n\", \"AAC\\n\", \"@ABB\\n\", \"BA@B\\n\", \"CAA\\n\", \"BAXBABA\\n\", \"AB@A\\n\", \"ACA\\n\", \"AXBXBX@\\n\", \"BAFCAB\\n\", \"BAAC\\n\", \"CBA\\n\", \"ABAAB\\n\", \"CAACBABCBBACCACCBCCACBBCABAACABCAABBCBCCBBCBACBCBCCCBCBCCACBACAABACAACBBBBBAABBCACCBCAABBBBBBCABBBAA\\n\", \"BAWXBAB\\n\", \"CBBBCBAABAAA\\n\", \"AAB@\\n\", \"ABYGBB\\n\", \"BCAA\\n\", \"AB@\\n\", \"BC\\n\", \"CC\\n\", \"B@\\n\", \"@@A\\n\", \"@BBA\\n\", \"CAAC\\n\", \"DC\\n\", \"BA@\\n\", \"C@DABBDDBABBC\\n\", \"BAB?\\n\", \"?\\n\", \"B@BA\\n\", \"ABBBBBBBCB\\n\", \"BAXYXABA\\n\", \"@BB\\n\", \"BBCB\\n\", \"BAA?\\n\", \"TSETBAXXBAATSET\\n\", \"A@AA\\n\", \"BBCA\\n\", \"V\\n\", \"BACC\\n\", \">\\n\", \"@ABA\\n\", \"AAXXCBXXABA\\n\", \"RKDSKDJABSDBADKFJDK\\n\", \"CABABA\\n\", \"AAXABXABXABXBAXBAXBAXBAXBA\\n\", \"BXBXBXB\\n\", \"A@@\\n\", \"?ABB\\n\", \"B@AB\\n\", \"A@C\\n\", \"AB@B\\n\", \"BCA\\n\", \"ABA\\n\", \"AXBYBXA\\n\", \"BACFAB\\n\"], \"outputs\": [\"NO\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['greedy', 'implementation', 'strings', 'dp', 'brute force']",
    "name": null,
    "source": "codeforces",
    "tags": "['String algorithms', 'Implementation', 'Greedy algorithms', 'Complete search', 'Dynamic programming']",
    "skill_types": "['Dynamic programming', 'Complete search', 'Greedy algorithms']",
    "url": "https://codeforces.com/problemset/problem/550/A",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": "2019-12-31",
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Today Pari and Arya are playing a game called Remainders.\n\nPari chooses two positive integer x and k, and tells Arya k but not x. Arya have to find the value <image>. There are n ancient numbers c1, c2, ..., cn and Pari has to tell Arya <image> if Arya wants. Given k and the ancient values, tell us if Arya has a winning strategy independent of value of x or not. Formally, is it true that Arya can understand the value <image> for any positive integer x?\n\nNote, that <image> means the remainder of x after dividing it by y.\n\nInput\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 1 000 000) — the number of ancient integers and value k that is chosen by Pari.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1 000 000).\n\nOutput\n\nPrint \"Yes\" (without quotes) if Arya has a winning strategy independent of value of x, or \"No\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n4 5\n2 3 5 12\n\n\nOutput\n\nYes\n\n\nInput\n\n2 7\n2 3\n\n\nOutput\n\nNo\n\nNote\n\nIn the first sample, Arya can understand <image> because 5 is one of the ancient numbers.\n\nIn the second sample, Arya can't be sure what <image> is. For example 1 and 7 have the same remainders after dividing by 2 and 3, but they differ in remainders after dividing by 7.",
    "solutions": "[\"from math import *\\n(n, k) = map(int, input().split())\\narr = list(map(int, input().split()))\\nflag = 0\\nif k == 1:\\n\\tprint('Yes')\\nelse:\\n\\tarr1 = []\\n\\ttemp = k\\n\\tfor i in range(2, k + 1):\\n\\t\\tif temp % i == 0:\\n\\t\\t\\tcnt = 0\\n\\t\\t\\twhile temp % i == 0:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\t\\ttemp = temp // i\\n\\t\\t\\tarr1.append(i ** cnt)\\n\\tmainflag = 0\\n\\tfor j in arr1:\\n\\t\\tflag = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif arr[i] % j == 0:\\n\\t\\t\\t\\tflag = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag == 0:\\n\\t\\t\\tmainflag = 1\\n\\t\\t\\tbreak\\n\\tif mainflag == 1:\\n\\t\\tprint('No')\\n\\telse:\\n\\t\\tprint('Yes')\\n\", \"import math\\na = input().split(' ')\\nn = int(a[0])\\nk = int(a[1])\\nt = True\\n\\ndef gcd(a, b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn gcd(b, a % b)\\nC = set(map(int, input().split()))\\nComposite = False\\na = math.floor(math.sqrt(k + 1))\\nif k % 2 == 0:\\n\\tComposite = True\\nelse:\\n\\tfor i in range(3, a + 1, 2):\\n\\t\\tif k % i == 0:\\n\\t\\t\\tComposite = True\\n\\t\\t\\tbreak\\nif not Composite:\\n\\tif k > max(C):\\n\\t\\tprint('NO')\\n\\telse:\\n\\t\\tA = set()\\n\\t\\tz = True\\n\\t\\tfor i in C:\\n\\t\\t\\tif i in A:\\n\\t\\t\\t\\tpass\\n\\t\\t\\tif i % k == 0:\\n\\t\\t\\t\\tz = False\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tA.add(i)\\n\\t\\tif z:\\n\\t\\t\\tprint('NO')\\nelse:\\n\\tA = set()\\n\\tm = 1\\n\\tfor i in C:\\n\\t\\tif i in A:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tA.add(i)\\n\\t\\t\\tm *= i / gcd(m, i)\\n\\t\\t\\tm %= k\\n\\t\\t\\tif m == 0:\\n\\t\\t\\t\\tt = False\\n\\t\\t\\t\\tprint('YES')\\n\\t\\t\\t\\tbreak\\n\\tif t:\\n\\t\\tprint('NO')\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"10 4\\n2 2 2 2 2 2 2 2 2 2\\n\", \"1 125\\n5\\n\", \"8 32\\n2 2 2 2 2 2 2 2\\n\", \"1 8\\n2\\n\", \"12 100\\n1766 1766 1766 1766 1766 1766 1766 1766 1766 1766 1766 1766\\n\", \"2 16\\n8 8\\n\", \"1 1\\n1\\n\", \"2 16\\n8 4\\n\", \"91 4900\\n630 630 70 630 910 630 630 630 770 70 770 630 630 770 70 630 70 630 70 630 70 630 630 70 910 630 630 630 770 630 630 630 70 910 70 630 70 630 770 630 630 70 630 770 70 630 70 70 630 630 70 70 70 70 630 70 70 770 910 630 70 630 770 70 910 70 630 910 630 70 770 70 70 630 770 630 70 630 70 70 630 70 630 770 630 70 630 630 70 910 630\\n\", \"3 8\\n2 4 11\\n\", \"1 4\\n2\\n\", \"2 988027\\n989018 995006\\n\", \"15 91\\n49 121 83 67 128 125 27 113 41 169 149 19 37 29 71\\n\", \"2 30\\n6 10\\n\", \"2 36\\n12 18\\n\", \"14 87\\n1619 1619 1619 1619 1619 1619 1619 1619 1619 1619 1619 1619 1619 1619\\n\", \"2 8\\n2 4\\n\", \"2 25\\n5 5\\n\", \"4 4\\n2 3 6 5\\n\", \"2 27000\\n5400 4500\\n\", \"3 12\\n2 3 6\\n\", \"2 16\\n4 4\\n\", \"1 5\\n1\\n\", \"4 4\\n2 2 2 2\\n\", \"1 1\\n559872\\n\", \"2 1000\\n500 2\\n\", \"2 24\\n6 4\\n\", \"61 531012\\n698043 698043 698043 963349 698043 698043 698043 963349 698043 698043 698043 963349 698043 698043 698043 698043 966694 698043 698043 698043 698043 698043 698043 636247 698043 963349 698043 698043 698043 698043 697838 698043 963349 698043 698043 966694 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 963349 698043 698043 698043 698043 963349 698043\\n\", \"1 1\\n5\\n\", \"1 2\\n6\\n\", \"1 32\\n2\\n\", \"1 6\\n6\\n\", \"2 16\\n4 8\\n\", \"1 1\\n3\\n\", \"4 16\\n19 16 13 9\\n\", \"2 32\\n4 8\\n\", \"3 4\\n1 2 2\\n\", \"5 2\\n2 2 2 2 2\\n\", \"1 49\\n7\\n\", \"3 12\\n2 2 3\\n\", \"40 10\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\", \"3 4\\n2 2 3\\n\", \"1 8\\n4\\n\", \"3 24\\n2 4 3\\n\", \"2 4\\n2 6\\n\", \"1 100003\\n2\\n\", \"93 181476\\n426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426\\n\", \"1 2\\n12\\n\", \"2 9\\n3 3\\n\", \"88 935089\\n967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967\\n\", \"3 16\\n2 4 8\\n\", \"1 216000\\n648000\\n\", \"2 24\\n4 6\\n\", \"2 8\\n4 12\\n\", \"3 8\\n1 2 4\\n\", \"2 3779\\n1 2\\n\", \"3 24\\n2 2 3\\n\", \"5 10\\n5 16 19 9 17\\n\", \"4 8\\n2 2 2 2\\n\", \"1 994619\\n216000\\n\", \"1 999983\\n2\\n\", \"3 32\\n2 4 8\\n\", \"10 255255\\n1000000 700000 300000 110000 130000 170000 190000 230000 290000 310000\\n\", \"2 4\\n2 2\\n\", \"3 8\\n4 4 4\\n\", \"11 95\\n31 49 8 139 169 121 71 17 43 29 125\\n\", \"2 216\\n12 18\\n\", \"1 651040\\n911250\\n\", \"13 86\\n41 64 17 31 13 97 19 25 81 47 61 37 71\\n\", \"1 20998\\n2\\n\", \"2 8\\n4 4\\n\", \"2 20998\\n2 10499\\n\", \"1 2\\n1\\n\", \"2 1000000\\n1000000 1000000\\n\", \"7 510510\\n524288 531441 390625 823543 161051 371293 83521\\n\", \"3 8\\n2 2 2\\n\", \"3 4\\n2 2 2\\n\", \"1 666013\\n1\\n\", \"2 36\\n18 12\\n\", \"2 8\\n4 2\\n\", \"3 9\\n3 3 3\\n\", \"1 620622\\n60060\\n\", \"2 3\\n9 4\\n\", \"1 999983\\n1\\n\", \"1 6\\n8\\n\", \"4 16\\n2 2 2 2\\n\", \"10 1024\\n1 2 4 8 16 32 64 128 256 512\\n\", \"3 20\\n2 2 5\\n\", \"2 600000\\n200000 300000\\n\", \"17 71\\n173 43 139 73 169 199 49 81 11 89 131 107 23 29 125 152 17\\n\", \"1 90\\n5\\n\", \"15 91\\n49 121 83 67 128 125 27 113 41 169 149 19 37 18 71\\n\", \"8 32\\n2 2 2 2 2 1 2 2\\n\", \"1 12\\n2\\n\", \"12 100\\n1766 1766 1766 1766 1766 1766 1766 1766 1766 1766 3164 1766\\n\", \"2 16\\n1 8\\n\", \"2 16\\n8 5\\n\", \"91 4900\\n630 630 70 630 910 630 630 630 770 70 770 630 630 770 70 630 70 630 70 630 70 630 630 70 910 630 630 630 770 630 630 630 70 910 70 630 70 630 770 630 630 70 630 770 70 630 70 70 630 630 70 70 70 70 630 70 70 770 910 630 70 502 770 70 910 70 630 910 630 70 770 70 70 630 770 630 70 630 70 70 630 70 630 770 630 70 630 630 70 910 630\\n\", \"3 8\\n2 4 5\\n\", \"1 4\\n3\\n\", \"2 30\\n6 17\\n\", \"14 87\\n1619 1619 1619 1619 1619 1673 1619 1619 1619 1619 1619 1619 1619 1619\\n\", \"2 25\\n5 7\\n\", \"2 49994\\n5400 4500\\n\", \"2 12\\n4 4\\n\", \"1 5\\n2\\n\", \"1 1\\n448387\\n\", \"2 1000\\n500 4\\n\", \"61 531012\\n698043 698043 698043 963349 698043 698043 698043 963349 698043 698043 698043 963349 698043 698043 698043 698043 966694 698043 698043 698043 698043 698043 698043 636247 698043 963349 698043 698043 698043 698043 697838 698043 989253 698043 698043 966694 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 698043 963349 698043 698043 698043 698043 963349 698043\\n\", \"1 1\\n7\\n\", \"1 1\\n6\\n\", \"1 2\\n2\\n\", \"1 7\\n6\\n\", \"1 2\\n3\\n\", \"4 25\\n19 16 13 9\\n\", \"2 5\\n4 8\\n\", \"5 2\\n2 2 1 2 2\\n\", \"1 85\\n7\\n\", \"3 12\\n2 4 3\\n\", \"40 10\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2\\n\", \"3 2\\n2 2 3\\n\", \"1 180788\\n2\\n\", \"93 181476\\n274 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426\\n\", \"2 9\\n1 3\\n\", \"88 935089\\n967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 1711 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967\\n\", \"1 109532\\n648000\\n\", \"2 24\\n4 4\\n\", \"5 10\\n5 16 29 9 17\\n\", \"4 8\\n2 2 2 1\\n\", \"1 994619\\n270976\\n\", \"2 4\\n2 1\\n\", \"3 8\\n3 4 4\\n\", \"11 95\\n31 49 8 139 169 121 71 17 43 7 125\\n\", \"2 216\\n12 30\\n\", \"13 86\\n41 64 17 31 13 97 19 25 81 47 61 37 97\\n\", \"1 12426\\n2\\n\", \"2 23607\\n2 10499\\n\", \"1 4\\n1\\n\", \"7 510510\\n524288 531441 390625 823543 161051 216439 83521\\n\", \"3 8\\n2 2 4\\n\", \"3 2\\n2 2 2\\n\", \"1 666013\\n2\\n\", \"2 36\\n1 12\\n\", \"3 9\\n3 3 6\\n\", \"1 719995\\n60060\\n\", \"2 1\\n9 4\\n\", \"1 7\\n8\\n\", \"4 16\\n2 3 2 2\\n\", \"10 1024\\n2 2 4 8 16 32 64 128 256 512\\n\", \"17 71\\n173 43 139 73 169 199 49 81 11 89 131 107 23 29 125 152 16\\n\", \"4 5\\n1 3 5 12\\n\", \"1 158\\n5\\n\", \"8 32\\n2 2 2 2 2 1 2 3\\n\", \"1 5\\n3\\n\", \"12 100\\n1766 1766 1766 1766 1766 1766 1766 1766 1515 1766 3164 1766\\n\", \"2 14\\n1 8\\n\", \"2 16\\n12 5\\n\", \"91 4900\\n630 630 70 630 910 630 630 630 770 70 770 630 630 770 70 630 70 630 70 630 70 630 630 70 910 630 630 630 770 630 630 630 70 910 70 630 70 630 770 630 630 70 630 770 70 630 70 70 630 630 70 70 70 70 186 70 70 770 910 630 70 502 770 70 910 70 630 910 630 70 770 70 70 630 770 630 70 630 70 70 630 70 630 770 630 70 630 630 70 910 630\\n\", \"4 5\\n2 3 5 12\\n\", \"2 7\\n2 3\\n\"], \"outputs\": [\"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"YES\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"Yes\", \"No\"]}",
    "difficulty": "MEDIUM_HARD",
    "raw_tags": "['number theory', 'math', 'chinese remainder theorem']",
    "name": null,
    "source": "codeforces",
    "tags": "['Number theory', 'Mathematics']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/688/D",
    "Expected Auxiliary Space": null,
    "time_limit": "1.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "The King of Flatland will organize a knights' tournament! The winner will get half the kingdom and the favor of the princess of legendary beauty and wisdom. The final test of the applicants' courage and strength will be a fencing tournament. The tournament is held by the following rules: the participants fight one on one, the winner (or rather, the survivor) transfers to the next round.\n\nBefore the battle both participants stand at the specified points on the Ox axis with integer coordinates. Then they make moves in turn. The first participant moves first, naturally. During a move, the first participant can transfer from the point x to any integer point of the interval [x + a; x + b]. The second participant can transfer during a move to any integer point of the interval [x - b; x - a]. That is, the options for the players' moves are symmetric (note that the numbers a and b are not required to be positive, and if a ≤ 0 ≤ b, then staying in one place is a correct move). At any time the participants can be located arbitrarily relative to each other, that is, it is allowed to \"jump\" over the enemy in any direction. A participant wins if he uses his move to transfer to the point where his opponent is.\n\nOf course, the princess has already chosen a husband and now she wants to make her sweetheart win the tournament. He has already reached the tournament finals and he is facing the last battle. The princess asks the tournament manager to arrange the tournament finalists in such a way that her sweetheart wins the tournament, considering that both players play optimally. However, the initial location of the participants has already been announced, and we can only pull some strings and determine which participant will be first and which one will be second. But how do we know which participant can secure the victory? Alas, the princess is not learned in the military affairs... Therefore, she asks you to determine how the battle will end considering that both opponents play optimally. Also, if the first player wins, your task is to determine his winning move.\n\nInput\n\nThe first line contains four space-separated integers — x1, x2, a and b (x1 ≠ x2, a ≤ b,  - 109 ≤ x1, x2, a, b ≤ 109) — coordinates of the points where the first and the second participant start, and the numbers that determine the players' moves, correspondingly.\n\nOutput\n\nOn the first line print the outcome of the battle as \"FIRST\" (without the quotes), if both players play optimally and the first player wins. Print \"SECOND\" (without the quotes) if the second player wins and print \"DRAW\" (without the quotes), if nobody is able to secure the victory.\n\nIf the first player wins, print on the next line the single integer x — the coordinate of the point where the first player should transfer to win. The indicated move should be valid, that is, it should meet the following condition: x1 + a ≤ x ≤ x1 + b. If there are several winning moves, print any of them. If the first participant can't secure the victory, then you do not have to print anything.\n\nExamples\n\nInput\n\n0 2 0 4\n\n\nOutput\n\nFIRST\n2\n\n\nInput\n\n0 2 1 1\n\n\nOutput\n\nSECOND\n\n\nInput\n\n0 2 0 1\n\n\nOutput\n\nDRAW\n\nNote\n\nIn the first sample the first player can win in one move.\n\nIn the second sample the first participant must go to point 1, where the second participant immediately goes and wins. \n\nIn the third sample changing the position isn't profitable to either participant, so nobody wins.",
    "solutions": "[\"(x1, x2, a, b) = map(int, input().split())\\nif a <= 0 <= b:\\n\\tif x1 < x2:\\n\\t\\tif x2 - x1 <= b:\\n\\t\\t\\tprint('FIRST')\\n\\t\\t\\tprint(x2)\\n\\t\\telse:\\n\\t\\t\\tprint('DRAW')\\n\\telif x1 - x2 <= -a:\\n\\t\\tprint('FIRST')\\n\\t\\tprint(x2)\\n\\telse:\\n\\t\\tprint('DRAW')\\nelse:\\n\\treverse = False\\n\\tif a < 0:\\n\\t\\t(x1, x2, a, b) = (-x1, -x2, -b, -a)\\n\\t\\treverse = True\\n\\tif x1 > x2:\\n\\t\\tprint('DRAW')\\n\\telif (x2 - x1) % (a + b) == 0:\\n\\t\\tprint('SECOND')\\n\\telif a <= (x2 - x1) % (a + b) <= b:\\n\\t\\tprint('FIRST')\\n\\t\\tprint(x1 + (x2 - x1) % (a + b) if not reverse else -(x1 + (x2 - x1) % (a + b)))\\n\\telse:\\n\\t\\tprint('DRAW')\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"637107829 -403198378 -2 -2\\n\", \"847094637 -152905363 -1000000000 -1000000000\\n\", \"2408736 -3517525 413342 557733\\n\", \"20 1 -5 -1\\n\", \"-186611 -745388 -776721 -308073\\n\", \"1234577 1234573 -3 3\\n\", \"0 10 -1 1\\n\", \"44789577 44789576 -1 0\\n\", \"0 15 5 5\\n\", \"1000000000 -1000000000 1000000000 1000000000\\n\", \"61190539 -40142693 -666666 -666666\\n\", \"402211447 260733897 -52 275\\n\", \"1 2 2 2\\n\", \"411443207 739161876 -1 0\\n\", \"-343 -119 -194 -60\\n\", \"1621 733 -732 -156\\n\", \"999763526 -998481439 -815 -157\\n\", \"-318865784 794140986 2 3\\n\", \"1000000000 999999999 -1000000000 -2\\n\", \"258358 241272 -2 -1\\n\", \"48011031 230545656 12345 67890\\n\", \"3 10 1 6\\n\", \"547686188 61562151 -496372503 -115242932\\n\", \"-1000000000 1000000000 1 1\\n\", \"-1000000000 1000000000 499999999 500000000\\n\", \"-44 -17 12 13\\n\", \"965398 678942 -6666 -666\\n\", \"45390 21963 -2047 -1023\\n\", \"0 6 2 5\\n\", \"-48549196 47782227 17235 109857\\n\", \"434676805 434676075 -878 345\\n\", \"-1000000000 1000000000 0 1000000000\\n\", \"-80 60 17 23\\n\", \"775517456 -869957101 -1 -1\\n\", \"75 37 9 33\\n\", \"2062 4167 2 2\\n\", \"-1000000000 1000000000 1 999999999\\n\", \"3 1 -2 2\\n\", \"-1000000000 1000000000 0 0\\n\", \"-1000000000 1000000000 1000000000 1000000000\\n\", \"-730305467 -514687698 2 7\\n\", \"416100128 -709112339 -190811 -190811\\n\", \"-1000000000 1000000000 1230987 9871231\\n\", \"0 100 2 31\\n\", \"-8006393 7731100 -478756 3592795\\n\", \"35406031 214492689 -307333182 -305473200\\n\", \"31 39 0 8\\n\", \"0 1 -1000000000 1000000000\\n\", \"25882413 -80674370 -999999 -9\\n\", \"183003032 -631999413 -1000002 -1\\n\", \"439 722 206 325\\n\", \"637107829 -403198378 -2 -4\\n\", \"20 1 -10 -1\\n\", \"-366005 -745388 -776721 -308073\\n\", \"-12 -119 -194 -60\\n\", \"-318865784 518890824 2 3\\n\", \"258358 217651 -2 -1\\n\", \"48011031 230545656 12345 98066\\n\", \"45390 21963 -1718 -1023\\n\", \"1 6 2 5\\n\", \"-48549196 19246077 17235 109857\\n\", \"242551924 -869957101 -1 -1\\n\", \"3 1 -4 2\\n\", \"-730305467 -352340462 2 7\\n\", \"-1000000000 1000000000 1230987 17135570\\n\", \"0 100 2 22\\n\", \"31 39 -1 8\\n\", \"25882413 -80674370 -709908 -9\\n\", \"1 2 0 4\\n\", \"-12 -189 -194 -60\\n\", \"2408736 -3517525 413342 376863\\n\", \"1234577 1234573 -1 3\\n\", \"-1 10 -1 1\\n\", \"44789577 73940668 -1 0\\n\", \"-1 15 5 5\\n\", \"1000000000 -501923428 1000000000 1000000000\\n\", \"61190539 -73719775 -666666 -666666\\n\", \"679570520 260733897 -52 275\\n\", \"1 0 2 2\\n\", \"411443207 641673265 -1 0\\n\", \"1621 733 -732 -277\\n\", \"1000000000 1093346844 -1000000000 -2\\n\", \"3 10 0 6\\n\", \"547686188 61562151 -103064586 -115242932\\n\", \"-1000000000 1000000010 1 1\\n\", \"-44 -34 12 13\\n\", \"965398 678942 -6666 -688\\n\", \"434676805 336142158 -878 345\\n\", \"-102 60 17 23\\n\", \"75 60 9 33\\n\", \"2062 1487 2 2\\n\", \"-1000000000 1000000000 1001000000 1000000000\\n\", \"416100128 -377919353 -190811 -190811\\n\", \"-8006393 7731100 -478756 1694203\\n\", \"2915377 214492689 -307333182 -305473200\\n\", \"0 1 -1666088707 1000000000\\n\", \"712 722 206 325\\n\", \"0 2 -1 1\\n\", \"2408736 -3517525 738700 376863\\n\", \"22 1 -10 -1\\n\", \"-366005 -745388 -48865 -308073\\n\", \"1234577 1234573 -1 2\\n\", \"-1 10 -1 0\\n\", \"19106552 73940668 -1 0\\n\", \"-1 15 4 5\\n\", \"1000000010 -501923428 1000000000 1000000000\\n\", \"61190539 -115960135 -666666 -666666\\n\", \"679570520 260733897 -79 275\\n\", \"2 0 2 2\\n\", \"411443207 600810321 -1 0\\n\", \"0 2 0 1\\n\", \"0 2 1 1\\n\", \"0 2 0 4\\n\"], \"outputs\": [\"DRAW\\n\", \"FIRST\\n-152905363\\n\", \"DRAW\\n\", \"FIRST\\n19\\n\", \"FIRST\\n-745388\\n\", \"DRAW\\n\", \"DRAW\\n\", \"FIRST\\n44789576\\n\", \"FIRST\\n5\\n\", \"DRAW\\n\", \"SECOND\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"SECOND\\n\", \"FIRST\\n999762965\\n\", \"SECOND\\n\", \"DRAW\\n\", \"FIRST\\n258357\\n\", \"SECOND\\n\", \"SECOND\\n\", \"FIRST\\n61562151\\n\", \"SECOND\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"FIRST\\n43453\\n\", \"DRAW\\n\", \"DRAW\\n\", \"FIRST\\n434676075\\n\", \"DRAW\\n\", \"FIRST\\n-60\\n\", \"FIRST\\n775517455\\n\", \"DRAW\\n\", \"DRAW\\n\", \"SECOND\\n\", \"FIRST\\n1\\n\", \"DRAW\\n\", \"SECOND\\n\", \"DRAW\\n\", \"FIRST\\n415909317\\n\", \"FIRST\\n-998399240\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"FIRST\\n39\\n\", \"FIRST\\n1\\n\", \"FIRST\\n25326478\\n\", \"SECOND\\n\", \"FIRST\\n722\\n\", \"DRAW\\n\", \"FIRST\\n12\\n\", \"FIRST\\n-745388\\n\", \"FIRST\\n-119\\n\", \"FIRST\\n-318865781\\n\", \"SECOND\\n\", \"FIRST\\n48036273\\n\", \"FIRST\\n43891\\n\", \"FIRST\\n6\\n\", \"FIRST\\n-48493959\\n\", \"FIRST\\n242551923\\n\", \"FIRST\\n1\\n\", \"FIRST\\n-730305461\\n\", \"FIRST\\n-983588156\\n\", \"FIRST\\n4\\n\", \"FIRST\\n39\\n\", \"FIRST\\n25813180\\n\", \"FIRST\\n2\\n\", \"FIRST\\n-189\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"SECOND\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"FIRST\\n1\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"FIRST\\n12\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"DRAW\\n\", \"SECOND\\n\", \"FIRST\\n2\\n\"]}",
    "difficulty": "VERY_HARD",
    "raw_tags": "['games', 'math']",
    "name": null,
    "source": "codeforces",
    "tags": "['Game theory', 'Mathematics']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/154/D",
    "Expected Auxiliary Space": null,
    "time_limit": "2.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "Read problem statements in [Hindi], [Bengali], [Mandarin Chinese], [Russian], and [Vietnamese] as well.\n\nChef has always dreamed of becoming an employee of the \"Hack and Manipulate Group\". Their work is simple ― attacking networks. They gave Chef the following task to assess his programming skills, but Chef is too busy cooking \"Vegetable Gourmet\". Can you solve the task for him?\n\nA network consists of $N$ nodes (numbered $1$ through $N$) and $M$ bidirectional connections between pairs of these nodes. A *robust network* is a network that contains a cycle. Shutting down a node means removing that node (and all direct connections it is part of) from the network.\n\nYou may shut down at most one node. If the network was robust before it was shut down and is not robust afterwards, this node is called the *point of failure*.\n\nIs the initial network robust? If it is robust, does it have a point of failure? If it does, find the point of failure with the smallest number.\n\n------  Input ------\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $M$.\nEach of the following $M$ lines contains two space-separated integers $u$ and $v$ denoting that nodes $u$ and $v$ are directly connected.\n\n------  Output ------\nFor each test case, print a single line containing one integer ― the smallest number of a point of failure, or $-1$ if the network does not have a point of failure.\n\n------  Constraints ------\n$1 ≤ T ≤ 10$\n$1 ≤ N ≤ 10^{5}$\n$0 ≤ M ≤ 10^{5}$\n$1 ≤ u, v ≤ N$\n\n------  Subtasks ------\nSubtask #1 (10 points):\n$N ≤ 100$\n$N - 1 ≤ M ≤ N + 1$\nthe given graph is connected\n\nSubtask #2 (10 points): $1 ≤ N ≤ 100$\n\nSubtask #3 (30 points): $1 ≤ N ≤ 1,000$\n\nSubtask #4 (50 points): original constraints\n\n----- Sample Input 1 ------ \n5\n\n5 5\n\n5 1\n\n5 2\n\n1 2\n\n2 3\n\n2 4\n\n5 6\n\n4 5\n\n4 1\n\n4 2\n\n4 3\n\n5 1\n\n5 2\n\n5 5\n\n3 4\n\n3 5\n\n3 1\n\n3 2\n\n4 2\n\n4 1\n\n3 4\n\n6 6\n\n1 2\n\n2 3\n\n3 1\n\n4 5\n\n5 6\n\n6 4\n----- Sample Output 1 ------ \n1\n\n4\n\n2\n\n-1\n\n-1",
    "solutions": "[\"from collections import defaultdict\\n\\nclass UndirectedGraph:\\n\\n\\tdef __init__(self, node_num):\\n\\t\\tself.node_num = node_num\\n\\t\\tself.graph = defaultdict(list)\\n\\n\\tdef add_edge(self, v, w):\\n\\t\\tself.graph[v].append(w)\\n\\t\\tself.graph[w].append(v)\\n\\n\\tdef _find(self, v, visited, deleted):\\n\\t\\tstack = [v]\\n\\t\\tparent = defaultdict(int)\\n\\t\\twhile stack:\\n\\t\\t\\tv = stack.pop()\\n\\t\\t\\tfor next_v in self.graph[v]:\\n\\t\\t\\t\\tif next_v == parent[v]:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tif visited[next_v]:\\n\\t\\t\\t\\t\\tpath = [v]\\n\\t\\t\\t\\t\\twhile next_v != v:\\n\\t\\t\\t\\t\\t\\tv = parent[v]\\n\\t\\t\\t\\t\\t\\tpath.append(v)\\n\\t\\t\\t\\t\\treturn path\\n\\t\\t\\t\\tif next_v not in deleted:\\n\\t\\t\\t\\t\\tparent[next_v] = v\\n\\t\\t\\t\\t\\tstack.append(next_v)\\n\\t\\t\\tvisited[v] = True\\n\\t\\treturn None\\n\\n\\tdef find_cycle(self, del_nodes):\\n\\t\\tvisited = [False] * (self.node_num + 1)\\n\\t\\tdeleted = set(del_nodes)\\n\\t\\tfor i in self.graph:\\n\\t\\t\\tif not visited[i] and i not in deleted:\\n\\t\\t\\t\\tcycle = self._find(i, visited, deleted)\\n\\t\\t\\t\\tif cycle:\\n\\t\\t\\t\\t\\treturn cycle\\n\\t\\treturn []\\ntry:\\n\\ttest_num = int(input())\\n\\n\\tdef get_input():\\n\\t\\treturn list(map(int, input().split()))\\n\\tfor _ in range(test_num):\\n\\t\\t(n, m) = get_input()\\n\\t\\tedges = [get_input() for _ in range(m)]\\n\\t\\tg = UndirectedGraph(n)\\n\\t\\tfor (i, j) in edges:\\n\\t\\t\\tg.add_edge(i, j)\\n\\t\\t(cycle, fail_node) = (g.find_cycle([]), -1)\\n\\t\\tif cycle and (not g.find_cycle(cycle)):\\n\\t\\t\\tcycle.sort()\\n\\t\\t\\tfor i in cycle:\\n\\t\\t\\t\\tif not g.find_cycle([i]):\\n\\t\\t\\t\\t\\tfail_node = i\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tprint(fail_node)\\nexcept EOFError:\\n\\tpass\\n\", \"from collections import defaultdict\\nII = lambda : [int(x) for x in input().split()]\\n\\ndef find_cycle(graph, start, visited, d_nodes):\\n\\td_nodes = set(d_nodes)\\n\\tstack = [start]\\n\\tparent = defaultdict(int)\\n\\twhile stack:\\n\\t\\tstate = stack.pop()\\n\\t\\tfor next_state in graph[state]:\\n\\t\\t\\tif next_state == parent[state]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif visited[next_state]:\\n\\t\\t\\t\\tpath = [state]\\n\\t\\t\\t\\twhile next_state != state:\\n\\t\\t\\t\\t\\tstate = parent[state]\\n\\t\\t\\t\\t\\tpath.append(state)\\n\\t\\t\\t\\treturn path\\n\\t\\t\\tif next_state not in d_nodes:\\n\\t\\t\\t\\tparent[next_state] = state\\n\\t\\t\\t\\tstack.append(next_state)\\n\\t\\tvisited[state] = True\\n\\treturn None\\n\\ndef find_a_cycle(G, d_nodes):\\n\\tvisited = defaultdict(bool)\\n\\td_nodes = set(d_nodes)\\n\\tfor node in G:\\n\\t\\tif node not in visited and node not in d_nodes:\\n\\t\\t\\tcycle = find_cycle(G, node, visited, d_nodes)\\n\\t\\t\\tif cycle is not None:\\n\\t\\t\\t\\treturn cycle\\n\\treturn []\\nT = int(input())\\nfor _ in range(T):\\n\\t(N, E) = II()\\n\\tG = defaultdict(list)\\n\\tfor _ in range(E):\\n\\t\\t(a, b) = II()\\n\\t\\tG[a].append(b)\\n\\t\\tG[b].append(a)\\n\\tcycle = find_a_cycle(G, [])\\n\\tif not cycle:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tif find_a_cycle(G, cycle):\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tf_node = -1\\n\\tcycle.sort()\\n\\tfor node in cycle:\\n\\t\\tnew_cycle = find_a_cycle(G, [node])\\n\\t\\tif not new_cycle:\\n\\t\\t\\tf_node = node\\n\\t\\t\\tbreak\\n\\tprint(f_node)\\n\", \"from collections import defaultdict\\nimport sys\\nsys.setrecursionlimit(100000)\\n\\nclass Graph:\\n\\n\\tdef __init__(self):\\n\\t\\tself.graph = defaultdict(set)\\n\\t\\tself._junctionDict = defaultdict(set)\\n\\n\\tdef addEdge(self, u, v):\\n\\t\\tself.graph[u].add(v)\\n\\t\\tself.graph[v].add(u)\\n\\t\\tlu = len(self.graph[u])\\n\\t\\tlv = len(self.graph[v])\\n\\t\\tself._junctionDict[lu].add(u)\\n\\t\\tself._junctionDict[lv].add(v)\\n\\t\\tif lu > 1:\\n\\t\\t\\tself.discardFromJunction(lu - 1, u)\\n\\t\\tif lv > 1:\\n\\t\\t\\tself.discardFromJunction(lv - 1, v)\\n\\n\\tdef discardFromJunction(self, k, v):\\n\\t\\tself._junctionDict[k].discard(v)\\n\\t\\tif len(self._junctionDict[k]) == 0:\\n\\t\\t\\tdel self._junctionDict[k]\\n\\n\\tdef removeVertice(self, v):\\n\\t\\tfor vv in self.graph[v]:\\n\\t\\t\\tself.graph[vv].discard(v)\\n\\t\\t\\tlv = len(self.graph[vv])\\n\\t\\t\\tself.discardFromJunction(lv + 1, vv)\\n\\t\\t\\tif lv > 0:\\n\\t\\t\\t\\tself._junctionDict[lv].add(vv)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdel self.graph[vv]\\n\\t\\tln = len(self.graph[v])\\n\\t\\tdel self.graph[v]\\n\\t\\tself.discardFromJunction(ln, v)\\n\\n\\tdef removeAloneVertice(self, u):\\n\\t\\tif len(self.graph[u]) == 1:\\n\\t\\t\\tv = self.graph[u].pop()\\n\\t\\t\\tself.graph[v].discard(u)\\n\\t\\t\\tdel self.graph[u]\\n\\t\\t\\tself.discardFromJunction(1, u)\\n\\t\\t\\tlv = len(self.graph[v])\\n\\t\\t\\tself.discardFromJunction(lv + 1, v)\\n\\t\\t\\tif lv > 0:\\n\\t\\t\\t\\tself._junctionDict[lv].add(v)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdel self.graph[v]\\n\\t\\telif len(self.graph[u]) == 0:\\n\\t\\t\\tdel self.graph[u]\\n\\n\\tdef clean(self):\\n\\t\\twhile self._junctionDict[1]:\\n\\t\\t\\tself.removeAloneVertice(self._junctionDict[1].pop())\\n\\t\\tdel self._junctionDict[1]\\n\\n\\tdef check(self):\\n\\t\\tfp = -1\\n\\t\\tself.clean()\\n\\t\\tif self._junctionDict.keys():\\n\\t\\t\\tmlen = max(self._junctionDict.keys())\\n\\t\\t\\tif mlen > 1:\\n\\t\\t\\t\\tc_fp = min(self._junctionDict[mlen])\\n\\t\\t\\t\\tself.removeVertice(c_fp)\\n\\t\\t\\t\\tself.clean()\\n\\t\\t\\tif len(self.graph.keys()) == 0:\\n\\t\\t\\t\\tfp = c_fp\\n\\t\\tprint(fp)\\nfor _ in range(int(input())):\\n\\t(N, M) = map(int, input().split())\\n\\tgraph = Graph()\\n\\tfor _ in range(M):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tgraph.addEdge(u, v)\\n\\tgraph.check()\\n\", \"from collections import defaultdict\\nimport sys\\nsys.setrecursionlimit(100000)\\n\\nclass Graph:\\n\\n\\tdef __init__(self, N):\\n\\t\\tself.Explored = [False] * N\\n\\t\\tself.N = N\\n\\t\\tself.graph = defaultdict(set)\\n\\t\\tself.failurePoints = None\\n\\t\\tself.path = []\\n\\t\\tself.explored = [-1] * N\\n\\t\\tself.Halt = False\\n\\t\\tself.minFailurePoint = -1\\n\\t\\tself._junctionDict = defaultdict(set)\\n\\n\\tdef addEdge(self, u, v):\\n\\t\\tself.graph[u].add(v)\\n\\t\\tself.graph[v].add(u)\\n\\t\\tlu = len(self.graph[u])\\n\\t\\tlv = len(self.graph[v])\\n\\t\\tself._junctionDict[lu].add(u)\\n\\t\\tself._junctionDict[lv].add(v)\\n\\t\\tif lu > 1:\\n\\t\\t\\tself.discardFromJunction(lu - 1, u)\\n\\t\\tif lv > 1:\\n\\t\\t\\tself.discardFromJunction(lv - 1, v)\\n\\n\\tdef discardFromJunction(self, k, v):\\n\\t\\tself._junctionDict[k].discard(v)\\n\\t\\tif len(self._junctionDict[k]) == 0:\\n\\t\\t\\tdel self._junctionDict[k]\\n\\n\\tdef removeVertice(self, v):\\n\\t\\tfor vv in self.graph[v]:\\n\\t\\t\\tself.graph[vv].discard(v)\\n\\t\\t\\tlv = len(self.graph[vv])\\n\\t\\t\\tself.discardFromJunction(lv + 1, vv)\\n\\t\\t\\tif lv > 0:\\n\\t\\t\\t\\tself._junctionDict[lv].add(vv)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdel self.graph[vv]\\n\\t\\tln = len(self.graph[v])\\n\\t\\tdel self.graph[v]\\n\\t\\tself.discardFromJunction(ln, v)\\n\\n\\tdef removeAloneVertice(self, u):\\n\\t\\tif len(self.graph[u]) == 1:\\n\\t\\t\\tv = self.graph[u].pop()\\n\\t\\t\\tself.graph[v].discard(u)\\n\\t\\t\\tdel self.graph[u]\\n\\t\\t\\tself.discardFromJunction(1, u)\\n\\t\\t\\tlv = len(self.graph[v])\\n\\t\\t\\tself.discardFromJunction(lv + 1, v)\\n\\t\\t\\tif lv > 0:\\n\\t\\t\\t\\tself._junctionDict[lv].add(v)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdel self.graph[v]\\n\\t\\telif len(self.graph[u]) == 0:\\n\\t\\t\\tdel self.graph[u]\\n\\n\\tdef clean(self):\\n\\t\\twhile self._junctionDict[1]:\\n\\t\\t\\tself.removeAloneVertice(self._junctionDict[1].pop())\\n\\t\\tdel self._junctionDict[1]\\n\\n\\tdef check(self):\\n\\t\\tfp = -1\\n\\t\\tself.clean()\\n\\t\\tif self._junctionDict.keys():\\n\\t\\t\\tmlen = max(self._junctionDict.keys())\\n\\t\\t\\tif mlen > 1:\\n\\t\\t\\t\\tc_fp = min(self._junctionDict[mlen])\\n\\t\\t\\t\\tself.removeVertice(c_fp)\\n\\t\\t\\t\\tself.clean()\\n\\t\\t\\tif len(self.graph.keys()) == 0:\\n\\t\\t\\t\\tfp = c_fp\\n\\t\\tprint(fp)\\n\\n\\tdef _intersection(self, s1, s2):\\n\\t\\tintersection = set([])\\n\\t\\tfor v in s1:\\n\\t\\t\\tif v in s2:\\n\\t\\t\\t\\tif len(intersection) == 0:\\n\\t\\t\\t\\t\\tself.minFailurePoint = v\\n\\t\\t\\t\\telif self.minFailurePoint > v:\\n\\t\\t\\t\\t\\tself.minFailurePoint = v\\n\\t\\t\\t\\tintersection.add(v)\\n\\t\\treturn intersection\\n\\n\\tdef addCyclePath(self, nv):\\n\\t\\tpath = self.path[self.explored[nv - 1]:]\\n\\t\\tif self.failurePoints is None:\\n\\t\\t\\tself.failurePoints = set([])\\n\\t\\t\\tself.minFailurePoint = path[0]\\n\\t\\t\\tfor v in path:\\n\\t\\t\\t\\tself.failurePoints.add(v)\\n\\t\\t\\t\\tif self.minFailurePoint > v:\\n\\t\\t\\t\\t\\tself.minFailurePoint = v\\n\\t\\telse:\\n\\t\\t\\tif len(self.failurePoints) <= len(path):\\n\\t\\t\\t\\t_path = set(path)\\n\\t\\t\\t\\tself.failurePoints = self._intersection(self.failurePoints, _path)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself.failurePoints = self._intersection(path, self.failurePoints)\\n\\t\\t\\tif len(self.failurePoints) == 0:\\n\\t\\t\\t\\tself.Halt = True\\n\\t\\t\\t\\traise Exception('Not possible')\\n\\n\\tdef getCycle(self, v, parent):\\n\\t\\tindex = len(self.path)\\n\\t\\tself.explored[v - 1] = index\\n\\t\\tself.Explored[v - 1] = True\\n\\t\\tif self.graph[v]:\\n\\t\\t\\tself.path.append(v)\\n\\t\\telse:\\n\\t\\t\\treturn\\n\\t\\tfor nv in self.graph[v]:\\n\\t\\t\\tif self.Halt:\\n\\t\\t\\t\\treturn\\n\\t\\t\\tif nv != parent:\\n\\t\\t\\t\\tif self.explored[nv - 1] > -1:\\n\\t\\t\\t\\t\\tself.addCyclePath(nv)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tself.getCycle(nv, v)\\n\\t\\tself.explored[v - 1] = -1\\n\\t\\tself.path = self.path[:-1]\\nfor _ in range(int(input())):\\n\\t(N, M) = map(int, input().split())\\n\\tgraph = Graph(N)\\n\\tfor _ in range(M):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tgraph.addEdge(u, v)\\n\\tgraph.check()\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"5\\n5 5\\n5 1\\n5 2\\n1 2\\n2 3\\n2 4\\n5 6\\n4 5\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 5\\n3 4\\n3 5\\n3 1\\n3 2\\n4 2\\n4 1\\n3 4\\n6 6\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 4\"], \"outputs\": [\"1\\n4\\n2\\n-1\\n-1\"]}",
    "difficulty": "VERY_HARD",
    "raw_tags": "['Algorithms', 'Cycles', 'Traversals', 'DFS', 'Graphs', 'Graph Algos', 'Data Structures', 'Trees']",
    "name": null,
    "source": "codechef",
    "tags": "['Tree algorithms', 'Graph algorithms', 'Data structures', 'Graph traversal']",
    "skill_types": "['Data structures']",
    "url": "https://www.codechef.com/problems/FAILURE",
    "Expected Auxiliary Space": null,
    "time_limit": "2 seconds",
    "date": "2019-09-28",
    "picture_num": "1",
    "memory_limit": "50000 bytes",
    "Expected Time Complexity": null
  },
  {
    "question": "You are given n numbers a_1, a_2, ..., a_{n}. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make [Image] as large as possible, where $1$ denotes the bitwise OR. \n\nFind the maximum possible value of [Image] after performing at most k operations optimally.\n\n\n-----Input-----\n\nThe first line contains three integers n, k and x (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 10, 2 ≤ x ≤ 8).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9).\n\n\n-----Output-----\n\nOutput the maximum value of a bitwise OR of sequence elements after performing operations.\n\n\n-----Examples-----\nInput\n3 1 2\n1 1 1\n\nOutput\n3\n\nInput\n4 2 3\n1 2 4 8\n\nOutput\n79\n\n\n\n-----Note-----\n\nFor the first sample, any possible choice of doing one operation will result the same three numbers 1, 1, 2 so the result is $1|1|2 = 3$. \n\nFor the second sample if we multiply 8 by 3 two times we'll get 72. In this case the numbers will become 1, 2, 4, 72 so the OR value will be 79 and is the largest possible result.",
    "solutions": "[\"(n, k, p) = map(int, input().split())\\nnumbers = list(map(int, input().split()))\\nx = [0] * (n + 10)\\ny = [0] * (n + 10)\\np = p ** k\\nmaxi = 0\\nfor i in range(n):\\n\\tx[i + 1] = numbers[i] | x[i]\\nfor j in range(n, -1, -1):\\n\\ty[j - 2] = numbers[j - 1] | y[j - 1]\\nfor i in range(n):\\n\\tif maxi < x[i] | numbers[i] * p | y[i]:\\n\\t\\tmaxi = x[i] | numbers[i] * p | y[i]\\nprint(maxi)\\n\", \"(n, k, x) = list(map(int, input().split()))\\nlis = list(map(int, input().split()))\\npre = [0] * (n + 2)\\npos = [0] * (n + 2)\\nans = 0\\nm = x ** k\\nfor i in range(1, n):\\n\\tpre[i] = pre[i - 1] | lis[i - 1]\\nfor i in range(n, 0, -1):\\n\\tpos[i] = pos[i + 1] | lis[i - 1]\\nfor i in range(1, n + 1):\\n\\tans = max(ans, pre[i - 1] | lis[i - 1] * m | pos[i + 1])\\nprint(ans)\\n\", \"(n, k, x) = map(int, input().split())\\nl = list(map(int, input().split()))\\na = [0] * n\\nb = [0] * n\\nfor i in range(1, n):\\n\\ta[i] = a[i - 1] | l[i - 1]\\nfor i in range(1, n):\\n\\tb[n - i - 1] = b[-i] | l[-i]\\nnom = 0\\nfor i in range(1, n):\\n\\tif l[nom] * x ** k | a[nom] | b[nom] < l[i] * x ** k | a[i] | b[i]:\\n\\t\\tnom = i\\nl[nom] *= x ** k\\nprint(l[nom] | a[nom] | b[nom])\\n\", \"import sys\\nimport math\\n[n, k, x] = [int(i) for i in sys.stdin.readline().rstrip('\\\\n').split()]\\nnums = [int(i) for i in sys.stdin.readline().rstrip('\\\\n').split()]\\noffset = 1\\nfor i in range(k):\\n\\toffset = offset * x\\nleftor = [0]\\nfor i in nums[:-1]:\\n\\tleftor.append(leftor[-1] | i)\\nrightor = [0]\\nfor i in range(len(nums) - 1, 0, -1):\\n\\trightor.append(rightor[-1] | nums[i])\\nans = []\\nfor i in range(len(nums)):\\n\\tans.append(leftor[i] | (nums[i] * offset | rightor[n - i - 1]))\\nsys.stdout.write(str(max(ans)) + '\\\\n')\\n\", \"def pw(a, x, k):\\n\\tif a == 0:\\n\\t\\treturn 0\\n\\tans = a\\n\\twhile k > 0:\\n\\t\\tans *= x\\n\\t\\tk = k - 1\\n\\treturn ans\\n(n, k, x) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nlft = []\\nlft.append(0)\\nfor val in a:\\n\\tlft.append(val)\\nlft.append(0)\\nrht = []\\nfor val in lft:\\n\\trht.append(val)\\nfor i in range(1, len(lft)):\\n\\tlft[i] = lft[i] | lft[i - 1]\\nfor i in range(len(rht) - 2, -1, -1):\\n\\trht[i] = rht[i] | rht[i + 1]\\nans = 0\\nfor i in range(1, len(lft) - 1):\\n\\tif ans < lft[i - 1] | pw(a[i - 1], x, k) | rht[i + 1]:\\n\\t\\tans = lft[i - 1] | pw(a[i - 1], x, k) | rht[i + 1]\\nprint(ans)\\n\", \"(x, n, k) = [int(x) for x in input().split()]\\nlista = [int(x) for x in input().split()]\\nacumuladaL = []\\nacumuladaR = []\\nmult = k ** n\\ncont = 0\\nfor i in lista:\\n\\tcont |= i\\n\\tacumuladaL.append(cont)\\ncont = 0\\nfor i in lista[::-1]:\\n\\tcont |= i\\n\\tacumuladaR.append(cont)\\nif len(lista) == 1:\\n\\tprint(lista[0] * mult)\\nelif len(lista) == 2:\\n\\tacumuladaR = acumuladaR[::-1]\\n\\tmaximo = max([lista[0] * mult | acumuladaR[1], lista[-1] * mult | acumuladaL[-2]])\\n\\tprint(maximo)\\nelse:\\n\\tmaximo = max([lista[0] * mult | acumuladaR[1], lista[-1] * mult | acumuladaL[-2]])\\n\\tacumuladaR = acumuladaR[::-1]\\n\\tfor i in range(1, len(lista) - 1):\\n\\t\\tvar = lista[i] * mult | acumuladaR[i + 1] | acumuladaL[i - 1]\\n\\t\\tif maximo < var:\\n\\t\\t\\tmaximo = var\\n\\tprint(maximo)\\n\", \"input_1 = input()\\ninput_1 = input_1.split()\\nn = int(input_1[0])\\nk = int(input_1[1])\\nx = int(input_1[2])\\na = input()\\na = a.split()\\na = [int(x) for x in a]\\nmaximum = 0\\nprefix = []\\nsuffix = []\\nprefix_or = 0\\nsuffix_or = 0\\nfor i in range(n):\\n\\tprefix_or = prefix_or | a[i]\\n\\tprefix.append(prefix_or)\\nfor i in range(n - 1, -1, -1):\\n\\tsuffix_or = suffix_or | a[i]\\n\\tsuffix.append(suffix_or)\\nor_bit = 0\\nif n == 1:\\n\\tor_bit = a[0] * x ** k\\nelse:\\n\\tfor i in range(n):\\n\\t\\tif i == 0:\\n\\t\\t\\tor_bit = max(or_bit, a[0] * x ** k | suffix[n - 2])\\n\\t\\telif i == n - 1:\\n\\t\\t\\tor_bit = max(or_bit, a[n - 1] * x ** k | prefix[n - 2])\\n\\t\\telse:\\n\\t\\t\\tor_bit = max(or_bit, a[i] * x ** k | prefix[i - 1] | suffix[n - 2 - i])\\nprint(or_bit)\\n\", \"(n, k, x) = map(int, input().split())\\na = list(map(int, input().split()))\\nx = x ** k\\n(pref, suff) = ([0] * n, [0] * n)\\nfor i in range(n - 1):\\n\\tpref[i + 1] = a[i] | pref[i]\\nfor i in range(n - 1, 0, -1):\\n\\tsuff[i - 1] = a[i] | suff[i]\\nres = 0\\nfor i in range(n):\\n\\tres = max(res, a[i] * x | pref[i] | suff[i])\\nprint(res)\\n\", \"from functools import reduce\\nfrom operator import *\\nfrom math import *\\nfrom sys import *\\nfrom string import *\\nfrom collections import *\\nsetrecursionlimit(10 ** 7)\\ndX = [-1, 1, 0, 0, -1, 1, -1, 1]\\ndY = [0, 0, -1, 1, 1, -1, -1, 1]\\nRI = lambda : list(map(int, input().split()))\\nRS = lambda : input().rstrip().split()\\n(n, k, x) = RI()\\na = RI()\\nval = int(pow(x, k))\\nmaxAns = 0\\n(pre, post) = ([0] + a[:] + [0], [0] + a[:] + [0])\\nfor i in range(1, n + 1):\\n\\tpre[i] |= pre[i - 1]\\nfor i in range(n, 0, -1):\\n\\tpost[i - 1] |= post[i]\\nfor i in range(1, n + 1):\\n\\tmaxAns = max(maxAns, val * a[i - 1] | pre[i - 1] | post[i + 1])\\nprint(maxAns)\\n\", \"(n, k, l) = map(int, input().split())\\nli = [int(x) for x in input().split()]\\nfront = [0] * (n + 2)\\nback = [0] * (n + 2)\\nfront[0] = 0 | li[0]\\nback[n - 1] = 0 | li[n - 1]\\nfor i in range(1, n):\\n\\tfront[i] = front[i - 1] | li[i]\\nfor i in range(n - 2, -1, -1):\\n\\tback[i] = back[i + 1] | li[i]\\np = 1\\nfor _ in range(k):\\n\\tp *= l\\nmax = -1\\nfor i in range(n):\\n\\tc = front[i - 1] | li[i] * p | back[i + 1]\\n\\tif c > max:\\n\\t\\tmax = c\\nprint(max)\\n\", \"import unittest\\nimport sys\\n\\nclass Or:\\n\\n\\tdef __init__(self, test_inputs=None):\\n\\t\\tit = iter(test_inputs.split('\\\\n')) if test_inputs else None\\n\\n\\t\\tdef uinput():\\n\\t\\t\\treturn next(it) if it else sys.stdin.readline().rstrip()\\n\\t\\t[self.n, self.k, self.x] = map(int, uinput().split())\\n\\t\\tself.nums = list(map(int, uinput().split()))\\n\\t\\tself.cnt = [0] * 100\\n\\t\\tfor n in self.nums:\\n\\t\\t\\ti = 0\\n\\t\\t\\twhile n != 0:\\n\\t\\t\\t\\tif n % 2:\\n\\t\\t\\t\\t\\tself.cnt[i] += 1\\n\\t\\t\\t\\tn >>= 1\\n\\t\\t\\t\\ti += 1\\n\\t\\tself.nmax = 0\\n\\t\\tfor n in self.nums:\\n\\t\\t\\tcur_cnt = list(self.cnt)\\n\\t\\t\\ti = 0\\n\\t\\t\\tnn = n\\n\\t\\t\\twhile n != 0:\\n\\t\\t\\t\\tif n % 2:\\n\\t\\t\\t\\t\\tcur_cnt[i] -= 1\\n\\t\\t\\t\\tn >>= 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\tn = nn * self.x ** self.k\\n\\t\\t\\ti = 0\\n\\t\\t\\twhile n != 0:\\n\\t\\t\\t\\tif n % 2:\\n\\t\\t\\t\\t\\tcur_cnt[i] += 1\\n\\t\\t\\t\\tn >>= 1\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\tk = 0\\n\\t\\t\\tfor i in range(len(cur_cnt)):\\n\\t\\t\\t\\tif cur_cnt[i] > 0:\\n\\t\\t\\t\\t\\tk += 1 << i\\n\\t\\t\\tif k > self.nmax:\\n\\t\\t\\t\\tself.nmax = k\\n\\n\\tdef calculate(self):\\n\\t\\tresult = self.nmax\\n\\t\\treturn str(result)\\n\\nclass unitTests(unittest.TestCase):\\n\\n\\tdef test_single_test(self):\\n\\t\\ttest = '3 1 2\\\\n1 1 1'\\n\\t\\td = Or(test)\\n\\t\\tself.assertEqual(d.n, 3)\\n\\t\\tself.assertEqual(d.k, 1)\\n\\t\\tself.assertEqual(d.x, 2)\\n\\t\\tself.assertEqual(d.nums, [1, 1, 1])\\n\\t\\tself.assertEqual(Or(test).calculate(), '3')\\n\\t\\ttest = '4 2 3\\\\n1 2 4 8'\\n\\t\\tself.assertEqual(Or(test).calculate(), '79')\\n\\t\\ttest = ''\\n\\t\\ttest = ''\\n\\n\\tdef time_limit_test(self, nmax):\\n\\t\\timport random\\n\\t\\timport timeit\\n\\t\\ttest = str(nmax) + ' ' + str(nmax) + '\\\\n'\\n\\t\\tnumnums = [str(i) + ' ' + str(i + 1) for i in range(nmax)]\\n\\t\\ttest += '\\\\n'.join(numnums) + '\\\\n'\\n\\t\\tnums = [random.randint(1, 10000) for i in range(nmax)]\\n\\t\\ttest += ' '.join(map(str, nums)) + '\\\\n'\\n\\t\\tstart = timeit.default_timer()\\n\\t\\td = Or(test)\\n\\t\\tcalc = timeit.default_timer()\\n\\t\\td.calculate()\\n\\t\\tstop = timeit.default_timer()\\n\\t\\tprint('\\\\nTimelimit Test: ' + '{0:.3f}s (init {1:.3f}s calc {2:.3f}s)'.format(stop - start, calc - start, stop - calc))\\nsys.setrecursionlimit(100000)\\nif sys.argv[-1] == '-ut':\\n\\tunittest.main(argv=[' '])\\nsys.stdout.write(Or().calculate())\\n\", \"(n, k, x) = map(int, input().split())\\na = list(map(int, input().split()))\\nb = list(a)\\nbits = [0] * 64\\nfor i in range(32):\\n\\tfor j in range(len(b)):\\n\\t\\tbits[i] += b[j] & 1\\n\\t\\tb[j] >>= 1\\nans = 0\\nfor v in a:\\n\\tt = v\\n\\tu = v * x ** k\\n\\ts = 0\\n\\tfor i in range(64):\\n\\t\\tb = bits[i] - (t & 1) + (u & 1)\\n\\t\\tt >>= 1\\n\\t\\tu >>= 1\\n\\t\\tif b:\\n\\t\\t\\ts |= 1 << i\\n\\tans = max(ans, s)\\nprint(ans)\\n\", \"(n, k, x) = map(int, input().split())\\na = list(map(int, input().split()))\\nL = [0] * (n + 1)\\nR = [0] * (n + 1)\\nfor i in range(1, n + 1):\\n\\tL[i] = a[i - 1] | L[i - 1]\\nfor i in range(n - 1, -1, -1):\\n\\tR[i] = a[i] | R[i + 1]\\nans = max((L[i] | a[i] * x ** k | R[i + 1] for i in range(n)))\\nprint(ans)\\n\", \"def solve(n, k, x, a):\\n\\ts = 0\\n\\tprefix = [0] * (n + 10)\\n\\tsuffix = [0] * (n + 10)\\n\\ta.append(0)\\n\\ta.insert(0, 0)\\n\\tm = pow(x, k)\\n\\tfor i in range(1, n + 1):\\n\\t\\tprefix[i] = prefix[i - 1] | a[i]\\n\\tfor i in range(n, 0, -1):\\n\\t\\tsuffix[i] = suffix[i + 1] | a[i]\\n\\tfor i in range(1, n + 1):\\n\\t\\ts = max(s, prefix[i - 1] | a[i] * m | suffix[i + 1])\\n\\treturn s\\n\\ndef main(infile, outfile):\\n\\t(n, k, x) = list(map(int, infile.readline().split()))\\n\\ta = list(map(int, infile.readline().split()))\\n\\toutfile.write(str(solve(n, k, x, a)) + '\\\\n')\\n\\ndef __starting_point():\\n\\tfrom sys import stdin, stdout\\n\\tmain(stdin, stdout)\\n__starting_point()\\n\", \"def main():\\n\\t(n, k, x) = list(map(int, input().split()))\\n\\taa = list(map(int, input().split()))\\n\\t(x, lo, u) = (x ** k, [0] * n, 0)\\n\\tfor (i, a) in enumerate(aa):\\n\\t\\tlo[i] = u\\n\\t\\tu |= a\\n\\t(hi, u) = ([], 0)\\n\\tfor a in reversed(aa):\\n\\t\\thi.append(u)\\n\\t\\tu |= a\\n\\thi.reverse()\\n\\tfor (i, u, a, v) in zip(list(range(n)), lo, aa, hi):\\n\\t\\taa[i] = a * x | u | v\\n\\tprint(max(aa))\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"(n, k, x) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\npref = [0 for el in a]\\nsuff = [0 for el in a]\\npref[0] = a[0]\\nfor i in range(1, len(a)):\\n\\tpref[i] = pref[i - 1] | a[i]\\nsuff[-1] = a[-1]\\nfor i in range(len(a) - 2, -1, -1):\\n\\tsuff[i] = suff[i + 1] | a[i]\\nif n == 1:\\n\\tprint(a[0] * x ** k)\\n\\treturn\\nsol = max(a[0] * x ** k | suff[1], pref[-2] | a[-1] * x ** k)\\nfor i in range(1, len(a) - 1):\\n\\tsol = max(sol, pref[i - 1] | a[i] * x ** k | suff[i + 1])\\nprint(sol)\\n\", \"(n, k, x) = map(int, input().split())\\na = list(map(int, input().split()))\\nmaxi = 0\\nmoc = x ** k\\np = [0] * (n + 2)\\ns = [0] * (n + 2)\\nfor i in range(1, len(a) + 1):\\n\\tp[i] = p[i - 1] | a[i - 1]\\nfor i in range(len(a), 0, -1):\\n\\ts[i] = s[i + 1] | a[i - 1]\\nfor t in range(1, len(a) + 1):\\n\\tmaxi = max(maxi, p[t - 1] | a[t - 1] * moc | s[t + 1])\\nprint(maxi)\\n\", \"import collections\\nimport time\\nimport os\\nimport sys\\nimport bisect\\nimport heapq\\nfrom typing import List\\n\\ndef solve(N, K, X, A):\\n\\tprefix = [0 for _ in range(N)]\\n\\tsuffix = [0 for _ in range(N)]\\n\\tfor (i, v) in enumerate(A):\\n\\t\\tprefix[i] = (prefix[i - 1] if i - 1 >= 0 else 0) | v\\n\\tfor i in range(N - 1, -1, -1):\\n\\t\\tsuffix[i] = (suffix[i + 1] if i + 1 < N else 0) | A[i]\\n\\tans = 0\\n\\tfor (i, v) in enumerate(A):\\n\\t\\ta = prefix[i - 1] if i - 1 >= 0 else 0\\n\\t\\tb = suffix[i + 1] if i + 1 < N else 0\\n\\t\\tans = max(ans, a | b | v * X ** K)\\n\\treturn ans\\n(N, K, X) = map(int, input().split())\\nA = [int(x) for x in input().split()]\\nprint(solve(N, K, X, A))\\n\", \"import sys\\n(n, k, x) = (int(x) for x in input().split())\\nl = [int(x) for x in input().split()]\\npref = [0] * n\\nsuff = [0] * n\\npref[0] = l[0]\\nfor i in range(1, n):\\n\\tpref[i] = pref[i - 1] | l[i]\\nsuff[n - 1] = l[n - 1]\\nfor i in range(n - 2, -1, -1):\\n\\tsuff[i] = suff[i + 1] | l[i]\\n\\ndef get_pref(index):\\n\\tif index < 0:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\treturn pref[index]\\n\\ndef get_suff(index):\\n\\tif index >= n:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\treturn suff[index]\\npower = x ** k\\nans = 0\\nfor i in range(n):\\n\\tcontender = get_pref(i - 1) | l[i] * power | get_suff(i + 1)\\n\\tif contender > ans:\\n\\t\\tans = contender\\nprint(ans)\\n\", \"__author__ = 'kitkat'\\nimport sys\\ntry:\\n\\twhile True:\\n\\t\\t(n, k, x) = map(int, input().split(' '))\\n\\t\\tval = [0] + list(map(int, input().split(' ')))\\n\\t\\tres = 0\\n\\t\\tL = [0 for i in range(200003)]\\n\\t\\tR = [0 for i in range(200003)]\\n\\t\\tfor i in range(1, n + 1, 1):\\n\\t\\t\\tL[i] = L[i - 1] | val[i]\\n\\t\\t\\tR[n - i + 1] = R[n - i + 2] | val[n - i + 1]\\n\\t\\tfor i in range(1, n + 1, 1):\\n\\t\\t\\tfor j in range(k):\\n\\t\\t\\t\\tval[i] *= x\\n\\t\\tfor i in range(1, n + 1, 1):\\n\\t\\t\\tres = max(res, L[i - 1] | R[i + 1] | val[i])\\n\\t\\tprint(res)\\nexcept EOFError:\\n\\tpass\\n\", \"from __future__ import division, print_function\\nfrom fractions import Fraction\\nimport sys\\nimport os\\nfrom io import BytesIO, IOBase\\nfrom functools import cmp_to_key\\nfrom heapq import *\\nfrom math import gcd, factorial, floor, ceil, sqrt, log2\\nfrom copy import deepcopy\\nfrom collections import deque\\nfrom bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\nfrom types import GeneratorType\\n\\ndef iterative(f, stack=[]):\\n\\n\\tdef wrapped_func(*args, **kwargs):\\n\\t\\tif stack:\\n\\t\\t\\treturn f(*args, **kwargs)\\n\\t\\tto = f(*args, **kwargs)\\n\\t\\twhile True:\\n\\t\\t\\tif type(to) is GeneratorType:\\n\\t\\t\\t\\tstack.append(to)\\n\\t\\t\\t\\tto = next(to)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tstack.pop()\\n\\t\\t\\tif not stack:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tto = stack[-1].send(to)\\n\\t\\treturn to\\n\\treturn wrapped_func\\n\\ndef inp():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef out(var):\\n\\tsys.stdout.write(str(var))\\n\\ndef lis():\\n\\treturn list(map(int, inp().split()))\\n\\ndef stringlis():\\n\\treturn list(map(str, inp().split()))\\n\\ndef sep():\\n\\treturn map(int, inp().split())\\n\\ndef strsep():\\n\\treturn map(str, inp().split())\\n\\ndef testcase(t):\\n\\tfor pp in range(t):\\n\\t\\tsolve(pp)\\n\\ndef google(p):\\n\\tprint('Case #' + str(p) + ': ', end='')\\n\\ndef lcm(a, b):\\n\\treturn a * b // gcd(a, b)\\n\\ndef modInverse(b):\\n\\tg = gcd(b, mod)\\n\\tif g != 1:\\n\\t\\treturn -1\\n\\telse:\\n\\t\\treturn pow(b, mod - 2, mod)\\n\\ndef power(x, y, p):\\n\\ty %= p - 1\\n\\tres = 1\\n\\tx = x % p\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\twhile y > 0:\\n\\t\\tif y & 1 == 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\tif n <= 3:\\n\\t\\treturn True\\n\\tif n % 2 == 0 or n % 3 == 0:\\n\\t\\treturn False\\n\\ti = 5\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0 or n % (i + 2) == 0:\\n\\t\\t\\treturn False\\n\\t\\ti = i + 6\\n\\treturn True\\ninf = pow(10, 20)\\nmod = 10 ** 9 + 7\\n\\ndef solve(case):\\n\\t(n, k, x) = sep()\\n\\ta = lis()\\n\\tpre = [0] * (n + 1)\\n\\tsuff = [0] * (n + 1)\\n\\ttemp = 1\\n\\tfor i in range(k):\\n\\t\\ttemp *= x\\n\\tfor i in range(n):\\n\\t\\tpre[i] = pre[i - 1] | a[i]\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tsuff[i] = suff[i + 1] | a[i]\\n\\tans = -inf\\n\\tfor i in range(n):\\n\\t\\tlol = pre[i - 1] | suff[i + 1]\\n\\t\\tans = max(ans, lol | a[i] * temp)\\n\\tprint(ans)\\ntestcase(1)\\n\", \"(n, k, x) = map(int, input().split())\\n(*Arr,) = map(int, input().split())\\nPrfx = [0] * (n + 2)\\nSffx = [0] * (n + 2)\\nfor i in range(0, n):\\n\\tPrfx[i + 1] = Prfx[i] | Arr[i]\\n\\tSffx[n - i - 1] = Sffx[n - i] | Arr[n - i - 1]\\nnow = x ** k\\nRes = 0\\nfor i in range(0, n):\\n\\tRes = max(Prfx[i] | Arr[i] * now | Sffx[i + 1], Res)\\nprint(Res)\\n\", \"import math\\na = list(map(int, input().split()))\\nn = a[0]\\nk = a[1]\\nx = a[2]\\na = list(map(int, input().split()))\\nb = [None] * n\\nc = [None] * n\\nb[0] = a[0]\\nmul = 1\\nc[n - 1] = a[n - 1]\\nfor i in range(k):\\n\\tmul *= x\\nif n == 1:\\n\\tprint(mul * a[0])\\nelse:\\n\\tfor i in range(1, n):\\n\\t\\tb[i] = b[i - 1] | a[i]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tc[i] = c[i + 1] | a[i]\\n\\tans = max(a[0] * mul | c[1], a[n - 1] * mul | b[n - 2])\\n\\tfor i in range(1, n - 1):\\n\\t\\tans = max(ans, a[i] * mul | b[i - 1] | c[i + 1])\\n\\tprint(ans)\\n\", \"import sys\\n\\ndef get_ints():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef solve(N, K, X, A):\\n\\t(prefix, suffix) = ([0] * (N + 2), [0] * (N + 2))\\n\\tfor i in range(N):\\n\\t\\tprefix[i + 1] = prefix[i] | A[i]\\n\\tfor i in range(N - 1, -1, -1):\\n\\t\\tsuffix[i] = suffix[i + 1] | A[i]\\n\\tans = 0\\n\\tval = X ** K\\n\\tfor i in range(N):\\n\\t\\tans = max(ans, prefix[i] | A[i] * val | suffix[i + 1])\\n\\treturn ans\\n(N, K, X) = map(int, input().split())\\nA = get_ints()\\nprint(solve(N, K, X, A))\\n\", \"from sys import stdin\\ninput = stdin.readline\\n\\ndef get_or(a, b):\\n\\treturn a | b\\n\\nclass SegmentTree:\\n\\n\\tdef __init__(self, data, default=0, func=max):\\n\\t\\tself._default = default\\n\\t\\tself._func = func\\n\\t\\tself._len = len(data)\\n\\t\\tself._size = _size = 1 << (self._len - 1).bit_length()\\n\\t\\tself.data = [default] * (2 * _size)\\n\\t\\tself.data[_size:_size + self._len] = data\\n\\t\\tfor i in reversed(range(_size)):\\n\\t\\t\\tself.data[i] = func(self.data[i + i], self.data[i + i + 1])\\n\\n\\tdef __delitem__(self, idx):\\n\\t\\tself[idx] = self._default\\n\\n\\tdef __getitem__(self, idx):\\n\\t\\treturn self.data[idx + self._size]\\n\\n\\tdef __setitem__(self, idx, value):\\n\\t\\tidx += self._size\\n\\t\\tself.data[idx] = value\\n\\t\\tidx >>= 1\\n\\t\\twhile idx:\\n\\t\\t\\tself.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\\n\\t\\t\\tidx >>= 1\\n\\n\\tdef __len__(self):\\n\\t\\treturn self._len\\n\\n\\tdef query(self, start, stop):\\n\\t\\tstart += self._size\\n\\t\\tstop += self._size\\n\\t\\tres_left = res_right = self._default\\n\\t\\twhile start < stop:\\n\\t\\t\\tif start & 1:\\n\\t\\t\\t\\tres_left = self._func(res_left, self.data[start])\\n\\t\\t\\t\\tstart += 1\\n\\t\\t\\tif stop & 1:\\n\\t\\t\\t\\tstop -= 1\\n\\t\\t\\t\\tres_right = self._func(self.data[stop], res_right)\\n\\t\\t\\tstart >>= 1\\n\\t\\t\\tstop >>= 1\\n\\t\\treturn self._func(res_left, res_right)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn 'SegmentTree({0})'.format(self.data)\\n\\ndef f(a, k, x):\\n\\tst = SegmentTree(data=a, func=get_or, default=0)\\n\\tn = len(a)\\n\\tx = pow(x, k)\\n\\tcmax = st.query(0, n)\\n\\tfor i in range(len(a)):\\n\\t\\tst.__setitem__(i, a[i] * x)\\n\\t\\tcmax = max(cmax, st.query(0, n))\\n\\t\\tst.__setitem__(i, a[i])\\n\\treturn cmax\\n(n, k, x) = map(int, input().strip().split())\\na = list(map(int, input().strip().split()))\\nprint(f(a, k, x))\\n\", \"import sys\\n\\nclass IoTool:\\n\\tDEBUG = 0\\n\\n\\tdef _reader_dbg():\\n\\t\\twith open('./input.txt', 'r') as f:\\n\\t\\t\\tlines = f.readlines()\\n\\t\\tfor l in lines:\\n\\t\\t\\tyield l.strip()\\n\\n\\tdef _reader_oj():\\n\\t\\treturn iter(sys.stdin.read().split('\\\\n'))\\n\\treader = _reader_dbg() if DEBUG else _reader_oj()\\n\\n\\tdef read():\\n\\t\\treturn next(IoTool.reader)\\ninput = IoTool.read\\n\\ndef main():\\n\\t(n, k, x) = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tmul = 1\\n\\tfor i in range(k):\\n\\t\\tmul *= x\\n\\tif n == 1:\\n\\t\\tprint(a[0] * mul)\\n\\t\\treturn\\n\\t(pre, tail) = ([0] * n, [0] * n)\\n\\tpre[0] = a[0]\\n\\ttail[n - 1] = a[n - 1]\\n\\tfor i in range(1, n):\\n\\t\\tpre[i] = pre[i - 1] | a[i]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\ttail[i] = tail[i + 1] | a[i]\\n\\tanswer = max(pre[0] * mul | tail[1], pre[n - 2] | tail[n - 1] * mul)\\n\\tfor i in range(1, n - 1):\\n\\t\\tanswer = max(answer, a[i] * mul | pre[i - 1] | tail[i + 1])\\n\\tprint(answer)\\nmain()\\n\", \"(n, k, x) = map(int, input().split())\\na = [None] + list(map(int, input().split()))\\nprefix = [0] * (n + 2)\\nsuffix = [0] * (n + 2)\\nfor i in range(1, n + 1):\\n\\tprefix[i] = a[i] | prefix[i - 1]\\nfor i in range(n, 0, -1):\\n\\tsuffix[i] = a[i] | suffix[i + 1]\\nmul = x ** k\\nans = 0\\nfor i in range(1, n + 1):\\n\\tans = max(ans, prefix[i - 1] | a[i] * mul | suffix[i + 1])\\nprint(ans)\\n\", \"(n, k, x) = map(int, input().split())\\n(*a,) = map(int, input().split())\\nl = [0] * (n + 1)\\nr = [0] * (n + 1)\\nfor i in range(0, n):\\n\\tl[i + 1] = l[i] | a[i]\\n\\tr[n - i - 1] = r[n - i] | a[n - i - 1]\\nnum = x ** k\\nres = -1\\nfor i in range(0, n):\\n\\tres = max(l[i] | a[i] * num | r[i + 1], res)\\nprint(res)\\n\", \"import sys\\nimport os\\nfrom io import BytesIO, IOBase\\n\\ndef cel(n, k):\\n\\treturn n // k + (n % k != 0)\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(map(int, input().split()))\\n\\ndef lcm(a, b):\\n\\treturn abs(a * b) // math.gcd(a, b)\\n\\ndef prr(a, sep=' '):\\n\\tprint(sep.join(map(str, a)))\\n\\ndef dd():\\n\\treturn defaultdict(int)\\n\\ndef ddl():\\n\\treturn defaultdict(list)\\n\\ndef ddd():\\n\\treturn defaultdict(defaultdict(int))\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nfrom collections import defaultdict\\nfor _ in range(1):\\n\\t(n, k, x) = mi()\\n\\ta = li()\\n\\tmx = 0\\n\\tprefix = [0 for i in range(n)]\\n\\tsuffix = [0 for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tprefix[i] = (prefix[i - 1] if i - 1 >= 0 else 0) | a[i]\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tsuffix[i] = (suffix[i + 1] if i + 1 < n else 0) | a[i]\\n\\tfor i in range(n):\\n\\t\\ttmp1 = prefix[i - 1] if i - 1 >= 0 else 0\\n\\t\\ttmp2 = suffix[i + 1] if i + 1 < n else 0\\n\\t\\tmx = max(mx, tmp1 | tmp2 | a[i] * x ** k)\\n\\tprint(mx)\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inara():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n(n, k, x) = invr()\\nara = inara()\\nara.append(0)\\nara.reverse()\\nara.append(0)\\nara.reverse()\\nmul = int(math.pow(x, k))\\npref = [0] * (n + 2)\\nfor i in range(1, n + 1):\\n\\tpref[i] = pref[i - 1] | ara[i]\\nsuff = [0] * (n + 2)\\nfor i in range(n, 0, -1):\\n\\tsuff[i] = suff[i + 1] | ara[i]\\nans = 0\\nfor i in range(1, n + 1):\\n\\tans = max(ans, pref[i - 1] | ara[i] * mul | suff[i + 1])\\nprint(ans)\\n\", \"(n, k, x) = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nc = x ** k\\npr = [0]\\nsu = [0]\\nb = 0\\nfor i in range(n - 1):\\n\\tb = a[i] | b\\n\\tpr.append(b)\\nb = 0\\nfor i in range(n - 1, 0, -1):\\n\\tb = a[i] | b\\n\\tsu.append(b)\\nsu = su[::-1]\\nd = []\\nfor i in range(n):\\n\\td.append(pr[i] | a[i] * c | su[i])\\nprint(max(d))\\n\", \"import sys\\n(n, k, x) = [int(x) for x in sys.stdin.readline().split()]\\na = [int(x) for x in sys.stdin.readline().split()]\\ntl = 0\\nl = [0] * (n + 1)\\nfor i in range(n - 1, -1, -1):\\n\\ttl |= a[i]\\n\\tl[i] = tl\\nans = 0\\ntr = 0\\nfor i in range(0, n):\\n\\tta = tr | a[i] * x ** k | l[i + 1]\\n\\tans = ans if ans > ta else ta\\n\\ttr |= a[i]\\nprint(ans)\\n\", \"class Ortree:\\n\\n\\tdef __init__(self, n, As):\\n\\t\\tsize = 1\\n\\t\\twhile n > size:\\n\\t\\t\\tsize *= 2\\n\\t\\tself.size = size\\n\\t\\tdata = [0] * size + As[:] + [0] * (size - n)\\n\\t\\tfor idx in range(self.size - 1, 0, -1):\\n\\t\\t\\tidx2 = idx << 1\\n\\t\\t\\tdata[idx] = data[idx2] | data[idx2 + 1]\\n\\t\\tself.data = data\\n\\n\\tdef update(self, idx, val):\\n\\t\\tpos = idx + self.size\\n\\t\\tself.data[pos] = val\\n\\t\\tpos >>= 1\\n\\t\\twhile pos:\\n\\t\\t\\tpos2 = pos << 1\\n\\t\\t\\tself.data[pos] = self.data[pos2] | self.data[pos2 + 1]\\n\\t\\t\\tpos >>= 1\\n\\t\\treturn self.data[1]\\n\\ndef solve(n, k, x, As):\\n\\tAs.sort(reverse=True)\\n\\txk = x ** k\\n\\tif n == 1:\\n\\t\\tAs[0] *= xk\\n\\t\\treturn As[0]\\n\\tif is_simplecase(xk, As):\\n\\t\\tAs[0] *= xk\\n\\t\\treturn cumor(As)\\n\\treturn complexcase(n, xk, As)\\n\\ndef cumor(As):\\n\\tresult = 0\\n\\tfor a in As:\\n\\t\\tresult |= a\\n\\treturn result\\n\\ndef is_simplecase(xk, As):\\n\\tlen0 = len(bin(As[0] * xk))\\n\\tlen1 = len(bin(As[1] * xk))\\n\\treturn len0 > len1\\n\\ndef complexcase(n, xk, As):\\n\\tlen0 = len(bin(As[0] * xk))\\n\\tfor (i, a) in enumerate(As[1:], 1):\\n\\t\\tif len(bin(a * xk)) < len0:\\n\\t\\t\\tend = i\\n\\t\\t\\trest = cumor(As[end:])\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tend = n\\n\\t\\trest = 0\\n\\tortree = Ortree(end, As[:end])\\n\\trecord = rest\\n\\tfor i in range(end):\\n\\t\\tscore = ortree.update(i, As[i] * xk) | rest\\n\\t\\tif record < score:\\n\\t\\t\\trecord = score\\n\\t\\tortree.update(i, As[i])\\n\\treturn record\\n(n, k, x) = map(int, input().split())\\nAs = list(map(int, input().split()))\\nprint(solve(n, k, x, As))\\n\", \"import collections\\nimport time\\nimport os\\nimport sys\\nimport bisect\\nimport heapq\\nfrom typing import List\\nimport itertools\\n\\ndef blen(val):\\n\\ts = 0\\n\\twhile val > 0:\\n\\t\\ts += 1\\n\\t\\tval >>= 1\\n\\treturn s\\n\\ndef solve(N, K, X, A):\\n\\tleft = [0 for _ in range(N)]\\n\\tright = [0 for _ in range(N)]\\n\\tfor (i, v) in enumerate(A):\\n\\t\\tleft[i] = (left[i - 1] if i - 1 >= 0 else 0) | v\\n\\tfor i in range(N - 1, -1, -1):\\n\\t\\tright[i] = (right[i + 1] if i + 1 < N else 0) | A[i]\\n\\tans = 0\\n\\tfor (i, v) in enumerate(A):\\n\\t\\ta = left[i - 1] if i - 1 >= 0 else 0\\n\\t\\tb = right[i + 1] if i + 1 < N else 0\\n\\t\\tans = max(ans, a | b | v * X ** K)\\n\\treturn ans\\n(N, K, X) = map(int, input().split())\\nA = [int(x) for x in input().split()]\\nprint(solve(N, K, X, A))\\n\", \"(n, k, x) = map(int, input().strip().split())\\nnumbers = list(map(int, input().strip().split()))\\nfrom_b = [0 for i in range(n)]\\nfrom_e = [0 for i in range(n)]\\nor_no = [0 for i in range(n)]\\nfor j in range(1, n):\\n\\tfrom_b[j] = from_b[j - 1] | numbers[j - 1]\\n\\tfrom_e[n - j - 1] = from_e[n - j] | numbers[n - j]\\nfor j in range(n):\\n\\tor_no[j] = from_b[j] | from_e[j]\\nnumber = pow(x, k)\\nmaxa = 0\\nfor j in range(n):\\n\\tmaxa = max(maxa, numbers[j] * number | or_no[j])\\nprint(maxa)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3 1 2\\n1 1 1\\n\", \"4 2 3\\n1 2 4 8\\n\", \"2 1 2\\n12 9\\n\", \"2 1 2\\n12 7\\n\", \"3 1 3\\n3 2 0\\n\", \"5 10 8\\n1000000000 1000000000 1000000000 1000000000 1000000000\\n\", \"1 2 3\\n612635770\\n\", \"3 2 5\\n0 2 3\\n\", \"2 1 8\\n18 17\\n\", \"5 10 8\\n0 0 0 0 0\\n\", \"1 1 2\\n1\\n\", \"1 1 2\\n0\\n\", \"3 2 6\\n724148075 828984987 810015532\\n\", \"3 1 2\\n17 18 4\\n\", \"3 1 2\\n4 17 18\\n\", \"2 2 2\\n60 59\\n\", \"2 2 2\\n9 10\\n\", \"3 1 2\\n10 12 5\\n\", \"3 1 2\\n20 17 8\\n\", \"3 1 2\\n5 12 10\\n\", \"3 1 8\\n10 17 18\\n\", \"3 1 2\\n17 20 28\\n\", \"5 1 3\\n1 5 13 8 16\\n\", \"1 1 2\\n1\\n\", \"2 1 2\\n12 9\\n\", \"2 2 2\\n9 10\\n\", \"3 1 2\\n17 18 4\\n\", \"1 2 3\\n612635770\\n\", \"3 1 2\\n5 12 10\\n\", \"5 10 8\\n0 0 0 0 0\\n\", \"3 1 3\\n3 2 0\\n\", \"5 10 8\\n1000000000 1000000000 1000000000 1000000000 1000000000\\n\", \"2 2 2\\n60 59\\n\", \"5 1 3\\n1 5 13 8 16\\n\", \"2 1 2\\n12 7\\n\", \"3 1 2\\n17 20 28\\n\", \"3 2 6\\n724148075 828984987 810015532\\n\", \"3 2 5\\n0 2 3\\n\", \"3 1 8\\n10 17 18\\n\", \"3 1 2\\n20 17 8\\n\", \"2 1 8\\n18 17\\n\", \"3 1 2\\n4 17 18\\n\", \"3 1 2\\n10 12 5\\n\", \"1 1 2\\n0\\n\", \"1 1 2\\n2\\n\", \"2 1 2\\n4 9\\n\", \"3 1 2\\n17 31 4\\n\", \"1 2 3\\n1079169440\\n\", \"3 1 2\\n5 12 11\\n\", \"5 10 8\\n1 0 0 0 0\\n\", \"3 1 2\\n3 2 0\\n\", \"3 1 2\\n17 20 54\\n\", \"3 2 5\\n1 2 3\\n\", \"3 1 2\\n40 17 8\\n\", \"2 1 16\\n18 17\\n\", \"3 1 4\\n4 17 18\\n\", \"3 1 2\\n1 0 1\\n\", \"4 2 3\\n1 2 4 11\\n\", \"2 1 2\\n4 7\\n\", \"1 3 3\\n1079169440\\n\", \"3 1 2\\n0 12 11\\n\", \"3 2 5\\n1 2 2\\n\", \"3 1 3\\n10 17 30\\n\", \"2 1 30\\n18 17\\n\", \"3 1 4\\n4 9 18\\n\", \"3 1 2\\n0 0 1\\n\", \"3 4 5\\n1 2 2\\n\", \"2 1 2\\n18 17\\n\", \"3 3 5\\n1 2 2\\n\", \"3 3 5\\n1 4 2\\n\", \"3 3 5\\n0 4 2\\n\", \"3 3 5\\n0 4 1\\n\", \"3 3 9\\n0 4 1\\n\", \"3 3 9\\n0 7 1\\n\", \"1 1 1\\n1\\n\", \"2 1 2\\n18 9\\n\", \"2 1 2\\n9 10\\n\", \"3 1 2\\n17 18 8\\n\", \"1 2 4\\n612635770\\n\", \"3 1 2\\n5 0 10\\n\", \"3 1 6\\n3 2 0\\n\", \"5 10 8\\n1000000000 1010000000 1000000000 1000000000 1000000000\\n\", \"3 1 2\\n32 20 28\\n\", \"3 2 10\\n724148075 828984987 810015532\\n\", \"3 2 5\\n0 2 4\\n\", \"3 1 8\\n10 21 18\\n\", \"2 1 8\\n18 28\\n\", \"3 1 2\\n6 17 18\\n\", \"4 2 3\\n0 2 4 8\\n\", \"1 2 2\\n2\\n\", \"1 2 3\\n1540119800\\n\", \"3 2 2\\n3 2 0\\n\", \"3 2 3\\n1 2 3\\n\", \"3 1 2\\n40 34 8\\n\", \"2 2 16\\n18 17\\n\", \"3 1 4\\n4 17 3\\n\", \"3 1 2\\n2 0 1\\n\", \"2 2 2\\n4 7\\n\", \"3 1 5\\n1 2 2\\n\", \"3 1 3\\n10 6 30\\n\", \"3 1 2\\n15 17 8\\n\", \"2 1 30\\n18 32\\n\", \"3 4 5\\n1 2 4\\n\", \"3 1 2\\n51 17 9\\n\", \"2 1 1\\n18 17\\n\", \"3 3 8\\n1 2 2\\n\", \"3 3 8\\n0 4 1\\n\", \"3 3 9\\n0 10 1\\n\", \"2 1 2\\n29 9\\n\", \"1 2 2\\n612635770\\n\", \"5 1 3\\n1 5 13 14 30\\n\", \"3 1 2\\n32 20 56\\n\", \"2 1 8\\n18 29\\n\", \"1 2 2\\n3\\n\", \"1 1 3\\n1540119800\\n\", \"3 3 2\\n3 2 0\\n\", \"2 2 16\\n18 20\\n\", \"3 1 5\\n0 2 2\\n\", \"3 1 3\\n10 6 52\\n\", \"2 1 30\\n18 18\\n\", \"3 6 5\\n1 2 4\\n\", \"3 3 8\\n2 2 2\\n\", \"3 3 9\\n0 10 0\\n\", \"3 1 3\\n10 17 18\\n\", \"3 1 2\\n38 17 8\\n\", \"4 2 3\\n0 2 4 11\\n\", \"3 1 2\\n38 17 9\\n\", \"5 1 3\\n1 5 13 14 16\\n\", \"3 1 2\\n10 12 10\\n\", \"2 1 2\\n0 9\\n\", \"3 1 2\\n17 31 0\\n\", \"3 1 3\\n11 17 18\\n\", \"3 1 2\\n0 2 11\\n\", \"3 1 3\\n4 9 18\\n\", \"3 1 2\\n0 0 2\\n\", \"3 3 1\\n1 4 2\\n\", \"1 1 1\\n2\\n\", \"2 1 2\\n9 6\\n\", \"3 1 2\\n21 18 8\\n\", \"3 1 0\\n5 0 10\\n\", \"3 1 6\\n3 2 1\\n\", \"3 2 5\\n0 3 4\\n\", \"3 1 2\\n10 12 1\\n\", \"2 1 2\\n1 9\\n\", \"3 1 2\\n1 1 1\\n\", \"4 2 3\\n1 2 4 8\\n\"], \"outputs\": [\"3\\n\", \"79\\n\", \"30\\n\", \"31\\n\", \"11\\n\", \"1073741825000000000\\n\", \"5513721930\\n\", \"75\\n\", \"154\\n\", \"0\\n\", \"2\\n\", \"0\\n\", \"29996605423\\n\", \"54\\n\", \"54\\n\", \"252\\n\", \"46\\n\", \"31\\n\", \"62\\n\", \"31\\n\", \"155\\n\", \"62\\n\", \"63\\n\", \"2\\n\", \"30\\n\", \"46\\n\", \"54\\n\", \"5513721930\\n\", \"31\\n\", \"0\\n\", \"11\\n\", \"1073741825000000000\\n\", \"252\\n\", \"63\\n\", \"31\\n\", \"62\\n\", \"29996605423\\n\", \"75\\n\", \"155\\n\", \"62\\n\", \"154\\n\", \"54\\n\", \"31\\n\", \"0\\n\", \"4\\n\", \"22\\n\", \"63\\n\", \"9712524960\\n\", \"31\\n\", \"1073741824\\n\", \"7\\n\", \"125\\n\", \"75\\n\", \"89\\n\", \"305\\n\", \"93\\n\", \"3\\n\", \"103\\n\", \"15\\n\", \"29137574880\\n\", \"30\\n\", \"51\\n\", \"91\\n\", \"541\\n\", \"77\\n\", \"2\\n\", \"1251\\n\", \"53\\n\", \"251\\n\", \"503\\n\", \"502\\n\", \"501\\n\", \"2917\\n\", \"5103\\n\", \"1\\n\", \"45\\n\", \"29\\n\", \"61\\n\", \"9802172320\\n\", \"21\\n\", \"18\\n\", \"1084479243240000000\\n\", \"92\\n\", \"83742425071\\n\", \"102\\n\", \"186\\n\", \"242\\n\", \"55\\n\", \"78\\n\", \"8\\n\", \"13861078200\\n\", \"14\\n\", \"27\\n\", \"122\\n\", \"4625\\n\", \"71\\n\", \"5\\n\", \"28\\n\", \"11\\n\", \"94\\n\", \"47\\n\", \"978\\n\", \"2503\\n\", \"127\\n\", \"19\\n\", \"1027\\n\", \"2049\\n\", \"7291\\n\", \"59\\n\", \"2450543080\\n\", \"95\\n\", \"124\\n\", \"250\\n\", \"12\\n\", \"4620359400\\n\", \"26\\n\", \"5138\\n\", \"10\\n\", \"158\\n\", \"542\\n\", \"62503\\n\", \"1026\\n\", \"7290\\n\", \"63\\n\", \"93\\n\", \"103\\n\", \"93\\n\", \"63\\n\", \"30\\n\", \"18\\n\", \"63\\n\", \"63\\n\", \"22\\n\", \"63\\n\", \"4\\n\", \"7\\n\", \"2\\n\", \"22\\n\", \"61\\n\", \"15\\n\", \"19\\n\", \"103\\n\", \"29\\n\", \"19\\n\", \"3\\n\", \"79\\n\"]}",
    "difficulty": "MEDIUM_HARD",
    "raw_tags": "['brute force', 'greedy']",
    "name": null,
    "source": "codeforces",
    "tags": "['Complete search', 'Greedy algorithms']",
    "skill_types": "['Complete search', 'Greedy algorithms']",
    "url": "https://codeforces.com/problemset/problem/578/B",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": "2019-12-31",
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Given a string Str which may contains lowercase and uppercase chracters. The task is to remove all duplicate characters from the string and find the resultant string. The order of remaining characters in the output should be same as in the original string.\nExample 1:\nInput:\nStr = geeksforgeeks\nOutput: geksfor\nExplanation: After removing duplicate\ncharacters such as e, k, g, s, we have\nstring as \"geksfor\".\nExample 2:\nInput:\nStr = HappyNewYear\nOutput: HapyNewYr\nExplanation: After removing duplicate\ncharacters such as p, e, a, we have\nstring as \"HapyNewYr\".\nYour Task:\nComplete the function removeDuplicates() which takes a string str, as input parameters and returns a string denoting the answer. You don't to print answer or take inputs.\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(N)\nConstraints:\n1 ≤ N ≤ 10^{5}\nString contains uppercase and lowercase english letters.",
    "solutions": "[\"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tasci = [0] * 256\\n\\t\\ts = ''\\n\\t\\tfor i in range(len(str)):\\n\\t\\t\\tx = ord(str[i])\\n\\t\\t\\tasci[x] += 1\\n\\t\\tfor i in range(len(str)):\\n\\t\\t\\tx = ord(str[i])\\n\\t\\t\\tif asci[x] > 0:\\n\\t\\t\\t\\ts += str[i]\\n\\t\\t\\t\\tasci[x] = 0\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tans = ''\\n\\t\\tli = [0] * 256\\n\\t\\tfor i in str:\\n\\t\\t\\tind = ord(i) - ord('a')\\n\\t\\t\\tif li[ind] == 0:\\n\\t\\t\\t\\tli[ind] = 1\\n\\t\\t\\t\\tans += i\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tlst = []\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in lst:\\n\\t\\t\\t\\tlst.append(i)\\n\\t\\treturn ''.join(lst)\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\t(m, p) = ({}, '')\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in m:\\n\\t\\t\\t\\tp += i\\n\\t\\t\\tm[i] = 1\\n\\t\\treturn p\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tf = ''\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in f:\\n\\t\\t\\t\\tf = f + i\\n\\t\\treturn f\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tstr1 = ''\\n\\t\\tfor i in range(len(str)):\\n\\t\\t\\tif str[i] not in str1:\\n\\t\\t\\t\\tstr1 = str1 + str[i]\\n\\t\\treturn str1\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tfrom collections import defaultdict\\n\\t\\tdic = defaultdict(int)\\n\\t\\tans = ''\\n\\t\\tfor i in str:\\n\\t\\t\\tif dic[i] == 0:\\n\\t\\t\\t\\tans += i\\n\\t\\t\\tdic[i] += 1\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tl = list(str)\\n\\t\\tl1 = []\\n\\t\\tfor i in l:\\n\\t\\t\\tif i not in l1:\\n\\t\\t\\t\\tl1.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpass\\n\\t\\tx = ''.join(l1)\\n\\t\\treturn x\\n\", \"from collections import OrderedDict\\n\\nclass Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ta = []\\n\\t\\tb = ''\\n\\t\\tfor i in str:\\n\\t\\t\\ta.append(i)\\n\\t\\ta = list(OrderedDict.fromkeys(a))\\n\\t\\tfor i in a:\\n\\t\\t\\tb += i\\n\\t\\treturn b\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ta = {}\\n\\t\\tb = ''\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in a:\\n\\t\\t\\t\\tb += i\\n\\t\\t\\ta[i] = 1\\n\\t\\treturn b\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tms = ''\\n\\t\\td = {}\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in d:\\n\\t\\t\\t\\tms += i\\n\\t\\t\\t\\td[i] = 1\\n\\t\\treturn ms\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tarr = [char for char in str]\\n\\t\\tb = list()\\n\\t\\tfor i in arr:\\n\\t\\t\\tif i not in b:\\n\\t\\t\\t\\tb.append(i)\\n\\t\\treturn ''.join(b)\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tp = ''\\n\\t\\tfor char in str:\\n\\t\\t\\tif char not in p:\\n\\t\\t\\t\\tp = p + char\\n\\t\\treturn p\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tfreq = {}\\n\\t\\ts = ''\\n\\t\\tfor i in range(len(str)):\\n\\t\\t\\tif str[i] not in freq:\\n\\t\\t\\t\\ts += str[i]\\n\\t\\t\\t\\tfreq[str[i]] = i\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tl = list(str)\\n\\t\\tlst = []\\n\\t\\ts = set()\\n\\t\\tfor i in l:\\n\\t\\t\\tif i not in s:\\n\\t\\t\\t\\ts.add(i)\\n\\t\\t\\t\\tlst.append(i)\\n\\t\\treturn ''.join(lst)\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, s: str) -> str:\\n\\t\\tseen = set()\\n\\t\\tans = []\\n\\t\\tfor c in s:\\n\\t\\t\\tif c not in seen:\\n\\t\\t\\t\\tans.append(c)\\n\\t\\t\\t\\tseen.add(c)\\n\\t\\treturn ''.join(ans)\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tunique = set()\\n\\t\\tres = []\\n\\t\\tfor c in str:\\n\\t\\t\\tif c not in unique:\\n\\t\\t\\t\\tres.append(c)\\n\\t\\t\\t\\tunique.add(c)\\n\\t\\treturn ''.join(res)\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str: str) -> str:\\n\\t\\thash = [0] * 256\\n\\t\\tans = ''\\n\\t\\tfor c in str:\\n\\t\\t\\tif hash[ord(c)] == 0:\\n\\t\\t\\t\\tans += c\\n\\t\\t\\t\\thash[ord(c)] += 1\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, Str):\\n\\t\\tunique_chars = set()\\n\\t\\toutput = ''\\n\\t\\tfor char in Str:\\n\\t\\t\\tif char not in unique_chars:\\n\\t\\t\\t\\tunique_chars.add(char)\\n\\t\\t\\t\\toutput += char\\n\\t\\treturn output\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, s):\\n\\t\\tfor i in range(len(s)):\\n\\t\\t\\ts[i].lower()\\n\\t\\td = {}\\n\\t\\tfor i in s:\\n\\t\\t\\td[i] = 1\\n\\t\\tt = ''\\n\\t\\tfor i in s:\\n\\t\\t\\tif d[i] == 1:\\n\\t\\t\\t\\tt += i\\n\\t\\t\\t\\td[i] -= 1\\n\\t\\treturn t\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, string):\\n\\t\\thash_set = set()\\n\\t\\tresult = ''\\n\\t\\tfor char in string:\\n\\t\\t\\tif char not in hash_set:\\n\\t\\t\\t\\tresult += char\\n\\t\\t\\t\\thash_set.add(char)\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tletters = []\\n\\t\\toutput = ''\\n\\t\\tfor i in range(len(str)):\\n\\t\\t\\tif str[i] in letters:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\toutput += str[i]\\n\\t\\t\\t\\tletters.append(str[i])\\n\\t\\treturn output\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, s):\\n\\t\\tresult = ''\\n\\t\\tfor char in s:\\n\\t\\t\\tif char not in result:\\n\\t\\t\\t\\tresult += char\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tres = ''\\n\\t\\tfor s in str:\\n\\t\\t\\tif s not in res:\\n\\t\\t\\t\\tres = res + s\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tseen = set()\\n\\t\\tresult = ''\\n\\t\\tfor char in str:\\n\\t\\t\\tif char not in seen:\\n\\t\\t\\t\\tresult += char\\n\\t\\t\\t\\tseen.add(char)\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ta = []\\n\\t\\ts = ''\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in a:\\n\\t\\t\\t\\ta.append(i)\\n\\t\\tfor i in a:\\n\\t\\t\\ts += i\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ta = list(str)\\n\\t\\tl = []\\n\\t\\tl.append(a[0])\\n\\t\\tfor i in range(1, len(a)):\\n\\t\\t\\tif a[i] not in l:\\n\\t\\t\\t\\tl.append(a[i])\\n\\t\\ts = ''.join(l)\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, st):\\n\\t\\td = {}\\n\\t\\ts = ''\\n\\t\\tfor i in st:\\n\\t\\t\\tif i not in d:\\n\\t\\t\\t\\ts += i\\n\\t\\t\\t\\td[i] = 1\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ts = ''\\n\\t\\tstr = list(str)\\n\\t\\tl = []\\n\\t\\tfor i in str:\\n\\t\\t\\tif i in l:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tl.append(i)\\n\\t\\tfor i in l:\\n\\t\\t\\ts += i\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ts = ''\\n\\t\\tlength = len(str)\\n\\t\\tfor i in range(length):\\n\\t\\t\\tc = str[i]\\n\\t\\t\\tif c not in s:\\n\\t\\t\\t\\ts += c\\n\\t\\treturn s\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tresult = []\\n\\t\\tsample = ''\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in result:\\n\\t\\t\\t\\tresult.append(i)\\n\\t\\tfor i in result:\\n\\t\\t\\tsample += i\\n\\t\\treturn sample\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\thsh = set()\\n\\t\\tT = ''\\n\\t\\tfor ch in str:\\n\\t\\t\\tif ch in hsh:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tT += ch\\n\\t\\t\\t\\thsh.add(ch)\\n\\t\\treturn T\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\td = {}\\n\\t\\tres = ''\\n\\t\\tfor char in str:\\n\\t\\t\\td[char] = d.get(char, 0) + 1\\n\\t\\t\\tif d[char] == 1:\\n\\t\\t\\t\\tres += char\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tl = list(str)\\n\\t\\tdup = []\\n\\t\\ts = ''\\n\\t\\tfor i in l:\\n\\t\\t\\tif i not in dup:\\n\\t\\t\\t\\tdup.append(i)\\n\\t\\tfor j in dup:\\n\\t\\t\\treturn s.join(dup)\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tres = ''\\n\\t\\tmyDict = {}\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in myDict:\\n\\t\\t\\t\\tres += i\\n\\t\\t\\t\\tmyDict[i] = 1\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\ts = list(str)\\n\\t\\tlook = {}\\n\\t\\tp = ''\\n\\t\\tfor i in s:\\n\\t\\t\\tif i not in look:\\n\\t\\t\\t\\tp += i\\n\\t\\t\\tlook[i] = 1\\n\\t\\treturn p\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tl = []\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in l:\\n\\t\\t\\t\\tl.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcontinue\\n\\t\\ta = ''.join(l)\\n\\t\\treturn a\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tl = []\\n\\t\\tfor i in str:\\n\\t\\t\\tif i in l:\\n\\t\\t\\t\\tpass\\n\\t\\t\\telse:\\n\\t\\t\\t\\tl.append(i)\\n\\t\\tjoint = ''.join(l)\\n\\t\\treturn joint\\n\", \"class Solution:\\n\\n\\tdef removeDuplicates(self, str):\\n\\t\\tlook_up = {}\\n\\t\\tresult = ''\\n\\t\\tfor i in str:\\n\\t\\t\\tif i not in look_up.keys():\\n\\t\\t\\t\\tresult = result + i\\n\\t\\t\\t\\tlook_up[i] = 1\\n\\t\\treturn result\\n\"]",
    "starter_code": "#User function Template for python3\n\nclass Solution:\n\n\n\n\t\n\n\tdef removeDuplicates(self,str):\n\n\t    # code here",
    "input_output": "{\"inputs\": [\"Str = geeksforgeeks\", \"Str = HappyNewYear\"], \"outputs\": [\"geksfor\", \"HapyNewYr\"]}",
    "difficulty": "EASY",
    "raw_tags": "['Strings', 'Arrays', 'Data Structures']",
    "name": null,
    "source": "geeksforgeeks",
    "tags": "['String algorithms', 'Data structures']",
    "skill_types": "['Data structures']",
    "url": "https://practice.geeksforgeeks.org/problems/remove-all-duplicates-from-a-given-string4321/1",
    "Expected Auxiliary Space": "O(N)",
    "time_limit": null,
    "date": null,
    "picture_num": "0",
    "memory_limit": null,
    "Expected Time Complexity": "O(N)"
  },
  {
    "question": "Space Coconut Crab\n\nSpace coconut crab\n\nEnglish text is not available in this practice contest.\n\nKen Marine Blue is a space hunter who travels through the entire galaxy in search of space coconut crabs. The space coconut crab is the largest crustacean in the universe, and it is said that the body length after growth is 400 meters or more, and if you spread your legs, it will reach 1,000 meters or more. Many people have already witnessed the space coconut crab, but none have succeeded in catching it.\n\nThrough a long-term study, Ken uncovered important facts about the ecology of space coconut crabs. Surprisingly, the space coconut crab did the same thing as the latest warp technology called phase transition navigation, and lived back and forth between normal space and hyperspace. Furthermore, it was found that it takes a long time for the space coconut crab to warp out from the hyperspace to the normal space, and that it cannot move to the hyperspace for a while after the warp out.\n\nSo Ken finally decided to catch the space coconut crab. The strategy is as follows. First, we observe the energy of the space coconut crab as it plunges from normal space into hyperspace. When this energy is e, it is known that the coordinates (x, y, z) at which the space coconut crab warps out of hyperspace satisfy the following conditions.\n\n* x, y, z are all non-negative integers.\n* x + y2 + z3 = e.\n* Minimize the value of x + y + z under the above conditions.\n\n\n\nThese conditions alone do not always uniquely determine the coordinates, but it is certain that the coordinates to warp out are on the plane x + y + z = m, where m is the minimum value of x + y + z. Is. Therefore, a barrier of sufficient size is placed on this plane. Then, the space coconut crab will warp out to the place where the barrier is stretched. Space coconut crabs affected by the barrier get stuck. It is a setup to capture it with the weapon breaker, which is a state-of-the-art spacecraft operated by Ken.\n\nThe barrier can only be set once, so it cannot fail. So Ken decided to use a calculator to carry out his mission. Your job is to write a program that finds the plane x + y + z = m to which the barrier should be placed when the energy for the space coconut crab to enter the hyperspace is given. Your program will be accepted when it outputs the correct results for all of the prepared test cases.\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of only one row and contains one positive integer e (e ≤ 1,000,000). This represents the energy when the space coconut crab rushes into hyperspace. The input ends when e = 0, which is not included in the dataset.\n\nOutput\n\nFor each dataset, output the value of m on one line. The output must not contain any other characters.\n\nSample Input\n\n\n1\n2\nFour\n27\n300\n1250\n0\n\n\nOutput for the Sample Input\n\n\n1\n2\n2\n3\n18\n44\n\n\n\n\n\n\nExample\n\nInput\n\n1\n2\n4\n27\n300\n1250\n0\n\n\nOutput\n\n1\n2\n2\n3\n18\n44",
    "solutions": "[\"import math\\n\\ndef solve(e):\\n\\tk = 2 ** 32\\n\\tfor z in range(100, -1, -1):\\n\\t\\tz3 = z * z * z\\n\\t\\tif z3 > e:\\n\\t\\t\\tcontinue\\n\\t\\te2 = e - z3\\n\\t\\tylm = int(math.sqrt(e2))\\n\\t\\txzlm = 3 * z * z + 3 * z + 1\\n\\t\\tfor y in range(ylm, -1, -1):\\n\\t\\t\\ty2 = y * y\\n\\t\\t\\tif e2 > (y + 1) * (y + 1):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\te3 = e2 - y2\\n\\t\\t\\txylm = 2 * y + 1\\n\\t\\t\\tx = e3\\n\\t\\t\\tif x > xylm or x > xzlm:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tk = min(k, x + y + z)\\n\\treturn k\\n\\ndef main():\\n\\twhile True:\\n\\t\\ta = int(input())\\n\\t\\tif a == 0:\\n\\t\\t\\tbreak\\n\\t\\tprint(solve(a))\\nmain()\\n\", \"import math\\ntarg = int(input())\\n(y, z) = (0, 0)\\nwhile True:\\n\\tminans = float('inf')\\n\\tfor n in range(math.ceil(targ ** (1 / 3)) + 1):\\n\\t\\tif minans == 0:\\n\\t\\t\\tbreak\\n\\t\\tif targ - n ** 3 >= 0:\\n\\t\\t\\tm = int((targ - n ** 3) ** (1 / 2))\\n\\t\\telse:\\n\\t\\t\\tm = 0\\n\\t\\tif n ** 3 + m ** 2 > targ:\\n\\t\\t\\tbreak\\n\\t\\tif minans > targ - (n ** 3 + m ** 2) + n + m:\\n\\t\\t\\tminans = targ - (n ** 3 + m ** 2) + n + m\\n\\tif minans != float('inf'):\\n\\t\\tprint(minans)\\n\\telse:\\n\\t\\tprint(y + z)\\n\\ttarg = int(input())\\n\\tif targ == 0:\\n\\t\\tbreak\\n\", \"from math import floor, sqrt\\ncubics = [x * x * x for x in range(101)]\\nsquares = [x * x for x in range(1000)]\\nwhile True:\\n\\tm = 1000000\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tfor z in range(len(cubics)):\\n\\t\\tif e < cubics[z]:\\n\\t\\t\\tbreak\\n\\t\\ttmp = e - cubics[z]\\n\\t\\ty = floor(sqrt(tmp))\\n\\t\\tx = tmp - y ** 2\\n\\t\\tm = min(m, x + y + z)\\n\\tprint(m)\\n\", \"import sys\\ninf = 1 << 30\\n\\ndef solve():\\n\\twhile 1:\\n\\t\\te = int(sys.stdin.readline().rstrip())\\n\\t\\tif e == 0:\\n\\t\\t\\treturn\\n\\t\\tans = inf\\n\\t\\tfor z in range(int(e ** (1 / 3)) + 10):\\n\\t\\t\\trest = e - z ** 3\\n\\t\\t\\tif rest < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ty = int(rest ** 0.5)\\n\\t\\t\\tx = rest - y ** 2\\n\\t\\t\\tans = min(ans, x + y + z)\\n\\t\\tprint(ans)\\nsolve()\\n\", \"while 1:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\t(m, z) = (10 ** 15, 0)\\n\\twhile z ** 3 <= e:\\n\\t\\ty = int((e - z ** 3) ** 0.5)\\n\\t\\tx = e - z ** 3 - y ** 2\\n\\t\\tm = min(m, x + y + z)\\n\\t\\tz += 1\\n\\tprint(m)\\n\", \"import math\\nx = 0\\nwhile True:\\n\\tx = int(input())\\n\\tif x == 0:\\n\\t\\tbreak\\n\\tans = 1000000\\n\\tfor i in range(x + 1):\\n\\t\\tif i * i * i > x:\\n\\t\\t\\tbreak\\n\\t\\tj = math.floor(math.sqrt(x - i * i * i))\\n\\t\\tans = min(ans, i + j + x - i * i * i - j * j)\\n\\tprint(int(ans))\\n\", \"import math\\ne = int(input())\\nwhile e > 0:\\n\\tz = 0\\n\\tt = z ** 3\\n\\tf = e - t\\n\\tq = math.sqrt(f)\\n\\ty = int(q)\\n\\tif q - y > 0.999999:\\n\\t\\ty += 1\\n\\tx = y * y\\n\\tx = f - x\\n\\tm = x + y + z\\n\\twhile t <= e:\\n\\t\\tf = e - t\\n\\t\\tq = math.sqrt(f)\\n\\t\\ty = int(q)\\n\\t\\tif q - y > 0.999999:\\n\\t\\t\\ty += 1\\n\\t\\tx = y * y\\n\\t\\tx = f - x\\n\\t\\tl = x + y + z\\n\\t\\tif l < m:\\n\\t\\t\\tm = l\\n\\t\\tz += 1\\n\\t\\tt = z ** 3\\n\\tprint(m)\\n\\te = int(input())\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\t(z, ans) = (0, float('inf'))\\n\\twhile z ** 3 <= e:\\n\\t\\tr = e - z ** 3\\n\\t\\ty = int(r ** 0.5)\\n\\t\\tx = r - y ** 2\\n\\t\\tans = min(ans, x + y + z)\\n\\t\\tz += 1\\n\\tprint(ans)\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tm = e\\n\\tz = 0\\n\\twhile z ** 3 <= e:\\n\\t\\ty = int((e - z ** 3) ** 0.5)\\n\\t\\tx = e - z ** 3 - y ** 2\\n\\t\\tm = min(m, x + y + z)\\n\\t\\tz += 1\\n\\tprint(m)\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tmz = int(e ** (1 / 3)) + 1\\n\\tL = []\\n\\tfor k in range(mz + 1):\\n\\t\\tek = e - k ** 3\\n\\t\\tif ek < 0:\\n\\t\\t\\tbreak\\n\\t\\tj = int(ek ** 0.5)\\n\\t\\ti = ek - j ** 2\\n\\t\\tif i >= 0 and j >= 0 and (k >= 0):\\n\\t\\t\\tL.append(i + j + k)\\n\\tprint(min(L))\\n\", \"from math import sqrt\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tm = e\\n\\tfor z in range(e):\\n\\t\\tif z ** 3 > e:\\n\\t\\t\\tbreak\\n\\t\\ttemp = e - z ** 3\\n\\t\\ty = int(sqrt(temp))\\n\\t\\tx = temp - y ** 2\\n\\t\\tm = min(m, x + y + z)\\n\\tprint(m)\\n\", \"import math\\nwhile True:\\n\\tE = int(input())\\n\\tif E == 0:\\n\\t\\tbreak\\n\\tans = 10 ** 10\\n\\tz = 0\\n\\twhile z ** 3 <= E:\\n\\t\\ty = int(math.sqrt(E - z ** 3))\\n\\t\\tx = E - z ** 3 - y ** 2\\n\\t\\tans = min(x + y + z, ans)\\n\\t\\tz += 1\\n\\tprint(ans)\\n\", \"def cube(x):\\n\\ti = 1\\n\\twhile True:\\n\\t\\tif i ** 3 > x:\\n\\t\\t\\treturn i - 1\\n\\t\\telse:\\n\\t\\t\\ti += 1\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tans = pow(10, 16)\\n\\tz_max = cube(e)\\n\\tfor z in range(z_max + 1):\\n\\t\\ty = int(pow(e - z ** 3, 1 / 2))\\n\\t\\tans = min(ans, e - y * y + y - z * z * z + z)\\n\\tprint(ans)\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\texit()\\n\\tans = 10 ** 20\\n\\tfor i in range(int(e ** 1 / 3 + 1)):\\n\\t\\tif e - i ** 3 < 0:\\n\\t\\t\\tbreak\\n\\t\\tansk = 0\\n\\t\\tansk += i\\n\\t\\tansk += int((e - i ** 3) ** 0.5)\\n\\t\\tansk += e - i ** 3 - int((e - i ** 3) ** 0.5) ** 2\\n\\t\\tans = min(ans, ansk)\\n\\tprint(ans)\\n\", \"from math import floor\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tans = 10 ** 10\\n\\tz = 0\\n\\twhile z ** 3 <= e:\\n\\t\\ty = floor((e - z ** 3) ** 0.5)\\n\\t\\tx = e - y ** 2 - z ** 3\\n\\t\\tans = min(ans, x + y + z)\\n\\t\\tz += 1\\n\\tprint(ans)\\n\", \"import math\\nwhile 1:\\n\\te = int(input().strip())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tm = e\\n\\tz = 0\\n\\twhile z ** 3 <= e:\\n\\t\\ty = int(math.sqrt(e - z ** 3))\\n\\t\\tx = e - y ** 2 - z ** 3\\n\\t\\tif x < 0:\\n\\t\\t\\tbreak\\n\\t\\tif m > x + y + z:\\n\\t\\t\\tm = x + y + z\\n\\t\\tz += 1\\n\\tprint(m)\\n\", \"import sys\\ninf = 1 << 30\\nw = 100\\n\\ndef solve():\\n\\twhile 1:\\n\\t\\te = int(sys.stdin.readline().rstrip())\\n\\t\\tif e == 0:\\n\\t\\t\\treturn\\n\\t\\tans = inf\\n\\t\\tz0 = int(e ** (1 / 3))\\n\\t\\tfor z in range(max(0, z0 - w), z0 + w):\\n\\t\\t\\tif e - z ** 3 < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ty0 = int((e - z ** 3) ** 0.5)\\n\\t\\t\\tfor y in range(max(0, y0 - w), y0 + w):\\n\\t\\t\\t\\tx = e - z ** 3 - y ** 2\\n\\t\\t\\t\\tif x < 0:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tans = min(ans, x + y + z)\\n\\t\\tprint(ans)\\nsolve()\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tans = float('inf')\\n\\tmax_z = int(e ** (1 / 3) + 1e-06)\\n\\tfor z in range(max_z, -1, -1):\\n\\t\\ty = int((e - z ** 3) ** 0.5 + 1e-06)\\n\\t\\tans = min(ans, e - y ** 2 - z ** 3 + y + z)\\n\\tprint(ans)\\n\", \"from math import sqrt\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tans = e\\n\\tfor z in range(e):\\n\\t\\tif z ** 3 > e:\\n\\t\\t\\tbreak\\n\\t\\ty = int(sqrt(e - z ** 3))\\n\\t\\tx = e - (z ** 3 + y ** 2)\\n\\t\\tans = min(ans, x + y + z)\\n\\tprint(ans)\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\n\\ndef LI():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef main():\\n\\trr = []\\n\\twhile True:\\n\\t\\tn = I()\\n\\t\\tif n == 0:\\n\\t\\t\\tbreak\\n\\t\\tr = n\\n\\t\\tfor i in range(n):\\n\\t\\t\\tt = i ** 3\\n\\t\\t\\tif t > n:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tu = n - t\\n\\t\\t\\ts = math.floor(u ** 0.5)\\n\\t\\t\\tv = u - s ** 2\\n\\t\\t\\ttr = i + s + v\\n\\t\\t\\tif r > tr:\\n\\t\\t\\t\\tr = tr\\n\\t\\trr.append(r)\\n\\treturn '\\\\n'.join(map(str, rr))\\nprint(main())\\n\", \"from math import floor\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tquit()\\n\\tans = e\\n\\tfor i in range(0, e):\\n\\t\\tif i ** 3 > e:\\n\\t\\t\\tbreak\\n\\t\\tj = floor((e - i ** 3) ** 0.5)\\n\\t\\tk = e - i ** 3 - j ** 2 + i + j\\n\\t\\tif k < ans:\\n\\t\\t\\tans = k\\n\\tprint(ans)\\n\", \"import math\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tr = 1 << 30\\n\\tz = 0\\n\\twhile z ** 3 <= e:\\n\\t\\tc = int(math.sqrt(e - z ** 3))\\n\\t\\tr = min(e - z ** 3 - c ** 2 + c + z, r)\\n\\t\\tz += 1\\n\\tprint(r)\\n\", \"def main():\\n\\twhile True:\\n\\t\\te = int(input())\\n\\t\\tif e == 0:\\n\\t\\t\\tbreak\\n\\t\\tans = 1000000\\n\\t\\tfor z in range(int(e ** (1 / 3)) + 2):\\n\\t\\t\\tez = e - z ** 3\\n\\t\\t\\tif ez < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ty = int(ez ** (1 / 2))\\n\\t\\t\\tx = ez - y ** 2\\n\\t\\t\\tif x >= 0 and y >= 0 and (z >= 0):\\n\\t\\t\\t\\tans = min(ans, x + y + z)\\n\\t\\tprint(ans)\\nmain()\\n\", \"while 1:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\t(m, z) = (10 ** 15, 0)\\n\\twhile z ** 3 <= e:\\n\\t\\tb = e - z ** 3\\n\\t\\ta = int(b ** 0.5)\\n\\t\\tm = min(m, b + z - a ** 2 + a)\\n\\t\\tz += 1\\n\\tprint(m)\\n\", \"import math\\n\\ndef solve(e):\\n\\tk = 2 ** 32\\n\\tfor z in range(100, -1, -1):\\n\\t\\tz3 = z * z * z\\n\\t\\tif z3 > e:\\n\\t\\t\\tcontinue\\n\\t\\te2 = e - z3\\n\\t\\tylm = int(math.sqrt(e2))\\n\\t\\tfor y in range(ylm, -1, -1):\\n\\t\\t\\ty2 = y * y\\n\\t\\t\\tif e2 > (y + 1) * (y + 1):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\te3 = e2 - y2\\n\\t\\t\\tx = e3\\n\\t\\t\\tk = min(k, x + y + z)\\n\\treturn k\\n\\ndef main():\\n\\twhile True:\\n\\t\\ta = int(input())\\n\\t\\tif a == 0:\\n\\t\\t\\tbreak\\n\\t\\tprint(solve(a))\\nmain()\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tans = e\\n\\tz = 0\\n\\twhile z ** 3 <= e:\\n\\t\\ty = int((e - z ** 3) ** 0.5)\\n\\t\\tx = e - z ** 3 - y ** 2\\n\\t\\tans = min(x + y + z, ans)\\n\\t\\tz += 1\\n\\tprint(ans)\\n\", \"while True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\t(z, ans) = (0, float('inf'))\\n\\tfor z in range(e):\\n\\t\\tif z ** 3 > e:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tr = e - z ** 3\\n\\t\\t\\ty = int(r ** 0.5)\\n\\t\\t\\tx = r - y ** 2\\n\\t\\t\\tans = min(ans, x + y + z)\\n\\tprint(ans)\\n\", \"from math import sqrt\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tans = 10 ** 9\\n\\tfor z in range(e):\\n\\t\\tif z ** 3 > e:\\n\\t\\t\\tbreak\\n\\t\\ty = int(sqrt(e - z ** 3))\\n\\t\\tx = e - y ** 2 - z ** 3\\n\\t\\tans = min(ans, x + y + z)\\n\\tprint(ans)\\n\", \"import sys\\ninf = 1 << 30\\nlim = 10 ** 5\\n\\ndef solve():\\n\\tcubics = [x ** 3 for x in range(100 + 1)]\\n\\twhile 1:\\n\\t\\te = int(sys.stdin.readline().rstrip())\\n\\t\\tif e == 0:\\n\\t\\t\\treturn\\n\\t\\tans = inf\\n\\t\\tfor (z, c) in enumerate(cubics):\\n\\t\\t\\tif c > e:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ty = int((e - c) ** 0.5)\\n\\t\\t\\tx = e - c - y ** 2\\n\\t\\t\\tans = min(ans, x + y + z)\\n\\t\\tprint(ans)\\nsolve()\\n\", \"import math\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tm = e + 1\\n\\tz = 0\\n\\twhile z <= e:\\n\\t\\tz3 = z ** 3\\n\\t\\tif z3 > e:\\n\\t\\t\\tbreak\\n\\t\\ty = int(math.sqrt(e - z3))\\n\\t\\tx = e - y ** 2 - z3\\n\\t\\tm = min(m, x + y + z)\\n\\t\\tz += 1\\n\\tprint(m)\\n\", \"while True:\\n\\tn = int(input())\\n\\tif n == 0:\\n\\t\\tbreak\\n\\tm = n\\n\\tz = 0\\n\\twhile z ** 3 <= n:\\n\\t\\ty = int((n - z ** 3) ** 0.5)\\n\\t\\tx = n - z ** 3 - y ** 2\\n\\t\\tm = min(x + y + z, m)\\n\\t\\tz += 1\\n\\tprint(m)\\n\", \"from math import sqrt\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tm = e\\n\\tfor z in range(e):\\n\\t\\tif z ** 3 > e:\\n\\t\\t\\tbreak\\n\\t\\ty = int(sqrt(e - z ** 3))\\n\\t\\tx = e - (y ** 2 + z ** 3)\\n\\t\\tm = min(m, x + y + z)\\n\\tprint(m)\\n\", \"from math import sqrt\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\t(z, ans) = (0, e)\\n\\twhile z ** 3 <= e:\\n\\t\\ty = int(sqrt(e - z ** 3))\\n\\t\\tx = e - y ** 2 - z ** 3\\n\\t\\tans = min(ans, x + y + z)\\n\\t\\tz += 1\\n\\tprint(ans)\\n\", \"import math\\nwhile True:\\n\\te = int(input())\\n\\tif e == 0:\\n\\t\\tbreak\\n\\tmin_e = e\\n\\tfor i in range(101):\\n\\t\\tif e - i ** 3 < 0:\\n\\t\\t\\tbreak\\n\\t\\tz = i\\n\\t\\ty = math.floor(math.sqrt(e - i ** 3))\\n\\t\\tx = e - y ** 2 - z ** 3\\n\\t\\tif x + y + z < min_e:\\n\\t\\t\\tmin_e = x + y + z\\n\\tprint(min_e)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"1\\n2\\n4\\n6\\n300\\n1250\\n0\", \"1\\n2\\n4\\n2\\n300\\n1250\\n0\", \"1\\n2\\n4\\n3\\n300\\n1250\\n0\", \"1\\n2\\n4\\n3\\n76\\n1250\\n0\", \"1\\n2\\n4\\n27\\n557\\n1250\\n0\", \"1\\n2\\n4\\n6\\n300\\n1687\\n0\", \"1\\n1\\n4\\n2\\n300\\n1250\\n0\", \"1\\n2\\n5\\n3\\n300\\n1250\\n0\", \"1\\n2\\n3\\n3\\n76\\n1250\\n0\", \"1\\n2\\n4\\n27\\n266\\n1250\\n0\", \"1\\n2\\n4\\n6\\n300\\n3248\\n0\", \"1\\n0\\n4\\n2\\n300\\n1250\\n0\", \"1\\n3\\n3\\n3\\n76\\n1250\\n0\", \"1\\n2\\n4\\n27\\n266\\n1236\\n0\", \"1\\n2\\n2\\n3\\n300\\n300\\n0\", \"1\\n3\\n2\\n3\\n76\\n1250\\n0\", \"1\\n3\\n4\\n27\\n266\\n1236\\n0\", \"1\\n2\\n2\\n3\\n347\\n300\\n0\", \"1\\n3\\n2\\n3\\n76\\n116\\n0\", \"1\\n3\\n3\\n27\\n266\\n1236\\n0\", \"1\\n2\\n2\\n3\\n347\\n251\\n0\", \"1\\n3\\n3\\n27\\n266\\n219\\n0\", \"1\\n2\\n2\\n1\\n347\\n251\\n0\", \"1\\n3\\n1\\n27\\n266\\n219\\n0\", \"1\\n2\\n2\\n1\\n347\\n424\\n0\", \"1\\n3\\n1\\n27\\n266\\n354\\n0\", \"1\\n2\\n3\\n1\\n347\\n424\\n0\", \"1\\n3\\n1\\n27\\n266\\n263\\n0\", \"1\\n2\\n3\\n1\\n347\\n602\\n0\", \"1\\n2\\n3\\n1\\n347\\n212\\n0\", \"1\\n4\\n3\\n2\\n347\\n212\\n0\", \"1\\n1\\n3\\n2\\n593\\n212\\n0\", \"1\\n1\\n3\\n2\\n1047\\n212\\n0\", \"1\\n1\\n3\\n2\\n1047\\n54\\n0\", \"1\\n1\\n4\\n2\\n1047\\n54\\n0\", \"1\\n1\\n1\\n2\\n1047\\n54\\n0\", \"1\\n1\\n1\\n2\\n1047\\n59\\n0\", \"1\\n1\\n1\\n2\\n1090\\n59\\n0\", \"1\\n1\\n1\\n2\\n1060\\n44\\n0\", \"1\\n2\\n4\\n2\\n300\\n2091\\n0\", \"1\\n2\\n4\\n3\\n249\\n1250\\n0\", \"1\\n2\\n4\\n3\\n76\\n324\\n0\", \"1\\n2\\n5\\n3\\n477\\n1250\\n0\", \"1\\n2\\n3\\n0\\n76\\n1250\\n0\", \"1\\n2\\n4\\n52\\n266\\n1250\\n0\", \"1\\n1\\n4\\n2\\n300\\n952\\n0\", \"1\\n3\\n3\\n3\\n119\\n1250\\n0\", \"1\\n2\\n4\\n48\\n266\\n1236\\n0\", \"1\\n1\\n2\\n3\\n347\\n300\\n0\", \"1\\n2\\n3\\n3\\n347\\n251\\n0\", \"1\\n2\\n2\\n0\\n347\\n251\\n0\", \"1\\n3\\n1\\n7\\n266\\n219\\n0\", \"1\\n3\\n1\\n27\\n157\\n354\\n0\", \"1\\n2\\n6\\n1\\n347\\n424\\n0\", \"1\\n1\\n2\\n0\\n76\\n116\\n0\", \"1\\n2\\n3\\n1\\n430\\n602\\n0\", \"1\\n1\\n3\\n2\\n347\\n212\\n0\", \"1\\n1\\n3\\n1\\n593\\n212\\n0\", \"1\\n1\\n0\\n2\\n1047\\n212\\n0\", \"1\\n1\\n3\\n2\\n1047\\n103\\n0\", \"1\\n1\\n1\\n3\\n1047\\n54\\n0\", \"1\\n2\\n1\\n2\\n1047\\n59\\n0\", \"1\\n1\\n1\\n3\\n1060\\n59\\n0\", \"1\\n1\\n1\\n3\\n1060\\n44\\n0\", \"1\\n4\\n6\\n27\\n300\\n1250\\n0\", \"1\\n1\\n4\\n2\\n300\\n2091\\n0\", \"1\\n2\\n4\\n3\\n484\\n1250\\n0\", \"1\\n2\\n4\\n10\\n300\\n1130\\n0\", \"1\\n2\\n0\\n0\\n76\\n1250\\n0\", \"1\\n2\\n3\\n3\\n119\\n1250\\n0\", \"1\\n2\\n4\\n48\\n266\\n1300\\n0\", \"1\\n6\\n4\\n3\\n76\\n1250\\n0\", \"1\\n3\\n7\\n5\\n266\\n1236\\n0\", \"1\\n1\\n2\\n3\\n389\\n300\\n0\", \"1\\n3\\n1\\n7\\n266\\n374\\n0\", \"1\\n3\\n1\\n17\\n157\\n354\\n0\", \"1\\n2\\n6\\n1\\n347\\n212\\n0\", \"1\\n2\\n3\\n3\\n347\\n212\\n0\", \"1\\n4\\n5\\n1\\n312\\n212\\n0\", \"1\\n1\\n3\\n2\\n301\\n212\\n0\", \"1\\n1\\n3\\n1\\n593\\n303\\n0\", \"1\\n1\\n1\\n2\\n1047\\n103\\n0\", \"1\\n1\\n1\\n3\\n333\\n54\\n0\", \"1\\n1\\n1\\n3\\n1184\\n59\\n0\", \"1\\n1\\n4\\n2\\n327\\n2091\\n0\", \"1\\n2\\n3\\n3\\n484\\n1250\\n0\", \"1\\n2\\n3\\n3\\n165\\n1250\\n0\", \"1\\n6\\n3\\n3\\n76\\n1250\\n0\", \"1\\n1\\n2\\n2\\n389\\n300\\n0\", \"1\\n4\\n1\\n17\\n157\\n354\\n0\", \"1\\n2\\n6\\n1\\n347\\n31\\n0\", \"1\\n2\\n5\\n1\\n381\\n602\\n0\", \"1\\n2\\n1\\n3\\n347\\n212\\n0\", \"1\\n4\\n7\\n1\\n312\\n212\\n0\", \"1\\n1\\n1\\n2\\n849\\n103\\n0\", \"1\\n2\\n1\\n2\\n2845\\n59\\n0\", \"1\\n1\\n1\\n1\\n1854\\n44\\n0\", \"1\\n1\\n4\\n2\\n209\\n2091\\n0\", \"1\\n2\\n3\\n3\\n71\\n1250\\n0\", \"1\\n5\\n7\\n5\\n266\\n1597\\n0\", \"1\\n2\\n4\\n27\\n300\\n1250\\n0\"], \"outputs\": [\"1\\n2\\n2\\n4\\n18\\n44\\n\", \"1\\n2\\n2\\n2\\n18\\n44\\n\", \"1\\n2\\n2\\n3\\n18\\n44\\n\", \"1\\n2\\n2\\n3\\n10\\n44\\n\", \"1\\n2\\n2\\n3\\n23\\n44\\n\", \"1\\n2\\n2\\n4\\n18\\n47\\n\", \"1\\n1\\n2\\n2\\n18\\n44\\n\", \"1\\n2\\n3\\n3\\n18\\n44\\n\", \"1\\n2\\n3\\n3\\n10\\n44\\n\", \"1\\n2\\n2\\n3\\n14\\n44\\n\", \"1\\n2\\n2\\n4\\n18\\n56\\n\", \"1\\n\", \"1\\n3\\n3\\n3\\n10\\n44\\n\", \"1\\n2\\n2\\n3\\n14\\n36\\n\", \"1\\n2\\n2\\n3\\n18\\n18\\n\", \"1\\n3\\n2\\n3\\n10\\n44\\n\", \"1\\n3\\n2\\n3\\n14\\n36\\n\", \"1\\n2\\n2\\n3\\n9\\n18\\n\", \"1\\n3\\n2\\n3\\n10\\n14\\n\", \"1\\n3\\n3\\n3\\n14\\n36\\n\", \"1\\n2\\n2\\n3\\n9\\n21\\n\", \"1\\n3\\n3\\n3\\n14\\n9\\n\", \"1\\n2\\n2\\n1\\n9\\n21\\n\", \"1\\n3\\n1\\n3\\n14\\n9\\n\", \"1\\n2\\n2\\n1\\n9\\n16\\n\", \"1\\n3\\n1\\n3\\n14\\n12\\n\", \"1\\n2\\n3\\n1\\n9\\n16\\n\", \"1\\n3\\n1\\n3\\n14\\n21\\n\", \"1\\n2\\n3\\n1\\n9\\n26\\n\", \"1\\n2\\n3\\n1\\n9\\n20\\n\", \"1\\n2\\n3\\n2\\n9\\n20\\n\", \"1\\n1\\n3\\n2\\n17\\n20\\n\", \"1\\n1\\n3\\n2\\n27\\n20\\n\", \"1\\n1\\n3\\n2\\n27\\n10\\n\", \"1\\n1\\n2\\n2\\n27\\n10\\n\", \"1\\n1\\n1\\n2\\n27\\n10\\n\", \"1\\n1\\n1\\n2\\n27\\n11\\n\", \"1\\n1\\n1\\n2\\n28\\n11\\n\", \"1\\n1\\n1\\n2\\n28\\n8\\n\", \"1\\n2\\n2\\n2\\n18\\n33\\n\", \"1\\n2\\n2\\n3\\n19\\n44\\n\", \"1\\n2\\n2\\n3\\n10\\n18\\n\", \"1\\n2\\n3\\n3\\n27\\n44\\n\", \"1\\n2\\n3\\n\", \"1\\n2\\n2\\n8\\n14\\n44\\n\", \"1\\n1\\n2\\n2\\n18\\n40\\n\", \"1\\n3\\n3\\n3\\n17\\n44\\n\", \"1\\n2\\n2\\n12\\n14\\n36\\n\", \"1\\n1\\n2\\n3\\n9\\n18\\n\", \"1\\n2\\n3\\n3\\n9\\n21\\n\", \"1\\n2\\n2\\n\", \"1\\n3\\n1\\n5\\n14\\n9\\n\", \"1\\n3\\n1\\n3\\n17\\n12\\n\", \"1\\n2\\n4\\n1\\n9\\n16\\n\", \"1\\n1\\n2\\n\", \"1\\n2\\n3\\n1\\n22\\n26\\n\", \"1\\n1\\n3\\n2\\n9\\n20\\n\", \"1\\n1\\n3\\n1\\n17\\n20\\n\", \"1\\n1\\n\", \"1\\n1\\n3\\n2\\n27\\n13\\n\", \"1\\n1\\n1\\n3\\n27\\n10\\n\", \"1\\n2\\n1\\n2\\n27\\n11\\n\", \"1\\n1\\n1\\n3\\n28\\n11\\n\", \"1\\n1\\n1\\n3\\n28\\n8\\n\", \"1\\n2\\n4\\n3\\n18\\n44\\n\", \"1\\n1\\n2\\n2\\n18\\n33\\n\", \"1\\n2\\n2\\n3\\n22\\n44\\n\", \"1\\n2\\n2\\n4\\n18\\n30\\n\", \"1\\n2\\n\", \"1\\n2\\n3\\n3\\n17\\n44\\n\", \"1\\n2\\n2\\n12\\n14\\n38\\n\", \"1\\n4\\n2\\n3\\n10\\n44\\n\", \"1\\n3\\n5\\n3\\n14\\n36\\n\", \"1\\n1\\n2\\n3\\n23\\n18\\n\", \"1\\n3\\n1\\n5\\n14\\n18\\n\", \"1\\n3\\n1\\n5\\n17\\n12\\n\", \"1\\n2\\n4\\n1\\n9\\n20\\n\", \"1\\n2\\n3\\n3\\n9\\n20\\n\", \"1\\n2\\n3\\n1\\n30\\n20\\n\", \"1\\n1\\n3\\n2\\n19\\n20\\n\", \"1\\n1\\n3\\n1\\n17\\n21\\n\", \"1\\n1\\n1\\n2\\n27\\n13\\n\", \"1\\n1\\n1\\n3\\n21\\n10\\n\", \"1\\n1\\n1\\n3\\n36\\n11\\n\", \"1\\n1\\n2\\n2\\n21\\n33\\n\", \"1\\n2\\n3\\n3\\n22\\n44\\n\", \"1\\n2\\n3\\n3\\n15\\n44\\n\", \"1\\n4\\n3\\n3\\n10\\n44\\n\", \"1\\n1\\n2\\n2\\n23\\n18\\n\", \"1\\n2\\n1\\n5\\n17\\n12\\n\", \"1\\n2\\n4\\n1\\n9\\n5\\n\", \"1\\n2\\n3\\n1\\n15\\n26\\n\", \"1\\n2\\n1\\n3\\n9\\n20\\n\", \"1\\n2\\n5\\n1\\n30\\n20\\n\", \"1\\n1\\n1\\n2\\n31\\n13\\n\", \"1\\n2\\n1\\n2\\n25\\n11\\n\", \"1\\n1\\n1\\n1\\n28\\n8\\n\", \"1\\n1\\n2\\n2\\n17\\n33\\n\", \"1\\n2\\n3\\n3\\n9\\n44\\n\", \"1\\n3\\n5\\n3\\n14\\n37\\n\", \"1\\n2\\n2\\n3\\n18\\n44\"]}",
    "difficulty": "UNKNOWN_DIFFICULTY",
    "raw_tags": "[]",
    "name": null,
    "source": "aizu",
    "tags": "[]",
    "skill_types": "[]",
    "url": null,
    "Expected Auxiliary Space": null,
    "time_limit": "8.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "134.217728 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "You are given a tree (connected graph without cycles) consisting of $n$ vertices. The tree is unrooted — it is just a connected undirected graph without cycles.\n\nIn one move, you can choose exactly $k$ leaves (leaf is such a vertex that is connected to only one another vertex) connected to the same vertex and remove them with edges incident to them. I.e. you choose such leaves $u_1, u_2, \\dots, u_k$ that there are edges $(u_1, v)$, $(u_2, v)$, $\\dots$, $(u_k, v)$ and remove these leaves and these edges.\n\nYour task is to find the maximum number of moves you can perform if you remove leaves optimally.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$; $1 \\le k < n$) — the number of vertices in the tree and the number of leaves you remove in one move, respectively. The next $n-1$ lines describe edges. The $i$-th edge is represented as two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$), where $x_i$ and $y_i$ are vertices the $i$-th edge connects. It is guaranteed that the given set of edges forms a tree.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer — the maximum number of moves you can perform if you remove leaves optimally.\n\n\n-----Example-----\nInput\n4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n\nOutput\n2\n3\n3\n4\n\n\n\n-----Note-----\n\nThe picture corresponding to the first test case of the example:\n\n[Image]\n\nThere you can remove vertices $2$, $5$ and $3$ during the first move and vertices $1$, $7$ and $4$ during the second move.\n\nThe picture corresponding to the second test case of the example:\n\n[Image]\n\nThere you can remove vertices $7$, $8$ and $9$ during the first move, then vertices $5$, $6$ and $10$ during the second move and vertices $1$, $3$ and $4$ during the third move.\n\nThe picture corresponding to the third test case of the example:\n\n$\\text{of}$\n\nThere you can remove vertices $5$ and $7$ during the first move, then vertices $2$ and $4$ during the second move and vertices $1$ and $6$ during the third move.",
    "solutions": "[\"import sys\\ninput = sys.stdin.readline\\nfor f in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tneig = [0] * n\\n\\tfor i in range(n):\\n\\t\\tneig[i] = [0]\\n\\tfor i in range(n - 1):\\n\\t\\t(a, b) = map(int, input().split())\\n\\t\\ta -= 1\\n\\t\\tb -= 1\\n\\t\\tneig[a][0] += 1\\n\\t\\tneig[b][0] += 1\\n\\t\\tneig[a].append(b)\\n\\t\\tneig[b].append(a)\\n\\tconleaves = [0] * n\\n\\tfor i in range(n):\\n\\t\\tconleaves[i] = [0]\\n\\tgoodvertices = []\\n\\tmx = 0\\n\\tfor i in range(n):\\n\\t\\tif neig[i][0] == 1:\\n\\t\\t\\tif neig[neig[i][1]][0] > 0:\\n\\t\\t\\t\\tconleaves[neig[i][1]][0] += 1\\n\\t\\t\\t\\tconleaves[neig[i][1]].append(i)\\n\\t\\t\\t\\tneig[i][0] = 0\\n\\t\\t\\t\\tif conleaves[neig[i][1]][0] == k:\\n\\t\\t\\t\\t\\tgoodvertices.append(neig[i][1])\\n\\twhile len(goodvertices) > 0:\\n\\t\\tv = goodvertices.pop()\\n\\t\\trem = conleaves[v][0] // k\\n\\t\\tmx += rem\\n\\t\\trest = conleaves[v][0] % k\\n\\t\\tconleaves[v] = conleaves[v][0:rest + 1]\\n\\t\\tconleaves[v][0] = rest\\n\\t\\tneig[v][0] -= rem * k\\n\\t\\tif neig[v][0] == 1:\\n\\t\\t\\tfor i in range(1, len(neig[v])):\\n\\t\\t\\t\\tif neig[neig[v][i]][0] > 0:\\n\\t\\t\\t\\t\\tneig[v][0] = 0\\n\\t\\t\\t\\t\\tconleaves[neig[v][i]][0] += 1\\n\\t\\t\\t\\t\\tconleaves[neig[v][i]].append(v)\\n\\t\\t\\t\\t\\tif conleaves[neig[v][i]][0] == k:\\n\\t\\t\\t\\t\\t\\tgoodvertices.append(neig[v][i])\\n\\tprint(mx)\\n\", \"from sys import stdin, gettrace\\nif gettrace():\\n\\tinputi = input\\nelse:\\n\\n\\tdef input():\\n\\t\\treturn next(stdin)[:-1]\\n\\n\\tdef inputi():\\n\\t\\treturn stdin.buffer.readline()\\n\\ndef readGraph(n, m):\\n\\tadj = [set() for _ in range(n)]\\n\\tfor _ in range(m):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tadj[u - 1].add(v - 1)\\n\\t\\tadj[v - 1].add(u - 1)\\n\\treturn adj\\n\\ndef readTree(n):\\n\\treturn readGraph(n, n - 1)\\n\\ndef solve():\\n\\t(n, k) = map(int, input().split())\\n\\tadj = readTree(n)\\n\\tif k == 1:\\n\\t\\treturn (n - 1, n, k)\\n\\tleaves = {}\\n\\tlc = [0] * n\\n\\tfor i in range(n):\\n\\t\\tif len(adj[i]) == 1:\\n\\t\\t\\tlc[adj[i].pop()] += 1\\n\\t\\t\\tlc[i] = -1\\n\\tst = [i for i in range(n) if lc[i] >= k]\\n\\tres = 0\\n\\twhile st:\\n\\t\\ti = st.pop()\\n\\t\\tres += lc[i] // k\\n\\t\\tif len(adj[i]) == lc[i] + 1 and lc[i] % k == 0:\\n\\t\\t\\tfor a in adj[i]:\\n\\t\\t\\t\\tif lc[a] != -1:\\n\\t\\t\\t\\t\\tlc[a] += 1\\n\\t\\t\\t\\t\\tif lc[a] == k:\\n\\t\\t\\t\\t\\t\\tst.append(a)\\n\\t\\t\\tlc[i] = -1\\n\\t\\telse:\\n\\t\\t\\tlc[i] %= k\\n\\treturn (res, n, k)\\n\\ndef main():\\n\\tprintproblem = False\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\t(res, _, _) = solve()\\n\\t\\tprint(res)\\nmain()\\n\", \"from collections import defaultdict\\nimport sys, math\\nf = None\\ntry:\\n\\tf = open('q1.input', 'r')\\nexcept IOError:\\n\\tf = sys.stdin\\nif 'xrange' in dir(__builtins__):\\n\\trange = xrange\\nsys.setrecursionlimit(10 ** 6)\\n\\ndef print_case_iterable(case_num, iterable):\\n\\tprint('Case #{}: {}'.format(case_num, ' '.join(map(str, iterable))))\\n\\ndef print_case_number(case_num, iterable):\\n\\tprint('Case #{}: {}'.format(case_num, iterable))\\n\\ndef print_iterable(A):\\n\\tprint(' '.join(A))\\n\\ndef read_int():\\n\\treturn int(f.readline().strip())\\n\\ndef read_int_array():\\n\\treturn [int(x) for x in f.readline().strip().split(' ')]\\n\\ndef rns():\\n\\ta = [x for x in f.readline().split(' ')]\\n\\treturn (int(a[0]), a[1].strip())\\n\\ndef read_string():\\n\\treturn list(f.readline().strip())\\n\\ndef ri():\\n\\treturn int(f.readline().strip())\\n\\ndef ria():\\n\\treturn [int(x) for x in f.readline().strip().split(' ')]\\n\\ndef rns():\\n\\ta = [x for x in f.readline().split(' ')]\\n\\treturn (int(a[0]), a[1].strip())\\n\\ndef rs():\\n\\treturn list(f.readline().strip())\\n\\ndef bi(x):\\n\\treturn bin(x)[2:]\\nfrom collections import deque\\nimport math\\nNUMBER = 10 ** 9 + 7\\n\\ndef factorial(n):\\n\\tM = NUMBER\\n\\tf = 1\\n\\tfor i in range(1, n + 1):\\n\\t\\tf = f * i % M\\n\\treturn f\\n\\ndef mult(a, b):\\n\\treturn a * b % NUMBER\\n\\ndef minus(a, b):\\n\\treturn (a - b) % NUMBER\\n\\ndef plus(a, b):\\n\\treturn (a + b) % NUMBER\\n\\ndef egcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn (b, 0, 1)\\n\\telse:\\n\\t\\t(g, y, x) = egcd(b % a, a)\\n\\t\\treturn (g, x - b // a * y, y)\\n\\ndef modinv(a):\\n\\tm = NUMBER\\n\\t(g, x, y) = egcd(a, m)\\n\\tif g != 1:\\n\\t\\traise Exception('modular inverse does not exist')\\n\\telse:\\n\\t\\treturn x % m\\n\\ndef choose(n, k):\\n\\tif n < k:\\n\\t\\tassert false\\n\\treturn mult(factorial(n), modinv(mult(factorial(k), factorial(n - k)))) % NUMBER\\nfrom collections import deque, defaultdict\\nimport heapq\\nfrom types import GeneratorType\\n\\ndef bootstrap(f, stack=[]):\\n\\n\\tdef wrappedfunc(*args, **kwargs):\\n\\t\\tif stack:\\n\\t\\t\\treturn f(*args, **kwargs)\\n\\t\\telse:\\n\\t\\t\\tto = f(*args, **kwargs)\\n\\t\\t\\twhile True:\\n\\t\\t\\t\\tif type(to) is GeneratorType:\\n\\t\\t\\t\\t\\tstack.append(to)\\n\\t\\t\\t\\t\\tto = next(to)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\tif not stack:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\tto = stack[-1].send(to)\\n\\t\\t\\treturn to\\n\\treturn wrappedfunc\\n\\ndef dfs(g, timeIn, timeOut, depths, parents):\\n\\tcnt = 0\\n\\tstack = [[1, 0, 0, 0]]\\n\\twhile stack:\\n\\t\\t(v, neig_i, parent, depth) = stack[-1]\\n\\t\\tparents[v] = parent\\n\\t\\tdepths[v] = depth\\n\\t\\tif neig_i == 0:\\n\\t\\t\\ttimeIn[v] = cnt\\n\\t\\t\\tcnt += 1\\n\\t\\twhile neig_i < len(g[v]):\\n\\t\\t\\tu = g[v][neig_i]\\n\\t\\t\\tif u == parent:\\n\\t\\t\\t\\tneig_i += 1\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tstack[-1][1] = neig_i + 1\\n\\t\\t\\tstack.append([u, 0, v, depth + 1])\\n\\t\\t\\tbreak\\n\\t\\tif neig_i == len(g[v]):\\n\\t\\t\\tstack.pop()\\n\\t\\t\\ttimeOut[v] = cnt\\n\\t\\t\\tcnt += 1\\ncnt = 0\\n\\n@bootstrap\\ndef dfs(v, adj, timeIn, timeOut, depths, parents, parent=0, depth=0):\\n\\tglobal cnt\\n\\tparents[v] = parent\\n\\tdepths[v] = depth\\n\\ttimeIn[v] = cnt\\n\\tcnt += 1\\n\\tfor u in adj[v]:\\n\\t\\tif u == parent:\\n\\t\\t\\tcontinue\\n\\t\\tyield dfs(u, adj, timeIn, timeOut, depths, parents, v, depth + 1)\\n\\ttimeOut[v] = cnt\\n\\tcnt += 1\\n\\tyield\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b % a, a)\\n\\ndef lcm(a, b):\\n\\treturn a * b / gcd(a, b)\\n\\ndef get_num_2_5(n):\\n\\ttwos = 0\\n\\tfives = 0\\n\\twhile n > 0 and n % 2 == 0:\\n\\t\\tn //= 2\\n\\t\\ttwos += 1\\n\\twhile n > 0 and n % 5 == 0:\\n\\t\\tn //= 5\\n\\t\\tfives += 1\\n\\treturn (twos, fives)\\n\\ndef shift(a, i, num):\\n\\tfor _ in range(num):\\n\\t\\t(a[i], a[i + 1], a[i + 2]) = (a[i + 2], a[i], a[i + 1])\\n\\ndef equal(x, y):\\n\\treturn abs(x - y) <= 1e-09\\n\\ndef getAngle(a, b, c):\\n\\tang = math.degrees(math.atan2(c[1] - b[1], c[0] - b[0]) - math.atan2(a[1] - b[1], a[0] - b[0]))\\n\\treturn ang + 360 if ang < 0 else ang\\n\\ndef getLength(a, b):\\n\\treturn math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\\nfrom heapq import heapify, heappush, heappop\\n\\ndef bfs(adj):\\n\\ts = set()\\n\\td = defaultdict(set)\\n\\tq = deque([])\\n\\ts.add(0)\\n\\td[0].add(0)\\n\\tq.append((0, 0))\\n\\twhile len(q) > 0:\\n\\t\\t(v, depth) = q.popleft()\\n\\t\\tfor u in adj[v]:\\n\\t\\t\\tif u not in s:\\n\\t\\t\\t\\ts.add(u)\\n\\t\\t\\t\\td[depth + 1].add(u)\\n\\t\\t\\t\\tq.append((u, depth + 1))\\n\\treturn d\\n\\ndef solution(adj, n, k):\\n\\tif k == 1:\\n\\t\\treturn n - 1\\n\\tif n == 2:\\n\\t\\treturn 0\\n\\tleaves = [set() for i in range(n)]\\n\\tstack = []\\n\\tfor v in range(n):\\n\\t\\tif len(adj[v]) == 1:\\n\\t\\t\\tleaves[adj[v].pop()].add(v)\\n\\tfor v in range(n):\\n\\t\\tif len(leaves[v]) >= k:\\n\\t\\t\\tstack.append(v)\\n\\tcnt = 0\\n\\twhile len(stack) > 0:\\n\\t\\tcnt += 1\\n\\t\\tv = stack.pop()\\n\\t\\tls = set()\\n\\t\\ttry:\\n\\t\\t\\tfor i in range(k):\\n\\t\\t\\t\\tls.add(leaves[v].pop())\\n\\t\\texcept:\\n\\t\\t\\treturn f'{cnt}000{n}000{k}'\\n\\t\\tadj[v] -= ls\\n\\t\\tif len(adj[v]) == 0:\\n\\t\\t\\tcontinue\\n\\t\\telif len(adj[v]) == 1:\\n\\t\\t\\tu = adj[v].pop()\\n\\t\\t\\tleaves[u].add(v)\\n\\t\\t\\tif len(leaves[u]) == k:\\n\\t\\t\\t\\tstack.append(u)\\n\\t\\telif len(leaves[v]) >= k:\\n\\t\\t\\tstack.append(v)\\n\\treturn cnt\\n\\ndef main():\\n\\tT = 1\\n\\tT = ri()\\n\\tfor i in range(T):\\n\\t\\t(n, k) = ria()\\n\\t\\tadj = [set() for _ in range(n)]\\n\\t\\tfor _ in range(n - 1):\\n\\t\\t\\t(a, b) = ria()\\n\\t\\t\\ta -= 1\\n\\t\\t\\tb -= 1\\n\\t\\t\\tadj[a].add(b)\\n\\t\\t\\tadj[b].add(a)\\n\\t\\tx = solution(adj, n, k)\\n\\t\\tif 'xrange' not in dir(__builtins__):\\n\\t\\t\\tprint(x)\\n\\t\\telse:\\n\\t\\t\\t(print >> output, str(x))\\n\\tif 'xrange' in dir(__builtins__):\\n\\t\\tprint(output.getvalue())\\n\\t\\toutput.close()\\nif 'xrange' in dir(__builtins__):\\n\\timport cStringIO\\n\\toutput = cStringIO.StringIO()\\nmain()\\n\", \"import sys\\n\\ndef rs():\\n\\treturn sys.stdin.readline().rstrip()\\n\\ndef ri():\\n\\treturn int(sys.stdin.readline())\\n\\ndef ria():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef ws(s):\\n\\tsys.stdout.write(s)\\n\\tsys.stdout.write('\\\\n')\\n\\ndef wi(n):\\n\\tsys.stdout.write(str(n))\\n\\tsys.stdout.write('\\\\n')\\n\\ndef wia(a, sep=' '):\\n\\tsys.stdout.write(sep.join([str(x) for x in a]))\\n\\tsys.stdout.write('\\\\n')\\n\\ndef solve(n, k, ee):\\n\\tg = [[] for _ in range(n)]\\n\\tfor e in ee:\\n\\t\\tg[e[0]].append(e[1])\\n\\t\\tg[e[1]].append(e[0])\\n\\tleafs = [[] for _ in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif len(g[i]) == 1:\\n\\t\\t\\tleafs[g[i][0]].append(i)\\n\\tdeg = [len(g[i]) for i in range(n)]\\n\\tdeleted = set()\\n\\tans = 0\\n\\tq = [i for i in range(n) if len(leafs[i]) >= k]\\n\\twhile q:\\n\\t\\tv = q.pop()\\n\\t\\tif v in deleted:\\n\\t\\t\\tcontinue\\n\\t\\tx = len(leafs[v]) // k\\n\\t\\tcnt = x * k\\n\\t\\tans += x\\n\\t\\twhile cnt > 0:\\n\\t\\t\\tw = leafs[v].pop()\\n\\t\\t\\tdeleted.add(w)\\n\\t\\t\\tcnt -= 1\\n\\t\\tdeg[v] -= x * k\\n\\t\\tif deg[v] == 1:\\n\\t\\t\\tfor w in g[v]:\\n\\t\\t\\t\\tif w not in deleted:\\n\\t\\t\\t\\t\\tleafs[w].append(v)\\n\\t\\t\\t\\t\\tif len(leafs[w]) == k:\\n\\t\\t\\t\\t\\t\\tq.append(w)\\n\\treturn ans\\n\\ndef main():\\n\\tfor _ in range(ri()):\\n\\t\\t(n, k) = ria()\\n\\t\\te = []\\n\\t\\tfor i in range(n - 1):\\n\\t\\t\\t(xi, yi) = ria()\\n\\t\\t\\txi -= 1\\n\\t\\t\\tyi -= 1\\n\\t\\t\\te.append([xi, yi])\\n\\t\\twi(solve(n, k, e))\\nmain()\\n\", \"import sys\\n\\ndef input():\\n\\treturn sys.stdin.readline().rstrip()\\n\\ndef input_split():\\n\\treturn [int(i) for i in input().split()]\\ntestCases = int(input())\\nanswers = []\\nfor _ in range(testCases):\\n\\t(n, k) = input_split()\\n\\tpresent = [True for i in range(n)]\\n\\tedges = [set() for _ in range(n)]\\n\\tfor _ in range(n - 1):\\n\\t\\t(x, y) = input_split()\\n\\t\\tx -= 1\\n\\t\\ty -= 1\\n\\t\\tedges[x].add(y)\\n\\t\\tedges[y].add(x)\\n\\tdeletions = 0\\n\\tdeleted_till_now = set()\\n\\tleaves = [0 for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tfor node in edges[i]:\\n\\t\\t\\tif len(edges[node]) == 1:\\n\\t\\t\\t\\tleaves[i] += 1\\n\\tpending = []\\n\\tfor i in range(n):\\n\\t\\tif leaves[i] >= k:\\n\\t\\t\\tpending.append(i)\\n\\twhile len(pending) != 0:\\n\\t\\tlast = pending.pop()\\n\\t\\tnum = leaves[last]\\n\\t\\tif num < k or not present[last]:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tleaves_removed = num - num % k\\n\\t\\t\\tdels = num // k\\n\\t\\t\\tdeletions += dels\\n\\t\\t\\tto_remove = set()\\n\\t\\t\\tfor node in edges[last]:\\n\\t\\t\\t\\tif len(edges[node]) == 1:\\n\\t\\t\\t\\t\\tto_remove.add(node)\\n\\t\\t\\t\\t\\tpresent[node] = False\\n\\t\\t\\t\\t\\tif len(to_remove) == leaves_removed:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tedges[last] = edges[last].difference(to_remove)\\n\\t\\t\\tleaves[last] = num % k\\n\\t\\t\\tif len(edges[last]) == 1:\\n\\t\\t\\t\\tparent = list(edges[last])[0]\\n\\t\\t\\t\\tleaves[parent] += 1\\n\\t\\t\\t\\tif leaves[parent] >= k:\\n\\t\\t\\t\\t\\tpending.append(parent)\\n\\tanswers.append(deletions)\\nprint(*answers, sep='\\\\n')\\n\", \"import sys\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tadj = [[] for _ in range(n)]\\n\\tfor _ in range(n - 1):\\n\\t\\t(a, b) = map(lambda s: int(s) - 1, input().split())\\n\\t\\tadj[a].append(b)\\n\\t\\tadj[b].append(a)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tV = [False] * n\\n\\tC = [0] * n\\n\\tQ = []\\n\\n\\tdef is_leaf(i):\\n\\t\\treturn len(adj[i]) == 1\\n\\n\\tdef enq(i):\\n\\t\\tif V[i] or sum((is_leaf(j) for j in adj[i])) < k:\\n\\t\\t\\treturn\\n\\t\\tV[i] = True\\n\\t\\tQ.append(i)\\n\\tfor (i, a) in enumerate(adj):\\n\\t\\tif len(a) == 1:\\n\\t\\t\\tj = a[0]\\n\\t\\t\\tC[j] += 1\\n\\t\\t\\tif C[j] >= k and (not V[j]):\\n\\t\\t\\t\\tV[j] = True\\n\\t\\t\\t\\tQ.append(j)\\n\\tres = 0\\n\\tfor i in Q:\\n\\t\\tV[i] = False\\n\\t\\tnadj = []\\n\\t\\tleafc = []\\n\\t\\tfor j in adj[i]:\\n\\t\\t\\tif is_leaf(j):\\n\\t\\t\\t\\tleafc.append(j)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnadj.append(j)\\n\\t\\twhile len(leafc) >= k:\\n\\t\\t\\tres += 1\\n\\t\\t\\tfor _ in range(k):\\n\\t\\t\\t\\tleafc.pop()\\n\\t\\tnadj.extend(leafc)\\n\\t\\tadj[i] = nadj\\n\\t\\tif is_leaf(i):\\n\\t\\t\\tenq(nadj[0])\\n\\tprint(res)\\n\", \"import sys\\nimport heapq\\ninpy = [int(x) for x in sys.stdin.read().split()]\\nt = inpy[0]\\nindex = 1\\nfor _ in range(t):\\n\\t(n, k) = (inpy[index], inpy[index + 1])\\n\\tindex += 2\\n\\tedges = [set() for _ in range(n + 1)]\\n\\tmemo = [0] * (n + 1)\\n\\tfor i in range(n - 1):\\n\\t\\t(a, b) = (inpy[index], inpy[index + 1])\\n\\t\\tindex += 2\\n\\t\\tedges[a].add(b)\\n\\t\\tedges[b].add(a)\\n\\t(que, no) = (set(), set())\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i not in no and len(edges[i]) == 1:\\n\\t\\t\\tx = edges[i].pop()\\n\\t\\t\\tmemo[x] += 1\\n\\t\\t\\tedges[x].remove(i)\\n\\t\\t\\tno.add(x)\\n\\tfor i in range(1, n + 1):\\n\\t\\tif memo[i] >= k:\\n\\t\\t\\tque.add(i)\\n\\tres = 0\\n\\twhile que:\\n\\t\\tx = que.pop()\\n\\t\\tres += memo[x] // k\\n\\t\\tmemo[x] = memo[x] % k\\n\\t\\tif len(edges[x]) == 1 and memo[x] == 0:\\n\\t\\t\\ty = edges[x].pop()\\n\\t\\t\\tmemo[y] += 1\\n\\t\\t\\tif memo[y] >= k:\\n\\t\\t\\t\\tque.add(y)\\n\\t\\t\\tedges[y].remove(x)\\n\\tprint(res)\\n\", \"import collections\\nt = int(input())\\nfor i in range(t):\\n\\t(n, k) = map(int, input().split())\\n\\tg = collections.defaultdict(list)\\n\\tfor j in range(n - 1):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\tg[x].append(y)\\n\\t\\tg[y].append(x)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\telse:\\n\\t\\tleaf = {}\\n\\t\\ta = set()\\n\\t\\tb = {}\\n\\t\\tl = {}\\n\\t\\tfor v in g:\\n\\t\\t\\tp = 0\\n\\t\\t\\tq = 0\\n\\t\\t\\tfor u in g[v]:\\n\\t\\t\\t\\tq = q + 1\\n\\t\\t\\t\\tif len(g[u]) == 1:\\n\\t\\t\\t\\t\\tp = p + 1\\n\\t\\t\\t\\t\\tleaf[u] = 1\\n\\t\\t\\tif p >= k:\\n\\t\\t\\t\\ta.add(v)\\n\\t\\t\\tb[v] = p\\n\\t\\t\\tl[v] = q\\n\\t\\tc = 0\\n\\t\\twhile a != set():\\n\\t\\t\\tp = a.pop()\\n\\t\\t\\tte = b[p] // k\\n\\t\\t\\tc = c + te\\n\\t\\t\\tif b[p] % k == 0 and l[p] - te * k == 1:\\n\\t\\t\\t\\tleaf[p] = 1\\n\\t\\t\\t\\tb[p] = 0\\n\\t\\t\\t\\tl[p] = 1\\n\\t\\t\\t\\tfor v in g[p]:\\n\\t\\t\\t\\t\\tif v not in leaf:\\n\\t\\t\\t\\t\\t\\tb[v] = b[v] + 1\\n\\t\\t\\t\\t\\t\\tif b[v] >= k:\\n\\t\\t\\t\\t\\t\\t\\ta.add(v)\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tb[p] = b[p] - te * k\\n\\t\\t\\t\\tl[p] = l[p] - te * k\\n\\t\\tprint(c)\\n\", \"from sys import stdin\\nfrom collections import deque\\ninput = stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\t(n, k) = map(int, input().split())\\n\\tadj = [[] for _ in range(n)]\\n\\tfrd = [set() for _ in range(n)]\\n\\tcnt = [0] * n\\n\\tis_leaf = [False] * n\\n\\tfor _ in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tu -= 1\\n\\t\\tv -= 1\\n\\t\\tadj[u].append(v)\\n\\t\\tadj[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tfor i in range(n):\\n\\t\\tif len(adj[i]) == 1:\\n\\t\\t\\tis_leaf[i] = True\\n\\t\\t\\tcnt[adj[i][0]] += 1\\n\\tq = deque()\\n\\tfor u in range(n):\\n\\t\\tif cnt[u] >= k:\\n\\t\\t\\tq.append(u)\\n\\t\\tfor v in adj[u]:\\n\\t\\t\\tif not is_leaf[v]:\\n\\t\\t\\t\\tfrd[u].add(v)\\n\\tans = 0\\n\\twhile len(q) > 0:\\n\\t\\tu = q.popleft()\\n\\t\\tans += cnt[u] // k\\n\\t\\tcnt[u] %= k\\n\\t\\tif cnt[u] == 0 and len(frd[u]) == 1:\\n\\t\\t\\tp = frd[u].pop()\\n\\t\\t\\tfrd[p].remove(u)\\n\\t\\t\\tcnt[p] += 1\\n\\t\\t\\tif cnt[p] >= k:\\n\\t\\t\\t\\tq.append(p)\\n\\tprint(ans)\\n\", \"def crop_set(s, n):\\n\\tnew = set()\\n\\tit = iter(s)\\n\\tfor i in range(n):\\n\\t\\tnew.add(next(it))\\n\\treturn new\\n\\nclass Vertex:\\n\\t__slots__ = ('vertexes', 'leaves', 'graph')\\n\\n\\tdef __init__(self, graph):\\n\\t\\tself.vertexes = set()\\n\\t\\tself.leaves = 0\\n\\t\\tself.graph = graph\\n\\n\\tdef try_to_leave(self):\\n\\t\\tif len(self.vertexes) + self.leaves == 1:\\n\\t\\t\\tif self.vertexes:\\n\\t\\t\\t\\tparent = self.vertexes.pop()\\n\\t\\t\\t\\tparent.vertexes.remove(self)\\n\\t\\t\\t\\tparent.leaves += 1\\n\\t\\t\\t\\tparent.update()\\n\\t\\t\\t\\tself.vertexes.add(parent)\\n\\n\\tdef update(self):\\n\\t\\tself.graph[self] = self.leaves\\n\\nclass Tree:\\n\\n\\tdef __init__(self, n, k):\\n\\t\\tself.k = k\\n\\t\\tself.lc = [set() for _ in range(n // k + 1)]\\n\\t\\tself.dlc = dict()\\n\\t\\tself.max = 0\\n\\n\\tdef add_vertex(self, v):\\n\\t\\tself.dlc[v] = 0\\n\\t\\tself.lc[0].add(v)\\n\\t\\tv.update()\\n\\n\\tdef __setitem__(self, key, value):\\n\\t\\tvalue = value // self.k\\n\\t\\tif self.max == self.dlc[key] > value:\\n\\t\\t\\tself.lc[self.max].discard(key)\\n\\t\\t\\twhile not self.lc[self.max]:\\n\\t\\t\\t\\tself.max -= 1\\n\\t\\telse:\\n\\t\\t\\tself.lc[self.dlc[key]].discard(key)\\n\\t\\tif value > self.max:\\n\\t\\t\\tself.max = value\\n\\t\\tself.dlc[key] = value\\n\\t\\tself.lc[value].add(key)\\n\\ndef to_int_decrement(s):\\n\\treturn int(s) - 1\\n\\ndef solve():\\n\\t(n, k) = list(map(int, input().split()))\\n\\ttree = Tree(n, k)\\n\\tgraph = [Vertex(tree) for _ in range(n)]\\n\\tfor _ in range(n - 1):\\n\\t\\t(a, b) = list(map(to_int_decrement, input().split()))\\n\\t\\tgraph[a].vertexes.add(graph[b])\\n\\t\\tgraph[b].vertexes.add(graph[a])\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\treturn\\n\\tfor v in graph:\\n\\t\\ttree.add_vertex(v)\\n\\tfor v in graph:\\n\\t\\tv.try_to_leave()\\n\\tc = 0\\n\\twhile tree.max > 0:\\n\\t\\tv = tree.lc[tree.max].pop()\\n\\t\\tc += v.leaves // k\\n\\t\\tv.leaves -= v.leaves // k * k\\n\\t\\tv.try_to_leave()\\n\\t\\tv.update()\\n\\tprint(c)\\nfor _ in range(int(input())):\\n\\tsolve()\\n\", \"from bisect import *\\nfrom collections import *\\nfrom math import gcd, ceil, sqrt, floor, inf\\nfrom heapq import *\\nfrom itertools import *\\nfrom operator import add, mul, sub, xor, truediv, floordiv\\nfrom functools import *\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef RL():\\n\\treturn map(int, sys.stdin.readline().rstrip().split())\\n\\ndef RLL():\\n\\treturn list(map(int, sys.stdin.readline().rstrip().split()))\\n\\ndef N():\\n\\treturn int(input())\\nfrom types import GeneratorType\\n\\ndef bootstrap(f, stack=[]):\\n\\n\\tdef wrappedfunc(*args, **kwargs):\\n\\t\\tif stack:\\n\\t\\t\\treturn f(*args, **kwargs)\\n\\t\\telse:\\n\\t\\t\\tto = f(*args, **kwargs)\\n\\t\\t\\twhile True:\\n\\t\\t\\t\\tif type(to) is GeneratorType:\\n\\t\\t\\t\\t\\tstack.append(to)\\n\\t\\t\\t\\t\\tto = next(to)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\tif not stack:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\tto = stack[-1].send(to)\\n\\t\\t\\treturn to\\n\\treturn wrappedfunc\\nfarr = [1]\\nifa = []\\n\\ndef fact(x, mod=0):\\n\\tif mod:\\n\\t\\twhile x >= len(farr):\\n\\t\\t\\tfarr.append(farr[-1] * len(farr) % mod)\\n\\telse:\\n\\t\\twhile x >= len(farr):\\n\\t\\t\\tfarr.append(farr[-1] * len(farr))\\n\\treturn farr[x]\\n\\ndef ifact(x, mod):\\n\\tglobal ifa\\n\\tifa.append(pow(farr[-1], mod - 2, mod))\\n\\tfor i in range(x, 0, -1):\\n\\t\\tifa.append(ifa[-1] * i % mod)\\n\\tifa = ifa[::-1]\\n\\ndef per(i, j, mod=0):\\n\\tif i < j:\\n\\t\\treturn 0\\n\\tif not mod:\\n\\t\\treturn fact(i) // fact(i - j)\\n\\treturn farr[i] * ifa[i - j] % mod\\n\\ndef com(i, j, mod=0):\\n\\tif i < j:\\n\\t\\treturn 0\\n\\tif not mod:\\n\\t\\treturn per(i, j) // fact(j)\\n\\treturn per(i, j, mod) * ifa[j] % mod\\n\\ndef catalan(n):\\n\\treturn com(2 * n, n) // (n + 1)\\n\\ndef linc(f, t, l, r):\\n\\twhile l < r:\\n\\t\\tmid = (l + r) // 2\\n\\t\\tif t > f(mid):\\n\\t\\t\\tl = mid + 1\\n\\t\\telse:\\n\\t\\t\\tr = mid\\n\\treturn l\\n\\ndef rinc(f, t, l, r):\\n\\twhile l < r:\\n\\t\\tmid = (l + r + 1) // 2\\n\\t\\tif t < f(mid):\\n\\t\\t\\tr = mid - 1\\n\\t\\telse:\\n\\t\\t\\tl = mid\\n\\treturn l\\n\\ndef ldec(f, t, l, r):\\n\\twhile l < r:\\n\\t\\tmid = (l + r) // 2\\n\\t\\tif t < f(mid):\\n\\t\\t\\tl = mid + 1\\n\\t\\telse:\\n\\t\\t\\tr = mid\\n\\treturn l\\n\\ndef rdec(f, t, l, r):\\n\\twhile l < r:\\n\\t\\tmid = (l + r + 1) // 2\\n\\t\\tif t > f(mid):\\n\\t\\t\\tr = mid - 1\\n\\t\\telse:\\n\\t\\t\\tl = mid\\n\\treturn l\\n\\ndef isprime(n):\\n\\tfor i in range(2, int(n ** 0.5) + 1):\\n\\t\\tif n % i == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef binfun(x):\\n\\tc = 0\\n\\tfor w in arr:\\n\\t\\tc += ceil(w / x)\\n\\treturn c\\n\\ndef lowbit(n):\\n\\treturn n & -n\\n\\ndef inverse(a, m):\\n\\ta %= m\\n\\tif a <= 1:\\n\\t\\treturn a\\n\\treturn (1 - inverse(m, a) * m) // a % m\\n\\nclass BIT:\\n\\n\\tdef __init__(self, arr):\\n\\t\\tself.arr = arr\\n\\t\\tself.n = len(arr) - 1\\n\\n\\tdef update(self, x, v):\\n\\t\\twhile x <= self.n:\\n\\t\\t\\tself.arr[x] += v\\n\\t\\t\\tx += x & -x\\n\\n\\tdef query(self, x):\\n\\t\\tans = 0\\n\\t\\twhile x:\\n\\t\\t\\tans += self.arr[x]\\n\\t\\t\\tx &= x - 1\\n\\t\\treturn ans\\n\\nclass DSU:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.c = [-1] * n\\n\\n\\tdef same(self, x, y):\\n\\t\\treturn self.find(x) == self.find(y)\\n\\n\\tdef find(self, x):\\n\\t\\tif self.c[x] < 0:\\n\\t\\t\\treturn x\\n\\t\\tself.c[x] = self.find(self.c[x])\\n\\t\\treturn self.c[x]\\n\\n\\tdef union(self, u, v):\\n\\t\\t(u, v) = (self.find(u), self.find(v))\\n\\t\\tif u == v:\\n\\t\\t\\treturn False\\n\\t\\tif self.c[u] < self.c[v]:\\n\\t\\t\\t(u, v) = (v, u)\\n\\t\\tself.c[u] += self.c[v]\\n\\t\\tself.c[v] = u\\n\\t\\treturn True\\n\\n\\tdef size(self, x):\\n\\t\\treturn -self.c[self.find(x)]\\n\\nclass UFS:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.parent = [i for i in range(n)]\\n\\t\\tself.ranks = [0] * n\\n\\n\\tdef find(self, x):\\n\\t\\tif x != self.parent[x]:\\n\\t\\t\\tself.parent[x] = self.find(self.parent[x])\\n\\t\\treturn self.parent[x]\\n\\n\\tdef union(self, u, v):\\n\\t\\t(pu, pv) = (self.find(u), self.find(v))\\n\\t\\tif pu == pv:\\n\\t\\t\\treturn False\\n\\t\\tif self.ranks[pu] >= self.ranks[pv]:\\n\\t\\t\\tself.parent[pv] = pu\\n\\t\\t\\tif self.ranks[pv] == self.ranks[pu]:\\n\\t\\t\\t\\tself.ranks[pu] += 1\\n\\t\\telse:\\n\\t\\t\\tself.parent[pu] = pv\\n\\ndef Prime(n):\\n\\tc = 0\\n\\tprime = []\\n\\tflag = [0] * (n + 1)\\n\\tfor i in range(2, n + 1):\\n\\t\\tif not flag[i]:\\n\\t\\t\\tprime.append(i)\\n\\t\\t\\tc += 1\\n\\t\\tfor j in range(c):\\n\\t\\t\\tif i * prime[j] > n:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tflag[i * prime[j]] = prime[j]\\n\\t\\t\\tif i % prime[j] == 0:\\n\\t\\t\\t\\tbreak\\n\\treturn prime\\n\\ndef dij(s, graph):\\n\\td = {}\\n\\td[s] = 0\\n\\theap = [(0, s)]\\n\\tseen = set()\\n\\twhile heap:\\n\\t\\t(dis, u) = heappop(heap)\\n\\t\\tif u in seen:\\n\\t\\t\\tcontinue\\n\\t\\tfor v in graph[u]:\\n\\t\\t\\tif v not in d or d[v] > d[u] + graph[u][v]:\\n\\t\\t\\t\\td[v] = d[u] + graph[u][v]\\n\\t\\t\\t\\theappush(heap, (d[v], v))\\n\\treturn d\\n\\ndef GP(it):\\n\\treturn [[ch, len(list(g))] for (ch, g) in groupby(it)]\\n\\nclass DLN:\\n\\n\\tdef __init__(self, val):\\n\\t\\tself.val = val\\n\\t\\tself.pre = None\\n\\t\\tself.next = None\\n\\n@bootstrap\\ndef dfs(r, p):\\n\\tif len(g[r]) == 1 and p != -1:\\n\\t\\tisl[r] = 1\\n\\t\\tyield 1\\n\\ttmp = 0\\n\\tfor ch in g[r]:\\n\\t\\tif ch != p:\\n\\t\\t\\ttmp += (yield dfs(ch, r))\\n\\tcnt[r] += tmp\\n\\tif p == -1 and len(g[r]) == 1:\\n\\t\\tisl[r] = 1\\n\\t\\tcnt[g[r][0]] += 1\\n\\tyield 0\\nt = N()\\nfor i in range(t):\\n\\t(n, k) = RL()\\n\\tg = [[] for i in range(n + 1)]\\n\\tfor i in range(n - 1):\\n\\t\\t(u, v) = RL()\\n\\t\\tg[u].append(v)\\n\\t\\tg[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tisl = [0] * (n + 1)\\n\\tcnt = [0] * (n + 1)\\n\\tdfs(1, -1)\\n\\tq = deque()\\n\\tans = 0\\n\\tvis = [0] * (n + 1)\\n\\tfor i in range(1, n + 1):\\n\\t\\tif cnt[i] >= k:\\n\\t\\t\\tq.append(i)\\n\\t\\t\\tvis[i] = 1\\n\\tact = cnt.copy()\\n\\twhile q:\\n\\t\\tu = q.popleft()\\n\\t\\tans += act[u] // k\\n\\t\\tact[u] %= k\\n\\t\\tvis[u] = 0\\n\\t\\tif act[u] == 0 and len(g[u]) - cnt[u] == 1:\\n\\t\\t\\tfor v in g[u]:\\n\\t\\t\\t\\tif not isl[v]:\\n\\t\\t\\t\\t\\tcnt[v] += 1\\n\\t\\t\\t\\t\\tact[v] += 1\\n\\t\\t\\t\\t\\tisl[u] = 1\\n\\t\\t\\t\\t\\tif act[v] >= k and (not vis[v]):\\n\\t\\t\\t\\t\\t\\tq.append(v)\\n\\t\\t\\t\\t\\t\\tvis[v] = 1\\n\\t\\t\\t\\t\\tbreak\\n\\tprint(ans)\\n\", \"from collections import defaultdict, deque\\nfor _ in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tg = defaultdict(list)\\n\\tfor i in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tu -= 1\\n\\t\\tv -= 1\\n\\t\\tg[u].append(v)\\n\\t\\tg[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tindeg = [0] * n\\n\\trevdeg = [0] * n\\n\\tdq = deque()\\n\\tfor i in range(n):\\n\\t\\tindeg[i] = len(g[i])\\n\\t\\tfor j in g[i]:\\n\\t\\t\\tif len(g[j]) == 1:\\n\\t\\t\\t\\trevdeg[i] += 1\\n\\t\\tif revdeg[i] >= k:\\n\\t\\t\\tdq.appendleft(i)\\n\\tans = 0\\n\\twhile dq:\\n\\t\\tans += 1\\n\\t\\tu = dq.pop()\\n\\t\\tindeg[u] -= k\\n\\t\\trevdeg[u] -= k\\n\\t\\tif revdeg[u] >= k:\\n\\t\\t\\tdq.appendleft(u)\\n\\t\\telif indeg[u] == 1 and revdeg[u] == 0:\\n\\t\\t\\tfor j in g[u]:\\n\\t\\t\\t\\trevdeg[j] += 1\\n\\t\\t\\t\\tif revdeg[j] == k:\\n\\t\\t\\t\\t\\tdq.appendleft(j)\\n\\tprint(ans)\\n\", \"def main():\\n\\tfrom heapq import heapify, heappop, heappush\\n\\timport sys\\n\\tinput = sys.stdin.readline\\n\\tfor __ in [0] * int(input()):\\n\\t\\t(N, K) = list(map(int, input().split()))\\n\\t\\tG = [[] for _ in [0] * N]\\n\\t\\tdeg = [0] * N\\n\\t\\tfor _ in [0] * (N - 1):\\n\\t\\t\\t(a, b) = list(map(int, input().split()))\\n\\t\\t\\ta -= 1\\n\\t\\t\\tb -= 1\\n\\t\\t\\tG[a].append(b)\\n\\t\\t\\tG[b].append(a)\\n\\t\\t\\tdeg[a] += 1\\n\\t\\t\\tdeg[b] += 1\\n\\t\\tif K == 1:\\n\\t\\t\\tprint(N - 1)\\n\\t\\t\\tcontinue\\n\\t\\tleaf = [0] * N\\n\\t\\tfor v in range(N):\\n\\t\\t\\tif deg[v] == 1:\\n\\t\\t\\t\\tu = G[v][0]\\n\\t\\t\\t\\tleaf[u] += 1\\n\\t\\tL = [(-l, v) for (v, l) in enumerate(leaf) if l >= K]\\n\\t\\theapify(L)\\n\\t\\tans = 0\\n\\t\\twhile L:\\n\\t\\t\\t(l, v) = heappop(L)\\n\\t\\t\\tif -l != leaf[v]:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t(q, r) = divmod(-l, K)\\n\\t\\t\\tans += q\\n\\t\\t\\tleaf[v] = r\\n\\t\\t\\tdeg[v] -= K * q\\n\\t\\t\\tp = -1\\n\\t\\t\\tcnt = 0\\n\\t\\t\\tfor u in G[v]:\\n\\t\\t\\t\\tif deg[u] == 1 and cnt < K * q:\\n\\t\\t\\t\\t\\tcnt += 1\\n\\t\\t\\t\\t\\tdeg[u] = 0\\n\\t\\t\\t\\telif deg[u]:\\n\\t\\t\\t\\t\\tp = u\\n\\t\\t\\t\\tif cnt == K * q and (deg[v] != 1 or p != -1):\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif deg[v] == 1:\\n\\t\\t\\t\\tif p != -1:\\n\\t\\t\\t\\t\\tleaf[p] += 1\\n\\t\\t\\t\\t\\tif leaf[p] >= K:\\n\\t\\t\\t\\t\\t\\theappush(L, (-leaf[p], p))\\n\\t\\tprint(ans)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\\n\", \"from collections import defaultdict, deque\\nimport sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor ii in range(t):\\n\\tgraph = defaultdict(list)\\n\\t(n, k) = map(int, input().split())\\n\\tfor i in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tgraph[u].append(v)\\n\\t\\tgraph[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\telse:\\n\\t\\tleaves = deque()\\n\\t\\tfor i in graph:\\n\\t\\t\\tif len(graph[i]) == 1:\\n\\t\\t\\t\\tleaves.append(i)\\n\\t\\ttreecount = [0] * (n + 1)\\n\\t\\tfor i in leaves:\\n\\t\\t\\ttreecount[i] = -1\\n\\t\\tans = 0\\n\\t\\twhile leaves:\\n\\t\\t\\tsize = len(leaves)\\n\\t\\t\\tfor j in range(size):\\n\\t\\t\\t\\tvertex = leaves.popleft()\\n\\t\\t\\t\\ttreecount[vertex] = 10000000\\n\\t\\t\\t\\tfor i in graph[vertex]:\\n\\t\\t\\t\\t\\tif treecount[i] != -1 and treecount[i] < 10000000:\\n\\t\\t\\t\\t\\t\\ttreecount[i] += 1\\n\\t\\t\\t\\t\\t\\tif treecount[i] % k == 0:\\n\\t\\t\\t\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\t\\t\\t\\tif treecount[i] == len(graph[i]) - 1:\\n\\t\\t\\t\\t\\t\\t\\t\\ttreecount[i] = -1\\n\\t\\t\\t\\t\\t\\t\\t\\tleaves.append(i)\\n\\t\\telse:\\n\\t\\t\\tsys.stdout.write(str(ans) + '\\\\n')\\n\", \"from collections import defaultdict, deque\\nimport heapq\\n\\nclass Graph:\\n\\n\\tdef __init__(self, vertices):\\n\\t\\tself.graph = [defaultdict() for x in range(vertices + 1)]\\n\\t\\tself.V = vertices\\n\\n\\tdef addEdge(self, u, v, w=1):\\n\\t\\tself.graph[u][v] = w\\n\\t\\tself.graph[v][u] = w\\n\\n\\tdef solve(self, in_degree, k):\\n\\t\\tflag = [0] * (n + 1)\\n\\t\\tleaves = defaultdict(int)\\n\\t\\tfor i in range(1, self.V + 1):\\n\\t\\t\\tif in_degree[i] == 1:\\n\\t\\t\\t\\tleaves[list(self.graph[i].keys())[0]] += 1\\n\\t\\t\\t\\tflag[i] = 1\\n\\t\\tq = set()\\n\\t\\tfor p in leaves:\\n\\t\\t\\tif leaves[p] >= k:\\n\\t\\t\\t\\tq.add(p)\\n\\t\\tans = 0\\n\\t\\twhile q:\\n\\t\\t\\tnow = q.pop()\\n\\t\\t\\tans += 1\\n\\t\\t\\tleaves[now] -= k\\n\\t\\t\\tif leaves[now] >= k:\\n\\t\\t\\t\\tq.add(now)\\n\\t\\t\\telif leaves[now] == 0:\\n\\t\\t\\t\\t(conn, par) = (0, 0)\\n\\t\\t\\t\\tfor i in self.graph[now]:\\n\\t\\t\\t\\t\\tif flag[i] == 0:\\n\\t\\t\\t\\t\\t\\tconn += 1\\n\\t\\t\\t\\t\\t\\tpar = i\\n\\t\\t\\t\\tif conn == 1:\\n\\t\\t\\t\\t\\tflag[now] = 1\\n\\t\\t\\t\\t\\tleaves[par] += 1\\n\\t\\t\\t\\t\\tif leaves[par] == k:\\n\\t\\t\\t\\t\\t\\tq.add(par)\\n\\t\\treturn ans\\nfor _ in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tg = Graph(n)\\n\\tin_degree = [0] * (n + 1)\\n\\tfor _ in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tg.addEdge(u, v)\\n\\t\\tin_degree[u] += 1\\n\\t\\tin_degree[v] += 1\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\telse:\\n\\t\\tprint(g.solve(in_degree, k))\\n\", \"t = int(input())\\nMaxn = 210000\\nwhile t > 0:\\n\\tt -= 1\\n\\t(n, k) = map(int, input().split())\\n\\td = [0] * (n + 1)\\n\\tbj = [0] * (n + 1)\\n\\tflag = [0] * (n + 1)\\n\\tto = [[]]\\n\\tfor i in range(0, n):\\n\\t\\tto.append([])\\n\\tfor i in range(1, n):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tto[u].append(v)\\n\\t\\tto[v].append(u)\\n\\t\\td[u] += 1\\n\\t\\td[v] += 1\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tque = []\\n\\tfor i in range(1, n + 1):\\n\\t\\tif d[i] == 1:\\n\\t\\t\\tbj[to[i][0]] += 1\\n\\t\\t\\tflag[i] = 1\\n\\tfor i in range(1, n + 1):\\n\\t\\tif bj[i] >= k:\\n\\t\\t\\tque.append(i)\\n\\tans = 0\\n\\twhile len(que):\\n\\t\\tnow = que.pop()\\n\\t\\tans += 1\\n\\t\\tbj[now] -= k\\n\\t\\tif bj[now] >= k:\\n\\t\\t\\tque.append(now)\\n\\t\\t\\tcontinue\\n\\t\\tif bj[now]:\\n\\t\\t\\tcontinue\\n\\t\\tsxz = 0\\n\\t\\tnh = 0\\n\\t\\tfor i in to[now]:\\n\\t\\t\\tif flag[i] == 0:\\n\\t\\t\\t\\tsxz += 1\\n\\t\\t\\t\\tnh = i\\n\\t\\tif sxz == 1:\\n\\t\\t\\tflag[now] = 1\\n\\t\\t\\tbj[nh] += 1\\n\\t\\t\\tif bj[nh] == k:\\n\\t\\t\\t\\tque.append(nh)\\n\\tprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\t(n, k) = map(int, input().split())\\n\\tedge = [[] for i in range(n)]\\n\\tfor i in range(n - 1):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\tedge[x - 1].append(y - 1)\\n\\t\\tedge[y - 1].append(x - 1)\\n\\tLEAF = [[] for i in range(n)]\\n\\tV = [0] * n\\n\\tfor i in range(n):\\n\\t\\tif len(edge[i]) == 1:\\n\\t\\t\\tLEAF[edge[i][0]].append(i)\\n\\tQ = [i for i in range(n) if len(LEAF[i]) >= k]\\n\\tD = [len(edge[i]) for i in range(n)]\\n\\tN = edge\\n\\tans = 0\\n\\twhile Q:\\n\\t\\tv = Q.pop()\\n\\t\\tif V[v] == 1:\\n\\t\\t\\tcontinue\\n\\t\\tq = len(LEAF[v]) // k\\n\\t\\tcount = q * k\\n\\t\\tans += q\\n\\t\\twhile count:\\n\\t\\t\\tdv = LEAF[v].pop()\\n\\t\\t\\tV[dv] = 1\\n\\t\\t\\tcount -= 1\\n\\t\\tD[v] -= q * k\\n\\t\\tif D[v] == 1:\\n\\t\\t\\tfor nv in N[v]:\\n\\t\\t\\t\\tif V[nv] == 0:\\n\\t\\t\\t\\t\\tLEAF[nv].append(v)\\n\\t\\t\\t\\t\\tif len(LEAF[nv]) == k:\\n\\t\\t\\t\\t\\t\\tQ.append(nv)\\n\\t\\t\\t\\t\\tbreak\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\telse:\\n\\t\\tprint(ans)\\n\", \"from sys import stdin, stdout\\nimport functools\\nimport sys, os, math\\nT = int(input())\\nfor _ in range(T):\\n\\t(N, K) = map(int, input().split())\\n\\tDS = [0] * (N + 1)\\n\\tLeafNum = [0] * (N + 1)\\n\\tg = [[] for _ in range(N + 1)]\\n\\tfor _ in range(N - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tDS[u] += 1\\n\\t\\tDS[v] += 1\\n\\t\\tg[u].append(v)\\n\\t\\tg[v].append(u)\\n\\tfor u in range(1, N + 1):\\n\\t\\tif DS[u] == 1:\\n\\t\\t\\tfor v in g[u]:\\n\\t\\t\\t\\tLeafNum[v] += 1\\n\\tif K == 1:\\n\\t\\tprint(N - 1)\\n\\t\\tcontinue\\n\\tq = set()\\n\\tfor u in range(1, N + 1):\\n\\t\\tif LeafNum[u] >= K:\\n\\t\\t\\tq.add(u)\\n\\tans = 0\\n\\twhile len(q) > 0:\\n\\t\\tu = q.pop()\\n\\t\\tnl = LeafNum[u]\\n\\t\\tans += int(nl / K)\\n\\t\\tLeafNum[u] = nl % K\\n\\t\\tdn = int(nl / K) * K\\n\\t\\tDS[u] -= int(nl / K) * K\\n\\t\\tif DS[u] == 1:\\n\\t\\t\\tfor v in g[u]:\\n\\t\\t\\t\\tif DS[v] == 1 and dn > 0:\\n\\t\\t\\t\\t\\tdn -= 1\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tLeafNum[v] += 1\\n\\t\\t\\t\\tif LeafNum[v] >= K and v not in q:\\n\\t\\t\\t\\t\\tq.add(v)\\n\\tprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nf = lambda : map(int, input().split())\\nfor _ in range(int(input())):\\n\\t(n, k) = f()\\n\\tg = [[] for i in range(n + 1)]\\n\\tdeg = [0] * (n + 1)\\n\\tisLeaf = [0] * (n + 1)\\n\\tnumLeaves = [0] * (n + 1)\\n\\tq = []\\n\\tans = 0\\n\\tfor __ in range(n - 1):\\n\\t\\t(a, b) = f()\\n\\t\\tg[a].append(b)\\n\\t\\tg[b].append(a)\\n\\t\\tdeg[a] += 1\\n\\t\\tdeg[b] += 1\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tfor i in range(1, n + 1):\\n\\t\\tif deg[i] == 1:\\n\\t\\t\\tisLeaf[i] = True\\n\\t\\t\\tnumLeaves[g[i][0]] += 1\\n\\tfor i in range(1, n + 1):\\n\\t\\tif numLeaves[i] >= k:\\n\\t\\t\\tq.append(i)\\n\\twhile len(q):\\n\\t\\tu = q.pop()\\n\\t\\tans += 1\\n\\t\\tnumLeaves[u] -= k\\n\\t\\tif numLeaves[u]:\\n\\t\\t\\tif numLeaves[u] >= k:\\n\\t\\t\\t\\tq.append(u)\\n\\t\\t\\tcontinue\\n\\t\\t(numP, v) = (0, 0)\\n\\t\\tfor i in g[u]:\\n\\t\\t\\tif not isLeaf[i]:\\n\\t\\t\\t\\tnumP += 1\\n\\t\\t\\t\\tv = i\\n\\t\\tif numP == 1:\\n\\t\\t\\tnumLeaves[v] += 1\\n\\t\\t\\tisLeaf[u] = True\\n\\t\\t\\tif numLeaves[v] == k:\\n\\t\\t\\t\\tq.append(v)\\n\\tprint(ans)\\n\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom heapq import heappush, heappop, heapify\\nimport math\\nfrom collections import *\\nfrom functools import reduce, cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\nM = mod = 998244353\\n\\ndef factors(n):\\n\\treturn sorted(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0))))\\n\\ndef inv_mod(n):\\n\\treturn pow(n, mod - 2, mod)\\n\\ndef li():\\n\\treturn [int(i) for i in input().rstrip('\\\\n').split()]\\n\\ndef st():\\n\\treturn input().rstrip('\\\\n')\\n\\ndef val():\\n\\treturn int(input().rstrip('\\\\n'))\\n\\ndef li2():\\n\\treturn [i for i in input().rstrip('\\\\n')]\\n\\ndef li3():\\n\\treturn [int(i) for i in input().rstrip('\\\\n')]\\nfor _ in range(val()):\\n\\t(n, k) = li()\\n\\td = defaultdict(set)\\n\\tfor i in range(n - 1):\\n\\t\\t(a, b) = li()\\n\\t\\td[a].add(b)\\n\\t\\td[b].add(a)\\n\\tthistime = 1\\n\\the = deque()\\n\\tvisited = {}\\n\\tfor i in d:\\n\\t\\tif len(d[i]) == 1:\\n\\t\\t\\tvisited[i] = 1\\n\\t\\t\\the.append(i)\\n\\tans = 0\\n\\tcounts = defaultdict(int)\\n\\twhile he:\\n\\t\\ti = he.popleft()\\n\\t\\tfor j in list(d[i]):\\n\\t\\t\\tcounts[j] += 1\\n\\t\\t\\td[i].remove(j)\\n\\t\\t\\td[j].remove(i)\\n\\t\\t\\tif counts[j] == k:\\n\\t\\t\\t\\tthistime = 1\\n\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\tcounts[j] = 0\\n\\t\\t\\t\\tif len(d[j]) == 1:\\n\\t\\t\\t\\t\\tif j not in visited:\\n\\t\\t\\t\\t\\t\\the.append(j)\\n\\t\\t\\t\\t\\tvisited[j] = 1\\n\\tprint(ans)\\n\", \"for i in range(int(input())):\\n\\t(n, k) = list(map(int, input().split()))\\n\\ta = [[] for i in range(n)]\\n\\tb = [0] * n\\n\\tc = [0] * n\\n\\td = [0] * n\\n\\te = []\\n\\tfor i in range(n - 1):\\n\\t\\t(u, v) = list(map(int, input().split()))\\n\\t\\ta[u - 1].append(v)\\n\\t\\ta[v - 1].append(u)\\n\\t\\tb[u - 1] += 1\\n\\t\\tb[v - 1] += 1\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\telse:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif b[i] == 1:\\n\\t\\t\\t\\td[i] = 1\\n\\t\\t\\t\\tfor j in a[i]:\\n\\t\\t\\t\\t\\tc[j - 1] += 1\\n\\t\\tz = 0\\n\\t\\tf = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif c[i] >= k:\\n\\t\\t\\t\\te.append(i + 1)\\n\\t\\t\\t\\tf += 1\\n\\t\\ti = 0\\n\\t\\twhile i < f:\\n\\t\\t\\tz += c[e[i] - 1] // k\\n\\t\\t\\ty = c[e[i] - 1] // k * k\\n\\t\\t\\tfor j in a[e[i] - 1]:\\n\\t\\t\\t\\tif b[j - 1] == 1:\\n\\t\\t\\t\\t\\tif y == 0:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\ty -= 1\\n\\t\\t\\t\\t\\td[j - 1] = 2\\n\\t\\t\\t\\t\\tc[e[i] - 1] -= 1\\n\\t\\t\\t\\t\\tb[e[i] - 1] -= 1\\n\\t\\t\\tif b[e[i] - 1] == 1:\\n\\t\\t\\t\\td[e[i] - 1] = 1\\n\\t\\t\\t\\tfor j in a[e[i] - 1]:\\n\\t\\t\\t\\t\\tif d[j - 1] != 2:\\n\\t\\t\\t\\t\\t\\tc[j - 1] += 1\\n\\t\\t\\t\\t\\t\\tif c[j - 1] == k:\\n\\t\\t\\t\\t\\t\\t\\te.append(j)\\n\\t\\t\\t\\t\\t\\t\\tf += 1\\n\\t\\t\\ti += 1\\n\\t\\tprint(z)\\n\", \"from sys import stdin\\ninput = lambda : stdin.readline().strip()\\nfrom math import ceil, sqrt, factorial, gcd, log\\nfrom collections import deque\\nfrom bisect import bisect_left, bisect_right\\nfor _ in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tz = [0 for i in range(n + 1)]\\n\\tgraph = {i: set() for i in range(1, n + 1)}\\n\\tfor i in range(n - 1):\\n\\t\\t(a, b) = map(int, input().split())\\n\\t\\tgraph[a].add(b)\\n\\t\\tgraph[b].add(a)\\n\\tcount = 0\\n\\tif k == 1:\\n\\t\\tcount = n - 1\\n\\telse:\\n\\t\\tfreind = [set() for i in range(n + 1)]\\n\\t\\tleaf = [False] * (n + 1)\\n\\t\\tfor i in graph:\\n\\t\\t\\tif len(graph[i]) == 1:\\n\\t\\t\\t\\tleaf[i] = True\\n\\t\\t\\t\\tfor j in graph[i]:\\n\\t\\t\\t\\t\\tz[j] += 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tstack = []\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tif z[i] >= k:\\n\\t\\t\\t\\tstack.append(i)\\n\\t\\t\\tfor j in graph[i]:\\n\\t\\t\\t\\tif not leaf[j]:\\n\\t\\t\\t\\t\\tfreind[i].add(j)\\n\\t\\twhile stack:\\n\\t\\t\\tx = stack.pop()\\n\\t\\t\\tcount += z[x] // k\\n\\t\\t\\tz[x] = z[x] % k\\n\\t\\t\\tif z[x] == 0 and len(freind[x]) == 1:\\n\\t\\t\\t\\ta = freind[x].pop()\\n\\t\\t\\t\\tfreind[a].remove(x)\\n\\t\\t\\t\\tz[a] += 1\\n\\t\\t\\t\\tif z[a] >= k:\\n\\t\\t\\t\\t\\tstack.append(a)\\n\\tprint(count)\\n\", \"from sys import stdin\\n\\ndef inp():\\n\\treturn stdin.buffer.readline().rstrip().decode('utf8')\\n\\ndef itg():\\n\\treturn int(stdin.buffer.readline())\\n\\ndef mpint():\\n\\treturn map(int, stdin.buffer.readline().split())\\n\\nclass SegmentTreeIndex:\\n\\n\\tdef __init__(self, data, default=0, func=max):\\n\\t\\tself._default = default\\n\\t\\tself._func = func\\n\\t\\tself._len = len(data)\\n\\t\\tself._size = _size = 1 << (self._len - 1).bit_length()\\n\\t\\tself.real_data = data\\n\\t\\tself.data = [-1] * (2 * _size)\\n\\t\\tself.data[_size:_size + self._len] = range(self._len)\\n\\t\\tfor i in reversed(range(_size)):\\n\\t\\t\\tself.data[i] = self._index_cmp(self.data[i * 2], self.data[i * 2 + 1])\\n\\n\\tdef _index_cmp(self, idx1, idx2):\\n\\t\\tif idx2 == -1:\\n\\t\\t\\treturn idx1\\n\\t\\tif idx1 == -1:\\n\\t\\t\\treturn idx2\\n\\t\\tif self._func(self[idx1], self[idx2]) == self[idx1]:\\n\\t\\t\\treturn idx1\\n\\t\\treturn idx2\\n\\n\\tdef query(self, start, stop):\\n\\t\\tstart += self._size\\n\\t\\tstop += self._size\\n\\t\\tres_left = res_right = -1\\n\\t\\twhile start < stop:\\n\\t\\t\\tif start & 1:\\n\\t\\t\\t\\tres_left = self._index_cmp(res_left, self.data[start])\\n\\t\\t\\t\\tstart += 1\\n\\t\\t\\tif stop & 1:\\n\\t\\t\\t\\tstop -= 1\\n\\t\\t\\t\\tres_right = self._index_cmp(self.data[stop], res_right)\\n\\t\\t\\tstart >>= 1\\n\\t\\t\\tstop >>= 1\\n\\t\\treturn self._index_cmp(res_left, res_right)\\n\\n\\tdef __delitem__(self, idx):\\n\\t\\tself[idx] = self._default\\n\\n\\tdef __getitem__(self, idx):\\n\\t\\treturn self.real_data[idx]\\n\\n\\tdef __setitem__(self, idx, value):\\n\\t\\tself.real_data[idx] = value\\n\\t\\tidx = idx + self._size >> 1\\n\\t\\twhile idx:\\n\\t\\t\\tself.data[idx] = self._index_cmp(self.data[2 * idx], self.data[2 * idx + 1])\\n\\t\\t\\tidx >>= 1\\n\\n\\tdef __len__(self):\\n\\t\\treturn self._len\\n\\n\\tdef __repr__(self):\\n\\t\\treturn 'SegmentTreeIndex({0})'.format(self.real_data)\\nfrom copy import deepcopy\\nfor case in range(1, itg() + 1):\\n\\t(n, k) = mpint()\\n\\tgraph = [set() for _ in range(n)]\\n\\tfor _ in range(n - 1):\\n\\t\\t(u, v) = mpint()\\n\\t\\tu -= 1\\n\\t\\tv -= 1\\n\\t\\tgraph[u].add(v)\\n\\t\\tgraph[v].add(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tnew_graph = deepcopy(graph)\\n\\ttree = SegmentTreeIndex([0] * n)\\n\\tfor i in range(n):\\n\\t\\tif len(graph[i]) == 1:\\n\\t\\t\\tancestor = next(iter(graph[i]))\\n\\t\\t\\ttree[ancestor] = tree[ancestor] + 1\\n\\t\\t\\tnew_graph[ancestor].remove(i)\\n\\tans = 0\\n\\twhile True:\\n\\t\\tidx = tree.query(0, n)\\n\\t\\tif tree[idx] < k:\\n\\t\\t\\tbreak\\n\\t\\tans += 1\\n\\t\\ttree[idx] = tree[idx] - k\\n\\t\\tif tree[idx] == 0:\\n\\t\\t\\tif len(new_graph[idx]) == 1:\\n\\t\\t\\t\\tancestor = new_graph[idx].pop()\\n\\t\\t\\t\\tnew_graph[ancestor].remove(idx)\\n\\t\\t\\t\\ttree[ancestor] = tree[ancestor] + 1\\n\\t\\t\\telif len(new_graph[idx]) >= 2:\\n\\t\\t\\t\\tpass\\n\\tprint(ans)\\n\", \"from collections import deque, defaultdict\\nit = lambda : list(map(int, input().strip().split()))\\n\\ndef solve():\\n\\t(n, k) = it()\\n\\tedges = defaultdict(set)\\n\\tvis = set()\\n\\tqueue = deque()\\n\\tcount = [[] for _ in range(n + 1)]\\n\\tfor _ in range(n - 1):\\n\\t\\t(x, y) = it()\\n\\t\\tedges[x].add(y)\\n\\t\\tedges[y].add(x)\\n\\tif k == 1:\\n\\t\\treturn n - 1\\n\\tfor x in range(1, n + 1):\\n\\t\\tif len(edges[x]) == 1:\\n\\t\\t\\tvis.add(x)\\n\\t\\t\\tqueue.append(x)\\n\\tans = 0\\n\\twhile queue:\\n\\t\\tx = queue.popleft()\\n\\t\\tif edges[x]:\\n\\t\\t\\tfor y in edges[x]:\\n\\t\\t\\t\\tcount[y].append(x)\\n\\t\\t\\t\\tif len(count[y]) == k:\\n\\t\\t\\t\\t\\tans += 1\\n\\t\\t\\t\\t\\twhile count[y]:\\n\\t\\t\\t\\t\\t\\tedges[y].discard(count[y].pop())\\n\\t\\t\\t\\tif len(edges[y]) == 1 and (not y in vis):\\n\\t\\t\\t\\t\\tvis.add(y)\\n\\t\\t\\t\\t\\tqueue.append(y)\\n\\treturn ans\\nT = int(input())\\nans = []\\nfor _ in range(T):\\n\\tans.append(solve())\\nfor a in ans:\\n\\tprint(a)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\nclass HeapNode:\\n\\n\\tdef __init__(self, key, count):\\n\\t\\tself.key = key\\n\\t\\tself.count = count\\n\\ndef heapKey(a, b):\\n\\treturn a.count > b.count\\nsetattr(HeapNode, '__lt__', lambda self, other: heapKey(self, other))\\n\\nclass Heap:\\n\\n\\tdef __init__(self):\\n\\t\\tself.heap = list()\\n\\t\\tself.mapping = dict()\\n\\n\\tdef pop(self):\\n\\t\\tif len(self.heap) == 0:\\n\\t\\t\\treturn None\\n\\t\\tlastelt = self.heap.pop()\\n\\t\\tif self.heap:\\n\\t\\t\\treturnitem = self.heap[0]\\n\\t\\t\\tself.heap[0] = lastelt\\n\\t\\t\\tself.mapping[lastelt.key] = 0\\n\\t\\t\\tself._siftup(0)\\n\\t\\t\\tself.mapping.pop(returnitem.key)\\n\\t\\t\\treturn returnitem\\n\\t\\tself.mapping.pop(lastelt.key)\\n\\t\\treturn lastelt\\n\\n\\tdef _siftup(self, pos):\\n\\t\\tendpos = len(self.heap)\\n\\t\\tstartpos = pos\\n\\t\\tnewitem = self.heap[pos]\\n\\t\\tchildpos = 2 * pos + 1\\n\\t\\twhile childpos < endpos:\\n\\t\\t\\trightpos = childpos + 1\\n\\t\\t\\tif rightpos < endpos and (not self.heap[childpos] < self.heap[rightpos]):\\n\\t\\t\\t\\tchildpos = rightpos\\n\\t\\t\\tself.heap[pos] = self.heap[childpos]\\n\\t\\t\\tself.mapping[self.heap[pos].key] = pos\\n\\t\\t\\tpos = childpos\\n\\t\\t\\tchildpos = 2 * pos + 1\\n\\t\\tself.heap[pos] = newitem\\n\\t\\tself.mapping[self.heap[pos].key] = pos\\n\\t\\tself._siftdown(startpos, pos)\\n\\n\\tdef _siftdown(self, startpos, pos):\\n\\t\\tnewitem = self.heap[pos]\\n\\t\\twhile pos > startpos:\\n\\t\\t\\tparentpos = pos - 1 >> 1\\n\\t\\t\\tparent = self.heap[parentpos]\\n\\t\\t\\tif newitem < parent:\\n\\t\\t\\t\\tself.heap[pos] = parent\\n\\t\\t\\t\\tself.mapping[parent.key] = pos\\n\\t\\t\\t\\tpos = parentpos\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tbreak\\n\\t\\tself.heap[pos] = newitem\\n\\t\\tself.mapping[newitem.key] = pos\\n\\n\\tdef push(self, item):\\n\\t\\tself.heap.append(item)\\n\\t\\tself.mapping[item.key] = len(self.heap) - 1\\n\\t\\tself._siftdown(0, len(self.heap) - 1)\\n\\n\\tdef remove(self, key):\\n\\t\\tpos = self.mapping[key]\\n\\t\\tself.heap[pos].count = -1\\n\\t\\tself._siftup(pos)\\n\\n\\tdef increment(self, key):\\n\\t\\tpos = self.mapping[key]\\n\\t\\tself.heap[pos].count += 1\\n\\t\\tself._siftdown(0, pos)\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\t(n, k) = map(int, input().split())\\n\\t\\tG = dict()\\n\\t\\tfor _ in range(n - 1):\\n\\t\\t\\t(u, v) = map(int, input().split())\\n\\t\\t\\tif u not in G:\\n\\t\\t\\t\\tG.setdefault(u, set())\\n\\t\\t\\tif v not in G:\\n\\t\\t\\t\\tG.setdefault(v, set())\\n\\t\\t\\tG[u].add(v)\\n\\t\\t\\tG[v].add(u)\\n\\t\\theap = Heap()\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tcount = 0\\n\\t\\t\\tfor v in G[i]:\\n\\t\\t\\t\\tif len(G[v]) == 1:\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\theap.push(HeapNode(i, count))\\n\\t\\tans = 0\\n\\t\\twhile heap.heap[0].count >= k:\\n\\t\\t\\tpopped = heap.pop()\\n\\t\\t\\tnode = popped.key\\n\\t\\t\\tinitCount = popped.count\\n\\t\\t\\tleaves = list()\\n\\t\\t\\tleafCount = 0\\n\\t\\t\\tfor v in G[node]:\\n\\t\\t\\t\\tif len(G[v]) == 1:\\n\\t\\t\\t\\t\\tleafCount += 1\\n\\t\\t\\tsize = leafCount // k * k\\n\\t\\t\\tfor v in G[node]:\\n\\t\\t\\t\\tif len(leaves) >= size:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tif len(G[v]) == 1:\\n\\t\\t\\t\\t\\tleaves.append(v)\\n\\t\\t\\tfor v in leaves:\\n\\t\\t\\t\\theap.remove(v)\\n\\t\\t\\t\\tG[node].discard(v)\\n\\t\\t\\t\\tG.pop(v)\\n\\t\\t\\tif len(G[node]) == 1:\\n\\t\\t\\t\\tfor v in G[node]:\\n\\t\\t\\t\\t\\theap.increment(v)\\n\\t\\t\\theap.push(HeapNode(node, initCount - size))\\n\\t\\t\\tans += leafCount // k\\n\\t\\tprint(ans)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode()) if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\tif self.buffer.tell():\\n\\t\\t\\treturn self.buffer.read().decode('ascii')\\n\\t\\treturn os.read(self._fd, os.fstat(self._fd).st_size).decode('ascii')\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline().decode('ascii')\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\ndef print(*args, sep=' ', end='\\\\n', file=sys.stdout, flush=False):\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(end)\\n\\tif flush:\\n\\t\\tfile.flush()\\n(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nsys.setrecursionlimit(10000)\\nmain()\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef RL():\\n\\treturn map(int, sys.stdin.readline().rstrip().split())\\n\\ndef RLL():\\n\\treturn list(map(int, sys.stdin.readline().rstrip().split()))\\n\\ndef N():\\n\\treturn int(input())\\n\\ndef comb(n, m):\\n\\treturn factorial(n) / (factorial(m) * factorial(n - m)) if n >= m else 0\\n\\ndef perm(n, m):\\n\\treturn factorial(n) // factorial(n - m) if n >= m else 0\\n\\ndef mdis(x1, y1, x2, y2):\\n\\treturn abs(x1 - x2) + abs(y1 - y2)\\nmod = 998244353\\nINF = float('inf')\\nfrom math import factorial\\nfrom collections import Counter, defaultdict, deque\\nfrom heapq import heapify, heappop, heappush\\n\\ndef main():\\n\\tfor _ in range(N()):\\n\\t\\t(n, k) = RL()\\n\\t\\tgp = [[] for _ in range(n + 1)]\\n\\t\\tind = [0] * (n + 1)\\n\\t\\tfor _ in range(n - 1):\\n\\t\\t\\t(a, b) = RL()\\n\\t\\t\\tgp[a].append(b)\\n\\t\\t\\tgp[b].append(a)\\n\\t\\t\\tind[a] += 1\\n\\t\\t\\tind[b] += 1\\n\\t\\tif k == 1:\\n\\t\\t\\tprint(n - 1)\\n\\t\\t\\tcontinue\\n\\t\\tq = []\\n\\t\\tvis = [0] * (n + 1)\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tif ind[i] == 1:\\n\\t\\t\\t\\tq.append(i)\\n\\t\\t\\t\\tvis[i] = 1\\n\\t\\tnum = [0] * (n + 1)\\n\\t\\tres = 0\\n\\t\\twhile q:\\n\\t\\t\\tnd = q.pop()\\n\\t\\t\\tind[nd] -= 1\\n\\t\\t\\tfor nex in gp[nd]:\\n\\t\\t\\t\\tif vis[nex] == 1:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tind[nex] -= 1\\n\\t\\t\\t\\tnum[nex] += 1\\n\\t\\t\\t\\tif num[nex] % k == 0:\\n\\t\\t\\t\\t\\tres += 1\\n\\t\\t\\t\\t\\tif ind[nex] == 1:\\n\\t\\t\\t\\t\\t\\tq.append(nex)\\n\\t\\t\\t\\t\\t\\tvis[nex] = 1\\n\\t\\tprint(res)\\nmain()\\n\", \"from collections import deque\\nfor t in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\ttree = [[] for i in range(n)]\\n\\tfor i in range(n - 1):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\ttree[x - 1].append(y - 1)\\n\\t\\ttree[y - 1].append(x - 1)\\n\\tnumLeaves = [0 for i in range(n)]\\n\\tisLeaf = [False for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif len(tree[i]) == 1:\\n\\t\\t\\tnumLeaves[tree[i][0]] += 1\\n\\t\\t\\tisLeaf[i] = True\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tq = []\\n\\tfor i in range(n):\\n\\t\\tif numLeaves[i] >= k:\\n\\t\\t\\tq.append(i)\\n\\tq = deque(q)\\n\\tans = 0\\n\\twhile len(q) > 0:\\n\\t\\tcurr = q.popleft()\\n\\t\\tans += numLeaves[curr] // k\\n\\t\\tif numLeaves[curr] % k == 0:\\n\\t\\t\\tnumLeaves[curr] = 0\\n\\t\\t\\tcnt = 0\\n\\t\\t\\tnonLeafNeib = -1\\n\\t\\t\\tfor neib in tree[curr]:\\n\\t\\t\\t\\tif not isLeaf[neib]:\\n\\t\\t\\t\\t\\tcnt += 1\\n\\t\\t\\t\\t\\tnonLeafNeib = neib\\n\\t\\t\\t\\t\\tif cnt == 2:\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif cnt == 1:\\n\\t\\t\\t\\tisLeaf[curr] = True\\n\\t\\t\\t\\tnumLeaves[nonLeafNeib] += 1\\n\\t\\t\\t\\tif numLeaves[nonLeafNeib] == k:\\n\\t\\t\\t\\t\\tq.append(nonLeafNeib)\\n\\t\\telse:\\n\\t\\t\\tnumLeaves[curr] = numLeaves[curr] % k\\n\\tprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef read_list():\\n\\treturn map(int, input().split())\\n\\ndef print_list(l):\\n\\tprint(' '.join(map(str, l)))\\nfrom collections import defaultdict\\nN = int(input())\\nfor _ in range(N):\\n\\t(n, k) = read_list()\\n\\tif k == 1:\\n\\t\\tfor _ in range(n - 1):\\n\\t\\t\\tinput()\\n\\t\\tprint(n - 1)\\n\\telse:\\n\\t\\tdic = defaultdict(int)\\n\\t\\tde = defaultdict(set)\\n\\t\\tfor _ in range(n - 1):\\n\\t\\t\\t(a, b) = read_list()\\n\\t\\t\\tde[a].add(b)\\n\\t\\t\\tde[b].add(a)\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tdic[i] = len(de[i])\\n\\t\\tdd = defaultdict(int)\\n\\t\\tfor v in range(1, n + 1):\\n\\t\\t\\tif dic[v] >= k:\\n\\t\\t\\t\\tfor u in de[v]:\\n\\t\\t\\t\\t\\tif dic[u] == 1:\\n\\t\\t\\t\\t\\t\\tdd[v] += 1\\n\\t\\ts = set((i for i in range(1, n + 1) if dd[i] >= k))\\n\\t\\tres = 0\\n\\t\\twhile s:\\n\\t\\t\\tv = s.pop()\\n\\t\\t\\twhile dd[v] >= k:\\n\\t\\t\\t\\tres += 1\\n\\t\\t\\t\\tdic[v] -= k\\n\\t\\t\\t\\tdd[v] -= k\\n\\t\\t\\t\\tif dic[v] == 1:\\n\\t\\t\\t\\t\\tfor t in de[v]:\\n\\t\\t\\t\\t\\t\\tif dic[t] >= k:\\n\\t\\t\\t\\t\\t\\t\\tdd[t] += 1\\n\\t\\t\\t\\t\\t\\t\\tif dd[t] >= k:\\n\\t\\t\\t\\t\\t\\t\\t\\ts.add(t)\\n\\t\\tprint(res)\\n\", \"import sys\\nimport math\\nfrom _collections import deque\\ninput = sys.stdin.readline\\nI = lambda : list(map(int, input().split()))\\nma = int(10000000000000000)\\nmod = 1000000007\\ntc = int(input())\\nfor p in range(tc):\\n\\t(n, k) = map(int, input().split())\\n\\tadj = [[] for i in range(n + 2)]\\n\\tdeg = [0] * (n + 2)\\n\\tb = [0] * (n + 2)\\n\\tfor i in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tdeg[u] += 1\\n\\t\\tdeg[v] += 1\\n\\t\\tadj[u].append(v)\\n\\t\\tadj[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tfor i in range(1, n + 1):\\n\\t\\tif deg[i] == 1:\\n\\t\\t\\tx = adj[i][0]\\n\\t\\t\\tb[x] += 1\\n\\tq = []\\n\\tfor i in range(1, n + 1):\\n\\t\\tif b[i] >= k:\\n\\t\\t\\tq.append(i)\\n\\tans = int(0)\\n\\twhile len(q) > 0:\\n\\t\\tu = int(q[0])\\n\\t\\tq.pop(0)\\n\\t\\tcn = int(b[u] / k)\\n\\t\\tans += cn\\n\\t\\tdeg[u] = deg[u] - cn * k\\n\\t\\tb[u] %= k\\n\\t\\tif deg[u] == 1:\\n\\t\\t\\tpar = int(-1)\\n\\t\\t\\tfor j in adj[u]:\\n\\t\\t\\t\\tif deg[j] > 1:\\n\\t\\t\\t\\t\\tpar = j\\n\\t\\t\\tif par == -1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tb[par] += 1\\n\\t\\t\\tif b[par] == k:\\n\\t\\t\\t\\tq.append(par)\\n\\tprint(ans)\\n\", \"from sys import stdin\\ninput = stdin.readline\\n\\ndef solve():\\n\\t(n, k) = map(int, input().split())\\n\\tadj = [[] for _ in range(n)]\\n\\tfrd = [set() for _ in range(n)]\\n\\tcnt = [0] * n\\n\\tis_leaf = [False] * n\\n\\tfor _ in range(n - 1):\\n\\t\\t(u, v) = map(int, input().split())\\n\\t\\tu -= 1\\n\\t\\tv -= 1\\n\\t\\tadj[u].append(v)\\n\\t\\tadj[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\treturn\\n\\tfor i in range(n):\\n\\t\\tif len(adj[i]) == 1:\\n\\t\\t\\tis_leaf[i] = True\\n\\t\\t\\tcnt[adj[i][0]] += 1\\n\\tq = []\\n\\tfor u in range(n):\\n\\t\\tif cnt[u] >= k:\\n\\t\\t\\tq.append(u)\\n\\t\\tfor v in adj[u]:\\n\\t\\t\\tif not is_leaf[v]:\\n\\t\\t\\t\\tfrd[u].add(v)\\n\\tans = 0\\n\\twhile len(q) > 0:\\n\\t\\tu = q.pop()\\n\\t\\tans += cnt[u] // k\\n\\t\\tcnt[u] %= k\\n\\t\\tif cnt[u] == 0 and len(frd[u]) == 1:\\n\\t\\t\\tp = frd[u].pop()\\n\\t\\t\\tfrd[p].remove(u)\\n\\t\\t\\tcnt[p] += 1\\n\\t\\t\\tif cnt[p] >= k:\\n\\t\\t\\t\\tq.append(p)\\n\\tprint(ans)\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tsolve()\\nmain()\\n\", \"import sys\\ninput = sys.stdin.readline\\nfor _ in range(int(input())):\\n\\t(n, k) = map(int, input().split())\\n\\tedge = [[] for i in range(n)]\\n\\tfor i in range(n - 1):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\tedge[x - 1].append(y - 1)\\n\\t\\tedge[y - 1].append(x - 1)\\n\\tleaf = [[] for i in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif len(edge[i]) == 1:\\n\\t\\t\\tleaf[edge[i][0]].append(i)\\n\\tque = [i for i in range(n) if len(leaf[i]) >= k]\\n\\tdeg = [len(edge[i]) for i in range(n)]\\n\\tdelete = set([])\\n\\tans = 0\\n\\twhile que:\\n\\t\\tv = que.pop()\\n\\t\\tif v in delete:\\n\\t\\t\\tcontinue\\n\\t\\tq = len(leaf[v]) // k\\n\\t\\tcount = q * k\\n\\t\\tans += q\\n\\t\\twhile count:\\n\\t\\t\\tdv = leaf[v].pop()\\n\\t\\t\\tdelete.add(dv)\\n\\t\\t\\tcount -= 1\\n\\t\\tdeg[v] -= q * k\\n\\t\\tif deg[v] == 1:\\n\\t\\t\\tfor nv in edge[v]:\\n\\t\\t\\t\\tif nv not in delete:\\n\\t\\t\\t\\t\\tleaf[nv].append(v)\\n\\t\\t\\t\\t\\tif len(leaf[nv]) == k:\\n\\t\\t\\t\\t\\t\\tque.append(nv)\\n\\t\\t\\t\\t\\tbreak\\n\\tprint(ans)\\n\", \"import sys\\nsys.setrecursionlimit(10 ** 5)\\nint1 = lambda x: int(x) - 1\\np2D = lambda x: print(*x, sep='\\\\n')\\n\\ndef II():\\n\\treturn int(sys.stdin.readline())\\n\\ndef MI():\\n\\treturn map(int, sys.stdin.readline().split())\\n\\ndef MI1():\\n\\treturn map(int1, sys.stdin.readline().split())\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef LLI(rows_number):\\n\\treturn [LI() for _ in range(rows_number)]\\n\\ndef SI():\\n\\treturn sys.stdin.readline()[:-1]\\nfor _ in range(II()):\\n\\t(n, k) = MI()\\n\\tto = [[] for _ in range(n)]\\n\\tfor _ in range(n - 1):\\n\\t\\t(u, v) = MI1()\\n\\t\\tto[u].append(v)\\n\\t\\tto[v].append(u)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tdp = [0] * n\\n\\tbeleaf = [False] * n\\n\\tleaves = [0] * n\\n\\tstack = [(0, -1)]\\n\\tfirst = [True] * n\\n\\twhile stack:\\n\\t\\t(u, pu) = stack.pop()\\n\\t\\tif first[u]:\\n\\t\\t\\tfirst[u] = False\\n\\t\\t\\tstack.append((u, pu))\\n\\t\\t\\tfor v in to[u]:\\n\\t\\t\\t\\tif v == pu:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tstack.append((v, u))\\n\\t\\telse:\\n\\t\\t\\tdp[u] = leaves[u] // k\\n\\t\\t\\tif pu != -1 and dp[u] * k + 1 == len(to[u]):\\n\\t\\t\\t\\tleaves[pu] += 1\\n\\t\\t\\t\\tbeleaf[u] = True\\n\\t\\t\\tfor v in to[u]:\\n\\t\\t\\t\\tif v == pu:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\tdp[u] += dp[v]\\n\\tstack = [(0, -1)]\\n\\twhile stack:\\n\\t\\t(u, pu) = stack.pop()\\n\\t\\tfor v in to[u]:\\n\\t\\t\\tif v == pu:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tdp[v] = dp[u]\\n\\t\\t\\tif (leaves[u] - beleaf[v]) % k == 0 and leaves[u] - beleaf[v] + 1 == len(to[u]):\\n\\t\\t\\t\\tleaves[v] += 1\\n\\t\\t\\t\\tif leaves[v] % k == 0:\\n\\t\\t\\t\\t\\tdp[v] += 1\\n\\t\\t\\tstack.append((v, u))\\n\\tprint(max(dp))\\n\", \"import io\\nimport os\\nfrom collections import Counter, defaultdict, deque\\n\\ndef solve(N, K, edges):\\n\\tif K == 1:\\n\\t\\treturn len(edges)\\n\\tgraph = [[] for i in range(N)]\\n\\tfor (u, v) in edges:\\n\\t\\tgraph[u].append(v)\\n\\t\\tgraph[v].append(u)\\n\\tq = set()\\n\\tleaves = set()\\n\\tfor u in range(N):\\n\\t\\tif len(graph[u]) == 1:\\n\\t\\t\\t(v,) = graph[u]\\n\\t\\t\\tq.add(v)\\n\\t\\t\\tleaves.add(u)\\n\\tremoved = set()\\n\\tq = deque(q)\\n\\twhile q:\\n\\t\\tparent = q.popleft()\\n\\t\\tif parent in removed or parent in leaves:\\n\\t\\t\\tcontinue\\n\\t\\tchildren = [v for v in graph[parent] if v in leaves and v not in removed]\\n\\t\\tfor i in range(len(children) // K * K):\\n\\t\\t\\tremoved.add(children[i])\\n\\t\\tif len(children) % K == 0:\\n\\t\\t\\tnbrs = [v for v in graph[parent] if v not in removed]\\n\\t\\t\\tif len(nbrs) == 1:\\n\\t\\t\\t\\tleaves.add(parent)\\n\\t\\t\\t\\tq.append(nbrs[0])\\n\\treturn len(removed) // K\\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\\nT = int(input())\\nfor t in range(T):\\n\\t(N, K) = [int(x) for x in input().split()]\\n\\tedges = [[int(x) - 1 for x in input().split()] for i in range(N - 1)]\\n\\tans = solve(N, K, edges)\\n\\tprint(ans)\\n\", \"from sys import stdin, stdout\\nfrom collections import deque\\nt = int(stdin.readline())\\nfor x in range(t):\\n\\t(n, k) = map(int, stdin.readline().split())\\n\\tdic = {}\\n\\tfor i in range(n - 1):\\n\\t\\t(x, y) = map(int, stdin.readline().split())\\n\\t\\tx -= 1\\n\\t\\ty -= 1\\n\\t\\tif x not in dic:\\n\\t\\t\\tdic[x] = set()\\n\\t\\tif y not in dic:\\n\\t\\t\\tdic[y] = set()\\n\\t\\tdic[x].add(y)\\n\\t\\tdic[y].add(x)\\n\\tif k == 1:\\n\\t\\tprint(n - 1)\\n\\t\\tcontinue\\n\\tisleaf = set()\\n\\tleaves = [0 for _ in range(n)]\\n\\tfor i in range(n):\\n\\t\\tif len(dic[i]) == 1:\\n\\t\\t\\tisleaf.add(i)\\n\\t\\t\\tp = next(iter(dic[i]))\\n\\t\\t\\tleaves[p] += 1\\n\\tq = deque()\\n\\tfrd = [set() for _ in range(n)]\\n\\tfor l in range(n):\\n\\t\\tif leaves[l] >= k:\\n\\t\\t\\tq.append(l)\\n\\t\\tfor v in dic[l]:\\n\\t\\t\\tif v not in isleaf:\\n\\t\\t\\t\\tfrd[l].add(v)\\n\\tans = 0\\n\\twhile len(q) > 0:\\n\\t\\tu = q.popleft()\\n\\t\\tans += leaves[u] // k\\n\\t\\tleaves[u] %= k\\n\\t\\tif leaves[u] == 0 and len(frd[u]) == 1:\\n\\t\\t\\tp = frd[u].pop()\\n\\t\\t\\tfrd[p].remove(u)\\n\\t\\t\\tleaves[p] += 1\\n\\t\\t\\tif leaves[p] >= k:\\n\\t\\t\\t\\tq.append(p)\\n\\tprint(ans)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n7 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n7 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n6 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 3\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 6\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 2\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n1 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 7\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 7\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 3\\n6 8\\n3 1\\n6 4\\n6 1\\n10 1\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 5\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 5\\n7 2\\n3 1\\n4 5\\n3 6\\n7 6\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 2\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 2\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n7 4\\n6 1\\n10 3\\n1 2\\n1 10\\n4 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n7 1\\n10 1\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n1 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 1\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 2\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 8\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n1 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n1 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 4\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n7 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n2 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n7 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n1 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 7\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 3\\n6 8\\n3 1\\n6 4\\n6 1\\n10 1\\n1 3\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n3 8\\n3 1\\n8 4\\n7 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n1 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 2\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 2\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 4\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n2 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 6\\n1 2\\n1 10\\n1 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n2 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 7\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n5 4\\n7 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n1 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 2\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 7\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 2\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 8\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 7\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 3\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n5 9\\n8 10\\n7 4\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n7 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n6 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 3\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n2 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n2 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 3\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 5\\n1 4\\n1 10\\n2 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 7\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n2 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 7\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n8 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n2 4\\n2 1\\n2 3\\n5 3\\n\", \"4\\n8 10\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n5 4\\n7 1\\n10 3\\n1 2\\n2 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n1 5\\n4 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 5\\n7 2\\n3 1\\n4 5\\n3 6\\n7 6\\n1 2\\n1 4\\n5 1\\n1 3\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 3\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n2 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 2\\n7 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n6 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 3\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 3\\n3 2\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n2 3\\n5 3\\n\", \"4\\n8 4\\n1 2\\n1 5\\n7 6\\n6 8\\n3 2\\n7 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n6 9\\n8 10\\n7 2\\n3 1\\n2 5\\n3 6\\n7 3\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 6\\n1 2\\n2 5\\n7 6\\n6 8\\n3 1\\n6 4\\n4 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 3\\n3 2\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 4\\n2 1\\n2 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 4\\n1 10\\n4 3\\n1 5\\n2 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n2 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\", \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\"], \"outputs\": [\"2\\n3\\n3\\n4\\n\", \"2\\n3\\n0\\n4\\n\", \"2\\n3\\n3\\n4\\n\", \"2\\n2\\n3\\n4\\n\", \"1\\n3\\n0\\n4\\n\", \"1\\n3\\n3\\n4\\n\", \"2\\n1\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"1\\n0\\n0\\n4\\n\", \"0\\n3\\n0\\n4\\n\", \"1\\n0\\n3\\n4\\n\", \"0\\n1\\n3\\n4\\n\", \"2\\n1\\n0\\n4\\n\", \"0\\n0\\n3\\n4\\n\", \"0\\n9\\n0\\n4\\n\", \"2\\n0\\n3\\n4\\n\", \"2\\n0\\n0\\n4\\n\", \"2\\n2\\n3\\n2\\n\", \"1\\n2\\n0\\n4\\n\", \"0\\n9\\n3\\n4\\n\", \"7\\n2\\n3\\n4\\n\", \"1\\n1\\n3\\n4\\n\", \"2\\n1\\n3\\n4\\n\", \"2\\n1\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n1\\n3\\n4\\n\", \"2\\n3\\n0\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n3\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n1\\n0\\n4\\n\", \"0\\n9\\n0\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n2\\n3\\n4\\n\", \"1\\n3\\n0\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"1\\n0\\n3\\n4\\n\", \"0\\n1\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n1\\n0\\n4\\n\", \"2\\n1\\n0\\n4\\n\", \"0\\n3\\n0\\n4\\n\", \"2\\n0\\n0\\n4\\n\", \"1\\n0\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n3\\n3\\n4\\n\", \"2\\n0\\n0\\n4\\n\", \"0\\n0\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"0\\n3\\n3\\n4\\n\", \"2\\n0\\n0\\n4\\n\", \"0\\n3\\n0\\n4\\n\", \"0\\n0\\n3\\n4\\n\", \"0\\n3\\n0\\n4\\n\", \"0\\n0\\n3\\n4\\n\", \"0\\n3\\n0\\n4\\n\", \"2\\n1\\n3\\n4\\n\", \"2\\n3\\n3\\n4\\n\"]}",
    "difficulty": "HARD",
    "raw_tags": "['trees', 'data structures', 'greedy', 'implementation']",
    "name": null,
    "source": "codeforces",
    "tags": "['Tree algorithms', 'Data structures', 'Implementation', 'Greedy algorithms']",
    "skill_types": "['Data structures', 'Greedy algorithms']",
    "url": "https://codeforces.com/problemset/problem/1385/F",
    "Expected Auxiliary Space": null,
    "time_limit": "2 seconds",
    "date": "2020-07-17",
    "picture_num": "3",
    "memory_limit": "256 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "You are given a book with $n$ chapters.\n\nEach chapter has a specified list of other chapters that need to be understood in order to understand this chapter. To understand a chapter, you must read it after you understand every chapter on its required list.\n\nCurrently you don't understand any of the chapters. You are going to read the book from the beginning till the end repeatedly until you understand the whole book. Note that if you read a chapter at a moment when you don't understand some of the required chapters, you don't understand this chapter.\n\nDetermine how many times you will read the book to understand every chapter, or determine that you will never understand every chapter no matter how many times you read the book.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 2\\cdot10^4$).\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2\\cdot10^5$) — number of chapters.\n\nThen $n$ lines follow. The $i$-th line begins with an integer $k_i$ ($0 \\le k_i \\le n-1$) — number of chapters required to understand the $i$-th chapter. Then $k_i$ integers $a_{i,1}, a_{i,2}, \\dots, a_{i, k_i}$ ($1 \\le a_{i, j} \\le n, a_{i, j} \\ne i, a_{i, j} \\ne a_{i, l}$ for $j \\ne l$) follow — the chapters required to understand the $i$-th chapter.\n\nIt is guaranteed that the sum of $n$ and sum of $k_i$ over all testcases do not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor each test case, if the entire book can be understood, print how many times you will read it, otherwise print $-1$.\n\n\n-----Examples-----\n\nInput\n5\n4\n1 2\n0\n2 1 4\n1 2\n5\n1 5\n1 1\n1 2\n1 3\n1 4\n5\n0\n0\n2 1 2\n1 2\n2 2 1\n4\n2 2 3\n0\n0\n2 3 2\n5\n1 2\n1 3\n1 4\n1 5\n0\nOutput\n2\n-1\n1\n2\n5\n\n\n-----Note-----\n\nIn the first example, we will understand chapters $\\{2, 4\\}$ in the first reading and chapters $\\{1, 3\\}$ in the second reading of the book.\n\nIn the second example, every chapter requires the understanding of some other chapter, so it is impossible to understand the book.\n\nIn the third example, every chapter requires only chapters that appear earlier in the book, so we can understand everything in one go.\n\nIn the fourth example, we will understand chapters $\\{2, 3, 4\\}$ in the first reading and chapter $1$ in the second reading of the book.\n\nIn the fifth example, we will understand one chapter in every reading from $5$ to $1$.",
    "solutions": "[\"import sys, heapq\\nfor _ in range(int(sys.stdin.readline())):\\n\\tn = int(sys.stdin.readline())\\n\\td = [[] for i in range(n)]\\n\\th = []\\n\\tl = []\\n\\tfor i in range(n):\\n\\t\\ty = [int(i) for i in sys.stdin.readline().split()]\\n\\t\\tl.append(y[0])\\n\\t\\tif y[0] == 0:\\n\\t\\t\\theapq.heappush(h, i)\\n\\t\\tfor j in range(1, y[0] + 1):\\n\\t\\t\\td[y[j] - 1].append(i)\\n\\tc = t = 0\\n\\twhile h:\\n\\t\\ti = heapq.heappop(h)\\n\\t\\tt += 1\\n\\t\\tc = i // n\\n\\t\\ti = i % n\\n\\t\\tfor j in d[i]:\\n\\t\\t\\tl[j] -= 1\\n\\t\\t\\tif l[j] == 0:\\n\\t\\t\\t\\theapq.heappush(h, j + c * n if j > i else j + n + c * n)\\n\\tsys.stdout.write('%d\\\\n' % (c + 1 if t == n else -1))\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = [list(map(int, input().split())) for _ in range(n)]\\n\\tgraph = [[] for _ in range(n)]\\n\\tincoming = [0] * n\\n\\tvals = [1] * n\\n\\tfor i in range(n):\\n\\t\\tfor j in range(1, len(arr[i])):\\n\\t\\t\\tincoming[i] += 1\\n\\t\\t\\tgraph[arr[i][j] - 1].append(i)\\n\\tq = []\\n\\tordering = []\\n\\tfor i in range(n):\\n\\t\\tif incoming[i] == 0:\\n\\t\\t\\tq.append(i)\\n\\twhile q:\\n\\t\\tnode = q.pop()\\n\\t\\tordering.append(node)\\n\\t\\tfor nei in graph[node]:\\n\\t\\t\\tincoming[nei] -= 1\\n\\t\\t\\tvals[nei] = max(vals[nei], vals[node] + 1 if nei < node else vals[node])\\n\\t\\t\\tif incoming[nei] == 0:\\n\\t\\t\\t\\tq.append(nei)\\n\\treturn -1 if len(ordering) < n else max(vals)\\nfor _ in range(int(input())):\\n\\tprint(solve())\\n\", \"from heapq import *\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tb = [[] for i in range(n + 1)]\\n\\td = [0 for i in range(n + 1)]\\n\\tfor i in range(1, n + 1):\\n\\t\\tl = list(map(int, input().split()))\\n\\t\\td[i] = l[0]\\n\\t\\tfor j in l[1:]:\\n\\t\\t\\tb[j].append(i)\\n\\tcount = 0\\n\\tcursum = sum(d)\\n\\tif cursum == 0:\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\tpossible = True\\n\\t\\tcanread = []\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tif d[i] == 0:\\n\\t\\t\\t\\theappush(canread, i)\\n\\t\\twhile True:\\n\\t\\t\\tif len(canread) == 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcount += 1\\n\\t\\t\\tnextread = []\\n\\t\\t\\twhile len(canread) > 0:\\n\\t\\t\\t\\tx = heappop(canread)\\n\\t\\t\\t\\tfor c in b[x]:\\n\\t\\t\\t\\t\\td[c] -= 1\\n\\t\\t\\t\\t\\tif d[c] == 0:\\n\\t\\t\\t\\t\\t\\tif c > x:\\n\\t\\t\\t\\t\\t\\t\\theappush(canread, c)\\n\\t\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\t\\theappush(nextread, c)\\n\\t\\t\\tcanread = nextread\\n\\t\\tprint(count if sum(d) == 0 else -1)\\n\", \"from collections import deque\\nimport heapq\\n\\ndef inp():\\n\\tn = int(input())\\n\\treqs = [0 for _ in range(n + 1)]\\n\\taffects = [[] for _ in range(n + 1)]\\n\\tfor i in range(1, n + 1):\\n\\t\\ttemp = list(map(int, input().split()))\\n\\t\\tif temp[0] == 0:\\n\\t\\t\\tcontinue\\n\\t\\treqs[i] = temp[0]\\n\\t\\tfor chapter in temp[1:]:\\n\\t\\t\\taffects[chapter].append(i)\\n\\treturn (reqs, affects, n)\\n\\ndef solve(reqs, affects, n):\\n\\tto_read = [i for i in range(1, n + 1) if not reqs[i]]\\n\\theapq.heapify(to_read)\\n\\tchapters_read = 0\\n\\tcount = 0\\n\\tcur = 0\\n\\twhile to_read:\\n\\t\\tnext_read = []\\n\\t\\twhile to_read:\\n\\t\\t\\tnext_chapter = heapq.heappop(to_read)\\n\\t\\t\\treqs[next_chapter] = -1\\n\\t\\t\\tchapters_read += 1\\n\\t\\t\\tfor affected in affects[next_chapter]:\\n\\t\\t\\t\\treqs[affected] -= 1\\n\\t\\t\\t\\tif not reqs[affected] and affected > next_chapter:\\n\\t\\t\\t\\t\\theapq.heappush(to_read, affected)\\n\\t\\t\\t\\telif not reqs[affected]:\\n\\t\\t\\t\\t\\tnext_read.append(affected)\\n\\t\\tcount += 1\\n\\t\\tto_read = next_read\\n\\t\\theapq.heapify(to_read)\\n\\tif chapters_read == n:\\n\\t\\treturn count\\n\\telse:\\n\\t\\treturn -1\\nt = int(input())\\nfor _ in range(t):\\n\\t(reqs, affects, n) = inp()\\n\\tans = solve(reqs, affects, n)\\n\\tprint(ans)\\n\", \"def solve(_num=0):\\n\\tn = int(input())\\n\\tchapters = []\\n\\tc___deps = [[] for _ in range(n)]\\n\\tfor i in range(n):\\n\\t\\tc = [int(x) - 1 for x in input().split()]\\n\\t\\tc.pop(0)\\n\\t\\tfor neigh in c:\\n\\t\\t\\tc___deps[neigh].append(i)\\n\\t\\tchapters.append(c)\\n\\tstack = []\\n\\tc___rnr = [0 for _ in range(n)]\\n\\tc___ans = [-1 for _ in range(n)]\\n\\tfor (i, c) in enumerate(chapters):\\n\\t\\tif c___rnr[i] == len(c):\\n\\t\\t\\tstack.append(i)\\n\\t\\t\\tc___ans[i] = 1\\n\\twhile stack:\\n\\t\\tcurr = stack.pop()\\n\\t\\tfor dep in c___deps[curr]:\\n\\t\\t\\tc___rnr[dep] += 1\\n\\t\\t\\tif c___rnr[dep] == len(chapters[dep]):\\n\\t\\t\\t\\tans = -1\\n\\t\\t\\t\\tfor dd in chapters[dep]:\\n\\t\\t\\t\\t\\tca = c___ans[dd]\\n\\t\\t\\t\\t\\tif dd > dep:\\n\\t\\t\\t\\t\\t\\tca += 1\\n\\t\\t\\t\\t\\tans = max(ca, ans)\\n\\t\\t\\t\\tc___ans[dep] = ans\\n\\t\\t\\t\\tstack.append(dep)\\n\\tif -1 in c___ans:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(max(c___ans))\\nfor i in range(int(input())):\\n\\tsolve(i)\\n\", \"t = int(input())\\nwhile t:\\n\\tn = int(input())\\n\\tct = [1] * n\\n\\tpre_req = [0] * n\\n\\tdt = {i: [] for i in range(n)}\\n\\tqueue = []\\n\\tfor j in range(n):\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tfor i in range(1, a[0] + 1):\\n\\t\\t\\tdt[a[i] - 1].append(j)\\n\\t\\tpre_req[j] = a[0]\\n\\t\\tif a[0] == 0:\\n\\t\\t\\tqueue += [j]\\n\\tind = 0\\n\\twhile ind < len(queue):\\n\\t\\tg = queue[ind]\\n\\t\\tfor i in dt[g]:\\n\\t\\t\\tpre_req[i] -= 1\\n\\t\\t\\tct[i] = max(ct[i], ct[g] + [0, 1][i < g])\\n\\t\\t\\tif pre_req[i] == 0:\\n\\t\\t\\t\\tqueue.append(i)\\n\\t\\tind += 1\\n\\tif max(pre_req) != 0:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(max(ct))\\n\\tt -= 1\\n\", \"import sys\\ninput = sys.stdin.readline\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tl = [1] * n\\n\\td = {i: [] for i in range(n)}\\n\\tq = []\\n\\tm = [0] * n\\n\\tfor j in range(n):\\n\\t\\ta = [*map(int, input().split())]\\n\\t\\tfor i in range(1, a[0] + 1):\\n\\t\\t\\td[a[i] - 1].append(j)\\n\\t\\tm[j] = a[0]\\n\\t\\tif a[0] == 0:\\n\\t\\t\\tq += [[a[0], j]]\\n\\ty = 0\\n\\twhile y < len(q):\\n\\t\\tg = q[y]\\n\\t\\tfor i in d[g[1]]:\\n\\t\\t\\tm[i] -= 1\\n\\t\\t\\tl[i] = max(l[i], l[g[1]] + [0, 1][i < g[1]])\\n\\t\\t\\tif m[i] == 0:\\n\\t\\t\\t\\tq += [[0, i]]\\n\\t\\ty += 1\\n\\tif max(m) != 0:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(max(l))\\n\", \"from collections import defaultdict\\nfrom heapq import heappush, heappop\\nt = int(input().strip())\\ninputs = []\\nfor _ in range(t):\\n\\tn = int(input().strip())\\n\\tprereqs = []\\n\\tfor _ in range(n):\\n\\t\\tls = list(map(int, input().strip().split()))\\n\\t\\tprereqs.append(ls)\\n\\tinputs.append((n, prereqs))\\nfor (n, prereqs) in inputs:\\n\\trequired = [0] * (n + 1)\\n\\trequired_by = defaultdict(list)\\n\\tfor i in range(1, n + 1):\\n\\t\\tfor p in prereqs[i - 1][1:]:\\n\\t\\t\\trequired_by[p].append(i)\\n\\t\\t\\trequired[i] += 1\\n\\tq = []\\n\\tfor i in range(1, n + 1):\\n\\t\\tif required[i] == 0:\\n\\t\\t\\theappush(q, i)\\n\\tif not q:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tread_count = 0\\n\\tans = 0\\n\\tnext_q = []\\n\\twhile q:\\n\\t\\ti = heappop(q)\\n\\t\\tread_count += 1\\n\\t\\tfor j in required_by[i]:\\n\\t\\t\\trequired[j] -= 1\\n\\t\\t\\tif required[j] != 0:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif j > i:\\n\\t\\t\\t\\theappush(q, j)\\n\\t\\t\\telse:\\n\\t\\t\\t\\theappush(next_q, j)\\n\\t\\tif not q:\\n\\t\\t\\tq = next_q\\n\\t\\t\\tnext_q = []\\n\\t\\t\\tans += 1\\n\\tif read_count < n:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(ans)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = [1] * n\\n\\td = {i: [] for i in range(n)}\\n\\tq = []\\n\\tm = [0] * n\\n\\tfor j in range(n):\\n\\t\\ta = [*map(int, input().split())]\\n\\t\\tfor i in range(1, a[0] + 1):\\n\\t\\t\\td[a[i] - 1].append(j)\\n\\t\\tm[j] = a[0]\\n\\t\\tif a[0] == 0:\\n\\t\\t\\tq += [[a[0], j]]\\n\\ty = 0\\n\\twhile y < len(q):\\n\\t\\tg = q[y]\\n\\t\\tfor i in d[g[1]]:\\n\\t\\t\\tm[i] -= 1\\n\\t\\t\\tl[i] = max(l[i], l[g[1]] + [0, 1][i < g[1]])\\n\\t\\t\\tif m[i] == 0:\\n\\t\\t\\t\\tq += [[0, i]]\\n\\t\\ty += 1\\n\\tif max(m) != 0:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(max(l))\\n\", \"def func2(datalist, n):\\n\\tfished = [0] * (n + 1)\\n\\tsid = 1\\n\\teid = 1\\n\\txlist = [[]]\\n\\tchildren = [[] for i in range(n + 1)]\\n\\txn = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif datalist[i][0] == 0:\\n\\t\\t\\tfished[eid] = i\\n\\t\\t\\teid += 1\\n\\t\\t\\txlist.append([1, 0])\\n\\t\\t\\txn += 1\\n\\t\\telse:\\n\\t\\t\\tfor id in datalist[i][1:]:\\n\\t\\t\\t\\tchildren[id].append(i)\\n\\t\\t\\txlist.append([1, datalist[i][0]])\\n\\tmaxstep = 1\\n\\twhile sid != eid:\\n\\t\\tcid = fished[sid]\\n\\t\\tsid += 1\\n\\t\\tfor id in children[cid]:\\n\\t\\t\\txlist[id][1] -= 1\\n\\t\\t\\tif cid < id:\\n\\t\\t\\t\\txlist[id][0] = max(xlist[id][0], xlist[cid][0])\\n\\t\\t\\telse:\\n\\t\\t\\t\\txlist[id][0] = max(xlist[id][0], xlist[cid][0] + 1)\\n\\t\\t\\tif xlist[id][1] == 0:\\n\\t\\t\\t\\txn += 1\\n\\t\\t\\t\\tmaxstep = max(maxstep, xlist[id][0])\\n\\t\\t\\t\\tif children[id]:\\n\\t\\t\\t\\t\\tfished[eid] = id\\n\\t\\t\\t\\t\\teid += 1\\n\\tif xn != n:\\n\\t\\treturn -1\\n\\treturn maxstep\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tdatalist = [0]\\n\\tfor i in range(n):\\n\\t\\tdatalist.append([int(x) for x in input().split()])\\n\\tprint(func2(datalist, n))\\n\", \"from collections import defaultdict as dd, deque\\nimport sys\\ninput = sys.stdin.readline\\n\\ndef check_cycle(g, indegree, n):\\n\\tc = 0\\n\\td = deque([])\\n\\tans = dd(lambda : 1)\\n\\tfor i in range(n):\\n\\t\\tif indegree[i + 1] == 0:\\n\\t\\t\\td.append(i + 1)\\n\\twhile d:\\n\\t\\tu = d.popleft()\\n\\t\\tc += 1\\n\\t\\tfor v in g[u]:\\n\\t\\t\\tindegree[v] -= 1\\n\\t\\t\\tif v < u:\\n\\t\\t\\t\\tans[v] = max(ans[v], ans[u] + 1)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans[v] = max(ans[v], ans[u])\\n\\t\\t\\tif indegree[v] == 0:\\n\\t\\t\\t\\td.append(v)\\n\\tif c != n:\\n\\t\\treturn False\\n\\tif ans:\\n\\t\\treturn max(ans.values())\\n\\treturn 1\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tg = dd(set)\\n\\tindegree = dd(int)\\n\\tfor i in range(n):\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tfor j in range(1, a[0] + 1):\\n\\t\\t\\tindegree[i + 1] += 1\\n\\t\\t\\tg[a[j]].add(i + 1)\\n\\tres = check_cycle(g, indegree, n)\\n\\tif res == False:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(res)\\n\", \"from collections import defaultdict, deque\\n\\ndef book_turn(indegree, graph):\\n\\tqueue = deque([(x, 1) for x in indegree if indegree[x] == 0])\\n\\tif not queue:\\n\\t\\treturn -1\\n\\tvisited = set(queue)\\n\\t(turns, read_chapters) = (0, 0)\\n\\tchapter_turns = [0 for _ in range(len(indegree))]\\n\\twhile queue:\\n\\t\\tfor _ in range(len(queue)):\\n\\t\\t\\t(node, turn) = queue.popleft()\\n\\t\\t\\tread_chapters += 1\\n\\t\\t\\tturns = max(turns, turn)\\n\\t\\t\\tfor neighbour in graph[node]:\\n\\t\\t\\t\\tindegree[neighbour] -= 1\\n\\t\\t\\t\\tcur_turn = turn if neighbour > node else turn + 1\\n\\t\\t\\t\\tchapter_turns[neighbour - 1] = max(chapter_turns[neighbour - 1], cur_turn)\\n\\t\\t\\t\\tif indegree[neighbour] == 0:\\n\\t\\t\\t\\t\\tqueue.append((neighbour, chapter_turns[neighbour - 1]))\\n\\tif read_chapters != len(indegree):\\n\\t\\treturn -1\\n\\treturn turns\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tindegree = defaultdict(int)\\n\\tgraph = defaultdict(set)\\n\\tfor i in range(1, n + 1):\\n\\t\\tdependent = list(map(int, input().split()))\\n\\t\\tif dependent[0] == 0:\\n\\t\\t\\tindegree[i] = 0\\n\\t\\tfor j in range(1, len(dependent)):\\n\\t\\t\\tindegree[i] += 1\\n\\t\\t\\tgraph[dependent[j]].add(i)\\n\\tprint(book_turn(indegree, graph))\\n\", \"from collections import deque\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\trl = {}\\n\\tl = {i: [] for i in range(1, n + 1)}\\n\\tq = deque([])\\n\\tkl = {}\\n\\tvist = {i: False for i in range(1, n + 1)}\\n\\tfor i in range(1, n + 1):\\n\\t\\tt = list(map(int, input().split()))\\n\\t\\trl[i] = t[1:]\\n\\t\\tfor j in rl[i]:\\n\\t\\t\\tl[j].append(i)\\n\\t\\tif t[0] == 0:\\n\\t\\t\\tq.append(i)\\n\\t\\tkl[i] = t[0]\\n\\ttopo = []\\n\\twhile len(q) != 0:\\n\\t\\tu = q[0]\\n\\t\\tq.popleft()\\n\\t\\tvist[u] = True\\n\\t\\ttopo.append(u)\\n\\t\\tfor v in l[u]:\\n\\t\\t\\tif kl[v] - 1 == 0:\\n\\t\\t\\t\\tq.append(v)\\n\\t\\t\\tkl[v] -= 1\\n\\tf = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif vist[i] == False:\\n\\t\\t\\tf = 1\\n\\t\\t\\tbreak\\n\\tif f == 1:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tdp = [1] * (n + 1)\\n\\tans = 0\\n\\tfor i in topo:\\n\\t\\tfor j in rl[i]:\\n\\t\\t\\tif i > j:\\n\\t\\t\\t\\tdp[i] = max(dp[i], dp[j])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp[i] = max(dp[i], dp[j] + 1)\\n\\t\\tans = max(ans, dp[i])\\n\\tprint(ans)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"5\\n4\\n1 2\\n0\\n2 1 4\\n1 2\\n5\\n1 5\\n1 1\\n1 2\\n1 3\\n1 4\\n5\\n0\\n0\\n2 1 2\\n1 2\\n2 2 1\\n4\\n2 2 3\\n0\\n0\\n2 3 2\\n5\\n1 2\\n1 3\\n1 4\\n1 5\\n0\\n\"], \"outputs\": [\"2\\n-1\\n1\\n2\\n5\\n\"]}",
    "difficulty": "MEDIUM_HARD",
    "raw_tags": "['data structures', 'implementation', 'binary search', 'dp', 'brute force', 'graphs', 'sortings']",
    "name": null,
    "source": "codeforces",
    "tags": "['Graph algorithms', 'Sorting', 'Implementation', 'Complete search', 'Dynamic programming', 'Data structures']",
    "skill_types": "['Dynamic programming', 'Sorting', 'Data structures', 'Complete search']",
    "url": "https://codeforces.com/problemset/problem/1572/A",
    "Expected Auxiliary Space": null,
    "time_limit": "1.5 seconds",
    "date": "2021-09-18",
    "picture_num": "0",
    "memory_limit": "256 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "Given a matrix A of dimensions NxN where every element is either O or X. Find the largest subsquare surrounded by X.\nExample 1:\nInput:\nN=2\nA=[[X,X][X,X]]\nOutput:\n2\nExplanation:\nThe largest square submatrix \nsurrounded by X is the whole \ninput matrix.\nExample 2:\nInput:\nN=4\nA=[[X,X,X,O],[X,O,X,X],\n[X,X,X,O],[X,O,X,X]]\nOutput:\n3\nExplanation:\nHere,the input represents following \nmatrix of size 4 x 4\nX X X O\nX O X X\nX X X O\nX O X X\nThe square submatrix starting at \n(0,0) and ending at (2,2) is the \nlargest submatrix surrounded by X.\nTherefore, size of that matrix would be 3.\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function largestSubsquare() which takes the integer N and the matrix A as input parameters and returns the size of the largest subsquare surrounded by 'X'.\nExpected Time Complexity:O(N^{2})\nExpected Auxillary Space:O(N^{2})\nConstraints:\n1<=N<=1000\nA[i][j]={'X','O'}",
    "solutions": "[\"class Solution:\\n\\n\\tdef largestSubsquare(self, N, A):\\n\\t\\tm = [[[0 for _ in range(N)] for _ in range(N)] for _ in range(2)]\\n\\t\\tfor i in range(N):\\n\\t\\t\\tm[0][i][0] = 1 if A[i][0] == 'X' else 0\\n\\t\\t\\tfor j in range(1, N):\\n\\t\\t\\t\\tif A[i][j] == 'X':\\n\\t\\t\\t\\t\\tm[0][i][j] = m[0][i][j - 1] + 1\\n\\t\\tfor j in range(N):\\n\\t\\t\\tm[1][0][j] = 1 if A[0][j] == 'X' else 0\\n\\t\\t\\tfor i in range(1, N):\\n\\t\\t\\t\\tif A[i][j] == 'X':\\n\\t\\t\\t\\t\\tm[1][i][j] = m[1][i - 1][j] + 1\\n\\t\\tans = 0\\n\\t\\tfor i in range(N):\\n\\t\\t\\tfor j in range(N):\\n\\t\\t\\t\\td = min(m[0][i][j], m[1][i][j])\\n\\t\\t\\t\\twhile d > 0:\\n\\t\\t\\t\\t\\tif m[0][i - d + 1][j] >= d and m[1][i][j - d + 1] >= d:\\n\\t\\t\\t\\t\\t\\tans = max(d, ans)\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\td -= 1\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef get_hor_mat(self, n, a, hor):\\n\\t\\tfor i in range(n):\\n\\t\\t\\tfor j in range(n):\\n\\t\\t\\t\\tif i >= 0 and j == 0:\\n\\t\\t\\t\\t\\tif a[i][j] == 'X':\\n\\t\\t\\t\\t\\t\\thor[i][j] = 1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\thor[i][j] = 0\\n\\t\\t\\t\\telif a[i][j] == 'X':\\n\\t\\t\\t\\t\\thor[i][j] = hor[i][j - 1] + 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcontinue\\n\\n\\tdef get_ver_mat(self, n, a, ver):\\n\\t\\tfor i in range(n):\\n\\t\\t\\tfor j in range(n):\\n\\t\\t\\t\\tif i == 0 and j >= 0:\\n\\t\\t\\t\\t\\tif a[i][j] == 'X':\\n\\t\\t\\t\\t\\t\\tver[i][j] = 1\\n\\t\\t\\t\\telif a[i][j] == 'X':\\n\\t\\t\\t\\t\\tver[i][j] = ver[i - 1][j] + 1\\n\\n\\tdef largestSubsquare(self, n, a):\\n\\t\\thor = [[0 for j in range(n)] for i in range(n)]\\n\\t\\tver = [[0 for j in range(n)] for i in range(n)]\\n\\t\\tmax_square = 0\\n\\t\\tself.get_hor_mat(n, a, hor)\\n\\t\\tself.get_ver_mat(n, a, ver)\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tfor j in range(n - 1, -1, -1):\\n\\t\\t\\t\\tmin_val = min(hor[i][j], ver[i][j])\\n\\t\\t\\t\\twhile min_val > max_square:\\n\\t\\t\\t\\t\\tif ver[i][j - min_val + 1] >= min_val and hor[i - min_val + 1][j] >= min_val:\\n\\t\\t\\t\\t\\t\\tmax_square = min_val\\n\\t\\t\\t\\t\\tmin_val -= 1\\n\\t\\treturn max_square\\n\", \"class Solution:\\n\\n\\tdef largestSubsquare(self, N, A):\\n\\t\\t(ROWS, COLS) = (len(A), len(A[0]))\\n\\t\\tdp = [[[0, 0] for i in range(ROWS + 1)] for j in range(COLS + 1)]\\n\\t\\tfor i in range(ROWS):\\n\\t\\t\\tfor j in range(COLS):\\n\\t\\t\\t\\tif A[i][j] == 'X':\\n\\t\\t\\t\\t\\tdp[i + 1][j + 1][0] = dp[i][j + 1][0] + 1\\n\\t\\t\\t\\t\\tdp[i + 1][j + 1][1] = dp[i + 1][j][1] + 1\\n\\t\\tmaxi = 0\\n\\t\\tfor i in range(ROWS, 0, -1):\\n\\t\\t\\tfor j in range(COLS, 0, -1):\\n\\t\\t\\t\\tcurMin = min(dp[i][j][0], dp[i][j][1])\\n\\t\\t\\t\\twhile curMin > maxi:\\n\\t\\t\\t\\t\\tif dp[i - curMin + 1][j][1] >= curMin and dp[i][j - curMin + 1][0] >= curMin:\\n\\t\\t\\t\\t\\t\\tmaxi = curMin\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tcurMin -= 1\\n\\t\\treturn maxi\\n\", \"class Solution:\\n\\n\\tdef largestSubsquare(self, N, A):\\n\\t\\tB = [[0] * N for i in range(N)]\\n\\t\\tfor row in range(N):\\n\\t\\t\\tfor i in reversed(range(N)):\\n\\t\\t\\t\\tif A[row][i] == 'X':\\n\\t\\t\\t\\t\\tif i == N - 1:\\n\\t\\t\\t\\t\\t\\tB[row][i] = 1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tB[row][i] = B[row][i + 1] + 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tB[row][i] = 0\\n\\t\\tC = [[0] * N for i in range(N)]\\n\\t\\tfor col in range(N):\\n\\t\\t\\tfor i in reversed(range(N)):\\n\\t\\t\\t\\tif A[i][col] == 'X':\\n\\t\\t\\t\\t\\tif i == N - 1:\\n\\t\\t\\t\\t\\t\\tC[i][col] = 1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tC[i][col] = C[i + 1][col] + 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tC[i][col] = 0\\n\\t\\tmax_square = 0\\n\\t\\tfor i in range(N):\\n\\t\\t\\tfor j in range(N):\\n\\t\\t\\t\\tk = min(B[i][j], C[i][j])\\n\\t\\t\\t\\twhile k > 0:\\n\\t\\t\\t\\t\\tif C[i][j + k - 1] >= k and B[i + k - 1][j] >= k:\\n\\t\\t\\t\\t\\t\\tif k > max_square:\\n\\t\\t\\t\\t\\t\\t\\tmax_square = k\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\tk -= 1\\n\\t\\treturn max_square\\nimport math\\nif __name__ == '__main__':\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tN = int(input())\\n\\t\\ta = []\\n\\t\\tfor i in range(N):\\n\\t\\t\\ts = list(map(str, input().strip().split()))\\n\\t\\t\\ta.append(s)\\n\\t\\tob = Solution()\\n\\t\\tprint(ob.largestSubsquare(N, a))\\n\", \"class Solution:\\n\\n\\tdef largestSubsquare(self, N, A):\\n\\t\\tleft_c = [[0] * N for i in range(N)]\\n\\t\\ttop_c = [[0] * N for i in range(N)]\\n\\t\\tfor i in range(N):\\n\\t\\t\\tfor j in range(N):\\n\\t\\t\\t\\tif A[i][j] == 'X':\\n\\t\\t\\t\\t\\tleft_c[i][j] = (left_c[i][j - 1] if j > 0 else 0) + 1\\n\\t\\t\\t\\t\\ttop_c[i][j] = (top_c[i - 1][j] if i > 0 else 0) + 1\\n\\t\\tmax_len = 0\\n\\t\\tfor i in range(N - 1, -1, -1):\\n\\t\\t\\tfor j in range(N - 1, -1, -1):\\n\\t\\t\\t\\tval = min(left_c[i][j], top_c[i][j])\\n\\t\\t\\t\\twhile val > max_len:\\n\\t\\t\\t\\t\\tif top_c[i][j - val + 1] >= val and left_c[i - val + 1][j] >= val:\\n\\t\\t\\t\\t\\t\\tmax_len = max(max_len, val)\\n\\t\\t\\t\\t\\tval -= 1\\n\\t\\treturn max_len\\n\", \"class Solution:\\n\\n\\tdef largestSubsquare(self, n, a):\\n\\t\\tdp = [[[0, 0] for i in range(n)] for i in range(n)]\\n\\t\\tdp[0][0] = [1, 1] if a[0][0] == 'X' else [0, 0]\\n\\t\\tm = dp[0][0][0]\\n\\n\\t\\tdef check(i, j, back):\\n\\t\\t\\tnonlocal dp\\n\\t\\t\\tnonlocal m\\n\\t\\t\\twhile back > m and (dp[i - back + 1][j][1] < back or dp[i][j - back + 1][0] < back):\\n\\t\\t\\t\\tback -= 1\\n\\t\\t\\treturn back if back > m else m\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif a[0][i] == 'X':\\n\\t\\t\\t\\tdp[0][i] = [1, dp[0][i - 1][1] + 1]\\n\\t\\t\\tif a[i][0] == 'X':\\n\\t\\t\\t\\tdp[i][0] = [dp[i - 1][0][0] + 1, 1]\\n\\t\\t\\tm = max(m, min(dp[0][i]), min(dp[i][0]))\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tfor j in range(1, n):\\n\\t\\t\\t\\tif a[i][j] == 'X':\\n\\t\\t\\t\\t\\tdp[i][j][0] = dp[i - 1][j][0] + 1\\n\\t\\t\\t\\t\\tdp[i][j][1] = dp[i][j - 1][1] + 1\\n\\t\\t\\t\\t\\tx = min(dp[i][j])\\n\\t\\t\\t\\t\\tif x > m:\\n\\t\\t\\t\\t\\t\\tm = check(i, j, x)\\n\\t\\treturn m\\n\", \"class Solution:\\n\\n\\tdef largestSubsquare(self, N, A):\\n\\t\\ta = [[[0, 0] for i in range(N)] for i in range(N)]\\n\\t\\tfor i in range(N):\\n\\t\\t\\tfor j in range(N):\\n\\t\\t\\t\\tif A[i][j] == 'O':\\n\\t\\t\\t\\t\\ta[i][j][0] = 0\\n\\t\\t\\t\\t\\ta[i][j][1] = 0\\n\\t\\t\\t\\telif A[i][j] == 'X':\\n\\t\\t\\t\\t\\tif i - 1 >= 0:\\n\\t\\t\\t\\t\\t\\ta[i][j][1] = a[i - 1][j][1] + 1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\ta[i][j][1] = 1\\n\\t\\t\\t\\t\\tif j - 1 >= 0:\\n\\t\\t\\t\\t\\t\\ta[i][j][0] = a[i][j - 1][0] + 1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\ta[i][j][0] = 1\\n\\t\\tmax = 0\\n\\t\\tfor i in range(N):\\n\\t\\t\\tfor j in range(N):\\n\\t\\t\\t\\taa = min(a[i][j][0], a[i][j][1])\\n\\t\\t\\t\\twhile aa > max:\\n\\t\\t\\t\\t\\tif aa > max and a[i - aa + 1][j][0] >= aa and (a[i][j - aa + 1][1] >= aa):\\n\\t\\t\\t\\t\\t\\tmax = aa\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\taa -= 1\\n\\t\\treturn max\\n\", \"class Solution:\\n\\n\\tdef largestSubsquare(self, N, mat):\\n\\t\\tMax = 0\\n\\t\\tmp = [[(0, 0) for i in range(N)] for i in range(N)]\\n\\t\\tfor i in range(N):\\n\\t\\t\\tfor j in range(N):\\n\\t\\t\\t\\tif mat[i][j] == 'O':\\n\\t\\t\\t\\t\\tmp[i][j] = (0, 0)\\n\\t\\t\\t\\telif i == 0 and j == 0:\\n\\t\\t\\t\\t\\tmp[i][j] = (1, 1)\\n\\t\\t\\t\\telif i == 0:\\n\\t\\t\\t\\t\\tmp[i][j] = (1, mp[i][j - 1][1] + 1)\\n\\t\\t\\t\\telif j == 0:\\n\\t\\t\\t\\t\\tmp[i][j] = (mp[i - 1][j][0] + 1, 1)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tmp[i][j] = (mp[i - 1][j][0] + 1, mp[i][j - 1][1] + 1)\\n\\t\\tfor i in range(N - 1, -1, -1):\\n\\t\\t\\tfor j in range(N - 1, -1, -1):\\n\\t\\t\\t\\tsmall = mp[i][j][0] if mp[i][j][0] < mp[i][j][1] else mp[i][j][1]\\n\\t\\t\\t\\twhile small > Max:\\n\\t\\t\\t\\t\\tif mp[i][j - small + 1][0] >= small and mp[i - small + 1][j][1] >= small:\\n\\t\\t\\t\\t\\t\\tMax = small\\n\\t\\t\\t\\t\\tsmall -= 1\\n\\t\\treturn Max\\n\"]",
    "starter_code": "#User function Template for python3\n\n\n\nclass Solution:\n\n    def largestSubsquare(self,N,A):\n\n        #code here",
    "input_output": "{\"inputs\": [\"N=2\\r\\nA=[[X,X][X,X]]\", \"N=4\\r\\nA=[[X,X,X,O],[X,O,X,X],\\r\\n[X,X,X,O],[X,O,X,X]]\"], \"outputs\": [\"2\", \"3\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['Data Structures', 'Matrix']",
    "name": null,
    "source": "geeksforgeeks",
    "tags": "['Matrices', 'Data structures']",
    "skill_types": "['Data structures']",
    "url": "https://practice.geeksforgeeks.org/problems/largest-subsquare-surrounded-by-x0558/1",
    "Expected Auxiliary Space": "O(N^{2})",
    "time_limit": null,
    "date": null,
    "picture_num": "0",
    "memory_limit": null,
    "Expected Time Complexity": "O(N^{2})"
  },
  {
    "question": "PolandBall lives in a forest with his family. There are some trees in the forest. Trees are undirected acyclic graphs with k vertices and k - 1 edges, where k is some integer. Note that one vertex is a valid tree.\n\nThere is exactly one relative living in each vertex of each tree, they have unique ids from 1 to n. For each Ball i we know the id of its most distant relative living on the same tree. If there are several such vertices, we only know the value of the one with smallest id among those.\n\nHow many trees are there in the forest?\n\nInput\n\nThe first line contains single integer n (1 ≤ n ≤ 104) — the number of Balls living in the forest.\n\nThe second line contains a sequence p1, p2, ..., pn of length n, where (1 ≤ pi ≤ n) holds and pi denotes the most distant from Ball i relative living on the same tree. If there are several most distant relatives living on the same tree, pi is the id of one with the smallest id.\n\nIt's guaranteed that the sequence p corresponds to some valid forest.\n\nHacking: To hack someone, you should provide a correct forest as a test. The sequence p will be calculated according to the forest and given to the solution you try to hack as input. Use the following format:\n\nIn the first line, output the integer n (1 ≤ n ≤ 104) — the number of Balls and the integer m (0 ≤ m < n) — the total number of edges in the forest. Then m lines should follow. The i-th of them should contain two integers ai and bi and represent an edge between vertices in which relatives ai and bi live. For example, the first sample is written as follows:\n    \n    \n      \n    5 3  \n    1 2  \n    3 4  \n    4 5  \n    \n\nOutput\n\nYou should output the number of trees in the forest where PolandBall lives.\n\nInteraction\n\nFrom the technical side, this problem is interactive. However, it should not affect you (except hacking) since there is no interaction.\n\nExamples\n\nInput\n\n5\n2 1 5 3 3\n\nOutput\n\n2\n\nInput\n\n1\n1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample testcase, possible forest is: 1-2 3-4-5. \n\nThere are 2 trees overall.\n\nIn the second sample testcase, the only possible graph is one vertex and no edges. Therefore, there is only one tree.",
    "solutions": "[\"n = int(input())\\na = [0] + list(map(int, input().split()))\\nwas = set()\\nfor i in range(1, n + 1):\\n\\tif a[a[i]] == i:\\n\\t\\twas.add(min(i, a[i]))\\nprint(len(was))\\n\", \"from sys import stdin\\ninput = stdin.readline\\nR = lambda : map(int, input().split())\\nI = lambda : int(input())\\n\\ndef find(x):\\n\\twhile x != p[x]:\\n\\t\\tp[x] = p[p[x]]\\n\\t\\tx = p[x]\\n\\treturn x\\nn = I()\\nv = []\\nt = 0\\np = [0] + list(R())\\nfor i in range(1, n + 1):\\n\\tv += (find(i),)\\nprint(len(set(v)))\\n\", \"from sys import stdout, stdin, setrecursionlimit\\nfrom io import BytesIO, IOBase\\nfrom collections import *\\nfrom itertools import *\\nfrom bisect import *\\nfrom string import *\\nfrom queue import *\\nfrom heapq import *\\nfrom math import *\\nfrom re import *\\nfrom os import *\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = read(self._fd, max(fstat(self._fd).st_size, 8192))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = read(self._fd, max(fstat(self._fd).st_size, 8192))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\twrite(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(stdin, stdout) = (IOWrapper(stdin), IOWrapper(stdout))\\n(graph, mod, szzz) = ({}, 10 ** 9 + 7, lambda : sorted(zzz()))\\n\\ndef getStr():\\n\\treturn input()\\n\\ndef getInt():\\n\\treturn int(input())\\n\\ndef listStr():\\n\\treturn list(input())\\n\\ndef getStrs():\\n\\treturn input().split()\\n\\ndef isInt(s):\\n\\treturn '0' <= s[0] <= '9'\\n\\ndef input():\\n\\treturn stdin.readline().strip()\\n\\ndef zzz():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef output(answer, end='\\\\n'):\\n\\tstdout.write(str(answer) + end)\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\ndx = [-1, 1, 0, 0, 1, -1, 1, -1]\\ndy = [0, 0, 1, -1, 1, -1, -1, 1]\\ndaysInMounth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\\nn = getInt()\\narr = [0] + zzz()\\ncnt = 0\\nfor i in range(1, n + 1):\\n\\tif arr[arr[i]] == i and arr[i] <= i:\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\ncounter = 0\\nfor i in range(n):\\n\\tif p[i] == i + 1:\\n\\t\\tcounter += 1\\nprint((len(set(p)) - counter) // 2 + (len(set(p)) - counter) % 2 + counter)\\n\", \"import sys\\nn = int(input())\\nps = [int(p) for p in input().split()]\\nnum_trees = 0\\nps_exself = set()\\nfor (i, p) in enumerate(ps):\\n\\tif i + 1 != p:\\n\\t\\tps_exself.add(p)\\n\\telse:\\n\\t\\tnum_trees += 1\\nnum_trees += len(ps_exself) // 2\\nans = num_trees\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, sys.stdin.readline().split()))\\nres = 0\\nd = {}\\nfor i in range(n):\\n\\tif a[i] == -1:\\n\\t\\tcontinue\\n\\td = {}\\n\\tkey1 = i + 1\\n\\tkey2 = a[i]\\n\\twhile key1 not in d:\\n\\t\\td[key1] = key2\\n\\t\\tkey1 = key2\\n\\t\\tkey2 = a[key1 - 1]\\n\\t\\tif key2 == -1:\\n\\t\\t\\td = {}\\n\\t\\t\\tbreak\\n\\tif len(list(d.keys())) > 0:\\n\\t\\tres += 1\\n\\tfor j in d:\\n\\t\\ta[j - 1] = -1\\nprint(res)\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(n):\\n\\tif p[p[i] - 1] == i + 1 and p[i] <= i + 1:\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"def solve(n, balls):\\n\\tmarked = [False] * (n + 1)\\n\\ttrees = 0\\n\\tfor i in balls:\\n\\t\\tif not marked[i]:\\n\\t\\t\\ttrees += 1\\n\\t\\t\\tmarked[i] = True\\n\\t\\t\\tmarked[balls[i - 1]] = True\\n\\treturn trees\\nn = int(input())\\nballs = list(map(int, input().split()))\\nprint(solve(n, balls))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nans = 0\\nb = []\\nfor i in range(n):\\n\\tif a[i] == i + 1:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tb.append(a[i])\\nprint(ans + len(set(b)) // 2)\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\nnd = [set() for _ in range(n + 1)]\\nfor i in range(n):\\n\\tnd[p[i]].add(i + 1)\\n\\tnd[i + 1].add(p[i])\\ntid = 0\\nt = [0] * (n + 1)\\nfor i in range(1, n + 1):\\n\\tif t[i] > 0:\\n\\t\\tcontinue\\n\\ttid += 1\\n\\tt[i] = tid\\n\\ttmp1 = nd[i]\\n\\twhile len(tmp1) > 0:\\n\\t\\ttmp2 = set()\\n\\t\\tfor x in tmp1:\\n\\t\\t\\tif t[x] > 0:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tt[x] = tid\\n\\t\\t\\tfor y in nd[x]:\\n\\t\\t\\t\\ttmp2.add(y)\\n\\t\\ttmp1 = tmp2\\nprint(tid)\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\ngraph = [None] * n\\nfor i in range(n):\\n\\tval_p = p[i] - 1\\n\\tif graph[i] == None:\\n\\t\\tgraph[i] = [val_p]\\n\\telse:\\n\\t\\tgraph[i].append(val_p)\\n\\tif graph[val_p] == None:\\n\\t\\tgraph[val_p] = [i]\\n\\telse:\\n\\t\\tgraph[val_p].append(i)\\nis_checked = [False] * n\\nans = 0\\nfor i in range(n):\\n\\tif not is_checked[i]:\\n\\t\\tans += 1\\n\\t\\tstack = [i]\\n\\t\\twhile stack:\\n\\t\\t\\ttop = stack.pop()\\n\\t\\t\\tis_checked[top] = True\\n\\t\\t\\tfor val in set(graph[top]):\\n\\t\\t\\t\\tif not is_checked[val]:\\n\\t\\t\\t\\t\\tstack.append(val)\\nprint(ans)\\n\", \"read = lambda : map(int, input().split())\\nn = int(input())\\na = list(read())\\ng = [list() for i in range(n + 1)]\\nfor i in range(n):\\n\\tg[a[i]].append(i + 1)\\n\\tg[i + 1].append(a[i])\\nwas = [0] * (n + 1)\\n\\ndef dfs(v):\\n\\tif was[v]:\\n\\t\\treturn\\n\\twas[v] = 1\\n\\tfor u in g[v]:\\n\\t\\tdfs(u)\\ncnt = 0\\nfor i in range(1, n + 1):\\n\\tif not was[i]:\\n\\t\\tdfs(i)\\n\\t\\tcnt += 1\\nprint(cnt)\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nd = dict()\\nfor j in range(n):\\n\\tif A[j] in d:\\n\\t\\td[A[j]].append(j + 1)\\n\\telse:\\n\\t\\td[A[j]] = [j + 1]\\nvisited = [0] * n\\nans = 0\\nfor j in range(n):\\n\\tif visited[j] == 0:\\n\\t\\tans += 1\\n\\t\\tvisited[j] = 1\\n\\t\\trang = A[j]\\n\\t\\trang2 = A[rang - 1]\\n\\t\\tif rang in d:\\n\\t\\t\\tfor t in d[rang]:\\n\\t\\t\\t\\tvisited[t - 1] = 1\\n\\t\\tif rang2 in d:\\n\\t\\t\\tfor t in d[rang2]:\\n\\t\\t\\t\\tvisited[t - 1] = 1\\nprint(ans)\\n\", \"def nTreesInForest(nPolandBalls, mostDistantRelatives):\\n\\tnTrees = 0\\n\\tforest = set()\\n\\tfor iBall in range(nPolandBalls):\\n\\t\\t(ball, itsRelative) = (iBall + 1, mostDistantRelatives[iBall])\\n\\t\\tif ball == itsRelative:\\n\\t\\t\\tnTrees += 1\\n\\t\\telif itsRelative not in forest:\\n\\t\\t\\tforest.add(itsRelative)\\n\\treturn nTrees + len(forest) // 2\\nprint(nTreesInForest(int(input()), list(map(int, input().split()))))\\n\", \"from collections import *\\nimport bisect\\nimport heapq\\nimport sys\\n\\ndef ri():\\n\\treturn int(input())\\n\\ndef rl():\\n\\treturn list(map(int, input().split()))\\n\\ndef dfs(v, current):\\n\\tcomponents[v] = current\\n\\tto_visit = [v]\\n\\twhile to_visit:\\n\\t\\tnode = to_visit.pop()\\n\\t\\tfor child in graph[node]:\\n\\t\\t\\tif not components[child]:\\n\\t\\t\\t\\tcomponents[child] = current\\n\\t\\t\\t\\tto_visit.append(child)\\nn = ri()\\npp = rl()\\npp = [x - 1 for x in pp]\\ngraph = [[] for i in range(n)]\\nfor i in range(n):\\n\\tgraph[i].append(pp[i])\\n\\tgraph[pp[i]].append(i)\\ncomponents = [0] * n\\ncurrent = 0\\nfor v in range(n):\\n\\tif not components[v]:\\n\\t\\tcurrent += 1\\n\\t\\tdfs(v, current)\\nprint(current)\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\nballs = int(input())\\nrelations = list(map(int, input().split()))\\nsames = 0\\nfor i in range(balls):\\n\\tif relations[i] == i + 1:\\n\\t\\tsames += 1\\n\\t\\trelations[i] = 'lolnoob'\\nrelations = [i for i in relations if i != 'lolnoob']\\nprint(int(math.ceil(len(list(set(relations))) / 2)) + sames)\\n\", \"n = int(input())\\nedge_list = list(map(int, input().split(' ')))\\nadj = [[] for i in range(n + 1)]\\nvisited = [False for i in range(n + 1)]\\nfor (idx, i) in enumerate(edge_list):\\n\\tp = i - 1\\n\\tadj[p].append(idx)\\n\\tadj[idx].append(p)\\n\\ndef dfs(node):\\n\\tif visited[node]:\\n\\t\\treturn\\n\\tvisited[node] = True\\n\\tfor ch in adj[node]:\\n\\t\\tdfs(ch)\\nnum_trees = 0\\nfor i in range(n):\\n\\tif not visited[i]:\\n\\t\\tnum_trees += 1\\n\\t\\tdfs(i)\\nprint(num_trees)\\n\", \"from collections import defaultdict\\n\\ndef find_set(v):\\n\\tif v == parent[v]:\\n\\t\\treturn v\\n\\tparent[v] = find_set(parent[v])\\n\\treturn parent[v]\\n\\ndef union_set(a, b):\\n\\ta = find_set(a)\\n\\tb = find_set(b)\\n\\tif a != b:\\n\\t\\tparent[a] = b\\nn = int(input())\\np = list(map(int, input().split()))\\nparent = [j for j in range(n + 1)]\\nfor i in range(n):\\n\\tunion_set(i + 1, p[i])\\ncost = 0\\nfor i in range(1, n + 1):\\n\\tif i == parent[i]:\\n\\t\\tcost += 1\\nprint(cost)\\n\", \"from collections import Counter\\n\\nclass DisjointSetUnion:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.parent = list(range(n))\\n\\t\\tself.size = [1] * n\\n\\t\\tself.num_sets = n\\n\\n\\tdef find(self, a):\\n\\t\\tacopy = a\\n\\t\\twhile a != self.parent[a]:\\n\\t\\t\\ta = self.parent[a]\\n\\t\\twhile acopy != a:\\n\\t\\t\\t(self.parent[acopy], acopy) = (a, self.parent[acopy])\\n\\t\\treturn a\\n\\n\\tdef union(self, a, b):\\n\\t\\t(a, b) = (self.find(a), self.find(b))\\n\\t\\tif a != b:\\n\\t\\t\\tif self.size[a] < self.size[b]:\\n\\t\\t\\t\\t(a, b) = (b, a)\\n\\t\\t\\tself.num_sets -= 1\\n\\t\\t\\tself.parent[b] = a\\n\\t\\t\\tself.size[a] += self.size[b]\\n\\n\\tdef set_size(self, a):\\n\\t\\treturn self.size[self.find(a)]\\n\\n\\tdef __len__(self):\\n\\t\\treturn self.num_sets\\n\\ndef pro(arr):\\n\\tn = len(arr)\\n\\tlst = []\\n\\tdsu = DisjointSetUnion(n)\\n\\tfor i in range(n):\\n\\t\\tk = arr[i] - 1\\n\\t\\tdsu.union(i, k)\\n\\treturn dsu.num_sets\\nt = 1\\nfor i in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tres = pro(arr)\\n\\tprint(res, flush=True)\\n\", \"n = int(input())\\ntree = list(range(n + 1))\\narr = list(map(int, input().split()))\\n\\ndef find(st):\\n\\tif tree[st] != st:\\n\\t\\ttree[st] = find(tree[st])\\n\\treturn tree[st]\\nfor i in range(n):\\n\\ttree[find(i + 1)] = find(arr[i])\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif find(i) == i:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"import sys\\nreadline = sys.stdin.readline\\n\\ndef i1():\\n\\treturn int(readline())\\n\\ndef nl():\\n\\treturn [int(s) for s in readline().split()]\\n\\ndef nn(n):\\n\\treturn [int(readline()) for i in range(n)]\\n\\ndef nnp(n, x):\\n\\treturn [int(readline()) + x for i in range(n)]\\n\\ndef nmp(n, x):\\n\\treturn (int(readline()) + x for i in range(n))\\n\\ndef nlp(x):\\n\\treturn [int(s) + x for s in readline().split()]\\n\\ndef nll(n):\\n\\treturn [[int(s) for s in readline().split()] for i in range(n)]\\n\\ndef mll(n):\\n\\treturn ([int(s) for s in readline().split()] for i in range(n))\\n\\ndef s1():\\n\\treturn readline().rstrip()\\n\\ndef sl():\\n\\treturn [s for s in readline().split()]\\n\\ndef sn(n):\\n\\treturn [readline().rstrip() for i in range(n)]\\n\\ndef sm(n):\\n\\treturn (readline().rstrip() for i in range(n))\\n\\ndef redir(s):\\n\\tglobal readline\\n\\timport os\\n\\tfn = sys.argv[0] + f'/../in-{s}.txt'\\n\\treadline = open(fn).readline if os.path.exists(fn) else readline\\nredir('c')\\nn = i1()\\nids = set()\\ncnt = 0\\ni = 1\\nfor p in nl():\\n\\tif i == p:\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\tids.add(p)\\n\\ti += 1\\nprint(cnt + len(ids) // 2)\\n\", \"P = [0]\\n\\ndef find(x):\\n\\tglobal P\\n\\tif P[x] == x:\\n\\t\\treturn x\\n\\tP[x] = find(P[x])\\n\\treturn P[x]\\nn = int(input())\\nP = P + [0] * n\\nA = [0] + list(map(int, input().split()))\\nfor i in range(1, n + 1):\\n\\tP[i] = i\\nfor i in range(1, n + 1):\\n\\tu = find(A[i])\\n\\tv = find(i)\\n\\tP[u] = v\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif P[i] == i:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\na = [i for i in map(int, input().split())]\\nt = a[0]\\nt = a[t - 1]\\np = [t, a[t - 1]]\\nd = {(min(p), max(p))}\\nfor i in range(len(a)):\\n\\tt = a[i]\\n\\tt = a[t - 1]\\n\\tp = [t, a[t - 1]]\\n\\tp = (min(p), max(p))\\n\\tif not p in d:\\n\\t\\td.add(p)\\nprint(len(d))\\n\", \"class CodeforcesTask755CSolution:\\n\\n\\tdef __init__(self):\\n\\t\\tself.result = ''\\n\\t\\tself.n = 0\\n\\t\\tself.distant = []\\n\\n\\tdef read_input(self):\\n\\t\\tself.n = int(input())\\n\\t\\tself.distant = [int(x) for x in input().split(' ')]\\n\\n\\tdef process_task(self):\\n\\t\\tgraph = [[] for x in range(self.n)]\\n\\t\\tfor x in range(self.n):\\n\\t\\t\\tgraph[x].append(self.distant[x])\\n\\t\\t\\tgraph[self.distant[x] - 1].append(x + 1)\\n\\t\\tcomp = 0\\n\\t\\tcomponent = [0] * self.n\\n\\t\\tfor x in range(self.n):\\n\\t\\t\\tif not component[x]:\\n\\t\\t\\t\\tcomp += 1\\n\\t\\t\\t\\tto_visit = [x + 1]\\n\\t\\t\\t\\twhile to_visit:\\n\\t\\t\\t\\t\\tvisiting = to_visit.pop(-1)\\n\\t\\t\\t\\t\\tif not component[visiting - 1]:\\n\\t\\t\\t\\t\\t\\tcomponent[visiting - 1] = comp\\n\\t\\t\\t\\t\\t\\tto_visit += graph[visiting - 1]\\n\\t\\tself.result = str(comp)\\n\\n\\tdef get_result(self):\\n\\t\\treturn self.result\\nSolution = CodeforcesTask755CSolution()\\nSolution.read_input()\\nSolution.process_task()\\nprint(Solution.get_result())\\n\", \"n = int(input()) + 1\\np = list(range(n))\\n\\ndef g(x):\\n\\tif x != p[x]:\\n\\t\\tp[x] = g(p[x])\\n\\treturn p[x]\\nfor (i, j) in enumerate(map(int, input().split()), 1):\\n\\tp[g(i)] = g(j)\\nfor i in range(n):\\n\\tg(i)\\nprint(len(set(p)) - 1)\\n\", \"import sys\\nnoh = int(sys.stdin.readline())\\nloca = list(map(int, sys.stdin.readline().split()))\\nap = set()\\nsamecount = 0\\nfor i in range(noh):\\n\\tif i + 1 not in ap and loca[i] not in ap:\\n\\t\\tif i + 1 == loca[i]:\\n\\t\\t\\tsamecount += 1\\n\\t\\t\\tap.add(i + 1)\\n\\t\\telif loca[loca[i] - 1] == i + 1:\\n\\t\\t\\tap.add(loca[i])\\n\\t\\t\\tap.add(i + 1)\\n\\t\\telse:\\n\\t\\t\\tap.add(loca[loca[i] - 1])\\n\\t\\t\\tap.add(loca[i])\\nif samecount >= 1:\\n\\tprint((len(ap) - samecount) // 2 + samecount)\\nelse:\\n\\tprint(len(ap) // 2)\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\ngc = 0\\nfgc = 0\\ngrps = [0] * (n + 1)\\ngrpdic = {}\\nfor i in range(n):\\n\\ta = grps[i + 1]\\n\\tb = grps[p[i]]\\n\\tif i + 1 == p[i]:\\n\\t\\tfgc += 1\\n\\telif a != 0 and b != 0:\\n\\t\\tif a != b:\\n\\t\\t\\tfgc -= 1\\n\\t\\t\\tfor e in grpdic[b]:\\n\\t\\t\\t\\tgrps[e] = a\\n\\telif a == 0 and b == 0:\\n\\t\\tgc += 1\\n\\t\\tgrps[i + 1] = grps[p[i]] = gc\\n\\t\\tgrpdic[gc] = set([i + 1, p[i]])\\n\\t\\tfgc += 1\\n\\telif a == 0:\\n\\t\\tgrps[i + 1] = b\\n\\t\\tgrpdic[b].add(i + 1)\\n\\telse:\\n\\t\\tgrps[p[i]] = a\\n\\t\\tgrpdic[a].add(p[i])\\nprint(fgc)\\n\", \"from collections import defaultdict\\n\\nclass Graph:\\n\\n\\tdef __init__(self):\\n\\t\\tself.graph = defaultdict(list)\\n\\n\\tdef addedge(self, u, v):\\n\\t\\tself.graph[u].append(v)\\n\\t\\tself.graph[v].append(u)\\n\\n\\tdef dfs(self, s):\\n\\t\\tstack = []\\n\\t\\tstack.append(s)\\n\\t\\twhile len(stack) != 0:\\n\\t\\t\\ta = stack[-1]\\n\\t\\t\\tstack.pop()\\n\\t\\t\\tif self.visited[a] == False:\\n\\t\\t\\t\\tself.visited[a] = True\\n\\t\\t\\tfor node in self.graph[a]:\\n\\t\\t\\t\\tif self.visited[node] == False:\\n\\t\\t\\t\\t\\tstack.append(node)\\n\\t\\treturn\\n\\n\\tdef dfsutill(self):\\n\\t\\tl = list(self.graph.keys())\\n\\t\\tself.visited = [False for i in range(len(l) + 1)]\\n\\t\\tc = 0\\n\\t\\tfor v in l:\\n\\t\\t\\tif self.visited[v] == False:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\t\\tself.dfs(v)\\n\\t\\treturn c\\nn = int(input())\\nl = list(map(int, input().split()))\\ng = Graph()\\nfor i in range(1, n + 1):\\n\\tg.addedge(i, l[i - 1])\\nprint(g.dfsutill())\\n\", \"import sys\\nimport threading\\nfrom math import *\\nsys.setrecursionlimit(300000)\\nthreading.stack_size(10 ** 8)\\n\\ndef main():\\n\\n\\tdef dfs(vertex, pp, used):\\n\\t\\tused.add(vertex)\\n\\t\\tfor start in pp[vertex]:\\n\\t\\t\\tif start not in used:\\n\\t\\t\\t\\tdfs(start, pp, used)\\n\\tused = set()\\n\\ts = 0\\n\\tn = int(input())\\n\\tp = [int(s) for s in input().split()]\\n\\tpp = [set() for s in range(n + 1)]\\n\\tfor i in range(n):\\n\\t\\tpp[p[i]].add(i + 1)\\n\\t\\tpp[i + 1].add(p[i])\\n\\tfor vertex in range(1, n + 1):\\n\\t\\tif vertex not in used:\\n\\t\\t\\tdfs(vertex, pp, used)\\n\\t\\t\\ts += 1\\n\\tprint(s)\\nt = threading.Thread(target=main)\\nt.start()\\nt.join()\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\np = list(range(n + 1))\\nh = [0] * (n + 1)\\n\\ndef pred(x):\\n\\tif x != p[x]:\\n\\t\\tp[x] = pred(p[x])\\n\\treturn p[x]\\n\\ndef union(a, b):\\n\\t(a, b) = (pred(a), pred(b))\\n\\tif h[a] < h[b]:\\n\\t\\t(a, b) = (b, a)\\n\\tp[b] = a\\n\\tif h[a] == h[b]:\\n\\t\\th[a] += 1\\nfor i in range(1, n + 1):\\n\\tunion(i, l[i - 1])\\nfor i in range(n + 1):\\n\\tpred(i)\\nprint(len(set(p)) - 1)\\n\", \"n = int(input())\\ntrees = [int(_) for _ in input().split()]\\nans = set()\\ntot = 0\\nfor i in range(n):\\n\\tif trees[i] == i + 1:\\n\\t\\ttot += 1\\n\\telse:\\n\\t\\tans.add(trees[i])\\nprint(len(ans) // 2 + tot)\\n\", \"from sys import stdin\\nfrom collections import defaultdict\\ninput = stdin.readline\\nT = 1\\nfor t in range(1, T + 1):\\n\\tadj = defaultdict(lambda : list())\\n\\tn = int(input())\\n\\tedges = list(map(int, input().split()))\\n\\tfor i in range(0, n):\\n\\t\\tadj[i + 1].append(edges[i])\\n\\t\\tadj[edges[i]].append(i + 1)\\n\\tvisited = [False for x in range(n + 1)]\\n\\tcount = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif visited[i] == False:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tvisited[i] = True\\n\\t\\t\\tq = []\\n\\t\\t\\tq.append(i)\\n\\t\\t\\twhile len(q) != 0:\\n\\t\\t\\t\\tparent = q.pop(0)\\n\\t\\t\\t\\tfor child in adj[parent]:\\n\\t\\t\\t\\t\\tif visited[child] == False:\\n\\t\\t\\t\\t\\t\\tvisited[child] = True\\n\\t\\t\\t\\t\\t\\tq.append(child)\\n\\tprint(count)\\n\", \"n = int(input())\\nb = list(map(int, input().strip().split()))\\na = [False] * n\\nd = 0\\nwhile False in a:\\n\\tk = 0\\n\\ti = a.index(False)\\n\\twhile a[i] == False:\\n\\t\\ta[i] = True\\n\\t\\ti = b[i] - 1\\n\\t\\tk += 1\\n\\tif k == 1 and b[i] - 1 != i:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\td += 1\\nprint(d)\\n\", \"class UnionFind:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.up_bound = list(range(n))\\n\\t\\tself.rank = [0] * n\\n\\n\\tdef find(self, x_index):\\n\\t\\tif self.up_bound[x_index] == x_index:\\n\\t\\t\\treturn x_index\\n\\t\\tself.up_bound[x_index] = self.find(self.up_bound[x_index])\\n\\t\\treturn self.up_bound[x_index]\\n\\n\\tdef union(self, x_index, y_index):\\n\\t\\trepr_x = self.find(x_index)\\n\\t\\trepr_y = self.find(y_index)\\n\\t\\tif repr_x == repr_y:\\n\\t\\t\\treturn False\\n\\t\\tif self.rank[repr_x] == self.rank[repr_y]:\\n\\t\\t\\tself.rank[repr_x] += 1\\n\\t\\t\\tself.up_bound[repr_y] = repr_x\\n\\t\\telif self.rank[repr_x] > self.rank[repr_y]:\\n\\t\\t\\tself.up_bound[repr_y] = repr_x\\n\\t\\telse:\\n\\t\\t\\tself.up_bound[repr_x] = repr_y\\n\\t\\treturn True\\nn = int(input())\\naa = list(map(int, input().split()))\\naa = [x - 1 for x in aa]\\nuu = UnionFind(n)\\nnb_components = n\\nfor i in range(n):\\n\\tu = i\\n\\tv = aa[i]\\n\\tregroup = uu.union(u, v)\\n\\tif regroup:\\n\\t\\tnb_components -= 1\\nprint(nb_components)\\n\", \"num_balls = int(input())\\np = [0]\\np.extend(list(map(int, input().split())))\\nsolution = 0\\nfor from_ball in range(1, num_balls + 1):\\n\\tto_ball = p[from_ball]\\n\\tif to_ball == from_ball:\\n\\t\\tsolution += 2\\n\\telif p[to_ball] == from_ball:\\n\\t\\tsolution += 1\\nprint(int(solution / 2))\\n\", \"def trees(array):\\n\\tnum_trees = 0\\n\\tchecked = {}\\n\\tfor i in array:\\n\\t\\tif i not in checked:\\n\\t\\t\\tnew_tree = []\\n\\t\\t\\tcurr_vert = i\\n\\t\\t\\twhile curr_vert not in new_tree and curr_vert not in checked:\\n\\t\\t\\t\\tnew_tree.append(curr_vert)\\n\\t\\t\\t\\tcurr_vert = array[curr_vert - 1]\\n\\t\\t\\tif curr_vert in checked:\\n\\t\\t\\t\\tfor vert in new_tree:\\n\\t\\t\\t\\t\\tchecked[vert] = checked[curr_vert]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnum_trees += 1\\n\\t\\t\\t\\tfor vert in new_tree:\\n\\t\\t\\t\\t\\tchecked[vert] = num_trees\\n\\treturn num_trees\\nn = int(input())\\np = list(map(int, input().split()))\\nprint(trees(p))\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nans = 0\\nedges = set([])\\nfor (i, vertex) in enumerate(arr):\\n\\tif vertex == i + 1:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tedges.add(vertex)\\nprint(ans + len(edges) // 2)\\n\", \"n = int(input())\\nvertices = list(map(int, input().split(' ')))\\ngraph = {}\\nvisited = {}\\n\\ndef dfs(node):\\n\\tif visited.get(node, 0):\\n\\t\\treturn\\n\\tvisited[node] = 1\\n\\tfor i in graph[node]:\\n\\t\\tdfs(i)\\nfor i in range(n):\\n\\tif not i + 1 in graph:\\n\\t\\tgraph[i + 1] = []\\n\\tgraph[i + 1].append(vertices[i])\\n\\tif not vertices[i] in graph:\\n\\t\\tgraph[vertices[i]] = []\\n\\tgraph[vertices[i]].append(i + 1)\\ncomponents = 0\\nfor i in range(1, n + 1):\\n\\tif i not in visited:\\n\\t\\tcomponents += 1\\n\\t\\tdfs(i)\\nprint(components)\\n\", \"def nTreesInForest(nPolandBalls, mostDistantRelatives):\\n\\tnLoners = sum((str(iBall + 1) == mostDistantRelatives[iBall] for iBall in range(nPolandBalls)))\\n\\treturn (nLoners + len(set(mostDistantRelatives))) // 2\\nprint(nTreesInForest(int(input()), input().split()))\\n\", \"from math import *\\nimport threading\\nimport sys\\nfrom collections import defaultdict\\nfrom pprint import pprint\\nsys.setrecursionlimit(300000)\\nmod = 10 ** 9\\ninf = 10 ** 15\\nyes = 'YES'\\nno = 'NO'\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef npr(n, r):\\n\\treturn factorial(n) // factorial(n - r) if n >= r else 0\\n\\ndef ncr(n, r):\\n\\treturn factorial(n) // (factorial(r) * factorial(n - r)) if n >= r else 0\\n\\ndef lower_bound(li, num):\\n\\tanswer = -1\\n\\tstart = 0\\n\\tend = len(li) - 1\\n\\twhile start <= end:\\n\\t\\tmiddle = (end + start) // 2\\n\\t\\tif li[middle] >= num:\\n\\t\\t\\tanswer = middle\\n\\t\\t\\tend = middle - 1\\n\\t\\telse:\\n\\t\\t\\tstart = middle + 1\\n\\treturn answer\\n\\ndef upper_bound(li, num):\\n\\tanswer = -1\\n\\tstart = 0\\n\\tend = len(li) - 1\\n\\twhile start <= end:\\n\\t\\tmiddle = (end + start) // 2\\n\\t\\tif li[middle] <= num:\\n\\t\\t\\tanswer = middle\\n\\t\\t\\tstart = middle + 1\\n\\t\\telse:\\n\\t\\t\\tend = middle - 1\\n\\treturn answer\\n\\ndef abs(x):\\n\\treturn x if x >= 0 else -x\\n\\ndef binary_search(li, val):\\n\\tans = -1\\n\\tlb = 0\\n\\tub = len(li) - 1\\n\\twhile lb <= ub:\\n\\t\\tmid = (lb + ub) // 2\\n\\t\\tif li[mid] > val:\\n\\t\\t\\tub = mid - 1\\n\\t\\telif val > li[mid]:\\n\\t\\t\\tlb = mid + 1\\n\\t\\telse:\\n\\t\\t\\tans = mid\\n\\t\\t\\tbreak\\n\\treturn ans\\n\\ndef kadane(x):\\n\\tsum_so_far = 0\\n\\tcurrent_sum = 0\\n\\tfor i in x:\\n\\t\\tcurrent_sum += i\\n\\t\\tif current_sum < 0:\\n\\t\\t\\tcurrent_sum = 0\\n\\t\\telse:\\n\\t\\t\\tsum_so_far = max(sum_so_far, current_sum)\\n\\treturn sum_so_far\\n\\ndef pref(li):\\n\\tpref_sum = [0]\\n\\tfor i in li:\\n\\t\\tpref_sum.append(pref_sum[-1] + i)\\n\\treturn pref_sum\\n\\ndef SieveOfEratosthenes(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\tli = []\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\tfor p in range(2, len(prime)):\\n\\t\\tif prime[p]:\\n\\t\\t\\tli.append(p)\\n\\treturn li\\n\\ndef primefactors(n):\\n\\tfactors = []\\n\\twhile n % 2 == 0:\\n\\t\\tfactors.append(2)\\n\\t\\tn //= 2\\n\\tfor i in range(3, int(sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tfactors.append(i)\\n\\t\\t\\tn //= i\\n\\tif n > 2:\\n\\t\\tfactors.append(n)\\n\\treturn factors\\n\\ndef prod(li):\\n\\tans = 1\\n\\tfor i in li:\\n\\t\\tans *= i\\n\\treturn ans\\n\\ndef dist(a, b):\\n\\td = abs(a[1] - b[1]) + abs(a[2] - b[2])\\n\\treturn d\\n\\ndef power_of_n(x, n):\\n\\tcnt = 0\\n\\twhile x % n == 0:\\n\\t\\tcnt += 1\\n\\t\\tx //= n\\n\\treturn cnt\\nfor _ in range(1):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tadj = {}\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i in adj:\\n\\t\\t\\tadj[i] += [a[i - 1]]\\n\\t\\telse:\\n\\t\\t\\tadj[i] = [a[i - 1]]\\n\\t\\tif a[i - 1] in adj:\\n\\t\\t\\tadj[a[i - 1]] += [i]\\n\\t\\telse:\\n\\t\\t\\tadj[a[i - 1]] = [i]\\n\\tvis = [0] * n\\n\\n\\tdef dfs(n):\\n\\t\\tvis[n - 1] = 1\\n\\t\\tfor child in adj[n]:\\n\\t\\t\\tif vis[child - 1] == 0:\\n\\t\\t\\t\\tdfs(child)\\n\\tcnt = 0\\n\\tfor i in range(n):\\n\\t\\tif vis[i] == 0:\\n\\t\\t\\tdfs(i + 1)\\n\\t\\t\\tcnt += 1\\n\\tprint(cnt)\\n\", \"import sys\\n\\ndef solve():\\n\\tn = int(input())\\n\\tp = [int(pi) - 1 for pi in input().split()]\\n\\tiso = 0\\n\\texist = [False] * n\\n\\tfor (i, pi) in enumerate(p):\\n\\t\\tif i == pi:\\n\\t\\t\\tiso += 1\\n\\t\\telse:\\n\\t\\t\\texist[pi] = True\\n\\tans = iso + sum(exist) // 2\\n\\tprint(ans)\\nsolve()\\n\", \"def nTreesInForest(PolandBalls, mostDistantRelatives):\\n\\treturn (sum((ball == itsRelative for (ball, itsRelative) in zip(PolandBalls, mostDistantRelatives))) + len(set(mostDistantRelatives))) // 2\\nprint(nTreesInForest(range(1, int(input()) + 1), list(map(int, input().split()))))\\n\", \"def root(k):\\n\\twhile a[k][0] != k:\\n\\t\\tk = a[k][0]\\n\\treturn a[k][0]\\n\\ndef merge(k, l):\\n\\ts1 = root(k)\\n\\ts2 = root(l)\\n\\tif s1 == s2:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\tif a[s1][1] > a[s2][1]:\\n\\t\\t\\ta[s2][0] = s1\\n\\t\\t\\ta[s1][1] += a[s2][1]\\n\\t\\telse:\\n\\t\\t\\ta[s1][0] = s2\\n\\t\\t\\ta[s2][1] += a[s1][1]\\n\\t\\treturn 1\\nn = int(input())\\na = [0] + [[i, 1] for i in range(1, n + 1)]\\nb = [0 for i in range(n + 1)]\\ns = [''] + input().split()\\nfor i in range(1, n + 1):\\n\\tb[i] = int(s[i])\\nans = n\\nfor i in range(1, n + 1):\\n\\tans -= merge(i, b[i])\\nprint(ans)\\n\", \"n = int(input())\\np = [-1] + list(map(int, input().split()))\\na = [-1] * (n + 1)\\no = 0\\nfor i in range(1, n + 1):\\n\\tif p[i] == i:\\n\\t\\to += 1\\n\\telif a[p[i]] == -1 == a[i]:\\n\\t\\to += 1\\n\\t\\ta[p[p[i]]] = 99\\n\\t\\ta[p[i]] = 99\\nprint(o)\\n\", \"import sys\\nimport math\\ntry:\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nexcept:\\n\\tpass\\n\\nclass DisjointSet:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.parent = [0]\\n\\t\\tfor i in range(1, n + 1):\\n\\t\\t\\tself.parent.append(i)\\n\\n\\tdef find(self, node):\\n\\t\\tif node != self.parent[node]:\\n\\t\\t\\tself.parent[node] = self.find(self.parent[node])\\n\\t\\treturn self.parent[node]\\n\\n\\tdef union(self, u, v):\\n\\t\\tleader_u = self.find(u)\\n\\t\\tleader_v = self.find(v)\\n\\t\\tif leader_u != leader_v:\\n\\t\\t\\tself.parent[leader_u] = leader_v\\nn = int(input())\\nrelatives = [int(x) for x in input().split()]\\nds = DisjointSet(n)\\nedge_index = [i for i in range(n + 1)]\\nfor (i, r) in enumerate(relatives):\\n\\tds.union(edge_index[i + 1], r)\\ntrees = 0\\nseen = set()\\nfor i in range(1, n + 1):\\n\\tleader = ds.find(i)\\n\\tif leader not in seen:\\n\\t\\tseen.add(leader)\\n\\t\\ttrees += 1\\nprint(trees)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nans = 0\\ncnt = [0] * (10 ** 4 + 1)\\nfor i in range(0, n):\\n\\tif a[i] == i + 1:\\n\\t\\tans += 1\\n\\t\\tcontinue\\n\\tcnt[a[i]] = 1\\nprint(sum(cnt) // 2 + ans)\\n\", \"def root(x):\\n\\tif parent[x] == x:\\n\\t\\treturn x\\n\\treturn root(parent[x])\\n\\ndef connect(x, y):\\n\\tx_root = root(x)\\n\\ty_root = root(y)\\n\\tif depth[x_root] < depth[y_root]:\\n\\t\\tparent[x_root] = y_root\\n\\t\\tdepth[y_root] += 1\\n\\telse:\\n\\t\\tparent[y_root] = x_root\\n\\t\\tdepth[x_root] += 1\\nn = int(input())\\np = list(map(int, input().split()))\\nparent = [i for i in range(n + 1)]\\ndepth = [1] * (n + 1)\\nfor i in range(n):\\n\\tconnect(i + 1, p[i])\\ntree_cnt = 0\\nfor i in range(1, n + 1):\\n\\tif parent[i] == i:\\n\\t\\ttree_cnt += 1\\nprint(tree_cnt)\\n\", \"import sys\\nn = int(input())\\np = list(map(lambda x: int(x) - 1, sys.stdin.readline().split()))\\nc = 0\\ns = set()\\nfor i in range(n):\\n\\tif i == p[i]:\\n\\t\\tc += 1\\n\\telse:\\n\\t\\ts.add(p[i])\\nprint(c + len(s) // 2)\\n\", \"from collections import *\\n\\ndef ri():\\n\\treturn map(int, input().split())\\n\\ndef bfs(s, adj, v):\\n\\tif v[s] == 1:\\n\\t\\treturn 0\\n\\tq = deque()\\n\\tq.append(s)\\n\\tv[s] = 1\\n\\twhile q:\\n\\t\\tn = q.popleft()\\n\\t\\tfor a in adj[n]:\\n\\t\\t\\tif v[a] == 0:\\n\\t\\t\\t\\tq.append(a)\\n\\t\\t\\t\\tv[a] = 1\\n\\treturn 1\\nn = int(input())\\nm = list(ri())\\nadj = [set() for i in range(n + 1)]\\nfor i in range(1, n + 1):\\n\\tadj[i].add(m[i - 1])\\n\\tadj[m[i - 1]].add(i)\\nv = [0 for i in range(n + 1)]\\nc = 0\\nfor i in range(1, n + 1):\\n\\tc += bfs(i, adj, v)\\nprint(c)\\n\", \"def main():\\n\\tn = int(input())\\n\\tseq = list(map(int, input().split()))\\n\\tdistinct = []\\n\\tans = 0\\n\\tfor i in range(n):\\n\\t\\tif seq[i] == i + 1:\\n\\t\\t\\tans += 1\\n\\t\\t\\tcontinue\\n\\t\\tif seq[i] not in distinct:\\n\\t\\t\\tdistinct.append(seq[i])\\n\\tans += int(len(distinct) / 2)\\n\\tprint(ans)\\nmain()\\n\", \"def solve():\\n\\tn = int(input())\\n\\tS = [int(x) - 1 for x in input().split()]\\n\\tk = len([x for (i, x) in enumerate(S) if i == x])\\n\\treturn k + (len(set(S)) - k) // 2\\nprint(solve())\\n\", \"class DisjointSet:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.num_sets = n\\n\\t\\tself.parents = list(range(n))\\n\\t\\tself.ranks = [0] * n\\n\\t\\tself.sizes = [1] * n\\n\\n\\tdef find(self, j):\\n\\t\\twhile self.parents[j] != j:\\n\\t\\t\\tjj = self.parents[j]\\n\\t\\t\\tself.parents[j] = self.parents[jj]\\n\\t\\t\\tj = jj\\n\\t\\treturn j\\n\\n\\tdef union(self, i, j):\\n\\t\\tr0 = self.find(i)\\n\\t\\tr1 = self.find(j)\\n\\t\\tif r0 == r1:\\n\\t\\t\\treturn False\\n\\t\\trd = self.ranks[r0] - self.ranks[r1]\\n\\t\\tif rd == 0:\\n\\t\\t\\tself.ranks[r0] += 1\\n\\t\\telif rd < 0:\\n\\t\\t\\t(r0, r1) = (r1, r0)\\n\\t\\tself.parents[r1] = r0\\n\\t\\tself.sizes[r0] += self.sizes[r1]\\n\\t\\tself.sizes[r1] = 0\\n\\t\\tself.num_sets -= 1\\n\\t\\treturn True\\nn = int(input())\\ntl = list(map(int, input().split()))\\ndsu = DisjointSet(n)\\nfor (i, t) in enumerate(tl):\\n\\tdsu.union(i, t - 1)\\nprint(dsu.num_sets)\\n\", \"def dfs(x):\\n\\tif not A[x]:\\n\\t\\tA[x] = True\\n\\t\\tfor i in B[x]:\\n\\t\\t\\tdfs(i)\\nN = int(100000.0) + 10\\nA = [False] * N\\nB = [list([]) for i in range(N)]\\nn = int(input())\\nt = [int(i) - 1 for i in input().split()]\\nfor i in range(n):\\n\\tB[i].append(t[i])\\n\\tB[t[i]].append(i)\\nans = 0\\nfor i in range(n):\\n\\tif not A[i]:\\n\\t\\tdfs(i)\\n\\t\\tans += 1\\nprint(ans)\\n\", \"import sys\\nimport re\\nimport math\\nimport itertools\\nimport collections\\nimport bisect\\nmod = 1000000007\\npi = 3.141592653589793\\nIS = float('inf')\\nxy = [(1, 0), (-1, 0), (0, 1), (0, -1)]\\nbs = [(-1, -1), (-1, 1), (1, 1), (1, -1)]\\n\\ndef niten(a, b):\\n\\treturn abs(a - b) if a >= 0 and b >= 0 else a + abs(b) if a >= 0 else abs(a) + b if b >= 0 else abs(abs(a) - abs(b))\\n\\ndef fib(n):\\n\\treturn [(seq.append(seq[i - 2] + seq[i - 1]), seq[i - 2])[1] for seq in [[0, 1]] for i in range(2, n)]\\n\\ndef gcd(a, b):\\n\\treturn a if b == 0 else gcd(b, a % b)\\n\\ndef lcm(a, b):\\n\\treturn a * b / gcd(a, b)\\n\\ndef eucl(x1, y1, x2, y2):\\n\\treturn ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\\n\\ndef choco(xa, ya, xb, yb, xc, yc, xd, yd):\\n\\treturn 1 if abs((yb - ya) * (yd - yc) + (xb - xa) * (xd - xc)) < 1e-10 else 0\\n\\ndef pscl(num, l=[1]):\\n\\tfor i in range(num):\\n\\t\\tl = map(lambda x, y: x + y, [0] + l, l + [0])\\n\\treturn l\\nimport heapq\\nn = int(input())\\nl = [int(i) for i in input().split()]\\nsyu = {}\\nich = []\\nd = {i for i in range(1, n + 1)}\\nfor (a, i) in enumerate(l):\\n\\tif i in syu:\\n\\t\\tsyu[i] += 1\\n\\telse:\\n\\t\\tsyu[i] = 1\\n\\t\\theapq.heappush(ich, i)\\nwhile len(ich):\\n\\ttmp = heapq.heappop(ich)\\n\\tif tmp < l[tmp - 1]:\\n\\t\\tsyu[tmp] += syu[l[tmp - 1]]\\n\\t\\tsyu[l[tmp - 1]] = 0\\nans = 0\\nfor i in syu:\\n\\tif syu[i] > 0:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nf = list(range(n + 1))\\n\\ndef fd(a):\\n\\t(rt, tmp) = (a, a)\\n\\twhile f[rt] != rt:\\n\\t\\trt = f[rt]\\n\\twhile f[a] != a:\\n\\t\\ttmp = f[a]\\n\\t\\tf[a] = rt\\n\\t\\ta = tmp\\n\\treturn rt\\n\\ndef un(a, b):\\n\\t(ra, rb) = (fd(a), fd(b))\\n\\tif ra == rb:\\n\\t\\treturn\\n\\telse:\\n\\t\\tf[ra] = rb\\nfor i in range(n):\\n\\tun(i + 1, a[i])\\nprint(sum((1 for i in range(1, n + 1) if f[i] == i)))\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\nc = set()\\nk = 0\\nfor (i, v) in enumerate(p):\\n\\tif i + 1 != v:\\n\\t\\tc.add(v)\\n\\telse:\\n\\t\\tk += 1\\nprint(len(c) // 2 + k)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nz = 0\\nfor i in range(n):\\n\\tif a[i] == i + 1:\\n\\t\\tz += 1\\nprint((len(set(a)) - z) // 2 + (len(set(a)) - z) % 2 + z)\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\nballs = list(map(int, input().split()))\\nans = 0\\nreached = set()\\nfor i in range(n):\\n\\ttree = {i + 1, balls[i], balls[balls[i] - 1]}\\n\\tif tree.isdisjoint(reached):\\n\\t\\tans += 1\\n\\treached |= tree\\nprint(ans)\\n\", \"def Get(parent, x):\\n\\tif parent[x] == x:\\n\\t\\treturn x\\n\\tparent[x] = Get(parent, parent[x])\\n\\treturn parent[x]\\n\\ndef Union(parent, rank, a, b):\\n\\ta = Get(parent, a)\\n\\tb = Get(parent, b)\\n\\tif rank[a] == rank[b]:\\n\\t\\trank[a] += 1\\n\\tif rank[a] < rank[b]:\\n\\t\\tparent[a] = b\\n\\telse:\\n\\t\\tparent[b] = a\\nn = int(input())\\narr = list(map(int, input().split()))\\ncount = 0\\nparent = [i for i in range(n + 1)]\\nrank = [0 for i in range(n + 1)]\\nfor i in range(n):\\n\\tu = i + 1\\n\\tv = arr[i]\\n\\tpu = Get(parent, u)\\n\\tpv = Get(parent, v)\\n\\tif pu != pv:\\n\\t\\tUnion(parent, rank, pu, pv)\\nfor i in range(1, n + 1):\\n\\tif parent[i] == i:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"def main():\\n\\tMAXN = int(10000.0 + 7)\\n\\tpar = []\\n\\tfor i in range(MAXN):\\n\\t\\tpar.append(i)\\n\\n\\tdef find(i):\\n\\t\\tif i == par[i]:\\n\\t\\t\\treturn i\\n\\t\\treturn find(par[i])\\n\\n\\tdef union(i, j):\\n\\t\\tp = find(i)\\n\\t\\tq = find(j)\\n\\t\\tif p == q:\\n\\t\\t\\treturn\\n\\t\\tpar[p] = q\\n\\tn = int(input())\\n\\tp = list(map(int, input().split(' ')))\\n\\tfor i in range(n):\\n\\t\\tunion(i, p[i] - 1)\\n\\ts = set()\\n\\tfor i in range(n):\\n\\t\\ts.add(find(i))\\n\\tprint(len(s))\\nmain()\\n\", \"import random\\n\\nclass DSU:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.n = n\\n\\t\\tself.comps = n\\n\\t\\tself.parent = [i for i in range(n)]\\n\\n\\tdef FIND(self, x):\\n\\t\\tif x != self.parent[x]:\\n\\t\\t\\tself.parent[x] = self.FIND(self.parent[x])\\n\\t\\treturn self.parent[x]\\n\\n\\tdef UNION(self, x, y):\\n\\t\\txRoot = self.FIND(x)\\n\\t\\tyRoot = self.FIND(y)\\n\\t\\tif xRoot != yRoot:\\n\\t\\t\\tself.comps -= 1\\n\\t\\t\\tif random.randint(1, 2) & 1:\\n\\t\\t\\t\\tself.parent[xRoot] = yRoot\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself.parent[yRoot] = xRoot\\n\\t\\t\\treturn 1\\n\\t\\treturn 0\\nn = int(input())\\nballs = [int(x) for x in input().split()]\\ndsu = DSU(n)\\nfor (ind, val) in enumerate(balls):\\n\\tdsu.UNION(ind, val - 1)\\nprint(dsu.comps)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef main():\\n\\tn = int(input())\\n\\tar = []\\n\\tfor x in input().split():\\n\\t\\tar.append(int(x) - 1)\\n\\tg = [[] for _ in range(n)]\\n\\talone = 0\\n\\tstuff = 0\\n\\tfor i in range(n):\\n\\t\\tg[ar[i]].append(i)\\n\\tfor i in range(n):\\n\\t\\tif g[i] != []:\\n\\t\\t\\tif g[i] == [i]:\\n\\t\\t\\t\\talone += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tstuff += 1\\n\\tprint(stuff // 2 + alone)\\nmain()\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\nf = [0 for _ in range(n)]\\ng = [[] for _ in range(n)]\\nfor i in range(n):\\n\\tg[i].append(p[i] - 1)\\n\\tg[p[i] - 1].append(i)\\nans = 0\\n\\ndef dfs(x):\\n\\tf[x] = 1\\n\\tfor i in g[x]:\\n\\t\\tif not f[i]:\\n\\t\\t\\tdfs(i)\\nfor i in range(n):\\n\\tif not f[i]:\\n\\t\\tans += 1\\n\\t\\tdfs(i)\\nprint(ans)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nal = [[] for i in range(n + 1)]\\nfor i in range(n):\\n\\ta = i + 1\\n\\tb = l[i]\\n\\tal[a].append(b)\\n\\tal[b].append(a)\\nc = 0\\nva = [0] * (n + 1)\\n\\ndef dfs(n):\\n\\tva[n] = 1\\n\\tfor e in al[n]:\\n\\t\\tif va[e] == 0:\\n\\t\\t\\tdfs(e)\\nfor e in range(1, n + 1):\\n\\tif va[e] == 0:\\n\\t\\tc = c + 1\\n\\t\\tdfs(e)\\nprint(c)\\n\", \"n = int(input())\\np = list(map(int, input().split()))\\nfor i in range(n):\\n\\tp[i] -= 1\\nans = 0\\nfor i in range(n):\\n\\tif p[i] == i:\\n\\t\\tans += 2\\n\\telif p[p[i]] == i:\\n\\t\\tans += 1\\nprint(ans // 2)\\nprint(ans, file=__import__('sys').stderr)\\n\", \"n = int(input())\\np = list(map(lambda x: int(x) - 1, input().split()))\\n\\ndef find(x):\\n\\twhile x != p[x]:\\n\\t\\tp[x] = p[p[x]]\\n\\t\\tx = p[x]\\nfor i in range(n):\\n\\tfind(i)\\nprint(len(set(p)))\\n\", \"class DisjointSet:\\n\\n\\tdef __init__(self):\\n\\t\\tself.parent = {}\\n\\t\\tself.cnt = {}\\n\\n\\tdef make_set(self, u):\\n\\t\\tself.parent[u] = u\\n\\t\\tself.cnt[u] = 1\\n\\n\\tdef find_parent(self, u):\\n\\t\\tif u != self.parent[u]:\\n\\t\\t\\tself.parent[u] = self.find_parent(self.parent[u])\\n\\t\\treturn self.parent[u]\\n\\n\\tdef union(self, u, v):\\n\\t\\tu = self.find_parent(u)\\n\\t\\tv = self.find_parent(v)\\n\\t\\tif u != v:\\n\\t\\t\\tif self.cnt[u] > self.cnt[v]:\\n\\t\\t\\t\\tself.parent[v] = self.parent[u]\\n\\t\\t\\t\\tself.cnt[v] = self.cnt[u] + 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself.parent[u] = self.parent[v]\\n\\t\\t\\t\\tself.cnt[u] = self.cnt[v] + 1\\nn = int(input())\\nar = list(map(int, input().split()))\\nS = DisjointSet()\\nfor i in range(n):\\n\\tS.make_set(i + 1)\\nfor i in range(n):\\n\\tS.union(i + 1, ar[i])\\nprint(len(set((S.find_parent(i + 1) for i in range(n)))))\\n\", \"n = int(input())\\np = input().split()\\ndone = []\\nsingles = 0\\ndoubles = 0\\nfor x in range(0, n):\\n\\txx = int(p[x]) - 1\\n\\tif xx not in done:\\n\\t\\tdone.append(xx)\\n\\t\\tif x == xx:\\n\\t\\t\\tsingles = singles + 1\\n\\t\\telse:\\n\\t\\t\\tdoubles = doubles + 1\\n\\telse:\\n\\t\\tcontinue\\nprint(int(doubles / 2 + singles))\\n\", \"n = int(input())\\ns = [int(i) for i in input().split()]\\nans = n\\nr = set()\\nfor i in range(n):\\n\\tif s[i] != i + 1:\\n\\t\\tif s[i] in r:\\n\\t\\t\\tans -= 1\\n\\t\\telse:\\n\\t\\t\\tr.add(s[i])\\n\\t\\t\\tr.add(s[s[i] - 1])\\nprint(ans)\\n\", \"import sys\\ninf = float('inf')\\nmod = 1000000007\\n\\ndef get_array():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef get_ints():\\n\\treturn map(int, sys.stdin.readline().split())\\n\\ndef input():\\n\\treturn sys.stdin.readline()\\n\\ndef main():\\n\\tn = int(input())\\n\\tarr = get_array()\\n\\tans = 0\\n\\ts = set()\\n\\tfor i in range(n):\\n\\t\\tif arr[i] == i + 1:\\n\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\ts.add(arr[i])\\n\\tprint(ans + len(s) // 2)\\nmain()\\n\", \"n = int(input())\\np = [0] + list(map(int, input().split()))\\nd = set()\\nfor i in range(1, n + 1):\\n\\tif p[p[i]] == i:\\n\\t\\td.add(min(i, p[i]))\\nprint(len(d))\\n\", \"from collections import *\\n\\ndef ri():\\n\\treturn int(input())\\n\\ndef rl():\\n\\treturn list(map(int, input().split()))\\n\\ndef dfs(start, visited, current):\\n\\tvisited[start] = current\\n\\tto_visit = [start]\\n\\twhile to_visit:\\n\\t\\tnode = to_visit.pop()\\n\\t\\tfor child in graph[node]:\\n\\t\\t\\tif not visited[child]:\\n\\t\\t\\t\\tvisited[child] = current\\n\\t\\t\\t\\tto_visit.append(child)\\n\\ndef count_components():\\n\\tn = len(graph)\\n\\tvisited = [0] * n\\n\\tnb_components = 0\\n\\tfor v in range(n):\\n\\t\\tif not visited[v]:\\n\\t\\t\\tnb_components += 1\\n\\t\\t\\tdfs(v, visited, nb_components)\\n\\treturn nb_components\\nn = ri()\\npp = rl()\\npp = [x - 1 for x in pp]\\ngraph = [[] for i in range(n)]\\nfor i in range(n):\\n\\tgraph[i].append(pp[i])\\n\\tgraph[pp[i]].append(i)\\nprint(count_components())\\n\", \"n = int(input())\\nx = [[] for _ in range(n + 1)]\\np = [-1 for _ in range(n + 1)]\\na = [-1] + list(map(int, input().split()))\\nlast = 0\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif p[i] == -1 and p[a[i]] == -1:\\n\\t\\tp[i] = p[a[i]] = last\\n\\t\\tx[last] += [i, a[i]]\\n\\t\\tlast += 1\\n\\telif p[i] != -1 and p[a[i]] != -1:\\n\\t\\tif p[i] != p[a[i]]:\\n\\t\\t\\tbefore = p[i]\\n\\t\\t\\tfor e in x[p[i]]:\\n\\t\\t\\t\\tp[e] = p[a[i]]\\n\\t\\t\\t\\tx[p[a[i]]] += [e]\\n\\t\\t\\tx[before] = []\\n\\telif p[i] != -1 and p[a[i]] == -1:\\n\\t\\tp[a[i]] = p[i]\\n\\t\\tx[p[i]] += [a[i]]\\n\\telse:\\n\\t\\tp[i] = p[a[i]]\\n\\t\\tx[p[a[i]]] += [i]\\nfor i in range(last):\\n\\tif x[i] != []:\\n\\t\\tans += 1\\nprint(ans)\\n\", \"from collections import defaultdict, Counter\\nfrom math import sqrt, log10, log2, log, gcd, floor, factorial\\nfrom bisect import bisect_left, bisect_right\\nfrom itertools import combinations, combinations_with_replacement\\nimport sys, io, os\\ninput = sys.stdin.readline\\nmod = 10 ** 9 + 7\\ninf = float('inf')\\n\\ndef get_list():\\n\\treturn [int(i) for i in input().split()]\\nyn = lambda a: print('YES' if a else 'NO')\\nceil = lambda a, b: (a + b - 1) // b\\n\\nclass DisjointSetUnion:\\n\\n\\tdef __init__(self, l=[]):\\n\\t\\tself.parent = defaultdict(int)\\n\\t\\tself.size = defaultdict(lambda : 1)\\n\\t\\tself.num_sets = 0\\n\\t\\tfor i in l:\\n\\t\\t\\tself.add(i)\\n\\n\\tdef add(self, val):\\n\\t\\tif val not in self.parent:\\n\\t\\t\\tself.parent[val] = val\\n\\t\\t\\tself.size[val] = 1\\n\\t\\t\\tself.num_sets += 1\\n\\n\\tdef find(self, a):\\n\\t\\tacopy = a\\n\\t\\twhile a != self.parent[a]:\\n\\t\\t\\ta = self.parent[a]\\n\\t\\twhile acopy != a:\\n\\t\\t\\t(self.parent[acopy], acopy) = (a, self.parent[acopy])\\n\\t\\treturn a\\n\\n\\tdef union(self, a, b):\\n\\t\\t(a, b) = (self.find(a), self.find(b))\\n\\t\\tif a != b:\\n\\t\\t\\tif self.size[a] < self.size[b]:\\n\\t\\t\\t\\t(a, b) = (b, a)\\n\\t\\t\\tself.num_sets -= 1\\n\\t\\t\\tself.parent[b] = a\\n\\t\\t\\tself.size[a] += self.size[b]\\n\\t\\t\\treturn 1\\n\\t\\treturn 0\\n\\n\\tdef set_size(self, a):\\n\\t\\treturn self.size[self.find(a)]\\n\\n\\tdef __len__(self):\\n\\t\\treturn self.num_sets\\nt = 1\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = [0] + get_list()\\n\\tseta = DisjointSetUnion([i for i in range(1, n + 1)])\\n\\tfor i in range(1, n + 1):\\n\\t\\tseta.union(i, l[i])\\n\\tprint(len(seta))\\n\", \"class DisjointSet(object):\\n\\n\\tdef __init__(self):\\n\\t\\tself.parent = {}\\n\\t\\tself.rank = {}\\n\\n\\tdef make_set(self, v):\\n\\t\\tself.parent[v] = v\\n\\t\\tself.rank[v] = 0\\n\\n\\tdef find_set(self, v):\\n\\t\\tif v != self.parent[v]:\\n\\t\\t\\tself.parent[v] = self.find_set(self.parent[v])\\n\\t\\treturn self.parent[v]\\n\\n\\tdef union_sets(self, a, b):\\n\\t\\ta = self.find_set(a)\\n\\t\\tb = self.find_set(b)\\n\\t\\tif a != b:\\n\\t\\t\\tif self.rank[a] < self.rank[b]:\\n\\t\\t\\t\\t(a, b) = (b, a)\\n\\t\\t\\tself.parent[b] = a\\n\\t\\t\\tif self.rank[a] == self.rank[b]:\\n\\t\\t\\t\\tself.rank[a] += 1\\n\\ndef solve():\\n\\tn = int(input())\\n\\tneighbours = map(int, input().split())\\n\\ts = DisjointSet()\\n\\tfor i in range(n):\\n\\t\\ts.make_set(i + 1)\\n\\tfor (i, nei) in enumerate(neighbours):\\n\\t\\ts.union_sets(i + 1, nei)\\n\\treturn len(set((s.find_set(i + 1) for i in range(n))))\\nprint(solve())\\n\", \"from sys import stdin\\nk = int(input())\\nforest = [int(elem) for elem in stdin.readline().rstrip().split()]\\ngraph = {}\\nunique = set()\\nfor i in range(0, k):\\n\\tid = i + 1\\n\\ttree = forest[i]\\n\\tif id not in graph:\\n\\t\\tgraph[id] = [tree]\\n\\tgraph[id].append(tree)\\nedge_count = 0\\nfor id in graph:\\n\\tfor tree in graph[id]:\\n\\t\\tif id == tree:\\n\\t\\t\\tcontinue\\n\\t\\telif (id, tree) not in unique and (tree, id) not in unique:\\n\\t\\t\\tedge_count += 1\\n\\t\\t\\tunique.add((id, tree))\\n\\t\\t\\tunique.add((tree, id))\\nif k > 1:\\n\\tprint(k - edge_count)\\nelse:\\n\\tprint(k)\\n\", \"def main():\\n\\tn = int(input())\\n\\tp = [-1] + [int(c) for c in input().split()]\\n\\tans = 0\\n\\tfor (i, j) in enumerate(p):\\n\\t\\tif j >= i and p[j] == i:\\n\\t\\t\\tans += 1\\n\\tprint(ans)\\nmain()\\n\", \"n = int(input())\\np = list(map(int, input().split(' ')))\\nadj_list = [[] for i in range(n + 1)]\\nv = [0] * (n + 1)\\nfor i in range(n):\\n\\tadj_list[i + 1].append(p[i])\\n\\tadj_list[p[i]].append(i + 1)\\ntree = 0\\nfor i in range(1, n + 1):\\n\\tif v[i] == 0:\\n\\t\\ts = [i]\\n\\t\\twhile len(s) > 0:\\n\\t\\t\\tx = s.pop()\\n\\t\\t\\tv[x] = 1\\n\\t\\t\\tfor j in adj_list[x]:\\n\\t\\t\\t\\tif v[j] == 0:\\n\\t\\t\\t\\t\\ts.append(j)\\n\\t\\ttree += 1\\nprint(tree)\\n\", \"n = int(input())\\nv = [None] + [int(k) for k in input().split()]\\np = [k for k in range(n + 1)]\\nans = n\\n\\ndef anc(i):\\n\\tif i == p[i]:\\n\\t\\treturn p[i]\\n\\tp[i] = anc(p[i])\\n\\treturn p[i]\\n\\ndef join(x, y):\\n\\tglobal ans\\n\\tpx = anc(x)\\n\\tpy = anc(y)\\n\\tif px != py:\\n\\t\\tp[px] = py\\n\\t\\tans -= 1\\nfor i in range(1, n + 1):\\n\\tjoin(i, v[i])\\nprint(ans)\\n\", \"from collections import deque\\nn = int(input())\\np = [0] + list(map(int, input().split(' ')))\\ng = [-1] * (n + 1)\\nb = 0\\nu = [[] for i in range(n + 1)]\\nfor i in range(1, n + 1):\\n\\tu[i].append(p[i])\\n\\tu[p[i]].append(i)\\nfor i in range(1, n + 1):\\n\\tif g[i] == -1:\\n\\t\\tb += 1\\n\\t\\tg[i] = b\\n\\t\\tq = deque([i])\\n\\t\\twhile len(q) > 0:\\n\\t\\t\\tx = q.popleft()\\n\\t\\t\\tfor el in u[x]:\\n\\t\\t\\t\\tif g[el] == -1:\\n\\t\\t\\t\\t\\tq.append(el)\\n\\t\\t\\t\\t\\tg[el] = b\\nprint(b)\\n\", \"input()\\nl = [int(i) for i in input().split()]\\nans = 0\\nw = set([])\\nfor (a, i) in enumerate(l):\\n\\tif a + 1 == i:\\n\\t\\tans += 1\\n\\telse:\\n\\t\\tw.add(i)\\nprint(ans + len(w) // 2)\\n\", \"visited = []\\n\\ndef dfs(adj, s):\\n\\tvisited[s] = True\\n\\tfor i in adj[s]:\\n\\t\\tif not visited[i]:\\n\\t\\t\\tdfs(adj, i)\\nn = int(input())\\na = list(map(int, input().split()))\\nadj = []\\nfor i in range(n + 5):\\n\\tadj.append([])\\n\\tvisited.append(False)\\nfor i in range(n):\\n\\tadj[i + 1].append(a[i])\\n\\tadj[a[i]].append(i + 1)\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif not visited[i]:\\n\\t\\tans += 1\\n\\t\\tdfs(adj, i)\\nprint(ans)\\n\", \"from collections import defaultdict\\nn = int(input())\\nl = list(map(int, input().split()))\\nd = set({})\\ns = defaultdict(set)\\nt = 0\\nfor i in range(n):\\n\\ts[i + 1].add(l[i])\\n\\ts[l[i]].add(i + 1)\\nvisited = [False] * n\\n\\ndef DFS(s, i):\\n\\tstack = [i]\\n\\twhile len(stack):\\n\\t\\tcurrent = stack.pop()\\n\\t\\tvisited[current - 1] = True\\n\\t\\tfor j in s[current]:\\n\\t\\t\\tif visited[j - 1] == False:\\n\\t\\t\\t\\tstack.append(j)\\ncount = 0\\nfor i in s:\\n\\tif visited[i - 1] == False:\\n\\t\\tDFS(s, i)\\n\\t\\tcount = count + 1\\nprint(count)\\n\", \"n = int(input())\\ncount = 0\\nmas = [int(s) for s in input().split()]\\nfor i in range(n):\\n\\tif i + 1 == mas[i]:\\n\\t\\tcount += 1\\n\\t\\tmas[i] = 0\\nmas = set(mas)\\nflag = 0 in mas\\nprint(count + (len(mas) - flag) // 2)\\n\", \"class DisjointSet:\\n\\n\\tdef __init__(self, N):\\n\\t\\tself._N = N\\n\\t\\tself._rank = N * [0]\\n\\t\\tself._parent = list(range(N))\\n\\n\\tdef find(self, i):\\n\\t\\tif self._parent[i] != i:\\n\\t\\t\\tself._parent[i] = self.find(self._parent[i])\\n\\t\\treturn self._parent[i]\\n\\n\\tdef union(self, x, y):\\n\\t\\tpx = self.find(x)\\n\\t\\tpy = self.find(y)\\n\\t\\tif self._rank[px] < self._rank[py]:\\n\\t\\t\\tself._parent[px] = py\\n\\t\\telse:\\n\\t\\t\\tif self._rank[px] == self._rank[py]:\\n\\t\\t\\t\\tself._rank[px] += 1\\n\\t\\t\\tself._parent[py] = px\\nN = int(input())\\nnbrs = list(map(int, input().strip().split()))\\nfor i in range(N):\\n\\tnbrs[i] -= 1\\ncc = DisjointSet(N)\\nfor i in range(N):\\n\\tcc.union(i, nbrs[i])\\nresult = set([cc.find(i) for i in range(N)])\\nprint(len(result))\\n\", \"n = int(input())\\nA = [int(i) for i in input().split()]\\ncandidate_set = set()\\nadditional_count = 0\\nfor i in range(n):\\n\\tif i + 1 == A[i]:\\n\\t\\tadditional_count += 1\\n\\telse:\\n\\t\\tcandidate_set.add(A[i])\\nprint(len(candidate_set) // 2 + additional_count)\\n\", \"def root(a):\\n\\twhile parent[a] != a:\\n\\t\\tparent[a] = parent[parent[a]]\\n\\t\\ta = parent[a]\\n\\treturn a\\n\\ndef union(a, b):\\n\\ta = root(a)\\n\\tb = root(b)\\n\\tif a == b:\\n\\t\\treturn\\n\\tif size[a] <= size[b]:\\n\\t\\tparent[a] = b\\n\\t\\tsize[b] += size[a]\\n\\t\\tsize[a] = 0\\n\\telse:\\n\\t\\tparent[b] = a\\n\\t\\tsize[a] += size[b]\\n\\t\\tsize[b] = 0\\nn = int(input())\\nparent = [i for i in range(n + 1)]\\nsize = [1] * (n + 1)\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\tunion(a[i], i + 1)\\ntree = 0\\nfor e in set(parent[1:]):\\n\\tif size[e] > 0:\\n\\t\\ttree += 1\\nprint(tree)\\n\", \"def merge(id1, id2):\\n\\tif id1 != id2:\\n\\t\\tif len(dsu[id1]) < len(dsu[id2]):\\n\\t\\t\\t(id1, id2) = (id2, id1)\\n\\t\\tfor j in dsu.pop(id2):\\n\\t\\t\\tgid[j] = id1\\n\\t\\t\\tdsu[id1].append(j)\\ngid = {}\\ndsu = {}\\nn = int(input())\\ns = list(map(int, input().split()))\\nfor i in range(n):\\n\\tgid[i] = i\\n\\tdsu[i] = [i]\\n\\ts[i] -= 1\\nfor i in range(n):\\n\\tmerge(gid[i], gid[s[i]])\\nprint(len(dsu))\\n\", \"vertex_num = int(input())\\ngraph_map = []\\nfor _ in range(vertex_num + 1):\\n\\tgraph_map.append([])\\nvisited = [0] * (vertex_num + 1)\\nneighbors = list(map(int, input().split()))\\nfor (i, node) in enumerate(neighbors):\\n\\tif not node in graph_map[i + 1]:\\n\\t\\tgraph_map[i + 1].append(node)\\n\\tif not i + 1 in graph_map[node]:\\n\\t\\tgraph_map[node].append(i + 1)\\nq = []\\ncomponents = 0\\nfor (i, node) in enumerate(graph_map):\\n\\tif i == vertex_num:\\n\\t\\tbreak\\n\\tif not visited[i + 1]:\\n\\t\\tcomponents += 1\\n\\t\\tq.append(i + 1)\\n\\t\\tvisited[i] = 1\\n\\t\\twhile len(q) > 0:\\n\\t\\t\\tn = q.pop(0)\\n\\t\\t\\tfor e in graph_map[n]:\\n\\t\\t\\t\\tif not visited[e]:\\n\\t\\t\\t\\t\\tvisited[e] = 1\\n\\t\\t\\t\\t\\tq.append(e)\\nprint(components)\\n\", \"def dfs(forest, key, visited):\\n\\tvisited.add(key)\\n\\tfor i in forest[key]:\\n\\t\\tif i not in visited:\\n\\t\\t\\tdfs(forest, i, visited)\\nn = int(input())\\na = input().split()\\nforest = dict()\\nres = 0\\nfor (i, j) in enumerate(a):\\n\\tif str(i + 1) not in forest:\\n\\t\\tforest[str(i + 1)] = [j]\\n\\telse:\\n\\t\\tforest[str(i + 1)] += [j]\\n\\tif j not in forest:\\n\\t\\tforest[j] = [str(i + 1)]\\n\\telse:\\n\\t\\tforest[j] += [str(i + 1)]\\nvisited = set()\\nfor i in range(len(a)):\\n\\tkey = str(i + 1)\\n\\tif key not in visited:\\n\\t\\tdfs(forest, key, visited)\\n\\t\\tres += 1\\nprint(res)\\n\", \"from collections import defaultdict\\nn = int(input())\\nl = list(map(int, input().split()))\\nd = defaultdict(list)\\nfor i in range(n):\\n\\td[l[i]].append(i + 1)\\nk = 0\\nfor i in d:\\n\\tif len(d[i]) == 1 and d[i][0] == i:\\n\\t\\tk += 1\\ns = len(set(l))\\nprint((k + s) // 2)\\n\", \"from collections import Counter\\nfrom collections import defaultdict\\nimport math\\nimport random\\nimport heapq as hq\\nfrom math import sqrt\\nimport sys\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef iinput():\\n\\treturn int(input())\\n\\ndef tinput():\\n\\treturn input().split()\\n\\ndef rinput():\\n\\treturn map(int, tinput())\\n\\ndef rlinput():\\n\\treturn list(rinput())\\nmod = int(1000000000.0) + 7\\n\\ndef root(parent, a):\\n\\twhile parent[a] != a:\\n\\t\\tparent[a] = parent[parent[a]]\\n\\t\\ta = parent[a]\\n\\treturn a\\n\\ndef union(parent, a, b):\\n\\t(root_a, root_b) = (root(parent, a), root(parent, b))\\n\\tif root_a == root_b:\\n\\t\\treturn\\n\\tparent[root_a] = root_b\\n\\ndef solve(adj, colors, n):\\n\\tpass\\nn = iinput()\\na = rlinput()\\nparent = list(range(n))\\nfor i in range(n):\\n\\tunion(parent, i, a[i] - 1)\\ns = set()\\nfor i in range(n):\\n\\ts.add(root(parent, i))\\nprint(len(s))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nans = 0\\narr = [0] * 10004\\nfor i in range(n):\\n\\tif l[i] == i + 1:\\n\\t\\tans -= -1\\n\\t\\tarr[l[i]] = 1\\nl = list(set(l))\\nc = 0\\nfor i in l:\\n\\tif arr[i] == 0:\\n\\t\\tc -= -1\\nprint(ans + c // 2)\\n\", \"import sys\\ninf = float('inf')\\n(mod, MOD) = (1000000007, 998244353)\\n\\ndef get_array():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef get_ints():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\nclass DisjointSetUnion:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.parent = list(range(n))\\n\\t\\tself.size = [1] * n\\n\\t\\tself.num_sets = n\\n\\n\\tdef find(self, a):\\n\\t\\tacopy = a\\n\\t\\twhile a != self.parent[a]:\\n\\t\\t\\ta = self.parent[a]\\n\\t\\twhile acopy != a:\\n\\t\\t\\t(self.parent[acopy], acopy) = (a, self.parent[acopy])\\n\\t\\treturn a\\n\\n\\tdef union(self, a, b):\\n\\t\\t(a, b) = (self.find(a), self.find(b))\\n\\t\\tif a != b:\\n\\t\\t\\tif self.size[a] < self.size[b]:\\n\\t\\t\\t\\t(a, b) = (b, a)\\n\\t\\t\\tself.num_sets -= 1\\n\\t\\t\\tself.parent[b] = a\\n\\t\\t\\tself.size[a] += self.size[b]\\n\\n\\tdef set_size(self, a):\\n\\t\\treturn self.size[self.find(a)]\\n\\n\\tdef __len__(self):\\n\\t\\treturn self.num_sets\\nn = int(input())\\nArr = get_array()\\nobj = DisjointSetUnion(n)\\nfor i in range(n):\\n\\tobj.union(Arr[i] - 1, i)\\nmyset = set()\\nfor i in range(n):\\n\\tmyset.add(obj.find(i))\\nprint(len(myset))\\n\", \"(n, P) = (int(input()), list(map(int, input().split())))\\nprint(sum((P[P[i] - 1] == i + 1 and P[i] < i + 2 for i in range(n))))\\n\", \"class SNM2:\\n\\n\\tdef __init__(self):\\n\\t\\tself.parent = dict()\\n\\t\\tself.rank = dict()\\n\\n\\tdef find(self, e):\\n\\t\\tparent_e = self.parent.get(e)\\n\\t\\tif parent_e is None:\\n\\t\\t\\treturn None\\n\\t\\tif e == parent_e:\\n\\t\\t\\treturn e\\n\\t\\telse:\\n\\t\\t\\tres = self.find(parent_e)\\n\\t\\t\\tself.parent[e] = res\\n\\t\\t\\treturn res\\n\\n\\tdef make_set(self, e, parent=None):\\n\\t\\tself.parent[e] = e if parent is None else parent\\n\\t\\tself.rank[e] = 0\\n\\n\\tdef union(self, x, y):\\n\\t\\tpx = self.find(x)\\n\\t\\tpy = self.find(y)\\n\\t\\tif px == py:\\n\\t\\t\\treturn\\n\\t\\tif self.rank[px] < self.rank[py]:\\n\\t\\t\\tself.parent[px] = py\\n\\t\\telse:\\n\\t\\t\\tself.parent[py] = px\\n\\t\\t\\tif self.rank[px] == self.rank[py]:\\n\\t\\t\\t\\tself.rank[px] += 1\\nn = int(input())\\nns = list(map(int, input().split()))\\nsnm = SNM2()\\nfor i in range(1, n + 1):\\n\\tsnm.make_set(i)\\nfor (k, n) in enumerate(ns, 1):\\n\\tsnm.union(k, n)\\nroots = set()\\nfor k in snm.parent:\\n\\troots.add(snm.find(k))\\nprint(len(roots))\\n\", \"import sys\\nreadline = sys.stdin.readline\\n\\ndef i1():\\n\\treturn int(readline())\\n\\ndef nl():\\n\\treturn [int(s) for s in readline().split()]\\n\\ndef nn(n):\\n\\treturn [int(readline()) for i in range(n)]\\n\\ndef nnp(n, x):\\n\\treturn [int(readline()) + x for i in range(n)]\\n\\ndef nmp(n, x):\\n\\treturn (int(readline()) + x for i in range(n))\\n\\ndef nlp(x):\\n\\treturn [int(s) + x for s in readline().split()]\\n\\ndef nll(n):\\n\\treturn [[int(s) for s in readline().split()] for i in range(n)]\\n\\ndef mll(n):\\n\\treturn ([int(s) for s in readline().split()] for i in range(n))\\n\\ndef s1():\\n\\treturn readline().rstrip()\\n\\ndef sl():\\n\\treturn [s for s in readline().split()]\\n\\ndef sn(n):\\n\\treturn [readline().rstrip() for i in range(n)]\\n\\ndef sm(n):\\n\\treturn (readline().rstrip() for i in range(n))\\n\\ndef redir(s):\\n\\tglobal readline\\n\\timport os\\n\\tfn = sys.argv[0] + f'/../in-{s}.txt'\\n\\treadline = open(fn).readline if os.path.exists(fn) else readline\\nredir('c')\\nn = i1()\\nfa = list(range(n + 1))\\n\\ndef find(i):\\n\\tif i == fa[i]:\\n\\t\\treturn i\\n\\tfa[i] = find(fa[i])\\n\\treturn fa[i]\\n\\ndef merge(i, p):\\n\\ti = find(i)\\n\\tp = find(p)\\n\\tif i != p:\\n\\t\\tfa[i] = p\\nfor (i, p) in enumerate(nl(), start=1):\\n\\tmerge(i, p)\\nprint(len([i for i in range(1, n + 1) if fa[i] == i]))\\n\", \"input()\\np = [int(x) for x in input().split()]\\n(s, count) = (set(), 0)\\nfor (i, v) in enumerate(p):\\n\\tif i + 1 == v:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\ts.add(v)\\nprint(count + len(s) // 2)\\n\", \"def main():\\n\\tn = int(input())\\n\\trelav = list(map(int, input().split()))\\n\\ttrees = dict.fromkeys(range(1, n + 1), -1)\\n\\tfor i in range(n):\\n\\t\\tif trees[relav[i]] == -1:\\n\\t\\t\\ttrees[i + 1] = relav[i]\\n\\t\\telse:\\n\\t\\t\\ttrees[i + 1] = trees[relav[i]]\\n\\tcount = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif trees[i] == i:\\n\\t\\t\\tcount += 1\\n\\tprint(count)\\nmain()\\n\", \"(n, p) = (int(input()), [-1] + list(map(int, input().split())))\\nprint(sum((1 for (i, pi) in enumerate(p) if pi >= i and p[pi] == i)))\\n\", \"from collections import defaultdict\\n\\nclass Graph:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.nodes = n\\n\\t\\tself.graph = defaultdict(list)\\n\\t\\tself.visited = [0] * self.nodes\\n\\n\\tdef add_edge(self, x, y):\\n\\t\\tself.graph[x].append(y)\\n\\n\\tdef count_components(self):\\n\\t\\tret = 0\\n\\t\\tfor i in range(self.nodes):\\n\\t\\t\\tif self.visited[i] == 0:\\n\\t\\t\\t\\tret += 1\\n\\t\\t\\t\\tself.dfs(i, ret)\\n\\t\\treturn ret\\n\\n\\tdef dfs(self, u, c):\\n\\t\\tself.visited[u] = c\\n\\t\\tfor v in self.graph[u]:\\n\\t\\t\\tif self.visited[v] == 0:\\n\\t\\t\\t\\tself.dfs(v, c)\\nn = int(input())\\nar = list(map(int, input().split()))\\ngraph = Graph(n)\\nfor i in range(n):\\n\\tgraph.add_edge(i, ar[i] - 1)\\n\\tgraph.add_edge(ar[i] - 1, i)\\nprint(graph.count_components())\\n\", \"def dfs(v, child, visited):\\n\\tvisited[v] = True\\n\\tfor i in child[v]:\\n\\t\\tif visited[i] == False:\\n\\t\\t\\tdfs(i, child, visited)\\n\\ndef main():\\n\\tn = int(input())\\n\\tchild = {i: [] for i in range(1, n + 1)}\\n\\tlis = list(map(int, input().split()))\\n\\tfor i in range(n):\\n\\t\\tchild[lis[i]].append(i + 1)\\n\\t\\tchild[i + 1].append(lis[i])\\n\\tvisited = {i: False for i in range(1, n + 1)}\\n\\tans = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tif visited[i] == False:\\n\\t\\t\\tans += 1\\n\\t\\t\\tdfs(i, child, visited)\\n\\tprint(ans)\\nmain()\\n\", \"import sys\\nimport math\\nimport heapq\\nimport bisect\\nfrom collections import Counter\\nfrom collections import defaultdict\\nfrom io import BytesIO, IOBase\\nimport string\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\timport os\\n\\t\\tself.os = os\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\t\\tself.BUFSIZE = 8192\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, self.BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, self.BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tself.os.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef get_int():\\n\\treturn int(input())\\n\\ndef get_ints():\\n\\treturn list(map(int, input().split(' ')))\\n\\ndef get_int_grid(n):\\n\\treturn [get_ints() for _ in range(n)]\\n\\ndef get_str():\\n\\treturn input().split(' ')\\n\\ndef yes_no(b):\\n\\tif b:\\n\\t\\treturn 'YES'\\n\\telse:\\n\\t\\treturn 'NO'\\n\\ndef binary_search(good, left, right, delta=1, right_true=False):\\n\\tlimits = [left, right]\\n\\twhile limits[1] - limits[0] > delta:\\n\\t\\tif delta == 1:\\n\\t\\t\\tmid = sum(limits) // 2\\n\\t\\telse:\\n\\t\\t\\tmid = sum(limits) / 2\\n\\t\\tif good(mid):\\n\\t\\t\\tlimits[int(right_true)] = mid\\n\\t\\telse:\\n\\t\\t\\tlimits[int(~right_true)] = mid\\n\\tif good(limits[int(right_true)]):\\n\\t\\treturn limits[int(right_true)]\\n\\telse:\\n\\t\\treturn False\\n\\ndef prefix_sums(a, drop_zero=False):\\n\\tp = [0]\\n\\tfor x in a:\\n\\t\\tp.append(p[-1] + x)\\n\\tif drop_zero:\\n\\t\\treturn p[1:]\\n\\telse:\\n\\t\\treturn p\\n\\ndef prefix_mins(a, drop_zero=False):\\n\\tp = [float('inf')]\\n\\tfor x in a:\\n\\t\\tp.append(min(p[-1], x))\\n\\tif drop_zero:\\n\\t\\treturn p[1:]\\n\\telse:\\n\\t\\treturn p\\n\\nclass DSU:\\n\\n\\tdef __init__(self, nodes):\\n\\t\\tself.p = [i for i in range(nodes)]\\n\\t\\tself.r = [0 for i in range(nodes)]\\n\\t\\tself.m = [i for i in range(nodes)]\\n\\t\\tself.M = [i for i in range(nodes)]\\n\\t\\tself.s = [1 for i in range(nodes)]\\n\\n\\tdef get(self, u):\\n\\t\\tif u != self.p[u]:\\n\\t\\t\\tself.p[u] = self.get(self.p[u])\\n\\t\\treturn self.p[u]\\n\\n\\tdef union(self, u, v):\\n\\t\\tu = self.get(u)\\n\\t\\tv = self.get(v)\\n\\t\\tif u != v:\\n\\t\\t\\tif self.r[u] > self.r[v]:\\n\\t\\t\\t\\t(u, v) = (v, u)\\n\\t\\t\\tself.p[u] = v\\n\\t\\t\\tif self.r[u] == self.r[v]:\\n\\t\\t\\t\\tself.r[v] += 1\\n\\t\\t\\tself.m[v] = min(self.m[u], self.m[v])\\n\\t\\t\\tself.M[v] = max(self.M[u], self.M[v])\\n\\t\\t\\tself.s[v] += self.s[u]\\n\\ndef solve_c():\\n\\tn = get_int()\\n\\tdsu = DSU(n)\\n\\tp = get_ints()\\n\\tfor (i, x) in enumerate(p):\\n\\t\\tdsu.union(i, x - 1)\\n\\treturn sum([dsu.get(i) == i for i in range(n)])\\nprint(solve_c())\\n\", \"from collections import Counter as cntr\\nfrom math import inf\\n\\ndef cin():\\n\\treturn map(int, input().split(' '))\\n\\ndef dfs(graph, src):\\n\\tglobal visited\\n\\tfor v in graph[src]:\\n\\t\\tif visited[v] == False:\\n\\t\\t\\tvisited[v] = True\\n\\t\\t\\tdfs(graph, v)\\nn = int(input())\\np = list(cin())\\ntree = {i: [] for i in range(n)}\\nfor i in range(n):\\n\\ttree[i].append(p[i] - 1)\\n\\ttree[p[i] - 1].append(i)\\nvisited = [False for i in range(n)]\\ncount = 0\\nfor i in range(n):\\n\\tif visited[i] == False:\\n\\t\\tcount += 1\\n\\t\\tvisited[i] = True\\n\\t\\tdfs(tree, i)\\nprint(count)\\n\", \"from sys import stdin, stdout\\nn = int(stdin.readline())\\npairs = list(map(int, stdin.readline().split()))\\nvisit = [0 for i in range(n + 1)]\\nvertices = [[] for i in range(n + 1)]\\n\\ndef dfs(v):\\n\\tvisit[v] = 1\\n\\tfor u in vertices[v]:\\n\\t\\tif not visit[u]:\\n\\t\\t\\tdfs(u)\\nfor i in range(n):\\n\\tvertices[i + 1].append(pairs[i])\\n\\tvertices[pairs[i]].append(i + 1)\\nans = 0\\nfor i in range(1, n + 1):\\n\\tif not visit[i]:\\n\\t\\tdfs(i)\\n\\t\\tans += 1\\nstdout.write(str(ans))\\n\", \"from sys import *\\nfrom decimal import *\\n\\ndef gcd(a, b):\\n\\tif b:\\n\\t\\treturn gcd(b, a % b)\\n\\treturn a\\nn = int(input())\\narr = [int(z) for z in input().split()]\\ns = set(arr)\\nres = 0\\nfor i in range(n):\\n\\tif arr[i] == i + 1:\\n\\t\\tres += 1\\nres += (len(s) - res) // 2\\nprint(res)\\n\", \"def nTreesInForest(PolandBalls, mostDistantRelatives):\\n\\tnTrees = 0\\n\\tforest = set()\\n\\tfor iBall in PolandBalls:\\n\\t\\t(ball, itsRelative) = (iBall + 1, mostDistantRelatives[iBall])\\n\\t\\tif ball == itsRelative:\\n\\t\\t\\tnTrees += 1\\n\\t\\telif itsRelative not in forest:\\n\\t\\t\\tnTrees += 0.5\\n\\t\\t\\tforest.add(itsRelative)\\n\\treturn round(nTrees)\\nprint(nTreesInForest(range(int(input())), tuple(map(int, input().split()))))\\n\", \"def dint(x):\\n\\treturn int(x) - 1\\nn = int(input())\\nfar = map(dint, input().split())\\nlinks = [None] * n\\npairs = list(enumerate(far))\\npairs.sort(key=lambda x: x[1])\\ncurr = 0\\nfor (i, e) in pairs:\\n\\tif links[e] is None:\\n\\t\\tlinks[e] = curr\\n\\t\\tcurr += 1\\n\\tlinks[i] = links[e]\\nprint(curr)\\n\", \"from collections import defaultdict\\n\\nclass Graph:\\n\\n\\tdef __init__(self):\\n\\t\\tself.graph = defaultdict(list)\\n\\n\\tdef addEdge(self, fr, to):\\n\\t\\tself.graph[fr].append(to)\\n\\t\\tself.graph[to].append(fr)\\n\\n\\tdef goAndMark(self, start, visited):\\n\\t\\tvisited[start - 1] = True\\n\\t\\tfor x in self.graph[start]:\\n\\t\\t\\tif visited[x - 1] == False:\\n\\t\\t\\t\\tself.goAndMark(x, visited)\\n\\n\\tdef solve(self, visited, n):\\n\\t\\tcount = 0\\n\\t\\tfor j in range(n):\\n\\t\\t\\tif visited[j] == False:\\n\\t\\t\\t\\tself.goAndMark(j + 1, visited)\\n\\t\\t\\t\\tcount += 1\\n\\t\\treturn count\\nn = int(input())\\nList = [int(x) for x in input().split()]\\nG = Graph()\\nfor i in range(n):\\n\\tG.addEdge(i + 1, List[i])\\nvisited = [False] * n\\nprint(G.solve(visited, n))\\n\", \"n = int(input())\\nx = [int(i) for i in input().split()]\\ns = set()\\nsum = 0\\nfor i in range(n):\\n\\tif i + 1 == x[i]:\\n\\t\\tsum += 1\\n\\telse:\\n\\t\\ts.add(x[i])\\nprint(sum + len(s) // 2)\\n\", \"from collections import defaultdict\\nn = int(input())\\ntree = defaultdict(set)\\nfor (i, p) in enumerate(map(int, input().split())):\\n\\ttree[i].add(p - 1)\\n\\ttree[p - 1].add(i)\\nunvisited = set(range(n))\\n\\ndef DFS(curr):\\n\\tfor nei in tree[curr]:\\n\\t\\tif nei in unvisited:\\n\\t\\t\\tunvisited.remove(nei)\\n\\t\\t\\tDFS(nei)\\nans = 0\\nwhile unvisited:\\n\\tans += 1\\n\\tstart = unvisited.pop()\\n\\tDFS(start)\\nprint(ans)\\n\", \"n = int(input())\\na = [int(i) - 1 for i in input().split()]\\nans = 0\\ncnt = [0] * n\\nfor i in range(n):\\n\\tif a[i] == i:\\n\\t\\tans += 1\\n\\t\\tcontinue\\n\\tcnt[a[i]] = 1\\nprint(sum(cnt) // 2 + ans)\\n\", \"n = int(input())\\ng = [int(i) - 1 for i in input().split()]\\ns = set()\\ncnt = 0\\nfor i in range(n):\\n\\tif i == g[i]:\\n\\t\\tcnt += 1\\n\\telse:\\n\\t\\ts.add(g[i])\\nprint(cnt + len(s) // 2)\\n\", \"def main():\\n\\tn = int(input())\\n\\tp = [int(c) - 1 for c in input().split()]\\n\\tlinks = [None] * n\\n\\tpairs = list(enumerate(p))\\n\\tpairs.sort(key=lambda x: x[1])\\n\\tcurr = 0\\n\\tfor (i, e) in pairs:\\n\\t\\tif links[e] is None:\\n\\t\\t\\tlinks[e] = curr\\n\\t\\t\\tcurr += 1\\n\\t\\tlinks[i] = links[e]\\n\\tprint(curr)\\nmain()\\n\", \"def dfs(node, parent):\\n\\tglobal a, visited\\n\\tvisited[node] = True\\n\\tfor i in range(len(a[node])):\\n\\t\\tif a[node][i] != parent:\\n\\t\\t\\tdfs(a[node][i], node)\\nn = int(input())\\nl = 0\\nb = list(map(int, input().split()))\\na = [[] for _ in range(n + 1)]\\nvisited = [False] * (n + 1)\\nfor i in range(n):\\n\\ta[i + 1].append(b[i])\\n\\ta[b[i]].append(i + 1)\\nfor i in range(1, n + 1):\\n\\tif visited[i] == True:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tdfs(i, 0)\\n\\t\\tl = l + 1\\nprint(l)\\n\", \"from sys import stdin\\ninput = lambda : stdin.readline().strip()\\nfrom math import ceil, sqrt, factorial, gcd\\n\\ndef traversal(a):\\n\\tif a in z:\\n\\t\\treturn\\n\\tz.add(a)\\n\\tfor k in d[a]:\\n\\t\\tif len(d[k]) > 0:\\n\\t\\t\\ttraversal(k)\\n\\t\\telse:\\n\\t\\t\\tz.add(k)\\nn = int(input())\\nd = {i: set() for i in range(1, n + 1)}\\nl = list(map(int, input().split()))\\nfor i in range(n):\\n\\td[i + 1].add(l[i])\\n\\td[l[i]].add(i + 1)\\nfor i in d:\\n\\tif len(d[i]) > 0:\\n\\t\\tz = set()\\n\\t\\ttraversal(i)\\n\\t\\tfor k in z:\\n\\t\\t\\tif k != i:\\n\\t\\t\\t\\td[k] = set()\\ncount = 0\\nfor i in d:\\n\\tif len(d[i]) > 0:\\n\\t\\tcount += 1\\nprint(count)\\n\", \"def find(a, x):\\n\\twhile 1:\\n\\t\\tif a[x] < 0:\\n\\t\\t\\treturn x\\n\\t\\telse:\\n\\t\\t\\tx = a[x]\\nn = int(input())\\na = [-1] * (n + 1)\\ned = [0] + [int(y) for y in input().split(' ')]\\nfor i in range(1, 1 + n):\\n\\tp1 = find(a, i)\\n\\tp2 = find(a, ed[i])\\n\\tif p1 != p2:\\n\\t\\ta[p1] += a[p2]\\n\\t\\ta[p2] = p1\\nc = 0\\nfor j in range(1, 1 + n):\\n\\tif a[j] < 0:\\n\\t\\tc = c + 1\\nprint(c)\\n\", \"import sys\\nn = int(sys.stdin.readline().strip())\\nA = [int(i) for i in sys.stdin.readline().strip().split(' ')]\\nleaves = set()\\ncount_tree = 0\\nfor i in A:\\n\\tv1 = A[i - 1]\\n\\tif v1 not in leaves:\\n\\t\\tleaves.add(v1)\\n\\t\\tv2 = A[v1 - 1]\\n\\t\\tleaves.add(v2)\\n\\t\\tcount_tree = count_tree + 1\\n\\telse:\\n\\t\\tcontinue\\nprint(count_tree)\\n\", \"from collections import *\\n\\ndef find(visited, a, i):\\n\\twhile a[i] != i:\\n\\t\\ta[i] = a[a[i]]\\n\\t\\ti = a[i]\\nn = int(input())\\na = [int(i) - 1 for i in input().split()]\\nvisited = [False] * n\\ntot = 0\\nfor i in range(n):\\n\\tif not visited[i]:\\n\\t\\tfind(visited, a, i)\\nprint(len(Counter(a)))\\n\", \"n = int(input())\\ngr = [[] for i in range(n)]\\nfor (v, to) in enumerate(map(int, input().split())):\\n\\tto -= 1\\n\\tgr[v].append(to)\\n\\tgr[to].append(v)\\n\\ndef dfs(v):\\n\\tused[v] = True\\n\\tfor to in gr[v]:\\n\\t\\tif not used[to]:\\n\\t\\t\\tdfs(to)\\nused = [False] * n\\nanswer = 0\\nfor v in range(n):\\n\\tif not used[v]:\\n\\t\\tanswer += 1\\n\\t\\tdfs(v)\\nprint(answer)\\n\", \"n = int(input())\\np = list(map(lambda x: int(x) - 1, input().split()))\\nr = [None] * n\\nfor i in range(n):\\n\\tv = p[i]\\n\\tu = p[v]\\n\\tr[i] = min(v, u)\\nprint(len(set(r)))\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3 1\\n2 3\\n\", \"2 0\\n\", \"3 0\\n\", \"4 3\\n3 1\\n1 2\\n2 4\\n\", \"1 0\\n\", \"18 2\\n9 17\\n1 18\\n\", \"3 2\\n1 2\\n2 3\\n\", \"5 4\\n1 2\\n1 3\\n1 4\\n3 5\\n\", \"10000 1\\n1725 10000\\n\", \"5 1\\n4 5\\n\", \"5 4\\n1 3\\n1 4\\n4 2\\n5 2\\n\", \"2 1\\n1 2\\n\", \"10 3\\n2 8\\n5 9\\n6 10\\n\", \"6 5\\n1 4\\n2 3\\n3 4\\n4 5\\n5 6\\n\", \"5 3\\n1 2\\n3 4\\n4 5\\n\", \"5 4\\n3 2\\n2 5\\n5 1\\n1 4\\n\", \"5 0\\n\", \"10000 1\\n1566 10000\\n\", \"17 3\\n2 8\\n5 9\\n6 10\\n\", \"00000 1\\n1566 10000\\n\", \"4 3\\n3 1\\n2 2\\n2 4\\n\", \"20 2\\n9 17\\n1 18\\n\", \"3 2\\n1 2\\n2 5\\n\", \"5 4\\n1 2\\n1 3\\n1 1\\n3 5\\n\", \"5 1\\n5 5\\n\", \"5 4\\n1 3\\n2 4\\n4 2\\n5 2\\n\", \"2 1\\n2 2\\n\", \"6 5\\n1 4\\n2 0\\n3 4\\n4 5\\n5 6\\n\", \"5 4\\n3 2\\n0 5\\n5 1\\n1 4\\n\", \"5\\n0 1 5 3 3\", \"4 0\\n\", \"4 3\\n3 1\\n2 2\\n2 2\\n\", \"21 2\\n9 17\\n1 18\\n\", \"3 2\\n1 2\\n3 5\\n\", \"5 1\\n5 4\\n\", \"5 4\\n2 3\\n2 4\\n4 2\\n5 2\\n\", \"2 1\\n2 1\\n\", \"17 3\\n2 8\\n5 15\\n6 10\\n\", \"6 0\\n\", \"4 3\\n3 0\\n2 2\\n2 2\\n\", \"21 3\\n9 17\\n1 18\\n\", \"3 2\\n1 2\\n3 1\\n\", \"00000 1\\n913 10000\\n\", \"9 4\\n2 3\\n2 4\\n4 2\\n5 2\\n\", \"2 2\\n2 1\\n\", \"17 3\\n4 8\\n5 15\\n6 10\\n\", \"3 2\\n1 2\\n0 1\\n\", \"00000 1\\n913 10001\\n\", \"9 7\\n2 3\\n2 4\\n4 2\\n5 2\\n\", \"2 2\\n0 1\\n\", \"17 3\\n8 8\\n5 15\\n6 10\\n\", \"3 2\\n1 2\\n0 2\\n\", \"00000 1\\n913 10011\\n\", \"9 7\\n2 3\\n2 4\\n4 2\\n4 2\\n\", \"3 2\\n0 1\\n\", \"17 3\\n8 12\\n5 15\\n6 10\\n\", \"3 1\\n1 2\\n0 2\\n\", \"9 7\\n2 1\\n2 4\\n4 2\\n4 2\\n\", \"4 2\\n0 1\\n\", \"17 3\\n8 10\\n5 15\\n6 10\\n\", \"3 1\\n1 2\\n0 0\\n\", \"9 7\\n2 2\\n2 4\\n4 2\\n4 2\\n\", \"4 0\\n0 1\\n\", \"17 3\\n8 11\\n5 15\\n6 10\\n\", \"1\\n1\\n\", \"5\\n2 1 5 3 3\"], \"outputs\": [\"3\\n\", \"1\", \"1\", \"1\\n\", \"1\", \"1\\n\", \"1\\n\", \"1\\n\", \"2\\n\", \"2\\n\", \"2\\n\", \"1\\n\", \"3\\n\", \"1\\n\", \"1\\n\", \"2\\n\", \"1\", \"2\", \"3\", \"0\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"1\", \"3\", \"2\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"3\", \"1\", \"1\", \"1\", \"1\", \"0\", \"2\", \"1\", \"2\", \"1\", \"0\", \"2\", \"1\", \"2\", \"1\", \"0\", \"2\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\\n\", \"2\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['interactive', 'dfs and similar', 'dsu', 'trees', 'graphs']",
    "name": null,
    "source": "codeforces",
    "tags": "['Tree algorithms', 'Graph algorithms', 'Graph traversal', 'Spanning trees']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/755/C",
    "Expected Auxiliary Space": null,
    "time_limit": "1.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "A Word Ladder is a puzzle in which you transform one word into another, by changing one letter at a time. But, there’s a catch: every word that you form in each step must be in the dictionary! Here’s an example of how to transform CAT into GAS:CAT $\\rightarrow $ CAR $\\rightarrow $ WAR $\\rightarrow $ WAS $\\rightarrow $ GAS\n\nOf course, you want to use the fewest number of transitions possible. These puzzles can be tough, and often you’ll think to yourself: “Darn it! If only [some word] was in the dictionary!”\n\nWell, now is your chance! Given a dictionary, and a starting and ending word, what ONE single word could you add to the dictionary to minimize the number of steps to get from the starting word to the ending word, changing only one letter at a time, and making sure that every word at every step is in the dictionary?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with a line with a single integer $n$ ($2 \\le n \\le 1000$) which indicates the number of words in the dictionary. The dictionary will follow on the next $n$ lines, with one word per line. All words will consist of between $1$ and $8$ capital letters only, and all of the words in a test case will be of the same length. The first word in the list will be the starting word of the word ladder, and the second will be the ending word of the word ladder.\n\n-----Output-----\nOutput exactly two lines. The first line holds the one single word that you would add to the dictionary, and the second holds an integer indicating the minimum number of steps to get from the starting word to the ending word, adding your word.\n\nIt is possible that there’s more than one word you can add that will make your path as short as possible. In this case, output the solution word that comes first alphabetically.\n\nIt is possible that there’s no word you can add that will that will make your path any shorter. In this case, output 0 (zero) as the word.\n\nIt is possible that there’s no word you can add that makes the solution possible. In this case, output 0 (zero) as the word, and -1 as the number of steps.\n\n-----Examples-----\nSample Input 1:\n3\nCAT\nDOG\nCOT\nSample Output 1:\nCOG\n3\n\nSample Input 2:\n2\nCAT\nDOG\nSample Output 2:\n0\n-1",
    "solutions": "[]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3\\nCAT\\nDOG\\nCOT\\n\", \"2\\nCAT\\nDOG\\n\", \"4\\nCAT\\nDOG\\nCOT\\nCOG\\n\"], \"outputs\": [\"COG\\n3\\n\", \"0\\n-1\\n\", \"0\\n3\\n\"]}",
    "difficulty": "HARD",
    "raw_tags": "[]",
    "name": null,
    "source": "kattis",
    "tags": "[]",
    "skill_types": "[]",
    "url": "https://open.kattis.com/problems/wordladder2",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": null,
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Count the number of 2s as digit in all numbers from 0 to n.\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains the input integer n.\nOutput:\nPrint the count of the number of 2s as digit in all numbers from 0 to n.\nConstraints:\n1<=T<=100\n1<=N<=10^5\nExample:\nInput:\n2\n22\n100\nOutput:\n6\n20",
    "solutions": "[\"def numberOf2sinRange(n):\\n\\ts = ''\\n\\tfor i in range(n + 1):\\n\\t\\ts += str(i)\\n\\treturn s.count('2')\\n\", \"dic = {0: 0}\\n\\ndef dicSearch(n):\\n\\tmaxk = -1\\n\\tfor key in dic.keys():\\n\\t\\tif maxk < key and key < n:\\n\\t\\t\\tmaxk = key\\n\\treturn maxk\\n\\ndef number0f2s(n):\\n\\tcount = 0\\n\\twhile n > 0:\\n\\t\\trem = n % 10\\n\\t\\tif rem == 2:\\n\\t\\t\\tcount += 1\\n\\t\\tn //= 10\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\tmkey = dicSearch(n)\\n\\tcount = dic[mkey]\\n\\tfor i in range(mkey + 1, n + 1):\\n\\t\\tcount += number0f2s(i)\\n\\tdic[n] = count\\n\\treturn count\\n\", \"def numberOf2sinRange(n):\\n\\tsum = 0\\n\\tfor i in range(n + 1):\\n\\t\\tx = str(i).count('2')\\n\\t\\tsum += x\\n\\treturn sum\\n\", \"def number0f2s(n):\\n\\treturn str(n).count('2')\\n\\ndef numberOf2sinRange(n):\\n\\tc = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tc += number0f2s(i)\\n\\treturn c\\n\", \"def numberOf2sinRange(n):\\n\\ti = 0\\n\\tx = ''\\n\\tfor c in range(n + 1):\\n\\t\\tx += str(c)\\n\\tfor u in x:\\n\\t\\tif u == '2':\\n\\t\\t\\ti += 1\\n\\treturn i\\n\", \"def numberOf2sinRange(n):\\n\\tl = ''\\n\\tfor i in range(n + 1):\\n\\t\\tif '2' in str(i):\\n\\t\\t\\tl += str(i)\\n\\treturn l.count('2')\\n\", \"def numberOf2sinRange(n):\\n\\tret = 0\\n\\tfor i in range(n + 1):\\n\\t\\ts = str(i)\\n\\t\\tc = s.count('2')\\n\\t\\tret += c\\n\\treturn ret\\n\", \"def numberOf2sinRange(n):\\n\\tcount = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\ttemp = str(i)\\n\\t\\tfor j in temp:\\n\\t\\t\\tif j == '2':\\n\\t\\t\\t\\tcount += 1\\n\\treturn count\\n\", \"def numberOf2sinRange(n):\\n\\tif n <= 1:\\n\\t\\treturn 0\\n\\tif n < 11 and n > 1:\\n\\t\\treturn 1\\n\\tc = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\twhile i > 0:\\n\\t\\t\\tif i % 10 == 2:\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\ti //= 10\\n\\treturn c\\n\", \"def number0f2s(n):\\n\\tcount = 0\\n\\twhile n > 0:\\n\\t\\ti = n % 10\\n\\t\\tif i == 2:\\n\\t\\t\\tcount += 1\\n\\t\\tn = n // 10\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\tres = 0\\n\\tfor i in range(0, n + 1):\\n\\t\\tres += number0f2s(i)\\n\\treturn res\\n\", \"def number0f2s(n):\\n\\ta = ''\\n\\tfor i in range(n + 1):\\n\\t\\ta = a + str(i)\\n\\treturn a.count('2')\\n\\ndef numberOf2sinRange(n):\\n\\ta = ''\\n\\tfor i in range(n + 1):\\n\\t\\ta = a + str(i)\\n\\treturn a.count('2')\\n\", \"def number0f2s(n):\\n\\tctr = 0\\n\\twhile n:\\n\\t\\tif n % 10 == 2:\\n\\t\\t\\tctr += 1\\n\\t\\tn = n // 10\\n\\treturn ctr\\n\\ndef numberOf2sinRange(n):\\n\\tsum = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tsum += number0f2s(i)\\n\\treturn sum\\n\", \"def number0f2s(n):\\n\\tpass\\n\\ndef numberOf2sinRange(n):\\n\\tf = ''\\n\\tfor i in range(1, n + 1):\\n\\t\\tf += str(i)\\n\\treturn f.count('2')\\n\", \"def number0f2s(n):\\n\\tpass\\n\\ndef numberOf2sinRange(n):\\n\\tcount = 0\\n\\tif n == 0:\\n\\t\\treturn 0\\n\\tif n < 9:\\n\\t\\treturn count + 1\\n\\tfor i in range(0, n + 1):\\n\\t\\tj = i\\n\\t\\twhile j != 0:\\n\\t\\t\\ttemp = j % 10\\n\\t\\t\\tif temp == 2:\\n\\t\\t\\t\\tcount += 1\\n\\t\\t\\tj //= 10\\n\\treturn count\\n\", \"arr = [0] * 100001\\nfor i in range(2, 100001):\\n\\tarr[i] = arr[i - 1] + str(i).count('2')\\n\\ndef numberOf2sinRange(n):\\n\\treturn arr[n]\\n\", \"def number0f2s(n):\\n\\tc = 0\\n\\twhile n:\\n\\t\\tr = n % 10\\n\\t\\tif r == 2:\\n\\t\\t\\tc += 1\\n\\t\\tn //= 10\\n\\treturn c\\n\\ndef numberOf2sinRange(n):\\n\\ts = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\ts += number0f2s(i)\\n\\treturn s\\n\", \"def numberOf2sinRange(n):\\n\\tcount = 0\\n\\td = '2'\\n\\tl = [str(i) for i in range(0, n + 1)]\\n\\tfor i in range(0, len(l)):\\n\\t\\tif d in l[i]:\\n\\t\\t\\tj = 0\\n\\t\\t\\twhile j < len(l[i]):\\n\\t\\t\\t\\tif l[i][j] == d:\\n\\t\\t\\t\\t\\tcount = count + 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tpass\\n\\t\\t\\t\\tj = j + 1\\n\\treturn count\\n\", \"def number0f2s(n):\\n\\tcount = 0\\n\\tfor num in str(n):\\n\\t\\tif num == '2':\\n\\t\\t\\tcount += 1\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\tfinal = 0\\n\\tfor i in range(n + 1):\\n\\t\\tnums_2 = number0f2s(i)\\n\\t\\tfinal += nums_2\\n\\treturn final\\n\", \"def number0f2s(n):\\n\\ts = ''\\n\\tfor i in range(n + 1):\\n\\t\\ts += str(i)\\n\\tc = 0\\n\\tfor a in s:\\n\\t\\tif a == '2':\\n\\t\\t\\tc += 1\\n\\treturn c\\n\\ndef numberOf2sinRange(n):\\n\\treturn number0f2s(n)\\n\", \"from collections import Counter\\n\\ndef number0f2s(n):\\n\\tcount = 0\\n\\twhile n > 0:\\n\\t\\tif n % 10 == 2:\\n\\t\\t\\tcount += 1\\n\\t\\tn //= 10\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\tres = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tres += number0f2s(i)\\n\\treturn res\\n\", \"def number0f2s(n):\\n\\ts = str(n)\\n\\treturn s.count('2')\\n\\ndef numberOf2sinRange(n):\\n\\tsum = 0\\n\\tfor i in range(n + 1):\\n\\t\\tsum += number0f2s(i)\\n\\treturn sum\\n\", \"def numberOf2sinRange(n):\\n\\tres = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tres += str(i).count('2')\\n\\treturn res\\n\", \"def number0f2s(n):\\n\\treturn None\\n\\ndef numberOf2sinRange(n):\\n\\tx = ''\\n\\tfor i in range(2, n + 1):\\n\\t\\tx += str(i)\\n\\treturn x.count('2')\\n\", \"def number0f2s(n):\\n\\tpass\\n\\ndef numberOf2sinRange(n):\\n\\tx = str(2)\\n\\tcount = 0\\n\\tfor i in range(n + 1):\\n\\t\\ty = list(str(i))\\n\\t\\tcount += y.count(x)\\n\\treturn count\\n\", \"def numberOf2sinRange(n):\\n\\tc = 0\\n\\ts = 0\\n\\tfor i in range(n + 1):\\n\\t\\tif '2' in str(i):\\n\\t\\t\\ts = str(i).count('2')\\n\\t\\t\\tc += s\\n\\treturn c\\nif __name__ == '__main__':\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tprint(numberOf2sinRange(n))\\n\", \"def numberOf2sinRange(n):\\n\\tcnt = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\twhile i > 0:\\n\\t\\t\\tif i % 10 == 2:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\ti = i // 10\\n\\treturn cnt\\nif __name__ == '__main__':\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tprint(numberOf2sinRange(n))\\n\", \"def number0f2s(n):\\n\\tpass\\n\\ndef numberOf2sinRange(n):\\n\\tcount = 0\\n\\tfor i in range(n + 1):\\n\\t\\tif '2' in str(i):\\n\\t\\t\\tcount += str(i).count('2')\\n\\treturn count\\nif __name__ == '__main__':\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tprint(numberOf2sinRange(n))\\n\", \"def number0f2s(n):\\n\\tx = []\\n\\tfor i in range(n + 1):\\n\\t\\tx.append(str(i))\\n\\treturn ''.join(x)\\n\\ndef numberOf2sinRange(n):\\n\\ty = 0\\n\\tfor i in number0f2s(n):\\n\\t\\tif i == '2':\\n\\t\\t\\ty += 1\\n\\treturn y\\nif __name__ == '__main__':\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tn = int(input())\\n\\t\\tprint(numberOf2sinRange(n))\\n\", \"def number0f2s(n):\\n\\ti = 2\\n\\td = 0\\n\\twhile i <= n:\\n\\t\\ts = str(i)\\n\\t\\td += s.count('2')\\n\\t\\ti += 1\\n\\treturn d\\n\\ndef numberOf2sinRange(n):\\n\\ti = 2\\n\\td = 0\\n\\twhile i <= n:\\n\\t\\ts = str(i)\\n\\t\\td += s.count('2')\\n\\t\\ti += 1\\n\\treturn d\\n\", \"def twos(n):\\n\\tcount = 0\\n\\twhile n > 0:\\n\\t\\trem = n % 10\\n\\t\\tif rem == 2:\\n\\t\\t\\tcount = count + 1\\n\\t\\tn = n // 10\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\tsum = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tsum = sum + twos(i)\\n\\treturn sum\\n\", \"def number0f2s(n):\\n\\tc = 0\\n\\twhile n != 0:\\n\\t\\tif n % 10 == 2:\\n\\t\\t\\tc += 1\\n\\t\\tn = n // 10\\n\\treturn c\\n\\ndef numberOf2sinRange(n):\\n\\tv = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tv = v + number0f2s(i)\\n\\treturn v\\n\", \"def number0f2s(n):\\n\\tn = str(n)\\n\\tcount = 0\\n\\tfor i in n:\\n\\t\\tif i == '2':\\n\\t\\t\\tcount = count + 1\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\ti = 1\\n\\tt = 0\\n\\twhile i <= n:\\n\\t\\tt = t + number0f2s(i)\\n\\t\\ti = i + 1\\n\\treturn t\\n\", \"def number0f2s(n):\\n\\tstr_n = str(n)\\n\\treturn len([x for x in str_n if x == '2'])\\n\\ndef rec_num_2s(i, j):\\n\\tif j < i:\\n\\t\\treturn 0\\n\\tif i == j:\\n\\t\\treturn number0f2s(i)\\n\\tmid = (i + j) // 2\\n\\treturn rec_num_2s(i, mid) + rec_num_2s(mid + 1, j)\\n\\ndef numberOf2sinRange(n):\\n\\tres = rec_num_2s(0, n)\\n\\treturn res\\n\", \"def number0f2s(n):\\n\\tstr_n = str(n)\\n\\treturn len([x for x in str_n if x == '2'])\\n\\ndef numberOf2sinRange(n):\\n\\tcount = 0\\n\\tfor x in range(n + 1):\\n\\t\\tfor char in str(x):\\n\\t\\t\\tif char == '2':\\n\\t\\t\\t\\tcount += 1\\n\\treturn count\\n\", \"def number0f2s(n):\\n\\tc = 0\\n\\twhile n != 0:\\n\\t\\tx = n % 10\\n\\t\\tn = n // 10\\n\\t\\tif x == 2:\\n\\t\\t\\tc += 1\\n\\treturn c\\n\\ndef numberOf2sinRange(n):\\n\\tans = 0\\n\\tfor i in range(1, n + 1):\\n\\t\\tans += number0f2s(i)\\n\\treturn ans\\n\", \"def number0f2s(n):\\n\\tn = str(n)\\n\\tcount = 0\\n\\tfor i in range(len(n)):\\n\\t\\tif n[i] == '2':\\n\\t\\t\\tcount += 1\\n\\treturn count\\n\\ndef numberOf2sinRange(n):\\n\\tans = 0\\n\\tfor i in range(2, n + 1):\\n\\t\\tans += number0f2s(i)\\n\\treturn ans\\n\", \"def number0f2s(x, r):\\n\\tif r == 1 or r == 0:\\n\\t\\tc = 0\\n\\telif 2 <= r <= 10:\\n\\t\\tc = 1\\n\\telif 2 <= r <= 19:\\n\\t\\tc = 2\\n\\telif 20 <= r <= 29:\\n\\t\\tc = r // 10 + x % 10 + 1\\n\\telif 1 <= r <= 100:\\n\\t\\tc = r // 10 + 10\\n\\telif 200 <= r <= 299:\\n\\t\\tc = 20 * (r // 100) + x % 100 + 1\\n\\telif 100 <= r <= 1000:\\n\\t\\tc = 20 * (r // 100) + 100\\n\\telif 2000 <= r <= 2999:\\n\\t\\tc = 300 * (r // 1000) + x % 1000 + 1\\n\\telif 1000 <= r <= 10000:\\n\\t\\tc = 300 * (r // 1000) + 1000\\n\\telif 20000 <= x <= 29999:\\n\\t\\tc = 4000 * (20000 // 10000) + x % 10000 + 1\\n\\telif 10000 <= r <= 100000:\\n\\t\\tc = 4000 * (r // 10000) + 10000\\n\\treturn c\\n\\ndef numberOf2sinRange(n):\\n\\tcount = 0\\n\\ta = 10\\n\\tx = n\\n\\twhile n:\\n\\t\\tr = n % a\\n\\t\\tn = n - r\\n\\t\\tcount = count + number0f2s(x, r)\\n\\t\\ta = a * 10\\n\\treturn count\\n\", \"def numberOf2sinRange(n):\\n\\tl = []\\n\\tfor i in range(n + 1):\\n\\t\\tl.append(i)\\n\\tl = str(l)\\n\\ta = ''.join(l)\\n\\treturn a.count('2')\\n\", \"def number0f2s(n):\\n\\tpass\\n\\ndef numberOf2sinRange(n):\\n\\tans = 0\\n\\tfor i in range(n + 1):\\n\\t\\tidk = str(i)\\n\\t\\tans += idk.count('2')\\n\\treturn ans\\n\", \"def number0f2s(n):\\n\\ttotal = 0\\n\\twhile n > 0:\\n\\t\\tif n % 10 == 2:\\n\\t\\t\\ttotal += 1\\n\\t\\tn //= 10\\n\\treturn total\\n\\ndef numberOf2sinRange(n):\\n\\ttotal = 0\\n\\tfor num in range(1, n + 1):\\n\\t\\ttotal += number0f2s(num)\\n\\treturn total\\n\"]",
    "starter_code": "#User function Template for python3\n\n\n\ndef number0f2s(n):\n\n    \n\n    #add Code here\n\n    \n\ndef numberOf2sinRange(n):\n\n    \n\n    #add code here",
    "input_output": "{\"fn_name\": \"number0f2s\", \"inputs\": [\"2\\r\\n\\r\\n22\\r\\n\\r\\n100\"], \"outputs\": [\"6\\r\\n20\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['number-theory']",
    "name": null,
    "source": "geeksforgeeks",
    "tags": "['Number theory']",
    "skill_types": "[]",
    "url": "https://practice.geeksforgeeks.org/problems/occurences-of-2-as-a-digit/1",
    "Expected Auxiliary Space": "",
    "time_limit": null,
    "date": null,
    "picture_num": "0",
    "memory_limit": null,
    "Expected Time Complexity": ""
  },
  {
    "question": "The Monk wants to buy some cities. To buy two cities, he needs to buy the road connecting those two cities. Now, you are given a list of roads, bought by the Monk. You need to tell how many cities did the Monk buy.\n\nInput:\nFirst line contains an integer T, denoting  the number of test cases.  The first line of each test case contains an integer E, denoting the number of roads.  The next E lines contain two space separated integers X and Y, denoting that there is an road between city X and city Y.\n\nOutput:\nFor each test case, you need to print the number of cities the Monk bought.\n\nConstraint:\n1 ≤ T ≤ 100\n1 ≤ E ≤ 1000\n1 ≤ X, Y ≤ 10000\n\nSAMPLE INPUT\n1\n3\n1 2\n2 3\n1 3\n\nSAMPLE OUTPUT\n3",
    "solutions": "[\"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n#print 'Hello World!'\\nt=int(input())\\nfor i in range(t):\\n\\te=int(input())\\n\\tdic={}\\n\\tfor j in range(e):\\n\\t\\tx,y=list(map(int,input().split()))\\n\\t\\tdic[x]=1\\n\\t\\tdic[y]=1\\n\\tprint(len(dic))\\n\\t\\t\\n\", \"import sys\\nsys.setrecursionlimit(2500)\\nte=0\\n\\nk=[]\\nv=[0]*10000\\na=[]\\na.append([])\\nc=[]\\ndef dfs(s):\\n\\tglobal te\\n\\tv[s]=1\\n\\tte=te+1\\n\\tfor j in range(len(a[s])):\\n\\t\\tif v[a[s][j]]==0:\\n\\t\\t\\tdfs(a[s][j])\\nt=eval(input())\\nassert(0<t<=100)\\nfor z in range(t):\\n\\tte=0\\n\\ta=[]\\n\\ta.append([])\\n\\tv=[0]*10001\\n\\tc=[]\\n\\tk=[]\\n\\te=eval(input())\\n\\t\\n\\tfor i in range(10001):\\n\\t\\ta.append([])\\n\\tfor i in range(e):\\n\\t\\tx,y=list(map(int ,input().split()))\\n\\t\\ta[x].append(y)\\n\\t\\ta[y].append(x)\\n\\t\\tk.append(x)\\n\\tans=0\\n\\tfor d in range(len(k)):\\n    \\t\\tif v[k[d]]==0:\\n\\t\\t\\tdfs(k[d])\\n\\t\\t\\t\\n\\t\\n\\tprint(te)\\n\\t\\n\\t\\n\\n\\t\\t\\n\", \"def hi():\\n\\te=int (eval(input()));\\n\\tst=set()\\n\\tst.clear()\\n\\tfor i in range(e):\\n\\t\\ta,b=input().split()\\n\\t\\tst.add(a);\\n\\t\\tst.add(b);\\n\\tprint(len(st))\\nt=int(eval(input()));\\nfor j in range(t):\\n\\thi()\\n\", \"for _ in range(eval(input())):\\n\\te=eval(input())\\n\\tlist=[0]*(e)\\n\\twhile e:\\n\\t\\te-=1\\n\\t\\ts=list(map(int,input().split()))\\n\\t\\tlist.append(s[0])\\n\\t\\tlist.append(s[1])\\n\\twhile 0 in list: list.remove(0)\\n\\t#print list\\n\\t#s1=set(list)\\n\\t#c=0\\n\\t#for i in s1:\\n\\t#\\tif i:\\n\\t#\\t\\tc+=1\\n\\tprint(len(set(list)))\\t\\n\\t       \\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\n# your code goes here\\n\\ndef funk(arr):\\n\\tkey = []\\n\\tfor x in arr:\\n\\t\\tfor y in x:\\n\\t\\t\\tif(y not in key):\\n\\t\\t\\t\\tkey.append(y)\\n\\t\\t\\t\\n\\tprint(len(key))\\n\\nt = int(input())\\ne = []\\narr = []\\nfor x in range(t):\\n\\tcur = int(input())\\n\\te.append(cur)\\n\\tcurrar = []\\n\\tfor y in range(cur):\\n\\t\\tcurrar.append(list(map(int,input().split())))\\n\\t\\n\\tarr.append(currar)\\n\\t\\t\\n\\nfor x in arr:\\n\\tfunk(x)\\n\\n\\n\", \"# encoding=utf-8\\n'''\\nCreated on 2015?8?12?\\n\\n@author: limw\\n'''\\n\\nt = eval(input())\\nfor _ in range(t):\\n\\tr = eval(input())\\n\\n\\tcity = set()\\n\\tfor l in range(r):\\n\\t\\tkk = input().strip().split(' ')\\n\\t\\tcity.add(kk[0])\\n\\t\\tcity.add(kk[1])\\n\\tprint(len(city))\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\nt = int(input())\\nfor test in range(t):\\n\\tn = int(input())\\n\\tgraph = []\\n\\tfor i in range(n):\\n\\t\\tx,y = [int(z) for z in input().split()]\\n\\t\\tif x not in graph:\\n\\t\\t\\tgraph.append(x)\\n\\t\\tif y not in graph:\\n\\t\\t\\tgraph.append(y)\\n\\t\\n\\tprint(len(graph))\\n\", \"tests=eval(input())\\nwhile (tests):\\n\\tedges=eval(input())\\n\\tdic={}\\n\\twhile edges:\\n\\t\\tl=list(map(int,input().split()))\\n\\t\\t# print \\\"fsfdsdddddddddddddddddddd\\\",l\\n\\t\\tif l[0] in dic:\\n\\t\\t\\tdic[l[0]]=dic.get(l[0],1)\\n\\t\\telse:\\n\\t\\t\\tdic[l[0]]=1\\n\\t\\t# edges-=1\\n\\t\\tif l[1] in dic:\\n\\t\\t\\tdic[l[1]]=dic.get(l[1],1)\\n\\t\\telse:\\n\\t\\t\\tdic[l[1]]=1\\n\\t\\tedges-=1\\n\\tprint(len(list(dic.keys())))\\n\\ttests-=1\\n\", \"t=int(input())\\nfor ii in range(t):\\n\\te=int(input())\\n\\ta=[0 for i in range(10001)]\\n\\tfor i in range(e):\\n\\t\\tx=list(map(int,input().strip().split(' ')))\\n\\t\\ta[x[0]]=1\\n\\t\\ta[x[1]]=1\\n\\tprint(sum(a))\\n\", \"test=int(input().strip(\\\" \\\"))\\nwhile(test>0):\\n\\ttest-=1\\n\\tn=int(input().strip(\\\" \\\"))\\n\\tdic={}\\n\\twhile(n>0):\\n\\t\\tn-=1\\n\\t\\tnum1,num2=list(map(int,input().strip(\\\" \\\").split(\\\" \\\")))\\n\\t\\tif(num1 in dic):\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tdic[num1]=1;\\n\\t\\tif(num2 in dic):\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tdic[num2]=1;\\n\\tprint(len(dic))\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\ts = int(input()) \\n\\tt = set()\\n\\tfor _ in range(s):\\n\\t\\n\\t\\tn,m = list(map(int,input().split()))\\n\\t\\tt.add(n)\\n\\t\\tt.add(m)\\n\\tprint((len(t)))\\n\", \"t=int(input())\\n\\nfor _ in range( t ):\\n\\t\\n\\te=int(input())\\n\\tcity=[]\\n\\n\\tfor i in range(e):\\n\\t\\tx,y=list(map(int,input().split()))\\n\\t\\tif x not in city:\\n\\t\\t\\tcity.append(x)\\n\\t\\tif y not in city:\\n\\t\\t\\tcity.append(y)\\n\\tprint((len(city)))\\n\\t\\t \\t\\n\\t\\n\", \"'''\\n# Read input from stdin and provide input before running code\\n\\nname = raw_input('What is your name?\\\\n')\\nprint 'Hi, %s.' % name\\n'''\\nfor t in range(eval(input())):\\n\\te = eval(input())\\n\\tvertices = {}\\n\\tfor i in range(e):\\n\\t\\tx, y = list(map(int, input().strip().split()))\\n\\t\\tvertices[x] = vertices[y] = True\\n\\tprint(len(vertices))\\n\", \"x=int(input())\\nl=list()\\nfor i in range(x):\\n\\tdel l[:]\\n\\te=int(input())\\n\\tc=0\\n\\tfor j in range(e):\\n\\t\\ta , b = list(map(int , input().split()))\\n\\t\\tif a not in l :\\n\\t\\t\\tl.append(a)\\n\\t\\t\\tc=c+1;\\n\\t\\tif b not in l :\\n\\t\\t\\tl.append(b)\\n\\t\\t\\tc=c+1;\\n\\tprint(c)\\n\", \"tc=eval(input())\\nwhile tc:\\n\\ttc-=1\\n\\tE=eval(input())\\n\\tRoads=[]\\n\\tfor i in range(E):\\n\\t\\tX,Y=list(map(int,input().split()))\\n\\t\\tRoads.append(X)\\n\\t\\tRoads.append(Y)\\n\\tprint(len(set(Roads)))\\n\", \"# from collections import defaultdict\\n\\nadj = set()\\n\\nt = int(input())\\nfor _ in range(t):\\n\\te = int(input())\\n\\tfor _x in range(e):\\n\\t\\t(n1, n2) = input().split()\\n\\t\\tadj.add(n1)\\n\\t\\tadj.add(n2)\\n\\tprint(len(adj))\\n\\tadj.clear()\\n\\t\\t\\n\", \"x=int(input())\\nl=list()\\nfor i in range(x):\\n\\tdel l[:]\\n\\te=int(input())\\n\\tc=0\\n\\tfor j in range(e):\\n\\t\\ta , b = list(map(int , input().split()))\\n\\t\\tif a not in l :\\n\\t\\t\\tl.append(a)\\n\\t\\t\\tc=c+1;\\n\\t\\tif b not in l :\\n\\t\\t\\tl.append(b)\\n\\t\\t\\tc=c+1;\\n\\tprint(c)\\n\", \"def solve(xss):\\n\\tcities = set()\\n\\tfor x, y in xss:\\n\\t\\tcities.add(x)\\n\\t\\tcities.add(y)\\n\\treturn len(cities)\\n\\nif __name__ == '__main__':\\n\\tfor _ in range(int(input())):\\n\\t\\tprint(solve([list(map(int, input().split())) for _ in range(int(input()))]))\\n\", \"t = int(input())\\nwhile t > 0:\\n\\td = {}\\n\\tt -= 1\\n\\te = int(input())\\n\\tcount = 0\\n\\twhile e > 0:\\n\\t\\te -= 1\\n\\t\\tl = list(map(int, input().split()))\\n\\t\\tif l[0] not in d:\\n\\t\\t\\tcount += 1\\n\\t\\t\\td[l[0]] = 1\\n\\t\\tif l[1] not in d:\\n\\t\\t\\tcount += 1\\n\\t\\t\\td[l[1]] = 1\\n\\tprint(count)\\n\", \"from collections import defaultdict\\nt = int(input())\\n\\nwhile t>0:\\n\\tgraph_dict=defaultdict(int)\\n\\t \\n\\tE = int(input())\\n\\tfor i in range(E):\\n\\t\\t node1,node2 = [int(x) for x in input().split()]\\n\\t\\t graph_dict[node1]\\n\\t\\t graph_dict[node2]\\n\\tprint(len(list(graph_dict.keys())))\\n\\tt -=1\\n\", \"for i in range(eval(input())):\\n\\ts = set()\\n\\tfor j in range(eval(input())):\\n\\t\\ta,b=input().split()\\n\\t\\ts.add(a)\\n\\t\\ts.add(b)\\n\\tprint(len(s))\\n\\t\\n\", \"test=int(input().strip(\\\" \\\"))\\nwhile(test>0):\\n\\ttest-=1\\n\\tn=int(input().strip(\\\" \\\"))\\n\\tdic={}\\n\\twhile(n>0):\\n\\t\\tn-=1\\n\\t\\tnum1,num2=list(map(int,input().strip(\\\" \\\").split(\\\" \\\")))\\n\\t\\tif(num1 in dic):\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tdic[num1]=1;\\n\\t\\tif(num2 in dic):\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tdic[num2]=1;\\n\\tprint(len(dic))\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"1\\n3\\n1 2\\n2 3\\n1 3\\n\", \"2\\n4\\n1 2\\n2 3\\n3 4\\n4 1\\n3\\n1 4\\n4 1\\n2 3\\n\", \"100\\n5\\n1 8\\n3 5\\n4 1\\n10 8\\n3 6\\n10\\n1 5\\n10 8\\n10 4\\n8 4\\n2 4\\n4 2\\n9 3\\n5 10\\n2 3\\n4 8\\n7\\n1 1\\n7 2\\n8 9\\n8 6\\n9 5\\n8 8\\n10 10\\n4\\n3 6\\n7 10\\n5 8\\n4 10\\n5\\n8 5\\n8 6\\n7 2\\n7 2\\n10 5\\n8\\n8 3\\n7 10\\n6 8\\n2 7\\n4 8\\n10 4\\n7 6\\n4 4\\n4\\n10 5\\n2 7\\n2 1\\n6 3\\n2\\n3 7\\n3 5\\n10\\n7 3\\n9 7\\n4 9\\n6 4\\n6 2\\n10 1\\n4 3\\n7 5\\n7 6\\n4 3\\n2\\n9 4\\n2 9\\n1\\n3 10\\n1\\n6 3\\n7\\n2 9\\n9 10\\n9 1\\n1 3\\n9 10\\n1 4\\n5 8\\n5\\n6 4\\n7 8\\n6 10\\n1 3\\n3 9\\n5\\n3 4\\n7 4\\n1 1\\n9 2\\n3 2\\n4\\n7 8\\n3 6\\n4 10\\n5 7\\n10\\n7 10\\n4 8\\n7 3\\n6 7\\n5 2\\n1 5\\n7 5\\n9 3\\n8 3\\n10 4\\n6\\n7 10\\n8 1\\n5 10\\n5 4\\n10 2\\n7 1\\n9\\n7 6\\n6 7\\n7 6\\n2 5\\n10 8\\n6 4\\n4 4\\n10 6\\n7 10\\n8\\n7 7\\n7 2\\n9 10\\n9 9\\n7 10\\n8 10\\n7 5\\n2 9\\n7\\n5 2\\n8 8\\n5 1\\n10 3\\n4 3\\n4 6\\n6 9\\n8\\n10 7\\n2 8\\n9 2\\n3 9\\n6 7\\n1 9\\n9 9\\n4 8\\n10\\n9 1\\n10 3\\n9 6\\n7 10\\n3 4\\n8 9\\n6 8\\n8 3\\n7 6\\n6 4\\n1\\n7 3\\n9\\n1 2\\n9 10\\n10 2\\n6 4\\n4 1\\n6 1\\n7 7\\n9 7\\n4 6\\n8\\n1 6\\n9 3\\n2 1\\n2 1\\n5 10\\n5 4\\n6 10\\n1 10\\n6\\n9 10\\n9 6\\n3 10\\n5 6\\n4 6\\n4 7\\n2\\n5 6\\n6 1\\n4\\n4 5\\n10 1\\n3 3\\n2 2\\n2\\n4 8\\n3 9\\n5\\n9 6\\n5 2\\n10 10\\n6 2\\n9 2\\n7\\n9 2\\n3 5\\n8 9\\n6 6\\n5 1\\n8 7\\n7 7\\n4\\n8 2\\n2 1\\n7 6\\n2 6\\n2\\n8 7\\n7 9\\n6\\n1 3\\n6 10\\n7 6\\n4 7\\n7 6\\n3 10\\n8\\n4 1\\n9 10\\n4 7\\n8 10\\n2 5\\n8 3\\n8 1\\n1 1\\n4\\n9 7\\n6 5\\n3 4\\n2 2\\n4\\n7 6\\n4 1\\n4 7\\n7 2\\n4\\n3 9\\n10 8\\n8 2\\n8 1\\n7\\n4 2\\n3 1\\n7 4\\n1 2\\n3 2\\n1 1\\n3 6\\n1\\n3 8\\n7\\n7 3\\n8 7\\n6 2\\n10 6\\n6 5\\n8 7\\n7 2\\n9\\n5 7\\n8 5\\n6 8\\n6 8\\n7 10\\n3 7\\n4 4\\n3 3\\n4 4\\n3\\n2 1\\n8 2\\n1 4\\n1\\n7 2\\n10\\n7 7\\n9 10\\n10 2\\n10 6\\n10 6\\n7 8\\n8 6\\n8 3\\n6 6\\n4 9\\n9\\n10 1\\n4 10\\n4 6\\n7 10\\n9 5\\n8 5\\n9 7\\n10 10\\n3 9\\n3\\n8 2\\n7 4\\n6 1\\n7\\n7 9\\n5 9\\n3 3\\n10 3\\n2 9\\n8 8\\n1 4\\n2\\n8 2\\n10 8\\n4\\n10 2\\n6 1\\n5 6\\n10 8\\n1\\n9 3\\n10\\n4 2\\n3 1\\n5 7\\n8 8\\n10 3\\n1 4\\n3 1\\n6 3\\n2 3\\n5 5\\n5\\n2 1\\n5 9\\n8 1\\n5 3\\n6 8\\n4\\n10 6\\n10 1\\n7 5\\n3 6\\n7\\n10 1\\n4 7\\n3 4\\n4 8\\n3 5\\n1 3\\n8 7\\n1\\n8 6\\n9\\n2 2\\n8 3\\n6 6\\n2 2\\n10 2\\n4 8\\n10 8\\n2 9\\n4 2\\n9\\n3 9\\n10 10\\n3 5\\n7 1\\n9 7\\n1 3\\n10 2\\n4 7\\n4 3\\n5\\n8 1\\n7 9\\n3 4\\n10 3\\n4 1\\n6\\n10 1\\n8 6\\n2 2\\n6 10\\n8 9\\n5 8\\n8\\n7 1\\n6 5\\n3 7\\n7 2\\n8 5\\n3 9\\n7 5\\n6 9\\n6\\n2 4\\n8 1\\n4 1\\n5 7\\n6 5\\n2 5\\n9\\n5 10\\n7 6\\n4 5\\n8 3\\n7 6\\n8 4\\n2 5\\n10 6\\n6 1\\n7\\n4 5\\n1 1\\n3 4\\n9 7\\n7 9\\n5 2\\n4 3\\n3\\n4 7\\n9 9\\n7 10\\n10\\n2 7\\n5 3\\n9 1\\n8 1\\n6 3\\n5 3\\n3 10\\n3 6\\n1 10\\n8 8\\n7\\n4 8\\n9 10\\n8 1\\n9 10\\n1 9\\n7 8\\n3 1\\n10\\n7 1\\n1 9\\n1 4\\n10 3\\n1 9\\n9 9\\n7 2\\n7 6\\n7 9\\n4 8\\n8\\n7 1\\n6 9\\n2 4\\n5 6\\n3 3\\n8 5\\n1 8\\n6 2\\n5\\n7 1\\n10 3\\n4 10\\n4 4\\n1 3\\n1\\n5 2\\n1\\n2 4\\n2\\n4 3\\n10 9\\n2\\n8 10\\n9 7\\n3\\n9 6\\n4 3\\n3 7\\n1\\n3 8\\n3\\n6 10\\n1 1\\n6 6\\n8\\n5 6\\n8 7\\n9 8\\n6 9\\n7 6\\n6 6\\n2 3\\n3 9\\n10\\n7 2\\n9 3\\n9 3\\n9 10\\n2 1\\n2 5\\n8 6\\n4 8\\n8 10\\n10 1\\n4\\n5 2\\n3 9\\n8 3\\n2 4\\n8\\n6 9\\n5 2\\n5 10\\n9 5\\n9 2\\n1 10\\n1 7\\n10 8\\n5\\n4 3\\n7 4\\n5 6\\n1 8\\n8 2\\n3\\n1 9\\n6 2\\n9 9\\n9\\n1 4\\n4 4\\n5 6\\n9 10\\n2 4\\n9 9\\n4 10\\n5 5\\n2 4\\n3\\n5 9\\n6 1\\n2 6\\n10\\n9 4\\n3 1\\n8 8\\n4 6\\n8 5\\n1 3\\n8 8\\n8 4\\n9 10\\n7 10\\n4\\n8 1\\n8 9\\n10 5\\n9 6\\n9\\n5 8\\n2 3\\n4 1\\n10 8\\n4 6\\n7 3\\n4 9\\n5 8\\n8 4\\n3\\n10 9\\n9 4\\n9 8\\n1\\n10 2\\n8\\n1 5\\n10 6\\n5 3\\n1 7\\n4 1\\n10 2\\n3 9\\n3 10\\n5\\n10 7\\n9 9\\n5 1\\n7 2\\n7 9\\n5\\n5 4\\n5 5\\n5 4\\n2 10\\n1 3\\n3\\n3 7\\n8 6\\n8 7\\n10\\n8 10\\n9 9\\n9 4\\n4 9\\n6 7\\n1 4\\n1 10\\n10 1\\n2 3\\n1 6\\n8\\n7 7\\n6 9\\n3 3\\n7 10\\n3 3\\n3 10\\n4 8\\n2 3\\n5\\n6 5\\n7 8\\n9 5\\n2 3\\n7 2\\n5\\n5 6\\n7 10\\n8 3\\n3 1\\n6 1\\n10\\n5 9\\n4 5\\n8 5\\n4 2\\n8 5\\n4 3\\n8 4\\n8 4\\n7 6\\n10 7\\n\", \"10\\n10\\n1 7\\n1 1\\n4 3\\n10 9\\n10 6\\n10 1\\n4 1\\n9 3\\n5 8\\n2 3\\n3\\n3 8\\n10 9\\n10 4\\n4\\n6 9\\n9 7\\n6 6\\n5 2\\n4\\n4 9\\n2 10\\n7 3\\n1 1\\n6\\n10 3\\n4 3\\n3 8\\n2 5\\n9 7\\n3 3\\n1\\n10 4\\n2\\n2 3\\n10 6\\n5\\n5 6\\n4 5\\n8 8\\n4 6\\n3 10\\n5\\n6 8\\n4 5\\n6 9\\n4 3\\n1 1\\n2\\n10 2\\n6 7\\n\", \"3\\n3\\n1 1\\n1 1\\n1 1\\n2\\n1 2\\n2 1\\n3\\n1 2\\n4 9\\n18 12\\n\", \"5\\n3\\n2 1\\n2 2\\n4 3\\n2\\n1 2\\n2 3\\n5\\n8 1912\\n123 12\\n242 12\\n12 233\\n8 12\\n1\\n1 2\\n1\\n1 1\\n\", \"100\\n93\\n2 9\\n4 4\\n5 5\\n8 7\\n6 5\\n9 5\\n3 10\\n10 1\\n9 8\\n9 1\\n2 5\\n8 6\\n8 8\\n4 4\\n2 5\\n4 10\\n9 3\\n4 5\\n6 5\\n7 10\\n3 9\\n7 10\\n8 2\\n9 8\\n4 10\\n7 7\\n8 2\\n1 7\\n2 8\\n4 7\\n4 6\\n3 9\\n10 2\\n2 2\\n7 10\\n2 4\\n2 7\\n5 6\\n2 9\\n3 1\\n3 10\\n3 1\\n3 6\\n1 7\\n10 5\\n9 1\\n5 9\\n2 10\\n5 8\\n5 8\\n6 2\\n6 4\\n8 8\\n1 2\\n9 5\\n10 6\\n9 7\\n2 5\\n8 9\\n3 2\\n10 7\\n10 3\\n2 10\\n7 9\\n10 3\\n2 8\\n1 8\\n1 10\\n9 9\\n6 10\\n10 10\\n5 7\\n1 10\\n2 6\\n8 4\\n4 9\\n2 5\\n2 9\\n4 10\\n9 9\\n4 2\\n8 9\\n3 7\\n5 10\\n8 9\\n2 8\\n4 4\\n5 4\\n6 2\\n2 7\\n8 5\\n7 9\\n10 4\\n98\\n5 5\\n2 7\\n8 5\\n7 5\\n2 7\\n2 5\\n10 5\\n7 4\\n3 8\\n6 5\\n6 2\\n6 3\\n6 8\\n6 6\\n8 4\\n10 10\\n1 1\\n10 9\\n7 5\\n3 3\\n9 6\\n2 3\\n8 4\\n3 3\\n1 2\\n2 3\\n6 3\\n6 3\\n2 5\\n2 10\\n6 5\\n2 7\\n10 3\\n5 2\\n1 8\\n10 1\\n5 2\\n5 8\\n3 7\\n9 10\\n10 9\\n10 6\\n10 7\\n2 7\\n8 7\\n10 6\\n1 8\\n10 3\\n7 2\\n7 7\\n9 5\\n3 7\\n10 6\\n8 5\\n7 8\\n5 6\\n9 1\\n4 5\\n2 7\\n2 1\\n9 5\\n10 3\\n5 4\\n4 9\\n9 2\\n7 4\\n8 8\\n8 5\\n2 4\\n8 3\\n9 2\\n10 7\\n3 4\\n6 8\\n10 9\\n1 5\\n6 8\\n10 3\\n2 9\\n10 6\\n1 2\\n8 6\\n4 10\\n1 10\\n2 6\\n9 8\\n6 10\\n8 4\\n1 5\\n9 2\\n1 2\\n2 2\\n9 5\\n1 3\\n7 6\\n8 6\\n6 1\\n2 8\\n95\\n6 7\\n10 5\\n1 2\\n2 5\\n3 2\\n2 5\\n3 4\\n5 6\\n8 7\\n4 3\\n4 4\\n4 1\\n3 10\\n1 2\\n8 6\\n3 9\\n3 2\\n10 1\\n6 9\\n5 10\\n4 5\\n6 1\\n3 5\\n8 3\\n2 2\\n5 9\\n3 2\\n7 7\\n4 6\\n8 6\\n8 10\\n6 5\\n5 4\\n2 4\\n6 3\\n5 6\\n9 8\\n6 3\\n5 6\\n8 4\\n10 7\\n1 3\\n9 1\\n4 8\\n4 1\\n10 6\\n7 6\\n2 2\\n1 7\\n3 8\\n10 7\\n6 6\\n3 6\\n1 9\\n6 10\\n6 1\\n3 1\\n6 3\\n5 4\\n7 3\\n9 10\\n1 2\\n3 8\\n5 8\\n2 1\\n4 4\\n7 8\\n10 10\\n4 10\\n9 1\\n5 1\\n8 4\\n5 5\\n8 1\\n2 10\\n7 6\\n9 7\\n9 6\\n7 10\\n5 8\\n3 7\\n3 4\\n7 10\\n2 4\\n6 4\\n6 4\\n8 10\\n6 1\\n4 6\\n6 5\\n6 9\\n8 10\\n8 10\\n10 8\\n10 5\\n95\\n9 8\\n9 5\\n2 5\\n5 1\\n2 3\\n6 4\\n10 1\\n4 4\\n1 2\\n5 10\\n5 4\\n2 7\\n8 9\\n4 8\\n10 6\\n7 5\\n8 2\\n6 5\\n8 1\\n7 1\\n9 7\\n1 2\\n2 8\\n3 9\\n1 5\\n9 2\\n4 7\\n2 3\\n1 2\\n3 8\\n4 6\\n9 7\\n5 9\\n8 8\\n1 6\\n2 1\\n4 4\\n1 6\\n6 10\\n8 3\\n6 4\\n8 10\\n3 3\\n10 6\\n4 8\\n4 3\\n8 6\\n3 10\\n5 10\\n3 5\\n8 1\\n6 7\\n9 3\\n8 4\\n2 10\\n7 1\\n5 7\\n9 1\\n2 9\\n6 3\\n4 6\\n7 9\\n8 2\\n5 7\\n8 8\\n1 5\\n4 9\\n9 5\\n4 1\\n10 7\\n8 5\\n1 9\\n9 9\\n9 2\\n4 10\\n7 2\\n4 1\\n8 2\\n3 5\\n8 7\\n8 2\\n4 3\\n4 2\\n8 5\\n5 3\\n7 9\\n5 1\\n1 3\\n1 9\\n4 6\\n2 2\\n2 4\\n7 7\\n10 10\\n10 7\\n94\\n4 7\\n2 8\\n2 6\\n10 6\\n9 6\\n6 9\\n6 7\\n1 9\\n5 6\\n9 4\\n9 5\\n3 2\\n5 10\\n1 7\\n2 1\\n6 6\\n5 4\\n3 1\\n5 4\\n4 2\\n7 8\\n9 1\\n10 7\\n4 9\\n10 7\\n5 4\\n3 9\\n1 1\\n10 6\\n7 9\\n4 1\\n6 3\\n8 9\\n4 9\\n9 7\\n5 2\\n2 9\\n9 4\\n9 5\\n3 8\\n5 7\\n7 6\\n8 8\\n2 3\\n9 7\\n4 3\\n3 6\\n10 2\\n6 10\\n6 7\\n6 7\\n1 6\\n9 9\\n6 3\\n1 8\\n3 7\\n8 3\\n4 4\\n3 1\\n10 2\\n3 6\\n10 8\\n1 2\\n8 8\\n7 4\\n9 3\\n10 10\\n5 7\\n2 4\\n5 1\\n8 9\\n10 3\\n4 3\\n2 5\\n8 4\\n6 7\\n10 7\\n9 2\\n9 10\\n7 9\\n5 2\\n10 6\\n3 6\\n2 9\\n6 3\\n2 4\\n5 8\\n9 3\\n9 7\\n9 1\\n5 9\\n7 10\\n9 7\\n2 6\\n66\\n6 3\\n1 9\\n10 6\\n3 3\\n1 2\\n7 10\\n2 5\\n2 3\\n6 2\\n3 4\\n3 6\\n1 5\\n9 6\\n8 1\\n10 8\\n8 2\\n8 7\\n1 5\\n3 2\\n10 7\\n10 8\\n1 10\\n3 4\\n7 6\\n7 5\\n1 1\\n6 9\\n2 3\\n8 5\\n2 1\\n4 3\\n1 5\\n6 10\\n10 6\\n9 3\\n8 10\\n8 2\\n4 10\\n7 8\\n1 7\\n10 4\\n1 2\\n10 7\\n6 3\\n9 10\\n5 4\\n3 7\\n10 3\\n1 4\\n5 3\\n5 2\\n9 1\\n7 9\\n3 3\\n9 3\\n2 2\\n6 4\\n7 1\\n9 7\\n3 2\\n5 10\\n2 1\\n1 5\\n3 3\\n6 2\\n8 3\\n84\\n2 8\\n3 9\\n2 1\\n3 6\\n3 2\\n10 9\\n10 4\\n5 8\\n8 8\\n5 3\\n7 5\\n7 4\\n6 9\\n2 10\\n10 4\\n10 9\\n7 6\\n3 6\\n8 2\\n7 7\\n8 8\\n5 3\\n8 4\\n3 6\\n7 8\\n3 3\\n4 10\\n10 10\\n7 2\\n3 7\\n1 6\\n7 2\\n5 9\\n5 6\\n1 1\\n9 1\\n4 8\\n7 4\\n2 7\\n10 8\\n4 7\\n2 4\\n2 9\\n8 9\\n10 1\\n2 9\\n8 4\\n4 5\\n2 1\\n3 1\\n9 5\\n4 4\\n5 3\\n5 5\\n6 3\\n7 6\\n9 5\\n5 8\\n9 7\\n4 10\\n2 3\\n3 3\\n9 9\\n10 7\\n2 8\\n5 1\\n8 6\\n7 2\\n8 10\\n5 5\\n2 1\\n8 7\\n5 6\\n4 5\\n7 4\\n2 9\\n3 1\\n2 7\\n10 6\\n4 7\\n5 7\\n7 6\\n8 2\\n1 3\\n67\\n7 5\\n8 6\\n1 7\\n2 8\\n1 7\\n3 4\\n8 1\\n6 2\\n2 9\\n5 6\\n1 10\\n6 1\\n6 1\\n9 7\\n5 9\\n4 5\\n3 9\\n3 9\\n4 4\\n9 10\\n1 1\\n10 7\\n5 4\\n3 1\\n3 5\\n10 10\\n4 1\\n7 1\\n9 6\\n10 4\\n4 4\\n3 2\\n10 4\\n6 4\\n2 4\\n5 4\\n1 5\\n3 10\\n7 7\\n8 3\\n8 5\\n5 10\\n2 3\\n10 7\\n9 10\\n5 9\\n7 8\\n4 2\\n10 8\\n5 9\\n8 5\\n7 4\\n5 5\\n1 1\\n8 5\\n3 4\\n6 8\\n5 3\\n10 2\\n1 10\\n4 8\\n7 2\\n3 7\\n4 10\\n6 10\\n1 1\\n6 2\\n97\\n7 9\\n3 1\\n3 9\\n6 4\\n7 7\\n10 5\\n2 6\\n9 8\\n6 7\\n4 4\\n8 6\\n5 6\\n6 8\\n4 2\\n1 1\\n1 5\\n3 2\\n6 1\\n8 1\\n1 8\\n9 6\\n9 4\\n8 1\\n4 7\\n9 7\\n6 1\\n6 2\\n4 3\\n10 2\\n4 3\\n1 9\\n5 1\\n1 6\\n8 5\\n5 3\\n5 4\\n2 8\\n5 2\\n5 6\\n2 2\\n8 5\\n3 9\\n3 3\\n6 5\\n3 10\\n3 3\\n1 1\\n7 5\\n10 4\\n7 3\\n9 8\\n5 8\\n7 2\\n8 7\\n9 5\\n4 2\\n1 7\\n7 9\\n7 6\\n3 4\\n6 2\\n4 6\\n2 7\\n9 9\\n4 2\\n9 4\\n7 8\\n4 10\\n7 1\\n4 8\\n10 4\\n4 8\\n8 7\\n6 9\\n2 3\\n7 8\\n6 8\\n1 2\\n8 10\\n2 5\\n8 2\\n2 7\\n9 10\\n5 3\\n10 8\\n1 10\\n5 10\\n3 2\\n6 4\\n3 10\\n8 5\\n1 1\\n1 4\\n1 8\\n3 8\\n1 9\\n5 3\\n20\\n6 6\\n9 1\\n8 3\\n10 5\\n2 3\\n7 6\\n8 2\\n6 3\\n4 9\\n2 4\\n5 7\\n8 8\\n6 10\\n10 6\\n2 8\\n2 3\\n4 1\\n2 6\\n6 9\\n2 3\\n96\\n2 3\\n2 7\\n10 2\\n4 9\\n10 5\\n1 4\\n9 4\\n5 2\\n2 4\\n7 6\\n3 8\\n4 8\\n8 1\\n5 3\\n5 7\\n2 6\\n2 4\\n6 4\\n2 2\\n8 1\\n8 1\\n10 5\\n4 3\\n4 8\\n6 4\\n1 1\\n9 6\\n4 8\\n5 2\\n8 10\\n4 6\\n9 8\\n4 7\\n5 6\\n8 8\\n2 9\\n6 3\\n1 6\\n8 2\\n3 3\\n4 6\\n4 6\\n4 10\\n5 2\\n9 6\\n4 3\\n9 4\\n6 10\\n5 4\\n7 3\\n6 5\\n6 8\\n8 1\\n10 2\\n6 4\\n5 9\\n5 5\\n2 4\\n2 2\\n1 6\\n6 4\\n5 9\\n5 6\\n9 10\\n10 4\\n6 9\\n4 7\\n1 5\\n8 5\\n5 7\\n5 9\\n5 2\\n6 2\\n10 10\\n10 6\\n5 4\\n10 2\\n10 2\\n7 3\\n6 4\\n1 10\\n2 3\\n1 8\\n5 1\\n10 9\\n4 1\\n5 5\\n3 5\\n10 2\\n5 2\\n9 10\\n9 6\\n1 1\\n8 4\\n2 6\\n8 1\\n67\\n7 8\\n10 3\\n9 4\\n7 4\\n2 1\\n2 3\\n8 4\\n4 8\\n2 6\\n8 5\\n6 10\\n9 4\\n9 10\\n6 6\\n7 3\\n5 1\\n10 4\\n5 9\\n8 8\\n1 9\\n9 6\\n5 1\\n7 5\\n5 10\\n6 2\\n9 6\\n2 3\\n5 8\\n7 5\\n8 7\\n1 2\\n2 6\\n7 10\\n9 5\\n2 1\\n7 6\\n10 8\\n1 6\\n7 3\\n10 2\\n3 5\\n3 4\\n7 4\\n7 8\\n10 9\\n7 9\\n6 8\\n4 3\\n8 4\\n3 3\\n6 5\\n5 3\\n1 10\\n1 8\\n8 9\\n1 9\\n3 5\\n1 6\\n6 9\\n8 10\\n4 8\\n4 1\\n7 8\\n9 4\\n8 5\\n2 7\\n10 5\\n74\\n4 6\\n2 10\\n2 10\\n4 2\\n6 2\\n10 8\\n5 6\\n4 9\\n6 5\\n5 1\\n8 6\\n3 10\\n4 9\\n7 2\\n10 9\\n5 10\\n6 8\\n8 2\\n3 5\\n3 4\\n5 5\\n7 5\\n9 8\\n4 2\\n7 2\\n10 5\\n6 10\\n1 1\\n8 2\\n7 10\\n3 6\\n1 2\\n2 9\\n9 8\\n6 4\\n7 6\\n5 3\\n5 3\\n10 5\\n4 7\\n7 2\\n4 4\\n7 4\\n9 7\\n1 6\\n5 10\\n5 8\\n4 8\\n5 5\\n2 8\\n8 7\\n10 6\\n7 7\\n4 1\\n9 2\\n9 10\\n3 6\\n3 6\\n2 9\\n2 4\\n8 6\\n5 3\\n8 6\\n5 6\\n1 5\\n7 2\\n4 3\\n10 9\\n7 8\\n7 6\\n7 3\\n9 1\\n2 8\\n9 5\\n96\\n1 9\\n1 2\\n10 10\\n3 9\\n2 8\\n2 8\\n1 3\\n2 2\\n9 4\\n8 6\\n6 3\\n5 8\\n9 4\\n6 7\\n5 7\\n2 1\\n7 2\\n7 8\\n8 1\\n1 4\\n2 5\\n5 7\\n9 10\\n9 9\\n6 8\\n1 5\\n3 1\\n10 6\\n5 5\\n6 7\\n5 8\\n9 2\\n6 7\\n4 2\\n3 10\\n10 8\\n3 7\\n6 5\\n1 3\\n10 1\\n4 3\\n1 7\\n8 10\\n1 7\\n2 7\\n1 4\\n8 5\\n3 2\\n10 4\\n6 10\\n1 7\\n1 2\\n10 4\\n3 7\\n2 3\\n9 10\\n3 9\\n2 4\\n3 8\\n4 6\\n2 1\\n1 9\\n6 9\\n5 8\\n9 4\\n4 10\\n3 9\\n10 2\\n2 4\\n4 9\\n5 2\\n3 3\\n1 7\\n1 7\\n10 4\\n9 9\\n5 10\\n4 1\\n7 10\\n9 8\\n2 1\\n9 5\\n1 3\\n2 9\\n7 8\\n6 2\\n4 4\\n1 3\\n8 3\\n1 3\\n7 6\\n2 7\\n2 7\\n3 5\\n6 9\\n3 10\\n8\\n4 4\\n2 7\\n2 1\\n10 6\\n4 9\\n1 3\\n7 5\\n7 3\\n20\\n7 6\\n9 7\\n10 5\\n6 9\\n7 8\\n3 4\\n5 7\\n10 8\\n1 9\\n3 2\\n8 1\\n6 10\\n1 5\\n4 1\\n10 4\\n7 10\\n6 5\\n10 6\\n8 9\\n4 7\\n2\\n2 4\\n5 10\\n91\\n3 3\\n8 2\\n10 9\\n1 2\\n4 8\\n1 2\\n3 5\\n10 4\\n4 2\\n9 4\\n6 2\\n10 5\\n6 5\\n3 6\\n10 10\\n8 8\\n5 6\\n6 5\\n6 9\\n9 2\\n10 6\\n6 6\\n10 4\\n8 1\\n2 1\\n4 5\\n8 4\\n8 3\\n4 7\\n8 5\\n8 9\\n1 10\\n1 9\\n4 8\\n5 5\\n9 3\\n8 4\\n6 8\\n7 10\\n4 10\\n10 3\\n7 6\\n3 1\\n4 5\\n2 7\\n10 3\\n6 4\\n7 8\\n2 5\\n9 6\\n3 3\\n10 4\\n8 3\\n6 3\\n2 9\\n7 2\\n9 1\\n8 10\\n10 10\\n7 5\\n7 8\\n9 10\\n1 10\\n3 4\\n7 1\\n5 9\\n9 5\\n6 7\\n7 3\\n5 4\\n8 6\\n8 1\\n9 5\\n8 1\\n7 6\\n9 2\\n9 3\\n4 1\\n6 6\\n10 4\\n8 9\\n6 10\\n5 8\\n10 10\\n1 3\\n10 4\\n2 4\\n2 5\\n10 7\\n1 6\\n9 9\\n22\\n7 4\\n3 9\\n8 3\\n9 7\\n5 7\\n3 7\\n5 9\\n8 8\\n9 1\\n2 10\\n3 1\\n8 4\\n3 9\\n5 6\\n5 7\\n1 10\\n10 8\\n7 4\\n2 8\\n4 5\\n4 1\\n2 9\\n44\\n9 5\\n6 2\\n7 9\\n6 6\\n2 2\\n4 9\\n1 1\\n10 2\\n10 5\\n3 3\\n6 1\\n8 4\\n9 10\\n7 6\\n9 10\\n9 6\\n3 1\\n2 6\\n10 9\\n9 5\\n8 6\\n6 7\\n7 8\\n6 6\\n2 4\\n10 1\\n3 9\\n2 7\\n9 9\\n7 7\\n3 8\\n5 2\\n5 5\\n9 6\\n2 5\\n5 8\\n9 2\\n9 4\\n1 2\\n7 10\\n7 10\\n7 5\\n3 4\\n9 2\\n57\\n10 4\\n10 1\\n5 2\\n6 8\\n9 9\\n5 5\\n5 4\\n5 4\\n3 8\\n4 6\\n1 3\\n10 2\\n3 5\\n10 5\\n2 6\\n5 6\\n8 4\\n6 4\\n10 9\\n1 6\\n10 8\\n4 8\\n2 2\\n10 3\\n5 3\\n1 6\\n3 8\\n8 5\\n8 10\\n10 3\\n2 5\\n1 1\\n5 8\\n2 3\\n10 8\\n4 2\\n8 5\\n9 10\\n8 3\\n6 5\\n7 1\\n9 1\\n7 7\\n4 4\\n3 3\\n10 8\\n10 10\\n1 8\\n10 1\\n8 7\\n8 4\\n7 2\\n2 8\\n7 10\\n4 2\\n10 10\\n8 2\\n93\\n2 5\\n7 4\\n5 1\\n3 10\\n9 3\\n2 2\\n4 9\\n1 10\\n5 6\\n9 7\\n4 8\\n5 2\\n9 8\\n4 2\\n4 2\\n5 5\\n9 5\\n1 7\\n9 7\\n4 3\\n10 1\\n7 6\\n6 2\\n8 3\\n2 7\\n3 3\\n4 10\\n9 7\\n2 1\\n7 6\\n7 7\\n7 4\\n4 5\\n5 6\\n8 8\\n6 7\\n7 1\\n6 10\\n6 2\\n10 10\\n6 10\\n9 9\\n4 1\\n7 3\\n1 6\\n10 2\\n5 3\\n5 3\\n3 5\\n6 8\\n3 3\\n10 7\\n8 8\\n7 7\\n10 9\\n2 9\\n3 1\\n3 7\\n6 5\\n9 2\\n10 7\\n10 8\\n2 8\\n8 5\\n7 1\\n6 4\\n6 5\\n10 9\\n9 4\\n4 4\\n6 9\\n10 10\\n1 2\\n8 3\\n4 8\\n1 5\\n9 6\\n6 6\\n6 8\\n7 8\\n5 3\\n1 1\\n10 1\\n2 5\\n6 4\\n10 8\\n5 5\\n1 3\\n7 9\\n1 3\\n7 10\\n10 9\\n6 2\\n29\\n8 10\\n10 9\\n10 4\\n2 10\\n4 5\\n10 2\\n5 6\\n6 9\\n9 3\\n3 4\\n10 9\\n3 6\\n1 1\\n7 1\\n3 7\\n1 4\\n2 7\\n1 2\\n10 1\\n2 7\\n2 9\\n4 3\\n1 3\\n4 1\\n10 4\\n8 10\\n5 1\\n9 3\\n6 2\\n95\\n10 10\\n6 6\\n9 10\\n4 1\\n8 6\\n10 2\\n5 2\\n3 8\\n1 5\\n8 9\\n3 5\\n7 9\\n3 9\\n9 4\\n7 6\\n9 3\\n9 6\\n10 10\\n10 1\\n8 7\\n7 10\\n6 1\\n9 7\\n1 1\\n7 1\\n8 8\\n4 2\\n7 3\\n10 6\\n8 3\\n1 6\\n3 10\\n8 10\\n1 10\\n2 6\\n8 2\\n10 2\\n10 6\\n9 7\\n8 7\\n1 2\\n10 8\\n9 5\\n8 10\\n2 8\\n9 10\\n10 8\\n4 4\\n2 6\\n5 9\\n2 9\\n1 8\\n10 1\\n5 4\\n10 10\\n3 9\\n10 4\\n7 4\\n6 9\\n3 8\\n1 10\\n7 3\\n9 7\\n6 10\\n4 9\\n8 10\\n5 10\\n5 7\\n9 5\\n9 3\\n5 1\\n7 6\\n7 10\\n5 2\\n10 7\\n9 3\\n2 5\\n3 3\\n9 6\\n5 2\\n1 9\\n4 2\\n1 2\\n6 1\\n4 4\\n8 7\\n3 4\\n4 3\\n4 2\\n7 2\\n10 2\\n2 6\\n2 4\\n6 5\\n3 6\\n29\\n9 9\\n2 6\\n2 3\\n5 8\\n3 6\\n10 9\\n7 6\\n3 7\\n3 4\\n7 10\\n4 8\\n5 9\\n9 5\\n8 6\\n5 6\\n6 1\\n10 3\\n8 2\\n1 7\\n4 7\\n5 7\\n3 10\\n7 4\\n2 8\\n8 8\\n5 4\\n8 6\\n3 4\\n5 6\\n48\\n3 2\\n9 1\\n4 7\\n8 3\\n3 10\\n10 10\\n9 5\\n8 1\\n3 3\\n6 10\\n9 6\\n8 5\\n1 10\\n6 5\\n2 5\\n5 6\\n2 3\\n6 1\\n7 5\\n7 10\\n2 9\\n6 9\\n1 5\\n8 3\\n7 2\\n8 2\\n5 10\\n10 3\\n8 10\\n1 5\\n8 2\\n8 5\\n5 3\\n8 9\\n5 4\\n3 2\\n8 1\\n1 10\\n7 8\\n7 10\\n9 2\\n4 8\\n3 7\\n1 9\\n2 1\\n2 2\\n5 4\\n5 7\\n78\\n9 7\\n2 3\\n6 3\\n5 6\\n1 2\\n7 5\\n9 9\\n9 8\\n5 8\\n7 6\\n3 2\\n10 8\\n4 8\\n3 3\\n2 10\\n9 7\\n6 4\\n3 7\\n10 3\\n4 8\\n1 4\\n1 7\\n8 1\\n10 1\\n2 9\\n2 8\\n1 7\\n7 2\\n10 3\\n6 3\\n8 9\\n9 10\\n5 5\\n10 3\\n3 2\\n8 10\\n8 4\\n1 3\\n10 6\\n1 2\\n8 6\\n2 1\\n1 6\\n5 3\\n9 10\\n5 10\\n10 6\\n2 1\\n2 10\\n5 3\\n7 5\\n8 8\\n1 6\\n4 9\\n3 10\\n9 10\\n8 7\\n7 8\\n7 10\\n6 2\\n3 6\\n9 8\\n9 10\\n6 7\\n10 10\\n7 8\\n4 1\\n10 3\\n7 9\\n4 4\\n1 6\\n10 5\\n7 5\\n1 9\\n2 4\\n5 4\\n4 2\\n4 4\\n62\\n4 1\\n4 9\\n5 3\\n2 9\\n4 4\\n9 1\\n7 1\\n1 8\\n1 2\\n4 9\\n6 9\\n3 4\\n8 3\\n3 5\\n8 8\\n1 5\\n5 1\\n3 10\\n1 7\\n2 2\\n10 4\\n10 10\\n8 9\\n1 6\\n3 7\\n2 4\\n2 4\\n5 4\\n3 2\\n5 5\\n6 3\\n4 6\\n1 10\\n4 9\\n3 7\\n3 8\\n2 9\\n2 5\\n9 9\\n1 10\\n6 4\\n8 7\\n7 4\\n3 6\\n10 2\\n10 5\\n2 8\\n9 9\\n3 7\\n3 7\\n5 6\\n8 9\\n4 1\\n6 9\\n5 8\\n1 4\\n4 1\\n5 1\\n5 9\\n4 9\\n3 1\\n7 7\\n61\\n7 1\\n6 5\\n1 4\\n5 6\\n5 10\\n1 2\\n3 7\\n1 2\\n1 10\\n10 3\\n7 2\\n3 2\\n6 3\\n1 9\\n9 9\\n8 10\\n9 1\\n1 5\\n8 9\\n4 3\\n2 8\\n2 5\\n3 10\\n8 7\\n7 1\\n6 10\\n10 6\\n2 2\\n10 4\\n1 8\\n2 7\\n1 6\\n3 9\\n1 5\\n6 7\\n7 3\\n1 4\\n1 8\\n3 4\\n8 6\\n10 1\\n4 10\\n7 8\\n5 7\\n4 2\\n10 2\\n8 3\\n9 8\\n3 5\\n6 1\\n3 2\\n9 5\\n2 9\\n3 2\\n1 10\\n5 1\\n7 3\\n3 6\\n4 9\\n2 7\\n10 1\\n22\\n2 7\\n9 8\\n1 7\\n5 8\\n1 6\\n3 5\\n2 4\\n4 1\\n7 9\\n9 9\\n2 1\\n10 1\\n4 8\\n6 4\\n5 9\\n9 2\\n5 10\\n7 6\\n5 6\\n10 2\\n9 3\\n3 2\\n36\\n9 6\\n9 6\\n5 9\\n8 6\\n10 10\\n6 10\\n8 9\\n8 8\\n8 8\\n7 6\\n9 9\\n8 6\\n8 5\\n4 10\\n1 7\\n9 5\\n8 4\\n7 8\\n6 4\\n1 8\\n10 5\\n1 4\\n2 5\\n2 4\\n10 10\\n6 9\\n10 4\\n6 5\\n10 7\\n2 5\\n4 6\\n4 9\\n8 5\\n10 5\\n2 1\\n2 9\\n70\\n6 4\\n10 10\\n8 4\\n1 2\\n10 2\\n6 7\\n9 8\\n9 9\\n2 4\\n9 3\\n3 1\\n6 7\\n6 1\\n4 4\\n8 3\\n7 6\\n10 1\\n6 6\\n6 10\\n4 8\\n5 5\\n4 9\\n3 3\\n8 5\\n2 6\\n9 6\\n3 1\\n7 8\\n9 8\\n1 10\\n6 3\\n9 7\\n7 5\\n6 7\\n3 2\\n3 6\\n9 10\\n3 9\\n2 10\\n6 5\\n8 2\\n6 4\\n5 10\\n5 8\\n8 3\\n8 4\\n6 8\\n6 10\\n8 8\\n8 5\\n2 5\\n4 9\\n8 9\\n6 1\\n8 5\\n9 5\\n5 2\\n6 4\\n6 2\\n5 6\\n4 3\\n2 5\\n7 10\\n5 3\\n6 4\\n2 2\\n7 8\\n4 4\\n2 2\\n8 4\\n95\\n10 5\\n9 1\\n9 7\\n1 4\\n2 8\\n5 9\\n10 2\\n6 8\\n4 9\\n3 4\\n8 9\\n3 7\\n8 6\\n3 9\\n10 9\\n10 10\\n5 5\\n2 7\\n3 10\\n7 4\\n7 1\\n5 5\\n5 10\\n4 5\\n3 2\\n10 7\\n4 2\\n10 5\\n7 9\\n5 4\\n4 5\\n10 10\\n10 8\\n1 5\\n7 8\\n1 10\\n2 3\\n6 2\\n8 9\\n10 5\\n6 7\\n6 5\\n5 7\\n2 7\\n5 7\\n8 2\\n10 8\\n3 3\\n4 9\\n9 5\\n7 10\\n5 4\\n3 8\\n6 8\\n2 4\\n1 9\\n5 10\\n4 10\\n2 8\\n9 1\\n5 5\\n3 2\\n1 8\\n1 6\\n10 4\\n5 8\\n6 5\\n1 4\\n1 5\\n6 1\\n7 1\\n6 10\\n1 1\\n3 7\\n8 3\\n4 5\\n10 8\\n1 7\\n2 4\\n4 8\\n2 8\\n3 9\\n1 3\\n2 5\\n10 5\\n9 6\\n7 9\\n3 3\\n9 5\\n2 4\\n4 6\\n10 2\\n3 5\\n8 3\\n9 1\\n67\\n3 6\\n5 1\\n7 10\\n2 2\\n4 8\\n6 1\\n2 1\\n7 1\\n10 1\\n5 5\\n1 7\\n1 6\\n9 9\\n2 9\\n8 9\\n3 9\\n8 2\\n5 10\\n3 8\\n9 3\\n7 3\\n2 1\\n7 3\\n9 8\\n10 8\\n2 5\\n1 6\\n1 3\\n2 3\\n7 6\\n6 4\\n10 7\\n8 8\\n10 2\\n3 2\\n1 9\\n6 8\\n7 4\\n3 4\\n6 2\\n7 2\\n8 4\\n5 1\\n3 3\\n6 1\\n4 8\\n4 1\\n5 1\\n8 10\\n3 1\\n8 8\\n6 1\\n1 9\\n7 1\\n2 3\\n7 9\\n1 9\\n10 3\\n5 9\\n4 9\\n3 10\\n7 2\\n9 3\\n2 4\\n7 5\\n8 8\\n9 1\\n53\\n10 7\\n10 2\\n10 10\\n10 2\\n2 3\\n10 2\\n6 7\\n7 9\\n4 9\\n8 1\\n3 10\\n5 5\\n10 5\\n2 4\\n3 3\\n8 8\\n1 1\\n6 6\\n1 10\\n8 8\\n8 2\\n4 9\\n7 9\\n3 8\\n10 4\\n1 6\\n4 6\\n5 3\\n6 3\\n9 8\\n8 8\\n2 10\\n5 10\\n6 4\\n10 9\\n9 1\\n10 4\\n2 6\\n8 8\\n6 9\\n8 10\\n8 8\\n5 9\\n10 8\\n2 7\\n7 2\\n7 10\\n1 9\\n6 4\\n2 10\\n1 10\\n6 8\\n8 7\\n37\\n10 5\\n8 10\\n9 1\\n6 1\\n7 1\\n6 10\\n9 1\\n5 3\\n7 8\\n3 5\\n10 9\\n4 6\\n4 10\\n5 8\\n9 5\\n3 2\\n6 5\\n6 9\\n1 7\\n8 6\\n8 6\\n8 1\\n2 2\\n1 5\\n4 5\\n5 9\\n3 4\\n8 4\\n8 1\\n4 9\\n10 3\\n3 8\\n3 8\\n4 8\\n7 2\\n5 1\\n9 3\\n17\\n4 5\\n8 7\\n4 2\\n2 8\\n8 8\\n4 9\\n10 2\\n6 5\\n2 7\\n3 5\\n10 4\\n2 4\\n1 3\\n8 4\\n1 8\\n5 3\\n2 7\\n10\\n8 10\\n3 3\\n2 2\\n9 2\\n10 6\\n4 7\\n3 2\\n7 3\\n2 7\\n10 10\\n71\\n5 10\\n1 5\\n8 3\\n7 4\\n9 3\\n1 3\\n6 10\\n4 10\\n2 2\\n10 3\\n8 3\\n1 8\\n5 8\\n1 1\\n1 2\\n1 9\\n4 8\\n5 8\\n1 3\\n1 8\\n10 1\\n10 2\\n2 9\\n5 3\\n3 10\\n3 5\\n10 5\\n10 1\\n8 4\\n5 3\\n5 2\\n7 3\\n9 8\\n4 4\\n10 9\\n9 3\\n2 10\\n9 5\\n7 8\\n2 5\\n3 3\\n7 2\\n1 8\\n5 2\\n8 5\\n6 3\\n1 8\\n7 1\\n5 9\\n3 4\\n10 9\\n5 7\\n7 5\\n8 8\\n8 3\\n6 2\\n1 7\\n9 4\\n1 9\\n2 2\\n1 1\\n10 1\\n3 9\\n6 7\\n8 10\\n7 7\\n9 1\\n3 3\\n8 7\\n1 6\\n8 6\\n34\\n10 7\\n7 9\\n1 10\\n7 4\\n5 10\\n4 1\\n1 8\\n9 8\\n9 7\\n2 9\\n1 4\\n8 8\\n5 5\\n1 6\\n1 6\\n2 7\\n6 10\\n6 2\\n8 3\\n4 4\\n6 2\\n4 8\\n2 8\\n2 7\\n9 2\\n10 1\\n4 2\\n7 2\\n8 6\\n10 3\\n7 1\\n8 6\\n10 3\\n5 4\\n2\\n8 1\\n9 9\\n69\\n7 4\\n10 2\\n6 4\\n7 10\\n9 7\\n8 6\\n3 10\\n8 6\\n8 8\\n1 4\\n6 8\\n5 7\\n5 5\\n1 4\\n1 9\\n1 10\\n2 10\\n6 4\\n6 2\\n2 10\\n9 8\\n1 10\\n1 5\\n6 7\\n10 7\\n2 3\\n2 8\\n7 4\\n8 3\\n9 9\\n6 5\\n6 3\\n5 5\\n7 5\\n9 9\\n4 6\\n3 2\\n9 2\\n10 1\\n4 6\\n8 9\\n2 7\\n8 9\\n7 10\\n10 4\\n10 8\\n1 4\\n7 1\\n7 1\\n3 2\\n10 10\\n5 2\\n2 5\\n1 7\\n4 3\\n6 9\\n6 6\\n4 10\\n7 4\\n6 6\\n3 2\\n9 4\\n1 3\\n9 4\\n8 4\\n8 4\\n3 2\\n8 2\\n5 2\\n21\\n8 7\\n4 10\\n1 10\\n1 3\\n7 10\\n9 7\\n5 6\\n2 5\\n10 9\\n5 8\\n1 9\\n4 5\\n2 9\\n5 5\\n7 2\\n9 4\\n1 3\\n10 4\\n9 10\\n3 1\\n1 6\\n50\\n1 6\\n4 3\\n3 9\\n4 3\\n6 2\\n8 10\\n7 8\\n2 9\\n6 2\\n9 10\\n5 6\\n6 5\\n9 8\\n9 9\\n4 2\\n6 9\\n1 5\\n9 7\\n3 1\\n7 4\\n10 7\\n6 3\\n9 9\\n2 3\\n6 8\\n1 3\\n9 6\\n10 7\\n6 8\\n10 6\\n4 7\\n9 5\\n2 2\\n1 10\\n2 7\\n8 2\\n6 1\\n6 9\\n9 8\\n5 6\\n10 9\\n7 7\\n6 7\\n9 8\\n1 4\\n4 8\\n3 4\\n8 2\\n2 1\\n2 8\\n48\\n5 3\\n9 5\\n8 4\\n5 2\\n10 6\\n1 8\\n10 1\\n4 9\\n2 3\\n4 3\\n5 9\\n7 2\\n5 6\\n2 4\\n10 5\\n5 1\\n6 10\\n7 6\\n7 6\\n5 2\\n9 3\\n3 2\\n10 9\\n3 9\\n2 9\\n3 2\\n1 5\\n7 8\\n8 5\\n4 1\\n5 3\\n1 8\\n7 3\\n1 2\\n8 3\\n4 6\\n1 1\\n1 10\\n5 1\\n8 1\\n3 2\\n5 10\\n1 10\\n8 9\\n3 7\\n8 9\\n8 7\\n6 3\\n37\\n8 4\\n9 2\\n6 5\\n8 7\\n7 4\\n3 7\\n1 2\\n3 9\\n9 9\\n5 4\\n9 1\\n6 2\\n2 3\\n10 7\\n10 10\\n4 2\\n6 8\\n6 6\\n1 1\\n10 2\\n10 6\\n5 3\\n2 1\\n4 8\\n7 5\\n8 6\\n3 10\\n1 9\\n6 8\\n4 7\\n6 5\\n4 4\\n1 2\\n7 10\\n5 2\\n4 6\\n10 9\\n85\\n6 4\\n8 8\\n7 5\\n3 9\\n8 8\\n1 5\\n7 10\\n1 7\\n10 10\\n2 7\\n9 9\\n6 8\\n5 8\\n3 6\\n3 4\\n2 5\\n6 3\\n2 5\\n6 2\\n7 3\\n10 8\\n5 7\\n6 8\\n3 10\\n10 5\\n10 1\\n8 9\\n3 5\\n4 4\\n10 2\\n3 8\\n8 8\\n6 7\\n8 8\\n10 8\\n4 4\\n4 1\\n7 7\\n3 10\\n3 5\\n3 6\\n1 10\\n10 5\\n7 6\\n2 10\\n5 2\\n5 4\\n8 5\\n5 8\\n3 10\\n5 8\\n1 1\\n9 9\\n7 9\\n2 8\\n1 5\\n5 2\\n8 3\\n4 1\\n6 10\\n8 1\\n10 2\\n2 8\\n7 8\\n2 6\\n8 3\\n5 2\\n4 6\\n5 7\\n9 8\\n3 8\\n9 2\\n4 7\\n5 2\\n6 8\\n9 2\\n1 10\\n10 7\\n9 5\\n2 7\\n2 5\\n4 4\\n4 2\\n9 5\\n6 6\\n18\\n2 1\\n3 6\\n8 10\\n8 7\\n9 1\\n9 1\\n1 4\\n1 8\\n6 10\\n9 6\\n7 4\\n10 5\\n8 5\\n10 8\\n2 10\\n2 6\\n3 7\\n9 5\\n81\\n4 1\\n1 1\\n9 5\\n4 5\\n5 7\\n1 10\\n6 1\\n1 7\\n3 9\\n9 1\\n7 8\\n3 4\\n3 10\\n9 7\\n3 5\\n7 6\\n1 6\\n3 2\\n3 9\\n6 10\\n4 8\\n2 3\\n2 1\\n6 5\\n2 5\\n1 5\\n8 7\\n4 8\\n4 9\\n10 3\\n9 7\\n5 4\\n4 5\\n4 5\\n9 1\\n4 10\\n7 2\\n2 1\\n1 10\\n4 10\\n8 10\\n4 1\\n1 6\\n9 8\\n10 5\\n10 7\\n10 6\\n10 3\\n2 6\\n5 3\\n7 5\\n4 8\\n1 3\\n8 7\\n2 6\\n10 4\\n7 4\\n6 8\\n3 10\\n6 2\\n3 8\\n4 7\\n10 9\\n4 2\\n9 4\\n5 5\\n3 3\\n9 1\\n10 8\\n9 6\\n3 4\\n1 5\\n9 6\\n1 6\\n6 3\\n3 3\\n5 10\\n10 8\\n2 2\\n4 10\\n2 5\\n48\\n5 1\\n7 5\\n9 9\\n3 1\\n3 1\\n7 3\\n2 6\\n8 1\\n7 7\\n4 5\\n1 9\\n7 10\\n9 1\\n8 3\\n5 2\\n4 6\\n6 5\\n10 8\\n2 9\\n7 2\\n9 1\\n1 6\\n8 6\\n2 1\\n8 6\\n1 2\\n8 7\\n5 5\\n4 10\\n10 5\\n9 8\\n10 10\\n1 3\\n3 6\\n4 8\\n7 2\\n6 1\\n8 8\\n2 2\\n3 7\\n3 9\\n3 10\\n7 8\\n4 4\\n2 7\\n9 8\\n8 3\\n2 6\\n67\\n7 6\\n3 3\\n4 9\\n7 2\\n1 9\\n9 1\\n6 2\\n4 8\\n3 1\\n7 7\\n7 3\\n9 2\\n5 6\\n7 9\\n3 9\\n7 7\\n4 8\\n10 1\\n9 3\\n2 9\\n1 7\\n4 5\\n8 6\\n8 8\\n1 2\\n10 1\\n1 5\\n5 4\\n7 5\\n3 1\\n1 4\\n10 6\\n10 10\\n4 8\\n6 9\\n8 6\\n5 9\\n1 10\\n1 2\\n2 2\\n5 10\\n4 8\\n9 2\\n8 7\\n6 3\\n2 1\\n1 4\\n10 10\\n5 6\\n9 8\\n2 10\\n5 1\\n4 5\\n5 3\\n2 7\\n3 3\\n9 10\\n6 5\\n3 5\\n9 8\\n10 7\\n5 7\\n5 3\\n5 5\\n6 8\\n1 8\\n6 1\\n50\\n7 8\\n4 4\\n1 10\\n8 1\\n2 2\\n10 3\\n2 5\\n7 10\\n4 7\\n4 1\\n1 10\\n1 7\\n7 6\\n10 8\\n8 4\\n4 6\\n4 3\\n8 10\\n7 1\\n3 3\\n3 1\\n6 3\\n7 9\\n9 7\\n1 1\\n10 7\\n10 9\\n9 1\\n7 1\\n9 1\\n10 9\\n4 6\\n1 6\\n6 6\\n8 7\\n2 10\\n9 8\\n7 5\\n2 10\\n6 9\\n2 2\\n1 2\\n10 7\\n7 5\\n2 5\\n7 4\\n2 5\\n9 5\\n7 4\\n2 1\\n23\\n8 4\\n1 7\\n7 3\\n10 9\\n1 7\\n2 10\\n5 10\\n3 10\\n3 2\\n8 3\\n9 2\\n7 8\\n4 3\\n2 2\\n10 3\\n8 3\\n7 10\\n9 4\\n10 9\\n3 3\\n5 9\\n4 5\\n9 8\\n93\\n6 10\\n4 9\\n3 8\\n3 7\\n4 3\\n8 1\\n9 1\\n4 3\\n10 8\\n2 8\\n9 9\\n2 2\\n2 8\\n8 9\\n1 7\\n2 9\\n8 9\\n1 4\\n7 4\\n9 6\\n10 1\\n2 7\\n9 2\\n7 5\\n10 5\\n5 9\\n5 2\\n7 2\\n2 10\\n5 9\\n6 9\\n8 3\\n5 1\\n10 4\\n2 3\\n3 8\\n1 8\\n3 6\\n7 3\\n10 6\\n1 10\\n5 6\\n9 1\\n1 1\\n2 9\\n3 7\\n4 8\\n3 4\\n6 4\\n9 7\\n1 9\\n5 1\\n1 7\\n3 6\\n9 8\\n6 4\\n1 9\\n10 7\\n3 7\\n1 1\\n7 1\\n10 8\\n9 5\\n6 7\\n3 2\\n9 4\\n3 1\\n1 8\\n4 2\\n3 4\\n10 2\\n2 10\\n6 1\\n1 8\\n6 8\\n9 3\\n1 9\\n2 4\\n6 4\\n4 4\\n1 5\\n5 7\\n10 1\\n2 5\\n7 5\\n5 2\\n1 6\\n2 8\\n8 1\\n7 4\\n3 8\\n2 3\\n9 1\\n4\\n2 9\\n9 6\\n7 1\\n9 2\\n44\\n2 7\\n7 7\\n3 7\\n6 2\\n6 7\\n8 5\\n5 9\\n10 4\\n6 6\\n6 3\\n8 2\\n8 5\\n7 1\\n6 5\\n6 1\\n3 1\\n7 8\\n1 1\\n2 1\\n8 2\\n5 1\\n3 9\\n8 7\\n4 5\\n10 6\\n8 9\\n8 9\\n4 9\\n3 7\\n5 2\\n4 2\\n10 6\\n7 6\\n6 3\\n7 8\\n6 9\\n1 8\\n7 1\\n3 7\\n4 6\\n6 7\\n6 10\\n3 6\\n6 7\\n40\\n8 6\\n9 7\\n5 2\\n5 9\\n5 4\\n7 8\\n8 1\\n9 2\\n3 10\\n9 9\\n8 9\\n10 3\\n2 10\\n3 10\\n4 5\\n6 5\\n5 8\\n10 9\\n5 9\\n3 8\\n5 1\\n3 2\\n3 1\\n6 2\\n4 8\\n7 2\\n9 2\\n7 6\\n2 2\\n3 6\\n5 1\\n10 4\\n5 6\\n6 7\\n7 7\\n7 2\\n5 3\\n1 8\\n6 7\\n6 5\\n18\\n10 9\\n10 5\\n7 5\\n6 3\\n8 7\\n2 9\\n6 3\\n1 6\\n1 1\\n8 9\\n8 8\\n4 8\\n1 5\\n7 6\\n5 5\\n10 5\\n3 8\\n2 4\\n19\\n10 4\\n10 2\\n8 6\\n1 2\\n9 7\\n6 9\\n6 10\\n9 6\\n9 2\\n8 2\\n9 3\\n7 9\\n5 1\\n9 5\\n6 4\\n9 5\\n2 10\\n9 10\\n4 2\\n8\\n8 4\\n7 1\\n5 3\\n6 1\\n10 8\\n1 1\\n8 7\\n8 8\\n55\\n2 4\\n3 1\\n6 4\\n2 8\\n8 3\\n3 2\\n5 7\\n8 8\\n5 9\\n9 2\\n10 10\\n7 1\\n10 6\\n4 4\\n4 10\\n4 10\\n8 8\\n1 5\\n5 4\\n4 6\\n3 9\\n7 5\\n4 4\\n8 3\\n2 4\\n7 2\\n5 10\\n10 6\\n10 3\\n10 2\\n5 10\\n4 5\\n9 9\\n1 6\\n9 8\\n4 3\\n5 8\\n4 9\\n4 10\\n6 5\\n3 5\\n10 4\\n5 9\\n6 2\\n6 3\\n6 6\\n2 2\\n7 7\\n8 5\\n7 3\\n5 1\\n6 4\\n9 6\\n1 5\\n6 2\\n50\\n6 7\\n6 4\\n1 5\\n5 4\\n8 3\\n9 2\\n1 3\\n8 10\\n7 6\\n5 10\\n4 7\\n4 6\\n7 5\\n6 3\\n5 6\\n4 2\\n1 6\\n6 7\\n3 6\\n6 6\\n4 6\\n4 5\\n10 8\\n7 2\\n9 7\\n8 10\\n1 10\\n2 8\\n6 4\\n4 10\\n5 10\\n7 5\\n2 4\\n4 2\\n5 5\\n9 1\\n8 8\\n1 10\\n10 10\\n7 3\\n9 5\\n10 6\\n7 4\\n5 9\\n5 8\\n10 5\\n8 1\\n10 9\\n2 1\\n3 10\\n76\\n7 5\\n4 1\\n10 6\\n2 8\\n8 3\\n1 8\\n2 10\\n2 9\\n4 4\\n8 5\\n4 5\\n7 7\\n5 4\\n9 3\\n10 7\\n5 2\\n3 9\\n4 10\\n9 10\\n8 9\\n5 6\\n2 6\\n4 1\\n8 4\\n9 3\\n4 4\\n8 9\\n3 3\\n3 4\\n4 7\\n1 9\\n3 10\\n1 6\\n3 1\\n6 2\\n5 1\\n7 3\\n4 7\\n9 2\\n4 6\\n3 7\\n7 3\\n5 8\\n7 2\\n8 7\\n9 3\\n2 1\\n8 2\\n5 1\\n5 5\\n10 2\\n1 5\\n10 6\\n7 6\\n3 4\\n5 2\\n9 1\\n6 7\\n10 9\\n3 7\\n7 7\\n2 7\\n5 3\\n5 1\\n7 9\\n8 10\\n4 4\\n10 2\\n9 10\\n2 5\\n9 3\\n9 2\\n2 10\\n3 5\\n4 5\\n10 10\\n99\\n6 9\\n4 1\\n1 4\\n5 4\\n4 9\\n9 7\\n10 4\\n9 4\\n2 5\\n3 10\\n6 3\\n4 8\\n1 7\\n4 7\\n7 6\\n3 9\\n2 7\\n9 7\\n9 1\\n10 8\\n2 7\\n4 2\\n1 2\\n9 6\\n7 9\\n6 2\\n8 10\\n3 2\\n1 1\\n8 4\\n2 1\\n4 1\\n3 2\\n4 9\\n1 5\\n5 5\\n9 10\\n3 3\\n8 5\\n7 4\\n3 9\\n3 3\\n2 2\\n9 2\\n8 5\\n4 5\\n10 5\\n1 4\\n7 9\\n9 5\\n9 5\\n10 6\\n10 7\\n10 2\\n2 6\\n3 2\\n6 4\\n3 4\\n6 4\\n1 7\\n8 2\\n2 3\\n10 3\\n3 8\\n4 3\\n7 1\\n2 10\\n8 8\\n5 6\\n5 8\\n10 2\\n1 10\\n6 7\\n5 10\\n4 9\\n7 4\\n5 10\\n5 9\\n4 7\\n6 10\\n8 1\\n7 10\\n3 1\\n9 2\\n1 4\\n1 1\\n9 7\\n3 1\\n10 2\\n10 1\\n7 4\\n10 4\\n5 6\\n8 4\\n5 2\\n6 10\\n4 8\\n4 5\\n9 8\\n46\\n10 5\\n3 5\\n8 9\\n10 2\\n7 8\\n2 1\\n8 1\\n2 7\\n7 4\\n2 1\\n3 5\\n7 1\\n8 7\\n2 3\\n8 1\\n2 10\\n6 7\\n3 4\\n5 9\\n7 8\\n7 8\\n10 6\\n1 2\\n6 2\\n5 5\\n6 6\\n1 5\\n6 6\\n2 3\\n2 1\\n5 10\\n5 9\\n7 4\\n7 4\\n5 3\\n3 1\\n8 6\\n7 2\\n8 3\\n2 4\\n9 6\\n2 4\\n6 9\\n9 1\\n5 2\\n8 1\\n88\\n10 5\\n7 1\\n8 2\\n3 1\\n10 4\\n10 2\\n2 3\\n4 3\\n10 1\\n10 10\\n7 9\\n2 2\\n10 10\\n1 6\\n10 8\\n9 3\\n10 1\\n1 3\\n10 6\\n8 8\\n7 2\\n8 10\\n9 8\\n6 6\\n4 3\\n10 3\\n1 7\\n3 9\\n7 3\\n10 5\\n7 8\\n8 6\\n2 7\\n9 6\\n5 1\\n7 6\\n2 3\\n5 1\\n8 9\\n8 5\\n8 5\\n8 9\\n7 1\\n2 10\\n10 9\\n7 1\\n10 8\\n3 10\\n6 6\\n4 10\\n10 10\\n7 8\\n2 1\\n6 1\\n8 4\\n4 8\\n3 10\\n8 1\\n6 9\\n3 2\\n6 6\\n10 3\\n6 3\\n2 9\\n3 4\\n8 1\\n10 6\\n4 7\\n1 2\\n5 7\\n6 3\\n2 9\\n8 1\\n9 4\\n2 3\\n4 10\\n4 7\\n3 9\\n7 10\\n6 2\\n6 10\\n3 8\\n6 10\\n4 7\\n4 4\\n9 7\\n2 8\\n1 2\\n15\\n8 5\\n2 10\\n5 1\\n1 10\\n4 2\\n6 10\\n7 7\\n9 8\\n7 5\\n7 4\\n10 1\\n6 10\\n9 9\\n7 1\\n8 9\\n22\\n8 1\\n10 1\\n4 8\\n1 3\\n7 5\\n5 8\\n10 2\\n10 2\\n7 3\\n6 5\\n5 1\\n4 6\\n5 6\\n1 10\\n3 7\\n2 8\\n5 7\\n1 6\\n8 5\\n4 9\\n10 4\\n7 5\\n37\\n6 10\\n4 7\\n8 9\\n5 10\\n2 9\\n8 8\\n5 5\\n5 2\\n2 7\\n8 4\\n3 5\\n1 10\\n9 1\\n3 10\\n9 8\\n10 10\\n6 3\\n5 9\\n1 8\\n8 2\\n3 3\\n7 7\\n4 3\\n8 5\\n4 7\\n2 4\\n7 6\\n3 8\\n10 9\\n7 8\\n2 2\\n9 8\\n9 2\\n2 9\\n1 2\\n2 10\\n10 7\\n81\\n4 4\\n1 6\\n9 10\\n1 2\\n10 7\\n4 4\\n4 4\\n10 9\\n3 3\\n7 9\\n3 3\\n5 4\\n6 4\\n9 5\\n6 4\\n4 3\\n4 9\\n8 4\\n9 10\\n3 9\\n6 7\\n7 9\\n2 4\\n6 1\\n10 1\\n8 9\\n5 4\\n3 10\\n4 6\\n8 7\\n1 9\\n8 9\\n9 5\\n6 2\\n7 1\\n3 6\\n7 3\\n7 5\\n1 2\\n5 7\\n3 3\\n6 9\\n3 7\\n10 5\\n9 4\\n1 5\\n10 2\\n4 1\\n10 2\\n1 10\\n4 4\\n10 10\\n8 5\\n5 6\\n1 4\\n1 8\\n5 4\\n6 10\\n10 6\\n3 6\\n3 10\\n7 7\\n4 9\\n6 1\\n1 10\\n3 6\\n8 10\\n1 6\\n3 1\\n9 4\\n7 1\\n3 4\\n9 7\\n2 8\\n10 10\\n2 5\\n9 7\\n6 5\\n7 10\\n10 7\\n10 3\\n86\\n4 10\\n2 2\\n7 5\\n6 2\\n1 9\\n3 5\\n7 8\\n2 7\\n1 5\\n7 2\\n3 5\\n1 2\\n7 6\\n10 5\\n1 9\\n2 6\\n8 7\\n8 4\\n6 7\\n4 9\\n4 3\\n8 10\\n6 3\\n7 4\\n4 4\\n2 7\\n8 1\\n5 5\\n10 9\\n10 7\\n5 1\\n5 9\\n4 7\\n2 2\\n8 4\\n4 1\\n5 1\\n9 7\\n9 5\\n3 8\\n10 3\\n6 8\\n6 10\\n2 9\\n2 7\\n2 8\\n8 6\\n4 9\\n8 5\\n1 9\\n4 1\\n10 3\\n4 4\\n7 3\\n6 10\\n10 1\\n9 9\\n2 5\\n3 3\\n2 1\\n6 9\\n7 1\\n4 1\\n5 1\\n3 2\\n2 1\\n4 8\\n1 10\\n8 2\\n7 3\\n7 2\\n9 5\\n5 8\\n2 9\\n5 6\\n6 8\\n4 9\\n4 7\\n7 10\\n9 5\\n4 2\\n10 9\\n5 5\\n3 6\\n7 1\\n9 2\\n21\\n7 1\\n1 7\\n4 4\\n10 2\\n4 7\\n5 6\\n6 7\\n4 6\\n6 5\\n8 1\\n2 4\\n9 9\\n1 5\\n4 8\\n7 4\\n1 10\\n6 7\\n4 4\\n1 5\\n5 10\\n5 6\\n25\\n2 2\\n7 10\\n8 5\\n3 9\\n6 10\\n6 7\\n2 5\\n9 7\\n2 9\\n10 6\\n8 2\\n1 4\\n4 6\\n5 8\\n3 10\\n10 6\\n9 9\\n2 9\\n6 3\\n1 7\\n5 7\\n10 9\\n4 9\\n3 2\\n5 1\\n60\\n2 5\\n8 1\\n6 2\\n7 4\\n3 1\\n4 4\\n1 10\\n3 4\\n1 2\\n8 9\\n4 1\\n6 8\\n4 3\\n2 2\\n8 8\\n4 9\\n2 1\\n8 10\\n3 2\\n10 2\\n2 3\\n2 3\\n5 10\\n7 8\\n2 8\\n9 3\\n4 1\\n10 6\\n10 2\\n6 8\\n3 9\\n2 8\\n8 8\\n8 1\\n2 10\\n4 7\\n2 3\\n4 5\\n8 8\\n9 9\\n7 4\\n8 7\\n5 7\\n3 4\\n4 4\\n1 7\\n7 9\\n3 2\\n5 9\\n2 9\\n8 9\\n2 10\\n5 5\\n5 10\\n10 10\\n10 2\\n3 6\\n7 2\\n6 6\\n7 3\\n73\\n8 1\\n6 7\\n7 10\\n9 3\\n5 9\\n10 8\\n7 7\\n4 3\\n2 4\\n9 3\\n10 9\\n2 7\\n8 8\\n4 7\\n10 2\\n7 2\\n1 7\\n9 1\\n10 10\\n6 6\\n4 3\\n4 6\\n5 8\\n4 1\\n3 6\\n3 3\\n2 2\\n7 7\\n8 8\\n1 2\\n2 5\\n1 3\\n1 8\\n3 7\\n1 4\\n9 1\\n8 2\\n8 5\\n9 7\\n4 1\\n2 2\\n1 9\\n2 10\\n10 5\\n10 6\\n7 8\\n6 9\\n1 9\\n8 4\\n4 1\\n10 3\\n7 4\\n9 7\\n10 7\\n8 5\\n9 1\\n8 8\\n9 4\\n10 9\\n6 4\\n5 2\\n9 3\\n8 4\\n1 1\\n10 10\\n1 4\\n4 5\\n1 2\\n1 7\\n9 4\\n8 1\\n2 5\\n10 4\\n73\\n5 9\\n5 5\\n10 10\\n1 6\\n8 3\\n8 5\\n10 6\\n9 10\\n7 4\\n3 6\\n10 4\\n10 4\\n9 8\\n1 7\\n1 2\\n6 8\\n4 2\\n9 1\\n5 7\\n10 8\\n10 5\\n2 3\\n6 3\\n8 6\\n4 5\\n5 1\\n8 6\\n3 4\\n8 5\\n8 9\\n10 6\\n4 5\\n10 3\\n3 2\\n8 3\\n5 7\\n9 8\\n8 10\\n8 3\\n9 8\\n10 9\\n3 8\\n7 5\\n1 10\\n3 3\\n1 1\\n6 5\\n8 4\\n8 2\\n3 8\\n5 2\\n5 6\\n4 9\\n3 7\\n1 4\\n4 3\\n7 5\\n8 2\\n4 1\\n10 1\\n10 7\\n4 4\\n9 9\\n9 4\\n3 9\\n8 1\\n5 7\\n7 9\\n8 5\\n9 1\\n4 10\\n8 8\\n9 1\\n18\\n5 10\\n8 1\\n1 8\\n3 7\\n9 9\\n8 10\\n2 10\\n1 7\\n9 2\\n1 7\\n7 2\\n6 9\\n8 2\\n6 6\\n8 7\\n9 3\\n3 5\\n7 5\\n74\\n9 4\\n8 7\\n8 5\\n5 4\\n7 6\\n10 10\\n2 5\\n2 1\\n4 9\\n10 6\\n3 1\\n5 7\\n8 2\\n3 1\\n8 3\\n10 8\\n10 7\\n2 10\\n6 8\\n1 3\\n10 6\\n8 9\\n1 7\\n10 9\\n7 10\\n8 5\\n1 10\\n2 10\\n4 2\\n8 9\\n4 1\\n6 10\\n9 4\\n3 4\\n9 6\\n10 1\\n5 8\\n3 9\\n10 3\\n7 6\\n2 6\\n3 2\\n10 1\\n8 1\\n1 2\\n8 6\\n2 6\\n6 5\\n5 9\\n3 6\\n3 7\\n8 8\\n6 4\\n4 6\\n6 6\\n8 7\\n8 7\\n3 4\\n10 1\\n6 5\\n6 5\\n5 2\\n4 5\\n10 2\\n8 1\\n9 7\\n6 9\\n5 7\\n4 3\\n8 6\\n7 1\\n1 2\\n2 9\\n6 7\\n19\\n8 10\\n9 3\\n1 4\\n6 4\\n4 5\\n7 10\\n5 3\\n5 7\\n8 8\\n4 4\\n2 7\\n7 3\\n5 8\\n9 10\\n2 6\\n8 1\\n8 1\\n9 8\\n6 9\\n60\\n2 10\\n1 3\\n1 8\\n7 5\\n10 4\\n10 10\\n9 1\\n10 2\\n7 10\\n7 1\\n2 9\\n3 9\\n7 3\\n8 3\\n10 2\\n3 1\\n7 2\\n7 2\\n2 3\\n9 3\\n1 7\\n10 2\\n9 2\\n5 6\\n8 9\\n7 2\\n8 5\\n2 6\\n2 6\\n6 7\\n6 5\\n2 8\\n3 2\\n4 2\\n8 10\\n9 4\\n7 2\\n9 5\\n4 6\\n5 10\\n9 6\\n8 9\\n6 10\\n1 7\\n9 10\\n4 10\\n10 4\\n4 2\\n7 8\\n6 1\\n1 4\\n1 8\\n7 2\\n1 6\\n6 4\\n5 9\\n7 2\\n10 10\\n9 10\\n9 3\\n58\\n5 9\\n7 1\\n3 1\\n8 2\\n3 4\\n7 2\\n2 9\\n10 6\\n6 4\\n4 10\\n10 6\\n7 2\\n8 2\\n1 2\\n1 4\\n8 5\\n2 7\\n4 8\\n10 3\\n5 9\\n3 8\\n8 1\\n2 1\\n9 1\\n3 6\\n1 9\\n4 10\\n8 7\\n7 9\\n2 5\\n1 4\\n9 10\\n4 4\\n4 9\\n9 4\\n6 1\\n6 1\\n8 2\\n5 10\\n1 1\\n3 10\\n5 10\\n10 1\\n4 4\\n1 4\\n5 9\\n7 3\\n2 7\\n9 10\\n5 10\\n8 8\\n1 8\\n10 2\\n3 8\\n1 8\\n6 10\\n2 10\\n1 9\\n94\\n8 3\\n8 5\\n5 4\\n4 8\\n7 3\\n9 2\\n7 4\\n3 7\\n8 3\\n10 5\\n8 10\\n4 3\\n8 1\\n3 8\\n10 1\\n7 1\\n1 5\\n1 8\\n9 1\\n8 2\\n8 3\\n5 1\\n2 5\\n9 6\\n1 1\\n7 5\\n1 9\\n9 5\\n9 9\\n8 7\\n4 3\\n1 3\\n9 8\\n2 2\\n1 1\\n5 7\\n4 10\\n2 9\\n8 3\\n9 4\\n2 5\\n8 4\\n7 4\\n3 2\\n3 7\\n3 5\\n8 5\\n2 1\\n4 4\\n1 5\\n4 2\\n9 6\\n4 1\\n5 1\\n9 9\\n6 6\\n4 4\\n3 8\\n8 1\\n9 8\\n7 10\\n1 1\\n6 6\\n8 5\\n7 4\\n10 2\\n7 10\\n7 9\\n7 4\\n3 4\\n9 4\\n4 10\\n6 1\\n8 2\\n10 4\\n3 5\\n1 3\\n3 9\\n9 6\\n7 8\\n7 10\\n2 5\\n3 9\\n5 2\\n7 5\\n4 6\\n1 4\\n1 7\\n7 9\\n1 10\\n5 9\\n6 10\\n3 10\\n9 8\\n87\\n2 1\\n2 9\\n2 5\\n7 5\\n6 2\\n5 8\\n4 2\\n3 1\\n3 2\\n10 7\\n9 2\\n10 9\\n5 1\\n3 10\\n1 7\\n2 10\\n2 8\\n2 3\\n10 1\\n1 7\\n8 3\\n1 6\\n8 2\\n3 7\\n8 10\\n10 8\\n3 9\\n9 10\\n10 7\\n5 8\\n9 4\\n4 1\\n1 5\\n1 2\\n1 7\\n4 10\\n6 4\\n7 5\\n5 7\\n7 9\\n1 2\\n3 4\\n7 3\\n7 10\\n6 10\\n9 4\\n2 1\\n1 5\\n1 10\\n10 10\\n2 10\\n9 6\\n10 6\\n2 3\\n9 7\\n2 4\\n1 7\\n3 1\\n1 10\\n8 9\\n8 10\\n7 8\\n9 8\\n10 6\\n3 7\\n9 2\\n6 4\\n9 4\\n6 4\\n1 4\\n10 4\\n1 1\\n10 2\\n3 2\\n1 9\\n9 8\\n8 8\\n2 1\\n10 7\\n7 6\\n7 10\\n2 5\\n1 3\\n7 3\\n7 2\\n9 6\\n7 8\\n5\\n10 6\\n7 1\\n7 3\\n10 10\\n7 7\\n93\\n10 8\\n1 10\\n9 4\\n6 6\\n4 4\\n3 6\\n6 9\\n1 8\\n2 8\\n7 3\\n4 7\\n9 5\\n9 2\\n1 8\\n9 3\\n6 9\\n8 4\\n9 7\\n4 4\\n5 6\\n6 10\\n3 10\\n8 6\\n3 8\\n7 4\\n1 3\\n3 5\\n2 3\\n10 1\\n2 1\\n1 5\\n8 2\\n8 10\\n6 2\\n1 9\\n4 3\\n7 10\\n6 4\\n2 9\\n8 8\\n9 6\\n8 7\\n3 8\\n10 5\\n2 9\\n9 2\\n6 5\\n5 6\\n2 2\\n7 10\\n2 9\\n9 8\\n2 6\\n7 5\\n8 4\\n9 7\\n2 6\\n8 9\\n8 3\\n8 6\\n6 3\\n3 10\\n2 6\\n6 9\\n6 2\\n10 3\\n7 3\\n9 9\\n9 9\\n10 8\\n9 1\\n4 9\\n4 8\\n8 8\\n2 1\\n7 7\\n3 7\\n10 7\\n5 3\\n10 9\\n2 10\\n2 2\\n8 8\\n5 3\\n6 8\\n1 6\\n2 9\\n10 3\\n9 3\\n4 1\\n8 4\\n8 3\\n8 7\\n25\\n6 7\\n1 5\\n3 5\\n4 7\\n5 6\\n7 2\\n3 1\\n5 1\\n6 2\\n5 6\\n1 1\\n7 9\\n6 2\\n6 5\\n4 8\\n5 6\\n6 6\\n7 4\\n7 9\\n10 9\\n2 5\\n1 2\\n6 4\\n6 6\\n4 6\\n97\\n10 6\\n4 2\\n2 4\\n4 9\\n8 8\\n3 3\\n5 9\\n8 3\\n10 10\\n4 2\\n3 4\\n10 1\\n5 3\\n2 8\\n6 9\\n1 7\\n7 6\\n6 6\\n6 6\\n4 2\\n10 6\\n1 1\\n3 10\\n7 8\\n3 6\\n3 6\\n9 1\\n6 10\\n3 4\\n8 5\\n9 5\\n2 5\\n4 2\\n1 10\\n6 4\\n8 5\\n1 3\\n8 5\\n8 8\\n1 3\\n4 6\\n8 9\\n9 3\\n7 4\\n6 7\\n4 9\\n10 1\\n3 3\\n5 9\\n1 8\\n8 3\\n3 10\\n1 9\\n4 4\\n7 6\\n10 5\\n5 5\\n4 8\\n9 5\\n6 6\\n10 10\\n4 4\\n7 1\\n5 1\\n10 2\\n2 5\\n9 4\\n6 8\\n4 2\\n10 1\\n5 4\\n6 9\\n9 5\\n5 7\\n2 7\\n9 7\\n7 1\\n1 9\\n5 4\\n9 2\\n10 2\\n7 3\\n3 10\\n8 10\\n10 4\\n6 5\\n9 8\\n1 2\\n1 7\\n10 4\\n3 3\\n7 5\\n2 7\\n7 4\\n8 8\\n5 1\\n3 2\\n38\\n10 1\\n7 4\\n8 4\\n6 3\\n7 10\\n9 5\\n3 8\\n6 10\\n1 5\\n3 7\\n8 10\\n4 3\\n4 10\\n9 8\\n7 6\\n5 2\\n5 8\\n3 10\\n8 8\\n5 6\\n5 4\\n10 9\\n5 9\\n9 8\\n3 9\\n5 3\\n9 6\\n4 7\\n3 6\\n4 9\\n8 9\\n3 7\\n10 10\\n4 8\\n7 2\\n9 4\\n10 7\\n9 4\\n14\\n5 4\\n6 8\\n9 10\\n8 7\\n5 9\\n4 4\\n4 8\\n4 5\\n5 10\\n8 9\\n6 8\\n3 9\\n4 7\\n3 3\\n21\\n1 7\\n2 7\\n3 1\\n9 4\\n2 7\\n7 1\\n5 7\\n6 10\\n3 4\\n6 5\\n10 4\\n7 6\\n6 7\\n2 9\\n8 1\\n2 2\\n4 9\\n4 9\\n3 1\\n4 2\\n3 4\\n8\\n7 6\\n3 2\\n6 3\\n9 7\\n2 4\\n4 1\\n10 1\\n10 6\\n76\\n2 3\\n2 1\\n5 2\\n4 8\\n3 2\\n8 3\\n9 10\\n2 9\\n5 10\\n4 8\\n1 3\\n7 6\\n2 1\\n8 5\\n5 7\\n5 5\\n9 1\\n3 10\\n4 4\\n1 7\\n3 1\\n3 5\\n8 6\\n9 7\\n2 7\\n7 4\\n8 1\\n4 1\\n7 2\\n5 9\\n10 10\\n9 3\\n10 7\\n6 2\\n7 6\\n9 1\\n4 7\\n9 7\\n6 10\\n2 7\\n5 3\\n1 6\\n1 2\\n4 4\\n2 2\\n7 8\\n6 10\\n9 8\\n5 4\\n9 5\\n3 7\\n10 5\\n5 7\\n9 7\\n4 5\\n9 6\\n2 5\\n5 10\\n7 2\\n9 5\\n10 2\\n9 1\\n6 4\\n1 2\\n8 2\\n2 10\\n5 7\\n4 6\\n3 10\\n10 1\\n6 3\\n6 6\\n2 9\\n3 4\\n5 6\\n10 10\\n18\\n6 8\\n7 10\\n8 9\\n6 5\\n4 1\\n4 10\\n1 8\\n4 4\\n5 6\\n3 2\\n5 1\\n9 8\\n4 2\\n7 10\\n2 1\\n5 2\\n8 2\\n4 10\\n96\\n6 1\\n5 4\\n9 6\\n8 8\\n3 7\\n2 1\\n2 5\\n8 5\\n1 2\\n8 7\\n6 4\\n1 2\\n3 1\\n2 2\\n7 4\\n3 4\\n6 2\\n6 3\\n9 9\\n7 10\\n3 9\\n3 7\\n9 3\\n8 2\\n8 4\\n10 9\\n5 10\\n3 10\\n10 3\\n6 3\\n10 7\\n1 3\\n4 9\\n3 3\\n10 5\\n10 6\\n4 3\\n5 2\\n4 5\\n6 7\\n10 10\\n10 9\\n3 9\\n3 5\\n2 4\\n7 5\\n9 10\\n4 2\\n10 4\\n7 7\\n10 2\\n5 7\\n1 10\\n7 10\\n8 2\\n8 3\\n4 2\\n1 4\\n2 2\\n4 1\\n8 3\\n5 9\\n7 8\\n8 8\\n6 2\\n3 8\\n4 6\\n2 2\\n6 8\\n9 3\\n10 1\\n2 3\\n5 6\\n10 2\\n3 4\\n3 9\\n3 7\\n8 3\\n4 5\\n9 4\\n4 2\\n6 6\\n4 1\\n10 1\\n2 3\\n1 7\\n1 7\\n6 8\\n9 3\\n1 1\\n8 1\\n9 10\\n4 1\\n3 8\\n7 8\\n8 10\\n3\\n6 9\\n8 9\\n4 6\\n81\\n3 3\\n5 4\\n8 3\\n5 3\\n3 4\\n10 2\\n7 5\\n6 5\\n6 2\\n10 9\\n1 3\\n3 1\\n5 3\\n7 9\\n7 4\\n8 9\\n6 2\\n10 1\\n4 9\\n5 5\\n9 9\\n3 4\\n4 3\\n9 8\\n3 7\\n10 3\\n3 8\\n9 10\\n1 7\\n6 1\\n2 3\\n5 2\\n9 4\\n9 3\\n7 7\\n10 2\\n9 2\\n1 5\\n6 9\\n4 3\\n1 1\\n9 2\\n9 2\\n6 2\\n1 6\\n10 5\\n4 3\\n7 3\\n5 5\\n1 6\\n5 5\\n10 6\\n4 7\\n1 7\\n9 4\\n10 10\\n8 2\\n8 7\\n7 5\\n3 9\\n10 4\\n6 4\\n1 10\\n6 3\\n1 2\\n1 5\\n4 1\\n6 10\\n10 6\\n8 4\\n9 1\\n4 5\\n8 9\\n9 6\\n3 3\\n9 8\\n9 7\\n5 8\\n10 1\\n2 6\\n2 5\\n57\\n6 9\\n4 3\\n4 1\\n7 8\\n6 3\\n6 7\\n4 4\\n9 7\\n7 1\\n9 6\\n2 3\\n10 5\\n4 4\\n3 1\\n8 5\\n9 7\\n9 9\\n7 8\\n1 5\\n5 2\\n6 9\\n5 5\\n4 4\\n1 10\\n8 8\\n7 7\\n4 8\\n7 3\\n10 2\\n5 9\\n5 10\\n3 7\\n6 1\\n6 6\\n10 4\\n8 9\\n8 5\\n10 10\\n9 9\\n1 7\\n9 9\\n9 7\\n1 2\\n8 9\\n9 9\\n5 10\\n10 1\\n6 5\\n5 5\\n1 5\\n6 7\\n8 10\\n3 3\\n5 1\\n1 6\\n7 7\\n7 2\\n1\\n3 7\\n25\\n4 10\\n3 8\\n9 1\\n8 1\\n6 7\\n4 10\\n9 4\\n8 7\\n8 8\\n6 8\\n4 2\\n10 8\\n4 5\\n8 10\\n6 4\\n1 3\\n7 10\\n8 9\\n6 6\\n6 5\\n5 8\\n6 2\\n4 7\\n3 9\\n7 3\\n7\\n9 3\\n8 10\\n4 5\\n1 1\\n10 8\\n4 2\\n10 10\\n\", \"100\\n805\\n4 9\\n5 4\\n5 9\\n3 1\\n6 8\\n2 3\\n1 4\\n4 9\\n9 7\\n3 1\\n3 3\\n10 8\\n9 7\\n2 8\\n9 10\\n3 4\\n10 6\\n4 9\\n3 4\\n3 3\\n1 3\\n10 8\\n10 4\\n8 1\\n10 5\\n4 6\\n8 2\\n8 10\\n5 10\\n3 10\\n8 2\\n8 5\\n1 5\\n5 5\\n10 10\\n1 4\\n2 1\\n3 2\\n10 10\\n3 9\\n5 3\\n7 4\\n9 3\\n7 2\\n4 1\\n8 7\\n1 4\\n5 4\\n3 3\\n3 10\\n1 7\\n4 6\\n10 2\\n5 10\\n7 8\\n8 4\\n1 6\\n9 2\\n4 9\\n3 1\\n8 8\\n3 8\\n5 6\\n6 3\\n5 3\\n3 5\\n10 10\\n1 7\\n2 5\\n7 7\\n7 3\\n1 3\\n5 10\\n8 3\\n7 5\\n2 4\\n6 4\\n8 1\\n5 3\\n6 8\\n2 7\\n9 4\\n6 4\\n2 10\\n10 2\\n4 2\\n5 4\\n2 9\\n10 7\\n9 4\\n9 3\\n7 10\\n2 4\\n2 6\\n8 3\\n10 4\\n1 5\\n2 3\\n7 10\\n4 7\\n1 1\\n5 1\\n3 6\\n9 1\\n2 5\\n7 5\\n7 3\\n3 10\\n2 2\\n4 3\\n5 1\\n2 4\\n9 8\\n3 3\\n7 5\\n5 9\\n2 5\\n10 7\\n3 7\\n2 10\\n9 3\\n1 6\\n8 3\\n3 7\\n3 6\\n4 8\\n5 4\\n2 1\\n7 4\\n8 6\\n2 1\\n7 6\\n7 10\\n9 3\\n1 1\\n5 8\\n1 4\\n2 10\\n8 3\\n10 3\\n7 4\\n8 2\\n4 3\\n7 1\\n2 5\\n1 8\\n9 7\\n10 5\\n3 1\\n1 9\\n7 10\\n7 7\\n6 8\\n8 5\\n3 5\\n9 4\\n1 10\\n7 7\\n1 2\\n4 10\\n8 6\\n2 9\\n6 6\\n4 10\\n5 3\\n10 2\\n5 4\\n7 2\\n5 3\\n9 10\\n7 3\\n3 6\\n3 2\\n2 3\\n3 8\\n9 4\\n10 2\\n1 1\\n10 5\\n8 1\\n6 3\\n3 3\\n7 5\\n2 1\\n9 7\\n10 3\\n7 4\\n8 6\\n6 4\\n2 10\\n10 2\\n7 7\\n9 9\\n10 5\\n7 10\\n8 3\\n6 4\\n3 6\\n6 2\\n7 6\\n5 2\\n9 10\\n4 3\\n1 3\\n2 6\\n9 10\\n7 1\\n8 10\\n10 9\\n2 3\\n7 9\\n10 10\\n7 10\\n10 1\\n7 5\\n2 9\\n9 10\\n9 4\\n4 1\\n10 2\\n10 2\\n2 8\\n9 5\\n7 8\\n2 1\\n4 9\\n2 5\\n8 7\\n7 5\\n5 8\\n5 10\\n5 7\\n6 4\\n8 2\\n1 5\\n8 9\\n5 3\\n1 8\\n9 7\\n9 5\\n10 8\\n10 9\\n2 4\\n8 1\\n9 10\\n6 6\\n6 7\\n5 1\\n2 8\\n6 4\\n10 2\\n2 10\\n8 2\\n1 2\\n5 5\\n2 8\\n1 9\\n10 1\\n1 9\\n6 5\\n10 7\\n2 3\\n4 6\\n10 10\\n6 9\\n6 3\\n5 4\\n3 2\\n9 5\\n10 3\\n7 3\\n1 4\\n9 10\\n1 1\\n2 3\\n5 6\\n10 8\\n4 1\\n5 8\\n6 2\\n5 2\\n5 2\\n8 5\\n8 10\\n10 4\\n4 4\\n2 9\\n8 2\\n8 3\\n6 4\\n1 6\\n7 3\\n5 1\\n9 10\\n9 5\\n4 10\\n10 2\\n10 5\\n6 10\\n2 5\\n9 9\\n6 3\\n1 9\\n5 2\\n7 10\\n3 7\\n2 3\\n1 7\\n8 8\\n9 8\\n3 8\\n10 9\\n1 7\\n2 1\\n1 4\\n6 4\\n2 10\\n4 9\\n10 8\\n2 4\\n3 10\\n8 2\\n9 5\\n5 5\\n8 3\\n5 3\\n2 3\\n10 4\\n8 9\\n10 1\\n2 10\\n7 1\\n7 3\\n4 1\\n10 3\\n1 3\\n7 1\\n2 10\\n1 3\\n9 2\\n2 4\\n6 1\\n5 1\\n1 1\\n8 6\\n6 10\\n3 8\\n7 4\\n10 5\\n1 7\\n3 9\\n3 1\\n3 2\\n7 2\\n4 10\\n1 3\\n10 5\\n10 4\\n8 10\\n7 8\\n8 4\\n10 2\\n5 4\\n6 4\\n3 4\\n10 2\\n3 8\\n8 10\\n4 10\\n8 10\\n3 10\\n10 7\\n10 4\\n7 8\\n7 5\\n9 10\\n4 9\\n10 3\\n3 10\\n7 6\\n3 3\\n6 9\\n1 7\\n6 3\\n3 8\\n1 10\\n2 5\\n3 6\\n9 3\\n2 3\\n2 8\\n6 3\\n1 3\\n2 1\\n3 4\\n7 2\\n6 2\\n9 9\\n1 9\\n4 6\\n5 5\\n3 2\\n4 5\\n4 9\\n6 8\\n1 4\\n10 4\\n7 4\\n7 7\\n5 9\\n9 8\\n3 8\\n7 4\\n9 1\\n3 9\\n8 10\\n5 9\\n7 6\\n3 6\\n3 10\\n1 10\\n10 8\\n8 1\\n2 1\\n5 6\\n10 1\\n1 2\\n7 6\\n10 5\\n1 10\\n1 1\\n9 10\\n6 8\\n1 3\\n8 4\\n9 10\\n8 1\\n3 4\\n9 4\\n10 5\\n4 10\\n5 1\\n7 1\\n10 3\\n8 3\\n5 4\\n3 3\\n1 1\\n8 5\\n6 5\\n5 2\\n2 6\\n7 2\\n10 6\\n4 6\\n10 7\\n6 6\\n10 8\\n9 7\\n3 4\\n4 5\\n7 1\\n7 8\\n6 9\\n10 5\\n1 8\\n4 1\\n8 3\\n4 2\\n9 9\\n6 1\\n6 1\\n1 4\\n3 6\\n8 10\\n2 10\\n9 2\\n10 3\\n5 1\\n2 8\\n6 2\\n2 9\\n3 4\\n6 5\\n4 4\\n6 10\\n2 6\\n4 9\\n6 7\\n2 3\\n10 9\\n10 2\\n6 4\\n10 7\\n7 9\\n7 1\\n4 4\\n1 5\\n7 8\\n1 3\\n6 5\\n2 2\\n1 10\\n1 6\\n1 5\\n2 2\\n1 1\\n8 4\\n7 4\\n7 2\\n6 8\\n7 2\\n2 3\\n1 8\\n6 2\\n10 3\\n1 1\\n6 2\\n6 5\\n5 1\\n3 5\\n5 6\\n3 10\\n2 9\\n5 1\\n7 9\\n9 6\\n9 4\\n5 6\\n5 2\\n4 2\\n1 10\\n4 4\\n4 2\\n5 8\\n10 8\\n7 2\\n2 6\\n6 6\\n9 3\\n6 10\\n6 4\\n3 3\\n5 3\\n9 3\\n4 2\\n4 2\\n5 5\\n10 5\\n7 1\\n5 10\\n2 7\\n2 8\\n5 2\\n6 9\\n10 6\\n2 6\\n7 9\\n1 3\\n1 6\\n9 10\\n2 10\\n5 2\\n5 3\\n9 2\\n10 4\\n4 3\\n9 8\\n9 2\\n5 2\\n8 3\\n3 1\\n1 7\\n8 4\\n1 2\\n6 4\\n9 5\\n5 9\\n8 8\\n3 1\\n6 5\\n3 3\\n4 4\\n7 3\\n6 9\\n9 9\\n7 2\\n5 10\\n3 8\\n8 8\\n5 10\\n9 6\\n9 2\\n6 7\\n3 3\\n10 4\\n3 5\\n4 1\\n2 2\\n6 8\\n1 5\\n4 10\\n4 8\\n9 10\\n10 2\\n8 4\\n3 7\\n1 1\\n9 3\\n3 1\\n2 10\\n1 3\\n3 3\\n6 10\\n9 1\\n10 7\\n6 6\\n6 7\\n5 9\\n8 5\\n2 2\\n7 10\\n2 5\\n9 1\\n6 4\\n2 1\\n5 5\\n6 4\\n9 8\\n5 10\\n8 5\\n1 1\\n8 5\\n5 7\\n4 3\\n10 10\\n1 4\\n1 10\\n7 5\\n2 8\\n1 9\\n4 2\\n4 1\\n5 5\\n6 3\\n8 1\\n3 9\\n1 10\\n3 8\\n2 2\\n4 9\\n2 10\\n8 1\\n2 6\\n4 3\\n7 10\\n2 7\\n1 5\\n2 9\\n10 8\\n7 2\\n5 10\\n9 7\\n10 3\\n7 10\\n8 4\\n5 2\\n7 5\\n9 6\\n7 10\\n8 6\\n10 8\\n6 6\\n3 5\\n9 4\\n4 5\\n1 2\\n1 10\\n10 6\\n9 8\\n9 9\\n10 7\\n7 10\\n7 10\\n10 1\\n8 9\\n3 4\\n6 4\\n1 7\\n2 4\\n4 8\\n4 9\\n9 3\\n7 2\\n7 1\\n3 1\\n6 10\\n3 2\\n6 1\\n2 4\\n7 8\\n5 1\\n3 7\\n9 1\\n6 10\\n9 3\\n3 3\\n5 1\\n3 2\\n5 9\\n2 10\\n1 9\\n1 10\\n7 10\\n5 1\\n4 5\\n1 6\\n4 3\\n3 7\\n1 7\\n4 2\\n8 3\\n9 4\\n10 4\\n9 1\\n6 6\\n7 10\\n10 6\\n9 1\\n9 9\\n3 8\\n4 10\\n10 2\\n3 5\\n4 10\\n9 5\\n3 9\\n9 9\\n3 10\\n9 10\\n9 3\\n6 4\\n7 3\\n9 3\\n1 7\\n8 7\\n10 5\\n1 8\\n7 2\\n1 3\\n6 10\\n4 5\\n2 9\\n9 9\\n5 3\\n3 2\\n10 2\\n2 4\\n7 1\\n3 5\\n8 4\\n2 7\\n3 7\\n5 5\\n5 8\\n10 10\\n8 4\\n7 7\\n7 10\\n3 3\\n1 1\\n4 10\\n3 4\\n9 7\\n5 5\\n7 9\\n8 4\\n6 5\\n10 4\\n7 2\\n5 1\\n1 1\\n10 9\\n4 7\\n7 2\\n3 10\\n8 1\\n4 10\\n6 4\\n1 3\\n5 8\\n4 10\\n9 9\\n4 7\\n2 4\\n6 1\\n8 8\\n6 9\\n4 8\\n2 3\\n2 1\\n2 1\\n5 6\\n2 10\\n5 3\\n347\\n2 2\\n10 10\\n5 2\\n8 6\\n4 2\\n5 7\\n4 2\\n7 5\\n1 3\\n3 2\\n4 2\\n4 5\\n7 4\\n8 3\\n4 6\\n4 9\\n4 2\\n8 10\\n9 1\\n1 8\\n5 5\\n4 10\\n9 4\\n2 4\\n4 5\\n4 4\\n8 7\\n3 3\\n1 9\\n8 5\\n8 3\\n4 10\\n3 2\\n10 10\\n8 7\\n4 5\\n4 4\\n2 6\\n4 6\\n1 3\\n10 5\\n4 4\\n5 9\\n9 7\\n3 4\\n1 6\\n3 3\\n4 5\\n6 1\\n8 3\\n5 7\\n5 1\\n2 2\\n2 5\\n1 4\\n4 4\\n9 9\\n2 8\\n4 9\\n3 1\\n3 5\\n3 3\\n5 4\\n7 5\\n3 1\\n4 9\\n5 7\\n8 1\\n1 9\\n5 8\\n7 9\\n8 5\\n2 2\\n6 3\\n8 3\\n10 10\\n3 6\\n1 7\\n2 4\\n10 8\\n1 1\\n9 1\\n8 3\\n7 8\\n1 1\\n9 10\\n7 8\\n10 2\\n9 9\\n8 6\\n2 1\\n7 2\\n1 3\\n3 1\\n2 1\\n10 8\\n8 10\\n4 10\\n7 4\\n8 5\\n1 10\\n7 3\\n9 10\\n6 2\\n2 8\\n3 3\\n6 5\\n6 3\\n3 8\\n2 1\\n8 3\\n7 7\\n6 5\\n4 8\\n4 8\\n2 1\\n1 2\\n9 6\\n2 5\\n5 7\\n9 6\\n4 10\\n10 7\\n8 1\\n3 8\\n3 8\\n6 3\\n8 7\\n1 4\\n8 8\\n2 8\\n10 3\\n10 7\\n8 5\\n9 9\\n10 4\\n8 9\\n3 3\\n6 2\\n10 2\\n3 1\\n5 10\\n1 10\\n4 5\\n6 8\\n5 8\\n6 3\\n5 10\\n6 5\\n5 1\\n10 8\\n3 8\\n9 5\\n3 7\\n4 5\\n6 4\\n6 10\\n3 10\\n7 1\\n7 6\\n2 3\\n2 10\\n3 2\\n10 7\\n4 5\\n6 1\\n7 5\\n7 3\\n1 3\\n9 7\\n6 10\\n2 1\\n2 1\\n2 4\\n5 5\\n4 9\\n4 4\\n3 5\\n6 1\\n7 9\\n3 5\\n9 9\\n3 9\\n2 9\\n9 3\\n5 10\\n10 10\\n6 3\\n1 3\\n9 5\\n3 3\\n9 1\\n4 10\\n10 1\\n10 6\\n5 7\\n5 9\\n1 1\\n10 1\\n9 9\\n4 1\\n5 7\\n6 6\\n9 3\\n8 1\\n10 6\\n5 5\\n1 7\\n4 8\\n4 8\\n2 2\\n9 4\\n6 3\\n3 7\\n10 3\\n6 8\\n1 5\\n2 9\\n3 2\\n10 6\\n7 2\\n9 2\\n1 1\\n10 4\\n2 3\\n1 6\\n7 10\\n4 1\\n6 5\\n9 8\\n10 6\\n10 4\\n10 7\\n10 6\\n3 1\\n5 4\\n7 5\\n8 1\\n2 7\\n3 9\\n2 9\\n3 4\\n9 7\\n9 3\\n4 9\\n6 2\\n1 8\\n1 7\\n7 6\\n4 3\\n9 10\\n1 6\\n9 3\\n7 8\\n9 3\\n3 6\\n3 8\\n7 3\\n2 5\\n5 9\\n9 1\\n9 6\\n1 7\\n2 1\\n5 7\\n9 7\\n10 2\\n6 5\\n7 5\\n7 7\\n4 3\\n6 10\\n1 1\\n8 4\\n8 3\\n9 9\\n10 7\\n8 2\\n6 6\\n2 9\\n8 5\\n6 5\\n4 6\\n6 9\\n6 3\\n10 2\\n4 10\\n8 1\\n1 7\\n4 2\\n5 6\\n6 6\\n7 5\\n2 1\\n9 10\\n7 6\\n2 4\\n2 1\\n1 8\\n5 10\\n4 2\\n3 3\\n1 4\\n4 1\\n8 1\\n7 1\\n1 2\\n6 2\\n2 4\\n6 4\\n1 6\\n4 5\\n9 8\\n6 8\\n2 4\\n7 6\\n4 6\\n1 4\\n2 1\\n7 8\\n10 1\\n2 9\\n1 6\\n10 2\\n5 8\\n10 6\\n10 8\\n2 10\\n8 6\\n6 1\\n9 9\\n2 3\\n4 8\\n8 9\\n6 2\\n9 7\\n7 8\\n3 4\\n1 5\\n3 3\\n5 5\\n8 9\\n1 2\\n7 10\\n2 10\\n1 8\\n8 8\\n214\\n2 9\\n5 9\\n8 5\\n4 2\\n3 7\\n4 6\\n2 1\\n3 7\\n9 7\\n9 6\\n7 8\\n9 10\\n9 6\\n3 10\\n6 9\\n9 10\\n3 3\\n6 7\\n8 10\\n1 3\\n1 6\\n6 7\\n9 3\\n4 6\\n10 5\\n4 7\\n8 4\\n9 6\\n9 1\\n3 8\\n10 2\\n1 10\\n10 2\\n2 3\\n9 9\\n7 9\\n9 4\\n6 3\\n9 6\\n5 1\\n8 3\\n7 8\\n4 5\\n6 5\\n2 6\\n4 7\\n1 4\\n6 8\\n2 1\\n3 1\\n2 5\\n2 7\\n10 9\\n6 3\\n2 6\\n4 4\\n3 7\\n4 10\\n1 8\\n9 9\\n2 5\\n3 10\\n6 9\\n5 3\\n3 3\\n4 9\\n4 10\\n4 2\\n10 1\\n5 8\\n10 8\\n6 4\\n3 6\\n8 1\\n5 5\\n2 6\\n7 6\\n7 8\\n10 1\\n7 1\\n7 4\\n7 7\\n3 5\\n5 6\\n10 4\\n6 9\\n6 6\\n1 10\\n5 8\\n5 7\\n10 10\\n1 5\\n3 9\\n5 1\\n1 1\\n9 2\\n6 2\\n9 7\\n7 8\\n10 6\\n5 9\\n7 7\\n8 9\\n4 4\\n6 7\\n8 1\\n7 3\\n6 3\\n8 9\\n2 1\\n2 3\\n10 9\\n4 5\\n6 2\\n4 8\\n10 1\\n8 3\\n10 7\\n9 1\\n3 1\\n9 1\\n4 5\\n6 5\\n6 6\\n2 3\\n2 1\\n3 4\\n10 4\\n4 3\\n8 10\\n2 1\\n8 8\\n8 4\\n9 2\\n9 5\\n5 8\\n7 7\\n7 4\\n1 8\\n4 5\\n2 1\\n3 5\\n3 2\\n3 6\\n10 3\\n1 2\\n6 3\\n2 2\\n4 6\\n3 6\\n7 10\\n7 2\\n10 8\\n5 7\\n1 5\\n7 2\\n7 3\\n3 7\\n3 2\\n1 10\\n7 5\\n3 1\\n1 6\\n5 3\\n5 5\\n5 5\\n4 6\\n5 5\\n3 5\\n7 4\\n1 6\\n2 3\\n4 4\\n8 10\\n5 10\\n6 6\\n2 9\\n10 10\\n9 7\\n7 4\\n2 1\\n10 8\\n4 4\\n5 3\\n3 4\\n7 1\\n3 6\\n6 7\\n4 6\\n1 2\\n6 6\\n7 5\\n3 2\\n1 7\\n4 1\\n4 4\\n9 8\\n3 9\\n8 5\\n1 6\\n4 10\\n5 1\\n7 9\\n5 8\\n7 10\\n10 9\\n8 6\\n10 10\\n4 9\\n8 4\\n5 6\\n6 4\\n4 10\\n8 8\\n570\\n8 3\\n9 9\\n2 2\\n4 2\\n8 2\\n2 9\\n1 6\\n5 9\\n1 4\\n10 3\\n2 2\\n7 4\\n1 2\\n5 3\\n7 3\\n7 5\\n9 1\\n8 8\\n5 8\\n3 9\\n7 8\\n8 6\\n9 6\\n4 5\\n6 2\\n3 6\\n7 5\\n5 10\\n8 2\\n4 10\\n3 9\\n6 4\\n10 1\\n8 3\\n6 1\\n4 8\\n5 9\\n9 10\\n10 7\\n6 3\\n7 10\\n1 6\\n7 9\\n7 3\\n7 2\\n3 9\\n1 6\\n1 1\\n5 2\\n9 1\\n6 4\\n2 6\\n7 6\\n4 5\\n3 7\\n4 8\\n5 8\\n3 5\\n9 1\\n6 1\\n5 5\\n10 9\\n6 9\\n7 9\\n7 1\\n10 10\\n10 8\\n3 9\\n4 6\\n3 2\\n3 9\\n2 9\\n9 4\\n8 7\\n2 2\\n5 1\\n3 10\\n1 4\\n1 7\\n9 3\\n6 7\\n7 5\\n2 9\\n4 10\\n3 9\\n10 7\\n7 3\\n8 6\\n9 10\\n4 6\\n9 4\\n9 8\\n7 4\\n2 5\\n10 1\\n5 8\\n4 10\\n5 1\\n3 7\\n5 6\\n10 6\\n9 1\\n9 10\\n7 2\\n7 3\\n10 3\\n1 1\\n1 6\\n8 7\\n9 4\\n7 1\\n2 8\\n10 4\\n7 1\\n4 4\\n2 7\\n10 7\\n10 3\\n4 9\\n7 8\\n4 5\\n5 4\\n2 10\\n2 9\\n3 3\\n7 9\\n10 1\\n5 9\\n5 1\\n6 6\\n4 3\\n4 5\\n9 1\\n9 10\\n7 5\\n5 6\\n1 3\\n10 2\\n9 8\\n5 3\\n9 7\\n5 7\\n8 4\\n10 5\\n9 5\\n5 2\\n6 4\\n2 9\\n5 6\\n6 2\\n9 4\\n6 9\\n6 9\\n4 9\\n1 8\\n2 4\\n1 1\\n4 4\\n5 5\\n6 8\\n7 5\\n2 4\\n2 9\\n7 2\\n6 2\\n2 1\\n2 4\\n6 8\\n9 7\\n6 9\\n5 10\\n1 4\\n10 4\\n6 10\\n7 7\\n7 10\\n2 3\\n4 10\\n6 7\\n7 3\\n7 3\\n6 1\\n10 7\\n10 9\\n9 1\\n8 4\\n7 2\\n5 5\\n7 2\\n4 9\\n7 6\\n2 3\\n8 7\\n6 4\\n2 2\\n9 1\\n6 10\\n10 5\\n4 10\\n10 6\\n5 7\\n10 6\\n5 6\\n9 4\\n7 3\\n4 3\\n9 2\\n3 2\\n5 8\\n2 6\\n10 8\\n1 8\\n6 5\\n2 9\\n2 4\\n6 5\\n7 9\\n4 10\\n6 10\\n4 5\\n8 2\\n4 10\\n7 8\\n2 6\\n7 10\\n10 6\\n8 10\\n4 10\\n10 7\\n6 3\\n10 9\\n3 4\\n2 3\\n6 6\\n2 6\\n2 5\\n8 8\\n8 4\\n10 1\\n8 3\\n2 9\\n9 1\\n5 10\\n3 1\\n2 5\\n1 3\\n6 7\\n3 6\\n3 3\\n9 6\\n8 7\\n4 2\\n4 3\\n2 2\\n6 9\\n4 2\\n4 1\\n1 2\\n4 3\\n2 8\\n2 3\\n3 5\\n5 1\\n2 1\\n2 2\\n9 6\\n6 8\\n10 4\\n5 8\\n10 7\\n8 7\\n2 4\\n9 10\\n6 2\\n8 2\\n8 6\\n4 4\\n9 9\\n2 3\\n5 9\\n3 8\\n5 1\\n6 4\\n6 6\\n1 4\\n8 2\\n4 5\\n4 7\\n2 3\\n8 7\\n4 8\\n10 3\\n3 4\\n10 3\\n7 6\\n3 9\\n2 6\\n1 5\\n9 3\\n4 3\\n4 3\\n7 8\\n2 7\\n10 10\\n6 6\\n3 6\\n3 2\\n10 2\\n10 8\\n10 6\\n8 3\\n6 4\\n4 10\\n6 6\\n8 1\\n9 1\\n3 10\\n1 2\\n3 3\\n5 3\\n8 7\\n1 2\\n8 10\\n6 3\\n1 1\\n1 9\\n10 9\\n1 4\\n7 3\\n7 2\\n7 4\\n10 6\\n1 1\\n10 8\\n3 2\\n7 5\\n9 2\\n4 7\\n3 5\\n6 4\\n2 1\\n5 6\\n5 5\\n5 3\\n4 5\\n5 9\\n7 6\\n2 4\\n7 4\\n4 1\\n4 6\\n8 7\\n5 8\\n8 5\\n8 5\\n7 3\\n9 7\\n3 10\\n7 10\\n7 3\\n6 7\\n9 9\\n6 8\\n6 10\\n6 9\\n10 4\\n1 5\\n2 1\\n2 2\\n4 7\\n1 4\\n7 7\\n9 9\\n7 1\\n2 9\\n7 3\\n5 6\\n9 9\\n8 2\\n9 6\\n7 2\\n6 4\\n7 3\\n8 6\\n8 3\\n10 3\\n10 6\\n4 1\\n6 7\\n8 1\\n1 1\\n2 7\\n10 10\\n7 1\\n2 2\\n1 8\\n9 4\\n10 4\\n3 9\\n1 7\\n4 1\\n10 2\\n1 2\\n7 7\\n6 5\\n2 2\\n1 3\\n3 8\\n8 6\\n6 9\\n10 4\\n9 6\\n9 7\\n2 3\\n6 7\\n1 4\\n10 2\\n1 7\\n2 8\\n1 1\\n7 10\\n10 7\\n3 3\\n4 6\\n7 1\\n2 5\\n7 6\\n1 3\\n10 8\\n7 10\\n7 3\\n8 10\\n4 8\\n10 2\\n1 3\\n6 4\\n2 10\\n4 9\\n1 5\\n6 9\\n1 10\\n8 3\\n9 5\\n7 4\\n5 1\\n5 9\\n7 5\\n6 3\\n2 10\\n3 3\\n2 8\\n10 8\\n4 6\\n5 6\\n4 1\\n5 2\\n9 9\\n3 3\\n4 9\\n1 9\\n1 1\\n6 4\\n1 8\\n6 7\\n8 2\\n10 1\\n1 5\\n9 7\\n4 1\\n5 7\\n4 7\\n4 9\\n5 6\\n5 8\\n5 7\\n7 3\\n10 8\\n4 3\\n6 5\\n3 8\\n6 9\\n9 10\\n8 3\\n6 6\\n9 2\\n8 3\\n1 5\\n3 4\\n10 1\\n3 7\\n6 9\\n9 10\\n1 10\\n10 5\\n9 4\\n1 9\\n9 4\\n8 3\\n4 8\\n8 7\\n4 9\\n7 8\\n3 7\\n8 5\\n3 5\\n7 10\\n9 7\\n2 7\\n8 4\\n10 7\\n9 9\\n1 2\\n8 2\\n4 7\\n2 4\\n5 6\\n1 1\\n1 7\\n2 6\\n8 8\\n10 10\\n7 5\\n3 7\\n10 6\\n3 5\\n8 3\\n8 2\\n10 5\\n7 1\\n6 2\\n9 6\\n2 5\\n2 5\\n9 7\\n2 4\\n1 3\\n2 8\\n8 10\\n10 6\\n6 7\\n4 10\\n7 1\\n7 2\\n4 5\\n1 8\\n10 8\\n6 1\\n5 9\\n6 1\\n2 10\\n1 7\\n5 4\\n4 9\\n4 5\\n3 2\\n5 8\\n5 6\\n8 3\\n10 4\\n4 2\\n10 7\\n10 2\\n10 8\\n5 2\\n8 8\\n2 3\\n5 6\\n6 6\\n4 4\\n10 7\\n683\\n7 5\\n5 6\\n7 6\\n3 5\\n1 4\\n10 2\\n2 6\\n7 8\\n4 8\\n8 4\\n8 5\\n5 10\\n3 2\\n3 1\\n4 10\\n3 5\\n3 6\\n8 3\\n2 7\\n1 10\\n2 8\\n10 7\\n1 7\\n10 6\\n8 2\\n9 6\\n10 8\\n10 2\\n8 7\\n9 6\\n5 8\\n8 5\\n1 9\\n7 9\\n7 8\\n4 5\\n7 2\\n5 5\\n7 6\\n4 10\\n10 7\\n1 5\\n9 2\\n8 1\\n5 5\\n6 8\\n5 6\\n6 6\\n3 5\\n10 8\\n4 1\\n7 1\\n5 6\\n1 2\\n9 7\\n5 10\\n6 5\\n4 9\\n6 10\\n4 1\\n1 7\\n1 7\\n5 3\\n5 10\\n5 1\\n1 5\\n3 5\\n4 4\\n7 2\\n2 5\\n9 10\\n6 9\\n9 6\\n7 6\\n9 3\\n5 8\\n10 7\\n10 9\\n1 2\\n5 1\\n7 1\\n2 8\\n6 6\\n8 3\\n5 8\\n10 10\\n10 3\\n10 3\\n3 6\\n10 3\\n2 3\\n6 5\\n10 6\\n10 9\\n1 7\\n5 9\\n6 7\\n4 10\\n8 4\\n3 7\\n3 10\\n1 10\\n10 10\\n8 5\\n9 4\\n2 6\\n1 2\\n6 3\\n4 3\\n2 7\\n4 5\\n4 6\\n9 9\\n5 2\\n1 8\\n4 1\\n6 8\\n5 3\\n3 7\\n5 4\\n9 7\\n7 7\\n2 6\\n7 5\\n8 8\\n3 7\\n5 2\\n6 2\\n4 4\\n7 10\\n6 9\\n5 4\\n2 10\\n8 7\\n10 5\\n5 8\\n3 4\\n2 1\\n6 6\\n9 9\\n1 8\\n4 1\\n4 8\\n7 5\\n7 5\\n10 4\\n2 7\\n5 4\\n8 6\\n7 6\\n1 10\\n5 7\\n6 7\\n1 10\\n2 7\\n8 5\\n7 10\\n10 6\\n6 5\\n4 3\\n3 10\\n1 10\\n3 4\\n7 4\\n6 8\\n5 2\\n3 6\\n9 5\\n7 6\\n6 10\\n4 9\\n5 6\\n8 4\\n10 10\\n8 10\\n5 5\\n8 6\\n3 5\\n7 2\\n10 8\\n9 3\\n2 1\\n6 10\\n6 6\\n10 1\\n9 10\\n7 8\\n9 5\\n8 2\\n3 10\\n7 8\\n2 1\\n1 1\\n5 10\\n7 9\\n8 10\\n6 3\\n8 3\\n8 7\\n4 2\\n4 10\\n5 7\\n4 1\\n6 1\\n3 10\\n7 9\\n6 8\\n4 6\\n8 1\\n10 9\\n1 5\\n10 7\\n8 4\\n1 1\\n7 4\\n10 3\\n7 5\\n6 9\\n10 6\\n3 4\\n5 7\\n1 9\\n9 6\\n8 7\\n8 5\\n4 10\\n9 3\\n5 8\\n10 8\\n8 2\\n4 8\\n10 3\\n4 8\\n10 7\\n2 10\\n4 3\\n8 8\\n3 4\\n9 1\\n5 3\\n2 8\\n3 10\\n10 4\\n4 9\\n3 9\\n5 9\\n3 5\\n8 2\\n6 5\\n10 6\\n2 7\\n5 4\\n5 10\\n5 1\\n7 7\\n3 9\\n5 7\\n2 7\\n1 9\\n10 10\\n4 10\\n3 4\\n5 5\\n10 1\\n4 7\\n7 1\\n1 6\\n10 7\\n7 6\\n10 8\\n10 2\\n5 5\\n2 8\\n6 4\\n9 8\\n7 3\\n7 10\\n9 1\\n4 4\\n5 10\\n7 9\\n7 6\\n10 1\\n3 4\\n9 9\\n1 4\\n4 7\\n9 5\\n9 10\\n6 3\\n7 5\\n8 7\\n6 8\\n8 9\\n5 3\\n4 5\\n9 6\\n5 5\\n6 2\\n2 4\\n6 5\\n5 9\\n5 1\\n7 5\\n6 4\\n5 6\\n2 5\\n2 5\\n9 3\\n1 7\\n5 3\\n1 7\\n9 6\\n7 1\\n5 2\\n10 4\\n7 4\\n2 7\\n10 4\\n6 5\\n8 1\\n10 8\\n7 4\\n10 6\\n3 2\\n10 5\\n4 8\\n3 2\\n9 8\\n1 10\\n6 6\\n10 10\\n10 4\\n10 1\\n2 4\\n5 3\\n5 1\\n2 6\\n1 2\\n2 6\\n4 10\\n3 7\\n5 8\\n6 7\\n3 8\\n3 1\\n6 8\\n10 4\\n8 8\\n5 9\\n10 6\\n10 3\\n5 1\\n1 3\\n2 10\\n6 10\\n1 2\\n2 3\\n10 10\\n1 2\\n9 6\\n3 2\\n6 3\\n7 1\\n2 8\\n4 3\\n2 9\\n2 5\\n10 3\\n5 5\\n2 7\\n1 1\\n1 5\\n6 8\\n9 4\\n8 7\\n10 3\\n4 8\\n7 3\\n5 5\\n5 6\\n2 6\\n5 2\\n3 8\\n1 8\\n3 4\\n4 2\\n6 7\\n2 1\\n3 4\\n7 7\\n7 10\\n2 8\\n3 4\\n2 4\\n8 8\\n9 8\\n3 8\\n3 8\\n3 6\\n1 2\\n1 3\\n8 2\\n4 4\\n3 10\\n8 7\\n3 1\\n8 2\\n4 9\\n4 10\\n7 4\\n8 5\\n7 7\\n5 2\\n1 2\\n4 5\\n2 6\\n9 3\\n8 10\\n6 2\\n9 2\\n8 1\\n1 7\\n2 8\\n6 2\\n7 5\\n10 1\\n5 3\\n8 5\\n7 7\\n4 9\\n8 6\\n4 7\\n10 8\\n6 2\\n2 10\\n7 5\\n9 6\\n9 3\\n7 10\\n7 7\\n7 4\\n6 10\\n4 2\\n2 5\\n1 5\\n9 5\\n10 6\\n1 9\\n6 5\\n8 8\\n6 4\\n8 7\\n1 2\\n1 6\\n8 7\\n4 9\\n2 5\\n9 5\\n6 8\\n10 10\\n4 4\\n1 5\\n7 8\\n8 10\\n5 3\\n7 10\\n4 9\\n8 9\\n10 6\\n2 6\\n9 8\\n9 8\\n2 10\\n5 3\\n5 5\\n4 9\\n8 8\\n8 10\\n1 2\\n6 10\\n8 1\\n8 4\\n6 2\\n9 10\\n6 2\\n6 3\\n4 8\\n10 2\\n1 2\\n6 7\\n1 8\\n4 3\\n4 5\\n8 3\\n5 3\\n7 2\\n5 4\\n7 1\\n8 1\\n7 1\\n10 7\\n1 1\\n7 8\\n4 4\\n3 10\\n3 3\\n4 1\\n9 6\\n2 7\\n2 3\\n1 9\\n5 6\\n2 7\\n1 9\\n2 3\\n6 5\\n9 1\\n3 10\\n6 6\\n10 9\\n6 2\\n6 10\\n3 10\\n2 2\\n8 2\\n10 4\\n9 9\\n9 3\\n3 2\\n7 5\\n3 1\\n9 7\\n7 9\\n10 9\\n2 7\\n9 2\\n10 8\\n9 1\\n3 6\\n5 4\\n7 10\\n9 8\\n8 3\\n6 7\\n7 5\\n6 7\\n9 10\\n6 7\\n6 5\\n9 7\\n7 3\\n10 1\\n8 6\\n6 1\\n10 9\\n6 7\\n2 4\\n5 10\\n1 7\\n4 10\\n8 4\\n4 4\\n5 5\\n1 1\\n8 8\\n3 4\\n3 8\\n8 5\\n1 8\\n6 6\\n5 8\\n4 1\\n10 1\\n3 2\\n8 6\\n3 1\\n8 4\\n8 4\\n1 8\\n3 10\\n7 9\\n9 7\\n7 3\\n5 4\\n2 3\\n1 6\\n5 2\\n6 10\\n3 6\\n2 8\\n9 9\\n9 1\\n4 1\\n8 6\\n2 4\\n8 2\\n7 3\\n3 5\\n8 9\\n5 10\\n5 2\\n2 4\\n6 7\\n3 2\\n6 2\\n9 8\\n1 10\\n2 2\\n6 4\\n3 7\\n3 1\\n6 8\\n7 9\\n10 9\\n9 1\\n9 3\\n1 7\\n3 8\\n6 5\\n1 2\\n2 6\\n7 7\\n10 6\\n8 1\\n5 9\\n3 1\\n8 10\\n1 4\\n6 6\\n6 6\\n3 3\\n8 8\\n4 9\\n2 6\\n7 10\\n8 8\\n7 3\\n4 4\\n10 9\\n5 9\\n7 10\\n6 7\\n6 10\\n5 5\\n7 6\\n10 9\\n10 7\\n2 2\\n5 9\\n10 1\\n8 10\\n2 5\\n1 1\\n5 1\\n1 5\\n9 4\\n9 5\\n2 9\\n10 9\\n5 1\\n6 5\\n3 4\\n5 2\\n4 5\\n7 8\\n4 8\\n3 10\\n6 10\\n1 3\\n1 10\\n4 1\\n5 6\\n5 6\\n5 3\\n3 9\\n5 1\\n4 6\\n4 1\\n8 9\\n3 4\\n10 2\\n1 7\\n304\\n7 3\\n2 2\\n9 1\\n2 7\\n4 2\\n3 3\\n6 3\\n9 9\\n7 8\\n5 1\\n10 10\\n3 4\\n1 5\\n4 3\\n1 3\\n6 9\\n9 10\\n2 6\\n5 6\\n7 5\\n3 1\\n9 3\\n4 6\\n7 1\\n5 4\\n2 3\\n1 6\\n5 7\\n6 3\\n6 4\\n9 3\\n10 1\\n2 10\\n8 1\\n3 1\\n1 6\\n5 9\\n9 3\\n6 2\\n8 7\\n4 8\\n2 6\\n8 4\\n6 9\\n3 9\\n3 5\\n6 3\\n4 8\\n7 9\\n5 1\\n2 2\\n3 9\\n7 7\\n3 9\\n9 1\\n1 2\\n3 7\\n8 2\\n7 7\\n4 8\\n7 9\\n7 10\\n2 8\\n6 1\\n1 4\\n7 1\\n3 9\\n4 5\\n10 3\\n4 7\\n6 2\\n10 2\\n10 1\\n9 2\\n1 10\\n4 4\\n6 2\\n5 5\\n6 10\\n3 6\\n10 5\\n7 9\\n10 4\\n6 6\\n5 10\\n10 5\\n8 8\\n7 10\\n9 6\\n8 4\\n1 3\\n6 10\\n2 6\\n7 3\\n9 7\\n6 7\\n9 9\\n6 10\\n2 8\\n7 10\\n5 2\\n5 3\\n6 4\\n5 7\\n10 3\\n5 6\\n7 2\\n7 7\\n5 8\\n5 5\\n4 1\\n6 9\\n3 7\\n5 2\\n5 10\\n9 10\\n5 8\\n7 5\\n6 7\\n1 2\\n3 7\\n3 2\\n8 9\\n10 9\\n3 7\\n1 1\\n5 2\\n7 4\\n10 3\\n2 10\\n8 9\\n6 5\\n8 7\\n10 1\\n7 3\\n6 6\\n7 2\\n10 7\\n7 2\\n9 6\\n8 4\\n10 2\\n3 5\\n4 7\\n8 1\\n4 4\\n5 6\\n4 10\\n8 7\\n8 9\\n4 4\\n10 4\\n1 8\\n9 2\\n4 3\\n1 9\\n7 6\\n5 7\\n7 6\\n3 5\\n10 5\\n4 8\\n10 5\\n8 3\\n3 3\\n9 5\\n5 3\\n8 10\\n10 10\\n7 3\\n1 10\\n2 9\\n6 2\\n10 10\\n2 10\\n5 7\\n1 4\\n10 7\\n8 2\\n8 4\\n9 6\\n2 7\\n5 10\\n4 7\\n7 7\\n10 1\\n10 4\\n4 8\\n2 10\\n6 6\\n10 4\\n8 3\\n9 8\\n4 10\\n7 5\\n1 9\\n4 2\\n2 8\\n9 9\\n8 7\\n6 3\\n3 7\\n2 10\\n10 8\\n8 10\\n6 9\\n9 4\\n1 7\\n4 1\\n5 9\\n2 7\\n4 4\\n5 4\\n10 7\\n9 7\\n6 7\\n9 4\\n4 9\\n8 6\\n3 10\\n1 2\\n10 10\\n5 10\\n5 7\\n5 9\\n9 4\\n1 7\\n7 9\\n5 1\\n1 8\\n7 1\\n10 3\\n2 9\\n2 10\\n8 10\\n8 10\\n5 8\\n6 5\\n2 1\\n5 3\\n3 3\\n7 9\\n6 6\\n8 9\\n1 5\\n8 5\\n7 8\\n8 5\\n6 6\\n2 3\\n8 3\\n4 3\\n8 8\\n1 3\\n7 1\\n3 10\\n9 6\\n5 10\\n4 8\\n8 2\\n5 4\\n3 9\\n5 6\\n6 1\\n4 5\\n7 5\\n9 5\\n7 4\\n5 1\\n9 2\\n6 8\\n5 8\\n6 10\\n9 3\\n3 2\\n5 2\\n1 10\\n1 2\\n4 8\\n5 6\\n2 2\\n7 9\\n6 1\\n1 5\\n6 3\\n4 7\\n7 1\\n1 2\\n7 7\\n7 1\\n2 9\\n3 9\\n3 8\\n2 5\\n2 10\\n5 6\\n9 4\\n2 9\\n6 7\\n2 3\\n1 10\\n8 10\\n5 3\\n4 2\\n326\\n8 10\\n4 4\\n1 3\\n10 10\\n7 9\\n5 5\\n4 1\\n3 9\\n3 5\\n7 1\\n6 4\\n1 4\\n2 10\\n8 7\\n2 6\\n10 4\\n2 8\\n1 5\\n3 2\\n1 6\\n5 6\\n7 2\\n10 2\\n5 8\\n8 4\\n8 1\\n8 2\\n7 6\\n7 10\\n3 3\\n2 4\\n9 2\\n5 3\\n9 4\\n6 4\\n6 7\\n8 5\\n5 8\\n9 9\\n7 1\\n8 1\\n5 2\\n2 5\\n10 7\\n10 4\\n4 4\\n7 5\\n10 6\\n9 10\\n6 2\\n6 4\\n6 3\\n1 2\\n10 10\\n5 7\\n7 9\\n2 8\\n9 2\\n4 8\\n6 4\\n9 2\\n10 3\\n8 8\\n8 10\\n9 3\\n9 4\\n2 6\\n7 2\\n2 3\\n3 8\\n3 8\\n1 10\\n5 5\\n10 9\\n5 9\\n10 2\\n4 5\\n2 5\\n7 8\\n1 6\\n7 3\\n1 8\\n7 4\\n10 10\\n5 6\\n6 1\\n1 6\\n4 2\\n7 7\\n3 9\\n10 5\\n4 4\\n3 6\\n8 2\\n1 2\\n10 10\\n6 7\\n2 4\\n10 9\\n6 6\\n9 9\\n4 2\\n1 8\\n1 8\\n1 10\\n4 5\\n4 3\\n3 3\\n5 9\\n10 7\\n9 7\\n10 10\\n3 9\\n3 7\\n6 8\\n2 3\\n2 7\\n7 2\\n3 10\\n6 10\\n7 10\\n6 4\\n7 8\\n9 1\\n6 5\\n7 3\\n7 8\\n4 7\\n6 8\\n2 1\\n6 7\\n10 1\\n9 8\\n8 5\\n1 7\\n3 4\\n10 5\\n7 9\\n10 10\\n10 8\\n1 2\\n2 10\\n3 5\\n8 3\\n4 2\\n2 1\\n10 5\\n5 1\\n4 6\\n2 3\\n5 2\\n3 5\\n8 7\\n5 4\\n3 2\\n6 3\\n2 6\\n4 10\\n9 5\\n5 4\\n9 9\\n2 5\\n3 2\\n5 8\\n1 1\\n2 1\\n4 2\\n2 2\\n9 7\\n6 3\\n1 7\\n8 3\\n10 9\\n10 3\\n9 4\\n4 10\\n3 10\\n4 10\\n9 8\\n7 8\\n3 6\\n1 10\\n4 7\\n8 1\\n9 8\\n10 1\\n10 8\\n4 3\\n7 3\\n7 3\\n8 1\\n6 9\\n8 6\\n6 8\\n4 6\\n1 2\\n2 4\\n7 8\\n3 8\\n8 8\\n1 1\\n5 6\\n5 5\\n4 9\\n4 2\\n9 6\\n9 5\\n3 4\\n4 2\\n1 6\\n9 2\\n8 2\\n8 4\\n5 1\\n9 4\\n10 5\\n1 9\\n1 5\\n7 8\\n1 4\\n3 2\\n2 5\\n8 3\\n1 7\\n9 2\\n10 1\\n3 8\\n4 5\\n1 7\\n10 6\\n5 9\\n6 7\\n9 4\\n5 10\\n2 3\\n3 7\\n7 4\\n9 5\\n6 5\\n6 5\\n4 4\\n4 4\\n10 10\\n7 8\\n8 4\\n4 7\\n8 4\\n7 10\\n9 4\\n6 7\\n1 3\\n10 8\\n2 5\\n2 4\\n10 1\\n10 3\\n3 3\\n6 7\\n5 1\\n7 6\\n4 1\\n1 9\\n7 1\\n6 3\\n10 5\\n6 3\\n1 4\\n1 7\\n10 5\\n4 3\\n10 9\\n3 4\\n9 7\\n9 8\\n6 7\\n2 8\\n6 8\\n6 2\\n5 1\\n10 8\\n8 4\\n2 9\\n10 1\\n4 5\\n2 3\\n8 9\\n1 8\\n7 5\\n3 1\\n7 5\\n7 10\\n2 1\\n2 9\\n8 6\\n5 8\\n3 1\\n7 3\\n3 3\\n2 2\\n10 10\\n8 3\\n3 7\\n7 3\\n7 2\\n9 10\\n2 5\\n7 3\\n10 10\\n1 2\\n8 6\\n6 6\\n1 2\\n7 7\\n4 1\\n8 1\\n2 7\\n2 6\\n9 5\\n5 5\\n7 1\\n1 1\\n7 8\\n2 7\\n6 10\\n1 1\\n9 1\\n436\\n5 5\\n5 6\\n7 5\\n4 5\\n7 10\\n7 6\\n1 2\\n8 10\\n8 6\\n1 1\\n4 8\\n3 2\\n2 6\\n4 8\\n9 5\\n1 5\\n2 5\\n3 9\\n6 10\\n6 4\\n3 1\\n9 4\\n6 9\\n7 1\\n7 7\\n10 8\\n4 4\\n4 1\\n5 2\\n1 9\\n9 10\\n1 6\\n7 1\\n3 6\\n5 3\\n6 10\\n8 6\\n3 8\\n10 6\\n5 4\\n3 5\\n7 8\\n9 6\\n6 5\\n3 1\\n2 1\\n3 1\\n4 6\\n9 7\\n2 5\\n1 4\\n9 9\\n2 10\\n6 10\\n6 10\\n3 4\\n7 10\\n6 3\\n10 10\\n4 9\\n1 6\\n6 7\\n6 1\\n5 6\\n10 10\\n5 10\\n8 8\\n1 2\\n2 1\\n6 4\\n10 4\\n9 7\\n6 9\\n3 9\\n4 5\\n7 7\\n8 1\\n10 7\\n9 6\\n2 7\\n8 1\\n10 6\\n1 3\\n9 9\\n8 6\\n5 8\\n9 10\\n10 7\\n5 2\\n9 6\\n3 10\\n8 3\\n1 2\\n8 8\\n2 4\\n9 5\\n3 5\\n3 6\\n8 2\\n2 2\\n6 10\\n2 5\\n10 2\\n8 6\\n7 4\\n4 4\\n5 9\\n6 10\\n3 8\\n10 6\\n2 8\\n3 3\\n7 1\\n3 1\\n8 4\\n7 1\\n9 2\\n7 4\\n8 4\\n9 1\\n2 2\\n1 4\\n9 1\\n9 9\\n4 9\\n3 7\\n10 4\\n2 8\\n7 10\\n7 10\\n10 3\\n8 5\\n8 10\\n1 4\\n5 5\\n6 5\\n4 2\\n1 9\\n6 8\\n8 7\\n7 3\\n3 9\\n5 10\\n4 4\\n1 2\\n2 5\\n10 1\\n5 7\\n6 3\\n10 1\\n2 8\\n3 2\\n4 5\\n4 2\\n10 5\\n7 8\\n3 9\\n2 3\\n6 10\\n7 5\\n3 7\\n2 10\\n6 8\\n6 1\\n5 2\\n5 10\\n9 4\\n9 10\\n3 4\\n2 8\\n10 8\\n2 1\\n3 10\\n10 8\\n5 4\\n10 1\\n4 7\\n2 3\\n10 5\\n10 5\\n6 3\\n2 5\\n4 6\\n6 9\\n10 3\\n7 1\\n9 3\\n3 3\\n10 6\\n4 9\\n5 5\\n5 6\\n7 1\\n7 8\\n7 4\\n2 4\\n10 9\\n10 3\\n4 5\\n4 9\\n5 7\\n9 5\\n2 2\\n7 5\\n8 2\\n10 6\\n5 9\\n2 9\\n1 6\\n9 4\\n10 3\\n5 10\\n6 10\\n4 8\\n4 1\\n10 1\\n7 2\\n2 3\\n10 9\\n6 1\\n7 10\\n7 10\\n9 1\\n9 1\\n9 7\\n8 8\\n10 6\\n8 10\\n5 1\\n10 2\\n1 2\\n5 8\\n1 8\\n6 8\\n10 8\\n2 7\\n7 2\\n2 9\\n1 10\\n3 3\\n7 5\\n5 1\\n6 9\\n5 4\\n5 4\\n6 4\\n3 4\\n6 6\\n9 6\\n5 8\\n1 4\\n5 5\\n2 3\\n8 10\\n7 8\\n4 9\\n1 2\\n5 10\\n1 10\\n6 4\\n8 10\\n7 5\\n10 8\\n6 8\\n3 5\\n6 10\\n10 6\\n7 9\\n5 5\\n10 10\\n5 5\\n6 7\\n6 10\\n4 1\\n5 3\\n2 6\\n8 2\\n5 4\\n5 3\\n1 6\\n3 2\\n3 10\\n8 1\\n4 9\\n6 5\\n8 2\\n10 4\\n7 8\\n3 7\\n1 1\\n2 2\\n1 2\\n3 8\\n6 9\\n6 3\\n8 7\\n6 6\\n6 8\\n3 7\\n1 3\\n3 6\\n6 3\\n7 7\\n4 4\\n2 5\\n2 4\\n6 2\\n6 4\\n2 3\\n1 6\\n4 8\\n5 2\\n2 6\\n8 7\\n3 8\\n1 5\\n3 3\\n6 3\\n2 3\\n10 1\\n2 2\\n10 9\\n4 8\\n8 9\\n2 6\\n3 6\\n5 4\\n8 10\\n10 2\\n10 9\\n1 6\\n3 5\\n6 7\\n8 1\\n4 8\\n9 7\\n2 2\\n10 9\\n1 3\\n6 5\\n3 4\\n10 4\\n6 5\\n8 3\\n3 6\\n9 2\\n3 5\\n5 7\\n3 7\\n3 6\\n1 5\\n10 5\\n8 4\\n3 8\\n5 8\\n1 2\\n1 5\\n4 3\\n3 7\\n6 5\\n7 10\\n3 5\\n3 8\\n7 6\\n2 10\\n10 9\\n4 7\\n8 10\\n3 1\\n7 2\\n7 9\\n9 5\\n2 3\\n7 3\\n7 1\\n3 2\\n5 5\\n4 1\\n3 5\\n6 4\\n7 10\\n1 3\\n8 9\\n8 8\\n3 7\\n5 2\\n9 5\\n8 5\\n3 8\\n4 4\\n1 10\\n3 3\\n4 6\\n8 2\\n4 5\\n7 6\\n7 5\\n4 3\\n6 1\\n2 10\\n8 3\\n10 4\\n9 6\\n8 4\\n10 1\\n10 4\\n1 3\\n7 10\\n10 2\\n1 2\\n7 10\\n8 4\\n7 9\\n6 6\\n6 1\\n1 5\\n2 6\\n7 5\\n1 10\\n1 6\\n8 6\\n2 7\\n1 6\\n2 2\\n2 8\\n10 10\\n10 10\\n6 4\\n8 10\\n10 3\\n3 7\\n1 8\\n9 9\\n6 7\\n1 9\\n3 9\\n919\\n2 5\\n10 6\\n5 6\\n8 9\\n4 5\\n3 8\\n6 3\\n2 7\\n2 8\\n4 4\\n4 10\\n8 6\\n7 7\\n3 3\\n7 3\\n5 8\\n8 8\\n2 7\\n7 5\\n10 5\\n2 2\\n2 3\\n8 9\\n9 4\\n6 10\\n7 5\\n2 3\\n10 6\\n7 5\\n8 1\\n5 7\\n2 10\\n8 2\\n2 1\\n3 9\\n6 2\\n1 1\\n5 5\\n1 2\\n8 10\\n9 8\\n3 8\\n9 1\\n2 7\\n6 1\\n6 4\\n2 3\\n6 10\\n3 8\\n9 8\\n9 4\\n7 1\\n6 3\\n4 6\\n1 10\\n8 3\\n7 9\\n7 10\\n3 6\\n2 4\\n7 5\\n7 6\\n2 7\\n1 9\\n3 1\\n7 1\\n3 3\\n1 9\\n5 5\\n9 5\\n5 4\\n9 3\\n6 1\\n2 4\\n5 5\\n2 7\\n10 1\\n3 5\\n1 8\\n6 5\\n9 2\\n1 9\\n7 8\\n10 6\\n7 10\\n5 10\\n10 10\\n4 7\\n5 6\\n6 4\\n5 3\\n5 9\\n8 10\\n9 6\\n1 2\\n7 5\\n5 2\\n6 10\\n9 10\\n2 8\\n6 4\\n1 1\\n7 6\\n3 3\\n6 4\\n7 6\\n7 2\\n4 8\\n5 6\\n5 6\\n7 9\\n5 10\\n6 6\\n7 10\\n7 6\\n5 10\\n3 4\\n9 4\\n4 3\\n5 9\\n5 7\\n6 2\\n10 5\\n3 1\\n9 1\\n2 3\\n6 3\\n1 5\\n1 1\\n8 9\\n4 10\\n6 4\\n10 9\\n3 6\\n2 2\\n5 6\\n8 9\\n1 6\\n7 3\\n6 10\\n8 1\\n5 2\\n4 2\\n9 8\\n10 8\\n1 10\\n9 4\\n2 5\\n1 9\\n8 6\\n2 2\\n10 1\\n7 9\\n2 3\\n10 7\\n1 3\\n2 3\\n6 8\\n4 9\\n4 7\\n5 10\\n4 9\\n6 4\\n10 8\\n4 9\\n5 9\\n9 2\\n3 3\\n3 4\\n1 1\\n1 5\\n6 8\\n6 2\\n8 6\\n8 2\\n5 6\\n2 10\\n10 10\\n1 10\\n8 2\\n4 1\\n7 4\\n6 6\\n3 4\\n9 3\\n5 4\\n1 4\\n9 5\\n3 5\\n10 10\\n3 10\\n4 9\\n9 8\\n1 7\\n4 4\\n6 5\\n6 6\\n8 1\\n8 1\\n4 7\\n3 4\\n6 1\\n4 10\\n4 8\\n5 7\\n4 1\\n6 6\\n1 2\\n9 10\\n7 9\\n2 10\\n9 10\\n7 5\\n4 5\\n4 5\\n8 6\\n10 6\\n3 6\\n10 9\\n8 9\\n4 3\\n10 5\\n9 9\\n4 2\\n4 2\\n8 8\\n2 10\\n1 10\\n3 5\\n9 5\\n9 8\\n4 1\\n8 9\\n9 10\\n5 10\\n8 8\\n10 8\\n5 7\\n8 6\\n7 8\\n2 3\\n7 10\\n9 8\\n5 4\\n4 9\\n1 3\\n4 4\\n7 4\\n1 2\\n8 3\\n7 6\\n3 6\\n6 10\\n1 7\\n1 1\\n6 10\\n5 4\\n9 1\\n5 3\\n8 1\\n9 8\\n9 9\\n5 9\\n9 5\\n10 3\\n9 4\\n4 10\\n8 6\\n10 7\\n8 6\\n10 5\\n7 10\\n3 8\\n3 9\\n10 7\\n3 7\\n5 6\\n8 10\\n7 8\\n7 1\\n9 9\\n8 5\\n1 4\\n3 2\\n6 4\\n7 7\\n1 2\\n4 6\\n7 1\\n3 9\\n4 4\\n1 3\\n3 6\\n7 10\\n5 2\\n8 10\\n8 3\\n9 5\\n9 8\\n4 5\\n10 9\\n1 8\\n3 1\\n3 9\\n2 6\\n4 4\\n7 2\\n8 4\\n2 1\\n4 3\\n3 2\\n6 8\\n5 6\\n5 10\\n3 9\\n5 2\\n9 5\\n9 7\\n6 3\\n4 1\\n10 5\\n4 4\\n7 4\\n9 2\\n4 10\\n4 8\\n8 7\\n6 9\\n4 6\\n7 2\\n3 8\\n8 4\\n7 9\\n4 3\\n7 1\\n7 7\\n8 8\\n4 1\\n10 3\\n6 1\\n2 4\\n10 1\\n3 2\\n8 10\\n10 9\\n2 4\\n4 2\\n3 2\\n4 7\\n4 2\\n5 6\\n10 3\\n9 7\\n6 7\\n1 5\\n5 2\\n8 6\\n5 8\\n3 4\\n8 1\\n5 3\\n6 9\\n7 9\\n3 7\\n10 10\\n1 9\\n7 6\\n8 6\\n8 1\\n9 9\\n7 7\\n4 4\\n1 10\\n4 6\\n4 6\\n5 9\\n1 8\\n10 3\\n3 9\\n5 5\\n4 6\\n1 4\\n1 4\\n4 2\\n7 10\\n7 3\\n10 2\\n4 5\\n6 7\\n9 7\\n2 1\\n6 1\\n7 2\\n10 1\\n4 4\\n10 9\\n4 9\\n5 3\\n4 8\\n7 2\\n2 5\\n2 3\\n7 10\\n9 9\\n5 9\\n1 1\\n1 6\\n4 1\\n2 4\\n1 7\\n10 6\\n8 10\\n1 2\\n6 8\\n1 10\\n6 5\\n1 3\\n3 10\\n6 4\\n9 8\\n6 9\\n10 7\\n1 7\\n2 9\\n1 2\\n4 7\\n7 9\\n8 4\\n3 3\\n9 6\\n9 9\\n1 8\\n6 2\\n10 3\\n4 4\\n3 2\\n7 7\\n8 10\\n9 7\\n1 6\\n2 6\\n4 8\\n1 9\\n6 10\\n7 4\\n6 6\\n5 6\\n8 8\\n10 5\\n9 2\\n5 8\\n8 2\\n3 7\\n10 5\\n7 5\\n8 6\\n2 2\\n8 7\\n4 5\\n6 8\\n3 5\\n2 8\\n4 1\\n10 2\\n8 6\\n4 1\\n5 4\\n3 3\\n5 1\\n7 9\\n10 4\\n4 8\\n1 2\\n4 4\\n2 4\\n5 5\\n5 3\\n2 3\\n4 1\\n6 9\\n10 10\\n4 1\\n7 8\\n10 9\\n3 3\\n6 6\\n10 4\\n5 8\\n8 3\\n1 2\\n9 5\\n10 1\\n8 10\\n7 8\\n4 9\\n9 5\\n7 5\\n2 2\\n1 6\\n9 7\\n8 10\\n5 4\\n2 10\\n7 9\\n10 8\\n6 8\\n4 4\\n4 2\\n10 3\\n7 9\\n1 5\\n4 7\\n8 4\\n6 6\\n7 7\\n1 2\\n3 7\\n6 4\\n10 2\\n6 7\\n10 5\\n4 2\\n10 9\\n8 5\\n5 6\\n7 9\\n6 8\\n3 9\\n7 4\\n6 4\\n5 5\\n4 2\\n10 10\\n1 3\\n3 8\\n4 6\\n5 10\\n1 1\\n1 10\\n10 7\\n4 2\\n9 5\\n9 3\\n6 4\\n8 4\\n6 6\\n6 1\\n6 6\\n5 8\\n8 10\\n2 3\\n10 1\\n8 9\\n2 2\\n9 7\\n9 3\\n9 5\\n4 1\\n9 10\\n8 8\\n6 6\\n9 9\\n7 7\\n1 3\\n10 8\\n6 10\\n4 4\\n4 4\\n1 6\\n5 5\\n9 1\\n4 3\\n7 9\\n6 10\\n2 2\\n3 4\\n4 4\\n3 3\\n8 2\\n9 10\\n6 4\\n8 9\\n2 4\\n6 7\\n2 3\\n10 2\\n10 2\\n2 8\\n5 2\\n4 1\\n5 8\\n6 2\\n1 4\\n8 9\\n4 9\\n5 8\\n5 6\\n6 2\\n7 1\\n3 6\\n2 2\\n3 3\\n1 8\\n6 6\\n6 3\\n2 3\\n7 8\\n3 5\\n6 10\\n7 4\\n5 9\\n9 10\\n9 10\\n10 3\\n1 4\\n2 9\\n6 7\\n8 8\\n2 4\\n8 1\\n8 5\\n9 3\\n1 6\\n6 7\\n5 4\\n8 4\\n1 2\\n10 1\\n10 7\\n6 7\\n9 5\\n8 9\\n2 4\\n2 2\\n4 7\\n7 2\\n10 2\\n8 4\\n5 9\\n2 2\\n2 4\\n2 5\\n10 5\\n9 9\\n2 9\\n6 8\\n4 5\\n2 4\\n9 3\\n3 5\\n4 8\\n2 5\\n4 8\\n6 1\\n7 3\\n3 1\\n7 5\\n1 4\\n9 4\\n8 8\\n5 3\\n10 1\\n7 1\\n10 4\\n1 3\\n4 2\\n6 2\\n3 5\\n4 7\\n2 3\\n7 9\\n5 10\\n10 6\\n7 8\\n1 1\\n2 1\\n7 8\\n2 4\\n10 4\\n4 3\\n4 8\\n2 4\\n3 8\\n1 5\\n10 5\\n4 2\\n2 6\\n7 1\\n3 7\\n10 4\\n1 4\\n2 4\\n3 5\\n9 10\\n10 4\\n6 10\\n10 4\\n6 6\\n10 7\\n2 8\\n9 8\\n4 8\\n5 8\\n1 4\\n8 3\\n3 1\\n1 9\\n9 6\\n8 8\\n10 6\\n1 4\\n7 7\\n4 6\\n10 4\\n2 10\\n2 10\\n9 2\\n9 5\\n1 5\\n10 1\\n6 4\\n8 4\\n1 8\\n8 8\\n8 10\\n10 9\\n7 9\\n10 2\\n7 1\\n1 2\\n5 3\\n5 9\\n5 3\\n8 2\\n9 8\\n2 9\\n4 3\\n6 8\\n7 5\\n6 2\\n2 7\\n7 3\\n4 4\\n9 2\\n5 5\\n8 3\\n6 5\\n1 10\\n3 1\\n1 8\\n2 9\\n8 8\\n5 8\\n1 8\\n4 9\\n7 7\\n6 5\\n4 4\\n9 4\\n1 1\\n7 5\\n3 1\\n4 9\\n4 3\\n6 10\\n8 9\\n9 7\\n3 2\\n8 3\\n4 9\\n9 5\\n6 7\\n4 1\\n6 9\\n2 8\\n7 4\\n3 6\\n4 7\\n2 7\\n2 8\\n9 9\\n6 1\\n9 4\\n1 1\\n3 9\\n8 5\\n6 3\\n4 6\\n5 5\\n9 4\\n3 7\\n3 1\\n3 5\\n9 7\\n6 10\\n7 9\\n9 8\\n1 2\\n6 2\\n1 6\\n3 5\\n2 5\\n9 1\\n7 8\\n5 6\\n2 5\\n4 1\\n10 7\\n3 10\\n9 7\\n9 6\\n1 6\\n7 7\\n1 1\\n2 7\\n5 6\\n6 9\\n7 6\\n1 4\\n8 3\\n6 2\\n7 5\\n7 9\\n1 2\\n7 9\\n3 3\\n3 9\\n9 10\\n10 8\\n3 8\\n5 2\\n4 9\\n3 1\\n7 4\\n2 8\\n5 6\\n10 9\\n3 10\\n2 2\\n5 4\\n2 2\\n7 1\\n1 3\\n10 9\\n9 6\\n8 3\\n1 8\\n4 3\\n1 5\\n6 5\\n10 5\\n1 4\\n2 1\\n4 7\\n10 10\\n1 7\\n2 5\\n6 6\\n6 6\\n1 5\\n8 10\\n2 3\\n6 10\\n6 4\\n8 10\\n1 8\\n6 4\\n5 9\\n7 9\\n7 1\\n4 6\\n5 7\\n2 8\\n3 10\\n5 10\\n1 6\\n9 2\\n2 1\\n7 5\\n4 4\\n4 7\\n2 2\\n10 1\\n9 4\\n7 3\\n7 2\\n9 8\\n6 8\\n3 3\\n10 9\\n8 6\\n5 7\\n5 1\\n3 10\\n9 4\\n10 6\\n10 5\\n9 3\\n5 6\\n6 1\\n2 4\\n4 6\\n8 3\\n10 5\\n10 10\\n5 10\\n7 8\\n10 1\\n10 9\\n7 1\\n10 7\\n8 2\\n6 3\\n6 4\\n1 8\\n5 7\\n6 5\\n8 6\\n8 9\\n337\\n2 8\\n5 9\\n1 3\\n6 1\\n3 4\\n7 7\\n10 5\\n10 8\\n9 6\\n6 8\\n2 5\\n2 7\\n3 3\\n2 5\\n7 10\\n6 7\\n2 10\\n3 5\\n5 2\\n6 10\\n2 4\\n10 9\\n4 3\\n6 7\\n5 4\\n7 8\\n5 3\\n1 3\\n10 10\\n3 10\\n2 4\\n9 9\\n6 2\\n10 6\\n8 4\\n8 1\\n8 8\\n3 10\\n9 6\\n7 9\\n5 3\\n9 3\\n6 5\\n3 10\\n7 10\\n2 1\\n7 7\\n2 3\\n5 5\\n7 9\\n5 8\\n6 2\\n10 5\\n10 9\\n4 3\\n5 10\\n4 9\\n4 2\\n7 1\\n1 10\\n9 3\\n2 3\\n3 3\\n7 9\\n3 10\\n6 7\\n10 5\\n1 5\\n8 10\\n2 8\\n3 1\\n8 3\\n10 7\\n6 8\\n9 10\\n3 7\\n7 10\\n9 2\\n10 5\\n9 1\\n9 7\\n2 2\\n4 2\\n9 9\\n3 8\\n5 8\\n7 1\\n7 6\\n3 5\\n2 4\\n2 3\\n5 2\\n5 2\\n8 6\\n6 9\\n9 2\\n1 9\\n4 9\\n4 9\\n8 4\\n8 10\\n6 6\\n10 8\\n10 2\\n8 2\\n7 10\\n4 7\\n7 3\\n9 9\\n6 4\\n8 5\\n5 4\\n4 6\\n7 3\\n10 8\\n1 4\\n7 8\\n4 8\\n9 2\\n10 7\\n1 4\\n2 4\\n3 2\\n7 2\\n10 5\\n7 3\\n9 3\\n9 3\\n1 7\\n6 7\\n3 2\\n4 9\\n4 2\\n3 9\\n9 1\\n10 8\\n6 10\\n4 2\\n5 9\\n7 7\\n6 7\\n3 7\\n7 2\\n7 7\\n10 9\\n3 7\\n1 2\\n4 2\\n3 2\\n1 5\\n5 8\\n6 9\\n2 3\\n6 4\\n10 6\\n5 9\\n2 8\\n4 5\\n6 2\\n1 8\\n4 7\\n7 10\\n10 4\\n6 5\\n7 1\\n10 2\\n4 3\\n10 7\\n2 5\\n6 7\\n9 3\\n8 10\\n3 9\\n5 1\\n9 8\\n2 1\\n5 7\\n6 9\\n5 10\\n2 2\\n9 5\\n3 7\\n6 7\\n5 8\\n5 3\\n7 4\\n5 8\\n7 7\\n7 6\\n5 4\\n10 2\\n10 5\\n10 5\\n8 4\\n9 3\\n10 5\\n3 9\\n7 4\\n9 6\\n9 2\\n5 7\\n8 10\\n10 5\\n1 2\\n5 1\\n9 10\\n3 7\\n1 9\\n4 7\\n6 3\\n1 8\\n4 9\\n10 8\\n1 8\\n3 8\\n5 5\\n8 6\\n5 2\\n6 3\\n6 5\\n5 9\\n4 3\\n3 6\\n9 8\\n2 5\\n5 6\\n1 6\\n9 10\\n7 10\\n5 6\\n9 5\\n8 9\\n6 2\\n2 3\\n7 1\\n2 9\\n5 1\\n9 3\\n8 7\\n7 1\\n9 1\\n10 7\\n10 6\\n4 1\\n6 6\\n7 6\\n4 1\\n10 5\\n2 3\\n5 2\\n10 4\\n10 10\\n1 4\\n4 10\\n8 9\\n4 5\\n10 4\\n3 10\\n9 2\\n7 4\\n4 9\\n2 5\\n7 4\\n4 6\\n3 9\\n3 6\\n5 1\\n10 9\\n3 3\\n7 9\\n5 2\\n7 3\\n2 6\\n4 1\\n4 10\\n1 8\\n2 6\\n2 3\\n1 3\\n4 5\\n10 2\\n3 3\\n9 9\\n4 5\\n5 2\\n2 5\\n5 4\\n8 8\\n7 2\\n7 1\\n9 7\\n7 8\\n4 2\\n9 3\\n7 7\\n7 10\\n9 3\\n4 5\\n4 8\\n9 1\\n9 1\\n10 1\\n2 10\\n5 1\\n6 7\\n8 1\\n2 9\\n10 9\\n4 7\\n9 7\\n8 6\\n6 8\\n10 10\\n4 5\\n6 10\\n7 2\\n1 1\\n4 3\\n3 10\\n9 7\\n10 4\\n6 4\\n1 1\\n7 4\\n9 6\\n6 1\\n1 6\\n6 6\\n1 10\\n7 5\\n10 4\\n9 7\\n3 4\\n3 6\\n5 2\\n10 2\\n3 5\\n838\\n6 7\\n3 6\\n5 5\\n8 2\\n10 3\\n8 3\\n9 7\\n1 3\\n8 3\\n7 6\\n2 1\\n2 1\\n6 8\\n8 6\\n4 2\\n9 4\\n8 10\\n9 10\\n1 8\\n6 3\\n6 2\\n9 1\\n6 9\\n7 10\\n4 7\\n7 5\\n4 2\\n7 6\\n1 5\\n7 10\\n2 5\\n9 9\\n8 5\\n2 1\\n1 3\\n4 7\\n8 10\\n9 3\\n3 2\\n7 8\\n3 9\\n3 5\\n3 4\\n7 10\\n7 5\\n10 6\\n7 10\\n3 9\\n8 2\\n3 4\\n1 5\\n8 1\\n6 4\\n2 10\\n1 7\\n10 3\\n8 7\\n8 7\\n7 8\\n3 7\\n7 5\\n6 10\\n8 1\\n3 2\\n10 7\\n7 10\\n3 5\\n4 9\\n6 6\\n4 3\\n3 8\\n1 4\\n4 9\\n2 10\\n3 7\\n6 9\\n4 4\\n9 5\\n7 2\\n4 10\\n4 5\\n10 3\\n3 5\\n5 1\\n6 1\\n4 10\\n8 4\\n8 3\\n8 4\\n5 7\\n6 3\\n1 10\\n6 8\\n8 5\\n1 8\\n6 1\\n4 8\\n1 9\\n5 1\\n7 6\\n2 7\\n1 7\\n6 7\\n9 3\\n1 10\\n10 3\\n8 3\\n9 10\\n3 2\\n10 1\\n1 2\\n2 5\\n10 2\\n8 10\\n4 6\\n4 8\\n1 1\\n3 10\\n8 3\\n6 1\\n3 6\\n1 5\\n6 5\\n4 2\\n10 1\\n5 5\\n7 9\\n2 7\\n10 9\\n7 4\\n1 10\\n2 4\\n9 7\\n6 6\\n6 5\\n7 3\\n4 1\\n8 2\\n7 6\\n7 5\\n9 4\\n8 6\\n6 8\\n6 10\\n4 6\\n8 10\\n8 8\\n7 1\\n2 9\\n5 6\\n7 7\\n5 3\\n8 2\\n7 10\\n6 4\\n5 10\\n3 8\\n7 6\\n5 7\\n2 4\\n7 10\\n4 5\\n9 4\\n9 6\\n10 4\\n3 10\\n3 5\\n5 6\\n3 10\\n1 2\\n2 6\\n1 10\\n1 7\\n7 10\\n6 9\\n8 7\\n3 4\\n2 9\\n10 4\\n6 4\\n10 1\\n4 2\\n2 1\\n9 2\\n8 4\\n6 6\\n4 5\\n4 10\\n6 8\\n3 6\\n2 2\\n3 7\\n7 7\\n1 8\\n9 1\\n7 6\\n3 5\\n1 1\\n4 10\\n3 6\\n1 5\\n1 9\\n10 7\\n6 8\\n2 10\\n8 3\\n10 4\\n7 8\\n3 3\\n5 3\\n9 2\\n8 5\\n5 8\\n9 5\\n7 9\\n3 9\\n10 1\\n8 1\\n10 5\\n8 4\\n3 7\\n10 9\\n5 7\\n4 8\\n1 8\\n2 9\\n3 5\\n8 10\\n7 5\\n5 7\\n5 10\\n3 8\\n1 1\\n10 4\\n9 1\\n4 10\\n9 4\\n3 7\\n4 4\\n3 2\\n8 9\\n7 4\\n2 9\\n5 7\\n3 1\\n6 9\\n2 1\\n3 5\\n1 7\\n1 3\\n4 9\\n8 3\\n3 6\\n4 2\\n8 7\\n10 10\\n3 9\\n10 7\\n4 1\\n4 2\\n8 7\\n4 4\\n10 6\\n8 1\\n4 5\\n9 9\\n7 5\\n5 1\\n1 3\\n1 8\\n9 7\\n10 1\\n2 1\\n7 5\\n4 7\\n1 3\\n10 6\\n4 8\\n2 7\\n8 1\\n3 6\\n8 4\\n10 4\\n1 6\\n10 5\\n9 5\\n1 6\\n6 1\\n7 5\\n4 4\\n5 10\\n8 4\\n3 4\\n1 10\\n4 8\\n6 7\\n1 9\\n10 2\\n6 6\\n3 2\\n8 6\\n10 1\\n7 4\\n9 3\\n5 1\\n8 6\\n4 4\\n9 8\\n9 1\\n1 10\\n10 2\\n3 5\\n9 9\\n2 1\\n2 2\\n8 3\\n7 6\\n6 9\\n3 6\\n2 7\\n3 6\\n1 1\\n3 10\\n7 3\\n2 9\\n9 4\\n3 6\\n3 6\\n7 10\\n2 5\\n1 9\\n10 8\\n8 6\\n7 1\\n3 10\\n8 4\\n7 8\\n4 2\\n7 10\\n1 4\\n1 1\\n2 6\\n4 8\\n9 3\\n10 5\\n3 3\\n2 5\\n5 1\\n9 6\\n1 2\\n9 6\\n1 8\\n3 7\\n1 8\\n7 10\\n10 9\\n7 7\\n3 3\\n10 7\\n9 3\\n5 3\\n7 1\\n8 7\\n6 2\\n6 5\\n4 5\\n3 4\\n2 5\\n2 1\\n4 5\\n7 8\\n1 8\\n7 6\\n2 7\\n3 10\\n10 9\\n3 10\\n4 10\\n5 3\\n1 10\\n1 3\\n5 6\\n4 10\\n4 8\\n4 10\\n10 10\\n9 2\\n3 2\\n4 7\\n3 4\\n7 3\\n4 2\\n4 10\\n4 9\\n10 7\\n8 8\\n5 8\\n8 8\\n9 10\\n8 10\\n8 5\\n2 5\\n3 5\\n7 9\\n10 3\\n5 2\\n8 1\\n3 6\\n9 8\\n4 8\\n9 6\\n2 7\\n1 9\\n9 3\\n5 2\\n1 7\\n8 10\\n6 6\\n1 6\\n1 1\\n6 1\\n1 2\\n2 7\\n5 2\\n5 3\\n5 2\\n3 7\\n5 7\\n9 6\\n4 10\\n10 2\\n4 5\\n5 7\\n4 5\\n5 6\\n9 2\\n2 8\\n10 1\\n7 2\\n3 9\\n7 4\\n5 5\\n8 6\\n2 3\\n9 5\\n6 10\\n4 1\\n2 8\\n6 9\\n7 4\\n5 8\\n8 4\\n3 6\\n8 10\\n1 1\\n2 7\\n1 8\\n5 4\\n3 4\\n10 5\\n8 4\\n6 2\\n1 9\\n2 8\\n1 1\\n7 5\\n6 10\\n4 4\\n2 2\\n2 2\\n6 7\\n1 1\\n3 1\\n10 1\\n1 2\\n3 7\\n3 9\\n4 9\\n3 9\\n6 4\\n9 4\\n9 3\\n6 2\\n3 7\\n8 1\\n5 2\\n9 5\\n10 7\\n6 6\\n10 3\\n1 8\\n6 7\\n1 1\\n9 3\\n8 9\\n1 3\\n3 7\\n2 6\\n6 1\\n4 4\\n6 10\\n9 4\\n8 5\\n6 9\\n1 5\\n2 2\\n8 2\\n10 9\\n5 7\\n5 2\\n1 3\\n7 7\\n8 6\\n7 8\\n1 5\\n5 9\\n8 7\\n10 9\\n2 4\\n10 10\\n10 1\\n8 6\\n7 7\\n10 2\\n10 4\\n10 6\\n7 8\\n10 8\\n10 10\\n8 1\\n7 1\\n1 7\\n4 4\\n2 8\\n5 3\\n10 2\\n2 5\\n2 9\\n2 7\\n8 10\\n6 4\\n6 1\\n7 5\\n3 6\\n3 7\\n5 6\\n3 3\\n6 10\\n9 2\\n5 7\\n9 7\\n3 3\\n5 3\\n10 4\\n8 10\\n1 2\\n9 6\\n4 6\\n5 5\\n9 2\\n3 10\\n5 8\\n2 4\\n4 9\\n8 2\\n6 2\\n7 7\\n4 7\\n6 9\\n2 8\\n10 5\\n5 10\\n2 9\\n7 1\\n7 10\\n6 9\\n9 10\\n6 6\\n1 6\\n9 7\\n5 7\\n3 6\\n9 5\\n4 2\\n2 4\\n6 3\\n1 1\\n3 6\\n10 1\\n1 1\\n7 2\\n10 2\\n8 1\\n6 7\\n8 9\\n7 9\\n1 7\\n6 10\\n5 4\\n6 9\\n3 3\\n6 3\\n7 5\\n3 2\\n4 10\\n4 9\\n3 1\\n8 4\\n1 10\\n3 7\\n9 4\\n9 2\\n5 10\\n3 7\\n7 10\\n1 6\\n4 5\\n3 5\\n4 6\\n9 8\\n4 6\\n4 7\\n2 7\\n2 2\\n3 2\\n4 1\\n4 5\\n4 8\\n4 9\\n6 6\\n4 5\\n6 9\\n7 8\\n3 3\\n3 9\\n5 3\\n8 7\\n8 9\\n7 6\\n3 7\\n8 5\\n3 1\\n5 3\\n4 9\\n5 9\\n9 8\\n2 4\\n8 1\\n5 2\\n10 7\\n4 9\\n7 3\\n1 7\\n10 3\\n8 5\\n7 7\\n8 10\\n5 7\\n2 8\\n2 2\\n6 3\\n4 1\\n6 6\\n9 9\\n4 8\\n5 3\\n6 5\\n4 10\\n4 5\\n5 4\\n9 4\\n4 1\\n2 3\\n7 10\\n5 9\\n1 8\\n1 10\\n8 2\\n7 9\\n1 7\\n5 5\\n8 6\\n8 10\\n9 7\\n9 2\\n2 3\\n4 3\\n3 9\\n6 8\\n2 2\\n3 8\\n5 3\\n10 3\\n2 4\\n3 3\\n9 1\\n1 7\\n10 1\\n1 4\\n4 1\\n1 2\\n1 10\\n10 4\\n10 3\\n9 3\\n1 9\\n4 3\\n5 9\\n2 7\\n7 9\\n3 9\\n1 1\\n6 1\\n6 7\\n7 9\\n10 3\\n7 5\\n9 2\\n5 7\\n10 6\\n5 10\\n3 10\\n7 8\\n5 4\\n2 2\\n10 9\\n8 8\\n4 4\\n7 7\\n3 4\\n4 3\\n2 4\\n1 9\\n9 1\\n2 10\\n9 10\\n4 3\\n7 5\\n10 10\\n7 3\\n4 7\\n2 10\\n7 2\\n9 9\\n1 6\\n2 6\\n8 10\\n4 4\\n6 4\\n1 4\\n4 1\\n4 7\\n8 6\\n5 4\\n9 9\\n2 5\\n9 6\\n4 9\\n8 5\\n3 4\\n7 1\\n4 6\\n5 9\\n8 1\\n1 5\\n10 2\\n7 6\\n4 10\\n1 9\\n7 8\\n1 8\\n5 3\\n5 7\\n4 7\\n5 8\\n4 1\\n9 4\\n9 2\\n1 5\\n5 2\\n4 10\\n2 7\\n3 6\\n9 10\\n8 7\\n8 1\\n4 3\\n10 10\\n4 2\\n9 8\\n4 8\\n5 2\\n2 2\\n6 4\\n2 7\\n5 4\\n9 1\\n2 6\\n3 2\\n3 4\\n6 9\\n3 2\\n1 6\\n8 7\\n4 10\\n2 8\\n4 1\\n3 8\\n7 7\\n6 5\\n2 6\\n9 7\\n8 5\\n10 7\\n4 9\\n5 3\\n10 3\\n10 3\\n2 1\\n4 7\\n10 2\\n6 5\\n1 8\\n3 7\\n8 4\\n6 3\\n7 10\\n10 2\\n1 4\\n1 8\\n1 4\\n5 1\\n3 10\\n6 2\\n5 3\\n8 1\\n7 8\\n7 5\\n544\\n4 5\\n2 1\\n9 5\\n8 9\\n6 6\\n8 3\\n5 1\\n10 8\\n6 1\\n1 1\\n4 2\\n2 7\\n7 5\\n4 9\\n1 7\\n6 9\\n10 1\\n10 8\\n10 2\\n4 6\\n1 5\\n8 9\\n3 1\\n4 2\\n4 6\\n4 1\\n8 10\\n2 7\\n5 8\\n6 8\\n5 1\\n5 3\\n3 9\\n2 10\\n1 2\\n6 3\\n3 8\\n6 8\\n8 2\\n5 7\\n3 2\\n4 1\\n1 8\\n6 9\\n2 5\\n9 5\\n10 3\\n1 10\\n1 10\\n6 6\\n3 7\\n8 4\\n1 1\\n10 3\\n3 1\\n6 3\\n9 7\\n10 8\\n6 10\\n4 5\\n10 4\\n4 8\\n6 10\\n5 10\\n1 3\\n1 8\\n9 4\\n7 10\\n6 2\\n7 4\\n1 6\\n4 10\\n2 7\\n4 6\\n4 3\\n4 3\\n7 7\\n2 1\\n6 7\\n9 3\\n6 3\\n9 6\\n7 7\\n7 7\\n6 4\\n9 5\\n4 1\\n4 3\\n7 1\\n3 4\\n4 10\\n3 10\\n5 8\\n7 2\\n9 6\\n4 6\\n9 5\\n8 2\\n8 7\\n1 10\\n3 6\\n2 5\\n5 7\\n10 5\\n6 9\\n5 2\\n9 1\\n10 10\\n1 1\\n3 6\\n2 10\\n1 6\\n8 4\\n4 2\\n8 3\\n1 2\\n4 7\\n1 8\\n5 7\\n10 5\\n10 8\\n6 5\\n4 6\\n10 6\\n1 10\\n8 4\\n6 3\\n8 6\\n6 4\\n9 3\\n6 7\\n9 10\\n3 7\\n10 3\\n4 3\\n7 5\\n9 5\\n6 8\\n5 4\\n8 10\\n3 10\\n8 4\\n1 2\\n8 10\\n4 1\\n1 5\\n9 2\\n4 10\\n3 9\\n7 6\\n2 2\\n4 9\\n4 2\\n10 6\\n5 1\\n6 1\\n8 1\\n2 9\\n10 5\\n2 6\\n2 5\\n6 8\\n4 5\\n7 7\\n1 1\\n9 9\\n9 4\\n6 6\\n9 3\\n8 1\\n1 1\\n10 1\\n1 3\\n3 3\\n5 10\\n1 6\\n6 1\\n10 1\\n6 6\\n5 9\\n7 1\\n4 10\\n1 6\\n2 10\\n10 7\\n2 6\\n1 3\\n2 8\\n1 10\\n8 8\\n6 7\\n4 3\\n6 8\\n4 6\\n5 1\\n2 4\\n1 1\\n10 4\\n4 5\\n8 7\\n2 3\\n8 1\\n8 8\\n7 2\\n4 8\\n5 1\\n6 5\\n8 2\\n1 8\\n9 10\\n2 10\\n8 5\\n6 1\\n10 2\\n7 9\\n2 2\\n8 5\\n8 7\\n9 9\\n7 5\\n4 1\\n7 6\\n9 6\\n8 9\\n5 1\\n3 9\\n6 5\\n8 3\\n7 9\\n3 6\\n8 10\\n6 6\\n10 2\\n1 10\\n5 2\\n2 2\\n2 10\\n5 1\\n9 1\\n4 9\\n5 6\\n5 1\\n9 3\\n4 9\\n1 2\\n9 9\\n7 3\\n2 9\\n2 6\\n10 5\\n2 8\\n1 1\\n10 5\\n5 2\\n9 6\\n2 9\\n9 1\\n7 6\\n3 3\\n4 10\\n9 7\\n10 4\\n2 10\\n3 2\\n5 3\\n10 5\\n3 8\\n2 5\\n3 4\\n1 10\\n7 6\\n7 9\\n5 1\\n1 9\\n4 5\\n7 6\\n8 5\\n7 7\\n5 6\\n9 6\\n6 8\\n2 2\\n6 10\\n6 6\\n3 10\\n10 2\\n9 4\\n8 6\\n7 7\\n2 8\\n4 9\\n2 3\\n4 2\\n10 10\\n6 8\\n7 2\\n5 5\\n8 4\\n2 9\\n7 3\\n9 9\\n7 8\\n8 8\\n8 7\\n6 5\\n8 9\\n1 3\\n8 10\\n7 4\\n10 2\\n5 9\\n1 4\\n6 1\\n3 6\\n10 2\\n3 7\\n1 1\\n2 3\\n2 9\\n7 8\\n7 2\\n9 5\\n1 2\\n7 9\\n9 10\\n8 3\\n4 2\\n2 3\\n4 3\\n2 9\\n7 7\\n9 6\\n4 4\\n3 8\\n5 7\\n6 3\\n7 8\\n1 7\\n3 5\\n7 8\\n7 10\\n6 7\\n8 4\\n6 10\\n6 7\\n8 6\\n2 6\\n6 9\\n9 6\\n7 3\\n3 2\\n1 6\\n8 10\\n5 5\\n1 4\\n3 1\\n4 5\\n7 6\\n3 4\\n6 10\\n7 5\\n9 6\\n7 1\\n8 6\\n5 1\\n2 3\\n9 8\\n8 7\\n2 5\\n3 6\\n9 6\\n10 4\\n8 6\\n10 3\\n9 1\\n3 10\\n1 3\\n6 8\\n2 7\\n8 9\\n5 3\\n9 6\\n7 3\\n6 9\\n5 1\\n7 6\\n10 9\\n8 9\\n4 10\\n7 3\\n6 1\\n5 7\\n2 10\\n7 10\\n4 7\\n10 4\\n1 3\\n9 7\\n1 7\\n3 5\\n1 3\\n9 10\\n1 5\\n6 10\\n2 6\\n3 3\\n4 10\\n3 7\\n8 6\\n8 2\\n7 8\\n6 9\\n1 7\\n7 3\\n4 6\\n6 5\\n5 2\\n8 4\\n5 9\\n3 1\\n5 10\\n6 9\\n1 8\\n10 7\\n8 5\\n9 6\\n3 10\\n5 3\\n9 6\\n4 3\\n1 8\\n10 10\\n9 5\\n7 2\\n8 3\\n4 8\\n2 7\\n4 10\\n5 7\\n1 3\\n4 4\\n6 6\\n2 4\\n1 10\\n3 5\\n9 6\\n5 7\\n10 1\\n3 5\\n5 4\\n3 4\\n1 4\\n9 1\\n1 7\\n4 6\\n8 3\\n6 3\\n7 3\\n2 4\\n9 10\\n10 8\\n8 3\\n4 7\\n10 10\\n8 3\\n6 3\\n7 1\\n5 6\\n5 8\\n7 6\\n3 3\\n5 9\\n10 8\\n9 8\\n10 7\\n6 5\\n1 9\\n4 9\\n8 6\\n1 5\\n3 9\\n10 7\\n4 8\\n3 6\\n10 6\\n3 4\\n7 4\\n4 3\\n8 7\\n5 9\\n1 7\\n2 6\\n5 7\\n9 9\\n10 2\\n8 1\\n4 2\\n1 5\\n4 8\\n5 4\\n9 3\\n4 7\\n6 3\\n8 5\\n6 10\\n7 4\\n4 4\\n2 3\\n5 4\\n1 1\\n2 5\\n3 7\\n6 3\\n9 6\\n4 10\\n2 1\\n2 4\\n8 1\\n6 10\\n4 4\\n9 8\\n9 5\\n9 7\\n6 6\\n8 3\\n7 1\\n10 4\\n6 7\\n10 2\\n4 10\\n6 4\\n4 3\\n1 7\\n4 7\\n1 7\\n6 9\\n4 2\\n7 5\\n4 9\\n5 4\\n10 8\\n3 6\\n9 7\\n4 5\\n42\\n1 3\\n10 4\\n7 5\\n5 9\\n2 8\\n4 2\\n8 5\\n4 8\\n6 7\\n1 6\\n8 5\\n9 4\\n4 4\\n4 7\\n6 4\\n7 9\\n10 9\\n9 7\\n8 7\\n10 9\\n7 7\\n7 2\\n8 6\\n7 3\\n2 7\\n3 1\\n2 9\\n8 6\\n9 6\\n7 3\\n6 5\\n6 2\\n10 4\\n9 3\\n8 8\\n3 4\\n8 10\\n3 10\\n8 10\\n1 6\\n2 5\\n2 10\\n408\\n6 6\\n4 8\\n8 8\\n7 4\\n7 2\\n9 7\\n3 2\\n9 1\\n9 9\\n5 10\\n5 4\\n4 8\\n6 2\\n8 3\\n7 2\\n5 4\\n9 3\\n3 5\\n5 9\\n5 3\\n5 3\\n5 10\\n7 7\\n4 4\\n10 10\\n8 7\\n1 5\\n9 5\\n10 2\\n4 2\\n3 4\\n5 3\\n4 8\\n5 9\\n10 9\\n8 3\\n7 5\\n4 6\\n8 5\\n2 1\\n5 6\\n1 8\\n8 8\\n1 9\\n1 3\\n6 6\\n9 5\\n7 2\\n8 5\\n5 3\\n7 6\\n2 1\\n1 5\\n4 1\\n1 3\\n2 4\\n6 4\\n5 2\\n4 6\\n7 5\\n1 4\\n3 5\\n10 2\\n1 8\\n9 4\\n10 3\\n4 8\\n1 10\\n4 4\\n6 10\\n5 2\\n10 9\\n2 6\\n2 3\\n6 10\\n2 1\\n2 9\\n8 5\\n10 6\\n10 3\\n10 7\\n3 2\\n4 9\\n10 10\\n7 5\\n3 4\\n6 7\\n7 5\\n3 1\\n10 7\\n3 10\\n3 1\\n4 9\\n6 9\\n10 5\\n5 6\\n2 6\\n7 4\\n8 9\\n9 8\\n4 8\\n3 5\\n6 6\\n8 4\\n3 8\\n2 4\\n2 3\\n4 4\\n10 7\\n8 9\\n3 1\\n1 4\\n8 8\\n10 3\\n10 6\\n4 7\\n10 5\\n1 2\\n6 4\\n7 9\\n10 3\\n1 5\\n7 8\\n10 9\\n5 10\\n10 7\\n5 9\\n4 10\\n3 2\\n6 9\\n6 4\\n6 7\\n2 3\\n9 3\\n10 6\\n2 6\\n5 10\\n2 6\\n5 4\\n4 4\\n2 7\\n2 7\\n10 1\\n6 7\\n4 8\\n5 9\\n5 1\\n2 9\\n1 3\\n1 5\\n6 1\\n4 9\\n2 3\\n2 4\\n6 10\\n2 6\\n3 7\\n2 9\\n2 9\\n9 10\\n8 5\\n2 7\\n2 8\\n8 9\\n8 5\\n1 6\\n7 6\\n7 3\\n10 4\\n8 9\\n6 1\\n9 1\\n7 10\\n6 4\\n7 8\\n5 9\\n3 6\\n3 10\\n2 5\\n4 6\\n8 8\\n6 3\\n3 1\\n8 7\\n1 4\\n3 6\\n4 4\\n8 7\\n6 6\\n3 3\\n5 3\\n1 8\\n2 3\\n10 1\\n7 2\\n3 3\\n6 8\\n5 7\\n6 1\\n4 4\\n2 8\\n2 7\\n5 4\\n5 4\\n9 4\\n4 2\\n8 10\\n10 4\\n2 7\\n4 4\\n9 10\\n2 1\\n5 1\\n3 6\\n2 2\\n3 4\\n9 7\\n1 7\\n6 10\\n10 9\\n7 5\\n9 9\\n8 8\\n2 3\\n4 5\\n5 8\\n9 10\\n8 2\\n6 5\\n2 8\\n5 6\\n1 7\\n5 9\\n7 9\\n4 3\\n5 4\\n4 2\\n7 5\\n4 4\\n5 1\\n10 5\\n6 3\\n10 8\\n7 4\\n6 7\\n9 1\\n7 9\\n1 1\\n8 7\\n10 7\\n1 1\\n7 9\\n3 7\\n6 5\\n4 2\\n10 4\\n6 4\\n3 1\\n10 4\\n4 8\\n3 5\\n1 7\\n6 9\\n5 8\\n5 6\\n8 6\\n1 1\\n2 4\\n8 3\\n9 7\\n7 10\\n7 8\\n2 3\\n9 6\\n6 7\\n8 4\\n5 5\\n7 9\\n8 1\\n9 1\\n3 7\\n1 3\\n10 4\\n9 2\\n10 9\\n1 6\\n4 9\\n6 9\\n6 6\\n1 5\\n5 10\\n9 2\\n10 3\\n3 6\\n8 9\\n2 8\\n3 6\\n3 1\\n7 2\\n3 10\\n6 8\\n3 1\\n10 5\\n4 8\\n4 7\\n2 10\\n3 9\\n7 10\\n7 1\\n3 3\\n10 1\\n3 2\\n2 10\\n1 9\\n9 5\\n8 8\\n8 6\\n9 5\\n8 2\\n6 3\\n2 2\\n3 5\\n3 5\\n4 2\\n10 9\\n9 7\\n7 7\\n2 2\\n2 2\\n7 10\\n2 9\\n10 5\\n7 9\\n1 5\\n4 7\\n6 2\\n4 2\\n3 5\\n8 3\\n1 10\\n10 10\\n6 10\\n8 4\\n2 8\\n4 1\\n1 8\\n9 9\\n9 4\\n2 2\\n1 1\\n8 3\\n3 9\\n10 4\\n4 8\\n5 1\\n3 2\\n3 1\\n10 2\\n9 5\\n1 8\\n10 7\\n4 9\\n2 10\\n9 2\\n7 10\\n2 8\\n10 1\\n1 7\\n10 7\\n2 10\\n6 2\\n10 10\\n9 4\\n8 1\\n3 2\\n5 2\\n2 9\\n1 7\\n1 1\\n3 1\\n8 1\\n10 6\\n7 6\\n4 3\\n5 9\\n8 1\\n10 10\\n7 9\\n10 10\\n2 3\\n7 3\\n9 2\\n5 3\\n3 2\\n1 7\\n2 6\\n10 8\\n4 6\\n10 7\\n10 7\\n3 7\\n7 3\\n3 9\\n3 8\\n3 3\\n2 5\\n7 4\\n6 6\\n200\\n3 2\\n6 10\\n8 9\\n9 9\\n6 2\\n6 10\\n6 8\\n10 7\\n4 4\\n3 6\\n5 1\\n3 2\\n7 2\\n10 6\\n10 8\\n2 5\\n2 5\\n4 9\\n8 1\\n5 5\\n2 9\\n8 6\\n5 2\\n4 1\\n8 8\\n10 6\\n5 5\\n1 5\\n6 5\\n1 3\\n7 10\\n2 4\\n8 2\\n7 9\\n6 6\\n4 7\\n6 7\\n4 2\\n8 10\\n3 10\\n1 6\\n2 10\\n7 7\\n4 4\\n3 10\\n10 3\\n8 5\\n8 7\\n8 10\\n9 8\\n9 8\\n2 4\\n9 7\\n4 5\\n1 10\\n2 6\\n4 2\\n1 7\\n4 6\\n3 3\\n9 5\\n2 7\\n8 1\\n6 3\\n3 6\\n4 1\\n9 3\\n10 7\\n9 4\\n10 2\\n1 5\\n9 10\\n8 9\\n7 3\\n10 2\\n5 3\\n3 1\\n3 3\\n2 4\\n10 5\\n9 4\\n5 3\\n10 6\\n3 7\\n10 3\\n4 8\\n2 10\\n7 6\\n5 5\\n1 5\\n2 7\\n3 7\\n6 3\\n2 3\\n8 6\\n10 1\\n5 9\\n6 9\\n6 6\\n7 7\\n7 3\\n4 4\\n1 3\\n7 10\\n3 4\\n4 5\\n3 5\\n8 2\\n7 10\\n6 7\\n3 3\\n8 8\\n10 6\\n1 10\\n8 6\\n4 10\\n8 8\\n9 2\\n9 1\\n4 5\\n8 4\\n3 2\\n6 3\\n6 9\\n6 7\\n9 8\\n7 8\\n3 6\\n8 1\\n9 2\\n10 7\\n1 1\\n1 10\\n5 8\\n9 1\\n1 8\\n8 3\\n4 9\\n9 2\\n3 10\\n4 7\\n2 3\\n9 8\\n5 10\\n3 8\\n10 1\\n5 10\\n4 10\\n2 8\\n9 1\\n4 1\\n3 4\\n3 8\\n2 8\\n2 3\\n4 9\\n8 8\\n8 3\\n1 6\\n2 7\\n10 4\\n10 10\\n8 8\\n3 3\\n2 1\\n7 5\\n2 6\\n2 2\\n9 2\\n5 1\\n6 4\\n7 1\\n9 5\\n1 8\\n6 4\\n8 5\\n10 6\\n10 10\\n10 10\\n9 2\\n9 7\\n4 2\\n8 2\\n3 1\\n1 7\\n1 3\\n9 8\\n9 5\\n10 3\\n9 4\\n10 4\\n5 2\\n10 6\\n1 9\\n10 10\\n6 9\\n4 10\\n5 9\\n3 8\\n5 5\\n591\\n5 10\\n10 8\\n3 2\\n7 7\\n4 9\\n10 5\\n3 9\\n9 9\\n4 5\\n1 8\\n4 7\\n3 3\\n9 2\\n10 10\\n2 6\\n5 1\\n1 1\\n3 2\\n1 1\\n1 7\\n10 10\\n1 4\\n9 10\\n10 8\\n9 8\\n5 6\\n9 9\\n2 2\\n10 4\\n10 5\\n8 1\\n5 6\\n5 4\\n5 7\\n7 8\\n5 9\\n4 8\\n9 1\\n4 7\\n8 4\\n3 3\\n1 7\\n7 4\\n7 10\\n3 7\\n5 10\\n7 3\\n1 3\\n4 8\\n9 1\\n10 8\\n5 6\\n5 3\\n2 7\\n2 7\\n9 4\\n4 7\\n2 9\\n6 2\\n5 2\\n4 1\\n4 10\\n3 4\\n1 5\\n9 1\\n5 1\\n7 1\\n7 3\\n1 9\\n7 4\\n9 6\\n2 5\\n2 5\\n3 9\\n7 8\\n1 7\\n3 3\\n4 9\\n5 2\\n4 1\\n6 10\\n2 9\\n2 4\\n7 9\\n8 7\\n4 5\\n4 10\\n9 5\\n4 5\\n6 2\\n1 3\\n9 9\\n8 8\\n3 9\\n5 1\\n9 8\\n8 3\\n10 4\\n4 5\\n6 9\\n4 3\\n7 3\\n7 1\\n8 4\\n4 10\\n2 5\\n2 4\\n3 10\\n6 3\\n9 4\\n3 6\\n8 5\\n2 4\\n3 2\\n10 8\\n4 9\\n4 5\\n8 1\\n1 10\\n9 2\\n3 10\\n8 5\\n9 6\\n3 6\\n5 8\\n5 3\\n6 1\\n1 10\\n10 7\\n2 4\\n8 7\\n5 10\\n6 7\\n6 8\\n8 7\\n9 4\\n7 8\\n9 10\\n7 4\\n10 10\\n6 5\\n1 8\\n7 8\\n1 3\\n4 1\\n4 8\\n10 8\\n7 3\\n10 1\\n2 8\\n2 5\\n10 7\\n3 4\\n5 8\\n1 1\\n2 4\\n10 6\\n4 3\\n8 1\\n6 10\\n9 7\\n10 10\\n9 1\\n9 6\\n10 10\\n10 10\\n10 1\\n10 10\\n10 7\\n7 9\\n1 6\\n8 5\\n5 9\\n7 4\\n10 3\\n10 7\\n3 2\\n5 5\\n6 8\\n10 2\\n6 8\\n1 2\\n8 1\\n8 1\\n10 3\\n2 1\\n1 7\\n9 6\\n7 4\\n9 10\\n1 3\\n3 9\\n6 1\\n8 10\\n10 3\\n7 5\\n5 1\\n5 6\\n5 5\\n10 2\\n10 4\\n1 4\\n10 9\\n8 4\\n5 1\\n5 7\\n1 10\\n7 2\\n7 8\\n5 5\\n9 1\\n2 2\\n1 4\\n10 9\\n6 10\\n5 2\\n9 9\\n3 4\\n8 3\\n1 3\\n4 4\\n5 5\\n10 1\\n1 8\\n3 4\\n1 8\\n5 5\\n1 2\\n3 4\\n2 6\\n5 7\\n2 6\\n8 10\\n8 9\\n5 6\\n9 10\\n10 10\\n10 6\\n1 4\\n5 7\\n10 2\\n5 9\\n10 9\\n8 6\\n5 1\\n5 7\\n9 3\\n10 8\\n4 7\\n7 4\\n2 10\\n1 8\\n5 8\\n2 9\\n9 3\\n7 3\\n8 8\\n7 4\\n2 10\\n5 1\\n6 4\\n7 1\\n9 5\\n1 7\\n9 7\\n7 5\\n1 10\\n2 5\\n4 7\\n10 9\\n10 1\\n10 5\\n5 4\\n4 9\\n3 2\\n3 8\\n2 2\\n5 6\\n10 9\\n1 5\\n3 9\\n3 8\\n8 10\\n10 5\\n10 2\\n5 7\\n5 1\\n5 10\\n10 10\\n7 1\\n10 3\\n10 10\\n6 5\\n5 6\\n2 5\\n4 7\\n9 7\\n10 9\\n2 10\\n4 9\\n2 6\\n5 3\\n4 4\\n1 10\\n5 5\\n2 7\\n8 3\\n4 5\\n1 4\\n10 1\\n3 9\\n3 3\\n6 8\\n4 10\\n3 10\\n5 7\\n7 7\\n8 6\\n6 1\\n4 4\\n1 10\\n2 2\\n5 9\\n6 3\\n10 1\\n7 8\\n9 4\\n2 1\\n8 3\\n3 5\\n2 2\\n4 5\\n4 6\\n2 9\\n6 1\\n4 7\\n4 9\\n8 6\\n7 6\\n5 10\\n10 2\\n4 2\\n9 10\\n3 1\\n9 1\\n4 4\\n5 5\\n3 9\\n8 3\\n1 3\\n5 8\\n1 3\\n7 2\\n10 3\\n4 10\\n8 4\\n10 6\\n2 4\\n10 9\\n1 6\\n2 1\\n5 6\\n1 5\\n5 9\\n7 10\\n9 5\\n2 6\\n7 6\\n7 5\\n2 8\\n7 6\\n1 7\\n8 4\\n7 2\\n6 9\\n6 4\\n3 8\\n6 7\\n3 10\\n3 4\\n8 4\\n5 7\\n3 7\\n10 8\\n3 2\\n6 1\\n9 2\\n4 9\\n1 2\\n1 7\\n4 3\\n3 7\\n4 7\\n6 2\\n5 2\\n8 4\\n1 7\\n6 8\\n1 5\\n7 1\\n8 4\\n5 7\\n4 5\\n7 8\\n10 7\\n8 5\\n3 7\\n5 8\\n10 8\\n4 4\\n3 6\\n2 8\\n2 10\\n4 5\\n7 2\\n9 2\\n5 10\\n4 9\\n1 7\\n3 3\\n6 9\\n3 8\\n9 6\\n5 6\\n9 5\\n6 7\\n3 8\\n3 4\\n5 2\\n4 4\\n2 10\\n1 4\\n2 2\\n7 3\\n8 1\\n8 2\\n9 4\\n1 10\\n4 5\\n6 8\\n9 2\\n1 3\\n9 4\\n6 7\\n6 7\\n2 7\\n10 5\\n10 8\\n6 10\\n9 2\\n1 6\\n1 3\\n1 9\\n7 5\\n7 8\\n6 2\\n1 7\\n1 5\\n5 5\\n5 10\\n6 6\\n10 6\\n6 10\\n7 8\\n6 10\\n6 6\\n2 5\\n2 4\\n9 6\\n2 2\\n1 7\\n2 4\\n10 5\\n2 5\\n4 1\\n1 7\\n8 4\\n8 10\\n1 7\\n8 6\\n7 5\\n8 9\\n4 10\\n10 6\\n10 6\\n7 2\\n9 3\\n1 9\\n2 8\\n5 10\\n9 2\\n4 2\\n6 9\\n5 8\\n10 3\\n10 2\\n6 6\\n3 2\\n8 9\\n9 9\\n4 7\\n1 7\\n7 7\\n4 10\\n2 2\\n2 8\\n2 4\\n3 8\\n7 5\\n4 4\\n3 10\\n1 6\\n5 2\\n7 2\\n5 6\\n3 8\\n2 6\\n4 5\\n7 7\\n7 10\\n9 2\\n6 2\\n6 7\\n4 5\\n2 10\\n6 3\\n1 9\\n2 9\\n10 2\\n4 6\\n9 9\\n2 5\\n7 8\\n7 5\\n10 8\\n1 8\\n1 5\\n3 1\\n6 8\\n9 7\\n2 4\\n6 2\\n1 9\\n1 8\\n4 3\\n4 10\\n8 5\\n5 9\\n1 6\\n2 5\\n4 7\\n10 3\\n10 5\\n5 2\\n8 10\\n9 6\\n3 4\\n9 2\\n9 9\\n10 8\\n10 10\\n8 3\\n8 2\\n4 5\\n7 9\\n7 4\\n5 8\\n4 4\\n3 3\\n6 2\\n3 4\\n4 5\\n8 1\\n4 7\\n9 5\\n3 3\\n3 5\\n6 4\\n1 8\\n3 1\\n5 10\\n3 5\\n4 2\\n7 2\\n5 9\\n1 4\\n9 1\\n6 4\\n4 9\\n6 8\\n6 8\\n846\\n8 7\\n8 4\\n1 10\\n3 4\\n9 5\\n1 2\\n2 5\\n8 5\\n2 6\\n8 10\\n4 8\\n1 7\\n4 10\\n6 4\\n2 8\\n1 3\\n5 9\\n2 3\\n4 10\\n1 10\\n5 3\\n7 5\\n2 3\\n6 2\\n3 9\\n1 3\\n9 8\\n8 3\\n4 3\\n5 1\\n7 6\\n9 1\\n1 4\\n9 8\\n8 8\\n7 6\\n1 9\\n1 8\\n3 5\\n1 4\\n3 6\\n8 7\\n8 2\\n6 6\\n9 4\\n2 5\\n7 3\\n1 7\\n5 7\\n7 5\\n3 1\\n10 3\\n8 8\\n8 1\\n8 9\\n10 7\\n7 1\\n1 5\\n2 5\\n1 2\\n7 4\\n2 10\\n3 2\\n7 2\\n3 1\\n8 9\\n2 10\\n7 7\\n9 5\\n2 10\\n10 4\\n7 3\\n10 5\\n10 9\\n2 5\\n9 3\\n1 4\\n4 9\\n8 6\\n9 2\\n2 6\\n2 6\\n7 1\\n3 4\\n4 4\\n3 4\\n4 6\\n3 5\\n9 8\\n2 2\\n2 6\\n8 3\\n8 8\\n8 3\\n10 4\\n2 6\\n4 2\\n7 8\\n8 4\\n6 1\\n5 6\\n9 2\\n5 8\\n8 6\\n5 3\\n5 5\\n7 10\\n5 9\\n10 2\\n9 4\\n9 1\\n7 6\\n1 10\\n3 6\\n1 2\\n4 9\\n1 4\\n9 8\\n10 7\\n6 6\\n2 1\\n9 9\\n3 10\\n8 7\\n10 1\\n6 5\\n9 2\\n8 5\\n3 5\\n10 5\\n8 2\\n5 10\\n5 1\\n4 2\\n10 4\\n3 2\\n8 10\\n5 8\\n2 10\\n10 3\\n4 7\\n7 3\\n7 8\\n5 7\\n10 5\\n2 4\\n9 1\\n7 5\\n2 2\\n10 10\\n3 1\\n1 5\\n5 3\\n7 3\\n8 1\\n10 6\\n6 3\\n6 9\\n2 7\\n4 1\\n10 1\\n1 9\\n2 1\\n5 10\\n5 3\\n4 7\\n10 1\\n7 6\\n6 4\\n1 6\\n4 9\\n10 5\\n3 8\\n3 1\\n7 7\\n7 6\\n9 5\\n10 1\\n8 10\\n1 8\\n9 3\\n7 2\\n8 1\\n5 5\\n10 10\\n4 1\\n10 6\\n5 3\\n4 8\\n7 1\\n10 5\\n2 2\\n3 5\\n1 10\\n9 2\\n2 5\\n4 5\\n10 10\\n6 4\\n5 6\\n3 3\\n3 4\\n3 10\\n9 10\\n7 5\\n9 5\\n6 1\\n5 6\\n2 8\\n3 7\\n5 9\\n2 5\\n3 1\\n6 2\\n10 5\\n10 2\\n9 1\\n1 5\\n5 5\\n9 9\\n7 1\\n2 2\\n4 10\\n5 1\\n2 8\\n7 4\\n2 9\\n1 7\\n1 8\\n8 8\\n3 1\\n2 8\\n1 6\\n8 10\\n5 7\\n2 3\\n6 5\\n7 8\\n4 3\\n9 2\\n7 2\\n5 10\\n8 6\\n10 8\\n9 6\\n1 7\\n3 5\\n8 2\\n8 2\\n2 9\\n9 7\\n2 4\\n3 4\\n4 8\\n5 10\\n5 5\\n1 9\\n5 4\\n7 2\\n5 10\\n9 2\\n9 3\\n4 1\\n7 6\\n10 4\\n4 1\\n10 1\\n1 9\\n8 5\\n2 6\\n2 3\\n6 5\\n8 10\\n3 1\\n3 9\\n7 1\\n10 7\\n9 1\\n4 10\\n2 3\\n1 10\\n5 1\\n1 9\\n2 2\\n6 8\\n7 3\\n4 7\\n8 8\\n10 6\\n4 9\\n2 7\\n4 3\\n3 2\\n9 8\\n4 10\\n10 5\\n4 9\\n6 4\\n5 7\\n7 2\\n6 5\\n7 2\\n9 9\\n10 7\\n2 10\\n6 8\\n2 4\\n2 9\\n6 10\\n8 9\\n1 8\\n1 10\\n6 7\\n7 9\\n6 7\\n7 9\\n9 4\\n6 1\\n5 7\\n8 10\\n1 5\\n7 10\\n4 8\\n3 10\\n1 4\\n4 1\\n5 8\\n8 5\\n4 4\\n7 6\\n8 5\\n9 7\\n8 8\\n6 6\\n8 9\\n9 9\\n5 10\\n3 7\\n8 7\\n9 10\\n1 4\\n5 3\\n4 8\\n3 2\\n1 10\\n8 4\\n10 7\\n2 9\\n8 6\\n3 9\\n8 4\\n1 5\\n6 3\\n7 9\\n8 10\\n7 1\\n9 1\\n10 3\\n2 8\\n5 10\\n3 7\\n1 9\\n4 5\\n5 3\\n9 9\\n10 6\\n6 5\\n4 9\\n8 4\\n7 8\\n3 2\\n4 7\\n7 6\\n6 2\\n6 2\\n1 10\\n10 10\\n8 1\\n7 5\\n6 2\\n6 8\\n8 1\\n4 10\\n9 1\\n7 9\\n8 1\\n10 8\\n5 8\\n6 10\\n5 1\\n5 4\\n9 5\\n3 7\\n6 8\\n6 2\\n7 9\\n1 3\\n10 2\\n6 4\\n1 1\\n4 4\\n4 7\\n1 6\\n8 5\\n3 10\\n4 2\\n7 10\\n1 9\\n9 10\\n4 8\\n1 1\\n4 1\\n4 1\\n3 10\\n8 10\\n6 6\\n6 3\\n7 3\\n1 1\\n4 4\\n4 6\\n7 9\\n6 6\\n6 1\\n6 8\\n3 4\\n4 2\\n9 10\\n7 8\\n7 9\\n6 3\\n1 10\\n8 7\\n10 10\\n2 5\\n8 6\\n7 2\\n7 7\\n8 10\\n1 9\\n1 6\\n5 6\\n6 3\\n6 7\\n3 10\\n6 1\\n5 2\\n6 4\\n5 6\\n5 7\\n1 8\\n7 2\\n9 4\\n1 1\\n9 4\\n4 10\\n2 10\\n4 5\\n3 1\\n10 7\\n6 8\\n9 10\\n1 7\\n7 7\\n1 2\\n3 1\\n8 3\\n3 10\\n6 8\\n7 8\\n5 8\\n6 1\\n10 8\\n4 7\\n1 10\\n5 5\\n4 6\\n10 1\\n10 2\\n6 5\\n5 10\\n6 10\\n1 3\\n8 3\\n8 8\\n10 1\\n3 5\\n9 3\\n9 5\\n2 8\\n3 3\\n8 9\\n8 6\\n9 3\\n8 3\\n3 5\\n4 10\\n1 3\\n7 7\\n3 6\\n5 6\\n8 6\\n3 6\\n1 1\\n9 7\\n3 1\\n5 8\\n4 5\\n7 3\\n8 2\\n3 9\\n5 2\\n8 3\\n10 9\\n2 3\\n6 6\\n5 6\\n6 3\\n10 6\\n4 3\\n6 2\\n7 8\\n7 9\\n3 9\\n8 7\\n9 8\\n5 6\\n7 2\\n7 9\\n9 1\\n1 3\\n10 9\\n6 5\\n7 3\\n6 2\\n8 9\\n9 1\\n4 5\\n6 2\\n1 2\\n8 2\\n8 3\\n6 4\\n8 8\\n7 2\\n4 6\\n9 10\\n6 3\\n10 4\\n7 1\\n3 3\\n9 7\\n5 3\\n9 5\\n5 8\\n8 10\\n2 8\\n3 1\\n10 6\\n6 5\\n2 2\\n1 6\\n6 9\\n8 2\\n10 7\\n3 9\\n7 2\\n7 3\\n6 3\\n3 3\\n2 1\\n4 3\\n2 10\\n5 3\\n5 2\\n2 5\\n3 1\\n5 9\\n1 8\\n6 8\\n1 7\\n9 5\\n3 10\\n7 9\\n9 5\\n6 4\\n10 8\\n4 5\\n2 4\\n4 2\\n4 5\\n2 7\\n9 8\\n3 3\\n2 6\\n4 2\\n3 10\\n10 7\\n9 7\\n7 9\\n1 3\\n1 9\\n4 2\\n10 9\\n5 4\\n5 3\\n4 2\\n7 6\\n8 9\\n9 1\\n5 8\\n7 6\\n2 2\\n3 9\\n1 10\\n7 5\\n7 10\\n2 1\\n4 4\\n8 2\\n1 10\\n3 9\\n6 2\\n8 8\\n4 1\\n7 5\\n2 8\\n1 10\\n10 7\\n2 1\\n1 3\\n9 9\\n8 8\\n10 10\\n8 8\\n2 6\\n5 5\\n2 3\\n2 6\\n10 3\\n9 2\\n8 6\\n5 5\\n3 10\\n4 1\\n5 3\\n4 10\\n6 5\\n5 8\\n8 5\\n2 10\\n1 1\\n5 4\\n6 3\\n2 7\\n3 9\\n5 9\\n8 2\\n8 2\\n8 3\\n4 5\\n4 3\\n7 1\\n2 1\\n7 10\\n4 9\\n6 8\\n4 1\\n8 7\\n8 7\\n1 10\\n7 3\\n3 7\\n6 3\\n3 8\\n4 9\\n3 6\\n1 2\\n10 2\\n1 4\\n4 5\\n2 8\\n4 9\\n7 4\\n6 7\\n4 1\\n9 7\\n10 5\\n7 3\\n6 6\\n8 2\\n7 4\\n8 5\\n6 1\\n4 7\\n4 8\\n5 5\\n5 4\\n9 9\\n9 1\\n8 7\\n5 5\\n6 1\\n6 4\\n1 2\\n1 7\\n9 6\\n7 1\\n6 9\\n8 3\\n4 9\\n6 8\\n6 3\\n5 4\\n6 3\\n1 6\\n5 1\\n9 7\\n4 4\\n6 9\\n4 7\\n4 4\\n3 6\\n6 4\\n3 4\\n7 4\\n8 8\\n9 7\\n9 7\\n7 10\\n3 4\\n6 4\\n7 7\\n2 2\\n1 3\\n2 10\\n4 6\\n2 8\\n6 9\\n3 1\\n4 6\\n4 5\\n1 6\\n7 1\\n10 8\\n8 5\\n9 9\\n8 3\\n1 5\\n7 1\\n3 4\\n2 5\\n8 9\\n4 5\\n2 1\\n9 9\\n7 9\\n3 2\\n7 2\\n1 3\\n6 6\\n7 5\\n2 2\\n3 8\\n1 7\\n3 7\\n6 2\\n1 6\\n3 8\\n1 2\\n10 2\\n3 1\\n9 7\\n1 4\\n3 4\\n6 1\\n1 4\\n9 3\\n1 10\\n7 1\\n5 10\\n7 7\\n4 2\\n8 7\\n5 3\\n1 7\\n3 3\\n2 8\\n10 1\\n5 5\\n1 7\\n9 6\\n2 3\\n1 7\\n7 8\\n3 3\\n10 2\\n8 6\\n10 4\\n9 8\\n2 5\\n6 8\\n9 4\\n4 5\\n5 9\\n2 10\\n5 1\\n4 3\\n10 3\\n5 4\\n5 7\\n6 3\\n7 7\\n7 3\\n6 10\\n5 6\\n8 7\\n2 5\\n10 10\\n2 6\\n4 8\\n8 7\\n7 9\\n2 3\\n8 1\\n5 6\\n3 9\\n9 1\\n1 9\\n9 4\\n3 6\\n8 5\\n5 1\\n9 2\\n2 8\\n9 3\\n7 10\\n3 8\\n8 7\\n2 2\\n9 2\\n9 5\\n3 1\\n7 10\\n4 9\\n7 8\\n735\\n7 8\\n5 9\\n2 5\\n1 2\\n6 1\\n7 2\\n2 7\\n5 6\\n6 2\\n6 9\\n6 3\\n3 8\\n3 2\\n5 7\\n3 7\\n6 9\\n10 5\\n10 8\\n2 8\\n4 1\\n2 5\\n4 8\\n2 4\\n7 10\\n8 2\\n5 10\\n6 1\\n5 5\\n3 1\\n3 1\\n10 2\\n4 6\\n1 2\\n5 7\\n10 6\\n3 2\\n1 2\\n1 7\\n9 7\\n7 6\\n1 10\\n5 4\\n7 5\\n6 8\\n10 8\\n3 7\\n7 10\\n9 9\\n6 1\\n6 6\\n9 8\\n7 8\\n9 7\\n9 1\\n8 8\\n4 3\\n2 3\\n2 5\\n4 5\\n6 9\\n5 5\\n1 9\\n4 8\\n4 9\\n2 10\\n6 1\\n9 9\\n7 2\\n7 2\\n3 7\\n4 8\\n1 4\\n2 5\\n5 1\\n5 8\\n1 6\\n10 9\\n4 8\\n8 7\\n3 3\\n8 6\\n5 1\\n3 1\\n9 9\\n10 6\\n9 2\\n3 9\\n7 2\\n6 4\\n9 8\\n10 8\\n6 1\\n5 6\\n2 4\\n9 2\\n1 3\\n2 2\\n4 8\\n9 4\\n2 8\\n2 1\\n3 7\\n1 9\\n6 10\\n3 4\\n7 10\\n8 3\\n2 4\\n7 2\\n2 10\\n5 5\\n6 10\\n6 1\\n3 3\\n3 9\\n6 6\\n3 5\\n10 6\\n6 3\\n6 4\\n4 4\\n5 7\\n7 6\\n9 5\\n4 3\\n8 3\\n6 4\\n9 8\\n7 2\\n2 6\\n7 4\\n2 6\\n9 8\\n8 1\\n1 1\\n8 3\\n4 2\\n9 8\\n9 10\\n9 1\\n6 9\\n3 9\\n8 7\\n9 4\\n8 9\\n7 3\\n1 7\\n4 1\\n5 5\\n9 6\\n2 6\\n10 4\\n10 9\\n7 2\\n9 10\\n1 9\\n8 1\\n1 7\\n4 9\\n8 1\\n3 10\\n8 7\\n3 8\\n6 3\\n10 7\\n2 6\\n7 10\\n8 9\\n2 2\\n9 7\\n2 8\\n9 8\\n4 5\\n6 10\\n3 4\\n10 8\\n10 2\\n9 9\\n7 1\\n7 4\\n3 10\\n6 6\\n8 8\\n6 8\\n10 10\\n2 2\\n3 9\\n8 4\\n7 1\\n7 4\\n4 7\\n5 1\\n3 1\\n10 7\\n3 4\\n5 3\\n5 5\\n3 6\\n5 4\\n4 3\\n10 5\\n3 4\\n5 2\\n6 9\\n9 10\\n7 4\\n1 1\\n4 5\\n3 7\\n9 8\\n4 6\\n4 8\\n8 7\\n8 9\\n10 5\\n4 9\\n3 5\\n2 3\\n10 3\\n3 9\\n8 9\\n9 6\\n3 10\\n2 9\\n9 8\\n4 2\\n1 10\\n3 4\\n4 4\\n4 10\\n1 3\\n2 7\\n5 8\\n6 9\\n9 1\\n6 9\\n2 6\\n4 9\\n7 4\\n4 10\\n4 3\\n8 1\\n10 5\\n1 10\\n8 4\\n8 2\\n4 9\\n5 7\\n9 3\\n1 5\\n3 4\\n5 9\\n4 9\\n1 5\\n9 1\\n6 1\\n7 1\\n8 5\\n9 10\\n7 1\\n9 6\\n8 9\\n3 1\\n6 8\\n3 10\\n6 4\\n4 3\\n8 9\\n2 3\\n1 2\\n9 3\\n2 4\\n10 10\\n10 3\\n10 9\\n10 9\\n2 3\\n5 7\\n7 4\\n1 1\\n3 10\\n7 3\\n2 10\\n6 1\\n6 1\\n8 7\\n10 9\\n1 7\\n5 6\\n6 9\\n3 1\\n8 5\\n5 3\\n2 6\\n5 5\\n7 9\\n5 3\\n1 7\\n6 9\\n9 6\\n10 8\\n6 8\\n9 7\\n2 9\\n3 5\\n3 3\\n8 3\\n1 1\\n8 4\\n5 7\\n8 7\\n3 3\\n4 4\\n6 6\\n10 10\\n8 6\\n8 9\\n5 2\\n3 6\\n9 6\\n7 2\\n1 3\\n5 5\\n3 2\\n5 2\\n2 5\\n5 7\\n3 3\\n10 1\\n2 10\\n9 8\\n6 4\\n3 4\\n9 10\\n6 4\\n3 8\\n5 3\\n5 3\\n1 2\\n1 8\\n6 10\\n2 8\\n7 10\\n5 3\\n8 9\\n10 1\\n2 8\\n6 3\\n4 5\\n4 4\\n7 8\\n9 4\\n7 9\\n5 10\\n6 3\\n4 7\\n1 5\\n9 1\\n8 7\\n4 2\\n8 4\\n5 8\\n7 10\\n4 7\\n1 3\\n5 3\\n8 7\\n4 7\\n9 8\\n1 10\\n10 9\\n9 9\\n1 9\\n3 4\\n5 9\\n9 10\\n2 9\\n7 5\\n7 3\\n9 2\\n9 1\\n3 3\\n4 1\\n9 2\\n4 2\\n5 10\\n10 2\\n9 8\\n7 1\\n2 1\\n3 1\\n9 10\\n7 7\\n7 9\\n3 6\\n4 6\\n3 3\\n6 3\\n5 3\\n2 9\\n8 10\\n6 2\\n2 7\\n7 10\\n4 6\\n5 3\\n10 9\\n8 1\\n5 1\\n9 5\\n5 6\\n9 7\\n3 8\\n9 7\\n3 10\\n7 8\\n5 8\\n2 1\\n2 10\\n9 2\\n5 4\\n1 7\\n6 9\\n10 2\\n3 6\\n5 8\\n1 2\\n10 2\\n10 3\\n5 7\\n3 2\\n9 10\\n5 6\\n5 8\\n1 3\\n2 7\\n5 6\\n10 5\\n9 4\\n10 7\\n4 6\\n10 7\\n3 9\\n10 5\\n4 2\\n5 3\\n9 10\\n5 7\\n1 3\\n6 1\\n4 9\\n7 4\\n6 6\\n7 5\\n4 3\\n6 6\\n8 9\\n10 7\\n4 8\\n4 1\\n9 9\\n8 7\\n1 7\\n7 7\\n3 9\\n10 5\\n6 5\\n7 10\\n9 1\\n5 9\\n2 7\\n10 8\\n7 4\\n4 4\\n7 4\\n10 1\\n5 7\\n8 10\\n6 7\\n8 2\\n1 1\\n2 3\\n9 4\\n6 4\\n10 8\\n8 8\\n5 1\\n6 7\\n3 9\\n8 7\\n8 5\\n10 8\\n8 3\\n7 8\\n1 9\\n8 3\\n5 1\\n7 8\\n1 6\\n7 2\\n4 5\\n9 6\\n8 7\\n3 3\\n10 6\\n1 5\\n8 5\\n8 5\\n1 5\\n7 5\\n4 6\\n6 5\\n2 3\\n6 6\\n8 4\\n3 2\\n7 7\\n7 7\\n4 5\\n6 10\\n2 5\\n1 9\\n1 1\\n6 4\\n1 2\\n7 9\\n3 5\\n5 8\\n5 2\\n5 4\\n9 9\\n5 6\\n7 2\\n6 5\\n5 2\\n1 5\\n2 7\\n6 1\\n6 8\\n6 4\\n4 8\\n8 6\\n10 2\\n5 9\\n3 4\\n4 1\\n7 5\\n4 8\\n1 7\\n3 8\\n2 7\\n1 4\\n1 8\\n2 3\\n2 2\\n6 7\\n7 3\\n10 4\\n6 5\\n4 6\\n8 8\\n8 2\\n2 10\\n7 9\\n1 1\\n9 6\\n10 9\\n9 1\\n10 3\\n7 9\\n9 4\\n4 3\\n6 10\\n3 1\\n4 1\\n4 6\\n9 1\\n10 3\\n3 5\\n5 10\\n3 8\\n1 10\\n2 9\\n2 8\\n4 3\\n2 7\\n9 8\\n6 6\\n8 2\\n4 7\\n5 1\\n7 6\\n10 10\\n6 4\\n2 2\\n7 8\\n3 9\\n7 10\\n10 2\\n3 2\\n5 9\\n10 7\\n8 7\\n8 10\\n7 6\\n3 2\\n6 3\\n10 7\\n8 7\\n6 3\\n8 2\\n4 9\\n8 6\\n9 7\\n10 3\\n8 4\\n3 7\\n7 10\\n7 2\\n10 1\\n8 4\\n9 2\\n7 1\\n3 9\\n1 2\\n4 1\\n10 8\\n2 1\\n2 3\\n4 5\\n10 6\\n3 1\\n3 8\\n4 10\\n3 8\\n7 9\\n4 6\\n3 6\\n4 5\\n6 9\\n9 8\\n2 8\\n1 6\\n3 8\\n5 1\\n10 1\\n10 3\\n2 10\\n8 2\\n2 5\\n7 4\\n5 10\\n4 5\\n6 10\\n1 6\\n8 5\\n6 5\\n9 8\\n4 1\\n8 7\\n1 5\\n5 9\\n7 10\\n6 9\\n7 3\\n5 9\\n4 2\\n2 9\\n6 1\\n10 2\\n8 10\\n7 4\\n6 2\\n10 8\\n9 10\\n8 10\\n5 7\\n6 5\\n5 3\\n6 3\\n2 3\\n10 3\\n5 4\\n5 7\\n9 3\\n7 6\\n9 1\\n2 10\\n6 2\\n9 1\\n9 5\\n2 1\\n6 10\\n8 4\\n5 4\\n6 5\\n8 7\\n3 1\\n10 7\\n1 5\\n8 2\\n4 7\\n5 4\\n8 3\\n1 1\\n1 6\\n8 1\\n9 4\\n2 2\\n3 3\\n7 9\\n8 8\\n6 7\\n8 8\\n6 4\\n1 9\\n6 9\\n3 2\\n5 2\\n7 9\\n8 3\\n7 1\\n2 1\\n8 8\\n8 9\\n10 10\\n1 9\\n5 9\\n4 10\\n6 2\\n8 6\\n5 9\\n9 7\\n4 6\\n5 9\\n636\\n5 7\\n2 1\\n8 9\\n9 7\\n10 4\\n4 7\\n7 7\\n6 1\\n4 3\\n6 5\\n5 8\\n7 6\\n5 5\\n4 8\\n9 3\\n3 10\\n8 7\\n5 2\\n2 5\\n1 2\\n2 3\\n10 2\\n8 1\\n6 1\\n4 9\\n10 4\\n6 8\\n9 10\\n10 8\\n6 8\\n8 8\\n6 1\\n4 6\\n10 1\\n9 5\\n6 7\\n4 4\\n1 2\\n4 3\\n5 5\\n10 6\\n2 4\\n10 1\\n8 6\\n8 3\\n5 8\\n9 3\\n6 5\\n9 10\\n7 9\\n1 7\\n2 7\\n5 9\\n7 1\\n10 7\\n10 5\\n3 6\\n3 5\\n5 10\\n9 10\\n8 2\\n9 8\\n3 7\\n3 7\\n8 7\\n2 4\\n8 5\\n8 6\\n8 6\\n1 5\\n3 2\\n9 9\\n8 8\\n1 4\\n2 3\\n1 10\\n4 10\\n8 3\\n7 8\\n3 2\\n8 1\\n8 8\\n7 4\\n8 9\\n4 6\\n4 10\\n8 4\\n9 2\\n6 1\\n1 4\\n1 9\\n5 8\\n1 1\\n1 7\\n7 9\\n8 8\\n1 9\\n9 10\\n2 1\\n9 1\\n9 8\\n5 3\\n6 3\\n1 10\\n9 4\\n5 5\\n5 3\\n4 5\\n1 6\\n3 6\\n6 7\\n10 6\\n7 4\\n9 5\\n3 8\\n2 6\\n5 2\\n2 7\\n2 10\\n3 3\\n7 6\\n2 1\\n6 7\\n5 4\\n3 8\\n8 5\\n6 10\\n10 8\\n7 7\\n2 9\\n3 1\\n4 5\\n8 9\\n5 6\\n5 2\\n10 2\\n10 7\\n6 4\\n8 5\\n4 1\\n5 1\\n9 4\\n3 5\\n4 10\\n5 4\\n7 3\\n1 10\\n9 8\\n4 10\\n8 7\\n8 6\\n10 9\\n4 5\\n10 1\\n10 4\\n4 4\\n2 6\\n10 5\\n1 7\\n10 7\\n4 4\\n7 8\\n1 8\\n7 9\\n10 8\\n8 6\\n7 6\\n5 6\\n7 1\\n4 3\\n4 6\\n5 6\\n6 3\\n5 1\\n6 8\\n6 6\\n7 4\\n10 8\\n1 7\\n6 9\\n5 10\\n4 10\\n8 4\\n3 6\\n5 2\\n7 1\\n7 7\\n7 4\\n5 1\\n8 7\\n8 3\\n4 5\\n3 3\\n3 7\\n9 1\\n7 7\\n6 2\\n6 8\\n8 5\\n6 6\\n1 1\\n8 4\\n10 8\\n4 7\\n3 9\\n7 2\\n8 1\\n8 9\\n7 2\\n1 5\\n1 3\\n2 5\\n2 6\\n3 6\\n1 3\\n1 5\\n4 3\\n10 6\\n2 2\\n3 9\\n9 6\\n9 1\\n6 6\\n3 2\\n6 8\\n3 7\\n2 1\\n3 2\\n4 2\\n5 9\\n1 10\\n10 8\\n3 4\\n7 8\\n2 2\\n2 8\\n9 5\\n1 10\\n1 1\\n3 10\\n7 10\\n4 9\\n9 9\\n2 2\\n5 3\\n2 5\\n10 9\\n1 5\\n7 2\\n2 6\\n7 2\\n8 10\\n2 2\\n3 6\\n4 7\\n9 7\\n4 10\\n6 9\\n5 6\\n7 2\\n7 2\\n3 1\\n8 9\\n5 7\\n2 8\\n3 6\\n2 10\\n1 7\\n9 5\\n9 10\\n7 9\\n10 10\\n7 8\\n10 1\\n4 1\\n7 3\\n4 2\\n6 6\\n6 2\\n8 4\\n10 3\\n3 3\\n9 1\\n3 9\\n5 8\\n8 4\\n6 8\\n8 5\\n7 5\\n10 9\\n6 1\\n8 7\\n3 3\\n6 7\\n3 10\\n1 7\\n4 6\\n7 10\\n7 8\\n6 3\\n2 4\\n4 1\\n8 3\\n1 9\\n4 5\\n7 8\\n2 10\\n6 6\\n2 3\\n3 10\\n7 7\\n9 7\\n7 2\\n3 9\\n10 4\\n1 5\\n5 7\\n6 8\\n8 1\\n3 2\\n4 3\\n4 10\\n5 9\\n4 8\\n2 6\\n6 5\\n10 10\\n10 3\\n1 10\\n4 2\\n7 8\\n9 10\\n4 8\\n2 5\\n3 9\\n6 8\\n4 10\\n10 10\\n5 8\\n9 8\\n10 4\\n6 5\\n4 6\\n9 5\\n1 1\\n2 9\\n10 5\\n5 7\\n4 4\\n5 10\\n2 3\\n7 1\\n1 9\\n3 6\\n1 5\\n4 3\\n5 9\\n7 10\\n1 6\\n9 6\\n5 7\\n5 2\\n5 9\\n1 2\\n9 2\\n9 3\\n7 3\\n4 2\\n10 9\\n2 7\\n5 3\\n2 3\\n2 8\\n2 2\\n4 1\\n6 1\\n8 8\\n6 8\\n4 7\\n10 7\\n9 4\\n4 10\\n7 1\\n9 2\\n4 3\\n5 5\\n10 4\\n10 7\\n9 9\\n10 7\\n4 10\\n1 10\\n1 4\\n10 7\\n7 7\\n2 8\\n2 9\\n9 9\\n10 1\\n3 3\\n5 8\\n5 9\\n9 8\\n1 8\\n5 7\\n1 8\\n8 1\\n9 5\\n8 7\\n3 10\\n8 3\\n1 7\\n3 1\\n9 8\\n9 7\\n8 7\\n7 7\\n8 5\\n4 10\\n3 2\\n3 8\\n6 7\\n4 10\\n9 3\\n8 8\\n1 5\\n2 1\\n10 5\\n9 9\\n8 5\\n6 6\\n6 2\\n4 8\\n9 7\\n1 9\\n8 6\\n6 3\\n2 5\\n5 6\\n4 7\\n10 6\\n10 7\\n6 7\\n4 10\\n5 7\\n1 7\\n4 7\\n4 7\\n1 2\\n6 9\\n8 9\\n8 2\\n6 5\\n4 3\\n10 10\\n9 5\\n7 7\\n8 2\\n9 5\\n4 7\\n6 10\\n6 2\\n1 10\\n6 7\\n1 10\\n4 3\\n5 10\\n2 5\\n3 7\\n1 4\\n7 9\\n7 2\\n10 3\\n1 6\\n4 5\\n5 3\\n5 7\\n10 8\\n3 8\\n5 6\\n7 8\\n10 10\\n5 10\\n9 7\\n8 8\\n3 3\\n4 6\\n10 10\\n5 7\\n6 1\\n6 8\\n6 7\\n1 3\\n1 9\\n9 3\\n3 3\\n5 9\\n3 6\\n7 9\\n9 9\\n10 8\\n10 7\\n9 5\\n4 3\\n3 5\\n5 2\\n7 5\\n10 5\\n4 4\\n9 3\\n6 10\\n4 2\\n4 10\\n2 5\\n3 2\\n8 5\\n5 6\\n3 6\\n9 3\\n3 7\\n3 2\\n6 2\\n10 9\\n3 1\\n8 6\\n7 8\\n4 7\\n10 2\\n5 5\\n5 5\\n9 8\\n8 8\\n8 1\\n9 5\\n4 7\\n4 9\\n2 6\\n3 6\\n5 7\\n2 10\\n2 10\\n7 9\\n7 3\\n6 7\\n2 1\\n7 6\\n9 4\\n6 5\\n2 2\\n8 3\\n5 7\\n5 4\\n3 3\\n1 2\\n9 9\\n5 9\\n9 10\\n6 3\\n8 5\\n8 1\\n9 5\\n7 1\\n4 7\\n6 8\\n10 7\\n5 1\\n7 6\\n4 10\\n2 4\\n10 9\\n10 7\\n9 10\\n1 2\\n4 7\\n6 6\\n9 8\\n8 2\\n8 2\\n7 1\\n4 9\\n6 6\\n5 10\\n3 4\\n6 4\\n9 1\\n7 7\\n2 4\\n7 8\\n6 4\\n8 10\\n1 10\\n5 2\\n8 3\\n1 7\\n3 7\\n4 1\\n5 8\\n6 3\\n4 8\\n1 6\\n4 5\\n2 2\\n4 10\\n8 5\\n7 10\\n6 1\\n2 7\\n3 8\\n6 1\\n9 5\\n9 6\\n9 10\\n4 4\\n1 3\\n4 6\\n2 1\\n5 9\\n4 2\\n5 10\\n5 3\\n1 8\\n2 9\\n7 3\\n4 9\\n7 7\\n10 8\\n6 4\\n1 2\\n5 3\\n4 7\\n9 6\\n10 6\\n6 5\\n5 6\\n6 4\\n6 5\\n991\\n6 1\\n6 5\\n7 7\\n1 7\\n1 4\\n10 3\\n4 2\\n5 9\\n2 10\\n5 8\\n5 6\\n3 6\\n10 6\\n9 4\\n2 10\\n2 8\\n6 7\\n3 2\\n8 2\\n5 4\\n9 2\\n1 7\\n5 2\\n5 2\\n1 4\\n1 5\\n6 3\\n3 6\\n1 2\\n2 10\\n9 10\\n2 4\\n6 5\\n1 10\\n10 3\\n4 6\\n7 9\\n7 2\\n1 1\\n4 10\\n8 4\\n8 8\\n7 3\\n7 1\\n8 4\\n10 6\\n2 3\\n8 9\\n3 8\\n4 2\\n7 2\\n3 5\\n4 10\\n10 6\\n8 4\\n4 4\\n9 5\\n5 1\\n6 1\\n3 9\\n1 4\\n10 4\\n7 4\\n6 5\\n1 2\\n2 6\\n6 1\\n8 6\\n5 7\\n10 5\\n4 3\\n2 9\\n2 6\\n10 4\\n6 6\\n5 3\\n4 2\\n1 7\\n8 5\\n1 6\\n7 8\\n7 1\\n4 1\\n8 7\\n9 3\\n10 6\\n6 5\\n1 10\\n5 4\\n1 4\\n1 6\\n9 4\\n7 10\\n5 4\\n3 2\\n4 8\\n7 4\\n3 2\\n5 7\\n1 9\\n4 4\\n10 5\\n9 2\\n3 6\\n8 7\\n9 4\\n10 9\\n2 10\\n10 1\\n9 6\\n9 5\\n2 10\\n6 1\\n6 1\\n3 3\\n10 2\\n6 8\\n7 10\\n9 6\\n4 5\\n10 3\\n7 7\\n9 6\\n8 3\\n10 3\\n1 2\\n10 7\\n1 4\\n8 5\\n10 6\\n2 10\\n4 10\\n2 10\\n8 4\\n10 9\\n10 5\\n8 10\\n4 5\\n9 8\\n8 3\\n4 8\\n4 1\\n9 10\\n8 6\\n2 10\\n8 8\\n7 2\\n10 6\\n4 1\\n1 9\\n2 7\\n1 3\\n8 8\\n9 6\\n5 8\\n7 6\\n5 4\\n3 5\\n6 3\\n3 6\\n1 1\\n5 10\\n6 9\\n9 1\\n3 3\\n9 1\\n9 9\\n6 8\\n6 6\\n7 1\\n2 4\\n3 8\\n7 9\\n3 5\\n4 6\\n8 9\\n2 5\\n9 3\\n1 2\\n1 8\\n3 1\\n1 10\\n7 4\\n3 10\\n4 2\\n1 2\\n4 7\\n1 1\\n2 9\\n10 8\\n6 7\\n1 6\\n6 10\\n5 4\\n4 1\\n1 3\\n4 6\\n3 10\\n10 2\\n4 7\\n5 3\\n8 6\\n2 8\\n5 2\\n5 10\\n8 7\\n1 1\\n9 1\\n2 6\\n6 10\\n2 8\\n4 5\\n3 9\\n6 5\\n3 6\\n6 7\\n8 9\\n3 10\\n3 7\\n8 4\\n8 5\\n9 10\\n9 7\\n6 10\\n1 8\\n7 7\\n4 1\\n4 1\\n7 7\\n4 9\\n5 1\\n5 9\\n10 10\\n4 9\\n10 9\\n8 3\\n10 5\\n6 6\\n4 2\\n5 4\\n8 8\\n4 10\\n1 10\\n2 5\\n3 5\\n1 10\\n2 6\\n10 1\\n2 9\\n1 5\\n10 10\\n2 1\\n7 7\\n1 4\\n7 4\\n10 2\\n8 6\\n9 2\\n1 8\\n1 6\\n6 9\\n6 3\\n1 4\\n10 5\\n10 6\\n3 7\\n2 9\\n2 9\\n8 6\\n5 6\\n8 1\\n7 10\\n10 7\\n9 4\\n1 9\\n10 2\\n3 6\\n5 6\\n6 7\\n10 1\\n3 8\\n2 3\\n3 10\\n9 1\\n2 5\\n6 9\\n4 10\\n1 1\\n3 1\\n3 7\\n4 5\\n10 10\\n4 5\\n10 5\\n5 7\\n9 8\\n6 8\\n5 7\\n8 8\\n10 9\\n7 2\\n5 7\\n8 6\\n9 1\\n5 3\\n4 10\\n5 1\\n7 8\\n9 5\\n4 5\\n2 2\\n1 1\\n2 4\\n8 1\\n7 4\\n8 8\\n1 1\\n7 5\\n6 1\\n3 6\\n7 9\\n7 5\\n1 8\\n1 10\\n7 5\\n10 9\\n5 5\\n4 10\\n1 8\\n8 5\\n10 8\\n5 4\\n3 1\\n1 8\\n2 8\\n4 10\\n1 9\\n9 8\\n8 4\\n3 7\\n2 8\\n3 2\\n2 4\\n4 4\\n9 8\\n10 8\\n1 1\\n3 8\\n3 3\\n9 4\\n6 10\\n7 7\\n4 1\\n5 1\\n1 10\\n1 5\\n5 4\\n10 3\\n9 1\\n3 4\\n6 9\\n9 1\\n1 5\\n10 6\\n3 8\\n1 8\\n3 2\\n2 2\\n6 7\\n6 7\\n9 9\\n5 9\\n2 2\\n1 9\\n2 10\\n2 8\\n4 8\\n9 8\\n8 2\\n5 1\\n3 5\\n5 5\\n2 8\\n9 5\\n10 7\\n1 8\\n2 2\\n10 7\\n6 1\\n9 7\\n10 8\\n9 10\\n10 8\\n8 9\\n5 1\\n8 8\\n6 6\\n4 7\\n6 9\\n1 8\\n4 6\\n9 8\\n6 1\\n3 7\\n10 2\\n9 10\\n5 5\\n5 3\\n5 10\\n6 2\\n8 9\\n10 7\\n9 8\\n9 3\\n9 7\\n4 7\\n1 5\\n3 3\\n8 3\\n6 9\\n5 2\\n6 4\\n1 9\\n2 5\\n9 6\\n3 1\\n2 10\\n6 10\\n3 4\\n7 8\\n3 8\\n5 2\\n7 8\\n3 3\\n4 9\\n9 10\\n6 10\\n7 8\\n6 9\\n9 5\\n3 9\\n10 7\\n6 6\\n9 1\\n9 5\\n3 8\\n2 3\\n7 1\\n10 10\\n8 5\\n9 3\\n10 3\\n7 3\\n10 9\\n7 10\\n6 7\\n1 9\\n6 9\\n10 2\\n9 3\\n3 4\\n5 10\\n7 7\\n1 3\\n3 10\\n3 9\\n2 8\\n8 7\\n9 8\\n4 10\\n8 7\\n7 6\\n8 2\\n4 7\\n7 1\\n8 8\\n10 2\\n2 4\\n1 1\\n5 1\\n8 5\\n9 6\\n4 3\\n9 9\\n3 9\\n7 5\\n3 6\\n7 3\\n5 1\\n10 9\\n1 2\\n1 10\\n8 10\\n6 4\\n8 10\\n1 1\\n4 8\\n7 5\\n6 8\\n2 5\\n1 7\\n7 5\\n9 1\\n5 5\\n1 7\\n6 9\\n6 9\\n10 4\\n3 4\\n5 10\\n4 2\\n8 1\\n6 9\\n7 9\\n7 4\\n9 4\\n6 6\\n2 2\\n7 3\\n10 6\\n3 3\\n10 4\\n1 3\\n3 8\\n9 2\\n1 10\\n2 6\\n4 9\\n7 5\\n5 5\\n6 2\\n9 10\\n5 7\\n6 3\\n3 3\\n7 5\\n6 2\\n5 2\\n9 2\\n1 8\\n8 4\\n4 9\\n10 5\\n1 5\\n7 9\\n2 3\\n5 1\\n10 6\\n6 8\\n1 8\\n5 8\\n9 7\\n1 3\\n9 3\\n8 7\\n2 10\\n3 5\\n3 1\\n2 9\\n5 7\\n2 8\\n4 3\\n10 7\\n7 5\\n9 8\\n8 2\\n1 7\\n9 4\\n8 5\\n4 9\\n6 2\\n8 3\\n4 4\\n2 8\\n7 9\\n8 3\\n4 2\\n9 1\\n4 10\\n8 3\\n2 10\\n2 7\\n5 1\\n7 2\\n5 2\\n5 7\\n9 9\\n7 2\\n5 6\\n2 2\\n2 9\\n6 7\\n5 2\\n1 3\\n4 2\\n2 6\\n3 1\\n7 4\\n3 6\\n7 3\\n8 9\\n8 1\\n2 9\\n10 9\\n4 10\\n8 4\\n9 2\\n9 4\\n8 1\\n3 5\\n2 8\\n4 6\\n10 3\\n9 8\\n6 6\\n10 3\\n1 2\\n8 1\\n6 4\\n6 10\\n9 7\\n5 10\\n6 4\\n5 1\\n3 5\\n6 10\\n8 10\\n2 10\\n1 7\\n5 5\\n2 1\\n2 4\\n1 6\\n7 9\\n9 6\\n4 8\\n2 4\\n9 1\\n8 8\\n4 1\\n7 4\\n7 8\\n8 3\\n3 1\\n1 8\\n9 9\\n10 3\\n9 9\\n5 6\\n3 7\\n7 2\\n5 10\\n9 10\\n7 1\\n1 2\\n2 7\\n4 8\\n2 10\\n1 5\\n9 5\\n2 2\\n4 10\\n5 2\\n8 10\\n3 8\\n3 7\\n4 8\\n2 8\\n8 5\\n6 3\\n1 4\\n8 4\\n4 1\\n5 7\\n9 6\\n3 9\\n6 9\\n6 6\\n7 8\\n3 5\\n9 4\\n7 1\\n1 2\\n4 9\\n4 4\\n10 10\\n10 10\\n8 9\\n7 9\\n2 7\\n5 8\\n2 6\\n10 10\\n2 8\\n5 4\\n3 10\\n2 10\\n4 9\\n2 10\\n5 1\\n1 2\\n3 1\\n6 10\\n9 9\\n5 2\\n8 1\\n1 2\\n3 3\\n3 4\\n3 2\\n1 8\\n10 1\\n2 4\\n4 4\\n1 9\\n8 3\\n5 5\\n3 6\\n5 3\\n7 2\\n1 5\\n8 5\\n2 9\\n1 5\\n8 1\\n1 9\\n10 6\\n8 4\\n8 8\\n3 9\\n9 8\\n8 1\\n9 7\\n4 4\\n3 1\\n4 9\\n8 1\\n6 1\\n7 5\\n6 3\\n2 6\\n1 9\\n1 9\\n10 5\\n4 9\\n8 2\\n10 2\\n1 4\\n4 4\\n2 5\\n1 6\\n8 4\\n3 7\\n1 6\\n7 10\\n5 9\\n8 8\\n10 10\\n1 7\\n3 8\\n6 6\\n10 1\\n4 5\\n6 6\\n5 8\\n1 7\\n5 8\\n2 8\\n5 7\\n8 1\\n4 6\\n8 3\\n2 9\\n2 6\\n7 9\\n9 3\\n9 7\\n8 7\\n7 1\\n5 6\\n6 1\\n2 8\\n8 7\\n9 7\\n2 9\\n5 10\\n2 7\\n9 3\\n5 10\\n3 8\\n8 3\\n9 2\\n3 1\\n8 9\\n6 9\\n8 5\\n3 5\\n8 9\\n10 5\\n2 10\\n4 9\\n7 3\\n4 5\\n6 8\\n9 10\\n8 2\\n6 6\\n10 4\\n5 4\\n4 1\\n10 2\\n9 2\\n6 8\\n8 6\\n1 7\\n8 9\\n6 4\\n8 5\\n7 2\\n1 5\\n9 4\\n6 3\\n4 8\\n6 9\\n4 4\\n2 9\\n3 10\\n4 1\\n3 4\\n6 4\\n3 10\\n1 2\\n6 9\\n1 1\\n2 4\\n6 7\\n5 3\\n9 2\\n2 5\\n1 2\\n1 1\\n4 4\\n1 9\\n4 3\\n2 1\\n9 4\\n2 5\\n3 1\\n5 8\\n7 4\\n8 5\\n5 6\\n4 8\\n4 8\\n10 2\\n4 5\\n8 10\\n1 2\\n3 3\\n9 10\\n6 9\\n5 1\\n3 4\\n6 6\\n4 8\\n9 7\\n7 9\\n10 2\\n3 8\\n6 4\\n7 8\\n3 10\\n3 1\\n7 1\\n3 5\\n6 3\\n7 2\\n8 9\\n2 7\\n5 7\\n9 2\\n7 2\\n8 6\\n6 2\\n6 2\\n3 5\\n2 1\\n6 9\\n10 6\\n2 6\\n9 10\\n1 10\\n2 10\\n1 5\\n3 1\\n7 2\\n6 6\\n2 8\\n5 9\\n7 9\\n8 1\\n6 3\\n2 4\\n8 6\\n6 10\\n3 3\\n5 8\\n2 7\\n7 3\\n5 7\\n6 5\\n5 5\\n4 1\\n1 5\\n7 9\\n4 9\\n3 10\\n7 5\\n2 2\\n4 9\\n1 4\\n7 4\\n3 8\\n10 3\\n2 6\\n3 4\\n10 7\\n2 6\\n6 10\\n5 4\\n10 5\\n5 2\\n4 2\\n3 3\\n4 8\\n5 6\\n1 6\\n6 7\\n3 7\\n7 8\\n9 3\\n2 9\\n10 10\\n5 1\\n6 8\\n9 5\\n8 10\\n1 6\\n10 7\\n7 5\\n9 3\\n5 8\\n5 9\\n5 10\\n10 6\\n6 8\\n8 5\\n10 4\\n1 2\\n1 2\\n8 4\\n2 2\\n1 3\\n5 3\\n1 4\\n7 6\\n9 8\\n3 6\\n9 2\\n2 3\\n8 1\\n1 8\\n9 2\\n5 6\\n2 5\\n8 1\\n3 2\\n7 8\\n7 8\\n9 1\\n5 6\\n7 1\\n3 3\\n8 5\\n5 5\\n6 5\\n7 4\\n10 9\\n3 10\\n6 9\\n1 9\\n336\\n9 1\\n7 9\\n2 8\\n4 9\\n9 4\\n4 3\\n5 1\\n2 2\\n9 7\\n1 2\\n3 5\\n1 5\\n9 7\\n4 3\\n3 4\\n5 6\\n10 10\\n8 5\\n7 4\\n2 9\\n9 2\\n4 10\\n3 7\\n5 5\\n5 4\\n4 9\\n5 10\\n4 9\\n8 5\\n2 8\\n10 7\\n10 8\\n7 8\\n7 10\\n3 5\\n7 2\\n6 9\\n8 1\\n7 10\\n10 5\\n4 3\\n1 10\\n8 5\\n4 9\\n8 3\\n5 4\\n9 5\\n2 7\\n3 7\\n5 1\\n7 2\\n10 9\\n6 8\\n6 8\\n2 5\\n10 3\\n6 2\\n6 7\\n10 6\\n10 2\\n8 7\\n3 7\\n8 1\\n10 3\\n3 9\\n7 5\\n9 5\\n5 8\\n2 3\\n4 4\\n2 10\\n4 1\\n5 2\\n3 1\\n10 5\\n2 10\\n1 5\\n4 9\\n3 5\\n3 4\\n4 7\\n9 9\\n9 3\\n7 6\\n1 7\\n5 9\\n3 8\\n5 9\\n3 1\\n8 2\\n9 3\\n10 9\\n4 5\\n7 9\\n4 6\\n9 7\\n1 6\\n10 2\\n1 1\\n9 2\\n6 4\\n4 10\\n3 6\\n4 9\\n5 10\\n2 5\\n7 8\\n3 3\\n2 9\\n1 3\\n3 10\\n2 6\\n5 2\\n3 8\\n9 6\\n5 1\\n5 7\\n2 5\\n3 4\\n10 2\\n10 7\\n2 8\\n9 2\\n4 2\\n7 10\\n2 7\\n7 8\\n3 5\\n5 9\\n9 10\\n10 5\\n5 4\\n4 5\\n3 2\\n6 4\\n8 2\\n6 4\\n4 10\\n9 3\\n4 5\\n1 3\\n9 8\\n2 2\\n9 8\\n4 3\\n7 10\\n5 4\\n4 8\\n7 2\\n5 7\\n4 2\\n1 2\\n6 3\\n2 9\\n10 10\\n8 3\\n3 8\\n6 3\\n9 6\\n6 4\\n10 5\\n3 1\\n3 3\\n7 1\\n9 5\\n4 10\\n6 1\\n9 9\\n3 6\\n3 7\\n9 7\\n4 7\\n8 10\\n2 8\\n2 8\\n1 10\\n8 1\\n3 10\\n5 3\\n8 10\\n1 1\\n8 10\\n3 1\\n5 3\\n2 4\\n2 1\\n7 7\\n5 5\\n5 2\\n2 6\\n2 8\\n4 5\\n3 9\\n7 2\\n4 3\\n1 1\\n10 9\\n2 6\\n5 1\\n8 1\\n3 1\\n1 10\\n1 8\\n5 2\\n5 9\\n10 7\\n7 3\\n8 4\\n3 3\\n10 7\\n3 3\\n10 6\\n5 2\\n4 10\\n8 9\\n6 7\\n8 10\\n6 3\\n1 4\\n6 1\\n8 3\\n8 10\\n9 4\\n3 7\\n9 10\\n9 7\\n9 3\\n10 7\\n7 6\\n7 4\\n10 2\\n8 2\\n3 5\\n5 8\\n7 3\\n4 1\\n8 7\\n1 3\\n4 1\\n5 4\\n5 2\\n8 5\\n10 9\\n2 2\\n10 2\\n4 2\\n6 7\\n6 3\\n7 9\\n8 5\\n1 4\\n3 10\\n6 4\\n8 1\\n7 5\\n9 4\\n3 2\\n8 1\\n2 5\\n5 7\\n8 2\\n2 8\\n3 1\\n2 10\\n1 4\\n2 8\\n5 7\\n2 10\\n5 7\\n10 3\\n3 4\\n4 4\\n1 4\\n1 10\\n5 8\\n1 5\\n4 7\\n1 10\\n9 1\\n9 7\\n5 8\\n3 8\\n4 7\\n3 8\\n1 3\\n9 6\\n4 4\\n2 3\\n9 7\\n5 6\\n4 8\\n2 7\\n8 8\\n7 3\\n9 6\\n6 4\\n8 3\\n5 3\\n7 4\\n8 10\\n7 1\\n5 3\\n6 5\\n9 9\\n6 2\\n2 4\\n3 10\\n3 9\\n3 8\\n3 4\\n8 7\\n6 9\\n7 7\\n2 4\\n9 8\\n10 9\\n3 1\\n6 5\\n1 5\\n4 4\\n4 5\\n3 7\\n1 10\\n2 10\\n5 8\\n5 7\\n3 2\\n8 3\\n5 1\\n4 1\\n5 2\\n4 3\\n6 8\\n8 7\\n9 9\\n5 1\\n203\\n2 4\\n2 5\\n4 4\\n8 3\\n3 2\\n2 10\\n7 7\\n3 9\\n4 7\\n5 2\\n3 10\\n1 1\\n8 3\\n1 2\\n3 5\\n1 7\\n7 5\\n6 9\\n10 9\\n3 2\\n1 6\\n2 10\\n9 6\\n3 1\\n6 8\\n8 6\\n6 4\\n1 10\\n9 1\\n2 7\\n7 9\\n5 10\\n6 5\\n8 1\\n2 7\\n5 3\\n4 6\\n3 7\\n9 1\\n4 3\\n8 6\\n3 4\\n2 2\\n2 3\\n5 4\\n6 5\\n2 9\\n6 1\\n10 7\\n1 7\\n6 3\\n1 7\\n1 3\\n3 3\\n1 1\\n9 6\\n8 3\\n5 5\\n4 5\\n9 1\\n9 3\\n3 10\\n1 5\\n5 9\\n7 1\\n2 7\\n3 1\\n10 1\\n4 2\\n7 5\\n8 2\\n1 3\\n2 10\\n3 8\\n10 5\\n9 5\\n9 7\\n4 10\\n10 8\\n7 7\\n9 4\\n5 6\\n4 4\\n3 4\\n1 2\\n9 9\\n7 3\\n1 6\\n7 6\\n1 6\\n7 7\\n3 8\\n2 10\\n5 10\\n1 9\\n8 8\\n1 2\\n7 5\\n5 8\\n7 4\\n3 1\\n6 4\\n2 10\\n8 6\\n5 10\\n3 10\\n10 7\\n4 8\\n4 9\\n2 4\\n5 3\\n6 10\\n3 8\\n9 3\\n7 3\\n6 9\\n5 5\\n4 8\\n6 4\\n10 7\\n2 9\\n1 2\\n2 3\\n7 8\\n6 6\\n7 10\\n4 9\\n5 9\\n2 3\\n8 9\\n9 4\\n8 7\\n4 7\\n9 3\\n2 5\\n3 5\\n7 10\\n7 1\\n9 6\\n1 1\\n8 9\\n7 8\\n10 1\\n9 7\\n3 1\\n8 2\\n7 5\\n5 4\\n7 5\\n10 5\\n9 9\\n5 10\\n4 1\\n9 5\\n7 8\\n1 7\\n3 8\\n2 3\\n7 10\\n5 3\\n2 1\\n7 4\\n4 7\\n1 9\\n7 10\\n4 3\\n8 3\\n7 4\\n5 8\\n2 8\\n7 2\\n7 9\\n6 9\\n5 6\\n1 7\\n3 8\\n10 6\\n4 6\\n4 8\\n8 8\\n2 2\\n4 6\\n7 9\\n9 2\\n8 7\\n6 5\\n4 7\\n8 1\\n1 3\\n1 3\\n2 6\\n9 1\\n8 5\\n7 2\\n8 1\\n5 4\\n3 6\\n1 3\\n2 3\\n1 3\\n2 1\\n1 6\\n6 9\\n165\\n9 4\\n3 2\\n5 3\\n2 8\\n2 6\\n1 3\\n7 10\\n8 5\\n3 1\\n9 8\\n1 9\\n2 2\\n4 10\\n2 8\\n6 4\\n8 3\\n6 3\\n5 1\\n2 1\\n2 4\\n8 4\\n3 3\\n6 3\\n1 6\\n9 1\\n5 4\\n6 8\\n3 9\\n6 7\\n6 6\\n1 3\\n9 9\\n1 9\\n10 7\\n5 9\\n3 10\\n6 3\\n8 8\\n1 8\\n1 2\\n9 7\\n7 3\\n5 7\\n10 6\\n3 10\\n6 2\\n2 2\\n8 7\\n9 4\\n8 2\\n4 2\\n4 3\\n2 10\\n2 6\\n2 4\\n9 7\\n5 4\\n1 7\\n5 5\\n7 2\\n3 10\\n10 6\\n9 8\\n5 5\\n4 8\\n4 6\\n3 3\\n7 5\\n2 10\\n3 3\\n1 1\\n1 1\\n9 5\\n7 3\\n3 5\\n3 5\\n8 8\\n10 2\\n2 8\\n4 5\\n1 7\\n1 7\\n1 9\\n8 8\\n8 2\\n5 5\\n8 9\\n8 3\\n6 1\\n6 10\\n10 6\\n2 4\\n3 3\\n1 6\\n3 2\\n3 4\\n9 10\\n7 10\\n6 1\\n5 8\\n9 5\\n2 4\\n1 3\\n8 9\\n10 9\\n5 7\\n4 4\\n2 6\\n8 8\\n1 10\\n10 9\\n9 1\\n1 5\\n9 5\\n8 2\\n2 10\\n2 6\\n10 5\\n2 7\\n7 2\\n4 4\\n7 1\\n10 6\\n4 9\\n8 6\\n4 10\\n4 5\\n8 9\\n9 5\\n3 2\\n3 7\\n5 1\\n9 9\\n9 9\\n8 5\\n9 8\\n5 6\\n7 3\\n10 10\\n3 9\\n4 2\\n2 10\\n6 10\\n4 8\\n9 10\\n4 9\\n6 7\\n7 4\\n10 10\\n6 2\\n7 6\\n10 9\\n1 5\\n1 2\\n2 3\\n5 10\\n9 8\\n8 8\\n7 5\\n2 1\\n2 6\\n7 9\\n5 6\\n1 2\\n6 8\\n12\\n10 2\\n9 10\\n5 2\\n10 7\\n4 6\\n4 1\\n5 9\\n9 9\\n6 2\\n8 8\\n5 5\\n1 8\\n538\\n7 10\\n6 8\\n6 8\\n4 6\\n6 9\\n1 4\\n4 2\\n6 1\\n6 10\\n1 5\\n10 2\\n10 7\\n9 3\\n10 8\\n9 2\\n4 7\\n2 1\\n5 3\\n8 1\\n1 3\\n4 5\\n9 5\\n5 8\\n4 5\\n2 5\\n8 4\\n2 7\\n8 1\\n5 9\\n3 9\\n1 1\\n6 7\\n10 6\\n9 10\\n9 5\\n3 6\\n5 3\\n10 8\\n8 2\\n9 7\\n5 3\\n2 3\\n6 4\\n9 4\\n10 3\\n3 7\\n1 3\\n8 10\\n9 7\\n8 10\\n6 5\\n6 3\\n3 1\\n4 2\\n7 7\\n8 6\\n10 5\\n2 3\\n6 2\\n2 5\\n10 6\\n1 10\\n7 9\\n7 1\\n10 9\\n3 1\\n6 9\\n6 10\\n7 1\\n7 5\\n2 10\\n5 2\\n1 2\\n8 1\\n7 10\\n7 6\\n6 7\\n3 5\\n9 6\\n2 1\\n10 4\\n3 9\\n7 6\\n10 7\\n8 6\\n6 2\\n8 7\\n1 2\\n3 2\\n2 10\\n7 8\\n4 8\\n5 8\\n6 8\\n9 10\\n10 4\\n8 2\\n2 1\\n4 7\\n1 4\\n2 10\\n1 7\\n6 3\\n8 2\\n5 10\\n9 1\\n8 1\\n9 6\\n5 8\\n1 10\\n7 9\\n1 4\\n8 8\\n9 6\\n2 9\\n5 9\\n5 8\\n7 6\\n10 1\\n10 1\\n2 2\\n3 4\\n6 10\\n10 1\\n4 8\\n4 4\\n1 9\\n1 8\\n1 2\\n5 4\\n2 10\\n7 1\\n8 4\\n5 7\\n2 10\\n2 8\\n1 6\\n10 9\\n9 1\\n2 2\\n6 6\\n4 9\\n3 4\\n5 4\\n7 8\\n1 3\\n9 3\\n1 5\\n10 3\\n3 9\\n8 10\\n1 9\\n9 7\\n1 6\\n9 10\\n9 4\\n8 10\\n7 8\\n5 3\\n6 9\\n2 7\\n5 7\\n3 6\\n1 1\\n1 8\\n6 8\\n2 9\\n2 7\\n8 2\\n6 7\\n2 9\\n2 2\\n5 3\\n6 8\\n9 7\\n2 7\\n4 9\\n1 7\\n8 10\\n4 8\\n1 3\\n4 9\\n3 5\\n1 4\\n4 1\\n1 6\\n4 5\\n2 8\\n1 3\\n4 6\\n8 6\\n9 2\\n8 7\\n6 4\\n1 6\\n9 1\\n2 5\\n5 5\\n10 4\\n7 2\\n2 2\\n4 10\\n7 7\\n9 10\\n8 3\\n2 4\\n9 1\\n8 1\\n10 6\\n4 1\\n3 8\\n10 8\\n10 4\\n9 8\\n8 5\\n6 6\\n3 2\\n7 2\\n5 4\\n6 9\\n4 2\\n6 9\\n7 4\\n5 5\\n4 5\\n4 6\\n3 3\\n3 1\\n3 6\\n2 10\\n5 9\\n10 10\\n10 6\\n1 5\\n7 4\\n3 2\\n6 1\\n8 2\\n9 5\\n2 1\\n8 8\\n1 3\\n4 5\\n3 7\\n2 9\\n2 7\\n4 7\\n9 8\\n6 7\\n7 5\\n5 2\\n7 1\\n8 10\\n7 8\\n5 6\\n8 9\\n7 7\\n6 9\\n8 10\\n3 7\\n3 10\\n5 6\\n4 5\\n5 9\\n2 9\\n6 9\\n10 6\\n7 2\\n2 1\\n5 3\\n5 10\\n4 10\\n3 6\\n9 4\\n2 4\\n5 1\\n9 3\\n8 6\\n7 8\\n2 9\\n1 1\\n1 8\\n7 5\\n10 5\\n5 10\\n1 7\\n1 6\\n4 4\\n9 4\\n3 2\\n10 4\\n6 2\\n1 3\\n6 7\\n10 10\\n2 8\\n5 5\\n9 3\\n5 8\\n5 5\\n4 8\\n3 10\\n3 8\\n1 1\\n3 2\\n7 1\\n1 7\\n5 5\\n1 5\\n8 4\\n1 8\\n9 7\\n1 5\\n2 8\\n5 5\\n4 6\\n10 1\\n6 6\\n7 10\\n6 2\\n2 7\\n9 9\\n1 5\\n9 3\\n5 6\\n6 10\\n5 7\\n1 7\\n2 5\\n4 3\\n7 8\\n6 8\\n5 4\\n6 6\\n1 4\\n2 1\\n4 2\\n6 2\\n4 8\\n10 5\\n8 10\\n7 7\\n6 1\\n2 8\\n7 9\\n1 8\\n4 4\\n1 1\\n5 2\\n6 8\\n6 7\\n1 5\\n4 2\\n7 6\\n10 9\\n4 10\\n4 9\\n10 10\\n7 3\\n3 3\\n5 2\\n6 9\\n6 5\\n3 8\\n1 4\\n1 8\\n10 8\\n9 3\\n7 3\\n6 1\\n10 5\\n1 4\\n1 7\\n3 7\\n8 4\\n7 6\\n2 1\\n9 8\\n6 7\\n10 7\\n10 9\\n7 8\\n3 10\\n1 6\\n1 2\\n10 6\\n9 6\\n9 4\\n7 1\\n1 7\\n9 9\\n3 10\\n8 5\\n9 3\\n2 9\\n3 7\\n8 6\\n2 8\\n8 1\\n7 4\\n2 2\\n6 10\\n10 2\\n3 10\\n8 6\\n6 9\\n9 5\\n3 9\\n5 8\\n2 3\\n2 3\\n1 9\\n3 10\\n4 4\\n9 4\\n10 6\\n5 4\\n7 9\\n2 5\\n7 4\\n8 5\\n7 4\\n9 6\\n2 7\\n9 7\\n2 3\\n7 9\\n5 9\\n5 1\\n10 4\\n7 10\\n6 9\\n8 2\\n1 9\\n1 9\\n1 7\\n1 6\\n4 6\\n5 1\\n10 4\\n9 3\\n5 8\\n4 5\\n5 2\\n10 3\\n10 9\\n6 10\\n8 7\\n4 5\\n9 2\\n7 10\\n6 4\\n1 7\\n5 5\\n4 6\\n2 7\\n5 9\\n8 2\\n4 5\\n1 3\\n4 5\\n9 6\\n1 2\\n4 5\\n2 8\\n1 3\\n6 3\\n10 9\\n5 9\\n9 1\\n3 9\\n4 6\\n1 8\\n1 9\\n9 5\\n3 7\\n5 3\\n7 7\\n5 10\\n6 4\\n4 6\\n5 5\\n3 3\\n2 2\\n5 7\\n7 4\\n6 5\\n7 6\\n1 5\\n9 8\\n4 6\\n10 9\\n9 10\\n10 5\\n1 7\\n8 4\\n2 4\\n4 5\\n7 7\\n6 2\\n9 3\\n9 2\\n5 6\\n10 2\\n1 8\\n9 10\\n7 3\\n2 2\\n6 9\\n7 1\\n10 3\\n7 1\\n9 7\\n3 10\\n1 4\\n4 7\\n2 1\\n10 8\\n3 2\\n5 2\\n2 6\\n7 1\\n8 5\\n2 3\\n2 6\\n8 2\\n1 10\\n4 4\\n2 10\\n7 4\\n3 4\\n4 9\\n8 5\\n1 6\\n3 3\\n4 1\\n5 9\\n6 2\\n310\\n6 6\\n2 1\\n10 5\\n4 3\\n2 9\\n4 7\\n8 6\\n3 1\\n7 1\\n10 8\\n8 5\\n5 1\\n2 1\\n1 3\\n7 10\\n10 3\\n9 4\\n1 6\\n2 8\\n10 9\\n7 2\\n1 10\\n1 9\\n10 8\\n6 10\\n8 6\\n5 1\\n6 9\\n1 10\\n6 3\\n3 10\\n2 7\\n9 2\\n5 2\\n2 2\\n4 7\\n2 6\\n3 1\\n8 4\\n2 1\\n6 1\\n2 7\\n5 9\\n6 7\\n10 1\\n4 3\\n9 4\\n6 10\\n8 8\\n3 1\\n3 2\\n4 5\\n2 5\\n10 1\\n1 3\\n7 9\\n2 6\\n10 2\\n2 9\\n9 8\\n9 2\\n5 1\\n10 7\\n6 9\\n3 7\\n2 5\\n6 1\\n10 6\\n10 3\\n5 6\\n3 1\\n6 4\\n2 9\\n4 9\\n6 5\\n9 3\\n2 9\\n9 8\\n1 6\\n1 3\\n1 7\\n2 4\\n4 2\\n2 3\\n7 4\\n9 7\\n6 7\\n1 7\\n5 3\\n2 8\\n3 6\\n7 6\\n6 1\\n4 10\\n8 2\\n7 7\\n10 1\\n7 8\\n2 1\\n2 9\\n3 3\\n4 6\\n6 10\\n7 5\\n10 9\\n5 3\\n5 9\\n1 7\\n1 9\\n2 9\\n2 3\\n8 1\\n8 5\\n6 9\\n6 8\\n8 10\\n9 8\\n7 2\\n1 8\\n10 9\\n6 1\\n3 7\\n10 4\\n10 8\\n1 9\\n8 1\\n6 1\\n2 8\\n7 7\\n3 3\\n4 4\\n1 9\\n4 10\\n7 8\\n8 3\\n7 6\\n2 9\\n5 4\\n6 1\\n10 9\\n4 6\\n8 3\\n4 4\\n3 3\\n6 4\\n5 9\\n6 6\\n6 5\\n6 5\\n10 6\\n3 2\\n3 1\\n7 7\\n1 3\\n4 2\\n7 5\\n4 10\\n1 9\\n7 6\\n4 6\\n3 10\\n7 2\\n8 7\\n7 7\\n3 5\\n10 4\\n2 9\\n6 8\\n4 1\\n10 3\\n5 6\\n3 2\\n6 5\\n2 4\\n5 6\\n4 9\\n8 5\\n6 5\\n5 10\\n2 2\\n10 4\\n8 10\\n3 9\\n9 4\\n5 4\\n9 3\\n1 6\\n2 2\\n6 2\\n6 8\\n4 10\\n3 4\\n6 2\\n3 1\\n7 9\\n4 4\\n3 4\\n9 10\\n9 3\\n2 10\\n8 10\\n7 5\\n8 9\\n4 3\\n5 9\\n2 8\\n8 9\\n5 5\\n1 7\\n6 4\\n9 10\\n9 7\\n10 5\\n7 7\\n9 10\\n9 9\\n10 3\\n7 8\\n8 6\\n3 2\\n10 9\\n4 8\\n6 4\\n4 9\\n3 4\\n10 5\\n7 2\\n1 1\\n6 7\\n4 10\\n4 6\\n8 3\\n4 6\\n4 7\\n4 2\\n2 1\\n1 10\\n10 9\\n2 4\\n1 8\\n9 8\\n6 8\\n7 6\\n10 8\\n4 3\\n8 6\\n1 9\\n10 8\\n1 5\\n4 9\\n5 4\\n3 10\\n3 8\\n6 2\\n6 5\\n8 3\\n9 7\\n9 10\\n5 8\\n4 5\\n7 3\\n4 9\\n10 3\\n4 8\\n2 1\\n3 6\\n7 2\\n9 5\\n6 5\\n4 4\\n8 10\\n9 7\\n10 8\\n4 9\\n4 10\\n1 3\\n5 7\\n8 3\\n9 3\\n8 6\\n8 5\\n10 9\\n6 5\\n4 7\\n1 9\\n3 10\\n1 8\\n10 3\\n5 3\\n10 3\\n10 6\\n10 1\\n4 10\\n8 4\\n9 3\\n5 7\\n1 9\\n4 4\\n3 5\\n2 4\\n9 7\\n4 4\\n1 8\\n10 1\\n10 2\\n3 10\\n1 8\\n2 8\\n1 3\\n6 10\\n529\\n10 4\\n7 8\\n7 9\\n5 1\\n8 9\\n1 4\\n9 1\\n5 10\\n3 4\\n6 6\\n5 1\\n2 9\\n10 9\\n10 3\\n5 4\\n10 7\\n3 3\\n6 6\\n4 5\\n10 9\\n2 1\\n2 4\\n2 3\\n7 2\\n2 8\\n6 2\\n5 5\\n6 7\\n2 9\\n9 9\\n7 4\\n7 6\\n6 1\\n6 8\\n6 9\\n5 5\\n4 9\\n3 10\\n9 4\\n5 7\\n1 10\\n6 7\\n1 3\\n10 4\\n4 1\\n4 5\\n7 3\\n5 9\\n6 2\\n5 2\\n7 2\\n4 1\\n7 3\\n1 2\\n5 7\\n4 2\\n7 4\\n6 10\\n1 10\\n6 5\\n1 4\\n9 6\\n7 6\\n3 6\\n8 8\\n2 6\\n9 10\\n6 4\\n9 5\\n10 5\\n2 8\\n10 6\\n4 4\\n8 4\\n6 8\\n3 4\\n4 4\\n8 2\\n3 10\\n5 2\\n7 7\\n2 3\\n7 9\\n3 4\\n9 10\\n10 3\\n2 5\\n10 10\\n9 10\\n9 4\\n10 1\\n9 10\\n3 2\\n6 9\\n3 9\\n10 2\\n8 5\\n2 7\\n3 4\\n7 1\\n10 6\\n2 6\\n10 2\\n4 7\\n7 10\\n4 6\\n5 8\\n3 4\\n10 5\\n5 8\\n4 3\\n4 7\\n5 10\\n5 8\\n6 4\\n4 4\\n8 10\\n10 4\\n4 2\\n10 4\\n7 3\\n1 1\\n8 6\\n10 7\\n2 8\\n10 8\\n8 3\\n7 9\\n4 6\\n10 4\\n6 8\\n9 4\\n10 8\\n5 7\\n4 2\\n10 5\\n10 8\\n2 6\\n10 2\\n10 4\\n7 4\\n6 4\\n8 8\\n6 1\\n3 7\\n1 5\\n2 2\\n9 3\\n6 7\\n5 3\\n5 5\\n3 10\\n8 8\\n2 8\\n4 7\\n2 2\\n6 5\\n5 1\\n8 8\\n9 6\\n10 6\\n10 1\\n2 4\\n1 5\\n3 4\\n3 9\\n10 2\\n5 6\\n8 2\\n1 8\\n9 1\\n1 3\\n2 9\\n7 2\\n8 10\\n2 4\\n10 6\\n1 4\\n4 9\\n9 9\\n1 9\\n10 4\\n3 2\\n3 3\\n8 5\\n8 8\\n5 7\\n2 6\\n9 8\\n1 7\\n10 4\\n6 7\\n3 6\\n10 3\\n5 9\\n2 3\\n8 1\\n9 4\\n5 4\\n7 4\\n6 4\\n1 10\\n3 2\\n9 10\\n3 1\\n10 9\\n10 10\\n9 6\\n9 2\\n3 2\\n6 4\\n9 5\\n6 3\\n3 1\\n3 5\\n4 8\\n1 8\\n1 9\\n10 4\\n2 6\\n10 7\\n6 5\\n2 7\\n10 1\\n6 10\\n3 1\\n10 1\\n5 8\\n9 6\\n5 6\\n5 5\\n7 8\\n8 9\\n2 4\\n8 2\\n8 9\\n9 5\\n2 4\\n3 9\\n10 8\\n4 10\\n1 9\\n5 4\\n8 2\\n2 10\\n8 8\\n7 2\\n7 10\\n1 7\\n9 4\\n3 8\\n7 5\\n1 1\\n3 6\\n3 2\\n10 4\\n3 6\\n3 6\\n9 2\\n7 1\\n4 10\\n7 8\\n9 9\\n10 7\\n1 10\\n1 6\\n7 6\\n9 3\\n1 8\\n10 8\\n1 6\\n5 7\\n4 5\\n6 1\\n4 10\\n7 3\\n5 3\\n10 5\\n9 9\\n5 3\\n7 9\\n4 7\\n8 6\\n9 3\\n6 9\\n3 9\\n1 9\\n6 1\\n7 8\\n7 1\\n2 7\\n9 1\\n1 2\\n1 7\\n8 5\\n2 5\\n3 8\\n3 7\\n1 5\\n3 1\\n10 3\\n3 2\\n6 10\\n1 10\\n7 2\\n7 8\\n10 9\\n1 9\\n1 10\\n9 9\\n5 3\\n5 4\\n4 1\\n2 6\\n4 5\\n8 8\\n6 4\\n6 4\\n3 8\\n3 9\\n4 2\\n10 5\\n1 7\\n8 7\\n2 3\\n8 1\\n1 4\\n2 8\\n1 6\\n3 6\\n8 5\\n3 5\\n2 9\\n8 9\\n10 3\\n3 7\\n1 1\\n7 5\\n7 8\\n3 3\\n9 2\\n7 8\\n4 8\\n8 8\\n4 4\\n7 7\\n9 6\\n9 6\\n8 9\\n4 7\\n4 10\\n6 5\\n3 9\\n6 6\\n7 8\\n4 8\\n6 7\\n4 1\\n2 1\\n4 9\\n8 9\\n9 2\\n3 7\\n8 10\\n7 10\\n9 9\\n5 9\\n10 3\\n2 8\\n4 3\\n4 8\\n8 1\\n5 1\\n8 5\\n10 4\\n4 2\\n7 1\\n4 9\\n6 8\\n10 10\\n2 9\\n5 5\\n9 4\\n9 2\\n6 8\\n1 7\\n3 6\\n5 4\\n10 5\\n9 9\\n9 7\\n7 6\\n2 9\\n6 4\\n4 5\\n1 8\\n10 8\\n6 4\\n5 10\\n6 7\\n4 4\\n5 1\\n4 1\\n3 5\\n6 8\\n3 6\\n7 3\\n10 7\\n9 2\\n2 4\\n4 6\\n6 5\\n5 2\\n10 2\\n4 10\\n6 3\\n7 5\\n7 6\\n4 8\\n6 9\\n2 8\\n9 10\\n9 8\\n3 3\\n9 2\\n10 3\\n5 1\\n4 4\\n7 9\\n1 9\\n7 4\\n7 7\\n5 7\\n3 5\\n6 4\\n10 10\\n8 6\\n7 9\\n6 2\\n4 3\\n4 4\\n10 7\\n6 5\\n9 7\\n1 6\\n4 9\\n6 8\\n9 1\\n8 4\\n7 7\\n10 7\\n6 3\\n10 8\\n7 3\\n3 6\\n2 10\\n8 5\\n10 5\\n5 1\\n1 4\\n8 4\\n3 9\\n6 10\\n3 9\\n5 3\\n5 3\\n2 4\\n7 9\\n1 7\\n5 6\\n9 3\\n3 1\\n6 4\\n9 3\\n10 9\\n10 6\\n8 2\\n2 10\\n7 9\\n4 2\\n8 4\\n3 7\\n6 4\\n2 3\\n4 7\\n8 1\\n8 1\\n6 5\\n4 6\\n10 5\\n4 8\\n8 5\\n1 9\\n9 3\\n8 9\\n9 3\\n5 10\\n9 6\\n8 8\\n1 1\\n5 9\\n8 6\\n4 3\\n8 5\\n9 4\\n1 2\\n5 8\\n5 9\\n1 1\\n2 7\\n9 3\\n8 7\\n9 7\\n7 6\\n8 8\\n6 8\\n10 3\\n4 6\\n6 1\\n3 9\\n2 3\\n9 10\\n4 2\\n9 1\\n2 1\\n3 5\\n6 7\\n9 7\\n3 1\\n147\\n1 9\\n7 8\\n9 9\\n8 3\\n7 9\\n6 10\\n5 10\\n2 3\\n3 9\\n4 7\\n7 8\\n8 6\\n5 2\\n5 4\\n3 4\\n9 6\\n8 4\\n2 4\\n2 10\\n1 3\\n1 2\\n6 3\\n9 5\\n1 6\\n4 5\\n6 10\\n8 5\\n6 7\\n5 2\\n1 1\\n6 1\\n4 2\\n4 8\\n6 4\\n1 3\\n3 7\\n9 4\\n2 8\\n3 3\\n7 6\\n2 4\\n8 2\\n4 5\\n1 6\\n9 4\\n2 6\\n2 3\\n4 10\\n6 10\\n4 4\\n2 1\\n7 8\\n7 3\\n4 4\\n1 10\\n7 4\\n4 8\\n9 8\\n8 8\\n6 8\\n3 4\\n4 8\\n4 4\\n5 4\\n6 7\\n8 10\\n8 6\\n10 7\\n8 2\\n7 6\\n3 6\\n9 2\\n1 8\\n1 10\\n9 5\\n2 10\\n6 4\\n8 1\\n2 8\\n3 9\\n4 1\\n10 4\\n5 6\\n1 1\\n8 3\\n6 7\\n6 2\\n4 1\\n1 1\\n6 5\\n8 5\\n5 8\\n3 8\\n7 3\\n2 2\\n4 9\\n8 3\\n3 10\\n10 2\\n9 5\\n10 1\\n10 7\\n6 1\\n8 8\\n3 10\\n1 4\\n10 1\\n9 1\\n3 9\\n3 3\\n4 9\\n6 4\\n6 1\\n9 10\\n9 9\\n5 7\\n6 3\\n10 4\\n7 4\\n1 10\\n1 6\\n9 3\\n4 1\\n9 8\\n2 8\\n4 5\\n10 9\\n10 8\\n7 9\\n9 9\\n5 3\\n10 7\\n4 6\\n9 8\\n7 8\\n3 2\\n7 9\\n3 7\\n4 1\\n3 3\\n9 5\\n5 8\\n6 7\\n4 10\\n10 7\\n1 6\\n7 2\\n254\\n10 7\\n5 7\\n8 1\\n9 10\\n8 7\\n6 1\\n10 5\\n1 4\\n10 9\\n1 2\\n7 8\\n3 9\\n1 1\\n1 5\\n7 8\\n3 10\\n8 10\\n6 2\\n2 2\\n1 6\\n9 8\\n9 7\\n4 6\\n10 3\\n4 8\\n3 6\\n2 7\\n2 3\\n8 2\\n3 9\\n6 3\\n4 5\\n2 6\\n5 3\\n10 4\\n1 3\\n2 9\\n2 10\\n5 8\\n10 1\\n7 7\\n7 5\\n8 1\\n9 9\\n9 5\\n4 6\\n4 3\\n5 2\\n2 4\\n9 4\\n1 4\\n2 4\\n9 9\\n10 3\\n4 3\\n9 7\\n10 6\\n6 2\\n5 2\\n4 9\\n10 2\\n1 7\\n2 6\\n10 7\\n1 6\\n4 10\\n1 8\\n4 8\\n5 9\\n9 5\\n4 1\\n4 6\\n3 9\\n1 5\\n3 1\\n10 4\\n9 9\\n2 7\\n9 9\\n2 7\\n3 9\\n4 6\\n4 9\\n7 6\\n1 2\\n8 5\\n10 2\\n7 2\\n4 5\\n4 10\\n2 6\\n7 9\\n9 4\\n3 1\\n4 10\\n9 8\\n3 4\\n8 3\\n2 8\\n6 3\\n3 1\\n10 3\\n3 9\\n8 2\\n10 5\\n3 8\\n7 10\\n4 10\\n1 8\\n9 9\\n9 2\\n2 5\\n2 4\\n1 1\\n1 6\\n9 4\\n6 7\\n2 6\\n3 3\\n9 6\\n2 4\\n10 6\\n1 3\\n3 5\\n1 8\\n4 6\\n4 7\\n1 2\\n5 1\\n3 4\\n5 10\\n10 6\\n4 7\\n6 7\\n3 7\\n4 2\\n2 9\\n8 3\\n2 4\\n10 10\\n5 4\\n10 8\\n5 2\\n5 4\\n3 2\\n6 5\\n1 4\\n1 9\\n1 2\\n1 10\\n3 5\\n3 8\\n1 7\\n1 8\\n4 10\\n8 9\\n5 9\\n4 6\\n9 6\\n8 1\\n9 7\\n5 8\\n8 6\\n9 7\\n9 9\\n1 2\\n3 5\\n5 1\\n10 7\\n4 4\\n7 3\\n1 4\\n10 6\\n7 2\\n5 3\\n4 10\\n10 3\\n5 4\\n8 10\\n5 1\\n6 4\\n4 7\\n4 1\\n3 4\\n5 9\\n9 3\\n1 9\\n6 3\\n1 6\\n4 10\\n7 5\\n7 3\\n4 6\\n2 2\\n1 6\\n6 8\\n7 2\\n4 4\\n3 8\\n3 10\\n6 6\\n2 9\\n8 2\\n8 9\\n4 8\\n3 10\\n4 1\\n5 9\\n8 2\\n8 3\\n7 5\\n10 7\\n7 3\\n10 9\\n10 3\\n2 10\\n6 5\\n4 2\\n7 9\\n9 1\\n5 1\\n3 2\\n8 10\\n5 1\\n7 1\\n7 9\\n3 5\\n9 6\\n6 9\\n2 6\\n9 8\\n10 5\\n3 6\\n4 3\\n7 7\\n1 8\\n8 3\\n4 8\\n5 1\\n3 8\\n4 4\\n5 5\\n4 5\\n5 7\\n2 10\\n3 7\\n4 4\\n2 3\\n2 4\\n1 2\\n10 2\\n5 3\\n1 5\\n3 4\\n996\\n7 1\\n7 3\\n5 10\\n5 4\\n6 7\\n9 3\\n5 9\\n10 9\\n6 6\\n10 2\\n2 4\\n2 8\\n10 10\\n4 5\\n9 10\\n9 6\\n4 1\\n7 6\\n3 10\\n10 2\\n2 4\\n9 6\\n4 4\\n10 3\\n2 7\\n3 9\\n3 3\\n8 3\\n10 10\\n3 7\\n6 10\\n2 10\\n6 2\\n10 2\\n4 2\\n9 5\\n7 4\\n8 6\\n4 4\\n9 9\\n4 10\\n4 5\\n3 10\\n5 1\\n10 1\\n9 10\\n8 3\\n6 8\\n2 4\\n1 2\\n6 5\\n10 2\\n10 8\\n10 2\\n8 10\\n2 9\\n4 3\\n2 5\\n1 7\\n7 9\\n9 8\\n7 9\\n5 7\\n4 3\\n4 3\\n9 4\\n6 2\\n6 1\\n2 8\\n5 5\\n1 8\\n3 5\\n4 7\\n6 7\\n3 9\\n6 8\\n8 6\\n1 1\\n4 6\\n7 4\\n10 9\\n10 8\\n7 10\\n3 1\\n5 2\\n5 4\\n9 1\\n7 5\\n6 10\\n2 10\\n6 1\\n4 10\\n4 9\\n7 8\\n9 6\\n1 2\\n6 9\\n7 10\\n8 9\\n5 5\\n4 4\\n8 3\\n9 9\\n8 3\\n1 1\\n4 6\\n7 3\\n8 10\\n4 8\\n6 8\\n4 6\\n8 4\\n3 6\\n4 3\\n4 9\\n9 10\\n8 2\\n6 4\\n4 4\\n4 3\\n5 3\\n5 1\\n2 5\\n8 2\\n9 3\\n3 7\\n6 3\\n5 4\\n5 8\\n7 6\\n5 9\\n7 2\\n3 8\\n4 3\\n3 9\\n6 3\\n1 9\\n3 5\\n3 1\\n9 10\\n10 1\\n9 2\\n9 6\\n6 9\\n2 5\\n5 4\\n9 8\\n6 1\\n3 5\\n1 4\\n8 1\\n10 4\\n6 1\\n8 6\\n1 1\\n3 4\\n5 1\\n7 2\\n7 2\\n5 2\\n8 5\\n2 4\\n8 1\\n10 8\\n10 4\\n6 3\\n6 7\\n7 6\\n6 5\\n5 5\\n1 10\\n2 6\\n3 8\\n3 5\\n7 1\\n9 1\\n2 9\\n8 10\\n10 10\\n2 5\\n10 5\\n10 3\\n10 7\\n7 7\\n8 9\\n5 9\\n10 6\\n3 2\\n4 9\\n6 8\\n3 4\\n1 9\\n7 4\\n1 1\\n6 3\\n9 4\\n8 3\\n4 4\\n4 8\\n7 7\\n6 2\\n2 7\\n9 4\\n4 2\\n9 9\\n7 1\\n4 8\\n10 10\\n4 9\\n4 3\\n9 5\\n7 4\\n7 8\\n5 6\\n6 7\\n8 7\\n5 7\\n9 3\\n9 6\\n9 5\\n6 5\\n8 10\\n10 6\\n8 5\\n7 7\\n3 5\\n10 10\\n10 1\\n4 7\\n1 9\\n9 9\\n4 3\\n1 7\\n9 1\\n1 4\\n1 9\\n7 3\\n8 7\\n10 10\\n9 5\\n2 4\\n9 10\\n4 3\\n4 10\\n10 3\\n7 6\\n9 2\\n7 3\\n2 3\\n5 4\\n6 9\\n4 2\\n3 9\\n9 5\\n3 6\\n1 2\\n6 9\\n7 1\\n7 5\\n3 2\\n9 7\\n8 10\\n3 9\\n8 5\\n2 7\\n2 3\\n6 6\\n4 6\\n8 9\\n2 3\\n8 4\\n1 9\\n6 9\\n5 3\\n8 9\\n2 2\\n10 4\\n4 5\\n4 9\\n10 1\\n10 8\\n4 7\\n7 4\\n1 4\\n3 2\\n10 7\\n4 1\\n6 1\\n5 10\\n8 8\\n4 5\\n9 5\\n6 8\\n10 5\\n8 7\\n9 2\\n10 6\\n5 7\\n3 2\\n1 2\\n5 9\\n8 3\\n3 8\\n1 3\\n1 4\\n3 3\\n8 1\\n2 9\\n9 2\\n8 6\\n5 8\\n3 5\\n4 4\\n9 7\\n5 6\\n2 9\\n4 9\\n10 3\\n10 7\\n8 9\\n7 5\\n3 2\\n4 4\\n9 1\\n6 6\\n7 4\\n4 2\\n8 6\\n10 10\\n3 7\\n10 2\\n9 8\\n2 1\\n10 1\\n6 10\\n3 10\\n6 6\\n10 6\\n4 2\\n2 6\\n10 3\\n1 9\\n4 4\\n2 3\\n1 1\\n3 5\\n2 1\\n8 6\\n10 1\\n4 5\\n4 6\\n3 2\\n5 4\\n8 4\\n2 5\\n1 1\\n1 10\\n3 10\\n5 1\\n10 5\\n10 3\\n2 7\\n7 5\\n8 5\\n1 7\\n10 8\\n8 7\\n10 10\\n8 2\\n2 2\\n7 1\\n5 8\\n7 3\\n7 1\\n8 4\\n8 6\\n6 5\\n8 3\\n4 10\\n8 1\\n3 2\\n3 1\\n5 2\\n7 4\\n2 2\\n3 10\\n1 1\\n6 1\\n7 5\\n2 7\\n1 4\\n10 4\\n8 8\\n2 6\\n7 10\\n1 5\\n9 5\\n4 3\\n6 2\\n7 7\\n9 3\\n6 4\\n3 5\\n10 4\\n10 9\\n4 5\\n2 9\\n10 9\\n9 5\\n5 1\\n3 6\\n8 4\\n9 9\\n10 4\\n10 4\\n9 7\\n4 2\\n8 8\\n10 3\\n8 3\\n5 9\\n5 8\\n6 8\\n3 2\\n2 8\\n5 6\\n6 1\\n4 10\\n9 1\\n6 2\\n3 8\\n4 4\\n5 4\\n9 10\\n3 3\\n7 4\\n8 6\\n1 9\\n4 2\\n2 6\\n4 9\\n2 3\\n2 8\\n1 9\\n10 6\\n9 4\\n10 4\\n1 2\\n3 3\\n5 1\\n5 3\\n1 5\\n6 3\\n2 2\\n4 10\\n3 8\\n6 7\\n1 3\\n6 4\\n4 4\\n8 3\\n9 9\\n5 7\\n3 5\\n10 5\\n5 1\\n10 2\\n6 7\\n8 8\\n9 5\\n5 7\\n10 6\\n8 5\\n10 3\\n10 9\\n2 8\\n4 4\\n5 1\\n6 5\\n1 3\\n4 1\\n7 4\\n4 9\\n9 9\\n9 3\\n7 5\\n7 4\\n6 10\\n4 8\\n8 2\\n3 8\\n10 1\\n1 5\\n6 10\\n2 7\\n2 9\\n5 10\\n10 7\\n8 7\\n10 6\\n8 2\\n10 5\\n3 6\\n3 6\\n6 7\\n5 6\\n6 5\\n4 6\\n1 6\\n6 7\\n8 3\\n9 2\\n9 10\\n10 1\\n7 10\\n4 1\\n10 10\\n5 7\\n2 7\\n8 7\\n1 10\\n6 8\\n1 5\\n7 10\\n9 10\\n9 10\\n6 3\\n5 5\\n10 2\\n8 1\\n2 6\\n3 10\\n6 9\\n3 9\\n9 8\\n1 7\\n2 9\\n5 9\\n1 5\\n9 3\\n5 3\\n4 3\\n5 4\\n3 7\\n9 9\\n6 9\\n6 3\\n1 2\\n1 2\\n8 2\\n5 9\\n7 10\\n6 6\\n2 5\\n9 5\\n9 3\\n7 4\\n1 7\\n3 6\\n1 1\\n2 2\\n10 10\\n1 10\\n9 5\\n10 5\\n6 7\\n9 5\\n2 2\\n7 4\\n9 1\\n3 5\\n9 2\\n9 10\\n4 4\\n1 4\\n3 7\\n5 1\\n1 6\\n7 9\\n6 1\\n6 4\\n3 7\\n4 4\\n5 4\\n7 3\\n8 2\\n7 5\\n9 1\\n2 4\\n6 2\\n2 3\\n10 3\\n5 6\\n9 9\\n10 8\\n9 2\\n7 9\\n10 2\\n6 9\\n10 2\\n3 3\\n3 6\\n7 2\\n9 4\\n3 5\\n7 7\\n8 5\\n4 5\\n10 10\\n9 2\\n9 1\\n1 7\\n9 9\\n7 6\\n6 5\\n6 8\\n3 8\\n7 5\\n2 8\\n9 7\\n5 9\\n6 7\\n3 2\\n4 7\\n6 5\\n8 1\\n2 2\\n7 1\\n7 9\\n2 4\\n2 4\\n10 2\\n4 10\\n9 8\\n10 5\\n1 4\\n5 8\\n10 8\\n7 4\\n9 6\\n5 3\\n3 7\\n8 3\\n5 4\\n7 1\\n5 5\\n6 7\\n7 8\\n10 4\\n4 7\\n7 10\\n9 3\\n9 9\\n6 7\\n5 1\\n2 3\\n5 10\\n8 3\\n5 2\\n10 3\\n5 6\\n1 4\\n9 1\\n8 3\\n2 4\\n4 4\\n2 5\\n7 4\\n3 4\\n7 8\\n9 6\\n5 7\\n10 9\\n1 5\\n7 9\\n4 7\\n2 4\\n7 4\\n9 5\\n3 9\\n5 4\\n7 9\\n9 2\\n9 3\\n10 10\\n2 6\\n3 5\\n7 8\\n6 8\\n5 1\\n5 6\\n7 7\\n1 3\\n10 5\\n7 9\\n3 5\\n5 1\\n8 7\\n3 2\\n6 5\\n6 2\\n10 1\\n4 3\\n3 6\\n2 1\\n7 3\\n4 3\\n3 7\\n4 8\\n6 7\\n8 5\\n4 9\\n5 9\\n5 6\\n3 4\\n1 2\\n3 10\\n1 1\\n3 8\\n3 6\\n4 1\\n6 8\\n9 8\\n9 10\\n1 8\\n10 8\\n10 9\\n6 9\\n8 6\\n8 2\\n4 9\\n8 3\\n4 2\\n1 9\\n4 6\\n7 2\\n8 9\\n6 9\\n6 1\\n9 5\\n9 10\\n1 10\\n6 5\\n8 2\\n9 3\\n5 3\\n9 8\\n3 1\\n2 4\\n5 2\\n2 9\\n5 1\\n8 6\\n10 8\\n8 9\\n7 1\\n7 6\\n9 7\\n6 8\\n10 2\\n4 2\\n7 2\\n1 7\\n8 10\\n5 2\\n1 7\\n9 2\\n3 3\\n5 9\\n7 8\\n5 10\\n6 5\\n7 4\\n2 2\\n1 6\\n4 10\\n4 6\\n9 4\\n10 5\\n2 9\\n7 1\\n2 6\\n3 3\\n7 7\\n1 4\\n1 1\\n6 9\\n3 4\\n3 5\\n9 2\\n9 3\\n5 10\\n2 2\\n10 2\\n5 8\\n9 7\\n10 9\\n4 8\\n6 9\\n4 5\\n4 3\\n6 3\\n8 10\\n8 8\\n3 8\\n5 7\\n5 10\\n2 6\\n8 1\\n9 2\\n6 6\\n1 4\\n2 7\\n1 3\\n5 2\\n10 8\\n4 3\\n3 2\\n6 9\\n7 1\\n1 8\\n1 8\\n8 9\\n3 9\\n4 4\\n9 8\\n2 2\\n2 9\\n7 4\\n2 5\\n9 6\\n6 4\\n4 7\\n8 7\\n3 1\\n5 8\\n7 1\\n2 7\\n2 2\\n4 2\\n1 6\\n3 10\\n4 9\\n10 3\\n3 3\\n4 2\\n4 6\\n2 9\\n2 9\\n2 9\\n4 10\\n1 10\\n10 4\\n7 2\\n2 6\\n6 1\\n3 7\\n3 5\\n4 2\\n9 8\\n4 1\\n1 8\\n9 9\\n8 3\\n5 4\\n4 5\\n5 2\\n5 10\\n8 2\\n2 8\\n5 3\\n7 6\\n6 3\\n7 6\\n3 8\\n8 5\\n1 1\\n9 8\\n3 3\\n1 6\\n10 10\\n9 8\\n4 1\\n4 9\\n9 6\\n8 7\\n2 1\\n7 2\\n2 10\\n8 2\\n10 8\\n1 9\\n4 3\\n9 4\\n7 5\\n10 6\\n8 6\\n10 8\\n10 5\\n6 1\\n5 9\\n5 8\\n3 6\\n3 1\\n3 7\\n7 4\\n4 9\\n4 10\\n5 3\\n2 10\\n1 4\\n10 6\\n2 6\\n9 5\\n8 7\\n1 3\\n10 5\\n10 8\\n4 4\\n2 1\\n4 5\\n7 2\\n10 1\\n5 1\\n10 8\\n3 3\\n3 1\\n5 7\\n2 10\\n1 9\\n4 2\\n10 2\\n3 10\\n6 4\\n2 9\\n2 6\\n1 6\\n2 1\\n9 1\\n5 5\\n2 10\\n2 6\\n5 4\\n5 3\\n7 4\\n10 9\\n7 6\\n1 7\\n10 4\\n3 2\\n6 7\\n4 4\\n3 5\\n3 5\\n5 5\\n7 4\\n3 2\\n1 2\\n9 3\\n9 9\\n2 9\\n2 8\\n6 3\\n8 4\\n9 8\\n1 10\\n2 8\\n10 10\\n7 5\\n1 4\\n2 1\\n6 3\\n1 1\\n2 8\\n2 5\\n5 3\\n7 1\\n2 3\\n8 9\\n4 4\\n5 9\\n3 9\\n3 3\\n10 9\\n9 10\\n9 1\\n6 4\\n4 6\\n6 2\\n9 5\\n8 8\\n8 3\\n7 1\\n6 10\\n1 6\\n3 7\\n575\\n7 9\\n5 8\\n10 8\\n3 1\\n8 1\\n8 5\\n2 9\\n2 6\\n1 3\\n8 8\\n4 4\\n8 10\\n2 2\\n7 4\\n1 5\\n3 3\\n1 6\\n6 6\\n10 8\\n4 8\\n4 5\\n10 6\\n9 4\\n3 9\\n6 10\\n8 7\\n1 4\\n1 2\\n1 7\\n9 6\\n6 6\\n6 6\\n10 4\\n4 1\\n2 8\\n9 5\\n6 2\\n1 3\\n3 3\\n6 9\\n1 2\\n7 9\\n7 4\\n3 3\\n10 7\\n1 3\\n10 4\\n4 8\\n5 7\\n9 9\\n8 3\\n2 4\\n2 6\\n10 5\\n9 2\\n3 8\\n1 7\\n5 10\\n9 2\\n6 5\\n7 10\\n3 5\\n10 9\\n9 3\\n10 8\\n5 10\\n3 10\\n10 2\\n6 8\\n5 10\\n10 2\\n6 4\\n10 2\\n4 10\\n2 4\\n9 7\\n3 8\\n9 10\\n6 8\\n3 3\\n8 7\\n10 7\\n10 3\\n7 8\\n6 5\\n1 10\\n8 9\\n5 9\\n5 4\\n8 6\\n5 8\\n4 6\\n5 4\\n8 6\\n1 2\\n5 3\\n7 1\\n5 2\\n10 6\\n9 7\\n9 7\\n8 1\\n3 4\\n7 7\\n3 5\\n3 5\\n8 10\\n5 1\\n8 3\\n1 7\\n10 1\\n10 6\\n6 2\\n8 8\\n8 3\\n9 3\\n10 1\\n8 8\\n2 10\\n2 5\\n3 3\\n6 3\\n7 9\\n7 7\\n1 5\\n10 1\\n7 1\\n4 2\\n9 7\\n6 7\\n8 10\\n6 9\\n3 1\\n7 5\\n3 8\\n6 6\\n9 4\\n4 5\\n8 7\\n2 9\\n6 10\\n3 8\\n6 4\\n1 2\\n1 10\\n10 5\\n1 1\\n10 8\\n2 2\\n2 6\\n2 3\\n3 8\\n8 6\\n9 10\\n8 5\\n9 4\\n6 2\\n1 7\\n6 10\\n5 7\\n6 7\\n7 7\\n9 3\\n7 6\\n3 9\\n5 4\\n7 1\\n3 3\\n9 3\\n10 10\\n7 8\\n10 9\\n4 6\\n3 9\\n4 3\\n5 10\\n2 4\\n4 4\\n5 5\\n5 1\\n8 5\\n8 7\\n6 6\\n5 4\\n5 2\\n6 6\\n5 4\\n8 1\\n5 6\\n3 8\\n10 7\\n6 4\\n3 1\\n5 8\\n5 8\\n8 8\\n5 9\\n4 1\\n8 5\\n5 1\\n5 5\\n8 4\\n9 7\\n2 5\\n8 4\\n2 5\\n4 7\\n7 9\\n5 10\\n5 10\\n9 1\\n1 9\\n6 8\\n10 8\\n7 10\\n6 8\\n6 1\\n4 1\\n4 5\\n2 9\\n2 9\\n7 10\\n7 3\\n2 5\\n1 6\\n5 5\\n10 8\\n9 3\\n5 4\\n2 6\\n6 10\\n2 6\\n1 6\\n9 7\\n6 4\\n1 8\\n4 7\\n9 1\\n6 3\\n8 3\\n2 7\\n10 2\\n2 2\\n3 5\\n10 6\\n4 6\\n6 10\\n10 5\\n6 9\\n2 3\\n2 8\\n5 2\\n7 7\\n8 7\\n10 6\\n3 9\\n10 2\\n4 10\\n6 2\\n10 5\\n5 9\\n5 1\\n8 5\\n3 2\\n1 8\\n4 9\\n7 7\\n8 5\\n3 5\\n5 9\\n6 5\\n8 10\\n4 7\\n1 2\\n6 2\\n10 5\\n7 1\\n5 2\\n5 4\\n9 7\\n8 9\\n1 2\\n6 6\\n5 9\\n3 2\\n9 10\\n3 2\\n9 10\\n6 2\\n7 2\\n5 2\\n6 9\\n5 10\\n2 2\\n1 9\\n4 8\\n4 2\\n2 4\\n10 5\\n5 3\\n9 9\\n3 1\\n9 1\\n5 7\\n7 5\\n3 1\\n9 8\\n1 4\\n9 10\\n7 1\\n2 2\\n2 5\\n5 7\\n6 3\\n9 6\\n8 2\\n7 10\\n1 2\\n5 6\\n5 1\\n10 4\\n6 5\\n2 8\\n5 7\\n4 3\\n7 1\\n3 7\\n8 8\\n3 2\\n8 2\\n9 1\\n7 2\\n8 4\\n7 8\\n2 10\\n2 7\\n7 3\\n3 3\\n9 3\\n10 6\\n5 8\\n3 2\\n9 8\\n4 1\\n8 3\\n8 10\\n7 7\\n4 9\\n10 4\\n8 7\\n3 4\\n2 8\\n3 4\\n5 5\\n3 8\\n1 4\\n9 5\\n5 3\\n5 10\\n5 9\\n5 2\\n3 5\\n9 3\\n4 5\\n2 7\\n6 2\\n5 2\\n7 5\\n1 9\\n5 4\\n4 5\\n5 7\\n5 2\\n2 10\\n8 10\\n6 8\\n10 4\\n9 5\\n8 9\\n8 1\\n3 6\\n6 1\\n7 7\\n8 8\\n8 8\\n3 3\\n9 8\\n2 1\\n1 1\\n10 4\\n6 5\\n2 5\\n8 10\\n10 2\\n7 6\\n4 6\\n7 10\\n9 5\\n5 8\\n4 9\\n2 8\\n10 7\\n2 3\\n7 1\\n3 9\\n2 6\\n6 9\\n3 8\\n7 10\\n8 6\\n7 1\\n5 7\\n1 8\\n2 5\\n9 6\\n1 5\\n7 2\\n2 8\\n9 8\\n6 10\\n1 9\\n10 4\\n6 3\\n10 9\\n9 6\\n6 8\\n3 5\\n10 4\\n9 6\\n2 6\\n3 6\\n7 4\\n3 4\\n3 4\\n1 8\\n5 2\\n2 1\\n6 5\\n9 3\\n10 4\\n10 4\\n10 2\\n10 7\\n5 2\\n6 9\\n1 3\\n2 2\\n3 7\\n7 2\\n10 7\\n5 6\\n8 6\\n5 3\\n9 10\\n6 8\\n3 6\\n6 5\\n2 9\\n9 1\\n7 8\\n9 9\\n7 2\\n8 8\\n6 4\\n9 7\\n6 4\\n8 4\\n9 7\\n3 9\\n5 2\\n1 5\\n8 6\\n4 7\\n10 10\\n7 4\\n10 5\\n1 1\\n4 4\\n3 7\\n3 1\\n5 6\\n10 4\\n5 1\\n7 9\\n1 4\\n1 8\\n9 4\\n9 6\\n4 1\\n7 6\\n9 4\\n1 9\\n3 9\\n9 10\\n3 10\\n6 7\\n9 6\\n8 7\\n7 3\\n5 6\\n5 7\\n8 6\\n6 8\\n8 4\\n4 5\\n5 2\\n6 8\\n10 6\\n9 3\\n3 9\\n1 10\\n4 8\\n1 4\\n2 5\\n4 6\\n7 5\\n9 3\\n1 9\\n2 7\\n10 3\\n9 6\\n6 10\\n6 1\\n7 9\\n4 5\\n1 7\\n8 4\\n3 10\\n7 7\\n10 7\\n3 6\\n5 9\\n2 8\\n5 10\\n1 3\\n1 2\\n3 8\\n4 2\\n8 3\\n6 3\\n5 8\\n1 5\\n1 6\\n1 6\\n5 9\\n1 2\\n6 10\\n4 9\\n10 10\\n2 9\\n10 7\\n2 3\\n7 2\\n9 5\\n9 6\\n5 10\\n1 7\\n2 2\\n1 1\\n8 1\\n1 7\\n4 6\\n2 5\\n6 9\\n1 5\\n9 5\\n3 5\\n4 1\\n9 6\\n6 3\\n7 4\\n3 6\\n7 2\\n10 9\\n8 6\\n102\\n6 3\\n4 9\\n9 6\\n9 4\\n2 1\\n7 5\\n10 6\\n7 10\\n4 2\\n5 1\\n4 8\\n7 5\\n1 7\\n2 3\\n5 8\\n1 3\\n2 1\\n10 4\\n3 10\\n6 4\\n6 8\\n8 5\\n7 10\\n3 7\\n3 7\\n1 8\\n10 9\\n8 5\\n10 7\\n3 5\\n7 1\\n10 3\\n9 1\\n5 2\\n3 4\\n2 4\\n5 1\\n9 3\\n6 9\\n1 4\\n4 8\\n6 9\\n1 7\\n9 7\\n10 7\\n6 10\\n10 9\\n2 9\\n9 10\\n4 10\\n7 3\\n8 1\\n9 10\\n8 2\\n10 10\\n1 4\\n6 2\\n6 7\\n2 9\\n10 1\\n2 1\\n9 8\\n1 8\\n4 5\\n6 4\\n5 5\\n6 3\\n5 4\\n6 9\\n5 8\\n8 6\\n5 8\\n5 9\\n10 3\\n7 1\\n3 7\\n3 3\\n10 4\\n3 7\\n6 2\\n9 9\\n5 9\\n9 3\\n1 10\\n8 7\\n4 6\\n1 4\\n6 8\\n7 6\\n5 2\\n5 1\\n2 4\\n8 7\\n1 8\\n4 7\\n7 10\\n3 10\\n6 2\\n8 7\\n2 3\\n5 7\\n7 4\\n191\\n6 7\\n9 7\\n1 10\\n10 5\\n2 6\\n5 2\\n7 3\\n7 8\\n6 8\\n6 5\\n1 4\\n5 5\\n3 5\\n6 10\\n7 9\\n10 10\\n8 2\\n3 4\\n8 9\\n2 3\\n1 4\\n9 3\\n5 3\\n8 3\\n7 8\\n7 8\\n2 9\\n6 4\\n3 3\\n6 8\\n10 3\\n4 9\\n9 9\\n3 6\\n9 4\\n5 1\\n8 4\\n8 1\\n10 7\\n8 6\\n4 10\\n9 9\\n5 5\\n8 7\\n10 6\\n10 8\\n4 3\\n9 9\\n1 8\\n10 1\\n10 4\\n1 6\\n10 2\\n7 10\\n1 4\\n10 3\\n9 8\\n6 8\\n7 10\\n4 6\\n5 10\\n2 7\\n1 1\\n7 3\\n8 2\\n7 5\\n3 2\\n8 8\\n9 7\\n5 9\\n4 9\\n6 7\\n4 3\\n9 2\\n10 10\\n8 2\\n5 1\\n2 10\\n8 6\\n3 4\\n1 1\\n2 6\\n3 5\\n8 1\\n4 10\\n7 7\\n6 7\\n5 3\\n2 8\\n2 5\\n10 7\\n8 1\\n3 9\\n10 2\\n6 1\\n7 2\\n3 9\\n5 8\\n9 10\\n10 9\\n6 3\\n10 9\\n10 1\\n9 4\\n6 10\\n6 3\\n8 5\\n5 1\\n10 10\\n3 10\\n9 9\\n6 7\\n9 2\\n8 10\\n2 4\\n7 4\\n6 2\\n4 6\\n10 7\\n1 4\\n10 8\\n2 2\\n1 6\\n1 8\\n1 2\\n5 9\\n5 3\\n5 5\\n6 1\\n9 1\\n2 10\\n8 4\\n10 1\\n5 1\\n2 6\\n2 1\\n1 2\\n2 7\\n6 3\\n5 3\\n7 8\\n1 9\\n5 8\\n4 7\\n4 5\\n10 8\\n10 10\\n9 5\\n4 5\\n9 3\\n8 2\\n1 6\\n4 6\\n1 7\\n3 8\\n8 3\\n1 2\\n7 2\\n2 5\\n6 8\\n10 6\\n2 1\\n10 8\\n2 1\\n9 1\\n9 5\\n5 6\\n2 7\\n5 2\\n7 1\\n1 3\\n5 7\\n9 4\\n9 1\\n8 10\\n2 1\\n5 7\\n6 1\\n5 9\\n3 5\\n10 1\\n4 3\\n10 2\\n4 2\\n4 2\\n7 3\\n6 10\\n10 9\\n8 9\\n8 2\\n2 5\\n660\\n2 2\\n5 2\\n7 5\\n9 9\\n4 3\\n10 10\\n4 4\\n2 7\\n5 6\\n2 6\\n8 1\\n3 6\\n7 3\\n9 1\\n8 10\\n10 2\\n7 7\\n9 2\\n4 9\\n3 8\\n3 6\\n10 10\\n5 6\\n8 6\\n2 3\\n2 4\\n7 8\\n4 10\\n2 2\\n1 4\\n2 2\\n6 5\\n6 1\\n7 8\\n3 7\\n4 8\\n2 10\\n6 2\\n3 1\\n2 2\\n6 10\\n2 1\\n5 1\\n10 4\\n7 7\\n3 5\\n6 4\\n9 2\\n4 6\\n5 1\\n5 10\\n3 4\\n10 2\\n7 2\\n1 2\\n6 2\\n5 5\\n9 7\\n4 8\\n6 5\\n5 1\\n4 3\\n1 8\\n9 9\\n8 2\\n7 4\\n7 1\\n6 10\\n10 1\\n1 5\\n6 10\\n10 4\\n3 1\\n2 4\\n10 10\\n6 6\\n2 2\\n7 10\\n6 7\\n7 1\\n2 7\\n9 5\\n10 9\\n3 2\\n5 4\\n7 10\\n8 2\\n4 1\\n6 4\\n8 4\\n7 1\\n2 1\\n9 4\\n6 10\\n7 1\\n7 6\\n4 3\\n4 10\\n2 10\\n5 8\\n7 6\\n5 10\\n9 8\\n7 9\\n4 6\\n7 8\\n4 7\\n1 2\\n4 5\\n7 3\\n8 7\\n7 9\\n4 5\\n10 7\\n5 6\\n10 2\\n2 3\\n2 10\\n8 4\\n1 5\\n8 8\\n1 2\\n7 1\\n3 4\\n6 9\\n6 2\\n10 3\\n9 4\\n6 8\\n1 5\\n8 3\\n7 8\\n4 10\\n8 4\\n6 6\\n6 8\\n3 5\\n2 3\\n6 5\\n6 2\\n2 5\\n2 9\\n7 9\\n7 1\\n8 6\\n2 5\\n9 8\\n6 1\\n1 5\\n10 7\\n7 6\\n8 6\\n8 1\\n7 8\\n6 6\\n2 7\\n7 6\\n1 10\\n5 3\\n3 10\\n5 6\\n8 6\\n9 5\\n9 6\\n1 5\\n8 9\\n9 7\\n5 2\\n5 3\\n3 7\\n6 7\\n2 8\\n2 3\\n9 3\\n5 9\\n4 8\\n10 10\\n1 6\\n5 5\\n7 1\\n1 9\\n3 10\\n3 9\\n4 1\\n2 3\\n5 10\\n4 2\\n3 10\\n1 10\\n4 2\\n2 4\\n4 8\\n3 8\\n9 6\\n9 4\\n6 6\\n5 4\\n3 2\\n7 5\\n4 1\\n6 9\\n5 5\\n4 6\\n1 6\\n2 6\\n8 10\\n8 1\\n8 2\\n6 5\\n5 2\\n2 3\\n2 8\\n1 8\\n9 5\\n2 5\\n9 3\\n9 10\\n3 1\\n3 9\\n3 6\\n3 7\\n3 8\\n1 1\\n7 9\\n1 2\\n8 2\\n10 10\\n4 4\\n1 6\\n3 5\\n8 1\\n1 7\\n4 6\\n6 9\\n5 8\\n1 4\\n5 5\\n3 1\\n3 8\\n3 4\\n2 4\\n5 9\\n6 1\\n2 10\\n5 2\\n1 3\\n2 5\\n10 10\\n1 3\\n1 4\\n6 2\\n7 3\\n9 4\\n10 10\\n7 6\\n3 10\\n3 3\\n9 7\\n3 7\\n5 5\\n8 4\\n8 10\\n3 7\\n1 3\\n7 10\\n9 3\\n9 10\\n2 8\\n10 10\\n1 6\\n5 4\\n10 8\\n9 1\\n2 10\\n10 1\\n6 3\\n8 4\\n6 10\\n9 1\\n4 1\\n2 5\\n7 10\\n3 8\\n5 6\\n10 3\\n1 3\\n1 8\\n9 10\\n10 6\\n10 9\\n6 6\\n10 2\\n8 8\\n4 2\\n1 7\\n6 2\\n9 7\\n10 5\\n2 5\\n7 4\\n9 3\\n10 5\\n2 1\\n4 9\\n10 4\\n8 9\\n1 3\\n5 2\\n5 4\\n1 4\\n7 2\\n3 4\\n2 10\\n6 7\\n5 2\\n9 10\\n3 4\\n3 10\\n7 6\\n7 8\\n9 6\\n10 10\\n4 2\\n7 10\\n3 7\\n5 3\\n5 5\\n5 4\\n8 2\\n5 6\\n9 1\\n6 8\\n6 7\\n4 2\\n5 6\\n7 7\\n5 6\\n9 9\\n10 7\\n8 6\\n9 2\\n9 4\\n10 2\\n8 8\\n6 5\\n1 6\\n5 6\\n9 6\\n10 6\\n1 2\\n9 4\\n1 5\\n10 9\\n6 8\\n1 4\\n1 5\\n6 1\\n3 2\\n8 4\\n4 7\\n1 3\\n1 1\\n4 2\\n3 2\\n2 8\\n10 7\\n6 4\\n6 8\\n9 9\\n1 5\\n5 10\\n8 8\\n9 9\\n8 5\\n6 6\\n10 9\\n7 7\\n7 3\\n2 6\\n7 7\\n8 8\\n9 5\\n7 5\\n8 5\\n4 10\\n7 9\\n5 3\\n2 3\\n9 2\\n2 4\\n5 6\\n6 9\\n9 5\\n8 8\\n10 8\\n8 7\\n3 2\\n7 3\\n2 8\\n1 10\\n5 1\\n2 1\\n3 7\\n2 5\\n1 6\\n4 7\\n8 9\\n9 5\\n9 6\\n4 6\\n1 8\\n4 6\\n1 6\\n5 3\\n2 4\\n1 8\\n4 5\\n8 10\\n7 5\\n9 8\\n2 1\\n10 10\\n10 10\\n10 4\\n9 2\\n7 5\\n9 8\\n6 9\\n7 5\\n1 9\\n10 5\\n4 9\\n7 3\\n2 8\\n3 5\\n7 4\\n4 5\\n9 7\\n3 6\\n1 10\\n5 7\\n5 3\\n9 10\\n3 2\\n3 7\\n10 6\\n9 7\\n5 5\\n10 1\\n3 7\\n8 6\\n2 7\\n5 7\\n7 6\\n4 5\\n10 10\\n7 6\\n7 9\\n7 2\\n6 2\\n5 4\\n8 2\\n10 4\\n5 8\\n4 5\\n7 10\\n4 6\\n2 4\\n4 10\\n3 3\\n5 10\\n1 9\\n3 6\\n10 9\\n7 2\\n2 10\\n5 9\\n1 3\\n3 1\\n6 1\\n4 3\\n7 8\\n6 2\\n4 8\\n7 2\\n1 2\\n7 10\\n4 9\\n10 2\\n10 3\\n4 8\\n10 8\\n5 9\\n8 5\\n1 1\\n7 9\\n10 5\\n4 1\\n4 6\\n5 8\\n5 7\\n5 6\\n5 2\\n7 2\\n1 4\\n2 6\\n2 6\\n2 4\\n1 10\\n8 2\\n6 5\\n8 9\\n10 1\\n10 2\\n8 6\\n8 2\\n1 7\\n3 5\\n4 2\\n10 6\\n3 1\\n7 6\\n2 10\\n3 5\\n2 8\\n1 3\\n5 5\\n7 3\\n10 5\\n3 5\\n10 9\\n1 6\\n3 1\\n9 10\\n10 10\\n5 6\\n9 8\\n1 4\\n8 3\\n9 6\\n2 4\\n1 3\\n7 3\\n6 1\\n7 6\\n7 1\\n4 2\\n2 2\\n8 7\\n9 6\\n5 9\\n7 8\\n3 4\\n7 4\\n3 9\\n10 9\\n3 6\\n7 2\\n2 8\\n8 5\\n5 7\\n9 3\\n10 4\\n8 10\\n2 9\\n7 2\\n3 4\\n1 7\\n1 6\\n9 4\\n8 2\\n10 10\\n2 5\\n4 5\\n9 8\\n7 9\\n2 4\\n1 1\\n3 1\\n5 8\\n4 6\\n3 2\\n8 2\\n6 3\\n4 10\\n10 7\\n10 6\\n5 5\\n1 9\\n6 10\\n8 4\\n5 3\\n5 6\\n2 4\\n3 3\\n9 8\\n7 10\\n7 1\\n4 5\\n6 1\\n9 8\\n10 8\\n9 1\\n3 7\\n1 3\\n5 9\\n5 5\\n3 10\\n3 5\\n2 1\\n9 10\\n9 5\\n9 1\\n1 8\\n3 2\\n10 7\\n2 3\\n1 1\\n2 7\\n2 1\\n1 10\\n3 8\\n8 6\\n7 9\\n7 2\\n9 7\\n10 9\\n4 2\\n6 7\\n5 8\\n8 9\\n9 8\\n10 9\\n1 9\\n7 1\\n4 4\\n8 10\\n1 1\\n10 10\\n10 10\\n10 10\\n2 5\\n8 1\\n1 7\\n3 6\\n5 8\\n4 8\\n1 7\\n6 8\\n8 4\\n5 6\\n1 6\\n1 8\\n2 2\\n8 3\\n9 9\\n5 2\\n9 6\\n3 2\\n1 6\\n339\\n6 2\\n6 9\\n1 4\\n6 4\\n7 3\\n5 4\\n6 10\\n6 5\\n4 10\\n3 8\\n1 10\\n2 1\\n8 9\\n1 5\\n3 8\\n10 5\\n4 9\\n6 1\\n7 7\\n3 3\\n9 7\\n10 7\\n2 3\\n8 4\\n8 10\\n2 7\\n2 4\\n5 5\\n2 10\\n4 8\\n1 5\\n5 3\\n5 1\\n3 6\\n4 3\\n8 4\\n8 3\\n3 2\\n1 1\\n1 8\\n10 6\\n2 2\\n9 4\\n6 4\\n9 9\\n9 9\\n3 7\\n8 6\\n9 7\\n1 6\\n9 6\\n3 9\\n7 7\\n10 10\\n8 5\\n3 2\\n1 8\\n5 10\\n2 2\\n7 5\\n4 1\\n6 1\\n8 3\\n6 5\\n1 6\\n3 3\\n3 6\\n1 1\\n10 2\\n8 3\\n5 10\\n5 2\\n8 1\\n4 10\\n3 6\\n9 8\\n6 1\\n2 7\\n3 5\\n5 7\\n7 4\\n7 2\\n9 10\\n10 7\\n4 5\\n2 2\\n2 9\\n8 5\\n2 8\\n10 5\\n10 1\\n9 4\\n8 5\\n5 9\\n6 6\\n4 6\\n1 3\\n8 10\\n5 7\\n9 2\\n3 4\\n9 3\\n5 4\\n9 3\\n6 7\\n6 8\\n6 3\\n9 2\\n1 5\\n4 3\\n3 9\\n7 1\\n2 6\\n4 3\\n8 7\\n1 1\\n3 3\\n3 8\\n10 7\\n10 4\\n6 2\\n3 5\\n9 1\\n3 6\\n10 10\\n6 7\\n3 1\\n10 9\\n10 10\\n8 9\\n9 9\\n7 5\\n2 9\\n2 6\\n4 10\\n7 10\\n8 7\\n2 2\\n4 1\\n6 4\\n4 8\\n6 2\\n6 3\\n6 4\\n2 7\\n5 10\\n9 6\\n1 4\\n10 10\\n4 8\\n4 9\\n6 4\\n3 5\\n8 7\\n8 7\\n10 1\\n5 6\\n10 10\\n3 6\\n2 7\\n6 9\\n3 6\\n3 6\\n9 8\\n7 8\\n8 2\\n3 7\\n4 8\\n1 1\\n10 10\\n4 9\\n4 9\\n9 8\\n8 5\\n6 7\\n5 10\\n9 3\\n3 8\\n4 5\\n8 6\\n4 9\\n7 10\\n7 9\\n9 8\\n9 9\\n8 9\\n5 2\\n7 4\\n10 10\\n1 10\\n4 7\\n4 8\\n5 9\\n4 9\\n9 1\\n6 3\\n10 4\\n6 6\\n5 9\\n6 3\\n10 7\\n6 6\\n1 10\\n9 3\\n10 2\\n7 4\\n2 4\\n1 2\\n1 8\\n7 9\\n2 2\\n7 2\\n4 7\\n6 9\\n4 3\\n9 1\\n2 3\\n3 9\\n10 2\\n6 6\\n3 4\\n6 2\\n4 2\\n10 6\\n10 1\\n6 3\\n2 6\\n10 5\\n3 7\\n10 4\\n10 4\\n2 7\\n9 8\\n6 1\\n6 6\\n6 8\\n1 2\\n8 9\\n6 7\\n2 6\\n9 2\\n3 7\\n7 8\\n4 6\\n8 7\\n1 7\\n7 4\\n7 1\\n6 2\\n3 6\\n7 9\\n5 1\\n8 2\\n1 9\\n3 2\\n8 1\\n10 9\\n1 2\\n8 1\\n9 3\\n4 8\\n8 1\\n4 4\\n2 9\\n2 8\\n8 8\\n10 2\\n8 3\\n4 4\\n3 5\\n5 4\\n9 3\\n7 10\\n1 8\\n10 4\\n5 4\\n6 9\\n3 8\\n8 2\\n8 10\\n8 1\\n2 6\\n8 10\\n7 9\\n5 9\\n4 6\\n2 7\\n3 8\\n4 1\\n8 6\\n2 8\\n1 6\\n6 9\\n4 1\\n6 9\\n1 3\\n4 6\\n8 4\\n6 2\\n4 10\\n10 7\\n5 7\\n8 4\\n1 3\\n2 5\\n6 7\\n1 1\\n5 5\\n10 1\\n6 4\\n6 1\\n7 10\\n2 5\\n6 5\\n1 10\\n5 2\\n2 9\\n6 2\\n9 8\\n2 4\\n7 5\\n1 10\\n1 8\\n7 5\\n9 1\\n6 10\\n4 3\\n4 7\\n9 2\\n9 8\\n7 10\\n5 1\\n9 6\\n5 7\\n8 5\\n2 5\\n8 8\\n6 9\\n7 3\\n195\\n5 4\\n9 1\\n10 7\\n7 2\\n6 4\\n8 5\\n10 6\\n7 1\\n5 2\\n4 10\\n3 6\\n5 10\\n9 7\\n10 9\\n7 5\\n2 2\\n5 8\\n6 7\\n5 7\\n8 2\\n2 4\\n1 1\\n9 8\\n4 3\\n2 7\\n9 4\\n8 5\\n1 6\\n4 10\\n3 1\\n8 8\\n4 1\\n8 3\\n7 7\\n3 9\\n7 4\\n10 1\\n1 1\\n2 5\\n10 7\\n5 8\\n4 7\\n7 8\\n6 7\\n3 7\\n7 4\\n7 9\\n7 7\\n10 6\\n4 7\\n4 1\\n4 3\\n7 3\\n9 10\\n8 4\\n5 1\\n7 10\\n4 7\\n7 3\\n10 3\\n10 10\\n6 5\\n8 8\\n3 5\\n7 9\\n6 7\\n6 3\\n9 7\\n8 10\\n3 5\\n7 3\\n6 7\\n2 4\\n10 1\\n1 8\\n3 4\\n2 1\\n1 3\\n6 10\\n10 5\\n5 8\\n10 3\\n8 8\\n8 3\\n6 2\\n1 8\\n9 8\\n4 4\\n6 3\\n2 6\\n9 8\\n8 7\\n9 9\\n2 1\\n4 5\\n9 6\\n3 1\\n10 10\\n4 2\\n5 5\\n7 1\\n5 4\\n8 8\\n5 8\\n6 8\\n1 1\\n5 4\\n8 2\\n9 5\\n4 6\\n8 10\\n7 2\\n9 2\\n5 9\\n7 8\\n8 2\\n1 6\\n4 10\\n4 1\\n2 6\\n10 10\\n10 1\\n4 8\\n4 5\\n8 9\\n2 5\\n4 4\\n4 6\\n7 9\\n5 3\\n10 3\\n4 4\\n6 2\\n4 4\\n2 10\\n3 6\\n4 2\\n7 9\\n2 9\\n8 2\\n7 2\\n1 7\\n10 2\\n9 3\\n4 1\\n5 8\\n7 10\\n4 10\\n9 4\\n3 5\\n3 10\\n8 5\\n2 6\\n2 5\\n1 4\\n9 4\\n8 3\\n5 4\\n5 8\\n6 3\\n3 6\\n10 4\\n7 3\\n9 3\\n4 6\\n2 4\\n2 3\\n3 3\\n5 6\\n10 7\\n10 5\\n4 5\\n1 9\\n5 6\\n8 1\\n10 9\\n9 8\\n7 10\\n4 8\\n6 3\\n4 7\\n2 9\\n5 6\\n4 2\\n2 4\\n7 7\\n2 10\\n10 9\\n2 6\\n7 6\\n8 4\\n8 5\\n9 9\\n4 7\\n8 10\\n53\\n3 1\\n5 10\\n6 4\\n5 3\\n1 3\\n5 2\\n8 2\\n8 2\\n1 4\\n10 9\\n5 10\\n6 6\\n7 8\\n2 9\\n3 7\\n9 7\\n10 6\\n7 4\\n2 4\\n2 1\\n1 7\\n7 6\\n7 1\\n1 9\\n1 7\\n2 5\\n1 7\\n7 8\\n9 1\\n7 3\\n5 6\\n6 7\\n2 1\\n9 1\\n5 10\\n5 8\\n10 10\\n3 9\\n8 8\\n1 1\\n3 5\\n10 3\\n5 8\\n3 2\\n9 5\\n2 8\\n5 4\\n5 7\\n1 6\\n4 5\\n2 3\\n3 4\\n3 9\\n189\\n10 8\\n4 2\\n2 6\\n9 4\\n3 10\\n8 10\\n3 10\\n4 8\\n3 2\\n2 6\\n7 10\\n3 2\\n1 9\\n2 6\\n9 3\\n9 8\\n4 3\\n3 10\\n4 3\\n5 1\\n1 9\\n5 6\\n1 10\\n7 8\\n4 5\\n4 8\\n2 6\\n5 3\\n3 4\\n1 10\\n2 8\\n2 6\\n1 7\\n6 4\\n5 4\\n8 5\\n7 9\\n5 2\\n1 3\\n5 10\\n3 6\\n2 6\\n1 6\\n4 4\\n4 8\\n3 8\\n6 2\\n4 10\\n7 7\\n10 6\\n1 9\\n4 9\\n4 7\\n1 9\\n7 1\\n10 7\\n1 8\\n4 10\\n9 8\\n1 2\\n8 4\\n10 4\\n1 3\\n4 2\\n8 1\\n8 3\\n3 3\\n3 7\\n10 4\\n9 5\\n9 6\\n4 10\\n4 9\\n4 10\\n4 8\\n1 10\\n6 10\\n6 7\\n2 5\\n1 7\\n2 4\\n4 8\\n2 1\\n1 1\\n3 7\\n9 7\\n3 3\\n1 7\\n6 6\\n3 4\\n1 5\\n4 3\\n2 4\\n9 7\\n6 6\\n2 7\\n1 9\\n8 10\\n3 3\\n4 9\\n2 5\\n6 4\\n2 4\\n5 2\\n10 9\\n9 7\\n4 7\\n4 2\\n9 3\\n8 9\\n9 9\\n7 1\\n2 5\\n8 9\\n4 9\\n10 5\\n4 3\\n10 2\\n6 4\\n4 5\\n3 7\\n2 3\\n3 6\\n9 9\\n3 3\\n2 6\\n10 7\\n1 9\\n7 3\\n9 2\\n8 10\\n10 1\\n5 5\\n4 6\\n2 2\\n1 3\\n2 4\\n6 3\\n9 10\\n5 7\\n9 7\\n7 10\\n6 10\\n1 7\\n9 10\\n3 7\\n10 2\\n4 6\\n7 7\\n3 10\\n7 3\\n2 9\\n8 10\\n2 10\\n4 1\\n7 10\\n4 3\\n1 4\\n4 6\\n10 3\\n8 2\\n7 8\\n4 6\\n7 6\\n4 4\\n5 2\\n9 1\\n6 10\\n5 3\\n10 6\\n7 3\\n1 7\\n7 6\\n1 5\\n6 1\\n5 6\\n6 3\\n10 9\\n9 1\\n8 8\\n5 4\\n3 6\\n9 4\\n10 9\\n8 9\\n8 9\\n2 5\\n10 3\\n2 5\\n972\\n1 4\\n3 4\\n5 4\\n8 7\\n4 5\\n1 9\\n2 9\\n2 5\\n4 9\\n4 5\\n3 9\\n1 5\\n4 4\\n4 10\\n6 10\\n6 7\\n5 5\\n5 2\\n2 4\\n1 6\\n2 3\\n2 10\\n7 2\\n7 10\\n9 3\\n4 4\\n8 2\\n2 8\\n6 3\\n9 3\\n6 5\\n9 5\\n1 8\\n8 1\\n10 6\\n4 9\\n1 5\\n8 8\\n7 6\\n1 10\\n4 7\\n2 4\\n3 7\\n4 6\\n6 7\\n5 10\\n9 4\\n3 1\\n6 5\\n2 4\\n5 2\\n9 3\\n10 1\\n8 9\\n2 8\\n7 8\\n10 10\\n1 4\\n6 10\\n2 9\\n1 4\\n3 5\\n5 8\\n6 3\\n10 7\\n10 1\\n6 5\\n9 1\\n2 1\\n2 3\\n1 3\\n3 1\\n7 9\\n4 9\\n4 4\\n10 6\\n3 5\\n4 3\\n4 9\\n3 6\\n6 1\\n4 1\\n10 2\\n2 3\\n9 6\\n2 3\\n1 7\\n2 1\\n2 8\\n10 5\\n8 2\\n3 8\\n6 4\\n7 6\\n5 7\\n6 8\\n8 9\\n9 1\\n3 10\\n3 4\\n1 10\\n3 4\\n5 4\\n10 6\\n8 1\\n4 7\\n6 10\\n5 6\\n3 10\\n5 8\\n8 6\\n4 9\\n1 9\\n3 2\\n2 1\\n6 5\\n8 8\\n6 8\\n6 7\\n3 2\\n6 8\\n2 3\\n5 7\\n9 6\\n2 4\\n10 10\\n7 9\\n5 10\\n2 6\\n9 1\\n5 5\\n8 9\\n9 10\\n4 9\\n2 2\\n4 8\\n1 5\\n7 7\\n8 3\\n2 6\\n4 3\\n9 2\\n8 10\\n5 9\\n9 2\\n5 3\\n9 2\\n2 6\\n5 9\\n6 5\\n6 9\\n1 4\\n3 5\\n2 7\\n10 6\\n2 7\\n6 7\\n7 3\\n6 9\\n10 4\\n5 4\\n2 9\\n10 9\\n9 9\\n8 8\\n2 5\\n2 8\\n2 5\\n8 1\\n8 5\\n7 8\\n7 3\\n8 7\\n3 10\\n4 8\\n8 2\\n8 9\\n5 9\\n3 7\\n10 7\\n9 2\\n4 5\\n4 10\\n7 6\\n7 9\\n2 1\\n7 7\\n7 6\\n8 10\\n3 4\\n6 5\\n1 3\\n3 6\\n4 4\\n1 9\\n8 5\\n3 1\\n3 10\\n5 4\\n5 4\\n7 9\\n1 4\\n2 1\\n8 7\\n3 4\\n6 10\\n5 8\\n6 5\\n1 2\\n10 6\\n3 1\\n10 8\\n3 5\\n7 5\\n4 5\\n10 10\\n7 6\\n4 2\\n8 10\\n4 1\\n4 1\\n1 8\\n6 4\\n9 1\\n9 3\\n10 4\\n3 4\\n3 10\\n1 9\\n6 9\\n4 2\\n6 5\\n5 3\\n9 5\\n5 10\\n2 6\\n5 2\\n3 9\\n7 4\\n10 3\\n10 3\\n2 6\\n2 3\\n5 7\\n4 3\\n10 4\\n3 1\\n8 5\\n4 10\\n8 2\\n1 4\\n1 2\\n4 1\\n1 10\\n4 1\\n2 2\\n1 2\\n10 8\\n7 7\\n8 7\\n10 10\\n2 8\\n9 10\\n10 9\\n6 3\\n3 6\\n2 7\\n8 1\\n5 5\\n5 10\\n8 6\\n8 6\\n5 4\\n5 3\\n3 2\\n2 1\\n3 7\\n10 8\\n3 2\\n1 3\\n6 10\\n6 9\\n10 3\\n4 6\\n10 4\\n10 3\\n6 9\\n3 7\\n4 5\\n2 10\\n3 9\\n7 7\\n6 10\\n6 8\\n8 10\\n2 1\\n1 3\\n9 6\\n3 7\\n9 3\\n1 3\\n6 5\\n4 9\\n2 2\\n8 7\\n9 7\\n1 6\\n5 10\\n2 1\\n9 7\\n3 6\\n4 4\\n9 10\\n1 4\\n4 7\\n9 6\\n3 10\\n5 9\\n1 1\\n8 1\\n9 7\\n8 2\\n6 4\\n1 1\\n2 1\\n2 1\\n3 6\\n10 8\\n7 10\\n5 5\\n10 2\\n9 8\\n9 2\\n3 3\\n6 7\\n10 1\\n1 1\\n8 4\\n2 8\\n2 5\\n1 3\\n2 10\\n3 1\\n5 4\\n7 6\\n1 5\\n3 9\\n5 10\\n10 3\\n2 10\\n6 4\\n4 7\\n1 1\\n6 8\\n9 3\\n2 6\\n4 4\\n5 9\\n8 10\\n5 1\\n3 1\\n6 7\\n1 9\\n8 7\\n5 8\\n5 8\\n6 9\\n3 8\\n1 5\\n5 10\\n8 7\\n6 4\\n3 1\\n7 7\\n8 7\\n5 6\\n3 7\\n5 2\\n9 7\\n4 4\\n5 4\\n6 8\\n1 1\\n6 3\\n10 1\\n8 7\\n1 4\\n1 10\\n2 10\\n4 8\\n8 8\\n1 7\\n9 5\\n1 1\\n4 9\\n1 2\\n3 10\\n8 8\\n1 5\\n3 1\\n2 9\\n5 10\\n1 4\\n2 8\\n6 4\\n7 3\\n2 5\\n5 8\\n5 7\\n6 3\\n4 7\\n8 7\\n10 5\\n10 2\\n3 2\\n10 9\\n9 2\\n4 10\\n9 3\\n9 9\\n10 7\\n6 2\\n3 9\\n10 3\\n6 10\\n7 3\\n6 10\\n2 6\\n2 1\\n3 8\\n3 7\\n2 1\\n8 1\\n8 5\\n9 8\\n9 7\\n5 9\\n8 6\\n4 8\\n5 10\\n3 10\\n2 1\\n6 9\\n1 8\\n7 4\\n2 4\\n2 6\\n5 5\\n8 8\\n3 1\\n1 9\\n3 6\\n8 9\\n9 9\\n4 5\\n3 4\\n9 7\\n10 5\\n8 6\\n8 4\\n10 10\\n6 2\\n6 3\\n1 10\\n5 6\\n2 6\\n8 9\\n3 7\\n3 9\\n5 2\\n5 8\\n6 9\\n1 8\\n1 8\\n1 5\\n8 5\\n10 3\\n9 1\\n9 8\\n10 6\\n4 2\\n4 5\\n10 9\\n4 1\\n6 2\\n7 8\\n2 10\\n9 6\\n8 5\\n7 6\\n6 9\\n7 7\\n1 8\\n5 2\\n5 10\\n3 10\\n9 8\\n9 10\\n7 4\\n7 9\\n3 6\\n1 2\\n8 8\\n1 9\\n4 4\\n7 2\\n8 2\\n5 6\\n5 3\\n1 9\\n8 6\\n2 8\\n9 1\\n3 4\\n2 2\\n9 8\\n4 9\\n5 4\\n1 8\\n1 2\\n9 3\\n1 3\\n5 2\\n8 7\\n2 6\\n1 3\\n7 1\\n10 1\\n10 3\\n2 3\\n10 3\\n10 2\\n6 9\\n7 6\\n8 6\\n5 9\\n9 1\\n6 5\\n9 2\\n4 4\\n7 9\\n10 4\\n8 6\\n6 2\\n2 8\\n6 8\\n5 9\\n1 2\\n5 4\\n2 10\\n8 2\\n4 2\\n9 1\\n6 10\\n9 10\\n6 4\\n7 2\\n8 10\\n3 8\\n2 3\\n6 1\\n6 2\\n1 9\\n5 7\\n4 2\\n1 10\\n2 3\\n3 7\\n10 8\\n10 4\\n6 9\\n8 4\\n10 6\\n6 9\\n7 3\\n4 5\\n1 6\\n4 3\\n5 3\\n8 10\\n5 5\\n9 1\\n1 5\\n6 9\\n9 8\\n6 8\\n1 2\\n2 4\\n5 1\\n10 9\\n3 10\\n8 3\\n8 5\\n3 10\\n3 2\\n1 5\\n3 1\\n3 4\\n9 10\\n5 5\\n9 4\\n9 2\\n4 7\\n9 4\\n4 3\\n1 4\\n3 6\\n5 1\\n5 2\\n9 2\\n2 3\\n4 8\\n1 5\\n2 10\\n1 9\\n8 3\\n8 2\\n8 6\\n3 3\\n7 2\\n8 7\\n6 4\\n9 10\\n10 3\\n10 8\\n1 4\\n9 8\\n7 10\\n1 3\\n9 1\\n4 3\\n2 9\\n4 2\\n5 1\\n4 8\\n1 1\\n2 4\\n2 5\\n6 6\\n2 1\\n8 5\\n5 4\\n6 5\\n3 1\\n3 9\\n7 2\\n3 4\\n8 1\\n8 7\\n4 3\\n3 6\\n1 7\\n8 2\\n10 8\\n9 7\\n4 4\\n9 1\\n9 9\\n10 6\\n9 8\\n7 8\\n1 6\\n10 7\\n3 1\\n3 6\\n2 9\\n7 5\\n10 1\\n2 1\\n4 5\\n2 7\\n1 1\\n7 1\\n3 1\\n1 1\\n2 10\\n4 10\\n9 4\\n2 1\\n10 4\\n1 8\\n2 10\\n6 8\\n3 2\\n3 5\\n8 1\\n6 1\\n8 7\\n3 8\\n9 2\\n4 3\\n9 8\\n4 1\\n7 1\\n10 4\\n9 6\\n3 6\\n10 1\\n3 7\\n2 2\\n5 3\\n2 9\\n5 2\\n9 4\\n6 8\\n6 10\\n3 3\\n7 7\\n5 9\\n1 9\\n4 1\\n8 4\\n6 9\\n10 5\\n5 1\\n5 1\\n7 3\\n10 9\\n5 2\\n10 8\\n8 9\\n7 4\\n10 4\\n9 3\\n10 5\\n8 5\\n9 7\\n9 4\\n10 1\\n8 4\\n3 8\\n2 8\\n2 4\\n9 4\\n1 2\\n7 4\\n5 8\\n2 5\\n2 3\\n5 2\\n9 10\\n2 5\\n8 7\\n7 6\\n10 6\\n3 3\\n10 1\\n9 6\\n6 10\\n5 7\\n1 10\\n9 5\\n7 2\\n6 2\\n2 1\\n10 10\\n3 1\\n8 3\\n2 5\\n7 3\\n4 6\\n8 7\\n10 3\\n4 4\\n2 8\\n8 8\\n8 2\\n6 5\\n6 9\\n4 6\\n2 3\\n7 5\\n6 10\\n9 9\\n4 7\\n8 1\\n9 4\\n1 8\\n6 2\\n10 9\\n6 4\\n6 4\\n10 2\\n1 7\\n1 7\\n3 2\\n7 1\\n7 4\\n10 2\\n9 9\\n9 8\\n3 1\\n8 8\\n4 9\\n3 3\\n5 9\\n6 8\\n10 10\\n10 4\\n6 5\\n10 7\\n8 3\\n10 10\\n1 8\\n3 5\\n6 9\\n3 7\\n5 8\\n9 4\\n8 9\\n1 10\\n10 9\\n2 5\\n9 9\\n7 10\\n6 6\\n6 4\\n8 10\\n1 5\\n9 1\\n3 3\\n4 3\\n6 2\\n1 9\\n5 8\\n10 2\\n10 1\\n8 9\\n6 9\\n4 5\\n8 7\\n9 2\\n7 8\\n3 1\\n6 1\\n2 4\\n2 2\\n6 8\\n5 6\\n8 2\\n6 8\\n8 9\\n8 10\\n4 8\\n9 5\\n10 1\\n2 8\\n6 8\\n8 8\\n8 8\\n10 10\\n1 8\\n6 1\\n3 1\\n4 7\\n8 3\\n9 8\\n5 1\\n1 1\\n2 4\\n8 5\\n2 4\\n2 4\\n3 6\\n6 2\\n8 8\\n1 9\\n8 7\\n5 6\\n4 5\\n4 4\\n9 5\\n7 1\\n8 6\\n8 8\\n10 7\\n7 3\\n7 10\\n4 5\\n5 1\\n1 8\\n4 7\\n1 6\\n3 7\\n3 4\\n2 4\\n8 1\\n2 7\\n3 5\\n10 2\\n7 4\\n2 2\\n6 1\\n9 8\\n6 9\\n5 8\\n7 5\\n4 1\\n10 5\\n7 2\\n4 1\\n6 6\\n3 7\\n7 10\\n10 3\\n9 8\\n6 7\\n1 10\\n3 2\\n10 1\\n5 4\\n7 5\\n5 9\\n1 10\\n1 3\\n5 5\\n3 6\\n2 4\\n9 4\\n7 9\\n2 3\\n6 4\\n1 5\\n5 9\\n3 4\\n2 4\\n5 2\\n9 4\\n5 3\\n1 7\\n7 1\\n9 4\\n4 10\\n9 9\\n2 1\\n9 10\\n9 10\\n9 2\\n2 7\\n7 1\\n1 7\\n10 7\\n4 2\\n10 10\\n3 9\\n2 5\\n7 8\\n1 4\\n10 6\\n5 9\\n4 1\\n1 5\\n1 1\\n9 5\\n9 7\\n5 10\\n9 5\\n6 7\\n3 10\\n6 9\\n10 8\\n9 2\\n8 8\\n1 7\\n10 4\\n10 6\\n4 8\\n8 1\\n7 5\\n2 4\\n9 6\\n8 9\\n817\\n7 1\\n3 8\\n8 3\\n6 7\\n10 8\\n5 6\\n6 7\\n2 2\\n1 5\\n7 5\\n7 6\\n10 2\\n7 8\\n7 8\\n9 8\\n8 1\\n2 7\\n9 6\\n10 4\\n10 6\\n6 10\\n5 8\\n7 9\\n6 5\\n6 1\\n10 6\\n5 3\\n7 10\\n2 8\\n1 1\\n9 6\\n8 7\\n8 7\\n3 3\\n9 9\\n10 4\\n6 1\\n7 5\\n2 5\\n8 10\\n9 9\\n10 5\\n6 4\\n4 8\\n10 1\\n9 2\\n10 1\\n8 4\\n2 5\\n6 1\\n10 9\\n7 9\\n9 7\\n5 2\\n1 8\\n5 10\\n2 1\\n7 2\\n8 8\\n9 5\\n9 4\\n6 1\\n5 3\\n5 1\\n6 7\\n1 5\\n2 5\\n3 1\\n1 4\\n6 4\\n7 5\\n7 4\\n6 7\\n9 6\\n4 6\\n8 6\\n5 3\\n5 1\\n3 2\\n10 8\\n9 8\\n1 9\\n10 7\\n2 9\\n10 10\\n9 3\\n4 10\\n3 2\\n9 1\\n3 10\\n5 8\\n6 8\\n1 6\\n7 1\\n2 1\\n5 4\\n2 10\\n3 6\\n5 2\\n2 3\\n7 10\\n8 3\\n7 3\\n2 8\\n4 7\\n2 5\\n9 1\\n8 9\\n5 3\\n8 2\\n4 3\\n2 5\\n6 2\\n6 10\\n1 10\\n4 1\\n6 8\\n3 2\\n4 4\\n1 5\\n3 7\\n3 9\\n5 5\\n4 10\\n8 9\\n6 7\\n7 9\\n5 9\\n7 5\\n6 4\\n2 10\\n10 8\\n4 10\\n9 3\\n8 4\\n4 9\\n4 2\\n8 5\\n9 8\\n5 5\\n1 3\\n3 1\\n4 8\\n6 4\\n9 1\\n7 8\\n7 7\\n4 4\\n1 10\\n6 8\\n3 4\\n4 7\\n8 3\\n10 3\\n1 9\\n4 3\\n4 3\\n6 7\\n9 1\\n1 1\\n2 7\\n3 6\\n5 4\\n3 5\\n5 3\\n2 4\\n10 3\\n1 4\\n4 5\\n1 9\\n9 9\\n1 7\\n1 4\\n9 9\\n6 4\\n5 4\\n8 10\\n8 5\\n8 9\\n1 4\\n10 9\\n1 10\\n3 4\\n9 10\\n7 3\\n3 4\\n6 2\\n6 6\\n7 1\\n10 8\\n4 4\\n2 9\\n8 3\\n6 2\\n1 2\\n8 7\\n1 7\\n2 5\\n4 1\\n9 6\\n4 4\\n8 10\\n1 1\\n7 5\\n2 4\\n3 1\\n5 3\\n9 9\\n1 6\\n5 5\\n7 2\\n5 8\\n10 2\\n5 4\\n4 2\\n3 1\\n1 10\\n4 5\\n4 4\\n2 9\\n7 3\\n8 4\\n5 8\\n4 10\\n8 3\\n5 9\\n3 7\\n2 5\\n2 9\\n6 9\\n1 5\\n9 2\\n7 4\\n7 3\\n8 8\\n4 9\\n5 8\\n1 6\\n3 1\\n9 3\\n5 6\\n5 9\\n5 10\\n5 6\\n10 6\\n10 7\\n7 2\\n8 3\\n9 5\\n2 1\\n7 5\\n6 6\\n2 5\\n3 6\\n8 8\\n9 2\\n2 3\\n10 9\\n9 10\\n2 9\\n3 2\\n9 10\\n8 6\\n6 5\\n10 10\\n4 2\\n5 5\\n1 3\\n10 4\\n5 2\\n7 3\\n4 8\\n3 4\\n7 7\\n5 4\\n4 3\\n10 6\\n1 7\\n1 4\\n7 9\\n9 8\\n1 10\\n6 6\\n9 8\\n6 4\\n1 2\\n3 6\\n8 10\\n9 3\\n10 6\\n6 4\\n5 6\\n2 8\\n1 8\\n9 1\\n2 3\\n7 7\\n4 5\\n7 2\\n10 2\\n2 1\\n1 6\\n5 2\\n10 2\\n4 4\\n6 4\\n3 2\\n9 7\\n2 2\\n6 8\\n3 9\\n1 1\\n10 7\\n1 6\\n6 10\\n3 3\\n6 4\\n7 2\\n2 7\\n6 5\\n2 3\\n8 3\\n2 5\\n2 10\\n7 4\\n1 8\\n10 8\\n7 7\\n5 1\\n3 8\\n9 3\\n2 2\\n1 1\\n9 2\\n5 8\\n4 9\\n2 1\\n7 5\\n1 7\\n2 8\\n7 1\\n7 5\\n9 9\\n7 8\\n4 10\\n6 2\\n1 6\\n7 9\\n6 5\\n2 8\\n6 5\\n1 5\\n1 3\\n8 2\\n1 7\\n7 5\\n7 10\\n7 7\\n10 9\\n1 9\\n4 1\\n8 6\\n9 5\\n9 3\\n3 8\\n3 3\\n3 5\\n9 6\\n3 3\\n5 6\\n7 4\\n4 5\\n1 10\\n1 7\\n10 8\\n3 2\\n1 5\\n10 10\\n10 3\\n1 3\\n10 3\\n8 9\\n1 2\\n7 2\\n10 5\\n2 4\\n5 9\\n6 2\\n8 10\\n6 10\\n8 3\\n7 9\\n9 5\\n9 6\\n8 5\\n3 3\\n1 6\\n9 9\\n5 7\\n7 5\\n10 6\\n8 2\\n4 1\\n9 2\\n7 7\\n4 3\\n7 2\\n10 1\\n9 7\\n10 1\\n4 5\\n1 2\\n8 1\\n7 4\\n10 6\\n1 8\\n2 2\\n3 8\\n6 9\\n4 2\\n8 9\\n10 4\\n9 2\\n2 8\\n5 7\\n5 8\\n6 10\\n5 9\\n3 6\\n4 10\\n10 1\\n3 1\\n7 5\\n5 2\\n9 10\\n2 2\\n2 2\\n1 8\\n10 3\\n8 9\\n4 10\\n10 4\\n8 4\\n1 6\\n3 6\\n6 2\\n9 8\\n8 10\\n3 8\\n2 5\\n7 2\\n4 3\\n2 10\\n10 9\\n1 9\\n5 5\\n2 5\\n2 5\\n10 9\\n3 10\\n1 8\\n5 4\\n10 2\\n5 8\\n5 7\\n7 1\\n9 8\\n10 5\\n10 7\\n7 6\\n8 9\\n5 10\\n7 5\\n7 7\\n8 7\\n9 10\\n6 8\\n5 3\\n8 4\\n2 10\\n4 3\\n8 8\\n3 5\\n4 4\\n5 9\\n9 9\\n9 10\\n9 9\\n8 1\\n5 1\\n4 9\\n6 6\\n1 9\\n9 3\\n1 10\\n7 8\\n5 8\\n4 2\\n7 1\\n7 3\\n5 8\\n4 10\\n7 7\\n5 10\\n6 7\\n6 6\\n2 6\\n1 4\\n3 6\\n5 6\\n6 3\\n2 4\\n1 7\\n9 1\\n2 6\\n4 6\\n8 1\\n2 7\\n10 10\\n6 1\\n5 9\\n9 10\\n7 4\\n6 4\\n7 3\\n3 7\\n9 1\\n3 5\\n5 6\\n1 7\\n3 7\\n1 9\\n8 6\\n3 6\\n7 6\\n7 3\\n3 8\\n8 5\\n10 1\\n2 8\\n6 7\\n10 2\\n7 3\\n7 7\\n2 2\\n3 2\\n1 1\\n10 5\\n8 8\\n7 1\\n5 8\\n6 5\\n8 10\\n9 1\\n5 3\\n6 2\\n3 2\\n10 6\\n8 9\\n10 8\\n7 4\\n6 1\\n2 5\\n8 7\\n3 2\\n7 9\\n7 9\\n3 10\\n6 2\\n7 6\\n6 9\\n10 3\\n9 5\\n8 6\\n5 3\\n9 5\\n5 6\\n3 7\\n10 3\\n10 8\\n5 10\\n4 5\\n1 6\\n3 3\\n1 9\\n8 8\\n10 9\\n1 10\\n5 7\\n2 3\\n1 10\\n7 2\\n2 3\\n3 10\\n8 10\\n7 8\\n5 3\\n8 1\\n2 5\\n6 10\\n4 3\\n6 6\\n5 3\\n10 7\\n5 6\\n5 7\\n9 6\\n3 10\\n7 2\\n8 5\\n3 1\\n4 9\\n7 5\\n10 4\\n8 3\\n2 6\\n5 2\\n7 8\\n6 2\\n6 6\\n9 3\\n3 5\\n4 9\\n9 5\\n9 8\\n8 5\\n9 7\\n2 2\\n3 4\\n7 1\\n5 6\\n2 1\\n6 4\\n5 3\\n9 4\\n7 1\\n10 3\\n1 3\\n7 4\\n3 5\\n9 2\\n8 4\\n8 2\\n9 9\\n6 1\\n8 8\\n8 4\\n1 5\\n3 9\\n8 1\\n7 5\\n9 10\\n5 7\\n1 5\\n7 4\\n4 7\\n2 6\\n8 10\\n10 9\\n3 7\\n2 10\\n2 4\\n5 4\\n10 3\\n1 7\\n10 4\\n6 6\\n3 4\\n2 7\\n7 7\\n7 7\\n7 1\\n9 6\\n9 5\\n5 3\\n5 8\\n10 5\\n1 4\\n5 8\\n6 5\\n9 7\\n4 4\\n10 7\\n3 10\\n2 4\\n8 1\\n10 6\\n1 1\\n4 2\\n5 1\\n1 7\\n6 4\\n2 6\\n7 10\\n9 4\\n8 6\\n4 6\\n5 5\\n6 9\\n5 4\\n9 4\\n8 7\\n10 8\\n4 7\\n10 2\\n10 8\\n7 5\\n7 10\\n1 4\\n4 7\\n7 7\\n8 2\\n3 3\\n4 10\\n8 10\\n8 9\\n2 5\\n6 2\\n6 4\\n9 7\\n1 5\\n8 5\\n8 1\\n7 6\\n9 3\\n3 4\\n1 10\\n4 10\\n10 2\\n6 5\\n8 10\\n8 3\\n3 9\\n3 3\\n5 5\\n6 10\\n7 1\\n6 8\\n8 5\\n8 5\\n9 7\\n10 10\\n2 7\\n2 4\\n6 5\\n8 10\\n9 3\\n3 5\\n1 3\\n9 2\\n8 10\\n3 2\\n9 6\\n4 5\\n3 1\\n3 9\\n8 7\\n9 2\\n2 7\\n4 2\\n3 8\\n3 2\\n5 2\\n5 7\\n5 6\\n7 6\\n10 8\\n3 5\\n9 2\\n2 3\\n10 3\\n10 10\\n2 2\\n2 4\\n7 4\\n6 6\\n4 6\\n1 9\\n9 8\\n6 7\\n3 6\\n4 6\\n5 5\\n9 6\\n1 2\\n10 8\\n3 9\\n5 2\\n3 6\\n7 10\\n8 5\\n1 9\\n3 5\\n9 4\\n7 4\\n5 2\\n2 5\\n10 3\\n5 4\\n3 10\\n7 6\\n6 10\\n1 7\\n8 9\\n3 9\\n7 2\\n1 3\\n9 3\\n6 7\\n9 10\\n2 1\\n3 3\\n10 3\\n9 7\\n2 1\\n8 8\\n2 1\\n524\\n1 9\\n6 4\\n3 7\\n1 8\\n6 10\\n8 8\\n3 7\\n3 5\\n7 7\\n10 8\\n9 4\\n3 4\\n6 9\\n4 8\\n5 10\\n2 1\\n1 9\\n5 2\\n8 3\\n3 4\\n4 5\\n2 1\\n3 6\\n4 5\\n9 6\\n6 9\\n3 9\\n7 5\\n10 2\\n8 6\\n3 6\\n4 3\\n10 10\\n1 1\\n8 4\\n5 7\\n5 5\\n8 8\\n8 4\\n7 4\\n5 2\\n3 5\\n9 10\\n1 3\\n4 10\\n6 3\\n4 8\\n9 4\\n6 5\\n1 5\\n5 8\\n4 8\\n9 3\\n9 9\\n8 8\\n7 9\\n8 8\\n6 8\\n5 6\\n7 1\\n3 2\\n4 8\\n5 5\\n6 2\\n2 9\\n7 8\\n2 2\\n6 7\\n10 6\\n8 3\\n6 10\\n6 3\\n5 9\\n2 1\\n5 8\\n3 5\\n9 3\\n6 8\\n3 9\\n6 3\\n3 3\\n1 3\\n9 2\\n9 8\\n7 5\\n1 1\\n3 2\\n7 2\\n1 9\\n7 6\\n9 4\\n8 8\\n10 9\\n1 8\\n10 4\\n6 9\\n7 8\\n7 3\\n1 9\\n10 6\\n10 7\\n5 10\\n7 7\\n9 6\\n7 2\\n7 10\\n5 3\\n2 9\\n5 5\\n7 9\\n8 8\\n10 2\\n3 7\\n7 7\\n6 4\\n9 8\\n4 1\\n6 10\\n7 1\\n7 1\\n4 9\\n10 2\\n6 7\\n4 9\\n6 5\\n1 7\\n2 2\\n6 9\\n10 5\\n2 4\\n8 1\\n4 2\\n4 10\\n1 8\\n10 4\\n2 7\\n7 1\\n10 3\\n5 8\\n8 4\\n3 10\\n5 10\\n2 4\\n10 7\\n1 7\\n4 8\\n10 8\\n10 3\\n10 4\\n8 10\\n1 4\\n2 1\\n10 3\\n8 2\\n5 9\\n3 3\\n9 7\\n9 2\\n5 7\\n5 6\\n5 2\\n1 8\\n1 3\\n10 6\\n1 10\\n1 9\\n2 4\\n5 7\\n9 1\\n4 5\\n6 8\\n5 3\\n8 7\\n1 4\\n8 8\\n9 5\\n3 2\\n8 7\\n5 9\\n9 1\\n8 10\\n7 5\\n8 6\\n2 1\\n1 6\\n6 9\\n4 9\\n8 8\\n10 4\\n5 6\\n6 5\\n7 3\\n2 6\\n4 2\\n8 7\\n6 9\\n2 9\\n1 9\\n10 8\\n10 8\\n4 10\\n4 4\\n5 8\\n6 6\\n5 6\\n6 3\\n10 9\\n3 7\\n3 9\\n4 3\\n9 6\\n9 3\\n7 2\\n7 1\\n1 4\\n8 3\\n6 3\\n6 9\\n5 6\\n7 9\\n4 9\\n5 6\\n10 8\\n2 5\\n5 7\\n2 3\\n8 6\\n2 7\\n2 7\\n3 9\\n7 3\\n7 7\\n10 9\\n7 3\\n4 4\\n1 8\\n4 7\\n10 8\\n6 1\\n2 2\\n4 2\\n2 9\\n2 8\\n6 10\\n10 9\\n2 1\\n10 7\\n4 3\\n7 6\\n8 6\\n8 6\\n9 9\\n8 7\\n5 1\\n5 5\\n5 4\\n5 8\\n3 8\\n2 3\\n2 6\\n1 3\\n4 1\\n8 1\\n5 3\\n1 4\\n2 1\\n9 10\\n7 1\\n3 8\\n8 5\\n2 4\\n8 10\\n7 4\\n2 7\\n8 1\\n5 4\\n1 4\\n10 6\\n9 2\\n3 1\\n9 8\\n10 9\\n1 9\\n10 3\\n8 10\\n1 4\\n6 2\\n5 8\\n3 7\\n1 3\\n4 6\\n10 5\\n8 1\\n3 7\\n2 4\\n10 7\\n8 9\\n8 5\\n6 7\\n1 3\\n9 9\\n7 8\\n8 2\\n5 6\\n3 10\\n9 4\\n3 1\\n3 9\\n10 2\\n4 6\\n9 3\\n7 8\\n6 10\\n8 7\\n10 3\\n4 8\\n8 8\\n5 2\\n10 6\\n2 4\\n8 3\\n8 1\\n2 5\\n1 9\\n6 8\\n3 9\\n2 1\\n7 9\\n5 6\\n10 3\\n6 4\\n9 9\\n8 1\\n6 1\\n10 2\\n2 10\\n5 5\\n7 4\\n6 10\\n6 7\\n3 8\\n9 7\\n3 7\\n4 1\\n3 4\\n9 6\\n4 4\\n7 9\\n2 6\\n9 7\\n10 1\\n9 5\\n7 4\\n10 1\\n9 3\\n5 10\\n3 5\\n2 8\\n2 1\\n9 5\\n8 4\\n4 5\\n2 1\\n10 5\\n7 4\\n10 5\\n1 4\\n5 4\\n5 7\\n9 9\\n5 6\\n2 3\\n1 2\\n9 8\\n8 6\\n5 2\\n8 7\\n10 1\\n5 8\\n10 8\\n10 10\\n5 5\\n2 5\\n5 2\\n1 8\\n10 1\\n7 7\\n10 1\\n5 7\\n6 9\\n2 3\\n6 9\\n5 4\\n5 3\\n4 4\\n9 10\\n9 4\\n8 1\\n7 9\\n2 10\\n1 6\\n6 8\\n5 4\\n1 7\\n2 8\\n10 4\\n1 7\\n2 9\\n4 5\\n7 8\\n6 10\\n9 1\\n9 8\\n9 1\\n2 6\\n2 1\\n5 5\\n6 9\\n1 1\\n2 1\\n2 5\\n8 6\\n2 8\\n6 7\\n4 3\\n1 6\\n6 1\\n2 4\\n6 7\\n5 1\\n3 9\\n2 5\\n5 5\\n5 6\\n6 7\\n6 5\\n4 8\\n6 7\\n4 4\\n10 10\\n4 8\\n5 2\\n3 3\\n4 3\\n3 3\\n8 5\\n5 9\\n7 8\\n3 3\\n6 8\\n9 10\\n9 8\\n8 3\\n10 10\\n4 8\\n2 6\\n8 3\\n3 4\\n10 2\\n5 5\\n9 4\\n2 2\\n1 7\\n5 10\\n3 1\\n5 3\\n6 10\\n9 4\\n1 1\\n2 10\\n5 7\\n7 9\\n5 7\\n4 5\\n4 8\\n10 8\\n1 7\\n4 6\\n1 10\\n10 1\\n1 4\\n7 5\\n8 10\\n1 10\\n4 7\\n3 1\\n6 7\\n9 7\\n4 5\\n1 2\\n4 7\\n7 10\\n1 6\\n9 4\\n10 4\\n8 1\\n2 8\\n10 8\\n2 7\\n9 1\\n2 5\\n7 9\\n3 8\\n2 1\\n5 6\\n6 2\\n4 8\\n2 4\\n9 8\\n10 6\\n6 6\\n4 5\\n6 5\\n7 6\\n1 1\\n6 2\\n1 6\\n8 8\\n9 3\\n4 1\\n8 4\\n4 7\\n8 1\\n5 6\\n991\\n10 2\\n4 10\\n5 5\\n7 3\\n4 6\\n9 9\\n4 2\\n1 5\\n2 8\\n4 8\\n3 10\\n4 7\\n5 7\\n6 3\\n1 10\\n8 7\\n8 8\\n4 6\\n4 7\\n4 5\\n10 10\\n4 8\\n4 2\\n3 9\\n1 5\\n3 7\\n1 5\\n6 4\\n1 9\\n5 10\\n6 1\\n10 6\\n8 5\\n10 2\\n2 9\\n7 6\\n5 1\\n3 8\\n10 3\\n4 7\\n6 8\\n9 5\\n4 3\\n9 5\\n7 10\\n6 2\\n7 2\\n10 4\\n8 4\\n10 4\\n5 3\\n9 8\\n10 10\\n3 5\\n1 7\\n8 4\\n10 9\\n1 2\\n3 3\\n7 10\\n7 6\\n2 10\\n7 10\\n4 4\\n2 9\\n7 8\\n6 7\\n9 4\\n10 4\\n1 4\\n10 6\\n10 7\\n6 3\\n1 1\\n7 6\\n1 3\\n8 2\\n7 8\\n4 1\\n8 10\\n9 10\\n2 2\\n7 5\\n1 2\\n2 10\\n6 7\\n1 10\\n9 5\\n5 7\\n2 6\\n10 5\\n10 4\\n3 10\\n10 7\\n9 9\\n1 10\\n3 3\\n4 2\\n4 1\\n3 7\\n7 4\\n6 8\\n3 7\\n5 10\\n1 7\\n4 6\\n3 7\\n7 4\\n6 2\\n10 2\\n6 5\\n3 2\\n1 5\\n5 7\\n8 9\\n6 4\\n2 3\\n1 1\\n5 3\\n2 9\\n2 9\\n6 10\\n6 7\\n1 3\\n4 2\\n8 8\\n1 5\\n1 10\\n3 7\\n5 1\\n2 3\\n8 3\\n9 3\\n8 8\\n3 3\\n2 1\\n5 5\\n7 1\\n5 5\\n8 3\\n9 10\\n3 5\\n2 7\\n9 9\\n6 3\\n8 2\\n6 10\\n2 5\\n2 4\\n4 10\\n7 6\\n6 5\\n4 9\\n9 1\\n2 9\\n6 1\\n9 6\\n4 3\\n5 1\\n8 6\\n3 1\\n4 10\\n9 5\\n4 10\\n4 6\\n3 8\\n8 7\\n10 2\\n5 2\\n2 6\\n2 6\\n2 9\\n2 4\\n2 7\\n2 10\\n10 9\\n3 8\\n4 1\\n2 4\\n3 10\\n5 6\\n5 8\\n6 5\\n10 1\\n8 9\\n4 5\\n6 9\\n10 7\\n4 4\\n8 4\\n5 10\\n6 1\\n2 8\\n2 4\\n7 8\\n4 3\\n2 10\\n4 7\\n1 1\\n10 6\\n4 3\\n1 1\\n7 10\\n3 2\\n9 7\\n7 9\\n6 6\\n4 3\\n1 8\\n9 6\\n8 5\\n6 7\\n5 6\\n3 7\\n1 1\\n10 2\\n1 4\\n1 1\\n10 6\\n8 2\\n9 7\\n1 1\\n5 8\\n9 4\\n10 1\\n5 5\\n2 10\\n7 1\\n4 10\\n6 10\\n2 10\\n7 10\\n6 5\\n3 5\\n5 8\\n5 9\\n9 4\\n6 6\\n10 2\\n9 3\\n9 7\\n5 1\\n6 1\\n3 5\\n10 5\\n4 4\\n7 4\\n5 1\\n6 6\\n7 6\\n3 5\\n7 5\\n7 3\\n8 3\\n10 10\\n2 2\\n3 7\\n9 6\\n8 4\\n10 10\\n1 1\\n8 2\\n4 8\\n3 2\\n5 5\\n10 2\\n4 8\\n1 5\\n4 2\\n6 6\\n2 1\\n5 4\\n4 3\\n4 10\\n7 3\\n2 3\\n2 9\\n9 5\\n4 9\\n4 3\\n2 5\\n9 9\\n4 10\\n1 1\\n1 8\\n9 9\\n9 5\\n2 8\\n9 4\\n4 3\\n5 6\\n4 2\\n10 6\\n10 6\\n8 5\\n2 9\\n9 6\\n3 3\\n3 7\\n3 9\\n2 5\\n8 3\\n4 4\\n7 9\\n9 8\\n4 3\\n9 6\\n2 6\\n4 1\\n2 4\\n9 6\\n7 10\\n1 4\\n7 3\\n8 8\\n10 2\\n6 2\\n10 8\\n10 4\\n9 1\\n6 1\\n8 7\\n7 8\\n8 8\\n1 5\\n1 8\\n3 6\\n4 4\\n6 3\\n9 3\\n1 1\\n3 8\\n10 3\\n2 7\\n10 9\\n4 8\\n7 1\\n10 9\\n4 4\\n4 6\\n5 1\\n5 3\\n8 5\\n9 6\\n7 3\\n3 3\\n8 5\\n7 8\\n10 1\\n6 4\\n1 4\\n4 5\\n1 1\\n2 3\\n2 9\\n5 4\\n3 10\\n2 6\\n4 4\\n8 3\\n6 10\\n4 10\\n4 8\\n3 9\\n8 10\\n9 1\\n6 9\\n1 7\\n4 7\\n10 10\\n2 4\\n2 1\\n3 2\\n9 7\\n3 10\\n4 7\\n6 1\\n10 7\\n1 1\\n3 2\\n4 9\\n7 7\\n8 2\\n3 8\\n8 1\\n3 3\\n7 9\\n1 1\\n5 7\\n8 4\\n2 4\\n8 4\\n10 6\\n6 9\\n8 4\\n5 4\\n10 3\\n1 1\\n5 6\\n10 6\\n2 9\\n1 8\\n6 8\\n9 5\\n8 1\\n3 10\\n9 6\\n7 5\\n5 4\\n10 8\\n10 8\\n4 5\\n9 9\\n4 4\\n8 4\\n6 5\\n1 3\\n3 6\\n1 9\\n10 9\\n5 10\\n10 6\\n9 3\\n3 9\\n7 3\\n2 9\\n10 6\\n10 9\\n8 7\\n2 1\\n3 1\\n10 8\\n4 4\\n7 6\\n8 10\\n10 8\\n1 4\\n8 7\\n10 5\\n2 4\\n2 1\\n8 6\\n8 5\\n5 6\\n3 4\\n4 8\\n6 8\\n6 2\\n4 7\\n9 4\\n9 8\\n8 10\\n3 1\\n5 1\\n1 8\\n8 6\\n10 7\\n5 3\\n2 4\\n4 6\\n6 8\\n9 3\\n8 9\\n3 5\\n6 1\\n6 5\\n3 10\\n1 3\\n9 3\\n2 3\\n10 5\\n8 6\\n10 2\\n6 4\\n5 4\\n2 10\\n5 10\\n5 10\\n6 1\\n4 1\\n6 3\\n9 8\\n10 5\\n7 5\\n1 6\\n5 2\\n7 6\\n6 7\\n7 2\\n2 8\\n2 5\\n6 7\\n3 10\\n10 8\\n7 9\\n3 6\\n7 7\\n5 10\\n7 2\\n10 2\\n9 4\\n9 2\\n5 5\\n8 2\\n7 9\\n9 5\\n1 3\\n7 10\\n2 4\\n2 9\\n9 5\\n1 9\\n5 10\\n5 10\\n3 9\\n9 2\\n6 8\\n5 8\\n8 6\\n7 10\\n10 10\\n6 3\\n8 7\\n1 8\\n6 6\\n9 6\\n3 7\\n2 2\\n1 4\\n6 3\\n6 3\\n2 8\\n1 4\\n2 4\\n8 6\\n9 1\\n3 1\\n8 5\\n8 10\\n3 3\\n6 3\\n5 8\\n6 10\\n2 1\\n9 2\\n1 4\\n3 1\\n2 2\\n10 4\\n2 8\\n9 10\\n8 2\\n1 2\\n1 2\\n8 4\\n9 1\\n6 4\\n10 3\\n6 5\\n8 5\\n5 6\\n5 2\\n7 4\\n7 1\\n5 4\\n3 8\\n9 8\\n8 2\\n2 1\\n10 9\\n6 2\\n8 8\\n2 4\\n7 3\\n1 1\\n5 1\\n10 3\\n3 2\\n2 2\\n10 8\\n9 1\\n2 1\\n1 7\\n8 10\\n2 1\\n9 5\\n3 3\\n1 4\\n1 7\\n6 4\\n1 2\\n9 6\\n8 7\\n3 9\\n3 7\\n4 4\\n2 4\\n8 8\\n7 7\\n6 4\\n8 6\\n5 2\\n9 6\\n9 7\\n7 9\\n4 6\\n7 10\\n5 10\\n8 8\\n9 9\\n8 2\\n10 9\\n9 1\\n10 4\\n2 6\\n3 9\\n1 3\\n4 6\\n8 8\\n1 7\\n9 3\\n7 10\\n9 6\\n5 4\\n8 7\\n7 10\\n1 4\\n3 7\\n5 7\\n7 5\\n8 1\\n1 9\\n9 3\\n3 4\\n3 9\\n1 4\\n7 5\\n8 10\\n5 6\\n1 6\\n8 6\\n10 9\\n10 8\\n7 10\\n9 3\\n8 5\\n5 3\\n2 4\\n3 4\\n8 2\\n3 3\\n2 5\\n1 2\\n4 6\\n2 3\\n5 2\\n2 3\\n4 9\\n5 7\\n1 6\\n3 8\\n8 10\\n5 7\\n3 6\\n3 4\\n2 10\\n7 4\\n7 4\\n6 1\\n3 10\\n9 1\\n10 8\\n10 7\\n1 4\\n2 5\\n5 10\\n2 7\\n6 8\\n4 4\\n9 5\\n6 8\\n9 3\\n3 4\\n3 7\\n9 9\\n3 8\\n4 4\\n1 1\\n8 3\\n3 3\\n2 6\\n7 4\\n2 2\\n4 6\\n2 7\\n6 8\\n10 6\\n1 8\\n10 4\\n2 2\\n6 8\\n1 6\\n8 5\\n2 8\\n10 2\\n10 5\\n2 5\\n3 9\\n10 4\\n3 2\\n4 3\\n4 8\\n9 4\\n6 4\\n9 7\\n5 4\\n2 1\\n6 1\\n9 9\\n9 9\\n6 2\\n9 2\\n9 1\\n7 1\\n9 2\\n1 10\\n5 3\\n3 7\\n3 7\\n7 3\\n2 4\\n7 10\\n2 1\\n3 1\\n6 9\\n10 1\\n9 3\\n8 5\\n7 6\\n6 5\\n9 8\\n7 3\\n10 10\\n3 2\\n7 9\\n7 6\\n7 7\\n7 2\\n7 3\\n3 4\\n2 8\\n7 1\\n3 2\\n1 3\\n1 2\\n3 7\\n7 5\\n7 10\\n10 9\\n6 5\\n10 1\\n2 5\\n6 6\\n3 7\\n1 8\\n2 7\\n1 9\\n10 4\\n5 7\\n10 4\\n10 8\\n3 8\\n3 3\\n9 7\\n9 5\\n2 6\\n6 3\\n2 2\\n2 1\\n9 10\\n1 1\\n6 2\\n6 5\\n9 7\\n10 9\\n4 6\\n4 2\\n6 1\\n10 8\\n8 3\\n4 6\\n2 8\\n9 1\\n7 3\\n6 2\\n1 8\\n9 2\\n5 5\\n5 4\\n9 6\\n4 5\\n3 9\\n2 4\\n1 2\\n5 4\\n9 10\\n2 7\\n8 6\\n1 4\\n3 5\\n1 2\\n2 10\\n4 6\\n5 2\\n5 5\\n4 8\\n3 4\\n8 1\\n6 3\\n6 2\\n10 6\\n6 9\\n7 1\\n3 4\\n2 6\\n8 10\\n1 10\\n4 1\\n3 9\\n10 10\\n8 9\\n4 9\\n5 7\\n6 9\\n9 9\\n6 6\\n9 2\\n9 2\\n1 6\\n1 10\\n10 1\\n5 5\\n3 4\\n5 4\\n2 8\\n9 6\\n7 4\\n5 7\\n6 8\\n10 7\\n2 10\\n9 5\\n9 9\\n6 4\\n8 7\\n3 5\\n9 4\\n3 5\\n9 1\\n9 6\\n6 9\\n3 5\\n5 9\\n2 8\\n4 4\\n6 10\\n9 6\\n4 3\\n10 10\\n8 6\\n4 4\\n1 3\\n1 8\\n6 6\\n8 2\\n10 8\\n10 8\\n2 7\\n10 10\\n10 9\\n6 6\\n7 1\\n3 9\\n7 10\\n5 1\\n2 3\\n3 9\\n3 6\\n2 8\\n6 7\\n7 2\\n2 3\\n4 4\\n8 3\\n10 1\\n8 3\\n6 7\\n5 9\\n7 10\\n1 3\\n3 1\\n6 8\\n10 10\\n4 7\\n4 8\\n4 10\\n10 7\\n2 2\\n9 5\\n4 2\\n1 2\\n9 6\\n8 5\\n9 4\\n5 4\\n4 5\\n5 5\\n10 4\\n10 4\\n1 6\\n4 5\\n10 1\\n4 7\\n5 4\\n3 10\\n10 10\\n9 7\\n5 4\\n3 9\\n8 3\\n7 8\\n6 7\\n10 4\\n9 8\\n9 7\\n3 3\\n3 4\\n8 5\\n10 8\\n7 4\\n8 5\\n1 2\\n6 4\\n3 10\\n5 10\\n7 8\\n10 5\\n9 4\\n7 6\\n4 7\\n5 3\\n1 7\\n5 7\\n6 1\\n10 5\\n7 3\\n7 6\\n7 2\\n3 1\\n4 4\\n8 1\\n2 9\\n3 5\\n9 2\\n4 10\\n10 3\\n6 6\\n1 6\\n5 10\\n10 5\\n4 9\\n5 5\\n8 8\\n8 7\\n1 9\\n5 4\\n4 2\\n10 2\\n4 3\\n7 9\\n10 1\\n6 7\\n9 10\\n1 6\\n9 6\\n6 9\\n2 6\\n1 8\\n10 3\\n9 8\\n4 1\\n75\\n3 2\\n7 3\\n9 9\\n7 10\\n2 7\\n1 5\\n1 9\\n9 5\\n5 5\\n9 5\\n8 3\\n5 3\\n5 7\\n10 5\\n2 4\\n9 4\\n10 3\\n1 5\\n5 7\\n2 3\\n4 6\\n7 6\\n3 6\\n3 7\\n1 9\\n10 6\\n9 8\\n5 7\\n1 10\\n5 7\\n9 10\\n2 7\\n5 5\\n2 6\\n3 8\\n7 8\\n1 4\\n7 6\\n1 6\\n10 3\\n4 8\\n4 4\\n2 9\\n9 9\\n2 2\\n10 6\\n8 5\\n7 1\\n9 5\\n8 4\\n1 7\\n4 5\\n9 10\\n4 4\\n7 1\\n7 7\\n1 3\\n2 8\\n8 8\\n2 3\\n4 6\\n10 2\\n6 7\\n10 6\\n1 5\\n8 6\\n8 7\\n7 10\\n4 9\\n2 9\\n8 2\\n6 6\\n3 10\\n7 6\\n10 2\\n79\\n7 7\\n2 10\\n8 2\\n10 8\\n9 9\\n8 8\\n5 4\\n8 8\\n4 2\\n6 3\\n9 6\\n1 2\\n8 8\\n6 7\\n3 3\\n2 6\\n2 4\\n2 7\\n8 6\\n1 1\\n6 9\\n10 6\\n7 3\\n10 4\\n10 3\\n3 6\\n3 1\\n9 6\\n1 4\\n10 1\\n5 8\\n5 10\\n5 9\\n9 5\\n1 4\\n8 3\\n4 6\\n3 7\\n2 3\\n6 9\\n9 10\\n2 1\\n6 5\\n6 8\\n10 8\\n5 10\\n7 6\\n6 10\\n8 8\\n6 4\\n6 5\\n9 1\\n1 1\\n2 2\\n9 1\\n3 10\\n4 7\\n3 6\\n9 2\\n9 1\\n3 10\\n5 1\\n2 9\\n3 1\\n6 6\\n3 4\\n1 3\\n3 4\\n2 10\\n5 6\\n3 3\\n3 6\\n5 7\\n10 2\\n2 9\\n1 9\\n5 8\\n2 1\\n9 7\\n599\\n2 1\\n10 10\\n4 10\\n9 1\\n3 4\\n1 2\\n7 8\\n1 2\\n8 6\\n8 8\\n6 1\\n4 4\\n2 4\\n6 5\\n3 10\\n3 5\\n10 1\\n4 2\\n1 10\\n8 6\\n10 2\\n8 8\\n5 9\\n1 1\\n5 8\\n7 7\\n1 4\\n1 8\\n10 3\\n4 1\\n3 8\\n10 1\\n3 1\\n5 1\\n3 5\\n6 1\\n1 9\\n5 9\\n4 2\\n7 2\\n5 6\\n4 5\\n9 5\\n7 4\\n8 5\\n3 6\\n1 5\\n9 7\\n3 9\\n9 2\\n6 1\\n8 2\\n8 10\\n10 2\\n10 3\\n7 5\\n2 4\\n8 10\\n3 4\\n5 6\\n9 8\\n3 1\\n2 2\\n5 8\\n5 2\\n1 1\\n8 2\\n5 8\\n1 9\\n7 10\\n5 10\\n5 5\\n3 5\\n10 8\\n9 7\\n6 3\\n5 10\\n2 9\\n4 5\\n5 2\\n1 6\\n3 7\\n5 7\\n9 1\\n5 4\\n1 5\\n8 4\\n5 4\\n5 10\\n5 3\\n3 5\\n5 3\\n8 9\\n5 9\\n7 10\\n8 8\\n2 10\\n4 10\\n4 9\\n2 10\\n8 1\\n1 6\\n7 9\\n10 5\\n1 7\\n10 1\\n5 7\\n5 10\\n9 3\\n5 7\\n1 3\\n3 2\\n10 6\\n2 7\\n2 10\\n8 2\\n3 4\\n6 4\\n1 6\\n3 4\\n7 8\\n6 8\\n5 1\\n7 9\\n2 7\\n2 7\\n2 4\\n8 5\\n3 10\\n10 2\\n5 3\\n8 8\\n3 6\\n8 8\\n7 2\\n4 10\\n7 8\\n9 10\\n2 6\\n7 6\\n3 4\\n5 10\\n2 3\\n10 3\\n6 4\\n8 10\\n7 5\\n9 6\\n4 6\\n10 2\\n2 4\\n7 1\\n4 3\\n8 8\\n2 10\\n3 6\\n10 9\\n10 3\\n5 3\\n6 7\\n7 3\\n6 3\\n8 9\\n2 2\\n8 7\\n6 1\\n6 4\\n2 10\\n6 3\\n3 9\\n1 5\\n5 5\\n6 3\\n2 5\\n7 8\\n5 4\\n5 4\\n5 4\\n10 3\\n5 3\\n10 7\\n5 1\\n2 4\\n6 2\\n3 10\\n1 7\\n8 5\\n5 5\\n5 4\\n7 4\\n3 7\\n10 10\\n1 7\\n9 6\\n10 7\\n6 5\\n2 5\\n5 4\\n2 7\\n9 5\\n4 5\\n4 6\\n5 8\\n6 4\\n9 7\\n4 10\\n1 8\\n6 2\\n8 5\\n10 7\\n9 5\\n9 6\\n4 2\\n4 5\\n4 1\\n8 4\\n6 4\\n1 5\\n6 3\\n2 7\\n5 6\\n5 5\\n4 5\\n4 8\\n2 6\\n9 7\\n1 7\\n9 9\\n2 8\\n1 1\\n2 6\\n9 9\\n6 1\\n4 9\\n4 5\\n8 7\\n5 10\\n1 3\\n1 5\\n9 3\\n5 6\\n10 1\\n9 6\\n9 7\\n3 6\\n4 6\\n5 8\\n9 1\\n8 1\\n3 6\\n6 6\\n7 8\\n6 4\\n2 3\\n1 5\\n10 5\\n10 8\\n3 10\\n1 6\\n2 6\\n2 7\\n6 1\\n3 8\\n3 7\\n5 8\\n1 10\\n8 8\\n7 5\\n4 5\\n4 4\\n7 3\\n7 6\\n4 5\\n2 8\\n3 1\\n1 6\\n10 7\\n5 3\\n10 6\\n3 6\\n1 5\\n5 3\\n1 10\\n1 4\\n8 5\\n5 2\\n9 7\\n7 5\\n8 1\\n6 5\\n9 8\\n2 4\\n6 8\\n2 2\\n3 9\\n2 8\\n4 4\\n8 2\\n9 7\\n7 9\\n4 6\\n5 1\\n4 5\\n3 9\\n4 6\\n4 3\\n5 7\\n10 7\\n9 3\\n3 10\\n1 2\\n7 8\\n6 8\\n4 3\\n10 3\\n10 7\\n6 2\\n8 1\\n10 10\\n8 1\\n9 2\\n2 3\\n9 2\\n1 4\\n4 8\\n8 2\\n1 4\\n10 6\\n8 4\\n3 5\\n2 3\\n3 9\\n9 1\\n10 1\\n4 7\\n2 1\\n3 4\\n9 5\\n1 8\\n9 9\\n9 4\\n4 8\\n8 5\\n8 2\\n7 1\\n6 9\\n10 4\\n5 9\\n5 4\\n9 4\\n6 1\\n6 4\\n3 1\\n5 1\\n4 3\\n1 8\\n2 3\\n9 10\\n6 3\\n4 10\\n2 7\\n4 5\\n6 10\\n7 7\\n5 3\\n7 1\\n1 1\\n10 3\\n1 4\\n8 1\\n4 4\\n2 9\\n8 6\\n4 6\\n5 6\\n5 5\\n8 1\\n4 10\\n3 4\\n6 1\\n2 8\\n9 2\\n3 1\\n8 10\\n7 8\\n9 10\\n3 9\\n8 4\\n3 9\\n1 3\\n2 1\\n4 6\\n4 1\\n3 10\\n3 8\\n6 2\\n4 7\\n9 5\\n9 3\\n3 10\\n8 5\\n6 9\\n7 3\\n10 4\\n8 8\\n3 5\\n2 1\\n1 2\\n3 9\\n1 3\\n3 9\\n9 6\\n2 2\\n4 4\\n6 2\\n10 3\\n10 3\\n6 8\\n10 5\\n1 1\\n8 10\\n9 6\\n8 5\\n6 1\\n8 4\\n3 9\\n5 2\\n7 1\\n1 6\\n8 8\\n8 3\\n9 2\\n8 8\\n10 4\\n4 3\\n3 6\\n1 8\\n8 3\\n6 8\\n7 3\\n8 5\\n4 2\\n3 9\\n10 10\\n9 1\\n7 9\\n6 1\\n2 8\\n8 1\\n4 1\\n9 9\\n10 4\\n4 5\\n6 8\\n8 8\\n4 7\\n7 3\\n9 7\\n2 9\\n6 8\\n9 9\\n5 1\\n6 6\\n10 6\\n10 9\\n5 3\\n10 5\\n7 5\\n1 9\\n4 8\\n9 8\\n7 7\\n1 1\\n9 9\\n9 3\\n3 2\\n10 6\\n2 5\\n5 5\\n9 8\\n8 8\\n4 10\\n7 4\\n3 7\\n8 9\\n7 10\\n4 2\\n7 9\\n1 7\\n6 6\\n2 5\\n5 1\\n8 3\\n5 10\\n5 10\\n1 1\\n8 5\\n1 4\\n2 4\\n1 2\\n6 4\\n3 10\\n10 6\\n6 4\\n2 10\\n5 3\\n5 8\\n5 5\\n2 6\\n3 4\\n7 9\\n3 2\\n5 10\\n8 10\\n7 6\\n4 9\\n9 9\\n7 1\\n3 8\\n10 4\\n8 8\\n6 6\\n7 1\\n5 8\\n10 9\\n3 4\\n3 2\\n9 4\\n7 8\\n9 2\\n10 1\\n6 2\\n2 4\\n6 8\\n9 9\\n3 6\\n8 8\\n4 3\\n7 2\\n4 8\\n7 8\\n7 2\\n1 4\\n5 5\\n10 8\\n9 4\\n4 9\\n3 1\\n1 7\\n4 7\\n1 1\\n7 5\\n7 7\\n3 10\\n8 10\\n2 7\\n4 6\\n5 7\\n4 1\\n4 2\\n4 10\\n2 1\\n5 10\\n10 5\\n9 6\\n7 3\\n10 1\\n8 8\\n7 4\\n6 8\\n1 6\\n9 2\\n7 9\\n2 3\\n4 1\\n6 8\\n6 10\\n10 3\\n6 8\\n8 8\\n3 8\\n10 10\\n8 7\\n3 10\\n10 10\\n9 9\\n8 3\\n10 2\\n1 8\\n4 6\\n4 3\\n4 7\\n5 2\\n2 9\\n4 5\\n9 9\\n5 3\\n2 10\\n6 1\\n709\\n4 1\\n4 1\\n3 7\\n5 9\\n5 7\\n10 1\\n7 6\\n4 10\\n4 9\\n6 2\\n5 10\\n3 2\\n10 7\\n10 4\\n5 9\\n2 8\\n10 7\\n10 7\\n6 3\\n2 3\\n5 5\\n10 9\\n8 3\\n10 7\\n1 6\\n3 1\\n8 6\\n10 2\\n9 1\\n4 3\\n8 7\\n1 10\\n1 9\\n1 10\\n4 3\\n1 9\\n4 6\\n6 8\\n9 3\\n10 9\\n9 7\\n7 5\\n4 4\\n5 3\\n5 2\\n9 8\\n7 3\\n9 4\\n5 1\\n6 6\\n2 7\\n10 7\\n1 3\\n5 3\\n10 9\\n2 3\\n3 6\\n2 3\\n9 9\\n10 8\\n10 4\\n9 4\\n1 9\\n1 2\\n9 1\\n9 2\\n5 5\\n3 6\\n9 8\\n3 5\\n10 10\\n6 8\\n4 3\\n6 7\\n1 7\\n1 1\\n6 8\\n7 3\\n3 6\\n5 4\\n7 8\\n7 5\\n3 5\\n3 5\\n7 9\\n5 3\\n1 9\\n1 4\\n1 10\\n2 4\\n10 4\\n7 8\\n2 9\\n10 7\\n8 5\\n5 8\\n4 10\\n8 7\\n6 5\\n2 6\\n10 8\\n1 8\\n9 4\\n5 9\\n5 6\\n5 9\\n10 5\\n2 7\\n6 2\\n5 10\\n9 10\\n10 8\\n7 2\\n6 1\\n5 9\\n1 1\\n3 1\\n1 9\\n7 9\\n8 4\\n9 9\\n1 9\\n2 5\\n4 4\\n5 10\\n1 6\\n10 2\\n10 4\\n5 2\\n7 7\\n2 6\\n3 7\\n5 10\\n2 2\\n9 8\\n10 7\\n9 1\\n1 2\\n1 2\\n5 4\\n7 1\\n10 2\\n5 3\\n2 2\\n9 9\\n3 8\\n6 3\\n2 2\\n10 9\\n2 4\\n2 6\\n8 7\\n3 6\\n10 6\\n4 4\\n4 2\\n8 10\\n6 1\\n3 4\\n1 2\\n9 5\\n8 8\\n2 8\\n10 4\\n2 2\\n2 7\\n10 5\\n1 1\\n3 5\\n4 2\\n1 3\\n5 5\\n4 1\\n5 10\\n2 3\\n9 6\\n7 4\\n8 8\\n6 9\\n4 7\\n5 1\\n7 1\\n5 2\\n8 8\\n9 3\\n8 10\\n4 1\\n8 8\\n5 1\\n6 7\\n3 3\\n8 8\\n5 1\\n8 10\\n7 4\\n3 6\\n9 6\\n3 3\\n8 1\\n8 8\\n10 4\\n5 8\\n6 7\\n6 7\\n5 6\\n5 9\\n9 7\\n4 9\\n7 9\\n8 9\\n1 4\\n6 7\\n3 5\\n8 6\\n8 5\\n9 8\\n8 1\\n7 10\\n9 5\\n3 10\\n2 4\\n5 5\\n8 9\\n6 8\\n8 1\\n10 5\\n2 8\\n5 3\\n7 7\\n2 1\\n8 4\\n10 2\\n3 9\\n5 8\\n4 2\\n7 6\\n1 5\\n4 7\\n10 2\\n3 6\\n1 2\\n2 6\\n1 10\\n10 7\\n2 5\\n2 4\\n4 10\\n6 2\\n8 2\\n8 5\\n10 3\\n1 5\\n9 1\\n2 10\\n2 1\\n10 8\\n2 10\\n7 9\\n3 4\\n6 3\\n1 7\\n2 5\\n8 5\\n3 7\\n5 1\\n4 1\\n4 6\\n10 4\\n5 1\\n3 6\\n5 4\\n8 4\\n7 9\\n6 5\\n2 2\\n8 7\\n2 8\\n10 10\\n3 8\\n7 10\\n7 10\\n7 10\\n3 2\\n7 1\\n9 3\\n6 4\\n7 10\\n9 5\\n8 9\\n7 2\\n7 2\\n10 4\\n2 7\\n8 1\\n9 9\\n2 2\\n9 2\\n2 9\\n5 1\\n2 8\\n1 6\\n8 4\\n6 10\\n8 2\\n4 9\\n10 4\\n4 7\\n7 3\\n2 3\\n1 9\\n1 8\\n2 7\\n5 2\\n2 1\\n8 8\\n10 2\\n5 7\\n2 3\\n9 7\\n10 10\\n3 5\\n7 9\\n9 5\\n6 1\\n2 1\\n8 9\\n10 1\\n3 7\\n9 3\\n1 2\\n3 9\\n9 3\\n2 5\\n9 7\\n10 8\\n9 1\\n10 6\\n5 1\\n10 10\\n8 2\\n2 6\\n8 2\\n5 6\\n5 10\\n7 8\\n4 6\\n2 4\\n4 6\\n5 4\\n9 7\\n9 8\\n9 1\\n7 9\\n6 1\\n5 8\\n7 6\\n1 5\\n4 7\\n2 2\\n8 1\\n7 1\\n4 5\\n9 5\\n7 6\\n4 4\\n8 8\\n3 2\\n5 10\\n4 9\\n2 9\\n5 8\\n5 9\\n4 5\\n5 8\\n5 1\\n10 7\\n3 2\\n6 3\\n6 10\\n7 6\\n7 6\\n3 3\\n8 1\\n1 2\\n10 3\\n5 2\\n7 5\\n9 7\\n10 10\\n8 4\\n2 7\\n8 7\\n8 2\\n10 3\\n7 7\\n5 10\\n10 1\\n2 5\\n4 9\\n6 5\\n4 10\\n3 9\\n6 10\\n5 7\\n6 4\\n6 1\\n2 6\\n4 3\\n9 6\\n5 5\\n8 9\\n2 3\\n9 6\\n7 3\\n5 1\\n7 5\\n5 1\\n6 5\\n4 1\\n5 4\\n1 5\\n2 9\\n2 8\\n7 6\\n8 4\\n5 1\\n1 2\\n10 8\\n3 6\\n9 4\\n2 5\\n6 9\\n8 10\\n9 5\\n10 6\\n3 4\\n10 1\\n9 10\\n7 1\\n10 8\\n3 10\\n10 10\\n5 2\\n8 8\\n8 8\\n3 5\\n2 6\\n9 1\\n9 6\\n1 8\\n3 6\\n3 3\\n9 5\\n2 1\\n6 2\\n7 7\\n6 2\\n2 1\\n3 2\\n10 4\\n10 7\\n4 7\\n1 6\\n6 5\\n4 4\\n5 3\\n10 9\\n6 1\\n5 8\\n3 8\\n9 3\\n8 8\\n9 5\\n2 9\\n4 9\\n6 1\\n5 5\\n1 5\\n5 1\\n7 1\\n8 8\\n3 2\\n5 9\\n5 2\\n5 10\\n1 9\\n6 10\\n8 3\\n2 1\\n10 10\\n1 2\\n8 8\\n9 4\\n10 8\\n1 5\\n8 4\\n6 10\\n7 4\\n10 4\\n9 4\\n9 8\\n7 10\\n7 1\\n1 3\\n9 4\\n2 8\\n3 2\\n9 7\\n10 2\\n10 3\\n1 10\\n5 4\\n9 4\\n1 5\\n10 8\\n6 7\\n3 9\\n1 9\\n1 8\\n10 2\\n4 9\\n1 8\\n2 9\\n8 2\\n5 1\\n10 9\\n1 4\\n7 10\\n4 9\\n1 1\\n9 9\\n1 6\\n8 4\\n5 5\\n9 2\\n6 6\\n7 10\\n9 8\\n1 7\\n5 2\\n1 5\\n6 5\\n7 8\\n10 4\\n3 9\\n1 9\\n6 7\\n2 7\\n9 4\\n1 2\\n9 6\\n7 9\\n10 7\\n2 3\\n6 7\\n10 8\\n6 1\\n1 7\\n3 8\\n6 3\\n9 2\\n9 2\\n7 2\\n9 8\\n4 3\\n10 3\\n10 5\\n2 2\\n3 4\\n5 2\\n3 3\\n3 7\\n2 9\\n9 5\\n9 6\\n7 4\\n10 8\\n9 6\\n7 6\\n3 9\\n4 9\\n5 6\\n9 7\\n3 10\\n3 4\\n5 3\\n1 10\\n2 6\\n2 9\\n9 10\\n8 5\\n9 7\\n3 3\\n8 9\\n3 10\\n7 8\\n8 5\\n9 2\\n4 5\\n4 1\\n4 8\\n1 10\\n1 8\\n9 1\\n7 7\\n9 8\\n6 5\\n9 5\\n6 10\\n4 7\\n9 2\\n5 4\\n8 10\\n1 4\\n1 4\\n8 2\\n8 8\\n6 9\\n1 3\\n1 2\\n10 8\\n4 10\\n7 9\\n8 8\\n4 5\\n2 3\\n1 8\\n5 9\\n4 4\\n4 8\\n5 9\\n1 3\\n3 9\\n4 4\\n9 7\\n6 5\\n4 9\\n4 2\\n6 10\\n3 7\\n4 9\\n7 7\\n9 2\\n6 3\\n3 7\\n9 5\\n7 9\\n9 9\\n4 6\\n10 1\\n5 2\\n3 4\\n8 1\\n2 1\\n6 4\\n9 1\\n5 1\\n7 9\\n2 3\\n6 5\\n7 2\\n3 8\\n5 10\\n1 6\\n8 7\\n8 1\\n2 8\\n9 10\\n6 9\\n3 7\\n5 3\\n1 5\\n9 10\\n3 8\\n9 9\\n10 9\\n7 3\\n5 7\\n7 7\\n10 10\\n4 1\\n4 2\\n10 7\\n7 4\\n3 9\\n6 4\\n3 6\\n7 6\\n8 5\\n10 7\\n5 8\\n3 9\\n1 4\\n8 2\\n10 10\\n6 4\\n6 9\\n3 3\\n5 3\\n5 1\\n2 10\\n9 9\\n3 5\\n1 10\\n5 7\\n1 2\\n6 3\\n3 3\\n8 3\\n54\\n2 6\\n3 3\\n5 3\\n2 1\\n8 4\\n6 3\\n4 5\\n10 3\\n3 10\\n1 6\\n5 6\\n1 1\\n6 9\\n6 5\\n9 4\\n8 4\\n7 10\\n9 6\\n10 7\\n9 3\\n8 9\\n10 6\\n9 7\\n9 1\\n3 6\\n6 1\\n4 4\\n2 4\\n1 6\\n9 2\\n9 2\\n4 7\\n6 1\\n5 4\\n1 5\\n9 6\\n2 3\\n9 1\\n5 9\\n6 3\\n10 4\\n6 6\\n10 6\\n8 2\\n9 7\\n9 5\\n7 5\\n3 8\\n4 2\\n5 3\\n9 2\\n6 3\\n4 8\\n6 4\\n536\\n1 10\\n9 2\\n10 8\\n3 8\\n10 4\\n7 10\\n7 3\\n5 7\\n3 8\\n2 1\\n6 7\\n9 2\\n2 6\\n10 9\\n6 2\\n5 2\\n5 3\\n2 10\\n4 6\\n6 1\\n6 9\\n6 1\\n6 1\\n7 9\\n1 1\\n8 10\\n9 5\\n4 4\\n9 7\\n7 4\\n5 5\\n3 3\\n8 6\\n2 9\\n2 1\\n3 3\\n5 2\\n10 3\\n9 5\\n10 2\\n7 5\\n8 1\\n7 5\\n3 10\\n10 4\\n7 4\\n5 9\\n9 2\\n9 4\\n7 10\\n7 4\\n4 9\\n2 9\\n4 10\\n3 4\\n6 7\\n2 5\\n2 2\\n7 6\\n5 9\\n4 4\\n8 5\\n10 3\\n6 10\\n7 3\\n4 2\\n6 3\\n4 7\\n10 1\\n9 7\\n6 3\\n6 6\\n2 2\\n5 7\\n10 5\\n4 3\\n3 5\\n2 7\\n2 9\\n8 9\\n3 9\\n8 4\\n7 7\\n3 3\\n3 8\\n1 5\\n8 7\\n6 5\\n4 9\\n3 2\\n9 1\\n3 2\\n4 9\\n5 1\\n9 4\\n9 5\\n3 1\\n4 3\\n3 7\\n8 4\\n10 10\\n6 3\\n8 5\\n1 6\\n8 10\\n9 10\\n2 9\\n1 2\\n8 5\\n8 8\\n8 5\\n6 1\\n9 5\\n10 3\\n5 6\\n7 4\\n10 7\\n3 8\\n2 1\\n3 9\\n7 8\\n6 7\\n8 6\\n5 10\\n5 9\\n2 10\\n5 8\\n2 5\\n4 8\\n5 5\\n5 8\\n10 4\\n8 4\\n5 5\\n9 7\\n1 1\\n6 9\\n3 1\\n4 6\\n9 5\\n5 1\\n5 9\\n8 7\\n1 2\\n7 4\\n3 3\\n3 4\\n9 7\\n10 5\\n6 6\\n2 8\\n5 6\\n9 6\\n5 1\\n6 3\\n6 7\\n3 5\\n1 3\\n3 7\\n2 7\\n10 3\\n8 4\\n2 3\\n3 9\\n2 10\\n9 2\\n6 2\\n10 1\\n3 10\\n6 6\\n8 6\\n9 8\\n10 5\\n8 6\\n5 2\\n1 8\\n7 1\\n6 6\\n5 5\\n5 5\\n1 6\\n7 4\\n1 3\\n10 2\\n4 4\\n6 5\\n8 3\\n8 2\\n2 4\\n8 4\\n9 9\\n8 9\\n2 9\\n1 7\\n10 2\\n5 6\\n7 7\\n2 4\\n4 5\\n9 6\\n6 3\\n7 6\\n10 4\\n5 6\\n7 9\\n5 10\\n5 7\\n6 10\\n6 1\\n4 6\\n3 3\\n5 10\\n8 3\\n2 2\\n3 10\\n9 1\\n4 8\\n6 5\\n8 2\\n3 9\\n4 6\\n8 3\\n8 1\\n6 2\\n1 10\\n9 10\\n4 6\\n9 4\\n6 4\\n3 9\\n2 10\\n6 8\\n9 4\\n8 10\\n8 9\\n9 6\\n1 5\\n1 8\\n8 2\\n10 9\\n5 9\\n2 5\\n3 8\\n9 5\\n2 1\\n4 5\\n6 7\\n3 3\\n4 6\\n3 6\\n2 4\\n3 1\\n8 2\\n3 2\\n3 5\\n4 7\\n10 9\\n2 4\\n6 5\\n10 1\\n5 8\\n8 5\\n1 9\\n7 5\\n3 6\\n10 2\\n2 4\\n5 1\\n3 4\\n10 4\\n2 4\\n8 6\\n7 4\\n4 5\\n5 10\\n3 7\\n1 8\\n6 8\\n4 9\\n6 3\\n3 10\\n3 8\\n2 2\\n10 2\\n2 10\\n6 10\\n1 8\\n7 10\\n10 1\\n9 5\\n7 4\\n10 2\\n7 6\\n3 4\\n10 4\\n6 9\\n1 2\\n10 1\\n8 10\\n1 7\\n2 6\\n3 4\\n3 7\\n9 1\\n4 7\\n6 3\\n1 10\\n2 5\\n7 9\\n8 9\\n1 10\\n10 9\\n3 6\\n8 3\\n8 6\\n9 8\\n8 7\\n8 10\\n9 8\\n2 3\\n5 2\\n4 5\\n6 2\\n4 3\\n8 10\\n8 10\\n7 3\\n3 2\\n7 8\\n8 9\\n3 7\\n9 5\\n6 2\\n1 4\\n10 6\\n2 9\\n10 8\\n4 2\\n4 8\\n4 8\\n8 8\\n10 3\\n5 3\\n3 2\\n6 9\\n5 6\\n7 7\\n4 9\\n3 8\\n8 1\\n10 7\\n3 3\\n5 6\\n6 10\\n4 5\\n8 9\\n2 8\\n8 7\\n7 8\\n10 8\\n8 10\\n8 3\\n1 6\\n8 1\\n2 5\\n10 3\\n3 2\\n2 3\\n2 7\\n2 2\\n1 2\\n9 3\\n3 7\\n1 4\\n6 3\\n2 4\\n3 5\\n7 1\\n7 5\\n2 3\\n4 3\\n8 10\\n8 4\\n6 8\\n4 1\\n2 1\\n1 10\\n1 3\\n1 9\\n3 9\\n2 6\\n4 9\\n10 10\\n6 7\\n2 1\\n5 1\\n8 7\\n8 5\\n4 7\\n3 8\\n5 6\\n1 2\\n1 2\\n6 2\\n3 8\\n10 6\\n3 5\\n3 3\\n7 3\\n3 10\\n10 9\\n4 2\\n6 5\\n3 10\\n2 7\\n3 2\\n8 1\\n9 9\\n5 4\\n9 6\\n5 10\\n8 6\\n3 4\\n10 9\\n7 9\\n6 9\\n9 9\\n9 7\\n6 1\\n1 1\\n9 8\\n8 10\\n8 4\\n1 2\\n6 1\\n4 5\\n5 9\\n4 1\\n1 10\\n5 10\\n7 6\\n4 4\\n6 2\\n2 3\\n10 7\\n5 1\\n5 10\\n6 10\\n5 5\\n8 6\\n9 8\\n2 3\\n4 4\\n8 3\\n4 3\\n7 2\\n9 9\\n2 6\\n10 3\\n8 2\\n6 1\\n10 5\\n5 9\\n2 4\\n3 3\\n7 5\\n2 3\\n2 8\\n6 2\\n9 4\\n9 3\\n6 1\\n7 7\\n6 9\\n9 6\\n7 6\\n3 8\\n6 6\\n7 8\\n6 7\\n6 9\\n8 8\\n4 7\\n7 8\\n3 8\\n9 2\\n7 3\\n9 1\\n8 5\\n10 1\\n1 9\\n4 8\\n10 2\\n8 6\\n8 7\\n5 2\\n5 4\\n7 2\\n1 3\\n2 4\\n6 9\\n10 4\\n7 8\\n1 2\\n4 8\\n7 1\\n8 1\\n10 2\\n8 3\\n3 6\\n5 5\\n9 10\\n9 5\\n6 3\\n5 4\\n6 4\\n5 6\\n10 3\\n2 1\\n8 2\\n5 6\\n10 4\\n5 10\\n9 6\\n5 2\\n3 2\\n8 1\\n10 10\\n9 7\\n2 4\\n2 9\\n8 7\\n3 8\\n1 6\\n3 6\\n5 7\\n545\\n2 9\\n2 5\\n8 10\\n3 5\\n10 9\\n8 4\\n1 9\\n10 1\\n6 5\\n7 10\\n3 7\\n3 7\\n4 4\\n5 9\\n8 8\\n3 6\\n4 4\\n2 5\\n4 1\\n5 10\\n7 3\\n1 8\\n7 1\\n7 4\\n7 6\\n9 3\\n6 7\\n1 3\\n5 9\\n2 10\\n6 1\\n9 10\\n8 6\\n9 6\\n6 4\\n2 9\\n6 3\\n7 4\\n2 1\\n7 6\\n3 3\\n7 9\\n10 7\\n7 10\\n8 2\\n10 3\\n4 1\\n6 4\\n8 4\\n8 2\\n8 1\\n3 6\\n5 7\\n9 7\\n3 1\\n8 7\\n7 8\\n4 9\\n5 1\\n8 8\\n7 9\\n7 7\\n10 7\\n3 7\\n10 10\\n1 5\\n8 5\\n1 2\\n5 6\\n10 7\\n2 5\\n3 4\\n1 10\\n10 3\\n9 6\\n4 5\\n6 2\\n8 7\\n2 8\\n8 8\\n2 8\\n7 10\\n8 4\\n1 1\\n9 5\\n8 10\\n5 6\\n8 10\\n1 3\\n5 3\\n4 1\\n5 1\\n2 10\\n6 1\\n2 9\\n8 4\\n8 7\\n4 10\\n2 2\\n7 1\\n10 7\\n5 5\\n10 8\\n5 2\\n2 7\\n2 2\\n2 1\\n4 7\\n5 2\\n10 4\\n5 4\\n3 6\\n10 4\\n4 8\\n1 7\\n2 2\\n6 3\\n3 4\\n9 10\\n3 6\\n9 9\\n2 4\\n2 3\\n9 5\\n5 2\\n3 1\\n6 3\\n5 10\\n2 9\\n7 7\\n8 6\\n6 5\\n10 10\\n2 6\\n4 4\\n8 10\\n9 10\\n7 8\\n1 2\\n9 2\\n7 7\\n5 4\\n1 8\\n9 10\\n10 4\\n2 5\\n10 10\\n9 1\\n8 9\\n9 10\\n3 3\\n10 7\\n5 5\\n9 1\\n3 10\\n1 5\\n10 8\\n3 1\\n1 8\\n7 8\\n10 8\\n1 9\\n2 5\\n1 5\\n8 2\\n8 3\\n9 7\\n3 9\\n10 4\\n10 7\\n9 1\\n8 4\\n8 3\\n1 8\\n1 1\\n6 4\\n7 4\\n8 5\\n6 6\\n8 1\\n1 6\\n2 2\\n7 2\\n10 1\\n4 7\\n5 10\\n8 10\\n4 8\\n1 6\\n1 7\\n7 4\\n3 5\\n6 8\\n2 6\\n3 6\\n5 8\\n8 3\\n8 6\\n3 10\\n4 5\\n3 9\\n5 10\\n1 2\\n5 4\\n10 8\\n2 6\\n8 3\\n10 2\\n4 9\\n3 8\\n9 5\\n7 8\\n10 3\\n4 10\\n4 9\\n10 4\\n10 8\\n1 1\\n9 7\\n4 6\\n10 1\\n8 1\\n3 7\\n5 9\\n5 10\\n1 10\\n6 1\\n9 10\\n2 5\\n4 5\\n4 6\\n3 10\\n9 2\\n5 10\\n3 7\\n2 7\\n3 4\\n5 9\\n5 4\\n1 5\\n5 10\\n10 7\\n6 4\\n10 4\\n4 4\\n1 2\\n5 5\\n10 4\\n3 3\\n6 5\\n10 3\\n10 4\\n9 10\\n8 2\\n1 7\\n4 9\\n6 7\\n10 4\\n9 8\\n4 1\\n5 1\\n1 8\\n8 9\\n3 7\\n5 10\\n7 1\\n5 7\\n9 2\\n3 4\\n7 6\\n3 9\\n2 1\\n8 4\\n5 8\\n7 7\\n3 10\\n7 8\\n3 10\\n1 6\\n9 10\\n8 5\\n10 4\\n9 6\\n3 1\\n6 8\\n10 6\\n7 1\\n5 8\\n1 3\\n2 6\\n4 2\\n7 6\\n3 9\\n8 3\\n7 2\\n4 7\\n5 7\\n4 6\\n3 2\\n3 4\\n6 5\\n3 5\\n7 2\\n9 2\\n7 5\\n3 5\\n4 5\\n3 8\\n9 4\\n8 10\\n10 6\\n7 2\\n10 5\\n6 8\\n7 8\\n6 5\\n8 5\\n5 4\\n3 5\\n10 1\\n4 9\\n2 9\\n9 8\\n10 3\\n4 4\\n4 4\\n10 7\\n10 5\\n10 7\\n5 2\\n6 4\\n5 8\\n3 7\\n9 8\\n10 9\\n9 8\\n10 4\\n5 2\\n7 7\\n1 10\\n6 2\\n5 4\\n2 10\\n2 1\\n3 7\\n4 7\\n7 4\\n2 9\\n5 4\\n9 8\\n10 4\\n2 1\\n9 2\\n4 2\\n4 5\\n8 3\\n1 9\\n10 10\\n6 10\\n5 5\\n10 2\\n2 2\\n1 1\\n7 8\\n9 8\\n3 4\\n1 8\\n2 4\\n4 10\\n2 1\\n9 2\\n1 4\\n9 1\\n10 10\\n7 3\\n10 7\\n2 3\\n3 6\\n9 7\\n2 9\\n7 5\\n4 4\\n1 2\\n7 5\\n6 2\\n10 6\\n5 8\\n5 9\\n5 4\\n8 9\\n5 9\\n5 3\\n1 5\\n10 3\\n6 2\\n2 4\\n6 6\\n2 6\\n3 7\\n1 8\\n6 2\\n5 4\\n10 2\\n6 7\\n3 10\\n10 1\\n9 7\\n4 7\\n8 9\\n4 2\\n3 10\\n1 1\\n7 6\\n6 9\\n4 7\\n4 8\\n10 2\\n6 5\\n5 3\\n2 1\\n2 4\\n3 9\\n7 6\\n10 7\\n10 8\\n9 4\\n7 9\\n8 4\\n1 1\\n1 5\\n8 8\\n4 6\\n6 2\\n1 1\\n10 4\\n1 7\\n8 6\\n5 4\\n6 8\\n10 7\\n3 6\\n4 4\\n10 2\\n9 2\\n1 1\\n10 10\\n10 7\\n1 9\\n5 1\\n2 3\\n6 4\\n2 9\\n7 7\\n8 8\\n10 10\\n5 6\\n3 6\\n2 8\\n6 9\\n3 6\\n10 5\\n4 7\\n10 3\\n2 3\\n7 2\\n9 2\\n7 8\\n2 2\\n5 10\\n5 8\\n7 8\\n1 2\\n1 6\\n5 7\\n5 5\\n9 8\\n10 2\\n4 3\\n5 6\\n3 5\\n1 4\\n2 3\\n2 3\\n7 10\\n7 3\\n8 7\\n1 2\\n9 10\\n8 7\\n1 7\\n7 8\\n8 10\\n1 2\\n7 8\\n5 3\\n1 6\\n10 4\\n7 7\\n4 10\\n1 3\\n7 1\\n3 2\\n2 3\\n3 6\\n1 3\\n9 10\\n10 10\\n6 2\\n7 1\\n6 9\\n1 4\\n6 5\\n6 5\\n1 3\\n6 9\\n1 10\\n10 2\\n9 6\\n4 8\\n10 7\\n4 10\\n6 7\\n7 7\\n6 9\\n6 7\\n4 5\\n7 6\\n6 8\\n8 3\\n5 2\\n4 3\\n7 1\\n1 9\\n5 1\\n6 9\\n2 3\\n1 3\\n3 8\\n8 2\\n4 4\\n5 2\\n5 4\\n6 5\\n1 8\\n4 5\\n129\\n10 2\\n8 2\\n1 7\\n2 3\\n4 1\\n7 6\\n8 3\\n6 4\\n10 5\\n9 8\\n2 2\\n4 7\\n9 9\\n10 10\\n1 3\\n10 6\\n4 10\\n4 1\\n5 5\\n9 3\\n4 2\\n9 10\\n10 6\\n10 3\\n7 10\\n10 2\\n6 10\\n6 5\\n2 2\\n1 2\\n10 9\\n10 7\\n7 9\\n10 3\\n1 4\\n1 2\\n10 4\\n10 7\\n2 1\\n1 5\\n2 2\\n7 10\\n4 10\\n4 1\\n6 7\\n9 10\\n1 3\\n1 6\\n6 2\\n4 8\\n9 9\\n2 5\\n2 8\\n2 10\\n8 7\\n4 4\\n7 1\\n8 6\\n1 5\\n5 5\\n9 1\\n1 2\\n4 3\\n10 8\\n4 1\\n3 4\\n10 8\\n3 9\\n9 3\\n4 4\\n6 7\\n4 4\\n6 5\\n8 10\\n5 10\\n7 7\\n6 9\\n10 7\\n5 3\\n10 7\\n4 6\\n5 5\\n3 10\\n9 5\\n4 7\\n9 1\\n2 2\\n10 4\\n10 3\\n1 1\\n3 8\\n8 10\\n1 3\\n6 9\\n3 3\\n4 9\\n2 1\\n7 5\\n6 1\\n1 4\\n7 3\\n5 7\\n10 6\\n2 9\\n6 2\\n1 5\\n5 10\\n7 7\\n6 3\\n3 5\\n8 4\\n2 7\\n2 10\\n2 6\\n3 1\\n3 10\\n7 8\\n1 10\\n4 10\\n6 10\\n2 3\\n8 10\\n4 3\\n5 5\\n6 1\\n6 6\\n3 1\\n7 8\\n9 7\\n361\\n10 5\\n10 8\\n7 7\\n10 2\\n10 1\\n3 7\\n4 1\\n3 10\\n8 5\\n8 9\\n3 8\\n6 9\\n8 6\\n4 4\\n2 6\\n6 10\\n9 4\\n3 6\\n7 4\\n2 2\\n2 5\\n6 8\\n9 9\\n9 4\\n7 6\\n10 10\\n1 7\\n9 7\\n3 3\\n10 2\\n3 3\\n10 7\\n1 7\\n3 7\\n2 10\\n5 9\\n8 9\\n5 9\\n8 5\\n1 4\\n3 8\\n2 1\\n3 1\\n8 10\\n9 3\\n10 1\\n6 10\\n10 3\\n4 7\\n8 4\\n6 5\\n5 4\\n1 1\\n7 3\\n6 8\\n2 1\\n6 8\\n5 1\\n9 6\\n3 6\\n1 2\\n4 8\\n8 2\\n9 6\\n4 7\\n10 2\\n10 9\\n9 5\\n8 2\\n5 8\\n5 5\\n7 7\\n7 7\\n6 9\\n4 3\\n7 1\\n1 8\\n6 8\\n8 10\\n9 3\\n3 8\\n7 6\\n9 6\\n2 9\\n1 3\\n7 1\\n8 2\\n8 2\\n10 3\\n4 5\\n7 6\\n9 1\\n5 2\\n3 7\\n1 6\\n4 2\\n1 1\\n3 9\\n4 10\\n7 4\\n3 5\\n8 5\\n4 2\\n1 2\\n4 6\\n10 4\\n3 4\\n6 8\\n9 5\\n8 8\\n5 1\\n7 2\\n4 5\\n7 9\\n6 7\\n7 8\\n3 3\\n7 1\\n4 6\\n1 4\\n7 10\\n1 4\\n8 1\\n4 4\\n8 4\\n6 4\\n9 8\\n10 4\\n7 8\\n7 8\\n7 5\\n6 1\\n6 9\\n9 4\\n3 1\\n10 1\\n2 9\\n8 2\\n10 3\\n3 1\\n8 10\\n1 5\\n7 2\\n3 3\\n1 5\\n7 8\\n10 9\\n9 5\\n4 7\\n7 1\\n5 7\\n10 9\\n4 8\\n6 1\\n3 2\\n7 6\\n5 7\\n6 5\\n7 8\\n2 10\\n5 4\\n6 8\\n4 8\\n10 5\\n7 6\\n4 7\\n8 5\\n2 9\\n5 6\\n8 9\\n4 9\\n9 9\\n9 5\\n10 7\\n7 1\\n5 4\\n4 6\\n8 8\\n1 4\\n3 3\\n1 3\\n5 3\\n9 2\\n3 8\\n2 5\\n4 6\\n8 10\\n6 10\\n7 2\\n2 10\\n9 3\\n10 8\\n6 8\\n4 6\\n1 7\\n10 7\\n9 8\\n2 4\\n6 2\\n9 5\\n8 9\\n7 6\\n1 9\\n6 1\\n9 9\\n7 1\\n4 6\\n4 2\\n8 9\\n7 8\\n10 5\\n4 5\\n3 2\\n2 1\\n5 9\\n10 4\\n5 1\\n3 6\\n4 7\\n9 6\\n4 8\\n3 8\\n8 7\\n9 6\\n4 1\\n1 6\\n3 10\\n2 5\\n4 2\\n4 5\\n4 2\\n5 7\\n8 8\\n2 9\\n4 8\\n8 9\\n6 4\\n7 4\\n4 7\\n7 7\\n6 10\\n5 7\\n1 10\\n6 10\\n9 6\\n1 1\\n4 1\\n10 3\\n1 4\\n8 7\\n7 8\\n10 7\\n3 9\\n6 5\\n9 1\\n1 3\\n7 2\\n5 9\\n1 7\\n5 8\\n1 6\\n9 3\\n1 10\\n3 7\\n2 2\\n10 5\\n8 1\\n5 4\\n1 4\\n3 10\\n7 10\\n7 1\\n5 5\\n4 8\\n5 3\\n9 6\\n8 1\\n6 1\\n2 8\\n2 7\\n7 8\\n9 5\\n1 2\\n9 8\\n10 6\\n7 5\\n2 9\\n5 5\\n4 9\\n5 2\\n4 7\\n3 10\\n5 2\\n1 1\\n9 3\\n5 9\\n6 7\\n9 7\\n6 1\\n9 6\\n7 9\\n9 1\\n10 7\\n2 9\\n3 2\\n6 7\\n4 9\\n5 3\\n8 7\\n6 4\\n7 7\\n6 10\\n2 8\\n9 8\\n4 3\\n3 3\\n9 5\\n2 1\\n9 8\\n5 8\\n2 5\\n9 4\\n1 5\\n5 4\\n9 3\\n6 2\\n10 5\\n5 8\\n2 7\\n3 9\\n9 5\\n9 4\\n8 2\\n5 8\\n6 6\\n9 7\\n3 6\\n9 5\\n6 10\\n10 8\\n6 10\\n3 4\\n8 9\\n3 3\\n4 9\\n2 7\\n3 3\\n2 3\\n7 4\\n7 1\\n4 3\\n4 1\\n10 5\\n7 10\\n7 9\\n4 4\\n1 2\\n8 10\\n2 3\\n8 2\\n2 10\\n539\\n7 9\\n10 8\\n9 9\\n3 3\\n5 2\\n7 6\\n7 7\\n6 10\\n7 6\\n5 7\\n5 9\\n2 1\\n8 1\\n1 2\\n2 3\\n2 1\\n10 3\\n3 7\\n4 1\\n5 8\\n8 4\\n3 4\\n4 10\\n3 3\\n1 3\\n3 2\\n7 7\\n8 6\\n6 5\\n10 4\\n10 10\\n5 10\\n5 4\\n5 4\\n5 2\\n6 6\\n2 7\\n4 2\\n7 4\\n3 7\\n3 3\\n8 5\\n3 10\\n4 10\\n10 7\\n7 1\\n6 3\\n5 7\\n4 5\\n7 1\\n6 5\\n5 7\\n10 9\\n8 8\\n5 6\\n4 8\\n5 3\\n9 7\\n1 2\\n4 6\\n1 8\\n8 9\\n6 8\\n4 10\\n8 2\\n9 4\\n5 1\\n10 10\\n2 1\\n10 3\\n8 7\\n9 1\\n7 2\\n7 1\\n1 2\\n3 3\\n1 6\\n4 5\\n3 10\\n3 9\\n5 6\\n10 6\\n2 2\\n10 8\\n9 8\\n3 6\\n2 2\\n5 7\\n4 4\\n5 4\\n8 5\\n8 7\\n9 4\\n7 7\\n4 1\\n7 9\\n6 4\\n4 2\\n1 6\\n8 1\\n9 2\\n1 6\\n4 2\\n10 5\\n8 7\\n9 1\\n1 1\\n3 5\\n4 7\\n1 4\\n9 8\\n9 4\\n4 5\\n5 6\\n5 4\\n9 6\\n3 7\\n5 1\\n10 6\\n4 7\\n3 7\\n10 9\\n3 7\\n8 8\\n4 10\\n9 10\\n4 3\\n1 3\\n6 4\\n1 7\\n10 3\\n9 3\\n9 6\\n3 10\\n2 7\\n8 7\\n1 8\\n10 1\\n1 10\\n2 10\\n10 3\\n4 2\\n1 5\\n1 8\\n6 3\\n6 1\\n7 2\\n5 3\\n5 4\\n8 2\\n1 4\\n10 5\\n3 8\\n9 4\\n10 10\\n4 1\\n7 6\\n10 10\\n3 2\\n7 6\\n9 8\\n3 9\\n8 5\\n5 8\\n7 3\\n9 10\\n4 6\\n2 10\\n4 3\\n8 2\\n1 5\\n8 3\\n6 3\\n3 6\\n1 3\\n2 9\\n2 8\\n9 1\\n10 5\\n3 2\\n5 2\\n7 10\\n1 1\\n4 1\\n1 1\\n6 9\\n1 3\\n1 3\\n3 7\\n8 4\\n4 2\\n4 7\\n8 8\\n10 9\\n8 4\\n5 7\\n9 9\\n2 10\\n9 2\\n3 1\\n10 10\\n4 5\\n3 9\\n7 9\\n10 1\\n9 2\\n3 1\\n5 10\\n6 3\\n9 8\\n6 3\\n3 10\\n5 2\\n1 5\\n2 8\\n3 5\\n8 8\\n9 3\\n10 9\\n5 10\\n1 9\\n3 10\\n10 4\\n1 7\\n4 7\\n1 5\\n7 2\\n4 9\\n7 4\\n10 8\\n4 9\\n4 9\\n1 7\\n9 10\\n10 10\\n7 8\\n5 10\\n9 3\\n7 3\\n3 5\\n5 2\\n1 9\\n3 7\\n1 9\\n4 6\\n1 9\\n9 9\\n6 5\\n9 5\\n8 7\\n1 8\\n4 5\\n10 4\\n5 1\\n10 6\\n7 2\\n2 1\\n5 4\\n7 5\\n3 5\\n1 1\\n4 4\\n9 5\\n4 5\\n8 4\\n1 6\\n1 2\\n2 1\\n4 7\\n4 8\\n9 8\\n5 4\\n9 5\\n10 6\\n4 6\\n8 5\\n7 5\\n7 10\\n8 2\\n8 2\\n8 8\\n7 7\\n9 7\\n4 3\\n2 9\\n3 7\\n4 5\\n8 4\\n1 10\\n6 9\\n2 10\\n5 1\\n6 4\\n1 5\\n9 7\\n4 2\\n8 9\\n5 9\\n2 1\\n1 8\\n8 1\\n5 5\\n10 1\\n8 3\\n9 3\\n8 8\\n10 5\\n4 5\\n8 9\\n10 6\\n5 10\\n2 6\\n3 3\\n10 1\\n2 2\\n5 4\\n1 8\\n7 1\\n8 8\\n7 7\\n8 2\\n1 9\\n2 5\\n2 4\\n2 2\\n1 2\\n10 7\\n10 8\\n6 1\\n5 7\\n3 9\\n7 10\\n9 3\\n3 6\\n7 4\\n10 5\\n1 4\\n4 1\\n6 6\\n9 5\\n4 3\\n3 7\\n6 5\\n3 8\\n10 8\\n10 4\\n5 7\\n7 6\\n1 6\\n8 6\\n1 8\\n6 2\\n4 6\\n6 10\\n7 2\\n8 5\\n5 2\\n8 6\\n1 10\\n2 9\\n1 7\\n1 1\\n5 10\\n10 6\\n5 5\\n4 7\\n4 5\\n9 1\\n3 7\\n10 10\\n1 10\\n4 3\\n1 5\\n9 5\\n1 6\\n5 5\\n5 10\\n3 6\\n1 5\\n4 6\\n3 1\\n8 3\\n1 10\\n7 1\\n10 4\\n10 1\\n6 3\\n7 10\\n4 6\\n5 1\\n1 3\\n3 5\\n1 3\\n10 9\\n8 9\\n4 8\\n4 7\\n8 4\\n10 1\\n6 10\\n1 3\\n10 3\\n7 2\\n2 1\\n1 7\\n1 4\\n6 5\\n10 6\\n9 7\\n4 3\\n4 2\\n2 6\\n2 8\\n10 5\\n9 3\\n4 4\\n2 6\\n8 4\\n8 6\\n2 2\\n1 4\\n2 7\\n6 7\\n5 9\\n10 6\\n10 7\\n9 1\\n3 5\\n9 7\\n6 10\\n4 7\\n6 4\\n4 2\\n1 3\\n10 5\\n10 6\\n5 5\\n1 7\\n10 1\\n5 5\\n5 2\\n6 4\\n5 8\\n10 1\\n1 9\\n6 7\\n7 8\\n4 9\\n3 1\\n6 6\\n8 8\\n4 8\\n4 2\\n9 7\\n9 3\\n2 5\\n9 3\\n3 3\\n2 10\\n10 6\\n4 4\\n4 9\\n5 4\\n2 8\\n5 9\\n8 4\\n2 3\\n6 8\\n8 1\\n7 4\\n9 9\\n9 10\\n2 3\\n1 3\\n7 4\\n10 5\\n2 4\\n2 3\\n2 7\\n5 10\\n5 7\\n5 9\\n3 7\\n3 5\\n8 2\\n8 3\\n1 1\\n4 6\\n8 5\\n4 2\\n2 3\\n8 5\\n5 3\\n7 6\\n1 3\\n2 9\\n10 4\\n5 2\\n10 10\\n9 10\\n2 5\\n5 10\\n3 3\\n9 4\\n1 9\\n10 3\\n5 10\\n1 7\\n3 7\\n7 6\\n10 4\\n8 10\\n10 10\\n9 3\\n4 7\\n6 5\\n10 6\\n4 3\\n3 7\\n1 3\\n2 8\\n8 4\\n2 7\\n6 4\\n9 7\\n4 8\\n8 5\\n3 2\\n4 4\\n9 3\\n3 4\\n7 6\\n3 4\\n3 3\\n9 7\\n7 8\\n3 4\\n9 8\\n2 10\\n863\\n5 9\\n7 10\\n9 10\\n10 2\\n3 10\\n3 4\\n5 6\\n10 6\\n2 7\\n8 5\\n7 2\\n9 6\\n9 5\\n10 6\\n7 5\\n3 10\\n7 7\\n2 8\\n8 4\\n3 6\\n8 4\\n1 2\\n1 8\\n10 10\\n8 6\\n5 10\\n10 8\\n2 2\\n7 8\\n2 6\\n10 7\\n8 8\\n6 1\\n3 1\\n4 1\\n3 4\\n8 5\\n10 3\\n10 8\\n7 1\\n9 1\\n9 6\\n5 3\\n8 1\\n4 8\\n8 4\\n2 10\\n9 3\\n4 9\\n8 1\\n10 4\\n10 4\\n4 5\\n1 4\\n8 10\\n5 8\\n1 7\\n9 4\\n7 3\\n8 4\\n4 2\\n4 5\\n9 4\\n5 3\\n4 4\\n9 2\\n8 1\\n10 9\\n5 4\\n1 3\\n8 5\\n10 3\\n9 7\\n4 8\\n3 1\\n2 3\\n3 10\\n3 4\\n6 6\\n4 9\\n3 9\\n10 8\\n9 5\\n8 10\\n10 10\\n9 7\\n8 9\\n4 4\\n3 6\\n4 7\\n10 2\\n9 2\\n5 3\\n3 4\\n3 2\\n1 7\\n2 3\\n8 10\\n1 8\\n1 8\\n2 5\\n2 10\\n5 5\\n6 9\\n8 7\\n5 2\\n7 4\\n4 7\\n5 5\\n2 10\\n6 8\\n7 4\\n9 7\\n7 8\\n5 2\\n1 4\\n4 10\\n4 6\\n7 3\\n5 6\\n3 2\\n8 4\\n1 4\\n5 1\\n9 10\\n2 1\\n2 2\\n3 10\\n4 4\\n7 7\\n7 7\\n7 3\\n2 5\\n6 4\\n10 9\\n1 1\\n1 3\\n4 1\\n8 8\\n3 2\\n2 3\\n10 2\\n6 3\\n3 3\\n8 3\\n7 3\\n10 4\\n6 2\\n7 10\\n9 7\\n4 7\\n4 6\\n1 3\\n3 1\\n3 6\\n8 4\\n2 4\\n6 9\\n1 2\\n3 6\\n8 10\\n10 9\\n3 3\\n7 1\\n5 9\\n10 6\\n1 8\\n8 7\\n3 6\\n2 4\\n6 3\\n3 2\\n4 5\\n6 5\\n5 9\\n3 1\\n10 2\\n2 4\\n3 7\\n3 5\\n5 6\\n4 5\\n3 4\\n1 3\\n9 7\\n10 5\\n9 5\\n8 10\\n7 9\\n6 7\\n1 1\\n8 5\\n8 8\\n2 7\\n4 9\\n5 5\\n10 6\\n8 6\\n9 9\\n10 5\\n5 10\\n8 10\\n10 8\\n10 2\\n6 10\\n8 4\\n8 1\\n2 8\\n2 5\\n5 1\\n2 4\\n10 8\\n9 3\\n4 8\\n3 5\\n1 8\\n8 9\\n6 5\\n7 1\\n9 9\\n9 9\\n7 5\\n2 10\\n1 9\\n7 9\\n10 3\\n7 6\\n1 10\\n3 7\\n9 4\\n3 6\\n5 2\\n10 10\\n4 7\\n5 4\\n10 6\\n7 7\\n10 8\\n3 8\\n4 9\\n7 4\\n8 10\\n8 5\\n5 9\\n9 4\\n2 4\\n7 9\\n4 8\\n10 8\\n9 8\\n4 5\\n5 5\\n5 8\\n7 7\\n9 1\\n10 10\\n10 2\\n6 6\\n1 6\\n10 10\\n5 6\\n3 1\\n1 5\\n7 3\\n6 5\\n2 10\\n8 10\\n8 3\\n3 7\\n4 1\\n4 9\\n3 6\\n6 9\\n9 7\\n6 8\\n8 8\\n7 10\\n7 9\\n9 3\\n5 4\\n7 8\\n3 3\\n2 8\\n5 1\\n9 1\\n10 6\\n3 5\\n10 4\\n2 5\\n4 4\\n5 10\\n1 10\\n7 2\\n1 6\\n4 3\\n2 1\\n6 2\\n7 5\\n8 6\\n10 7\\n3 3\\n5 2\\n4 6\\n3 5\\n10 5\\n2 10\\n10 10\\n2 6\\n8 9\\n2 8\\n1 4\\n6 4\\n7 7\\n8 9\\n4 4\\n8 8\\n7 9\\n9 4\\n6 6\\n4 7\\n9 10\\n9 8\\n8 4\\n2 7\\n5 8\\n5 10\\n9 6\\n9 2\\n8 1\\n2 5\\n7 10\\n2 6\\n5 5\\n4 3\\n3 7\\n4 6\\n10 10\\n2 6\\n7 4\\n5 5\\n10 4\\n10 1\\n9 4\\n9 8\\n10 10\\n10 1\\n5 7\\n3 2\\n8 6\\n1 5\\n1 10\\n1 2\\n3 5\\n3 9\\n8 10\\n9 2\\n7 5\\n1 5\\n10 9\\n1 9\\n4 6\\n5 6\\n9 3\\n5 7\\n9 7\\n1 9\\n8 8\\n3 5\\n3 6\\n9 2\\n6 3\\n1 5\\n5 2\\n8 6\\n9 9\\n10 6\\n9 6\\n1 9\\n4 10\\n7 10\\n4 1\\n10 7\\n5 10\\n6 2\\n8 6\\n1 2\\n1 9\\n8 6\\n4 10\\n6 9\\n9 8\\n5 2\\n4 1\\n1 5\\n2 9\\n8 5\\n7 2\\n7 8\\n4 7\\n9 3\\n10 9\\n4 1\\n9 8\\n1 6\\n4 3\\n5 8\\n3 1\\n10 10\\n2 2\\n1 2\\n1 6\\n8 6\\n7 1\\n4 10\\n3 2\\n9 4\\n5 10\\n10 1\\n7 3\\n10 9\\n2 6\\n5 5\\n4 5\\n2 4\\n9 6\\n2 4\\n8 6\\n8 4\\n8 1\\n6 1\\n4 4\\n2 6\\n5 6\\n3 4\\n7 10\\n1 7\\n10 7\\n7 4\\n1 6\\n8 5\\n2 2\\n6 10\\n7 2\\n9 7\\n5 7\\n8 7\\n4 1\\n1 8\\n1 2\\n5 4\\n2 2\\n10 9\\n3 2\\n10 3\\n1 9\\n10 9\\n3 10\\n5 6\\n9 5\\n3 10\\n7 4\\n3 6\\n3 7\\n5 7\\n2 10\\n6 3\\n1 8\\n3 6\\n10 2\\n5 3\\n1 4\\n10 10\\n9 1\\n8 3\\n2 4\\n10 4\\n2 7\\n7 1\\n1 3\\n6 4\\n2 5\\n2 4\\n6 5\\n7 1\\n9 1\\n1 10\\n6 10\\n7 5\\n8 1\\n10 2\\n1 10\\n7 1\\n10 8\\n5 2\\n6 1\\n6 10\\n5 4\\n1 5\\n3 5\\n1 7\\n3 6\\n2 8\\n1 9\\n3 2\\n4 1\\n2 2\\n8 2\\n1 10\\n10 3\\n3 1\\n5 2\\n9 2\\n8 9\\n2 7\\n10 6\\n6 7\\n2 3\\n6 6\\n8 1\\n8 3\\n10 9\\n1 3\\n1 2\\n1 4\\n7 2\\n5 10\\n6 10\\n4 4\\n10 1\\n3 3\\n1 2\\n3 5\\n1 10\\n9 9\\n3 4\\n4 3\\n7 2\\n1 1\\n9 6\\n8 8\\n7 8\\n6 2\\n9 6\\n3 5\\n9 8\\n4 10\\n3 1\\n9 9\\n5 5\\n8 1\\n9 5\\n10 10\\n5 7\\n8 1\\n5 6\\n3 3\\n5 9\\n8 5\\n8 10\\n5 4\\n8 10\\n2 10\\n1 7\\n5 1\\n3 10\\n1 4\\n8 5\\n5 6\\n9 4\\n4 8\\n8 9\\n3 1\\n1 5\\n1 3\\n5 1\\n6 9\\n1 8\\n8 2\\n5 2\\n6 7\\n7 8\\n5 3\\n1 1\\n4 5\\n3 8\\n8 7\\n2 2\\n3 2\\n1 9\\n10 6\\n1 5\\n10 10\\n3 3\\n3 4\\n8 1\\n2 3\\n1 5\\n7 6\\n3 4\\n10 10\\n5 5\\n6 10\\n10 4\\n5 9\\n1 1\\n2 3\\n1 2\\n8 6\\n10 2\\n3 2\\n10 10\\n5 10\\n1 10\\n5 4\\n3 6\\n3 1\\n9 6\\n1 4\\n5 5\\n6 5\\n5 5\\n6 8\\n2 6\\n10 4\\n10 4\\n5 1\\n2 7\\n7 2\\n7 5\\n10 7\\n9 3\\n6 10\\n1 8\\n4 3\\n4 3\\n6 5\\n9 10\\n10 7\\n6 2\\n7 10\\n6 5\\n4 9\\n10 4\\n3 5\\n1 8\\n6 3\\n9 5\\n6 8\\n1 2\\n3 6\\n2 1\\n3 10\\n5 9\\n6 7\\n10 3\\n9 1\\n9 5\\n1 5\\n4 8\\n5 2\\n7 10\\n7 2\\n6 7\\n2 8\\n4 2\\n6 9\\n8 3\\n5 2\\n3 9\\n4 7\\n10 8\\n2 6\\n5 1\\n6 7\\n4 5\\n3 4\\n2 9\\n2 1\\n10 10\\n3 6\\n8 3\\n9 1\\n5 5\\n10 8\\n6 6\\n1 2\\n2 6\\n1 5\\n10 6\\n8 4\\n4 5\\n10 5\\n6 10\\n9 5\\n7 9\\n7 7\\n10 2\\n4 3\\n8 2\\n9 10\\n6 5\\n7 9\\n6 10\\n2 10\\n10 1\\n9 5\\n2 4\\n9 10\\n1 7\\n5 2\\n8 1\\n2 3\\n4 2\\n8 10\\n10 2\\n4 6\\n2 6\\n5 9\\n9 10\\n5 2\\n5 4\\n3 7\\n3 3\\n2 5\\n5 10\\n10 3\\n7 3\\n9 2\\n10 4\\n6 1\\n6 2\\n7 9\\n3 3\\n3 5\\n9 9\\n9 10\\n6 9\\n7 5\\n3 9\\n5 8\\n7 3\\n1 5\\n10 8\\n3 10\\n5 2\\n8 2\\n2 6\\n1 3\\n9 2\\n7 6\\n3 7\\n4 4\\n6 3\\n2 6\\n8 8\\n4 9\\n1 3\\n3 6\\n1 8\\n4 6\\n4 5\\n3 9\\n1 9\\n8 8\\n5 9\\n7 4\\n4 8\\n8 8\\n3 8\\n8 5\\n5 8\\n6 4\\n6 7\\n3 8\\n4 2\\n10 8\\n1 2\\n2 4\\n4 7\\n3 6\\n10 8\\n9 4\\n7 7\\n2 5\\n4 5\\n10 3\\n2 3\\n6 7\\n9 5\\n8 8\\n4 8\\n3 1\\n10 4\\n7 2\\n6 8\\n2 6\\n6 3\\n4 10\\n4 4\\n5 2\\n4 4\\n4 9\\n10 10\\n6 6\\n3 7\\n10 8\\n10 7\\n9 8\\n5 2\\n7 5\\n5 8\\n2 9\\n3 4\\n6 6\\n2 9\\n7 1\\n3 5\\n7 6\\n8 5\\n2 10\\n1 5\\n1 3\\n5 5\\n1 1\\n8 4\\n3 9\\n1 10\\n7 3\\n1 9\\n10 4\\n2 1\\n3 1\\n10 7\\n7 10\\n1 1\\n7 4\\n5 4\\n4 3\\n4 10\\n2 5\\n7 10\\n6 5\\n6 5\\n7 9\\n6 3\\n3 2\\n2 10\\n3 5\\n4 5\\n4 2\\n8 8\\n5 6\\n3 5\\n5 10\\n10 9\\n3 4\\n3 6\\n9 5\\n10 7\\n10 1\\n2 5\\n7 5\\n3 4\\n524\\n3 3\\n3 5\\n5 5\\n10 2\\n1 7\\n6 2\\n9 1\\n9 4\\n2 1\\n2 2\\n9 9\\n7 4\\n9 10\\n9 8\\n4 9\\n6 3\\n3 5\\n9 9\\n9 6\\n10 3\\n3 6\\n9 9\\n6 10\\n8 1\\n1 10\\n6 3\\n4 5\\n8 10\\n3 5\\n4 7\\n3 6\\n1 9\\n6 5\\n4 7\\n2 3\\n8 6\\n9 10\\n9 2\\n1 7\\n8 9\\n1 10\\n3 6\\n1 2\\n9 7\\n8 1\\n9 1\\n10 6\\n9 2\\n3 10\\n6 7\\n10 7\\n4 3\\n10 5\\n8 9\\n10 8\\n2 1\\n5 9\\n1 8\\n5 8\\n9 4\\n9 2\\n6 6\\n6 4\\n9 5\\n7 8\\n10 8\\n4 1\\n9 4\\n3 4\\n2 4\\n1 7\\n4 8\\n8 2\\n2 3\\n7 8\\n7 7\\n6 3\\n5 4\\n9 1\\n8 8\\n9 8\\n3 1\\n5 2\\n3 5\\n3 8\\n9 2\\n1 10\\n6 5\\n5 8\\n2 3\\n9 8\\n1 2\\n9 7\\n3 8\\n9 3\\n2 9\\n1 8\\n5 1\\n7 2\\n6 9\\n8 10\\n7 8\\n4 9\\n2 7\\n5 3\\n1 8\\n1 9\\n3 10\\n2 8\\n4 1\\n9 4\\n1 3\\n7 10\\n4 4\\n2 3\\n4 9\\n2 10\\n7 5\\n5 3\\n3 10\\n3 7\\n6 5\\n1 9\\n9 6\\n3 6\\n5 10\\n2 3\\n2 7\\n9 3\\n5 10\\n8 10\\n2 1\\n2 4\\n9 8\\n2 1\\n8 2\\n6 9\\n8 8\\n5 8\\n4 3\\n10 2\\n8 7\\n8 3\\n7 8\\n2 3\\n8 1\\n6 8\\n2 9\\n5 3\\n5 10\\n8 8\\n7 1\\n5 9\\n1 4\\n6 5\\n2 3\\n1 10\\n2 7\\n1 1\\n7 3\\n5 4\\n7 9\\n6 4\\n6 7\\n10 9\\n5 4\\n5 9\\n1 8\\n10 7\\n6 7\\n2 7\\n7 8\\n9 7\\n5 5\\n6 8\\n2 10\\n6 5\\n9 4\\n6 7\\n9 7\\n7 3\\n7 2\\n5 4\\n9 4\\n2 5\\n1 3\\n9 2\\n9 6\\n1 7\\n6 1\\n8 9\\n5 2\\n4 2\\n4 9\\n7 7\\n3 10\\n4 3\\n3 10\\n1 5\\n6 3\\n9 1\\n6 4\\n9 3\\n1 5\\n4 2\\n8 4\\n1 3\\n1 4\\n10 6\\n1 4\\n1 7\\n2 7\\n10 4\\n4 2\\n9 4\\n8 3\\n7 4\\n2 4\\n10 9\\n10 1\\n4 7\\n3 10\\n4 7\\n8 1\\n7 4\\n6 1\\n4 8\\n1 3\\n5 9\\n1 3\\n3 3\\n1 3\\n5 10\\n6 10\\n6 7\\n6 2\\n8 2\\n1 1\\n7 2\\n7 3\\n5 4\\n6 5\\n3 1\\n5 10\\n3 8\\n5 4\\n5 6\\n6 9\\n4 6\\n5 2\\n1 8\\n7 5\\n10 8\\n7 5\\n5 7\\n2 1\\n10 8\\n5 8\\n6 9\\n6 9\\n3 5\\n9 4\\n2 9\\n5 6\\n6 9\\n9 1\\n1 5\\n6 8\\n8 5\\n2 2\\n7 7\\n6 5\\n1 8\\n1 1\\n1 9\\n3 10\\n10 10\\n7 6\\n3 10\\n8 5\\n7 5\\n2 6\\n2 2\\n2 8\\n3 7\\n9 8\\n4 8\\n9 4\\n6 5\\n8 6\\n2 6\\n3 7\\n10 9\\n3 7\\n5 4\\n2 10\\n1 9\\n10 5\\n7 3\\n7 8\\n10 4\\n9 8\\n1 8\\n1 10\\n4 5\\n5 6\\n5 8\\n2 5\\n6 8\\n6 6\\n8 10\\n7 8\\n1 7\\n4 4\\n1 8\\n9 6\\n8 2\\n9 6\\n6 9\\n5 5\\n9 8\\n9 1\\n10 4\\n6 7\\n1 6\\n3 3\\n2 5\\n1 7\\n5 10\\n7 5\\n10 7\\n4 2\\n10 2\\n2 5\\n9 9\\n1 4\\n3 10\\n9 4\\n1 10\\n2 1\\n8 1\\n2 4\\n2 8\\n5 6\\n10 9\\n10 8\\n6 3\\n2 9\\n7 2\\n3 9\\n1 5\\n6 4\\n7 1\\n4 9\\n4 4\\n10 7\\n9 1\\n7 8\\n1 7\\n3 2\\n3 5\\n7 1\\n3 1\\n2 3\\n1 6\\n9 5\\n10 7\\n7 2\\n4 2\\n4 10\\n4 3\\n10 4\\n6 4\\n8 5\\n10 10\\n9 7\\n6 9\\n3 4\\n7 6\\n6 2\\n4 3\\n8 6\\n3 10\\n9 8\\n4 8\\n5 5\\n2 1\\n7 2\\n4 3\\n9 10\\n2 4\\n6 9\\n3 4\\n8 7\\n3 2\\n8 2\\n6 4\\n1 8\\n7 1\\n9 9\\n6 10\\n4 3\\n8 5\\n9 8\\n6 3\\n1 4\\n8 6\\n1 5\\n10 1\\n7 4\\n3 1\\n10 8\\n2 1\\n10 7\\n2 6\\n7 3\\n7 10\\n9 2\\n2 4\\n9 3\\n3 6\\n4 1\\n4 1\\n1 2\\n4 7\\n4 6\\n2 4\\n10 5\\n1 5\\n7 1\\n3 5\\n1 10\\n6 1\\n9 9\\n3 8\\n5 4\\n1 2\\n1 5\\n3 7\\n7 5\\n4 9\\n7 8\\n10 3\\n4 10\\n8 9\\n5 8\\n9 9\\n9 6\\n9 1\\n1 4\\n3 5\\n1 8\\n8 9\\n9 8\\n7 8\\n6 3\\n9 9\\n5 5\\n3 7\\n1 8\\n2 7\\n8 10\\n1 4\\n8 5\\n3 1\\n6 6\\n7 10\\n2 5\\n2 9\\n3 6\\n10 1\\n10 1\\n7 10\\n4 10\\n1 2\\n9 9\\n7 1\\n1 8\\n4 1\\n1 6\\n9 3\\n3 6\\n2 4\\n8 8\\n9 3\\n5 3\\n5 3\\n2 3\\n4 3\\n5 7\\n6 10\\n8 9\\n3 10\\n10 4\\n10 5\\n7 5\\n4 2\\n8 10\\n5 10\\n2 3\\n1 6\\n3 10\\n8 10\\n10 5\\n1 9\\n5 8\\n1 2\\n6 5\\n6 1\\n8 2\\n8 8\\n1 9\\n10 2\\n3 10\\n4 6\\n2 8\\n8 6\\n4 8\\n2 7\\n8 5\\n7 5\\n8 7\\n8 5\\n6 5\\n448\\n6 9\\n8 8\\n8 9\\n9 8\\n5 6\\n2 9\\n6 1\\n5 6\\n4 2\\n3 1\\n5 4\\n2 10\\n8 3\\n5 9\\n2 4\\n10 4\\n7 4\\n10 4\\n4 5\\n3 6\\n6 3\\n10 6\\n4 8\\n8 5\\n4 6\\n2 4\\n9 3\\n2 7\\n2 9\\n6 8\\n2 4\\n10 3\\n8 5\\n5 7\\n8 1\\n7 1\\n7 3\\n10 3\\n1 8\\n10 3\\n3 5\\n8 7\\n6 5\\n3 6\\n8 9\\n9 7\\n6 9\\n8 8\\n4 7\\n2 7\\n9 3\\n1 4\\n8 8\\n2 5\\n5 2\\n6 1\\n2 1\\n6 5\\n3 7\\n4 4\\n4 6\\n3 8\\n10 1\\n9 7\\n4 1\\n8 2\\n5 9\\n9 9\\n2 6\\n3 4\\n3 8\\n7 3\\n1 10\\n7 6\\n3 3\\n10 8\\n3 5\\n1 2\\n3 2\\n9 7\\n5 8\\n1 10\\n1 1\\n7 8\\n6 7\\n4 2\\n7 9\\n7 3\\n2 8\\n5 10\\n8 3\\n4 5\\n1 4\\n10 10\\n8 1\\n10 6\\n4 7\\n5 8\\n1 3\\n10 1\\n4 5\\n4 3\\n10 3\\n1 8\\n1 6\\n7 10\\n5 9\\n3 4\\n1 2\\n8 9\\n1 5\\n4 2\\n10 3\\n3 3\\n3 5\\n2 9\\n8 1\\n10 8\\n3 9\\n9 10\\n10 1\\n10 7\\n1 1\\n8 5\\n8 9\\n10 6\\n1 9\\n3 3\\n7 3\\n3 4\\n4 1\\n6 5\\n3 10\\n8 4\\n2 5\\n2 7\\n6 6\\n10 9\\n6 3\\n6 3\\n1 3\\n10 9\\n6 2\\n10 2\\n10 6\\n4 5\\n7 8\\n9 5\\n8 3\\n6 6\\n8 5\\n5 8\\n5 9\\n6 8\\n1 2\\n4 1\\n9 10\\n3 8\\n2 3\\n4 2\\n1 9\\n10 4\\n10 3\\n10 6\\n3 1\\n2 10\\n1 8\\n3 2\\n10 2\\n7 2\\n4 3\\n2 8\\n8 7\\n8 8\\n8 3\\n9 9\\n1 4\\n5 10\\n7 4\\n10 3\\n4 10\\n9 7\\n8 4\\n3 3\\n1 8\\n6 2\\n9 2\\n2 4\\n10 5\\n4 3\\n5 3\\n10 8\\n4 10\\n6 6\\n1 2\\n5 8\\n1 4\\n9 1\\n6 3\\n5 6\\n7 6\\n5 4\\n6 10\\n1 3\\n1 2\\n9 7\\n6 4\\n5 5\\n10 7\\n7 2\\n10 3\\n9 9\\n10 7\\n7 10\\n2 7\\n10 3\\n10 1\\n1 10\\n5 3\\n3 7\\n1 8\\n2 1\\n4 1\\n3 5\\n8 2\\n7 2\\n5 3\\n7 7\\n6 1\\n3 10\\n9 9\\n10 8\\n4 3\\n2 9\\n6 9\\n6 7\\n6 8\\n10 10\\n6 5\\n3 7\\n3 5\\n1 2\\n3 10\\n9 9\\n4 7\\n4 5\\n2 1\\n6 2\\n4 7\\n8 2\\n2 10\\n8 6\\n6 9\\n8 3\\n1 1\\n5 2\\n6 4\\n6 10\\n5 8\\n1 1\\n6 2\\n10 3\\n5 4\\n10 1\\n1 4\\n7 8\\n1 8\\n10 6\\n6 1\\n5 4\\n2 7\\n8 2\\n2 3\\n3 4\\n5 1\\n1 3\\n9 4\\n10 6\\n3 6\\n7 2\\n3 2\\n1 4\\n3 8\\n9 6\\n10 5\\n6 4\\n2 6\\n3 9\\n3 6\\n6 6\\n8 3\\n6 7\\n7 8\\n7 10\\n9 4\\n5 10\\n7 2\\n6 6\\n3 4\\n5 10\\n3 2\\n1 10\\n8 4\\n1 2\\n4 9\\n2 9\\n1 3\\n9 4\\n3 1\\n3 4\\n10 3\\n9 1\\n4 7\\n3 10\\n8 8\\n6 7\\n6 10\\n5 4\\n3 1\\n9 5\\n8 6\\n8 9\\n5 9\\n10 7\\n5 9\\n10 10\\n9 8\\n2 3\\n9 10\\n6 2\\n1 8\\n9 5\\n9 10\\n7 7\\n2 7\\n7 6\\n9 9\\n8 10\\n9 6\\n3 5\\n9 6\\n9 2\\n8 2\\n5 10\\n8 4\\n3 7\\n6 7\\n6 3\\n4 7\\n10 7\\n9 8\\n4 7\\n2 10\\n10 3\\n10 5\\n2 9\\n8 9\\n9 1\\n4 9\\n1 1\\n3 1\\n7 5\\n4 2\\n10 4\\n2 5\\n6 2\\n10 2\\n3 4\\n10 1\\n7 7\\n6 9\\n7 4\\n7 1\\n5 10\\n6 7\\n7 4\\n4 5\\n3 4\\n7 8\\n2 4\\n6 10\\n10 9\\n2 7\\n4 3\\n5 8\\n6 6\\n4 6\\n6 2\\n6 3\\n6 10\\n3 9\\n3 1\\n1 3\\n10 5\\n6 3\\n5 7\\n5 6\\n4 3\\n3 4\\n4 10\\n3 1\\n7 7\\n4 9\\n2 3\\n6 3\\n6 5\\n5 3\\n3 10\\n9 4\\n10 4\\n10 10\\n5 5\\n3 1\\n4 9\\n8 4\\n10 9\\n7 4\\n6 6\\n3 6\\n4 5\\n1 1\\n6 7\\n4 9\\n4 5\\n2 5\\n10 2\\n3 1\\n8 7\\n8 9\\n1 9\\n8 6\\n1 5\\n5 2\\n9 4\\n3 8\\n10 4\\n3 1\\n10 3\\n9 10\\n4 2\\n3 3\\n7 3\\n7 9\\n1 2\\n2 9\\n10 10\\n2 9\\n8 10\\n688\\n8 2\\n9 1\\n6 2\\n1 6\\n9 4\\n10 2\\n9 5\\n3 3\\n10 8\\n8 9\\n1 5\\n4 6\\n2 1\\n9 3\\n8 5\\n4 9\\n4 6\\n8 5\\n2 3\\n8 8\\n2 1\\n5 2\\n7 4\\n4 8\\n1 7\\n10 8\\n1 9\\n9 3\\n3 7\\n3 4\\n1 8\\n10 1\\n9 2\\n2 5\\n8 5\\n3 6\\n5 10\\n3 10\\n1 7\\n4 6\\n7 8\\n9 5\\n3 7\\n5 9\\n1 3\\n4 5\\n1 5\\n7 1\\n8 4\\n5 4\\n3 1\\n3 5\\n1 3\\n8 3\\n5 7\\n5 1\\n8 4\\n9 3\\n7 10\\n3 7\\n1 3\\n10 6\\n6 8\\n3 10\\n8 1\\n4 7\\n3 4\\n3 2\\n5 5\\n10 4\\n4 9\\n1 6\\n2 5\\n7 4\\n3 6\\n5 5\\n6 10\\n8 7\\n10 7\\n6 7\\n6 6\\n10 1\\n7 3\\n10 10\\n2 9\\n4 9\\n5 1\\n8 3\\n3 5\\n2 4\\n7 3\\n5 2\\n2 9\\n9 5\\n10 4\\n10 5\\n10 8\\n4 8\\n5 2\\n6 10\\n9 2\\n4 7\\n2 3\\n6 8\\n2 2\\n5 3\\n10 3\\n1 9\\n4 5\\n2 2\\n5 1\\n6 2\\n8 1\\n1 9\\n1 9\\n8 4\\n6 1\\n4 3\\n6 6\\n10 2\\n6 4\\n5 7\\n9 9\\n2 10\\n2 7\\n9 1\\n9 9\\n9 1\\n2 4\\n3 1\\n4 8\\n3 3\\n4 1\\n1 8\\n2 6\\n7 9\\n6 8\\n3 8\\n9 3\\n5 10\\n10 5\\n3 9\\n3 2\\n8 4\\n3 5\\n2 6\\n3 7\\n10 10\\n9 4\\n4 5\\n4 1\\n8 2\\n1 2\\n5 8\\n5 10\\n6 2\\n3 8\\n7 2\\n5 7\\n8 1\\n5 1\\n7 8\\n4 5\\n6 1\\n2 6\\n8 2\\n5 6\\n1 1\\n3 10\\n3 7\\n4 10\\n7 9\\n6 3\\n2 1\\n9 9\\n5 9\\n1 8\\n6 10\\n10 8\\n5 8\\n7 4\\n8 6\\n7 6\\n7 9\\n8 9\\n9 4\\n3 10\\n1 10\\n9 6\\n5 9\\n2 8\\n3 10\\n6 7\\n8 9\\n8 10\\n1 1\\n5 10\\n10 2\\n7 6\\n4 4\\n6 10\\n6 10\\n2 3\\n3 1\\n5 9\\n7 8\\n6 1\\n8 8\\n1 5\\n1 5\\n7 4\\n10 7\\n7 1\\n9 5\\n4 2\\n4 5\\n10 5\\n2 1\\n6 2\\n10 3\\n5 3\\n9 9\\n1 6\\n4 4\\n5 5\\n1 9\\n2 1\\n3 9\\n3 9\\n3 1\\n10 4\\n10 8\\n5 2\\n2 4\\n5 1\\n7 6\\n5 3\\n5 4\\n7 10\\n7 4\\n2 1\\n1 4\\n7 4\\n7 9\\n2 5\\n4 6\\n8 4\\n2 5\\n10 5\\n8 4\\n5 5\\n6 1\\n7 7\\n2 2\\n4 2\\n4 10\\n8 3\\n7 2\\n5 7\\n9 6\\n10 2\\n8 4\\n2 6\\n2 1\\n9 9\\n10 10\\n4 4\\n6 5\\n5 9\\n1 6\\n6 4\\n8 9\\n5 1\\n7 2\\n7 4\\n10 10\\n9 8\\n5 4\\n8 4\\n2 2\\n10 7\\n1 5\\n8 4\\n6 3\\n5 3\\n4 5\\n1 10\\n7 6\\n10 10\\n5 4\\n5 3\\n8 9\\n9 9\\n9 6\\n6 3\\n7 2\\n9 7\\n8 2\\n8 9\\n4 2\\n4 4\\n7 10\\n6 8\\n9 9\\n3 4\\n5 8\\n4 6\\n4 10\\n8 6\\n9 1\\n3 2\\n3 6\\n3 3\\n5 4\\n8 1\\n9 2\\n9 4\\n1 8\\n3 4\\n3 7\\n8 9\\n10 4\\n7 9\\n3 9\\n1 5\\n1 2\\n9 6\\n7 5\\n10 10\\n4 4\\n5 3\\n5 10\\n10 3\\n8 9\\n10 7\\n3 9\\n8 8\\n7 7\\n1 6\\n4 8\\n2 3\\n3 6\\n1 10\\n1 2\\n1 1\\n7 1\\n9 10\\n3 9\\n10 5\\n9 6\\n7 6\\n4 4\\n6 3\\n1 10\\n8 1\\n5 1\\n7 5\\n6 2\\n10 3\\n7 7\\n2 6\\n8 3\\n3 7\\n8 4\\n3 8\\n2 1\\n10 3\\n3 5\\n6 2\\n4 3\\n6 3\\n3 5\\n8 6\\n7 5\\n5 1\\n8 7\\n3 1\\n5 4\\n1 8\\n7 5\\n4 10\\n1 9\\n10 1\\n4 2\\n10 9\\n9 5\\n6 1\\n4 4\\n5 9\\n5 5\\n4 2\\n10 2\\n3 9\\n5 4\\n3 2\\n5 4\\n2 2\\n7 2\\n2 1\\n3 7\\n6 9\\n5 1\\n3 2\\n9 5\\n4 9\\n8 5\\n3 4\\n10 10\\n3 5\\n3 2\\n6 7\\n1 7\\n7 10\\n10 2\\n2 7\\n4 6\\n5 10\\n7 6\\n3 1\\n8 7\\n2 5\\n4 4\\n10 9\\n7 8\\n10 7\\n10 1\\n4 3\\n7 1\\n2 2\\n10 8\\n3 9\\n7 3\\n2 6\\n2 5\\n2 6\\n2 9\\n1 6\\n7 2\\n9 6\\n3 2\\n3 8\\n9 5\\n2 2\\n4 2\\n8 8\\n1 5\\n2 6\\n4 8\\n2 10\\n10 3\\n5 1\\n1 5\\n6 9\\n4 5\\n5 3\\n3 8\\n1 1\\n3 9\\n9 10\\n4 6\\n2 5\\n3 6\\n4 6\\n8 7\\n2 4\\n3 6\\n8 9\\n1 2\\n1 1\\n5 10\\n6 4\\n8 6\\n5 6\\n8 3\\n5 2\\n3 10\\n2 2\\n3 9\\n7 2\\n8 7\\n9 8\\n10 7\\n1 10\\n4 10\\n2 5\\n1 1\\n2 7\\n1 1\\n4 2\\n4 6\\n1 3\\n8 10\\n10 10\\n4 4\\n9 5\\n2 10\\n3 3\\n6 2\\n10 4\\n8 2\\n8 5\\n3 7\\n7 8\\n10 2\\n8 9\\n2 9\\n4 3\\n6 8\\n3 8\\n5 5\\n5 7\\n5 10\\n6 4\\n3 2\\n2 7\\n2 10\\n6 2\\n3 10\\n5 5\\n9 1\\n9 7\\n8 8\\n9 1\\n2 9\\n7 2\\n8 9\\n3 6\\n8 1\\n6 2\\n5 2\\n9 5\\n5 8\\n9 7\\n8 6\\n1 3\\n5 3\\n9 5\\n5 1\\n8 7\\n7 9\\n1 6\\n10 4\\n10 1\\n7 8\\n8 4\\n4 6\\n10 4\\n3 5\\n8 4\\n10 5\\n1 7\\n2 7\\n10 10\\n4 8\\n9 9\\n1 7\\n4 6\\n2 1\\n7 6\\n4 2\\n8 9\\n1 6\\n10 5\\n4 5\\n6 3\\n8 8\\n8 6\\n3 10\\n4 5\\n5 2\\n1 7\\n8 9\\n3 3\\n8 3\\n9 4\\n10 4\\n1 2\\n9 8\\n9 2\\n8 7\\n8 7\\n4 2\\n5 6\\n6 1\\n6 5\\n1 9\\n2 8\\n8 10\\n1 9\\n7 9\\n5 7\\n2 9\\n9 8\\n10 4\\n7 6\\n3 1\\n9 1\\n1 8\\n2 3\\n4 5\\n8 1\\n6 10\\n8 3\\n9 10\\n9 1\\n8 9\\n5 1\\n10 10\\n3 2\\n7 3\\n1 7\\n1 1\\n7 1\\n7 6\\n7 1\\n4 10\\n4 5\\n3 2\\n8 4\\n9 8\\n9 2\\n10 6\\n8 7\\n6 1\\n1 9\\n7 4\\n8 2\\n3 3\\n7 2\\n9 1\\n9 3\\n1 9\\n7 3\\n2 3\\n9 6\\n5 4\\n1 3\\n5 1\\n5 9\\n1 5\\n8 1\\n8 6\\n9 5\\n9 7\\n8 1\\n2 9\\n8 7\\n5 5\\n4 5\\n5 2\\n8 9\\n6 1\\n2 4\\n4 6\\n8 8\\n2 1\\n4 2\\n8 5\\n3 4\\n2 6\\n5 10\\n1 3\\n10 3\\n7 10\\n4 5\\n1 4\\n9 10\\n7 1\\n1 5\\n1 4\\n7 9\\n1 10\\n4 4\\n9 2\\n5 6\\n1 9\\n3 8\\n3 4\\n4 3\\n1 4\\n10 4\\n5 1\\n9 10\\n2 5\\n8 5\\n5 1\\n4 2\\n2 2\\n611\\n2 10\\n7 9\\n6 3\\n6 9\\n9 6\\n9 6\\n7 5\\n6 8\\n2 3\\n8 9\\n4 9\\n8 8\\n8 10\\n6 10\\n7 10\\n1 10\\n8 4\\n1 9\\n7 4\\n7 4\\n2 5\\n6 4\\n1 2\\n5 6\\n3 9\\n8 6\\n4 2\\n4 7\\n2 5\\n8 4\\n3 3\\n5 9\\n2 7\\n9 7\\n9 3\\n5 3\\n1 1\\n3 10\\n7 8\\n6 9\\n4 8\\n6 8\\n7 3\\n10 6\\n10 7\\n2 4\\n5 7\\n10 6\\n3 6\\n5 8\\n6 7\\n2 10\\n3 10\\n5 9\\n2 5\\n9 6\\n3 2\\n7 7\\n3 2\\n6 1\\n9 4\\n3 3\\n7 1\\n4 5\\n9 1\\n2 9\\n1 6\\n6 1\\n5 2\\n10 3\\n5 9\\n8 2\\n8 7\\n7 4\\n3 3\\n9 7\\n7 5\\n4 10\\n10 7\\n4 9\\n8 4\\n5 8\\n9 10\\n1 6\\n8 2\\n9 6\\n5 3\\n1 9\\n4 10\\n6 10\\n6 9\\n10 6\\n5 4\\n6 8\\n5 8\\n9 6\\n9 1\\n9 2\\n6 8\\n4 1\\n5 6\\n5 1\\n3 10\\n8 7\\n10 6\\n9 2\\n5 2\\n9 4\\n10 6\\n6 2\\n6 9\\n9 1\\n2 10\\n6 1\\n10 1\\n1 7\\n4 8\\n4 8\\n4 6\\n4 8\\n2 9\\n3 10\\n6 3\\n4 1\\n2 1\\n2 6\\n3 3\\n1 9\\n1 4\\n6 4\\n8 3\\n10 7\\n5 3\\n6 7\\n10 1\\n6 1\\n7 8\\n2 9\\n1 9\\n1 2\\n2 9\\n6 4\\n7 2\\n2 10\\n4 7\\n3 9\\n8 9\\n2 6\\n1 3\\n7 8\\n1 10\\n8 8\\n9 5\\n5 4\\n7 8\\n3 4\\n2 4\\n4 5\\n10 8\\n1 8\\n7 3\\n5 9\\n3 9\\n1 1\\n8 2\\n2 7\\n4 9\\n8 10\\n7 6\\n3 9\\n1 9\\n10 3\\n5 6\\n4 5\\n5 10\\n4 10\\n4 7\\n8 7\\n1 3\\n9 4\\n6 3\\n3 9\\n7 6\\n1 6\\n5 4\\n8 2\\n2 1\\n1 7\\n2 3\\n8 5\\n8 3\\n7 5\\n5 7\\n5 7\\n9 5\\n1 2\\n9 10\\n1 5\\n7 7\\n5 10\\n9 1\\n7 8\\n5 6\\n6 2\\n5 1\\n5 3\\n4 9\\n9 4\\n2 9\\n5 3\\n6 1\\n10 8\\n1 4\\n7 5\\n10 4\\n1 8\\n2 2\\n5 8\\n2 9\\n3 6\\n1 9\\n3 8\\n3 4\\n2 6\\n2 3\\n6 1\\n4 7\\n8 5\\n8 2\\n1 1\\n2 3\\n8 2\\n7 3\\n7 3\\n1 5\\n5 4\\n9 6\\n7 8\\n8 2\\n8 2\\n10 10\\n4 6\\n6 10\\n2 10\\n4 7\\n10 1\\n6 2\\n5 8\\n6 10\\n10 8\\n5 4\\n10 5\\n2 2\\n7 5\\n7 1\\n7 7\\n6 3\\n6 5\\n8 3\\n1 3\\n7 10\\n8 1\\n9 5\\n4 2\\n6 3\\n9 2\\n7 2\\n9 6\\n8 10\\n2 8\\n10 7\\n5 5\\n5 8\\n9 6\\n3 1\\n3 4\\n1 10\\n2 7\\n3 7\\n9 6\\n10 2\\n6 2\\n5 5\\n5 8\\n5 7\\n6 3\\n1 3\\n9 7\\n2 5\\n3 7\\n3 10\\n2 5\\n10 8\\n9 1\\n4 4\\n4 4\\n9 2\\n4 1\\n8 4\\n6 5\\n10 8\\n8 2\\n7 10\\n8 7\\n4 5\\n7 8\\n5 3\\n2 2\\n2 8\\n1 10\\n2 5\\n6 5\\n6 1\\n4 8\\n5 1\\n3 2\\n9 1\\n6 4\\n10 6\\n10 5\\n7 4\\n6 2\\n6 10\\n4 6\\n6 9\\n8 5\\n2 7\\n7 5\\n3 9\\n3 3\\n8 3\\n1 2\\n10 8\\n10 2\\n8 5\\n8 8\\n8 2\\n8 2\\n4 4\\n4 7\\n7 4\\n8 1\\n9 2\\n9 6\\n2 2\\n10 4\\n4 5\\n2 9\\n6 9\\n5 9\\n2 2\\n7 7\\n5 10\\n3 8\\n3 1\\n4 2\\n8 9\\n5 3\\n8 8\\n7 6\\n10 8\\n8 6\\n9 7\\n4 10\\n6 7\\n9 2\\n10 6\\n8 3\\n9 6\\n8 7\\n1 2\\n3 4\\n6 1\\n2 7\\n6 8\\n9 1\\n6 6\\n8 9\\n5 2\\n7 2\\n3 4\\n4 10\\n2 9\\n6 3\\n5 1\\n5 5\\n4 10\\n4 1\\n9 9\\n8 1\\n10 1\\n10 5\\n6 7\\n5 3\\n4 1\\n7 5\\n10 5\\n4 5\\n1 9\\n4 1\\n2 2\\n10 5\\n3 8\\n1 8\\n4 7\\n6 2\\n1 5\\n10 3\\n10 6\\n4 9\\n10 2\\n10 5\\n8 9\\n6 7\\n1 1\\n7 9\\n9 2\\n7 1\\n3 7\\n1 10\\n10 2\\n6 9\\n9 4\\n9 6\\n10 1\\n4 7\\n10 9\\n4 8\\n2 5\\n7 2\\n9 4\\n4 3\\n1 3\\n5 10\\n1 3\\n3 8\\n8 6\\n1 4\\n6 10\\n8 10\\n9 8\\n3 10\\n6 6\\n8 8\\n6 1\\n5 1\\n2 5\\n2 9\\n10 5\\n7 8\\n3 6\\n8 7\\n7 6\\n10 1\\n1 8\\n7 9\\n4 7\\n9 7\\n8 9\\n7 1\\n5 6\\n8 8\\n4 7\\n3 9\\n10 1\\n3 1\\n6 1\\n2 10\\n7 8\\n8 2\\n1 8\\n9 7\\n3 1\\n7 5\\n3 5\\n4 9\\n10 6\\n2 5\\n10 6\\n7 4\\n9 2\\n5 8\\n9 5\\n1 2\\n4 4\\n7 5\\n2 10\\n3 1\\n4 9\\n4 6\\n8 7\\n5 9\\n10 10\\n3 1\\n4 6\\n9 3\\n4 2\\n2 4\\n2 3\\n4 7\\n8 4\\n4 6\\n4 9\\n2 5\\n1 8\\n9 10\\n5 2\\n6 10\\n4 8\\n10 3\\n9 9\\n9 8\\n5 5\\n7 6\\n3 6\\n10 9\\n8 6\\n4 4\\n3 1\\n10 9\\n2 1\\n5 3\\n5 2\\n9 2\\n3 1\\n9 7\\n5 10\\n3 3\\n2 2\\n9 3\\n3 4\\n7 2\\n9 1\\n5 4\\n6 3\\n2 8\\n7 7\\n10 4\\n4 10\\n2 9\\n2 8\\n3 2\\n5 4\\n3 5\\n9 4\\n4 8\\n1 2\\n9 3\\n2 8\\n6 1\\n7 5\\n3 1\\n10 6\\n8 1\\n1 4\\n3 8\\n7 3\\n4 4\\n4 8\\n7 10\\n6 4\\n2 1\\n1 3\\n6 9\\n9 7\\n2 6\\n10 8\\n10 9\\n9 8\\n8 2\\n1 9\\n4 2\\n1 2\\n6 8\\n2 8\\n10 5\\n3 6\\n3 2\\n10 7\\n10 3\\n7 8\\n3 4\\n5 7\\n3 10\\n2 1\\n10 3\\n2 7\\n8 10\\n3 3\\n7 10\\n6 6\\n2 7\\n10 4\\n4 9\\n8 1\\n7 9\\n2 2\\n6 8\\n1 8\\n6 5\\n2 6\\n4 1\\n6 1\\n10 8\\n8 3\\n9 1\\n7 1\\n5 5\\n7 6\\n3 6\\n7 2\\n134\\n2 6\\n10 4\\n10 10\\n2 2\\n6 3\\n8 2\\n6 4\\n2 7\\n1 4\\n2 6\\n3 9\\n5 2\\n8 3\\n9 6\\n7 7\\n4 1\\n7 5\\n10 9\\n8 2\\n3 7\\n7 3\\n2 7\\n9 8\\n8 3\\n9 10\\n10 5\\n1 9\\n6 2\\n6 2\\n2 6\\n2 3\\n1 4\\n10 8\\n7 4\\n2 5\\n3 2\\n6 10\\n4 7\\n3 10\\n8 4\\n4 6\\n9 5\\n7 1\\n4 4\\n3 7\\n9 7\\n9 5\\n2 6\\n2 4\\n4 1\\n3 6\\n8 8\\n6 4\\n1 9\\n2 2\\n6 5\\n4 9\\n5 3\\n6 9\\n5 6\\n2 5\\n5 5\\n7 5\\n8 5\\n10 10\\n4 6\\n5 5\\n2 9\\n6 2\\n3 2\\n1 1\\n1 9\\n9 4\\n10 3\\n9 8\\n6 2\\n2 10\\n7 4\\n8 6\\n10 5\\n9 10\\n2 7\\n2 1\\n2 3\\n6 10\\n9 4\\n1 6\\n7 7\\n1 3\\n4 4\\n2 4\\n8 2\\n2 3\\n2 7\\n6 4\\n9 2\\n8 9\\n1 5\\n3 8\\n6 6\\n4 6\\n10 1\\n7 4\\n3 1\\n4 1\\n3 10\\n5 1\\n8 6\\n8 8\\n6 8\\n2 4\\n9 5\\n6 3\\n1 5\\n9 8\\n6 5\\n3 5\\n9 3\\n3 8\\n6 4\\n9 3\\n9 1\\n4 4\\n6 1\\n2 4\\n5 5\\n6 4\\n1 7\\n4 4\\n1 7\\n4 1\\n6 5\\n10 5\\n5 10\\n148\\n8 2\\n6 9\\n9 1\\n9 9\\n1 6\\n8 9\\n8 1\\n8 6\\n9 10\\n7 7\\n5 9\\n6 1\\n5 6\\n6 2\\n10 5\\n2 4\\n5 1\\n6 9\\n9 2\\n7 8\\n2 8\\n4 10\\n4 4\\n10 2\\n7 5\\n10 1\\n9 6\\n8 7\\n2 3\\n4 10\\n3 3\\n8 1\\n7 5\\n7 9\\n6 10\\n3 9\\n4 1\\n8 1\\n1 6\\n8 6\\n10 6\\n1 6\\n3 9\\n2 10\\n8 2\\n7 4\\n10 10\\n2 2\\n3 3\\n2 8\\n5 2\\n3 10\\n8 8\\n2 2\\n5 9\\n8 8\\n3 9\\n1 4\\n8 1\\n3 2\\n3 6\\n7 1\\n6 2\\n5 7\\n1 9\\n8 1\\n10 5\\n1 4\\n4 5\\n10 9\\n10 10\\n1 8\\n10 3\\n1 5\\n3 6\\n4 4\\n5 8\\n10 1\\n8 1\\n9 5\\n6 2\\n1 7\\n9 10\\n9 6\\n10 4\\n9 3\\n10 1\\n7 8\\n1 3\\n2 1\\n6 1\\n6 9\\n3 3\\n6 6\\n2 7\\n3 4\\n1 10\\n7 3\\n10 5\\n8 2\\n9 8\\n8 10\\n10 6\\n2 8\\n5 6\\n9 4\\n7 7\\n6 5\\n1 1\\n9 8\\n10 4\\n8 8\\n1 1\\n8 6\\n8 5\\n5 9\\n10 8\\n3 3\\n8 3\\n2 4\\n7 2\\n5 9\\n5 6\\n3 2\\n2 9\\n1 1\\n1 1\\n7 2\\n4 1\\n8 9\\n1 5\\n1 10\\n2 10\\n9 2\\n1 8\\n10 9\\n9 8\\n6 4\\n2 8\\n2 6\\n9 7\\n1 4\\n6 6\\n1 3\\n9 2\\n4 3\\n1 7\\n4 4\\n633\\n6 4\\n4 7\\n10 7\\n6 7\\n4 2\\n10 10\\n9 8\\n8 2\\n6 10\\n7 9\\n3 2\\n1 10\\n10 6\\n8 6\\n7 7\\n7 3\\n8 7\\n9 5\\n3 10\\n3 6\\n9 4\\n4 3\\n6 9\\n6 2\\n8 1\\n8 6\\n6 1\\n8 5\\n3 5\\n10 3\\n8 10\\n7 9\\n4 7\\n1 7\\n6 1\\n10 9\\n6 5\\n3 2\\n5 6\\n6 4\\n9 8\\n4 4\\n5 8\\n8 6\\n8 3\\n10 7\\n6 8\\n8 6\\n1 9\\n2 4\\n6 1\\n3 6\\n2 9\\n3 3\\n6 6\\n4 2\\n9 8\\n5 4\\n6 1\\n5 4\\n6 10\\n7 2\\n9 5\\n4 2\\n7 9\\n2 6\\n10 8\\n9 3\\n6 9\\n5 4\\n4 7\\n4 3\\n9 2\\n3 4\\n6 6\\n3 6\\n2 6\\n7 6\\n9 4\\n7 7\\n7 4\\n10 8\\n4 3\\n10 8\\n10 1\\n6 6\\n4 1\\n5 1\\n1 4\\n6 5\\n8 10\\n1 1\\n3 6\\n4 6\\n1 2\\n8 10\\n10 9\\n10 3\\n10 4\\n9 8\\n4 3\\n5 3\\n3 5\\n10 3\\n8 5\\n5 5\\n6 3\\n3 9\\n7 6\\n9 10\\n8 1\\n4 10\\n10 8\\n9 5\\n8 2\\n2 7\\n5 7\\n7 4\\n5 6\\n7 3\\n6 4\\n7 6\\n8 4\\n6 5\\n10 8\\n4 1\\n8 5\\n6 4\\n8 7\\n2 3\\n7 7\\n10 7\\n6 8\\n2 5\\n9 5\\n1 9\\n5 3\\n1 4\\n6 9\\n10 8\\n9 8\\n6 3\\n3 1\\n9 8\\n9 5\\n5 7\\n6 4\\n4 10\\n6 5\\n9 2\\n9 1\\n4 1\\n9 9\\n1 9\\n1 1\\n6 10\\n6 7\\n3 5\\n10 1\\n4 9\\n1 1\\n4 4\\n5 8\\n6 2\\n5 1\\n6 10\\n7 8\\n4 3\\n8 9\\n3 3\\n6 9\\n10 8\\n1 6\\n3 7\\n7 10\\n7 10\\n8 8\\n10 7\\n9 9\\n10 6\\n8 4\\n9 5\\n4 6\\n1 3\\n10 9\\n6 2\\n2 4\\n10 7\\n1 10\\n1 10\\n6 4\\n8 7\\n1 3\\n2 10\\n6 8\\n4 7\\n6 4\\n8 3\\n7 6\\n1 3\\n10 9\\n2 9\\n6 5\\n7 5\\n8 3\\n6 9\\n10 10\\n7 4\\n7 8\\n1 6\\n10 5\\n10 7\\n8 1\\n1 3\\n9 2\\n10 5\\n1 4\\n3 1\\n10 10\\n2 3\\n4 6\\n4 2\\n9 6\\n5 1\\n7 8\\n2 3\\n10 6\\n3 3\\n4 3\\n8 8\\n5 7\\n6 1\\n9 8\\n3 4\\n2 1\\n1 10\\n2 3\\n8 10\\n3 10\\n5 5\\n2 8\\n1 4\\n2 1\\n3 8\\n1 6\\n8 3\\n6 5\\n7 8\\n3 4\\n5 5\\n4 1\\n6 8\\n8 9\\n6 8\\n4 7\\n2 10\\n9 4\\n8 8\\n9 10\\n8 2\\n4 4\\n2 1\\n5 8\\n6 1\\n9 10\\n4 5\\n3 6\\n9 5\\n1 9\\n3 8\\n8 7\\n10 4\\n6 9\\n8 2\\n6 1\\n5 3\\n5 9\\n5 3\\n3 2\\n8 10\\n7 2\\n7 8\\n10 6\\n1 6\\n10 7\\n7 2\\n4 8\\n5 2\\n3 8\\n7 10\\n10 3\\n9 10\\n9 7\\n3 7\\n10 6\\n1 7\\n2 5\\n3 9\\n1 2\\n4 1\\n5 7\\n8 6\\n1 9\\n5 6\\n5 6\\n2 10\\n2 5\\n6 5\\n2 5\\n3 7\\n1 1\\n3 9\\n8 6\\n8 7\\n2 9\\n5 8\\n4 9\\n2 9\\n9 1\\n9 7\\n6 4\\n5 6\\n8 3\\n7 4\\n10 7\\n6 4\\n2 3\\n7 2\\n6 10\\n3 2\\n4 10\\n4 8\\n9 7\\n7 2\\n3 8\\n9 4\\n3 1\\n2 3\\n6 9\\n4 2\\n7 9\\n2 4\\n4 5\\n7 3\\n5 4\\n8 8\\n8 2\\n1 10\\n7 3\\n3 1\\n2 1\\n9 6\\n5 1\\n10 10\\n7 1\\n7 5\\n7 1\\n8 1\\n7 9\\n1 6\\n5 1\\n4 5\\n7 8\\n8 8\\n3 1\\n4 8\\n6 4\\n10 7\\n8 8\\n10 6\\n8 6\\n2 9\\n4 2\\n4 1\\n6 9\\n2 4\\n7 6\\n7 3\\n5 8\\n8 2\\n2 4\\n8 4\\n10 4\\n3 10\\n9 10\\n5 2\\n9 10\\n4 8\\n1 2\\n8 6\\n1 7\\n7 1\\n3 10\\n1 5\\n7 9\\n5 2\\n10 2\\n7 5\\n8 9\\n5 4\\n1 5\\n8 9\\n1 1\\n9 8\\n9 5\\n4 10\\n10 8\\n4 10\\n1 2\\n3 5\\n6 2\\n3 7\\n6 9\\n4 4\\n10 5\\n6 5\\n9 6\\n8 5\\n2 9\\n1 10\\n5 10\\n4 7\\n3 10\\n6 3\\n3 2\\n1 2\\n1 7\\n4 7\\n2 2\\n8 3\\n5 1\\n4 1\\n9 7\\n1 4\\n7 2\\n7 6\\n6 1\\n8 4\\n4 9\\n1 1\\n3 5\\n6 9\\n5 6\\n2 4\\n6 4\\n8 10\\n2 10\\n6 8\\n5 3\\n10 7\\n5 3\\n8 5\\n1 2\\n4 3\\n2 5\\n6 1\\n1 10\\n8 4\\n8 6\\n6 9\\n8 9\\n6 5\\n7 8\\n1 3\\n10 2\\n4 7\\n8 7\\n3 8\\n1 9\\n3 4\\n9 10\\n1 6\\n8 4\\n10 10\\n10 2\\n3 3\\n3 2\\n4 7\\n4 6\\n3 10\\n3 6\\n1 10\\n8 3\\n10 4\\n3 10\\n8 7\\n4 8\\n10 9\\n5 5\\n4 7\\n4 4\\n2 9\\n1 1\\n5 3\\n9 5\\n2 6\\n1 6\\n1 8\\n7 9\\n5 10\\n1 7\\n4 1\\n3 9\\n7 7\\n3 7\\n8 2\\n3 1\\n8 8\\n5 3\\n3 1\\n6 7\\n10 5\\n3 10\\n7 6\\n10 4\\n5 5\\n9 4\\n9 10\\n1 1\\n1 6\\n3 7\\n6 1\\n7 1\\n1 5\\n10 7\\n9 7\\n8 2\\n7 8\\n4 2\\n7 2\\n7 2\\n9 5\\n4 1\\n8 3\\n4 10\\n4 9\\n1 6\\n10 3\\n4 5\\n8 3\\n3 8\\n3 8\\n3 5\\n5 3\\n7 6\\n2 4\\n9 5\\n7 7\\n4 5\\n2 3\\n4 6\\n9 1\\n10 1\\n3 2\\n2 4\\n9 10\\n5 7\\n1 4\\n4 3\\n6 10\\n5 8\\n1 7\\n7 3\\n1 10\\n7 4\\n1 3\\n5 6\\n4 7\\n5 8\\n2 10\\n6 3\\n3 4\\n5 10\\n8 4\\n1 5\\n4 7\\n7 9\\n4 4\\n8 10\\n10 9\\n7 8\\n4 5\\n8 10\\n4 2\\n5 1\\n10 2\\n5 2\\n4 9\\n4 2\\n5 5\\n2 5\\n7 10\\n2 3\\n1 1\\n10 6\\n5 7\\n1 3\\n3 3\\n9 5\\n7 10\\n10 2\\n4 8\\n5 7\\n8 5\\n2 10\\n9 1\\n2 3\\n1 9\\n10 9\\n4 4\\n4 4\\n7 5\\n10 7\\n5 5\\n6 2\\n9 8\\n10 2\\n3 10\\n4 8\\n9 1\\n1 3\\n5 7\\n8 4\\n1 7\\n2 10\\n1 4\\n6 6\\n10 3\\n3 8\\n10 9\\n10 1\\n2 1\\n2 5\\n553\\n2 7\\n9 2\\n4 4\\n8 9\\n3 1\\n3 5\\n6 7\\n7 4\\n6 7\\n6 8\\n7 5\\n7 9\\n4 6\\n7 4\\n10 7\\n1 10\\n3 3\\n7 6\\n8 8\\n1 5\\n4 9\\n9 6\\n2 2\\n5 6\\n5 7\\n10 7\\n8 7\\n2 3\\n6 4\\n4 7\\n3 7\\n6 2\\n6 10\\n6 5\\n6 5\\n4 10\\n5 2\\n7 1\\n6 8\\n6 6\\n9 9\\n7 1\\n6 4\\n3 8\\n3 9\\n4 10\\n7 10\\n3 6\\n5 7\\n9 5\\n8 9\\n6 7\\n3 2\\n6 5\\n2 7\\n6 8\\n3 2\\n7 4\\n1 2\\n2 3\\n5 5\\n1 9\\n3 7\\n3 1\\n10 2\\n2 9\\n1 1\\n8 3\\n8 10\\n1 9\\n3 9\\n4 3\\n7 6\\n1 7\\n7 2\\n6 5\\n4 8\\n10 6\\n1 6\\n1 9\\n4 4\\n4 3\\n2 3\\n2 4\\n8 2\\n1 10\\n2 3\\n6 6\\n9 10\\n4 9\\n3 5\\n9 10\\n6 5\\n6 1\\n4 8\\n9 3\\n4 8\\n1 5\\n1 3\\n8 10\\n4 3\\n4 4\\n1 7\\n5 9\\n6 9\\n8 3\\n8 6\\n4 10\\n8 4\\n6 5\\n8 5\\n2 1\\n2 4\\n9 7\\n3 5\\n5 9\\n10 8\\n10 7\\n8 8\\n10 5\\n6 1\\n6 5\\n2 9\\n2 10\\n6 8\\n3 5\\n9 3\\n9 10\\n10 10\\n1 10\\n4 5\\n2 5\\n3 4\\n6 3\\n3 8\\n1 5\\n4 5\\n10 5\\n6 2\\n5 4\\n3 8\\n1 7\\n6 2\\n4 5\\n6 8\\n2 7\\n10 5\\n1 2\\n2 7\\n8 2\\n5 3\\n7 9\\n5 7\\n9 3\\n2 3\\n3 6\\n6 9\\n7 7\\n1 4\\n6 2\\n8 3\\n2 7\\n2 2\\n2 7\\n5 9\\n6 5\\n7 8\\n6 4\\n9 6\\n8 7\\n10 6\\n10 7\\n9 3\\n4 3\\n5 9\\n10 2\\n4 9\\n6 2\\n7 2\\n6 6\\n5 5\\n2 9\\n4 8\\n5 8\\n7 4\\n10 5\\n6 7\\n2 10\\n2 1\\n10 7\\n9 4\\n9 2\\n10 3\\n2 9\\n8 5\\n5 9\\n1 9\\n2 4\\n10 10\\n8 1\\n2 10\\n3 4\\n10 7\\n6 10\\n10 9\\n10 7\\n1 5\\n10 4\\n10 6\\n6 10\\n3 1\\n8 8\\n7 5\\n3 6\\n8 8\\n2 6\\n3 10\\n2 10\\n5 7\\n1 1\\n2 4\\n7 7\\n10 10\\n3 8\\n3 10\\n5 3\\n7 4\\n3 8\\n3 5\\n9 1\\n2 6\\n7 8\\n3 5\\n5 6\\n9 8\\n10 5\\n8 4\\n2 8\\n5 8\\n1 1\\n2 9\\n1 4\\n10 3\\n7 6\\n8 10\\n8 8\\n4 6\\n9 6\\n8 5\\n4 5\\n8 8\\n6 2\\n4 6\\n3 3\\n2 5\\n4 7\\n3 4\\n4 6\\n5 3\\n7 3\\n2 4\\n2 5\\n6 2\\n6 2\\n4 1\\n3 2\\n10 3\\n3 6\\n5 3\\n10 1\\n3 6\\n4 9\\n8 10\\n4 9\\n2 8\\n8 4\\n2 10\\n6 5\\n5 7\\n10 3\\n8 6\\n8 1\\n5 8\\n10 7\\n10 4\\n4 9\\n2 4\\n9 4\\n10 7\\n7 2\\n1 1\\n3 4\\n2 8\\n1 10\\n7 2\\n3 6\\n10 5\\n6 10\\n4 1\\n2 6\\n5 3\\n1 1\\n10 3\\n2 8\\n6 8\\n9 10\\n5 4\\n2 6\\n2 5\\n4 4\\n6 8\\n10 7\\n7 8\\n10 3\\n9 4\\n10 2\\n9 3\\n5 2\\n1 1\\n6 4\\n3 9\\n8 5\\n3 9\\n10 6\\n7 1\\n9 1\\n2 5\\n2 10\\n10 2\\n7 6\\n10 7\\n10 7\\n7 7\\n6 3\\n1 9\\n4 8\\n10 3\\n4 8\\n5 10\\n3 4\\n4 4\\n1 6\\n3 4\\n3 8\\n3 2\\n10 6\\n8 2\\n9 8\\n7 2\\n7 4\\n9 5\\n6 5\\n1 10\\n2 3\\n10 2\\n2 9\\n4 1\\n4 5\\n1 1\\n2 6\\n4 7\\n4 7\\n5 6\\n5 9\\n8 2\\n7 8\\n3 2\\n7 7\\n10 7\\n3 8\\n5 2\\n5 6\\n1 2\\n5 6\\n3 9\\n6 7\\n5 8\\n9 9\\n9 10\\n2 8\\n5 4\\n10 3\\n9 7\\n3 4\\n2 10\\n3 7\\n6 4\\n2 5\\n4 8\\n1 8\\n1 10\\n2 4\\n8 2\\n6 9\\n3 5\\n1 6\\n6 8\\n10 7\\n5 6\\n2 7\\n6 4\\n4 7\\n6 7\\n4 9\\n3 3\\n5 1\\n5 4\\n8 1\\n3 9\\n8 2\\n3 2\\n7 6\\n7 3\\n2 7\\n3 1\\n1 10\\n1 2\\n6 2\\n3 1\\n7 10\\n8 10\\n9 3\\n9 1\\n7 9\\n9 7\\n2 6\\n3 8\\n5 3\\n4 9\\n1 4\\n3 3\\n3 4\\n1 5\\n1 5\\n7 3\\n3 5\\n10 5\\n7 6\\n8 8\\n7 9\\n9 2\\n2 8\\n8 3\\n2 9\\n6 10\\n7 6\\n1 3\\n5 6\\n3 10\\n7 9\\n1 7\\n6 9\\n3 6\\n3 1\\n7 2\\n7 5\\n4 9\\n7 7\\n10 4\\n3 4\\n2 3\\n10 7\\n9 6\\n6 4\\n4 2\\n7 3\\n6 1\\n8 9\\n6 4\\n7 10\\n1 4\\n4 5\\n2 7\\n6 1\\n7 3\\n9 8\\n1 9\\n1 7\\n8 3\\n1 2\\n7 8\\n4 8\\n9 6\\n2 3\\n10 8\\n10 2\\n8 4\\n4 5\\n7 10\\n10 9\\n9 8\\n9 2\\n3 1\\n2 5\\n7 5\\n6 8\\n7 4\\n5 3\\n9 3\\n2 2\\n5 7\\n10 3\\n5 10\\n9 8\\n5 8\\n6 2\\n1 4\\n5 8\\n10 3\\n7 4\\n9 6\\n10 2\\n2 8\\n3 7\\n9 7\\n7 8\\n2 5\\n2 6\\n5 4\\n4 2\\n6 5\\n8 8\\n9 1\\n2 3\\n8 10\\n4 2\\n10 7\\n2 6\\n3 7\\n2 10\\n5 5\\n7 4\\n8 8\\n5 1\\n6 9\\n5 1\\n4 5\\n5 5\\n9 10\\n2 9\\n10 1\\n6 4\\n2 10\\n4 7\\n7 2\\n5 10\\n9 10\\n8 2\\n10 10\\n5 8\\n5 2\\n2 3\\n2 2\\n955\\n2 6\\n2 9\\n7 6\\n10 4\\n3 8\\n2 2\\n9 2\\n3 5\\n6 6\\n3 10\\n8 3\\n1 5\\n2 8\\n4 6\\n2 5\\n9 8\\n8 7\\n2 8\\n7 7\\n2 8\\n10 8\\n1 5\\n9 1\\n1 2\\n7 8\\n5 3\\n2 10\\n10 3\\n8 7\\n8 5\\n1 6\\n4 6\\n10 10\\n5 9\\n10 1\\n8 10\\n4 3\\n4 2\\n6 7\\n10 4\\n2 10\\n9 5\\n10 6\\n8 9\\n6 2\\n2 6\\n4 7\\n6 8\\n8 5\\n5 7\\n9 9\\n2 8\\n9 1\\n7 1\\n10 4\\n7 9\\n10 7\\n6 8\\n6 5\\n6 8\\n10 7\\n6 1\\n2 10\\n1 5\\n7 7\\n2 2\\n1 10\\n10 6\\n1 1\\n2 3\\n9 9\\n1 5\\n3 4\\n6 10\\n8 9\\n1 8\\n4 9\\n3 1\\n8 1\\n2 9\\n1 8\\n5 9\\n7 4\\n9 9\\n3 4\\n2 5\\n10 5\\n7 9\\n9 9\\n8 2\\n1 4\\n3 6\\n2 7\\n7 8\\n8 4\\n10 2\\n1 8\\n2 5\\n10 1\\n10 10\\n4 7\\n10 2\\n3 9\\n4 10\\n3 4\\n3 2\\n5 10\\n5 5\\n5 5\\n3 1\\n1 10\\n3 9\\n4 7\\n3 1\\n1 5\\n10 2\\n4 8\\n2 9\\n9 7\\n1 9\\n2 1\\n10 8\\n3 8\\n6 7\\n1 6\\n6 8\\n3 7\\n2 2\\n3 5\\n4 9\\n4 8\\n10 4\\n3 6\\n10 2\\n7 4\\n2 6\\n7 1\\n9 10\\n5 8\\n9 7\\n1 3\\n2 7\\n10 10\\n6 5\\n9 5\\n8 6\\n1 2\\n4 2\\n3 1\\n5 8\\n1 8\\n6 9\\n9 10\\n5 8\\n4 5\\n5 4\\n10 10\\n9 10\\n10 9\\n9 10\\n7 10\\n8 8\\n7 9\\n9 5\\n4 4\\n3 7\\n10 2\\n3 7\\n2 10\\n8 4\\n7 1\\n2 10\\n6 8\\n7 6\\n10 2\\n8 5\\n10 4\\n3 4\\n6 7\\n3 3\\n9 5\\n9 5\\n9 10\\n9 4\\n5 10\\n2 6\\n3 6\\n6 7\\n9 6\\n5 3\\n7 4\\n6 10\\n3 10\\n7 7\\n8 7\\n2 10\\n10 8\\n2 8\\n2 4\\n8 2\\n2 7\\n4 9\\n7 8\\n9 7\\n3 7\\n2 5\\n2 6\\n3 7\\n10 2\\n7 9\\n6 3\\n7 1\\n5 8\\n6 2\\n5 10\\n9 4\\n10 3\\n3 9\\n1 6\\n8 8\\n4 4\\n2 2\\n1 7\\n10 10\\n9 8\\n5 5\\n3 10\\n5 8\\n5 4\\n10 10\\n7 7\\n1 1\\n7 3\\n4 1\\n6 3\\n6 7\\n10 10\\n2 10\\n5 1\\n7 10\\n10 4\\n9 8\\n4 7\\n8 4\\n6 9\\n10 1\\n1 1\\n10 10\\n1 3\\n3 5\\n1 4\\n2 4\\n8 4\\n9 2\\n7 1\\n4 2\\n6 2\\n8 7\\n10 2\\n1 4\\n8 5\\n4 9\\n4 2\\n6 5\\n4 10\\n9 7\\n2 8\\n8 6\\n2 4\\n6 6\\n2 5\\n9 1\\n8 1\\n1 6\\n7 2\\n9 10\\n1 3\\n1 10\\n1 3\\n6 5\\n2 6\\n4 4\\n7 8\\n5 1\\n1 2\\n8 6\\n10 8\\n7 3\\n2 6\\n2 3\\n4 2\\n5 3\\n6 3\\n10 2\\n4 10\\n2 7\\n9 5\\n4 7\\n3 2\\n8 6\\n4 1\\n5 8\\n3 2\\n2 6\\n9 1\\n10 7\\n1 6\\n8 8\\n9 10\\n10 1\\n3 5\\n5 1\\n3 10\\n2 4\\n1 3\\n5 6\\n3 2\\n1 6\\n3 1\\n9 2\\n9 1\\n5 7\\n3 9\\n1 9\\n10 2\\n6 1\\n1 9\\n10 1\\n1 10\\n5 3\\n7 5\\n1 1\\n3 6\\n3 10\\n9 1\\n4 8\\n10 7\\n1 8\\n3 2\\n5 8\\n10 6\\n1 9\\n9 9\\n3 5\\n8 2\\n4 5\\n3 9\\n3 6\\n1 9\\n2 9\\n9 5\\n1 2\\n2 4\\n1 6\\n4 3\\n1 9\\n10 1\\n9 9\\n2 7\\n3 5\\n1 6\\n4 2\\n9 8\\n5 10\\n9 7\\n4 5\\n10 10\\n3 5\\n9 3\\n3 2\\n1 2\\n1 1\\n1 4\\n10 8\\n8 7\\n4 10\\n3 3\\n4 10\\n8 6\\n7 5\\n8 2\\n10 7\\n1 2\\n6 3\\n6 5\\n8 5\\n10 9\\n2 8\\n8 7\\n10 2\\n5 6\\n9 9\\n8 10\\n6 9\\n7 4\\n2 9\\n2 8\\n9 10\\n1 6\\n8 6\\n5 1\\n7 3\\n9 10\\n10 10\\n8 2\\n1 10\\n5 2\\n4 5\\n5 1\\n1 7\\n2 7\\n6 10\\n4 3\\n9 7\\n9 4\\n2 10\\n2 9\\n10 9\\n1 10\\n8 8\\n1 8\\n2 8\\n5 10\\n3 9\\n6 3\\n8 2\\n5 8\\n5 2\\n2 10\\n2 4\\n1 4\\n9 8\\n5 5\\n7 4\\n1 9\\n10 6\\n4 9\\n3 3\\n5 7\\n1 2\\n1 1\\n10 3\\n6 1\\n7 1\\n2 10\\n4 10\\n9 7\\n6 5\\n3 3\\n7 6\\n4 4\\n9 9\\n2 1\\n3 5\\n3 5\\n10 8\\n8 8\\n5 5\\n5 3\\n6 7\\n4 10\\n8 7\\n8 8\\n7 6\\n8 1\\n5 6\\n9 6\\n10 7\\n9 8\\n6 1\\n1 1\\n7 9\\n9 2\\n8 3\\n4 6\\n10 3\\n10 6\\n1 1\\n10 5\\n3 8\\n5 10\\n2 2\\n8 6\\n6 5\\n6 10\\n3 8\\n6 2\\n7 5\\n10 1\\n3 8\\n7 9\\n5 5\\n8 6\\n6 2\\n7 7\\n5 4\\n3 9\\n8 9\\n3 9\\n7 1\\n9 7\\n6 8\\n3 6\\n2 10\\n7 5\\n8 8\\n9 5\\n3 3\\n7 7\\n10 10\\n9 4\\n5 3\\n3 3\\n3 8\\n4 3\\n7 3\\n2 9\\n4 1\\n4 9\\n2 7\\n4 8\\n7 9\\n4 3\\n8 10\\n8 7\\n4 5\\n3 3\\n4 5\\n8 7\\n8 3\\n8 10\\n4 10\\n7 10\\n2 6\\n1 10\\n6 7\\n1 7\\n1 10\\n10 4\\n2 8\\n4 7\\n6 2\\n6 7\\n5 4\\n6 8\\n1 10\\n5 2\\n8 4\\n2 4\\n8 9\\n6 7\\n3 8\\n8 7\\n3 8\\n1 6\\n6 8\\n10 1\\n6 5\\n5 10\\n9 6\\n6 1\\n4 4\\n8 2\\n5 7\\n1 9\\n10 2\\n1 9\\n3 6\\n8 4\\n9 5\\n7 10\\n7 8\\n2 6\\n8 1\\n3 9\\n9 10\\n9 5\\n5 2\\n4 6\\n5 10\\n7 9\\n3 10\\n6 7\\n8 2\\n8 6\\n5 10\\n3 10\\n2 1\\n7 2\\n9 6\\n8 3\\n3 5\\n2 7\\n7 9\\n9 6\\n2 1\\n5 10\\n7 3\\n5 6\\n7 4\\n10 5\\n2 10\\n7 1\\n4 7\\n8 7\\n5 7\\n7 8\\n6 6\\n7 1\\n1 8\\n3 7\\n2 6\\n5 1\\n6 9\\n3 6\\n10 7\\n10 4\\n6 8\\n9 1\\n2 3\\n2 6\\n9 1\\n5 8\\n9 4\\n7 2\\n6 1\\n1 5\\n9 5\\n1 3\\n7 4\\n6 10\\n7 2\\n2 4\\n7 3\\n7 4\\n6 6\\n8 6\\n10 2\\n4 3\\n3 8\\n4 6\\n3 5\\n2 5\\n7 4\\n8 7\\n10 4\\n1 8\\n10 3\\n3 7\\n4 10\\n9 6\\n6 4\\n2 7\\n8 1\\n5 9\\n3 8\\n3 10\\n10 7\\n2 1\\n3 8\\n8 3\\n8 4\\n5 10\\n6 10\\n1 8\\n7 2\\n2 8\\n7 5\\n4 9\\n3 1\\n7 2\\n6 2\\n6 1\\n10 7\\n10 2\\n9 2\\n4 9\\n4 9\\n7 1\\n10 4\\n6 7\\n3 4\\n9 6\\n2 5\\n10 6\\n3 8\\n10 5\\n1 7\\n5 8\\n8 7\\n9 1\\n8 4\\n5 9\\n1 5\\n1 5\\n8 8\\n3 7\\n6 3\\n5 7\\n9 9\\n9 5\\n1 9\\n5 5\\n1 9\\n6 3\\n3 2\\n9 10\\n2 10\\n10 5\\n1 2\\n1 2\\n3 1\\n1 10\\n7 4\\n4 1\\n2 7\\n1 2\\n1 1\\n9 2\\n1 1\\n2 4\\n6 8\\n5 5\\n1 2\\n10 8\\n10 6\\n3 1\\n2 3\\n2 1\\n8 5\\n8 9\\n8 9\\n8 4\\n2 7\\n5 8\\n3 10\\n9 8\\n9 9\\n8 3\\n4 5\\n3 3\\n10 6\\n3 1\\n2 3\\n6 1\\n7 3\\n8 5\\n7 1\\n1 1\\n3 4\\n7 4\\n9 8\\n4 4\\n2 3\\n3 8\\n9 9\\n10 2\\n2 8\\n8 4\\n2 7\\n5 10\\n3 8\\n4 8\\n2 8\\n6 10\\n9 8\\n7 4\\n2 2\\n8 3\\n4 10\\n1 8\\n8 2\\n5 3\\n2 7\\n5 1\\n1 8\\n7 7\\n9 2\\n10 7\\n6 1\\n3 6\\n2 5\\n10 8\\n10 7\\n1 10\\n4 10\\n3 4\\n7 5\\n8 4\\n5 2\\n7 5\\n8 8\\n4 1\\n4 9\\n5 3\\n5 10\\n3 8\\n3 5\\n7 10\\n4 5\\n9 3\\n10 9\\n10 8\\n7 9\\n6 8\\n10 6\\n8 7\\n9 4\\n5 3\\n8 6\\n9 1\\n4 9\\n2 10\\n7 2\\n6 4\\n8 6\\n1 9\\n3 3\\n9 4\\n7 1\\n10 2\\n2 3\\n6 8\\n7 8\\n10 9\\n9 2\\n8 2\\n6 6\\n3 4\\n1 5\\n7 2\\n8 7\\n2 8\\n8 10\\n2 4\\n7 9\\n6 5\\n3 10\\n8 7\\n5 7\\n3 2\\n2 3\\n7 9\\n8 10\\n2 4\\n5 9\\n5 4\\n2 2\\n7 9\\n9 10\\n6 6\\n8 10\\n1 8\\n3 3\\n1 5\\n6 9\\n2 9\\n5 9\\n5 2\\n4 1\\n9 5\\n6 10\\n9 2\\n10 5\\n5 6\\n9 2\\n4 10\\n4 8\\n4 10\\n10 1\\n9 8\\n1 7\\n9 1\\n1 2\\n8 7\\n2 5\\n4 3\\n5 4\\n10 3\\n4 1\\n9 10\\n4 7\\n6 5\\n9 2\\n7 5\\n2 10\\n6 2\\n5 2\\n4 7\\n2 4\\n1 6\\n8 6\\n7 9\\n7 10\\n5 10\\n9 9\\n4 8\\n8 7\\n1 5\\n7 10\\n10 10\\n3 2\\n6 7\\n10 6\\n2 9\\n9 7\\n4 8\\n1 7\\n9 9\\n10 2\\n2 6\\n9 1\\n3 10\\n5 2\\n9 8\\n9 8\\n5 8\\n6 5\\n5 3\\n5 7\\n1 8\\n4 3\\n10 1\\n5 9\\n10 8\\n7 1\\n1 5\\n2 8\\n7 4\\n6 6\\n9 10\\n3 4\\n6 4\\n9 9\\n5 8\\n1 7\\n3 1\\n8 1\\n3 2\\n5 2\\n4 9\\n10 9\\n7 10\\n6 10\\n7 5\\n1 6\\n10 10\\n9 3\\n6 10\\n1 4\\n8 8\\n10 1\\n4 4\\n10 1\\n7 2\\n59\\n10 3\\n1 1\\n9 5\\n5 10\\n4 10\\n1 4\\n3 3\\n8 9\\n2 1\\n4 5\\n2 5\\n4 10\\n2 3\\n8 1\\n1 10\\n4 6\\n4 1\\n7 9\\n9 4\\n8 1\\n3 9\\n5 4\\n9 4\\n1 6\\n9 2\\n4 2\\n1 6\\n9 7\\n9 8\\n3 9\\n4 4\\n10 2\\n2 6\\n2 7\\n2 5\\n6 5\\n9 4\\n10 1\\n2 1\\n2 7\\n9 7\\n7 3\\n6 7\\n4 2\\n9 7\\n9 9\\n2 5\\n3 10\\n7 8\\n3 7\\n7 4\\n10 8\\n9 6\\n6 7\\n10 3\\n1 8\\n6 10\\n8 2\\n7 4\\n143\\n1 8\\n9 4\\n8 8\\n9 3\\n7 10\\n4 6\\n9 3\\n9 9\\n7 1\\n4 2\\n1 10\\n6 8\\n1 3\\n10 6\\n3 10\\n1 2\\n2 1\\n9 9\\n3 6\\n10 3\\n5 7\\n4 3\\n4 2\\n2 8\\n9 4\\n5 3\\n1 6\\n9 7\\n2 9\\n2 9\\n4 9\\n6 8\\n6 10\\n5 5\\n8 5\\n10 10\\n2 10\\n6 6\\n6 7\\n4 3\\n7 5\\n1 2\\n9 4\\n8 7\\n9 4\\n7 7\\n10 3\\n8 9\\n1 6\\n10 3\\n1 4\\n1 7\\n2 5\\n8 4\\n6 2\\n9 10\\n10 3\\n4 10\\n1 4\\n4 9\\n6 9\\n2 10\\n1 6\\n3 10\\n3 2\\n1 2\\n2 5\\n9 7\\n1 7\\n3 5\\n3 3\\n7 8\\n4 8\\n6 9\\n6 3\\n9 7\\n9 3\\n2 1\\n6 7\\n8 9\\n8 9\\n1 3\\n2 8\\n9 10\\n3 8\\n6 3\\n2 9\\n10 8\\n10 2\\n8 2\\n3 10\\n8 3\\n10 10\\n2 7\\n5 4\\n8 8\\n10 1\\n2 7\\n3 8\\n4 2\\n1 10\\n8 7\\n1 9\\n5 7\\n7 2\\n5 7\\n5 2\\n3 6\\n10 6\\n3 4\\n5 9\\n1 8\\n9 10\\n5 7\\n8 1\\n4 8\\n7 9\\n4 2\\n8 5\\n3 8\\n4 7\\n5 10\\n3 5\\n5 6\\n10 1\\n5 3\\n2 1\\n9 4\\n8 9\\n8 1\\n1 7\\n7 3\\n5 3\\n3 1\\n3 1\\n9 8\\n2 6\\n2 2\\n4 9\\n5 3\\n2 7\\n2 5\\n8 4\\n423\\n9 9\\n8 6\\n8 9\\n6 10\\n8 5\\n10 8\\n7 7\\n6 1\\n9 6\\n3 3\\n7 4\\n7 7\\n4 5\\n9 8\\n7 10\\n6 7\\n9 5\\n10 1\\n9 6\\n2 5\\n4 4\\n6 9\\n4 9\\n5 7\\n3 3\\n3 9\\n2 10\\n2 9\\n1 7\\n2 3\\n9 7\\n7 8\\n7 10\\n3 8\\n5 10\\n9 4\\n1 3\\n2 6\\n9 4\\n3 4\\n7 4\\n9 8\\n10 7\\n2 2\\n10 3\\n6 9\\n2 8\\n3 5\\n10 2\\n9 7\\n8 1\\n7 6\\n1 3\\n3 6\\n1 1\\n8 10\\n9 6\\n10 7\\n10 2\\n1 9\\n5 2\\n1 8\\n10 2\\n7 6\\n2 5\\n5 4\\n7 5\\n4 2\\n7 3\\n6 8\\n4 1\\n4 8\\n1 2\\n7 5\\n9 3\\n7 2\\n6 9\\n1 8\\n1 4\\n4 1\\n5 6\\n10 6\\n1 5\\n3 5\\n6 4\\n10 10\\n10 3\\n9 8\\n9 9\\n6 1\\n4 3\\n6 10\\n9 3\\n10 10\\n6 1\\n2 1\\n3 9\\n4 4\\n5 1\\n8 2\\n4 2\\n8 5\\n4 2\\n5 7\\n6 1\\n9 10\\n1 3\\n4 10\\n1 10\\n7 1\\n5 3\\n1 2\\n9 1\\n10 9\\n4 1\\n5 10\\n5 3\\n4 1\\n7 8\\n5 10\\n3 1\\n1 8\\n7 1\\n5 4\\n8 5\\n8 6\\n6 9\\n6 5\\n10 3\\n3 5\\n5 4\\n10 2\\n8 9\\n9 1\\n9 6\\n8 8\\n6 4\\n6 2\\n2 6\\n7 4\\n1 8\\n8 6\\n4 5\\n9 8\\n10 7\\n1 3\\n5 10\\n9 10\\n7 6\\n1 1\\n7 6\\n2 3\\n7 8\\n3 7\\n6 7\\n2 4\\n5 5\\n3 10\\n2 8\\n4 6\\n10 10\\n5 7\\n9 1\\n6 6\\n2 5\\n8 7\\n3 2\\n9 1\\n3 3\\n2 3\\n3 1\\n9 3\\n8 10\\n1 4\\n2 3\\n10 1\\n10 4\\n10 9\\n9 7\\n9 5\\n10 8\\n1 10\\n3 7\\n4 10\\n2 2\\n6 3\\n7 4\\n7 5\\n8 6\\n10 4\\n8 3\\n9 7\\n5 3\\n5 8\\n1 2\\n7 3\\n4 6\\n9 9\\n3 7\\n8 7\\n9 1\\n6 6\\n5 8\\n8 5\\n4 7\\n8 2\\n3 8\\n10 10\\n6 8\\n1 10\\n4 7\\n1 8\\n7 9\\n9 2\\n2 1\\n4 5\\n7 2\\n8 10\\n3 7\\n2 1\\n10 7\\n8 6\\n5 7\\n10 6\\n2 2\\n10 5\\n9 4\\n10 2\\n1 2\\n2 9\\n6 3\\n7 2\\n9 10\\n8 4\\n5 9\\n7 7\\n5 10\\n6 7\\n5 1\\n7 9\\n10 5\\n10 3\\n10 8\\n1 10\\n7 6\\n3 5\\n4 4\\n4 10\\n9 4\\n6 4\\n2 7\\n4 2\\n10 2\\n3 7\\n7 3\\n5 1\\n3 6\\n6 6\\n4 4\\n4 7\\n8 6\\n1 4\\n8 3\\n7 5\\n7 3\\n2 5\\n4 6\\n4 6\\n10 8\\n7 7\\n10 2\\n9 2\\n6 1\\n2 7\\n6 5\\n8 5\\n8 2\\n6 7\\n5 4\\n3 10\\n5 3\\n4 4\\n6 10\\n3 1\\n3 9\\n10 7\\n2 2\\n1 5\\n7 1\\n9 5\\n7 10\\n8 5\\n4 9\\n5 7\\n2 7\\n3 4\\n3 2\\n5 4\\n5 1\\n6 4\\n6 1\\n8 4\\n2 4\\n7 3\\n1 5\\n2 10\\n1 4\\n10 5\\n7 7\\n6 7\\n7 1\\n6 9\\n3 5\\n4 7\\n3 5\\n4 5\\n8 8\\n4 10\\n1 3\\n10 1\\n6 5\\n2 3\\n9 1\\n3 4\\n4 8\\n7 8\\n10 9\\n7 1\\n10 8\\n3 9\\n4 6\\n2 10\\n3 2\\n9 7\\n7 8\\n2 8\\n5 3\\n9 8\\n9 9\\n5 10\\n8 8\\n8 6\\n2 3\\n1 2\\n7 10\\n5 5\\n3 7\\n10 5\\n8 1\\n4 3\\n10 10\\n6 1\\n3 1\\n6 5\\n5 10\\n6 5\\n7 7\\n2 4\\n7 8\\n4 10\\n5 6\\n9 3\\n6 4\\n4 7\\n1 3\\n1 5\\n1 5\\n7 9\\n4 3\\n8 9\\n7 10\\n5 10\\n6 2\\n6 8\\n5 9\\n5 7\\n7 3\\n6 2\\n10 4\\n4 9\\n10 5\\n4 1\\n10 9\\n10 1\\n6 3\\n7 6\\n5 9\\n10 1\\n2 8\\n8 9\\n2 2\\n10 4\\n10 10\\n10 9\\n8 8\\n1 2\\n6 6\\n2 10\\n5 10\\n8 1\\n8 4\\n8 7\\n1 4\\n1 2\\n8 7\\n6 9\\n3 6\\n4 5\\n5 1\\n2 9\\n2 4\\n9 6\\n10 1\\n10 5\\n10 8\\n2 3\\n9 3\\n3 8\\n7 1\\n2 6\\n9 4\\n5 3\\n7 6\\n130\\n6 6\\n5 10\\n7 10\\n7 3\\n8 2\\n1 9\\n2 10\\n4 6\\n1 4\\n8 1\\n2 8\\n8 4\\n2 3\\n6 3\\n7 8\\n10 4\\n7 3\\n8 2\\n1 3\\n8 7\\n2 7\\n1 5\\n9 9\\n1 3\\n7 1\\n9 1\\n9 10\\n4 2\\n6 4\\n6 5\\n3 1\\n10 9\\n10 6\\n8 3\\n4 7\\n5 10\\n2 4\\n7 3\\n3 5\\n6 5\\n4 10\\n2 3\\n5 3\\n3 2\\n1 10\\n7 10\\n2 2\\n9 2\\n8 10\\n10 7\\n10 10\\n8 1\\n10 3\\n2 5\\n1 9\\n9 5\\n8 8\\n4 8\\n7 6\\n3 3\\n6 6\\n7 7\\n3 4\\n1 5\\n7 6\\n1 10\\n5 8\\n1 7\\n8 3\\n6 1\\n9 9\\n6 10\\n5 9\\n5 2\\n7 3\\n3 10\\n10 3\\n4 8\\n10 1\\n9 10\\n4 2\\n6 2\\n10 2\\n5 6\\n1 4\\n8 1\\n8 10\\n1 9\\n9 7\\n4 9\\n5 8\\n6 6\\n8 2\\n8 2\\n7 3\\n5 10\\n5 4\\n7 4\\n1 4\\n9 1\\n10 6\\n2 3\\n2 7\\n1 3\\n4 3\\n4 2\\n5 8\\n1 4\\n4 1\\n10 3\\n6 2\\n7 5\\n9 10\\n3 3\\n5 8\\n2 8\\n5 2\\n3 7\\n5 4\\n9 3\\n7 10\\n9 10\\n4 7\\n7 2\\n8 10\\n1 4\\n1 9\\n1 9\\n8 4\\n2 9\\n296\\n3 5\\n1 3\\n5 6\\n8 4\\n4 4\\n6 6\\n8 10\\n2 3\\n9 4\\n6 1\\n4 5\\n9 6\\n2 9\\n3 8\\n5 6\\n10 5\\n3 5\\n2 4\\n10 6\\n5 9\\n4 1\\n2 9\\n1 6\\n8 6\\n9 1\\n3 8\\n6 3\\n3 1\\n10 5\\n4 10\\n6 10\\n4 4\\n7 6\\n7 6\\n2 2\\n9 8\\n2 2\\n7 7\\n5 2\\n9 1\\n3 9\\n1 10\\n3 7\\n2 9\\n7 3\\n6 9\\n2 5\\n3 7\\n9 1\\n6 3\\n3 7\\n4 10\\n2 4\\n7 6\\n5 7\\n9 2\\n7 8\\n5 6\\n5 2\\n9 4\\n7 2\\n4 9\\n8 2\\n5 2\\n4 4\\n8 1\\n1 2\\n2 2\\n1 7\\n9 10\\n1 9\\n9 3\\n6 4\\n7 3\\n4 9\\n7 3\\n10 3\\n10 9\\n1 9\\n1 8\\n6 8\\n10 2\\n2 4\\n2 4\\n9 3\\n7 7\\n2 1\\n1 10\\n7 2\\n10 1\\n5 5\\n2 8\\n5 9\\n6 7\\n2 8\\n5 2\\n6 8\\n6 2\\n4 4\\n2 5\\n5 3\\n6 2\\n3 5\\n1 10\\n10 6\\n8 7\\n7 7\\n3 8\\n6 9\\n2 5\\n2 1\\n7 1\\n1 1\\n4 10\\n1 5\\n3 8\\n7 2\\n4 7\\n7 3\\n8 4\\n6 10\\n5 8\\n8 8\\n1 7\\n2 1\\n4 9\\n4 8\\n5 9\\n1 10\\n9 7\\n7 4\\n4 1\\n4 10\\n4 3\\n8 3\\n4 8\\n8 1\\n7 9\\n8 2\\n4 5\\n1 3\\n3 9\\n6 2\\n7 9\\n2 2\\n1 10\\n6 10\\n4 5\\n5 7\\n3 8\\n9 7\\n10 9\\n2 8\\n7 1\\n9 3\\n3 3\\n3 1\\n1 9\\n10 7\\n10 1\\n4 1\\n10 1\\n1 8\\n5 7\\n9 8\\n1 7\\n7 6\\n10 8\\n7 1\\n6 8\\n9 9\\n4 5\\n2 2\\n7 7\\n6 2\\n10 6\\n9 8\\n10 1\\n1 6\\n10 2\\n4 5\\n9 1\\n6 6\\n7 3\\n7 9\\n1 7\\n2 6\\n10 7\\n9 6\\n4 9\\n7 9\\n10 1\\n6 2\\n10 5\\n3 8\\n6 6\\n5 9\\n9 6\\n6 4\\n5 3\\n9 2\\n5 1\\n4 4\\n10 1\\n5 2\\n2 2\\n2 7\\n7 8\\n3 9\\n4 6\\n6 6\\n8 4\\n1 6\\n2 5\\n7 3\\n3 7\\n7 10\\n10 3\\n8 3\\n7 10\\n8 2\\n3 2\\n4 5\\n10 3\\n6 2\\n3 3\\n3 8\\n8 1\\n10 5\\n3 8\\n10 6\\n4 2\\n4 5\\n8 1\\n4 10\\n8 9\\n2 7\\n9 6\\n2 1\\n2 7\\n4 9\\n8 9\\n4 2\\n1 2\\n5 10\\n1 9\\n9 1\\n9 5\\n5 9\\n3 7\\n1 6\\n10 9\\n5 3\\n2 8\\n7 3\\n8 3\\n8 8\\n6 10\\n1 9\\n6 3\\n2 9\\n4 3\\n9 4\\n8 6\\n6 10\\n8 10\\n4 10\\n8 3\\n5 2\\n3 4\\n10 5\\n3 1\\n1 3\\n9 8\\n2 7\\n4 4\\n2 6\\n3 5\\n4 10\\n10 10\\n10 5\\n5 3\\n7 5\\n2 5\\n10 2\\n3 9\\n3 9\\n1 7\\n9 5\\n5 8\\n8 9\\n6 6\\n6 5\\n1 3\\n3 4\\n2 1\\n729\\n7 8\\n4 10\\n7 2\\n1 6\\n5 1\\n8 1\\n2 8\\n7 8\\n1 2\\n10 5\\n5 1\\n4 3\\n3 6\\n5 1\\n4 10\\n6 1\\n5 8\\n5 10\\n10 10\\n10 7\\n10 5\\n7 2\\n2 2\\n3 6\\n5 8\\n8 9\\n10 7\\n6 3\\n7 5\\n6 3\\n6 10\\n1 2\\n7 10\\n6 7\\n1 7\\n10 7\\n1 5\\n6 8\\n2 4\\n4 10\\n8 9\\n7 7\\n4 10\\n5 8\\n8 3\\n9 8\\n10 9\\n4 5\\n7 8\\n4 10\\n6 8\\n9 3\\n6 4\\n8 10\\n5 1\\n8 3\\n2 8\\n2 8\\n3 2\\n3 1\\n7 4\\n6 6\\n6 8\\n1 10\\n2 6\\n6 2\\n1 10\\n6 5\\n10 2\\n1 4\\n9 3\\n3 7\\n3 10\\n3 9\\n9 5\\n6 6\\n6 1\\n10 9\\n7 1\\n4 8\\n9 1\\n1 8\\n2 9\\n4 2\\n3 1\\n4 5\\n5 6\\n5 2\\n1 9\\n10 2\\n10 6\\n2 8\\n9 10\\n1 5\\n4 7\\n8 6\\n5 9\\n1 8\\n5 3\\n7 5\\n4 10\\n7 10\\n3 2\\n8 8\\n10 9\\n9 5\\n9 8\\n6 2\\n3 6\\n1 5\\n10 5\\n9 8\\n8 6\\n5 3\\n7 3\\n4 9\\n5 10\\n8 4\\n2 6\\n6 9\\n4 7\\n4 10\\n3 3\\n4 5\\n3 5\\n4 2\\n2 2\\n8 3\\n2 4\\n4 10\\n4 10\\n8 9\\n6 6\\n7 6\\n5 9\\n2 8\\n9 4\\n10 1\\n10 6\\n7 4\\n8 10\\n7 7\\n4 5\\n3 9\\n2 7\\n8 9\\n8 3\\n9 4\\n5 8\\n2 6\\n7 8\\n7 1\\n6 4\\n2 2\\n1 5\\n3 1\\n10 4\\n4 9\\n5 5\\n10 3\\n1 1\\n5 10\\n8 8\\n6 1\\n2 8\\n3 5\\n2 10\\n7 3\\n6 5\\n7 5\\n2 1\\n9 10\\n3 9\\n9 9\\n6 5\\n2 8\\n4 8\\n6 3\\n4 9\\n10 9\\n2 10\\n4 4\\n1 4\\n2 9\\n5 5\\n6 8\\n9 4\\n10 5\\n2 7\\n4 10\\n6 4\\n4 10\\n1 8\\n2 3\\n7 5\\n1 9\\n9 5\\n5 10\\n4 6\\n1 1\\n2 4\\n8 9\\n8 3\\n9 8\\n1 6\\n4 8\\n10 10\\n8 7\\n2 1\\n10 10\\n7 4\\n6 1\\n1 3\\n4 10\\n4 9\\n2 4\\n9 3\\n4 8\\n4 8\\n2 4\\n1 3\\n2 4\\n8 1\\n9 9\\n7 2\\n5 8\\n6 2\\n8 5\\n9 7\\n4 7\\n4 1\\n4 1\\n9 2\\n3 1\\n6 8\\n8 5\\n1 3\\n5 2\\n5 3\\n5 4\\n9 10\\n8 10\\n6 10\\n3 3\\n1 4\\n1 1\\n2 2\\n2 9\\n8 3\\n4 7\\n9 3\\n6 2\\n2 3\\n3 4\\n6 4\\n5 5\\n5 5\\n2 9\\n3 7\\n9 8\\n10 7\\n10 8\\n3 6\\n9 9\\n8 2\\n3 8\\n9 5\\n9 8\\n8 10\\n9 3\\n4 3\\n10 9\\n1 1\\n6 4\\n8 9\\n4 1\\n4 9\\n10 5\\n8 5\\n4 3\\n1 10\\n3 5\\n6 7\\n7 8\\n1 6\\n1 9\\n5 1\\n8 8\\n5 8\\n5 2\\n1 1\\n1 9\\n5 10\\n3 2\\n7 9\\n2 8\\n3 5\\n8 9\\n6 8\\n5 3\\n10 4\\n2 3\\n8 4\\n5 3\\n3 6\\n10 4\\n9 5\\n1 8\\n8 1\\n8 7\\n5 9\\n7 2\\n10 7\\n6 1\\n8 5\\n3 8\\n10 2\\n5 5\\n6 6\\n6 7\\n6 1\\n1 2\\n6 4\\n1 9\\n10 7\\n2 7\\n7 8\\n4 8\\n2 6\\n4 3\\n9 4\\n10 4\\n10 2\\n5 5\\n9 9\\n9 4\\n2 3\\n5 4\\n9 2\\n9 9\\n3 8\\n2 3\\n4 9\\n6 7\\n10 7\\n2 6\\n9 1\\n10 6\\n1 5\\n7 1\\n2 6\\n9 10\\n2 3\\n9 2\\n4 7\\n4 9\\n4 4\\n9 1\\n7 6\\n1 7\\n8 5\\n1 8\\n3 7\\n7 4\\n6 5\\n3 5\\n9 10\\n3 9\\n6 3\\n1 2\\n5 8\\n4 1\\n6 7\\n10 7\\n9 10\\n6 4\\n9 10\\n5 3\\n4 6\\n1 1\\n10 10\\n1 2\\n4 10\\n3 4\\n3 7\\n9 6\\n1 3\\n5 3\\n1 9\\n5 5\\n7 10\\n3 1\\n2 1\\n3 5\\n5 6\\n1 2\\n10 3\\n3 6\\n4 8\\n2 6\\n8 9\\n2 6\\n9 7\\n4 9\\n8 1\\n9 5\\n7 1\\n7 2\\n3 7\\n9 3\\n10 6\\n6 2\\n5 7\\n2 2\\n1 10\\n2 9\\n1 9\\n6 3\\n8 5\\n9 6\\n2 7\\n9 1\\n7 5\\n4 4\\n4 7\\n3 2\\n7 8\\n6 7\\n3 8\\n8 7\\n8 10\\n8 2\\n5 6\\n4 10\\n7 7\\n3 5\\n3 7\\n9 8\\n10 7\\n7 6\\n1 6\\n4 3\\n10 4\\n7 1\\n1 9\\n9 8\\n1 3\\n7 9\\n1 1\\n6 8\\n10 10\\n4 1\\n2 2\\n8 9\\n9 1\\n8 1\\n10 3\\n4 3\\n5 10\\n2 4\\n5 4\\n7 3\\n5 1\\n5 8\\n7 9\\n10 4\\n6 5\\n4 6\\n10 9\\n1 9\\n10 10\\n2 10\\n9 4\\n4 10\\n10 8\\n3 4\\n7 2\\n7 5\\n5 10\\n6 2\\n9 1\\n4 4\\n5 9\\n4 8\\n7 6\\n1 5\\n3 2\\n8 8\\n6 10\\n2 8\\n1 6\\n2 4\\n5 3\\n3 2\\n10 5\\n9 6\\n3 8\\n6 2\\n8 8\\n8 6\\n5 4\\n9 1\\n2 1\\n2 3\\n1 7\\n10 3\\n6 1\\n2 6\\n3 3\\n4 6\\n1 7\\n5 2\\n7 2\\n4 6\\n7 4\\n5 8\\n4 7\\n6 4\\n6 10\\n7 5\\n7 2\\n7 1\\n10 4\\n6 5\\n3 5\\n8 9\\n3 5\\n8 7\\n8 10\\n1 1\\n4 6\\n6 1\\n1 5\\n5 9\\n6 4\\n1 10\\n6 4\\n5 6\\n7 10\\n4 4\\n2 8\\n7 1\\n8 4\\n1 6\\n6 5\\n2 6\\n1 7\\n7 2\\n3 6\\n6 1\\n7 1\\n8 6\\n9 4\\n2 1\\n7 8\\n7 5\\n5 8\\n5 8\\n5 8\\n2 9\\n7 10\\n10 6\\n7 1\\n6 6\\n3 7\\n2 5\\n3 10\\n3 7\\n4 3\\n7 6\\n10 7\\n9 8\\n10 6\\n1 5\\n3 10\\n2 3\\n6 6\\n3 3\\n10 4\\n9 4\\n6 9\\n3 3\\n10 7\\n1 3\\n2 5\\n1 2\\n1 9\\n1 8\\n4 1\\n10 6\\n4 2\\n3 8\\n1 7\\n9 8\\n3 8\\n2 8\\n9 3\\n7 5\\n1 7\\n9 6\\n4 7\\n10 1\\n5 3\\n5 2\\n6 5\\n3 8\\n1 4\\n7 5\\n2 5\\n3 10\\n5 9\\n9 2\\n5 9\\n4 2\\n6 2\\n3 1\\n7 10\\n2 9\\n8 6\\n10 9\\n9 9\\n2 4\\n2 8\\n7 1\\n6 8\\n4 9\\n4 4\\n1 2\\n5 6\\n9 3\\n8 1\\n10 8\\n4 7\\n2 1\\n3 9\\n4 5\\n10 9\\n6 5\\n7 2\\n1 3\\n4 1\\n8 7\\n6 6\\n9 3\\n4 6\\n10 8\\n10 4\\n8 5\\n6 9\\n7 10\\n9 2\\n8 2\\n3 5\\n2 6\\n10 9\\n6 7\\n2 8\\n6 2\\n9 1\\n5 7\\n4 9\\n7 9\\n10 8\\n10 10\\n3 2\\n8 8\\n6 3\\n8 7\\n1 2\\n9 7\\n8 3\\n7 8\\n5 4\\n2 2\\n1 7\\n6 2\\n10 6\\n7 4\\n2 6\\n10 10\\n7 7\\n8 10\\n9 2\\n10 9\\n9 7\\n10 5\\n5 8\\n10 10\\n6 5\\n6 6\\n8 5\\n5 7\\n3 10\\n8 5\\n1 10\\n2 8\\n1 4\\n4 4\\n10 4\\n2 3\\n4 9\\n5 10\\n4 5\\n6 6\\n3 5\\n4 8\\n2 5\\n8 7\\n7 1\\n4 8\\n4 9\\n9 7\\n7 5\\n8 8\\n4 7\\n2 3\\n5 7\\n7 9\\n4 8\\n1 7\\n8 4\\n6 10\\n3 4\\n4 3\\n8 2\\n5 2\\n1 3\\n5 6\\n9 8\\n598\\n10 3\\n7 3\\n5 3\\n8 8\\n2 8\\n3 9\\n1 2\\n5 9\\n5 10\\n9 3\\n10 6\\n4 3\\n5 2\\n3 6\\n2 1\\n6 3\\n9 3\\n5 6\\n6 8\\n4 5\\n3 1\\n3 8\\n5 8\\n8 7\\n5 1\\n7 1\\n4 9\\n5 4\\n5 3\\n4 2\\n5 5\\n8 5\\n1 10\\n3 1\\n10 1\\n2 5\\n8 1\\n10 9\\n9 5\\n1 2\\n4 6\\n6 3\\n6 2\\n4 6\\n7 6\\n7 5\\n7 6\\n3 3\\n5 10\\n5 5\\n3 8\\n5 1\\n9 1\\n6 5\\n5 2\\n8 10\\n5 5\\n6 7\\n4 7\\n2 8\\n3 6\\n6 7\\n2 10\\n6 8\\n8 9\\n1 1\\n9 4\\n4 1\\n4 6\\n6 8\\n4 2\\n6 4\\n3 6\\n2 4\\n2 7\\n4 1\\n1 3\\n4 5\\n5 5\\n5 1\\n2 3\\n7 2\\n10 8\\n6 6\\n5 3\\n8 3\\n8 7\\n5 9\\n9 4\\n7 7\\n4 6\\n4 6\\n4 4\\n5 8\\n5 2\\n10 7\\n10 3\\n2 2\\n3 4\\n2 2\\n5 9\\n6 6\\n9 8\\n1 7\\n3 7\\n6 4\\n1 8\\n3 9\\n3 2\\n9 4\\n6 7\\n1 6\\n1 10\\n6 1\\n7 1\\n6 4\\n1 2\\n7 1\\n3 6\\n8 9\\n7 1\\n2 7\\n3 5\\n3 6\\n10 9\\n9 1\\n4 10\\n10 5\\n1 4\\n2 8\\n10 4\\n8 6\\n2 9\\n8 2\\n8 9\\n10 2\\n2 1\\n7 3\\n1 4\\n10 2\\n5 3\\n9 4\\n3 2\\n7 2\\n8 8\\n10 3\\n10 4\\n7 7\\n2 1\\n8 1\\n10 7\\n6 7\\n1 9\\n6 4\\n10 8\\n3 4\\n3 6\\n9 2\\n4 9\\n9 5\\n7 1\\n9 4\\n10 3\\n2 4\\n8 10\\n7 1\\n3 5\\n8 4\\n3 3\\n10 7\\n9 3\\n9 1\\n1 2\\n3 6\\n2 1\\n6 9\\n2 9\\n8 5\\n10 1\\n10 9\\n6 9\\n10 7\\n8 8\\n10 9\\n7 3\\n10 6\\n5 2\\n9 1\\n7 5\\n9 5\\n1 7\\n9 8\\n6 8\\n7 9\\n4 7\\n10 10\\n7 10\\n3 6\\n1 1\\n2 1\\n3 2\\n3 7\\n2 5\\n2 9\\n5 5\\n4 8\\n8 5\\n9 9\\n3 1\\n9 8\\n1 1\\n6 3\\n2 3\\n2 1\\n10 4\\n6 7\\n9 9\\n2 9\\n2 8\\n4 9\\n7 6\\n10 9\\n10 1\\n5 5\\n5 6\\n4 4\\n10 1\\n3 1\\n6 7\\n4 4\\n1 7\\n7 7\\n3 2\\n8 2\\n10 1\\n1 6\\n1 9\\n6 8\\n7 8\\n10 1\\n1 8\\n2 9\\n6 8\\n1 3\\n3 5\\n4 5\\n9 2\\n7 7\\n1 2\\n10 9\\n10 5\\n4 6\\n5 6\\n7 6\\n8 9\\n2 8\\n2 4\\n9 10\\n7 9\\n10 6\\n9 10\\n4 10\\n8 3\\n3 7\\n2 4\\n6 5\\n1 5\\n10 6\\n5 3\\n6 3\\n5 10\\n9 7\\n6 4\\n2 4\\n8 4\\n3 5\\n7 5\\n4 4\\n10 8\\n5 9\\n2 4\\n5 6\\n1 2\\n8 5\\n5 8\\n9 4\\n2 3\\n7 2\\n9 8\\n7 7\\n4 4\\n7 8\\n2 3\\n9 2\\n3 2\\n10 3\\n5 3\\n8 7\\n7 6\\n2 9\\n2 6\\n10 10\\n6 8\\n9 4\\n8 9\\n10 9\\n2 7\\n4 5\\n4 4\\n9 1\\n10 5\\n1 1\\n1 8\\n1 10\\n1 4\\n8 1\\n9 7\\n1 9\\n8 6\\n5 7\\n7 5\\n9 3\\n5 6\\n6 7\\n2 6\\n3 7\\n7 1\\n10 1\\n4 5\\n10 9\\n2 4\\n6 1\\n3 9\\n1 6\\n9 10\\n5 10\\n3 6\\n8 6\\n1 9\\n6 4\\n2 3\\n8 8\\n3 9\\n8 8\\n7 8\\n5 1\\n7 3\\n2 5\\n1 8\\n8 3\\n2 1\\n3 6\\n9 10\\n8 10\\n10 7\\n2 9\\n4 7\\n6 6\\n5 8\\n7 6\\n1 5\\n6 10\\n2 6\\n4 9\\n7 9\\n2 2\\n9 9\\n5 10\\n2 6\\n3 2\\n6 7\\n9 6\\n7 7\\n2 10\\n8 10\\n9 6\\n6 9\\n4 6\\n4 8\\n3 5\\n6 4\\n6 9\\n4 7\\n9 6\\n10 3\\n4 10\\n3 5\\n1 2\\n10 4\\n4 3\\n8 2\\n6 1\\n1 9\\n4 1\\n8 1\\n6 9\\n6 4\\n8 4\\n6 1\\n2 2\\n9 4\\n6 10\\n8 9\\n2 4\\n4 3\\n9 6\\n7 5\\n5 5\\n2 9\\n3 3\\n9 9\\n5 4\\n9 6\\n1 6\\n5 1\\n4 1\\n5 8\\n2 7\\n9 1\\n10 1\\n7 6\\n1 6\\n3 6\\n2 5\\n1 3\\n5 9\\n8 10\\n7 1\\n10 2\\n7 9\\n9 10\\n9 3\\n4 10\\n1 4\\n1 5\\n2 7\\n10 1\\n10 3\\n2 3\\n4 6\\n9 1\\n5 7\\n3 9\\n2 10\\n7 4\\n6 9\\n9 2\\n3 9\\n4 3\\n6 3\\n6 5\\n9 4\\n4 9\\n7 3\\n1 4\\n7 2\\n4 6\\n6 6\\n6 8\\n8 6\\n5 1\\n5 7\\n4 7\\n1 9\\n7 2\\n3 10\\n6 2\\n7 2\\n6 4\\n3 2\\n5 6\\n7 9\\n7 10\\n5 8\\n2 4\\n3 4\\n10 7\\n2 8\\n8 3\\n4 3\\n4 6\\n3 6\\n3 3\\n9 5\\n6 10\\n3 4\\n3 2\\n7 7\\n5 2\\n1 6\\n9 3\\n10 3\\n8 9\\n2 1\\n3 4\\n4 4\\n2 10\\n6 7\\n5 10\\n5 2\\n5 2\\n5 2\\n5 9\\n2 7\\n5 4\\n10 1\\n7 3\\n10 4\\n3 8\\n2 9\\n4 7\\n5 1\\n2 3\\n1 7\\n1 6\\n1 10\\n9 5\\n4 9\\n2 10\\n3 4\\n1 3\\n4 6\\n4 1\\n10 7\\n9 3\\n10 8\\n2 8\\n2 3\\n9 2\\n10 6\\n3 2\\n3 2\\n2 7\\n6 7\\n6 1\\n7 9\\n7 3\\n5 8\\n7 2\\n9 6\\n6 2\\n10 9\\n9 6\\n8 10\\n2 7\\n9 2\\n9 10\\n4 10\\n6 6\\n3 9\\n7 1\\n7 6\\n8 4\\n4 10\\n9 1\\n5 7\\n3 4\\n2 7\\n6 8\\n5 1\\n1 2\\n9 5\\n2 10\\n2 5\\n1 6\\n8 4\\n10 4\\n10 2\\n3 9\\n7 1\\n4 5\\n5 9\\n3 6\\n9 4\\n2 10\\n4 6\\n9 7\\n3 3\\n6 5\\n1 4\\n8 6\\n3 10\\n5 1\\n10 7\\n9 7\\n10 6\\n2 10\\n1 1\\n6 3\\n7 3\\n5 7\\n1 3\\n3 5\\n3 4\\n1 3\\n7 9\\n3 1\\n9 6\\n207\\n7 2\\n7 9\\n5 6\\n10 4\\n7 1\\n8 4\\n4 9\\n1 8\\n2 1\\n8 1\\n2 6\\n7 6\\n2 6\\n3 6\\n8 9\\n6 3\\n5 2\\n1 2\\n10 8\\n8 6\\n7 5\\n1 3\\n7 6\\n6 10\\n6 6\\n10 5\\n1 7\\n7 2\\n7 8\\n3 7\\n4 3\\n6 1\\n8 3\\n1 5\\n3 6\\n10 7\\n2 9\\n10 2\\n8 1\\n8 6\\n8 1\\n3 10\\n3 8\\n5 7\\n3 1\\n10 9\\n1 8\\n1 8\\n6 3\\n3 9\\n2 8\\n1 10\\n9 8\\n1 10\\n4 3\\n6 1\\n10 4\\n2 8\\n10 1\\n9 8\\n5 7\\n7 5\\n2 3\\n5 7\\n3 7\\n9 2\\n9 3\\n1 5\\n10 9\\n10 8\\n3 9\\n1 1\\n3 8\\n5 4\\n8 5\\n10 3\\n9 10\\n10 8\\n6 3\\n8 9\\n10 4\\n3 9\\n7 1\\n8 4\\n5 1\\n7 5\\n6 3\\n4 4\\n3 3\\n7 5\\n4 6\\n6 2\\n9 8\\n10 3\\n5 4\\n6 3\\n5 6\\n8 5\\n9 5\\n5 6\\n8 7\\n7 2\\n5 9\\n7 3\\n2 5\\n2 3\\n3 8\\n10 5\\n10 10\\n10 6\\n6 6\\n3 8\\n1 8\\n2 6\\n10 7\\n6 9\\n4 9\\n9 10\\n3 4\\n8 1\\n10 2\\n1 2\\n10 7\\n7 2\\n9 5\\n4 3\\n1 2\\n7 8\\n1 9\\n2 7\\n2 10\\n8 1\\n7 3\\n1 4\\n8 7\\n5 6\\n1 2\\n1 6\\n7 3\\n8 10\\n3 3\\n4 3\\n9 1\\n8 4\\n9 6\\n3 6\\n3 2\\n8 8\\n10 2\\n4 9\\n1 6\\n2 6\\n8 1\\n9 8\\n2 6\\n5 2\\n2 6\\n6 6\\n6 2\\n2 4\\n5 9\\n3 8\\n2 4\\n9 5\\n3 8\\n1 6\\n4 5\\n1 5\\n5 10\\n3 6\\n6 10\\n9 5\\n5 1\\n8 8\\n9 6\\n10 5\\n1 10\\n4 3\\n4 4\\n10 7\\n7 8\\n8 1\\n8 5\\n6 5\\n1 5\\n8 5\\n6 3\\n10 8\\n8 7\\n9 9\\n4 7\\n9 10\\n2 9\\n1 9\\n5 3\\n5 7\\n4 9\\n1 7\\n4 2\\n2 1\\n10 5\\n9 2\\n3 5\\n1 5\\n5 1\\n2 7\\n3 2\\n698\\n4 7\\n8 9\\n6 8\\n9 9\\n6 9\\n5 1\\n6 6\\n5 10\\n5 6\\n6 9\\n2 2\\n6 1\\n1 3\\n7 6\\n10 10\\n4 10\\n4 5\\n10 7\\n5 4\\n1 4\\n2 2\\n8 8\\n9 1\\n2 10\\n7 10\\n10 5\\n6 9\\n8 4\\n9 5\\n8 4\\n7 10\\n1 4\\n4 3\\n5 1\\n7 9\\n9 2\\n9 6\\n10 10\\n8 5\\n6 9\\n6 9\\n7 5\\n8 5\\n5 10\\n10 1\\n10 2\\n6 3\\n10 10\\n7 9\\n6 6\\n2 4\\n6 4\\n3 5\\n5 2\\n10 6\\n2 2\\n7 10\\n5 2\\n1 3\\n5 3\\n4 4\\n1 6\\n5 3\\n9 4\\n3 2\\n6 6\\n6 6\\n2 4\\n6 6\\n8 4\\n3 8\\n3 2\\n5 4\\n6 1\\n6 10\\n6 5\\n6 2\\n7 4\\n9 5\\n10 5\\n7 1\\n4 1\\n5 10\\n8 9\\n5 8\\n4 7\\n1 3\\n4 9\\n5 5\\n1 2\\n9 10\\n2 1\\n5 2\\n1 2\\n10 9\\n3 3\\n5 8\\n2 9\\n3 9\\n8 10\\n9 3\\n9 9\\n2 2\\n6 4\\n4 6\\n5 8\\n6 5\\n8 5\\n8 4\\n5 8\\n4 10\\n6 9\\n6 2\\n4 9\\n10 3\\n10 3\\n8 8\\n5 4\\n5 2\\n6 5\\n3 10\\n1 4\\n2 5\\n3 6\\n6 7\\n2 6\\n5 4\\n3 9\\n10 9\\n4 2\\n1 8\\n4 3\\n4 6\\n10 9\\n9 5\\n5 7\\n9 3\\n10 10\\n8 3\\n4 1\\n8 8\\n8 4\\n6 2\\n3 9\\n9 2\\n6 6\\n3 10\\n5 9\\n8 5\\n4 4\\n1 9\\n4 6\\n7 10\\n8 2\\n6 6\\n9 9\\n3 1\\n10 8\\n1 9\\n9 5\\n1 8\\n5 9\\n2 7\\n8 4\\n4 6\\n8 6\\n1 5\\n4 5\\n3 7\\n6 8\\n2 5\\n6 2\\n3 1\\n8 5\\n1 8\\n8 10\\n10 3\\n1 5\\n2 3\\n1 9\\n4 9\\n4 7\\n8 3\\n5 6\\n8 6\\n3 2\\n5 1\\n4 6\\n7 6\\n8 9\\n1 10\\n2 2\\n7 3\\n5 1\\n10 6\\n1 1\\n4 6\\n4 7\\n1 1\\n9 2\\n2 5\\n9 3\\n6 5\\n2 4\\n1 3\\n7 5\\n4 7\\n9 8\\n4 7\\n2 3\\n1 8\\n5 3\\n10 3\\n8 5\\n4 4\\n1 10\\n5 2\\n1 3\\n1 5\\n3 4\\n1 3\\n4 6\\n4 4\\n3 10\\n8 3\\n6 3\\n2 5\\n4 4\\n10 3\\n3 3\\n9 1\\n9 6\\n1 7\\n4 9\\n10 4\\n4 10\\n8 5\\n7 4\\n4 9\\n10 2\\n9 1\\n5 4\\n4 6\\n5 7\\n9 5\\n8 10\\n4 9\\n8 9\\n6 2\\n6 9\\n1 6\\n3 2\\n8 2\\n9 5\\n6 10\\n9 7\\n1 10\\n5 10\\n2 3\\n2 1\\n3 6\\n6 8\\n8 8\\n7 3\\n10 3\\n7 6\\n1 3\\n1 10\\n4 3\\n6 3\\n8 9\\n10 7\\n1 3\\n6 8\\n4 7\\n9 7\\n8 6\\n3 1\\n5 9\\n10 6\\n5 2\\n8 7\\n3 3\\n5 6\\n10 6\\n4 3\\n10 9\\n4 6\\n10 8\\n1 9\\n8 7\\n2 2\\n1 6\\n6 2\\n4 3\\n9 6\\n3 3\\n5 2\\n2 9\\n5 9\\n5 5\\n4 3\\n4 9\\n8 6\\n7 9\\n4 6\\n4 3\\n6 5\\n8 4\\n3 9\\n1 5\\n1 9\\n7 6\\n8 8\\n3 5\\n3 5\\n10 3\\n1 5\\n4 8\\n5 6\\n7 5\\n8 8\\n6 10\\n8 10\\n7 6\\n4 7\\n8 2\\n10 5\\n5 8\\n3 7\\n9 5\\n3 1\\n7 3\\n6 10\\n3 3\\n1 10\\n3 8\\n6 6\\n4 4\\n3 6\\n9 4\\n3 10\\n8 3\\n2 2\\n2 2\\n5 6\\n10 8\\n6 6\\n10 2\\n5 5\\n7 8\\n8 9\\n7 1\\n9 7\\n9 9\\n8 2\\n1 9\\n3 10\\n9 5\\n4 6\\n2 8\\n1 2\\n6 10\\n3 1\\n8 5\\n6 10\\n6 10\\n7 4\\n3 4\\n7 3\\n4 1\\n7 6\\n2 8\\n10 4\\n4 1\\n6 9\\n7 5\\n8 10\\n7 4\\n2 10\\n1 4\\n8 7\\n8 7\\n10 4\\n1 8\\n4 2\\n10 5\\n2 6\\n8 6\\n10 3\\n10 2\\n2 10\\n6 2\\n1 1\\n1 10\\n1 4\\n2 7\\n4 2\\n10 6\\n9 5\\n8 8\\n5 9\\n10 2\\n7 5\\n5 5\\n6 7\\n2 3\\n7 9\\n1 2\\n3 8\\n5 2\\n6 2\\n2 3\\n9 4\\n5 6\\n3 3\\n8 4\\n7 4\\n1 7\\n10 5\\n10 6\\n3 3\\n8 9\\n8 9\\n8 6\\n4 6\\n3 10\\n6 10\\n6 6\\n6 10\\n6 1\\n6 2\\n8 3\\n1 3\\n5 3\\n2 5\\n10 2\\n10 8\\n7 6\\n9 2\\n8 2\\n6 7\\n6 7\\n5 7\\n8 9\\n6 5\\n9 10\\n2 6\\n3 4\\n2 7\\n7 6\\n1 2\\n6 10\\n10 1\\n3 3\\n5 3\\n5 5\\n9 4\\n7 9\\n2 8\\n3 6\\n6 1\\n1 4\\n5 6\\n1 3\\n3 9\\n8 6\\n6 7\\n1 6\\n6 9\\n6 2\\n3 5\\n3 4\\n10 3\\n7 8\\n7 10\\n2 2\\n4 2\\n4 7\\n2 1\\n8 8\\n6 2\\n7 3\\n10 3\\n3 9\\n10 4\\n1 10\\n3 3\\n5 2\\n10 1\\n1 8\\n5 2\\n8 4\\n5 7\\n1 8\\n6 5\\n1 2\\n9 10\\n9 2\\n4 8\\n6 5\\n4 9\\n8 1\\n3 2\\n7 7\\n6 10\\n6 1\\n4 5\\n2 9\\n4 3\\n7 6\\n3 8\\n4 10\\n5 3\\n7 2\\n7 5\\n7 2\\n10 7\\n2 9\\n3 2\\n5 8\\n3 3\\n8 2\\n9 5\\n3 2\\n9 2\\n7 8\\n10 3\\n8 9\\n8 9\\n4 1\\n5 4\\n9 10\\n8 6\\n4 6\\n1 3\\n9 2\\n2 3\\n1 10\\n10 2\\n8 8\\n2 10\\n2 1\\n6 9\\n4 7\\n2 10\\n9 3\\n7 7\\n6 6\\n2 4\\n7 6\\n1 5\\n9 6\\n3 2\\n3 7\\n8 9\\n1 2\\n3 10\\n8 1\\n8 3\\n1 8\\n3 2\\n5 3\\n7 5\\n2 1\\n1 10\\n2 2\\n5 10\\n3 3\\n9 6\\n4 7\\n10 9\\n9 7\\n10 10\\n4 1\\n1 9\\n1 5\\n7 8\\n7 6\\n3 5\\n7 5\\n10 4\\n6 3\\n5 7\\n5 8\\n1 7\\n5 9\\n9 10\\n5 4\\n10 3\\n6 9\\n9 3\\n8 3\\n4 6\\n1 1\\n8 1\\n8 9\\n8 8\\n7 5\\n5 3\\n6 1\\n9 6\\n3 3\\n10 7\\n2 1\\n3 5\\n10 2\\n3 2\\n5 4\\n10 7\\n5 6\\n8 8\\n8 9\\n2 4\\n7 9\\n7 8\\n2 5\\n7 8\\n6 6\\n6 9\\n1 10\\n10 5\\n10 3\\n5 5\\n10 6\\n10 3\\n7 7\\n3 6\\n9 9\\n2 7\\n6 5\\n10 6\\n7 10\\n8 3\\n10 9\\n3 5\\n2 1\\n4 10\\n10 2\\n5 3\\n1 3\\n9 10\\n3 7\\n4 7\\n3 8\\n5 3\\n7 6\\n2 8\\n9 8\\n10 7\\n1 1\\n7 8\\n8 7\\n3 6\\n1 2\\n2 5\\n8 4\\n10 1\\n2 4\\n6 9\\n3 4\\n1 7\\n3 4\\n9 4\\n4 8\\n3 8\\n10 1\\n9 5\\n2 2\\n2 2\\n5 10\\n5 6\\n3 5\\n6 8\\n4 8\\n2 5\\n4 7\\n8 9\\n5 5\\n5 1\\n6 4\\n7 7\\n4 8\\n5 2\\n8 3\\n3 8\\n6 1\\n2 2\\n9 6\\n8 5\\n10 8\\n4 5\\n6 2\\n5 4\\n6 1\\n5 9\\n8 6\\n8 4\\n294\\n9 8\\n9 9\\n10 6\\n1 9\\n2 8\\n10 4\\n10 4\\n3 4\\n8 7\\n10 9\\n4 6\\n9 5\\n4 5\\n6 6\\n10 5\\n4 6\\n7 10\\n7 10\\n3 3\\n9 8\\n7 10\\n6 3\\n9 1\\n10 7\\n4 3\\n8 3\\n7 4\\n1 2\\n6 5\\n7 6\\n1 5\\n9 3\\n4 6\\n6 4\\n6 1\\n3 8\\n5 9\\n2 9\\n9 7\\n10 5\\n6 9\\n5 6\\n2 10\\n1 2\\n4 3\\n4 8\\n8 5\\n8 5\\n5 3\\n7 10\\n7 6\\n8 6\\n2 7\\n5 6\\n2 2\\n1 1\\n4 6\\n10 7\\n10 3\\n7 6\\n7 9\\n8 9\\n9 9\\n9 1\\n2 6\\n10 10\\n9 10\\n8 3\\n5 1\\n2 6\\n3 5\\n1 1\\n5 1\\n8 4\\n9 6\\n4 3\\n3 1\\n9 9\\n3 2\\n5 6\\n4 7\\n3 1\\n9 2\\n6 1\\n9 3\\n5 9\\n7 8\\n2 4\\n5 7\\n8 9\\n2 9\\n8 2\\n4 6\\n4 1\\n10 6\\n6 7\\n6 9\\n8 8\\n4 10\\n9 1\\n8 6\\n2 5\\n9 8\\n4 8\\n3 9\\n7 1\\n7 7\\n1 6\\n10 7\\n4 2\\n5 2\\n2 10\\n2 3\\n9 1\\n8 9\\n4 5\\n5 2\\n4 9\\n1 2\\n7 8\\n4 8\\n3 4\\n7 9\\n5 10\\n3 3\\n2 2\\n5 7\\n4 1\\n8 6\\n2 7\\n1 9\\n9 8\\n4 5\\n1 6\\n10 3\\n1 6\\n5 1\\n10 5\\n8 3\\n5 6\\n10 7\\n9 9\\n6 9\\n5 5\\n7 9\\n6 4\\n2 5\\n6 3\\n2 1\\n7 7\\n7 4\\n2 1\\n3 2\\n6 6\\n7 1\\n9 4\\n4 9\\n7 10\\n1 1\\n2 10\\n3 2\\n3 10\\n1 8\\n10 8\\n10 7\\n10 10\\n5 8\\n10 8\\n2 1\\n5 6\\n6 7\\n8 3\\n5 1\\n1 8\\n5 1\\n2 5\\n10 8\\n9 8\\n10 2\\n2 2\\n6 4\\n8 2\\n10 3\\n7 2\\n2 6\\n6 8\\n5 8\\n2 9\\n2 5\\n3 8\\n5 7\\n7 5\\n3 2\\n4 6\\n6 8\\n1 7\\n4 6\\n8 8\\n6 1\\n3 1\\n8 7\\n3 6\\n1 3\\n7 4\\n6 9\\n2 4\\n10 4\\n2 4\\n6 4\\n2 7\\n7 3\\n8 9\\n3 1\\n4 9\\n9 7\\n3 1\\n2 9\\n1 10\\n10 6\\n6 3\\n2 6\\n9 1\\n6 10\\n9 7\\n4 10\\n1 8\\n4 2\\n3 3\\n2 8\\n5 10\\n5 2\\n2 3\\n5 10\\n3 6\\n3 9\\n2 7\\n9 1\\n5 4\\n10 9\\n3 1\\n5 8\\n7 4\\n4 8\\n5 1\\n10 3\\n5 9\\n7 1\\n8 4\\n6 4\\n7 3\\n3 6\\n2 7\\n10 3\\n8 2\\n1 9\\n2 10\\n9 4\\n10 8\\n9 3\\n10 4\\n8 5\\n3 4\\n4 1\\n2 2\\n4 4\\n2 9\\n1 6\\n9 3\\n10 4\\n5 10\\n5 8\\n3 7\\n9 1\\n6 1\\n4 8\\n5 5\\n4 6\\n3 7\\n5 4\\n4 1\\n1 1\\n8 4\\n7 2\\n10 8\\n5 3\\n10 9\\n9 9\\n8 5\\n10 10\\n6 5\\n9 6\\n4 1\\n6 4\\n5 1\\n340\\n8 7\\n10 7\\n1 5\\n9 9\\n2 2\\n5 9\\n1 10\\n3 7\\n9 3\\n7 9\\n2 10\\n10 10\\n9 8\\n6 5\\n4 2\\n2 9\\n5 2\\n4 8\\n6 5\\n10 8\\n9 4\\n3 9\\n2 9\\n4 5\\n6 1\\n6 8\\n4 9\\n9 5\\n1 1\\n8 1\\n9 1\\n6 3\\n6 2\\n5 7\\n7 2\\n3 6\\n6 10\\n7 5\\n10 1\\n4 8\\n5 2\\n2 10\\n5 9\\n2 4\\n3 7\\n3 7\\n9 8\\n10 3\\n7 9\\n6 3\\n7 10\\n6 5\\n4 9\\n2 8\\n1 2\\n7 3\\n4 9\\n9 6\\n1 9\\n10 2\\n6 2\\n10 7\\n2 4\\n5 3\\n5 7\\n7 2\\n6 4\\n9 1\\n10 5\\n7 9\\n2 8\\n9 4\\n4 5\\n2 10\\n5 4\\n8 9\\n9 7\\n6 10\\n3 6\\n10 4\\n10 4\\n8 8\\n6 3\\n9 5\\n5 7\\n1 2\\n8 6\\n10 5\\n7 8\\n10 9\\n2 2\\n1 3\\n9 10\\n6 1\\n6 2\\n5 3\\n2 10\\n8 7\\n6 3\\n8 7\\n9 2\\n6 8\\n8 9\\n5 2\\n7 2\\n1 9\\n4 1\\n8 10\\n9 4\\n10 6\\n1 4\\n3 6\\n9 8\\n3 7\\n6 3\\n5 10\\n6 8\\n6 4\\n10 3\\n5 2\\n10 1\\n8 7\\n7 3\\n3 10\\n5 5\\n6 7\\n6 8\\n5 10\\n10 2\\n6 6\\n4 6\\n5 5\\n1 3\\n9 8\\n5 5\\n8 8\\n9 9\\n6 3\\n2 9\\n8 9\\n7 4\\n1 5\\n2 7\\n10 7\\n2 2\\n10 9\\n6 1\\n10 5\\n9 1\\n2 8\\n9 3\\n6 3\\n1 3\\n10 6\\n5 1\\n5 4\\n3 5\\n4 8\\n5 2\\n6 9\\n10 2\\n10 5\\n1 8\\n3 2\\n2 10\\n8 10\\n2 9\\n2 4\\n9 6\\n10 4\\n6 8\\n1 10\\n7 1\\n8 3\\n5 9\\n7 1\\n5 4\\n1 7\\n10 3\\n7 9\\n1 4\\n1 3\\n10 3\\n9 6\\n8 2\\n10 9\\n2 6\\n5 4\\n7 7\\n6 5\\n7 4\\n2 8\\n8 5\\n3 4\\n2 6\\n7 1\\n9 7\\n7 1\\n6 1\\n10 3\\n3 5\\n10 2\\n1 8\\n8 8\\n9 3\\n5 5\\n10 4\\n10 6\\n6 4\\n4 6\\n1 8\\n5 8\\n3 6\\n10 10\\n5 8\\n10 9\\n3 5\\n5 2\\n6 9\\n4 2\\n9 8\\n9 7\\n4 3\\n9 3\\n6 5\\n3 7\\n3 7\\n1 4\\n3 8\\n4 8\\n9 3\\n3 8\\n9 3\\n2 7\\n9 6\\n7 7\\n1 2\\n6 4\\n7 9\\n1 5\\n1 1\\n2 8\\n6 5\\n5 2\\n3 5\\n9 3\\n5 2\\n2 7\\n1 8\\n4 1\\n9 1\\n5 3\\n2 1\\n8 5\\n5 5\\n8 1\\n2 8\\n10 10\\n4 7\\n4 6\\n6 5\\n1 7\\n5 4\\n3 1\\n8 5\\n6 4\\n2 7\\n3 5\\n4 6\\n5 7\\n7 8\\n6 1\\n4 2\\n2 6\\n4 10\\n10 5\\n2 3\\n5 2\\n6 7\\n7 5\\n9 10\\n4 4\\n5 3\\n8 1\\n9 3\\n3 1\\n9 4\\n5 5\\n10 9\\n7 1\\n2 9\\n10 10\\n1 5\\n3 4\\n2 6\\n9 7\\n8 7\\n4 1\\n6 9\\n1 6\\n9 9\\n2 9\\n10 1\\n4 5\\n7 10\\n2 6\\n3 10\\n8 2\\n6 8\\n8 8\\n10 9\\n10 10\\n3 10\\n3 5\\n4 4\\n5 2\\n5 10\\n8 1\\n7 3\\n9 8\\n9 4\\n6 2\\n2 10\\n5 4\\n7 7\\n9 6\\n1 2\\n8 3\\n2 4\\n6 8\\n3 10\\n4 9\\n7 6\\n8 8\\n5 8\\n1 9\\n10 9\\n2 5\\n7 1\\n8 6\\n422\\n3 10\\n2 3\\n10 10\\n1 6\\n1 4\\n8 8\\n5 10\\n2 1\\n2 2\\n10 6\\n10 5\\n7 7\\n5 9\\n8 8\\n6 1\\n2 1\\n7 9\\n10 3\\n6 3\\n4 10\\n8 5\\n8 8\\n10 2\\n8 4\\n6 1\\n5 9\\n9 7\\n9 8\\n9 3\\n5 9\\n1 6\\n3 4\\n6 4\\n3 5\\n9 9\\n6 7\\n3 3\\n6 4\\n3 5\\n1 4\\n6 3\\n3 8\\n6 6\\n7 5\\n9 6\\n2 1\\n3 1\\n10 1\\n9 8\\n10 2\\n2 4\\n8 1\\n1 1\\n3 8\\n1 3\\n3 9\\n7 1\\n6 2\\n1 8\\n8 8\\n10 4\\n2 5\\n2 10\\n10 10\\n4 9\\n8 2\\n4 8\\n4 5\\n9 6\\n7 1\\n1 5\\n10 8\\n7 9\\n8 2\\n6 9\\n7 1\\n4 6\\n10 7\\n1 10\\n2 6\\n5 6\\n3 6\\n1 9\\n2 4\\n2 9\\n1 7\\n5 3\\n9 1\\n6 8\\n10 3\\n3 7\\n1 3\\n7 10\\n7 6\\n3 10\\n1 10\\n3 8\\n10 10\\n10 7\\n7 2\\n7 2\\n10 7\\n1 8\\n6 10\\n5 4\\n9 5\\n2 2\\n1 3\\n4 6\\n10 5\\n7 8\\n2 2\\n8 3\\n5 3\\n8 6\\n1 3\\n4 7\\n6 4\\n4 10\\n4 2\\n8 10\\n9 2\\n5 4\\n3 10\\n1 8\\n10 9\\n1 4\\n7 3\\n3 10\\n9 2\\n3 3\\n6 7\\n3 7\\n3 8\\n6 4\\n4 9\\n5 6\\n7 10\\n9 3\\n5 7\\n10 8\\n3 2\\n6 8\\n9 4\\n4 8\\n10 6\\n5 9\\n6 4\\n1 3\\n7 4\\n6 5\\n5 7\\n1 9\\n5 6\\n10 5\\n2 10\\n5 5\\n8 8\\n3 10\\n4 6\\n3 4\\n5 7\\n10 4\\n7 8\\n5 3\\n8 1\\n10 4\\n2 8\\n3 3\\n5 2\\n7 7\\n4 1\\n4 9\\n4 2\\n3 4\\n10 9\\n7 10\\n4 10\\n7 2\\n9 4\\n6 3\\n2 7\\n7 6\\n4 1\\n4 10\\n2 5\\n3 5\\n3 6\\n8 9\\n8 5\\n8 10\\n4 3\\n10 1\\n7 4\\n7 3\\n2 5\\n2 8\\n7 6\\n9 2\\n10 10\\n9 4\\n2 10\\n9 1\\n7 9\\n7 1\\n9 10\\n5 6\\n9 6\\n3 6\\n5 2\\n4 4\\n2 1\\n9 4\\n3 9\\n2 6\\n6 5\\n3 3\\n3 1\\n9 5\\n9 7\\n8 5\\n9 7\\n8 6\\n10 6\\n7 3\\n1 1\\n7 4\\n2 8\\n1 3\\n6 9\\n4 9\\n6 5\\n6 6\\n3 2\\n7 10\\n3 6\\n1 3\\n7 2\\n7 10\\n7 6\\n8 7\\n3 10\\n1 1\\n3 5\\n4 4\\n3 10\\n2 5\\n1 9\\n6 6\\n6 7\\n6 6\\n7 5\\n1 2\\n9 7\\n8 7\\n8 3\\n5 10\\n4 4\\n8 5\\n2 3\\n4 7\\n10 10\\n10 4\\n5 6\\n3 7\\n9 3\\n2 1\\n1 10\\n2 6\\n2 3\\n6 2\\n9 6\\n5 10\\n4 10\\n7 1\\n7 6\\n9 9\\n4 6\\n8 9\\n10 9\\n5 9\\n2 1\\n9 2\\n10 1\\n5 2\\n2 6\\n5 3\\n6 8\\n3 1\\n1 8\\n3 9\\n2 1\\n3 10\\n1 1\\n2 5\\n10 8\\n1 3\\n8 8\\n6 6\\n8 5\\n9 7\\n4 7\\n1 7\\n1 8\\n4 4\\n4 8\\n8 1\\n1 3\\n7 6\\n4 2\\n5 6\\n1 1\\n10 1\\n5 10\\n4 8\\n7 3\\n3 8\\n3 9\\n7 10\\n1 8\\n7 10\\n3 1\\n7 4\\n5 10\\n7 10\\n4 9\\n4 3\\n2 10\\n1 9\\n4 2\\n4 4\\n9 8\\n7 2\\n9 10\\n4 7\\n6 6\\n6 3\\n5 3\\n5 4\\n4 9\\n2 4\\n8 1\\n3 2\\n3 10\\n4 7\\n2 8\\n1 1\\n1 7\\n9 5\\n10 6\\n1 4\\n8 9\\n4 2\\n1 9\\n6 7\\n5 10\\n4 10\\n5 2\\n3 10\\n10 10\\n2 3\\n10 4\\n4 3\\n10 8\\n6 10\\n1 2\\n2 2\\n9 8\\n4 7\\n8 1\\n1 10\\n7 6\\n5 7\\n3 1\\n6 6\\n4 5\\n8 10\\n6 3\\n4 4\\n10 1\\n7 10\\n2 10\\n7 6\\n1 8\\n1 9\\n9 2\\n3 9\\n8 10\\n10 9\\n5 4\\n6 10\\n4 9\\n6 8\\n1 5\\n2 3\\n6 3\\n1 9\\n6 9\\n8 1\\n8 1\\n6 8\\n5 7\\n7 1\\n2 6\\n4 9\\n10 6\\n7 4\\n7 7\\n3 8\\n7 9\\n6 7\\n3 4\\n2 2\\n5 10\\n9 4\\n1 4\\n10 10\\n6 10\\n4 5\\n9 9\\n9 4\\n4 7\\n752\\n5 7\\n9 2\\n9 2\\n7 2\\n6 4\\n1 9\\n2 2\\n3 4\\n10 6\\n4 10\\n8 4\\n2 6\\n5 10\\n5 1\\n4 7\\n7 7\\n8 3\\n7 9\\n10 7\\n10 7\\n3 2\\n9 5\\n9 3\\n10 7\\n5 4\\n9 10\\n2 5\\n10 9\\n9 3\\n5 1\\n4 2\\n10 8\\n3 5\\n2 4\\n9 3\\n2 1\\n6 4\\n2 3\\n9 6\\n9 9\\n2 6\\n2 1\\n7 2\\n2 2\\n7 4\\n5 1\\n5 6\\n2 7\\n8 9\\n8 7\\n6 2\\n9 2\\n9 5\\n1 8\\n5 7\\n1 10\\n9 5\\n6 2\\n2 2\\n1 2\\n5 5\\n6 4\\n4 9\\n9 4\\n1 6\\n2 9\\n5 3\\n4 3\\n8 7\\n1 4\\n7 1\\n7 1\\n8 7\\n2 6\\n2 6\\n7 6\\n3 10\\n1 7\\n9 3\\n4 10\\n5 7\\n1 7\\n10 2\\n8 9\\n10 1\\n6 10\\n10 8\\n10 10\\n6 2\\n7 4\\n7 9\\n5 7\\n6 4\\n2 10\\n2 2\\n1 3\\n4 1\\n2 5\\n4 5\\n10 1\\n6 5\\n9 2\\n7 4\\n1 9\\n9 3\\n6 3\\n5 2\\n2 2\\n3 5\\n1 7\\n3 3\\n9 3\\n9 5\\n10 10\\n10 6\\n7 5\\n3 7\\n2 7\\n8 9\\n3 5\\n1 8\\n7 5\\n5 7\\n10 6\\n1 7\\n7 1\\n5 8\\n4 4\\n9 6\\n4 6\\n7 5\\n3 2\\n9 4\\n2 10\\n5 2\\n3 8\\n7 10\\n5 8\\n7 5\\n2 2\\n1 3\\n9 3\\n10 8\\n8 2\\n10 8\\n1 2\\n10 4\\n5 8\\n6 1\\n10 8\\n9 6\\n10 2\\n2 4\\n1 10\\n6 4\\n2 7\\n9 10\\n4 10\\n7 3\\n5 7\\n7 4\\n5 5\\n7 4\\n6 6\\n8 6\\n10 1\\n7 6\\n3 9\\n9 6\\n9 1\\n6 4\\n4 2\\n4 9\\n6 6\\n2 1\\n8 10\\n10 2\\n8 7\\n3 1\\n3 7\\n4 2\\n10 9\\n7 7\\n6 9\\n2 2\\n5 3\\n8 3\\n8 7\\n3 6\\n3 10\\n4 3\\n5 5\\n10 5\\n9 8\\n2 1\\n3 8\\n5 5\\n2 6\\n4 10\\n2 3\\n4 5\\n6 5\\n4 4\\n4 3\\n5 10\\n10 9\\n7 8\\n10 10\\n4 3\\n1 8\\n6 2\\n6 1\\n4 6\\n10 2\\n5 5\\n10 5\\n6 5\\n2 2\\n2 5\\n1 10\\n10 5\\n7 8\\n4 10\\n9 2\\n2 2\\n3 3\\n5 2\\n7 3\\n6 8\\n3 1\\n8 7\\n2 1\\n6 1\\n2 3\\n2 2\\n7 3\\n4 1\\n5 5\\n2 10\\n10 7\\n8 10\\n2 6\\n4 8\\n3 1\\n4 10\\n1 3\\n4 5\\n5 6\\n6 9\\n3 7\\n9 9\\n7 6\\n1 3\\n8 2\\n2 10\\n9 3\\n5 7\\n3 3\\n2 5\\n2 10\\n2 3\\n9 1\\n3 5\\n3 4\\n7 9\\n10 6\\n3 9\\n6 4\\n7 7\\n7 8\\n7 3\\n5 6\\n8 10\\n10 6\\n3 10\\n5 9\\n4 3\\n4 7\\n9 5\\n7 1\\n1 1\\n9 9\\n3 5\\n3 4\\n6 3\\n10 10\\n9 4\\n6 1\\n10 7\\n8 1\\n2 4\\n10 6\\n2 9\\n9 8\\n5 10\\n10 3\\n2 2\\n10 9\\n6 6\\n10 2\\n3 2\\n5 4\\n6 7\\n4 1\\n9 7\\n6 2\\n5 5\\n8 6\\n1 6\\n9 7\\n10 1\\n4 7\\n4 3\\n5 4\\n8 4\\n1 1\\n1 8\\n5 8\\n3 3\\n2 2\\n8 1\\n2 7\\n6 2\\n3 5\\n7 5\\n8 7\\n2 9\\n1 2\\n7 8\\n10 5\\n8 2\\n2 6\\n2 2\\n1 3\\n9 2\\n9 1\\n3 8\\n6 2\\n2 7\\n7 9\\n10 1\\n4 4\\n6 2\\n6 7\\n3 6\\n1 10\\n8 8\\n9 10\\n2 9\\n4 4\\n6 3\\n5 4\\n4 3\\n7 2\\n8 10\\n7 5\\n5 7\\n8 4\\n1 5\\n1 3\\n9 8\\n9 9\\n10 10\\n7 8\\n8 6\\n10 5\\n1 10\\n3 5\\n7 7\\n9 4\\n9 1\\n5 4\\n5 5\\n7 1\\n5 7\\n9 8\\n9 3\\n2 5\\n2 3\\n10 8\\n7 5\\n8 8\\n4 1\\n5 6\\n8 9\\n6 6\\n7 7\\n9 5\\n8 6\\n1 4\\n5 7\\n4 7\\n10 2\\n8 4\\n6 8\\n7 1\\n8 1\\n9 5\\n2 9\\n7 1\\n10 10\\n9 8\\n9 2\\n10 3\\n4 5\\n9 3\\n10 5\\n6 2\\n4 1\\n8 10\\n8 5\\n9 1\\n9 7\\n6 5\\n5 2\\n1 10\\n5 9\\n6 9\\n2 4\\n1 5\\n8 9\\n4 6\\n10 4\\n10 6\\n7 4\\n4 10\\n3 2\\n5 10\\n9 8\\n2 10\\n1 5\\n1 6\\n6 4\\n9 10\\n7 6\\n4 7\\n2 1\\n5 6\\n5 3\\n3 9\\n5 3\\n8 1\\n5 3\\n7 10\\n5 4\\n7 7\\n10 8\\n4 3\\n9 5\\n5 7\\n6 5\\n3 4\\n5 5\\n1 3\\n8 3\\n9 3\\n6 8\\n1 1\\n4 6\\n5 2\\n3 10\\n9 8\\n5 7\\n7 5\\n10 4\\n2 7\\n2 7\\n8 7\\n1 8\\n6 2\\n4 10\\n6 3\\n5 3\\n6 2\\n9 7\\n2 3\\n6 5\\n9 2\\n4 1\\n8 1\\n10 6\\n8 9\\n2 8\\n5 6\\n7 9\\n4 1\\n1 5\\n9 3\\n10 8\\n1 7\\n10 7\\n8 9\\n1 9\\n5 1\\n6 9\\n10 7\\n5 4\\n7 7\\n1 8\\n8 4\\n3 10\\n5 8\\n10 10\\n7 8\\n7 3\\n6 5\\n1 9\\n9 2\\n6 5\\n7 4\\n2 5\\n1 6\\n4 2\\n4 7\\n3 9\\n10 2\\n9 4\\n3 5\\n2 6\\n3 5\\n7 2\\n10 7\\n4 5\\n4 7\\n5 2\\n3 4\\n6 5\\n4 5\\n1 5\\n3 7\\n9 1\\n4 6\\n7 2\\n6 4\\n6 7\\n9 6\\n5 7\\n8 3\\n1 7\\n7 8\\n5 5\\n5 6\\n9 3\\n4 10\\n7 9\\n5 6\\n2 4\\n1 9\\n6 4\\n9 5\\n9 3\\n10 2\\n2 4\\n6 7\\n7 6\\n1 7\\n2 5\\n3 9\\n4 1\\n5 3\\n9 9\\n10 4\\n10 5\\n8 7\\n10 6\\n10 3\\n8 6\\n4 8\\n4 10\\n4 2\\n9 10\\n3 5\\n4 2\\n6 1\\n8 9\\n1 5\\n2 10\\n1 10\\n3 5\\n6 9\\n6 6\\n2 8\\n7 7\\n4 10\\n7 10\\n8 6\\n3 6\\n2 5\\n7 5\\n8 1\\n6 3\\n6 7\\n3 2\\n1 9\\n6 6\\n10 10\\n1 7\\n6 6\\n2 1\\n2 5\\n8 4\\n4 7\\n9 7\\n4 6\\n3 2\\n9 5\\n5 7\\n3 4\\n9 6\\n2 10\\n4 4\\n8 7\\n2 6\\n7 3\\n8 5\\n8 10\\n7 6\\n2 4\\n9 9\\n9 7\\n3 8\\n4 1\\n1 6\\n5 5\\n5 6\\n2 3\\n3 2\\n10 4\\n4 5\\n8 1\\n6 6\\n7 10\\n1 10\\n1 9\\n6 3\\n1 4\\n5 4\\n9 1\\n1 1\\n3 5\\n10 9\\n6 2\\n7 9\\n3 2\\n4 7\\n2 4\\n5 4\\n10 7\\n2 2\\n10 8\\n3 1\\n7 6\\n6 9\\n3 1\\n4 4\\n6 1\\n8 10\\n3 4\\n9 3\\n5 4\\n8 6\\n6 10\\n2 10\\n3 2\\n3 4\\n3 5\\n4 6\\n6 1\\n6 6\\n3 9\\n1 10\\n10 10\\n9 1\\n3 2\\n4 10\\n2 4\\n5 5\\n3 9\\n1 6\\n9 2\\n1 7\\n5 4\\n6 1\\n10 7\\n6 1\\n4 9\\n1 2\\n4 10\\n1 9\\n3 1\\n5 2\\n6 9\\n1 10\\n4 7\\n10 1\\n8 2\\n7 1\\n2 6\\n8 6\\n10 7\\n9 7\\n2 3\\n2 7\\n7 1\\n8 2\\n2 4\\n8 7\\n8 5\\n1 4\\n3 9\\n4 9\\n3 2\\n1 7\\n6 3\\n6 5\\n5 10\\n8 8\\n2 10\\n5 2\\n7 1\\n9 8\\n6 7\\n4 1\\n1 7\\n2 5\\n5 4\\n9 10\\n6 3\\n7 1\\n2 8\\n1 7\\n9 10\\n5 7\\n7 10\\n3 10\\n4 8\\n1 1\\n2 3\\n4 1\\n10 8\\n2 3\\n9 2\\n10 4\\n9 9\\n4 6\\n2 4\\n1 4\\n8 1\\n9 4\\n10 3\\n7 9\\n6 9\\n39\\n7 9\\n6 2\\n10 5\\n1 7\\n4 9\\n4 5\\n8 5\\n6 3\\n1 8\\n5 1\\n6 4\\n7 9\\n3 1\\n8 2\\n6 2\\n6 5\\n7 6\\n3 10\\n6 7\\n6 8\\n7 7\\n6 9\\n9 7\\n1 6\\n9 9\\n6 9\\n3 10\\n3 7\\n8 8\\n5 2\\n10 5\\n6 6\\n2 10\\n10 7\\n9 6\\n5 9\\n5 3\\n9 1\\n9 9\\n320\\n2 6\\n10 8\\n3 4\\n9 6\\n4 2\\n2 2\\n5 4\\n9 4\\n10 8\\n8 6\\n10 10\\n7 4\\n6 1\\n5 10\\n1 3\\n1 8\\n6 7\\n1 4\\n8 9\\n9 4\\n3 3\\n1 8\\n8 2\\n4 4\\n1 2\\n9 7\\n6 3\\n6 4\\n2 2\\n2 9\\n3 1\\n8 2\\n6 4\\n3 1\\n3 7\\n5 8\\n6 5\\n10 6\\n10 2\\n4 7\\n6 4\\n8 7\\n9 4\\n5 4\\n9 1\\n3 2\\n6 7\\n4 5\\n4 4\\n6 7\\n9 2\\n10 9\\n9 6\\n2 2\\n8 4\\n2 7\\n7 10\\n1 1\\n6 9\\n1 5\\n4 9\\n6 4\\n3 9\\n4 6\\n10 7\\n5 8\\n5 10\\n7 3\\n7 2\\n6 4\\n4 9\\n10 3\\n10 5\\n7 6\\n7 4\\n6 9\\n9 2\\n8 6\\n9 5\\n9 1\\n7 3\\n6 8\\n9 7\\n3 4\\n8 5\\n7 9\\n4 10\\n5 8\\n10 6\\n2 6\\n1 7\\n9 4\\n5 10\\n10 1\\n2 10\\n1 4\\n9 1\\n9 2\\n2 6\\n4 3\\n2 8\\n1 6\\n9 10\\n6 8\\n8 9\\n9 1\\n2 8\\n3 8\\n8 10\\n4 6\\n9 6\\n4 10\\n10 6\\n2 4\\n6 3\\n10 3\\n7 7\\n1 8\\n8 10\\n10 1\\n6 5\\n8 8\\n5 9\\n7 1\\n7 5\\n10 4\\n5 9\\n8 2\\n6 1\\n5 2\\n9 9\\n3 5\\n3 3\\n6 4\\n4 2\\n10 9\\n2 2\\n9 9\\n1 1\\n1 5\\n1 7\\n10 1\\n10 2\\n2 1\\n5 7\\n9 6\\n2 7\\n1 6\\n5 10\\n1 8\\n4 5\\n10 2\\n7 4\\n4 1\\n9 7\\n4 1\\n3 10\\n2 8\\n3 10\\n4 3\\n10 9\\n7 9\\n9 1\\n1 5\\n2 6\\n1 9\\n5 4\\n8 9\\n8 6\\n6 1\\n5 3\\n9 8\\n6 5\\n1 4\\n4 9\\n2 1\\n6 2\\n1 10\\n6 9\\n8 4\\n4 9\\n1 3\\n10 5\\n2 2\\n1 2\\n5 2\\n4 10\\n6 1\\n1 5\\n6 7\\n6 2\\n5 5\\n9 6\\n3 7\\n5 2\\n6 6\\n6 5\\n7 10\\n3 10\\n4 5\\n8 4\\n7 5\\n5 2\\n4 8\\n5 3\\n10 7\\n6 7\\n3 10\\n8 6\\n6 7\\n3 9\\n1 7\\n4 8\\n7 10\\n5 5\\n4 10\\n10 1\\n3 7\\n6 5\\n8 9\\n1 3\\n4 9\\n4 8\\n7 8\\n1 10\\n2 9\\n8 4\\n4 7\\n2 2\\n9 5\\n2 4\\n7 3\\n7 3\\n4 5\\n6 9\\n4 7\\n1 4\\n7 1\\n4 3\\n1 2\\n3 4\\n2 8\\n3 4\\n10 4\\n3 8\\n3 7\\n10 5\\n6 10\\n1 10\\n5 6\\n1 10\\n4 4\\n6 3\\n2 4\\n5 3\\n9 9\\n7 4\\n3 1\\n7 10\\n3 9\\n7 6\\n9 4\\n3 6\\n7 1\\n1 10\\n3 9\\n4 8\\n1 9\\n6 5\\n6 7\\n5 10\\n4 8\\n10 6\\n9 2\\n5 2\\n4 3\\n1 8\\n6 2\\n1 4\\n2 1\\n2 3\\n3 10\\n2 8\\n3 3\\n6 3\\n2 10\\n2 1\\n6 7\\n3 3\\n1 5\\n8 2\\n3 6\\n8 10\\n9 4\\n6 9\\n7 8\\n7 6\\n7 10\\n10 10\\n10 7\\n3 5\\n8 2\\n7 5\\n2 1\\n2 4\\n5 6\\n6 2\\n4 1\\n1 3\\n1 10\\n2 1\\n9 5\\n4 9\\n5 8\\n6 3\\n8 5\\n7 3\\n9 4\\n6 5\\n10 10\\n257\\n7 2\\n10 4\\n4 6\\n2 10\\n6 10\\n2 8\\n1 1\\n2 2\\n10 6\\n6 10\\n3 5\\n3 10\\n8 10\\n3 1\\n9 1\\n4 10\\n6 5\\n7 4\\n4 2\\n3 2\\n9 5\\n9 1\\n4 7\\n2 5\\n1 4\\n7 4\\n8 10\\n6 9\\n2 4\\n9 4\\n3 1\\n3 2\\n6 1\\n7 9\\n10 9\\n9 3\\n9 8\\n3 2\\n6 1\\n6 7\\n1 10\\n8 4\\n7 9\\n9 8\\n4 8\\n4 9\\n1 6\\n7 6\\n10 4\\n2 4\\n7 4\\n3 10\\n6 10\\n6 8\\n5 10\\n8 6\\n4 5\\n5 3\\n6 7\\n9 3\\n2 6\\n7 2\\n7 9\\n5 1\\n5 8\\n9 8\\n10 9\\n6 3\\n6 2\\n7 2\\n1 4\\n3 5\\n2 9\\n5 1\\n1 7\\n3 3\\n2 9\\n3 9\\n2 8\\n3 9\\n5 10\\n9 5\\n9 6\\n3 7\\n8 1\\n10 9\\n7 7\\n6 1\\n6 8\\n7 6\\n10 3\\n1 4\\n7 9\\n5 10\\n4 3\\n2 2\\n1 8\\n5 2\\n9 4\\n2 10\\n1 5\\n8 9\\n1 9\\n1 10\\n4 10\\n3 9\\n8 7\\n8 1\\n8 10\\n8 6\\n6 6\\n1 7\\n9 1\\n10 1\\n6 9\\n8 10\\n5 4\\n7 4\\n6 8\\n3 5\\n2 7\\n4 4\\n8 1\\n2 8\\n8 4\\n3 7\\n2 9\\n3 3\\n4 1\\n10 1\\n9 2\\n3 3\\n10 6\\n6 4\\n4 1\\n4 10\\n8 2\\n4 1\\n3 2\\n6 9\\n4 5\\n4 7\\n7 9\\n3 5\\n3 3\\n8 4\\n3 7\\n4 7\\n8 7\\n8 1\\n3 10\\n3 5\\n4 9\\n5 9\\n8 5\\n6 6\\n8 5\\n1 10\\n3 9\\n9 3\\n6 7\\n2 2\\n9 9\\n2 6\\n2 5\\n6 7\\n3 5\\n3 3\\n10 5\\n3 1\\n6 9\\n7 5\\n10 2\\n9 6\\n6 8\\n4 9\\n1 10\\n10 5\\n6 9\\n6 6\\n1 6\\n7 3\\n2 5\\n9 6\\n7 10\\n3 5\\n3 6\\n6 4\\n9 1\\n5 5\\n4 9\\n9 3\\n10 2\\n9 8\\n4 6\\n3 2\\n10 10\\n9 9\\n6 3\\n9 3\\n1 6\\n4 10\\n4 4\\n3 5\\n7 2\\n3 9\\n4 9\\n3 6\\n2 4\\n5 9\\n3 3\\n8 6\\n5 9\\n10 4\\n4 1\\n5 8\\n3 1\\n8 2\\n1 8\\n8 7\\n8 3\\n10 8\\n4 10\\n1 9\\n7 4\\n3 2\\n7 5\\n2 2\\n3 10\\n3 5\\n6 9\\n3 4\\n8 7\\n5 5\\n6 3\\n1 9\\n9 7\\n5 3\\n1 3\\n7 1\\n1 9\\n2 6\\n10 1\\n1 10\\n7 6\\n2 1\\n7 3\\n6 8\\n8 2\\n1 1\\n2 7\\n6 7\\n6 2\\n6 1\\n3 7\\n6 5\\n8 2\\n314\\n9 9\\n1 1\\n7 9\\n4 2\\n3 6\\n6 3\\n9 2\\n9 10\\n5 7\\n3 5\\n3 5\\n7 3\\n5 9\\n3 5\\n4 6\\n7 5\\n2 1\\n5 3\\n6 10\\n9 1\\n5 6\\n2 2\\n5 9\\n8 1\\n9 7\\n6 2\\n1 7\\n8 6\\n10 10\\n6 1\\n4 7\\n1 4\\n9 9\\n9 1\\n1 3\\n10 9\\n2 4\\n7 6\\n2 8\\n9 6\\n9 7\\n4 10\\n5 1\\n4 10\\n2 3\\n1 7\\n7 2\\n2 7\\n6 9\\n5 5\\n2 10\\n1 9\\n1 1\\n2 2\\n3 8\\n6 3\\n6 10\\n10 9\\n3 4\\n5 4\\n10 7\\n6 4\\n5 6\\n8 10\\n8 9\\n7 3\\n6 8\\n5 4\\n7 9\\n2 10\\n3 10\\n2 5\\n1 10\\n3 9\\n8 1\\n8 5\\n2 7\\n9 2\\n3 1\\n10 7\\n3 8\\n2 3\\n3 4\\n5 3\\n10 9\\n4 4\\n7 6\\n6 5\\n4 6\\n7 1\\n2 1\\n1 5\\n10 7\\n4 5\\n6 1\\n5 5\\n5 5\\n7 3\\n7 1\\n5 2\\n9 8\\n6 3\\n1 7\\n10 3\\n8 4\\n4 10\\n4 8\\n7 9\\n8 4\\n4 5\\n5 5\\n10 1\\n1 9\\n4 3\\n6 2\\n7 6\\n9 5\\n4 10\\n2 1\\n10 7\\n10 5\\n8 9\\n10 7\\n3 3\\n10 10\\n6 8\\n2 3\\n6 10\\n5 1\\n5 7\\n7 1\\n7 2\\n8 5\\n9 7\\n3 3\\n1 8\\n6 2\\n6 7\\n4 6\\n9 4\\n7 8\\n6 10\\n7 4\\n8 7\\n2 1\\n6 4\\n8 6\\n3 1\\n3 7\\n6 2\\n1 9\\n1 3\\n1 9\\n3 1\\n5 1\\n10 4\\n3 4\\n5 3\\n5 6\\n8 5\\n9 4\\n9 8\\n9 1\\n4 6\\n3 3\\n4 8\\n8 5\\n1 10\\n3 2\\n6 8\\n4 1\\n6 3\\n1 2\\n6 5\\n2 4\\n10 2\\n6 5\\n7 6\\n10 2\\n8 6\\n7 5\\n6 6\\n3 2\\n6 1\\n7 10\\n9 2\\n4 10\\n8 10\\n6 8\\n3 3\\n3 10\\n8 3\\n5 9\\n6 3\\n1 3\\n1 4\\n7 8\\n7 6\\n6 5\\n10 6\\n7 5\\n4 3\\n7 7\\n2 2\\n8 6\\n1 8\\n5 8\\n2 2\\n9 2\\n2 8\\n1 3\\n7 9\\n9 10\\n1 4\\n1 2\\n3 7\\n7 8\\n10 6\\n1 1\\n2 3\\n1 4\\n2 7\\n10 5\\n10 3\\n6 10\\n9 3\\n3 7\\n1 7\\n2 10\\n2 4\\n3 10\\n10 8\\n10 7\\n2 7\\n6 4\\n1 5\\n5 9\\n3 7\\n6 6\\n2 1\\n6 2\\n4 3\\n7 1\\n6 2\\n1 3\\n3 5\\n10 6\\n2 10\\n4 4\\n8 2\\n7 3\\n1 6\\n7 9\\n2 1\\n4 9\\n5 7\\n9 3\\n7 4\\n1 8\\n5 5\\n5 7\\n6 1\\n2 6\\n1 2\\n4 6\\n7 2\\n3 6\\n6 5\\n7 3\\n8 5\\n1 4\\n6 3\\n5 9\\n10 2\\n1 9\\n8 3\\n6 3\\n4 7\\n10 5\\n5 2\\n2 10\\n4 7\\n10 6\\n3 1\\n2 7\\n10 9\\n9 10\\n5 1\\n9 7\\n8 5\\n1 6\\n6 5\\n10 7\\n2 1\\n7 10\\n8 2\\n4 4\\n1 4\\n8 7\\n6 7\\n10 4\\n7 1\\n7 7\\n4 10\\n5 3\\n8 6\\n4 4\\n1 3\\n5 3\\n2 5\\n5 10\\n10 4\\n10 7\\n2 4\\n589\\n1 10\\n9 2\\n3 7\\n3 10\\n8 9\\n7 2\\n7 8\\n2 9\\n3 8\\n3 2\\n2 1\\n8 3\\n1 7\\n10 3\\n9 1\\n2 4\\n4 3\\n6 8\\n4 6\\n2 3\\n6 1\\n1 2\\n9 10\\n3 8\\n5 5\\n2 10\\n4 4\\n3 5\\n2 4\\n10 10\\n7 5\\n4 6\\n9 3\\n10 1\\n5 4\\n4 2\\n5 3\\n4 8\\n10 1\\n10 7\\n9 3\\n10 1\\n5 1\\n6 3\\n1 9\\n1 6\\n6 6\\n2 2\\n8 10\\n1 3\\n3 5\\n5 9\\n7 2\\n2 7\\n9 4\\n8 9\\n4 2\\n3 7\\n6 4\\n10 9\\n4 10\\n5 8\\n7 2\\n7 7\\n2 6\\n8 2\\n8 5\\n4 4\\n6 3\\n3 2\\n4 2\\n2 2\\n9 5\\n5 1\\n3 10\\n2 6\\n10 1\\n4 3\\n9 2\\n2 1\\n8 1\\n7 6\\n5 6\\n8 10\\n7 8\\n5 2\\n6 8\\n9 9\\n1 2\\n5 9\\n8 3\\n1 6\\n2 5\\n1 1\\n8 9\\n1 4\\n3 5\\n4 5\\n5 4\\n2 7\\n7 8\\n3 7\\n1 8\\n4 8\\n8 4\\n8 5\\n4 6\\n6 10\\n2 7\\n7 6\\n10 5\\n10 10\\n5 2\\n2 4\\n5 7\\n5 10\\n5 2\\n10 5\\n4 1\\n5 8\\n7 3\\n6 10\\n2 5\\n1 3\\n5 7\\n10 1\\n8 5\\n4 7\\n8 7\\n10 10\\n7 2\\n4 4\\n9 10\\n2 2\\n6 8\\n2 8\\n3 9\\n2 7\\n9 9\\n8 10\\n3 5\\n6 4\\n2 4\\n5 2\\n8 5\\n4 4\\n6 9\\n1 7\\n9 8\\n8 9\\n8 8\\n2 7\\n1 9\\n1 8\\n6 2\\n8 2\\n8 4\\n9 4\\n7 7\\n3 3\\n8 7\\n2 10\\n5 9\\n6 1\\n2 3\\n10 3\\n6 5\\n1 9\\n1 8\\n3 1\\n9 5\\n4 8\\n2 4\\n2 7\\n6 4\\n6 8\\n8 6\\n4 7\\n5 3\\n8 7\\n4 10\\n7 7\\n7 8\\n6 7\\n5 10\\n4 5\\n7 7\\n10 1\\n8 1\\n3 4\\n2 7\\n8 8\\n10 6\\n3 4\\n9 9\\n6 6\\n2 1\\n7 7\\n3 1\\n9 10\\n10 2\\n4 10\\n9 4\\n3 2\\n5 10\\n9 4\\n6 8\\n2 1\\n8 7\\n8 2\\n4 5\\n7 3\\n5 9\\n8 2\\n1 8\\n10 1\\n5 8\\n10 8\\n1 10\\n8 9\\n1 1\\n10 9\\n7 5\\n9 10\\n4 1\\n1 9\\n6 5\\n1 8\\n6 8\\n5 6\\n7 1\\n1 6\\n8 8\\n9 3\\n5 1\\n4 1\\n3 10\\n1 4\\n4 2\\n2 7\\n10 4\\n9 4\\n9 1\\n2 6\\n5 9\\n1 6\\n6 1\\n8 8\\n2 5\\n4 10\\n1 2\\n4 7\\n8 8\\n5 9\\n8 4\\n8 10\\n2 1\\n9 5\\n3 2\\n8 4\\n8 3\\n10 1\\n9 2\\n9 2\\n6 2\\n7 8\\n6 8\\n1 5\\n6 9\\n3 2\\n10 4\\n3 2\\n9 2\\n10 10\\n8 6\\n5 7\\n3 3\\n2 2\\n3 9\\n8 1\\n1 6\\n1 1\\n3 6\\n6 7\\n3 4\\n1 9\\n10 2\\n10 7\\n1 3\\n9 3\\n4 6\\n5 2\\n6 10\\n7 9\\n2 3\\n10 10\\n2 5\\n3 9\\n5 2\\n7 7\\n8 3\\n4 8\\n4 2\\n3 6\\n7 1\\n6 5\\n1 8\\n10 8\\n1 1\\n10 8\\n6 8\\n6 3\\n2 8\\n1 2\\n7 2\\n5 5\\n7 2\\n8 8\\n7 7\\n1 1\\n3 7\\n9 9\\n10 9\\n5 3\\n9 2\\n5 6\\n5 7\\n9 6\\n9 7\\n8 7\\n4 7\\n5 1\\n2 1\\n4 9\\n7 3\\n9 7\\n5 10\\n5 2\\n5 6\\n10 10\\n8 8\\n4 5\\n6 3\\n1 9\\n9 3\\n9 2\\n8 10\\n9 5\\n1 5\\n1 7\\n10 4\\n5 3\\n7 7\\n7 8\\n1 4\\n10 6\\n2 5\\n3 2\\n10 7\\n4 4\\n5 3\\n7 4\\n6 9\\n9 4\\n7 7\\n3 7\\n1 2\\n9 10\\n1 10\\n5 10\\n10 1\\n2 1\\n3 1\\n10 2\\n7 10\\n3 9\\n1 5\\n10 4\\n1 9\\n3 1\\n10 6\\n3 1\\n3 10\\n4 1\\n10 6\\n3 8\\n1 6\\n2 9\\n2 5\\n3 9\\n8 9\\n6 7\\n3 4\\n9 3\\n5 8\\n9 1\\n9 6\\n7 8\\n7 8\\n10 5\\n1 5\\n5 9\\n10 2\\n9 1\\n3 9\\n3 2\\n3 5\\n4 4\\n2 9\\n5 3\\n1 5\\n10 2\\n1 10\\n8 9\\n3 1\\n4 9\\n7 10\\n4 2\\n10 10\\n3 5\\n10 8\\n1 6\\n9 4\\n3 6\\n5 6\\n4 2\\n1 3\\n2 7\\n8 3\\n9 4\\n6 8\\n8 1\\n7 10\\n5 2\\n8 2\\n5 2\\n7 9\\n3 7\\n1 8\\n5 6\\n8 1\\n1 9\\n2 8\\n10 2\\n6 9\\n4 4\\n4 2\\n4 1\\n7 7\\n2 2\\n7 4\\n8 8\\n10 9\\n10 8\\n2 10\\n8 7\\n8 9\\n9 8\\n3 2\\n3 1\\n3 6\\n3 1\\n5 9\\n8 8\\n8 2\\n8 10\\n1 3\\n1 5\\n8 7\\n10 2\\n1 5\\n1 8\\n6 3\\n3 1\\n6 4\\n8 3\\n3 9\\n6 10\\n2 3\\n1 8\\n8 5\\n1 9\\n2 4\\n9 4\\n7 5\\n6 5\\n1 1\\n8 8\\n1 8\\n2 6\\n4 2\\n5 4\\n4 10\\n3 4\\n7 7\\n3 5\\n3 9\\n2 6\\n8 5\\n8 2\\n6 6\\n5 3\\n6 1\\n9 2\\n9 2\\n5 10\\n10 8\\n4 5\\n9 4\\n1 4\\n3 7\\n6 1\\n10 8\\n3 1\\n10 4\\n1 7\\n8 1\\n5 2\\n1 5\\n4 9\\n8 4\\n6 5\\n7 4\\n7 5\\n8 2\\n3 3\\n2 5\\n5 8\\n3 7\\n4 3\\n5 8\\n10 9\\n4 8\\n1 8\\n7 4\\n9 1\\n6 2\\n7 9\\n4 5\\n9 2\\n1 3\\n5 9\\n5 5\\n3 1\\n7 10\\n4 1\\n3 3\\n8 2\\n8 9\\n2 5\\n10 7\\n7 5\\n6 2\\n4 4\\n8 9\\n10 7\\n4 9\\n1 2\\n8 9\\n1 10\\n4 6\\n6 7\\n7 5\\n3 3\\n6 3\\n4 8\\n4 2\\n4 3\\n7 10\\n3 5\\n1 10\\n6 6\\n1 10\\n10 10\\n4 8\\n6 10\\n9 4\\n2 7\\n10 10\\n7 4\\n1 4\\n7 9\\n1 5\\n10 2\\n8 4\\n3 3\\n6 5\\n2 10\\n10 8\\n224\\n4 2\\n10 10\\n4 1\\n3 2\\n8 5\\n6 6\\n9 8\\n10 7\\n9 5\\n8 8\\n8 2\\n6 1\\n9 6\\n6 6\\n8 5\\n7 5\\n7 8\\n4 4\\n8 6\\n7 4\\n4 9\\n5 8\\n7 10\\n3 2\\n1 5\\n7 6\\n3 6\\n6 8\\n10 5\\n4 4\\n1 9\\n8 5\\n7 2\\n2 2\\n7 4\\n1 6\\n10 4\\n7 4\\n6 4\\n3 4\\n5 5\\n7 8\\n10 2\\n10 7\\n1 2\\n3 6\\n6 7\\n6 3\\n8 10\\n2 5\\n1 5\\n2 3\\n10 5\\n3 3\\n8 7\\n1 4\\n4 3\\n7 9\\n6 6\\n2 9\\n9 1\\n5 4\\n6 2\\n3 3\\n9 10\\n5 4\\n1 10\\n8 8\\n7 9\\n3 9\\n8 3\\n7 1\\n4 3\\n9 8\\n4 10\\n5 4\\n9 4\\n1 9\\n6 5\\n10 2\\n6 10\\n6 1\\n6 9\\n10 1\\n9 9\\n2 6\\n7 4\\n9 2\\n9 7\\n7 8\\n9 4\\n6 9\\n2 10\\n4 3\\n3 9\\n5 1\\n2 5\\n4 10\\n7 1\\n6 2\\n7 6\\n7 6\\n7 2\\n6 6\\n8 4\\n7 2\\n6 7\\n1 5\\n2 7\\n6 6\\n6 2\\n9 10\\n8 5\\n8 6\\n2 10\\n5 8\\n3 9\\n6 3\\n7 3\\n4 8\\n2 4\\n5 4\\n5 4\\n6 1\\n2 8\\n6 3\\n3 9\\n10 10\\n3 7\\n2 1\\n9 7\\n2 4\\n2 3\\n9 3\\n6 4\\n5 8\\n3 3\\n2 3\\n6 9\\n7 7\\n3 8\\n2 9\\n1 4\\n10 7\\n6 10\\n5 1\\n6 1\\n6 5\\n3 8\\n5 9\\n1 1\\n9 5\\n2 4\\n9 1\\n7 5\\n10 8\\n10 9\\n7 2\\n10 5\\n2 2\\n8 1\\n6 2\\n9 1\\n6 1\\n5 3\\n10 10\\n6 1\\n7 10\\n5 4\\n3 4\\n5 7\\n8 1\\n10 9\\n8 5\\n4 4\\n4 6\\n3 5\\n7 9\\n2 10\\n4 2\\n7 9\\n6 2\\n3 2\\n5 9\\n1 4\\n1 10\\n6 10\\n3 2\\n4 7\\n2 10\\n5 7\\n10 2\\n10 4\\n1 10\\n8 7\\n8 7\\n7 1\\n6 2\\n8 10\\n2 9\\n1 9\\n4 3\\n5 2\\n5 5\\n4 4\\n1 5\\n2 4\\n10 4\\n9 5\\n7 9\\n7 7\\n9 3\\n5 7\\n7 5\\n9 2\\n3 5\\n8 8\\n6 5\\n10 8\\n7 1\\n8 2\\n3 3\\n1 9\\n8 8\\n660\\n8 8\\n5 2\\n8 6\\n8 7\\n1 2\\n4 5\\n8 8\\n4 2\\n1 6\\n10 5\\n10 10\\n7 6\\n9 3\\n1 9\\n2 8\\n8 10\\n7 10\\n4 6\\n6 7\\n2 6\\n10 6\\n3 2\\n10 3\\n9 3\\n4 4\\n5 3\\n4 9\\n5 8\\n6 4\\n9 10\\n9 5\\n10 7\\n2 9\\n10 6\\n10 7\\n5 5\\n3 8\\n3 3\\n1 3\\n4 9\\n8 7\\n1 6\\n1 8\\n7 5\\n7 8\\n3 7\\n3 5\\n8 1\\n5 5\\n1 3\\n9 2\\n3 5\\n5 7\\n4 1\\n7 8\\n10 4\\n6 7\\n9 1\\n5 8\\n3 2\\n2 7\\n5 1\\n3 1\\n1 6\\n3 2\\n2 7\\n9 6\\n5 8\\n1 10\\n10 2\\n4 7\\n3 10\\n2 5\\n8 9\\n5 9\\n4 10\\n8 9\\n1 2\\n5 1\\n8 6\\n2 5\\n5 5\\n1 8\\n10 8\\n6 6\\n8 10\\n1 7\\n6 9\\n9 9\\n8 9\\n6 8\\n1 5\\n2 2\\n2 1\\n4 4\\n9 8\\n1 5\\n4 6\\n5 3\\n2 8\\n4 9\\n1 9\\n2 2\\n1 4\\n7 1\\n10 3\\n1 6\\n7 3\\n10 8\\n6 3\\n5 2\\n1 8\\n9 6\\n3 3\\n8 5\\n5 5\\n7 3\\n8 3\\n1 5\\n8 3\\n2 9\\n1 6\\n8 8\\n7 9\\n4 1\\n10 6\\n5 9\\n3 3\\n10 9\\n3 3\\n10 10\\n7 2\\n2 1\\n9 1\\n7 3\\n3 8\\n10 10\\n7 4\\n6 2\\n3 10\\n5 3\\n9 10\\n3 6\\n9 3\\n10 6\\n4 6\\n6 8\\n4 8\\n1 8\\n5 4\\n4 4\\n3 9\\n5 6\\n5 5\\n8 2\\n9 5\\n9 7\\n9 1\\n4 9\\n1 5\\n9 1\\n8 4\\n4 2\\n2 9\\n10 5\\n5 3\\n2 2\\n9 9\\n8 2\\n6 10\\n1 6\\n6 9\\n4 6\\n5 4\\n7 3\\n3 8\\n9 10\\n8 6\\n5 6\\n8 4\\n7 3\\n10 1\\n7 8\\n8 6\\n6 5\\n3 9\\n3 3\\n1 4\\n4 6\\n4 7\\n1 7\\n2 9\\n3 10\\n1 7\\n7 8\\n6 6\\n3 10\\n7 10\\n9 9\\n5 3\\n10 10\\n6 6\\n2 4\\n5 8\\n4 8\\n1 3\\n8 3\\n3 2\\n6 7\\n5 10\\n5 1\\n10 1\\n9 7\\n7 9\\n5 8\\n7 2\\n7 5\\n2 2\\n10 1\\n4 9\\n2 9\\n4 9\\n4 6\\n9 4\\n7 9\\n9 6\\n9 9\\n7 9\\n4 1\\n10 7\\n8 5\\n2 1\\n10 4\\n6 9\\n4 2\\n9 3\\n3 3\\n4 3\\n10 3\\n8 8\\n6 9\\n7 6\\n1 3\\n1 2\\n5 6\\n4 5\\n4 8\\n4 2\\n2 3\\n8 2\\n1 10\\n6 7\\n9 7\\n4 2\\n10 10\\n4 10\\n8 8\\n7 1\\n6 3\\n10 7\\n10 10\\n9 2\\n9 5\\n10 10\\n2 9\\n2 10\\n9 5\\n6 7\\n7 1\\n7 5\\n7 2\\n10 5\\n5 10\\n10 6\\n8 10\\n7 9\\n9 10\\n5 7\\n7 5\\n10 9\\n3 3\\n2 4\\n3 2\\n5 8\\n1 6\\n1 6\\n2 6\\n4 3\\n8 10\\n5 1\\n3 1\\n10 4\\n10 1\\n6 2\\n6 8\\n1 2\\n10 5\\n3 8\\n7 5\\n4 3\\n4 10\\n6 1\\n9 5\\n10 1\\n6 2\\n4 8\\n2 9\\n2 8\\n3 2\\n8 3\\n5 3\\n3 10\\n5 9\\n7 3\\n4 9\\n4 2\\n8 10\\n8 6\\n1 6\\n9 6\\n7 5\\n1 5\\n8 1\\n4 3\\n5 3\\n7 4\\n1 7\\n8 8\\n8 6\\n4 10\\n5 9\\n4 7\\n6 2\\n10 1\\n1 4\\n8 7\\n3 2\\n9 4\\n5 7\\n2 6\\n5 4\\n6 7\\n4 6\\n7 10\\n4 2\\n4 1\\n4 3\\n3 6\\n9 4\\n6 9\\n1 9\\n4 5\\n3 9\\n2 4\\n5 3\\n3 8\\n3 10\\n10 7\\n5 7\\n8 10\\n5 1\\n1 4\\n9 6\\n4 3\\n7 5\\n6 10\\n9 2\\n1 5\\n7 4\\n5 8\\n5 4\\n1 8\\n1 1\\n1 10\\n3 10\\n10 6\\n8 4\\n1 1\\n8 7\\n3 2\\n5 6\\n2 1\\n7 6\\n6 2\\n5 2\\n1 2\\n5 1\\n6 3\\n7 3\\n1 6\\n3 4\\n8 9\\n6 4\\n4 7\\n5 8\\n1 8\\n5 10\\n6 2\\n7 10\\n8 1\\n1 8\\n6 2\\n10 6\\n5 3\\n7 9\\n4 2\\n10 1\\n3 4\\n6 4\\n6 4\\n4 4\\n2 1\\n5 3\\n2 5\\n4 5\\n5 9\\n10 7\\n9 6\\n5 9\\n2 4\\n5 6\\n8 1\\n4 8\\n2 9\\n4 8\\n10 6\\n4 7\\n8 8\\n7 4\\n7 2\\n3 5\\n6 1\\n2 10\\n1 6\\n8 2\\n8 4\\n4 8\\n7 3\\n7 5\\n1 10\\n6 2\\n4 8\\n6 1\\n3 10\\n5 1\\n9 5\\n8 8\\n8 6\\n1 10\\n1 1\\n7 4\\n8 9\\n2 2\\n10 8\\n10 7\\n6 10\\n10 8\\n7 5\\n2 1\\n10 6\\n1 1\\n9 5\\n9 6\\n6 6\\n10 8\\n4 6\\n6 1\\n2 10\\n6 1\\n3 6\\n7 4\\n1 7\\n3 3\\n4 5\\n10 1\\n8 2\\n5 9\\n3 8\\n9 4\\n5 2\\n2 1\\n3 5\\n3 6\\n2 8\\n1 7\\n4 1\\n9 7\\n10 4\\n7 2\\n6 3\\n5 9\\n9 4\\n9 8\\n1 6\\n5 5\\n6 2\\n8 6\\n2 7\\n4 2\\n5 6\\n8 4\\n1 10\\n7 1\\n4 5\\n4 3\\n3 8\\n10 10\\n4 2\\n5 8\\n7 4\\n3 4\\n2 4\\n2 1\\n9 3\\n8 5\\n5 1\\n8 10\\n9 1\\n10 10\\n9 4\\n3 8\\n1 8\\n9 3\\n1 10\\n5 6\\n9 2\\n5 9\\n10 9\\n1 2\\n10 1\\n8 8\\n5 8\\n1 9\\n3 6\\n4 4\\n1 6\\n10 8\\n4 4\\n7 6\\n2 7\\n6 4\\n10 1\\n10 5\\n6 10\\n2 6\\n4 7\\n3 7\\n1 6\\n7 2\\n6 1\\n4 8\\n8 2\\n2 3\\n5 3\\n6 7\\n4 1\\n9 5\\n9 1\\n3 6\\n9 10\\n7 6\\n9 10\\n10 2\\n2 6\\n2 6\\n10 10\\n7 2\\n3 1\\n9 8\\n6 8\\n9 10\\n7 1\\n1 5\\n2 7\\n5 1\\n6 9\\n10 2\\n7 6\\n9 1\\n10 2\\n8 8\\n6 7\\n1 1\\n10 6\\n8 5\\n10 4\\n2 7\\n7 1\\n2 5\\n1 10\\n2 7\\n3 4\\n5 1\\n3 5\\n3 9\\n9 2\\n5 9\\n3 1\\n9 7\\n5 6\\n8 6\\n8 5\\n9 4\\n8 10\\n5 1\\n6 3\\n9 1\\n5 10\\n8 3\\n1 10\\n3 10\\n8 4\\n7 3\\n5 3\\n9 10\\n5 5\\n3 9\\n7 1\\n3 6\\n9 1\\n4 4\\n5 9\\n8 2\\n3 8\\n5 5\\n8 8\\n2 8\\n8 4\\n3 10\\n3 5\\n2 6\\n1 1\\n4 6\\n7 8\\n7 1\\n8 10\\n7 4\\n8 3\\n6 8\\n7 2\\n2 1\\n6 7\\n8 9\\n6 10\\n4 10\\n7 4\\n9 10\\n2 3\\n3 4\\n8 8\\n2 8\\n9 3\\n5 9\\n9 10\\n7 8\\n3 7\\n7 7\\n3 8\\n6 3\\n7 9\\n59\\n4 8\\n1 3\\n7 8\\n2 9\\n5 2\\n9 6\\n9 7\\n2 1\\n3 5\\n4 3\\n1 1\\n9 8\\n3 9\\n3 2\\n5 4\\n2 3\\n1 9\\n1 3\\n4 6\\n2 8\\n3 4\\n2 6\\n6 7\\n9 6\\n5 8\\n1 10\\n2 8\\n2 4\\n1 5\\n9 7\\n10 8\\n9 1\\n8 2\\n5 3\\n4 9\\n8 6\\n4 4\\n8 8\\n3 8\\n9 4\\n7 1\\n4 5\\n4 10\\n4 6\\n10 9\\n7 3\\n2 10\\n10 4\\n9 1\\n4 9\\n2 10\\n7 5\\n1 4\\n3 7\\n8 9\\n9 6\\n4 8\\n3 8\\n1 4\\n700\\n1 9\\n3 2\\n6 4\\n10 4\\n1 5\\n3 6\\n6 7\\n3 5\\n9 3\\n2 9\\n9 7\\n3 1\\n7 10\\n4 3\\n9 3\\n9 10\\n9 7\\n6 10\\n10 7\\n5 2\\n8 4\\n5 8\\n5 2\\n6 7\\n9 6\\n8 2\\n9 1\\n6 6\\n7 5\\n6 4\\n9 10\\n4 7\\n2 9\\n6 4\\n6 10\\n4 3\\n6 8\\n9 7\\n9 10\\n2 1\\n5 1\\n3 4\\n1 5\\n2 2\\n2 10\\n9 4\\n8 10\\n9 7\\n9 5\\n8 10\\n5 7\\n4 2\\n1 3\\n6 5\\n6 9\\n4 1\\n6 5\\n1 7\\n7 4\\n6 2\\n7 3\\n7 3\\n6 9\\n3 9\\n1 5\\n9 3\\n5 2\\n1 8\\n2 3\\n5 4\\n8 4\\n3 7\\n10 3\\n7 5\\n10 8\\n10 6\\n6 5\\n4 7\\n7 10\\n8 2\\n4 9\\n10 5\\n8 8\\n9 4\\n8 5\\n5 10\\n9 9\\n2 3\\n7 2\\n1 3\\n1 5\\n1 2\\n6 2\\n7 1\\n6 6\\n2 5\\n3 5\\n6 2\\n6 10\\n3 5\\n2 5\\n5 2\\n3 8\\n6 9\\n9 9\\n3 2\\n4 3\\n1 2\\n9 4\\n1 8\\n8 10\\n10 8\\n1 4\\n2 2\\n10 1\\n5 2\\n6 3\\n2 7\\n5 5\\n6 8\\n10 7\\n3 10\\n9 3\\n5 9\\n5 3\\n4 6\\n2 3\\n10 10\\n7 5\\n3 9\\n8 6\\n10 9\\n7 9\\n5 5\\n10 2\\n6 5\\n8 8\\n6 4\\n8 7\\n7 2\\n3 1\\n9 8\\n2 5\\n1 5\\n6 10\\n5 3\\n6 9\\n5 10\\n5 1\\n3 5\\n7 4\\n10 7\\n3 6\\n2 2\\n7 4\\n6 2\\n1 9\\n3 10\\n2 3\\n3 2\\n4 10\\n7 3\\n4 10\\n3 1\\n9 7\\n2 4\\n8 9\\n7 7\\n3 7\\n4 3\\n6 10\\n4 7\\n9 6\\n5 6\\n4 9\\n10 4\\n9 1\\n1 5\\n5 8\\n1 10\\n10 3\\n4 10\\n3 1\\n5 10\\n6 8\\n10 4\\n1 9\\n3 1\\n3 6\\n1 7\\n8 8\\n2 4\\n9 10\\n7 6\\n4 8\\n2 4\\n2 6\\n4 5\\n1 2\\n4 8\\n4 6\\n5 3\\n4 6\\n5 3\\n10 2\\n6 5\\n10 7\\n3 1\\n4 3\\n9 2\\n5 10\\n8 9\\n10 3\\n10 6\\n6 4\\n10 3\\n2 4\\n6 6\\n1 8\\n6 1\\n8 3\\n4 10\\n7 8\\n1 1\\n5 6\\n5 5\\n7 7\\n7 3\\n6 7\\n5 6\\n10 8\\n3 6\\n6 10\\n9 6\\n6 3\\n7 3\\n5 8\\n5 10\\n5 9\\n8 8\\n10 3\\n4 4\\n3 5\\n6 6\\n10 9\\n6 10\\n2 3\\n5 5\\n1 9\\n5 5\\n10 9\\n2 5\\n5 4\\n8 10\\n7 4\\n5 8\\n2 2\\n7 5\\n8 6\\n7 3\\n6 10\\n5 10\\n1 9\\n8 10\\n2 8\\n7 4\\n10 1\\n4 6\\n3 7\\n6 3\\n4 7\\n4 9\\n6 4\\n3 8\\n1 1\\n7 8\\n10 9\\n5 3\\n4 5\\n10 1\\n3 6\\n1 1\\n10 10\\n9 6\\n8 4\\n4 10\\n5 4\\n10 6\\n8 2\\n6 1\\n4 5\\n9 4\\n9 3\\n5 2\\n4 5\\n10 7\\n6 3\\n4 8\\n2 10\\n1 8\\n6 2\\n9 8\\n5 6\\n10 9\\n5 10\\n8 1\\n6 4\\n8 5\\n7 10\\n4 9\\n4 3\\n9 4\\n4 2\\n10 8\\n1 1\\n4 10\\n7 9\\n9 1\\n10 7\\n8 3\\n7 4\\n5 7\\n6 9\\n9 7\\n6 6\\n7 6\\n6 1\\n4 2\\n4 9\\n8 10\\n10 6\\n8 6\\n5 6\\n7 8\\n7 8\\n8 10\\n8 1\\n1 9\\n9 9\\n2 5\\n7 10\\n6 3\\n9 6\\n7 1\\n1 1\\n1 6\\n7 3\\n1 10\\n4 1\\n10 9\\n7 7\\n10 10\\n8 1\\n7 5\\n3 3\\n2 4\\n2 2\\n9 10\\n7 6\\n3 10\\n1 5\\n9 6\\n4 8\\n9 10\\n3 2\\n10 7\\n8 3\\n2 5\\n4 3\\n3 1\\n4 7\\n6 4\\n7 9\\n9 10\\n4 10\\n10 3\\n8 10\\n4 9\\n2 5\\n8 1\\n6 5\\n1 4\\n4 8\\n4 5\\n6 6\\n5 8\\n6 4\\n4 3\\n9 2\\n8 4\\n2 9\\n1 5\\n6 2\\n5 4\\n8 10\\n2 6\\n8 4\\n7 3\\n10 7\\n10 9\\n7 7\\n7 6\\n1 2\\n5 1\\n3 4\\n3 7\\n6 10\\n7 10\\n6 9\\n7 2\\n3 4\\n1 6\\n9 8\\n7 9\\n1 2\\n7 2\\n5 7\\n10 5\\n1 8\\n9 2\\n3 4\\n10 6\\n6 2\\n1 4\\n10 8\\n10 4\\n9 9\\n8 2\\n2 7\\n10 9\\n5 8\\n9 4\\n2 3\\n8 1\\n4 9\\n2 1\\n4 8\\n8 6\\n4 7\\n6 8\\n4 7\\n8 2\\n9 5\\n1 8\\n9 8\\n4 3\\n8 9\\n7 5\\n1 3\\n5 7\\n7 9\\n1 4\\n6 10\\n6 2\\n8 8\\n2 2\\n5 7\\n2 2\\n6 1\\n7 6\\n9 5\\n8 3\\n2 1\\n7 7\\n9 5\\n1 5\\n4 3\\n2 9\\n6 4\\n7 3\\n9 1\\n4 2\\n9 9\\n5 6\\n6 9\\n7 2\\n6 2\\n4 1\\n1 9\\n8 3\\n4 10\\n1 2\\n4 10\\n6 8\\n7 2\\n1 5\\n7 1\\n9 5\\n9 4\\n5 3\\n6 7\\n9 6\\n5 5\\n5 9\\n10 9\\n3 1\\n8 4\\n7 4\\n6 8\\n9 3\\n2 5\\n7 10\\n2 7\\n2 5\\n6 6\\n9 8\\n10 9\\n9 3\\n2 1\\n9 1\\n5 4\\n2 6\\n1 2\\n4 4\\n5 4\\n7 2\\n9 4\\n10 6\\n3 1\\n10 9\\n8 8\\n6 7\\n4 1\\n7 9\\n5 2\\n5 9\\n3 9\\n8 10\\n4 4\\n4 7\\n9 3\\n6 10\\n1 10\\n10 10\\n8 3\\n2 8\\n9 5\\n2 9\\n2 4\\n3 8\\n7 5\\n9 7\\n2 6\\n3 1\\n3 10\\n4 5\\n4 9\\n9 5\\n3 5\\n7 5\\n9 9\\n4 4\\n9 10\\n4 8\\n2 5\\n6 2\\n2 4\\n5 3\\n10 6\\n2 6\\n8 7\\n3 7\\n1 6\\n2 1\\n3 3\\n2 5\\n4 1\\n2 9\\n6 6\\n9 9\\n10 6\\n8 8\\n2 3\\n4 5\\n5 4\\n4 8\\n10 2\\n3 6\\n2 4\\n6 4\\n6 8\\n7 4\\n8 10\\n7 4\\n1 6\\n3 1\\n7 8\\n5 7\\n7 7\\n3 1\\n5 1\\n5 5\\n2 6\\n3 10\\n9 4\\n4 8\\n3 10\\n6 10\\n8 6\\n2 9\\n9 2\\n2 4\\n8 3\\n6 4\\n2 2\\n9 1\\n5 1\\n10 10\\n10 1\\n5 9\\n3 10\\n1 3\\n9 6\\n10 9\\n8 7\\n5 5\\n1 9\\n8 7\\n4 5\\n10 4\\n2 2\\n4 1\\n4 8\\n3 2\\n2 5\\n5 2\\n6 8\\n3 7\\n2 4\\n3 4\\n2 3\\n5 4\\n4 8\\n5 7\\n8 9\\n7 4\\n5 9\\n10 9\\n1 10\\n4 8\\n10 8\\n9 8\\n1 6\\n1 6\\n5 6\\n4 2\\n2 3\\n4 3\\n3 9\\n10 4\\n4 1\\n9 4\\n9 1\\n6 6\\n3 5\\n4 2\\n9 7\\n10 6\\n9 2\\n8 6\\n8 4\\n1 1\\n10 1\\n4 7\\n4 1\\n3 5\\n5 3\\n1 5\\n2 4\\n3 10\\n8 8\\n2 5\\n5 8\\n7 3\\n8 3\\n6 1\\n10 9\\n10 1\\n6 8\\n10 6\\n7 7\\n2 9\\n5 2\\n3 2\\n7 10\\n3 10\\n6 4\\n9 6\\n2 8\\n3 2\\n5 2\\n6 8\\n9 6\\n10 1\\n4 1\\n4 1\\n2 8\\n7 1\\n3 3\\n8 6\\n667\\n1 5\\n2 5\\n9 5\\n8 5\\n7 3\\n3 8\\n1 5\\n6 9\\n10 2\\n1 10\\n9 10\\n8 5\\n6 2\\n8 3\\n6 7\\n7 10\\n2 10\\n10 6\\n10 3\\n9 9\\n9 3\\n7 3\\n6 8\\n9 2\\n4 2\\n7 7\\n2 6\\n6 4\\n4 6\\n1 2\\n3 2\\n7 9\\n5 9\\n5 9\\n9 5\\n10 10\\n9 2\\n8 8\\n5 9\\n2 7\\n5 10\\n6 3\\n6 8\\n10 1\\n10 7\\n7 7\\n5 8\\n8 10\\n9 1\\n1 9\\n10 10\\n4 5\\n6 1\\n8 5\\n5 5\\n2 2\\n1 1\\n1 7\\n10 3\\n8 4\\n6 7\\n4 1\\n9 4\\n6 10\\n9 4\\n6 7\\n9 6\\n7 3\\n9 5\\n5 1\\n7 9\\n5 8\\n1 1\\n5 1\\n10 4\\n7 5\\n8 4\\n9 10\\n1 3\\n10 8\\n2 7\\n6 6\\n3 1\\n9 6\\n4 8\\n2 10\\n6 9\\n6 8\\n7 3\\n4 9\\n10 5\\n5 3\\n7 3\\n5 8\\n4 6\\n5 7\\n9 2\\n3 2\\n8 5\\n9 4\\n2 2\\n2 3\\n3 2\\n7 4\\n8 7\\n7 2\\n1 8\\n5 7\\n8 7\\n5 8\\n6 7\\n8 3\\n10 10\\n4 9\\n6 2\\n6 7\\n2 9\\n1 8\\n7 1\\n3 2\\n5 7\\n3 8\\n3 3\\n7 10\\n6 10\\n4 2\\n3 2\\n7 4\\n6 7\\n2 6\\n6 7\\n3 7\\n9 2\\n8 4\\n2 7\\n3 4\\n7 7\\n2 8\\n1 9\\n3 10\\n6 3\\n1 5\\n1 8\\n5 10\\n5 7\\n10 3\\n5 10\\n5 7\\n6 9\\n10 4\\n5 8\\n2 8\\n5 7\\n8 4\\n8 5\\n1 8\\n9 7\\n4 3\\n9 6\\n5 9\\n1 9\\n9 5\\n5 6\\n10 6\\n8 2\\n4 3\\n8 10\\n5 1\\n8 9\\n2 10\\n9 7\\n2 8\\n4 5\\n8 8\\n5 2\\n10 5\\n7 7\\n7 4\\n2 1\\n6 9\\n9 7\\n5 4\\n4 2\\n1 8\\n3 3\\n8 6\\n3 9\\n4 2\\n7 6\\n3 6\\n4 1\\n10 1\\n5 7\\n9 9\\n5 7\\n8 1\\n3 7\\n8 4\\n4 4\\n4 5\\n1 6\\n9 4\\n9 6\\n5 5\\n9 1\\n9 9\\n2 8\\n4 3\\n2 3\\n2 10\\n9 10\\n5 6\\n10 3\\n5 10\\n10 2\\n7 8\\n1 9\\n7 1\\n10 4\\n3 1\\n4 3\\n4 4\\n6 6\\n6 2\\n4 7\\n10 5\\n6 3\\n4 7\\n8 5\\n6 6\\n5 3\\n5 1\\n9 9\\n4 1\\n8 5\\n9 3\\n9 10\\n8 8\\n6 4\\n5 3\\n6 6\\n2 10\\n9 1\\n7 3\\n2 2\\n5 8\\n4 8\\n2 10\\n9 5\\n7 7\\n6 2\\n3 7\\n10 7\\n7 3\\n2 3\\n2 8\\n8 6\\n7 6\\n7 7\\n3 3\\n4 8\\n3 9\\n5 1\\n8 5\\n9 9\\n3 7\\n6 2\\n9 5\\n7 7\\n7 9\\n6 10\\n3 10\\n4 5\\n10 9\\n6 5\\n6 1\\n9 5\\n5 8\\n2 5\\n5 3\\n6 4\\n4 6\\n10 2\\n7 1\\n2 4\\n6 7\\n8 3\\n4 1\\n8 7\\n4 3\\n7 6\\n2 5\\n7 1\\n6 1\\n4 1\\n1 10\\n6 1\\n3 1\\n6 5\\n7 5\\n1 9\\n7 6\\n9 4\\n9 6\\n5 8\\n9 1\\n9 5\\n4 8\\n8 6\\n2 10\\n7 8\\n1 8\\n1 6\\n6 8\\n1 2\\n10 2\\n10 3\\n2 8\\n7 2\\n7 7\\n2 10\\n8 5\\n2 8\\n8 4\\n5 1\\n7 8\\n5 9\\n8 2\\n5 4\\n9 1\\n9 7\\n10 9\\n3 6\\n9 5\\n6 3\\n8 4\\n3 10\\n9 5\\n4 8\\n9 1\\n4 9\\n5 1\\n10 6\\n8 6\\n5 5\\n5 10\\n4 8\\n1 1\\n9 3\\n4 6\\n5 6\\n5 5\\n10 5\\n5 8\\n3 3\\n7 6\\n5 4\\n4 8\\n4 8\\n5 2\\n4 4\\n5 4\\n3 2\\n2 5\\n9 5\\n5 7\\n6 2\\n10 3\\n7 3\\n6 6\\n8 7\\n6 7\\n4 10\\n8 7\\n7 10\\n1 8\\n6 1\\n3 1\\n8 6\\n4 2\\n1 6\\n9 9\\n2 7\\n8 3\\n8 4\\n1 5\\n5 9\\n4 2\\n5 7\\n3 5\\n8 1\\n3 10\\n4 4\\n8 9\\n10 6\\n4 7\\n10 7\\n2 8\\n3 9\\n6 3\\n6 2\\n1 4\\n3 1\\n7 10\\n10 5\\n7 2\\n4 1\\n7 9\\n3 2\\n9 1\\n3 9\\n8 8\\n10 5\\n5 7\\n2 5\\n4 8\\n3 1\\n8 4\\n7 2\\n1 8\\n6 3\\n2 3\\n2 8\\n3 1\\n8 10\\n6 3\\n9 4\\n10 3\\n4 2\\n4 9\\n1 3\\n9 7\\n2 6\\n10 3\\n9 7\\n10 10\\n10 2\\n7 7\\n1 5\\n1 5\\n1 2\\n5 7\\n9 10\\n5 1\\n9 9\\n8 8\\n9 10\\n7 8\\n2 9\\n4 6\\n2 2\\n7 3\\n5 9\\n4 5\\n6 4\\n8 8\\n3 3\\n2 3\\n4 3\\n6 4\\n6 4\\n2 3\\n6 2\\n9 2\\n9 6\\n3 6\\n10 7\\n8 5\\n5 7\\n8 4\\n4 8\\n5 9\\n3 9\\n8 4\\n10 4\\n4 8\\n1 5\\n10 1\\n2 7\\n1 10\\n8 6\\n10 7\\n2 10\\n5 10\\n5 2\\n4 3\\n8 1\\n1 1\\n1 7\\n10 6\\n9 5\\n8 10\\n6 9\\n9 4\\n6 10\\n3 5\\n9 6\\n3 8\\n3 7\\n10 6\\n8 4\\n10 2\\n5 2\\n2 1\\n2 7\\n3 1\\n9 4\\n4 7\\n10 10\\n8 6\\n8 2\\n2 10\\n10 7\\n9 5\\n10 7\\n8 10\\n9 10\\n9 8\\n6 9\\n3 2\\n4 6\\n10 8\\n1 9\\n8 8\\n3 5\\n9 4\\n2 7\\n9 2\\n10 10\\n1 2\\n4 5\\n7 10\\n8 9\\n6 1\\n4 4\\n2 7\\n3 4\\n2 6\\n10 3\\n7 8\\n3 10\\n4 2\\n1 9\\n9 1\\n3 2\\n9 6\\n1 5\\n8 2\\n2 9\\n10 3\\n7 2\\n9 5\\n8 1\\n7 7\\n1 1\\n8 1\\n10 6\\n7 2\\n5 10\\n4 1\\n1 6\\n9 7\\n9 5\\n9 4\\n5 9\\n4 1\\n2 8\\n10 1\\n7 6\\n6 2\\n1 6\\n1 3\\n4 2\\n10 8\\n1 8\\n1 1\\n10 5\\n2 9\\n8 1\\n8 7\\n9 1\\n5 5\\n8 4\\n7 4\\n1 5\\n3 10\\n1 10\\n8 3\\n9 5\\n5 7\\n10 1\\n6 8\\n1 5\\n4 4\\n10 3\\n1 4\\n6 3\\n5 5\\n4 1\\n9 6\\n5 2\\n2 7\\n3 6\\n5 8\\n8 3\\n2 8\\n5 6\\n1 5\\n10 9\\n4 3\\n10 8\\n10 5\\n10 7\\n5 10\\n8 1\\n2 7\\n5 4\\n7 8\\n1 6\\n2 6\\n3 7\\n4 7\\n7 5\\n10 8\\n7 8\\n6 8\\n7 5\\n6 9\\n3 1\\n5 8\\n6 9\\n1 2\\n7 9\\n4 9\\n2 5\\n1 9\\n10 4\\n7 7\\n10 3\\n2 10\\n6 5\\n9 9\\n1 10\\n8 8\\n6 2\\n3 10\\n9 7\\n4 4\\n3 6\\n8 5\\n4 5\\n9 10\\n6 5\\n4 4\\n10 10\\n4 1\\n10 6\\n2 10\\n6 4\\n2 1\\n4 5\\n5 4\\n6 1\\n10 8\\n4 2\\n5 2\\n1 10\\n340\\n2 3\\n8 4\\n5 7\\n5 1\\n4 2\\n9 10\\n6 2\\n3 10\\n2 7\\n3 10\\n10 9\\n9 6\\n7 10\\n8 2\\n4 10\\n6 5\\n8 4\\n7 3\\n8 6\\n6 2\\n2 10\\n4 5\\n2 4\\n8 10\\n8 9\\n9 10\\n2 9\\n3 9\\n5 7\\n1 5\\n10 7\\n8 3\\n3 9\\n10 9\\n8 2\\n9 10\\n5 1\\n5 6\\n7 1\\n10 7\\n3 5\\n1 1\\n1 2\\n9 6\\n1 4\\n10 5\\n5 10\\n5 7\\n6 3\\n2 10\\n1 9\\n1 9\\n1 4\\n7 2\\n2 10\\n3 4\\n7 1\\n6 10\\n6 10\\n5 8\\n10 5\\n1 10\\n9 4\\n7 8\\n1 9\\n7 4\\n9 2\\n7 2\\n4 7\\n4 4\\n9 4\\n5 8\\n4 7\\n3 4\\n2 3\\n2 4\\n8 8\\n4 4\\n5 4\\n4 5\\n5 5\\n8 3\\n8 10\\n4 7\\n5 2\\n1 2\\n2 4\\n8 10\\n10 9\\n7 10\\n9 9\\n1 1\\n2 5\\n2 3\\n7 6\\n6 8\\n5 3\\n6 8\\n9 6\\n1 3\\n5 9\\n3 5\\n9 4\\n1 2\\n6 5\\n1 4\\n4 1\\n10 6\\n7 9\\n9 7\\n7 6\\n6 4\\n9 10\\n4 3\\n2 4\\n3 7\\n2 7\\n8 1\\n7 4\\n1 10\\n4 2\\n4 5\\n5 6\\n4 2\\n4 7\\n8 8\\n1 9\\n2 2\\n2 7\\n3 2\\n3 8\\n2 5\\n7 7\\n2 6\\n4 8\\n8 7\\n6 8\\n8 3\\n6 10\\n8 4\\n4 4\\n5 4\\n3 7\\n3 9\\n10 3\\n2 7\\n10 6\\n9 5\\n2 10\\n10 2\\n5 8\\n6 4\\n9 5\\n7 8\\n4 1\\n8 6\\n7 1\\n4 2\\n7 10\\n2 10\\n7 10\\n4 2\\n7 1\\n5 4\\n4 6\\n10 6\\n5 10\\n8 2\\n9 3\\n5 10\\n10 8\\n6 5\\n8 8\\n6 5\\n6 4\\n1 10\\n3 1\\n7 6\\n10 8\\n7 10\\n8 8\\n6 7\\n1 8\\n2 7\\n10 2\\n1 6\\n7 3\\n2 10\\n10 7\\n4 2\\n4 3\\n4 10\\n1 9\\n8 4\\n4 3\\n4 9\\n10 7\\n5 3\\n7 1\\n3 6\\n6 8\\n5 8\\n5 10\\n4 6\\n3 8\\n10 4\\n4 5\\n7 7\\n10 1\\n4 6\\n9 2\\n5 4\\n10 1\\n5 2\\n1 7\\n10 7\\n8 3\\n7 9\\n4 3\\n7 4\\n9 2\\n10 2\\n5 8\\n6 9\\n7 9\\n7 2\\n4 1\\n4 4\\n7 4\\n7 5\\n9 9\\n3 6\\n2 7\\n3 5\\n7 5\\n2 2\\n7 6\\n9 9\\n3 6\\n10 4\\n9 8\\n6 8\\n1 5\\n2 5\\n8 10\\n4 3\\n1 1\\n8 5\\n10 5\\n9 10\\n10 10\\n3 10\\n2 7\\n6 8\\n3 5\\n3 7\\n3 1\\n1 1\\n7 4\\n7 8\\n3 6\\n4 3\\n8 10\\n2 4\\n7 8\\n8 1\\n8 5\\n4 8\\n9 5\\n5 1\\n8 1\\n8 5\\n2 9\\n3 10\\n10 7\\n4 9\\n5 5\\n1 8\\n10 9\\n7 3\\n3 8\\n5 2\\n9 2\\n4 1\\n4 7\\n7 5\\n9 3\\n7 4\\n1 10\\n3 5\\n1 8\\n2 8\\n5 2\\n10 3\\n3 3\\n7 8\\n6 1\\n4 5\\n1 5\\n2 9\\n10 10\\n9 10\\n2 1\\n6 1\\n10 6\\n5 1\\n2 3\\n1 7\\n8 2\\n3 2\\n8 10\\n4 7\\n3 8\\n7 6\\n10 6\\n6 2\\n2 5\\n9 1\\n8 9\\n1 1\\n3 3\\n6 1\\n8 9\\n9 7\\n5 5\\n9 9\\n5 7\\n10 3\\n9 6\\n1 9\\n6 4\\n3 4\\n8 2\\n3 8\\n9 6\\n10 5\\n7 3\\n1 7\\n4 7\\n1 8\\n743\\n8 8\\n3 6\\n6 5\\n4 10\\n10 3\\n1 5\\n3 5\\n6 3\\n10 9\\n3 4\\n1 2\\n10 1\\n3 5\\n5 7\\n5 1\\n7 10\\n5 10\\n3 7\\n8 10\\n10 8\\n3 2\\n8 10\\n5 10\\n9 1\\n3 9\\n4 9\\n3 4\\n4 8\\n4 5\\n3 7\\n5 5\\n9 2\\n4 5\\n1 2\\n2 6\\n5 8\\n3 7\\n2 8\\n9 4\\n8 10\\n5 5\\n10 10\\n2 9\\n4 9\\n1 4\\n5 8\\n4 8\\n5 4\\n4 8\\n1 1\\n5 5\\n3 8\\n4 1\\n8 6\\n9 1\\n6 3\\n9 6\\n10 6\\n9 8\\n4 2\\n10 10\\n6 6\\n9 8\\n3 8\\n2 3\\n2 3\\n1 7\\n6 7\\n6 9\\n6 6\\n3 7\\n2 4\\n1 2\\n10 8\\n4 5\\n1 10\\n4 3\\n2 6\\n9 3\\n2 4\\n5 6\\n2 2\\n1 6\\n2 8\\n6 7\\n2 7\\n1 4\\n5 4\\n1 10\\n3 9\\n6 1\\n7 10\\n8 9\\n7 10\\n6 5\\n2 3\\n5 10\\n7 2\\n8 1\\n1 10\\n3 2\\n5 5\\n8 2\\n5 3\\n1 1\\n4 4\\n3 8\\n1 2\\n10 1\\n10 10\\n8 5\\n9 6\\n1 2\\n1 6\\n10 1\\n4 10\\n5 9\\n1 1\\n9 8\\n9 6\\n7 6\\n3 1\\n6 7\\n4 10\\n2 3\\n7 8\\n9 7\\n2 9\\n3 4\\n6 3\\n10 6\\n10 5\\n6 10\\n1 6\\n8 7\\n9 3\\n9 2\\n7 1\\n5 2\\n9 10\\n2 6\\n5 7\\n1 1\\n4 9\\n1 5\\n5 3\\n6 9\\n7 9\\n6 1\\n6 8\\n7 2\\n3 1\\n10 6\\n4 10\\n5 2\\n6 10\\n6 4\\n5 2\\n2 6\\n10 4\\n4 1\\n8 9\\n8 7\\n9 9\\n6 6\\n7 8\\n3 1\\n8 1\\n8 10\\n7 1\\n6 2\\n2 2\\n5 9\\n1 1\\n3 3\\n6 9\\n6 10\\n10 4\\n2 10\\n5 9\\n8 5\\n7 2\\n3 3\\n1 4\\n6 8\\n4 6\\n4 5\\n9 1\\n8 2\\n2 9\\n3 3\\n4 5\\n3 2\\n8 5\\n10 1\\n9 7\\n9 4\\n7 4\\n2 2\\n7 6\\n4 2\\n5 4\\n9 4\\n7 5\\n4 9\\n5 10\\n4 7\\n4 1\\n7 2\\n4 2\\n2 1\\n2 1\\n8 5\\n5 1\\n5 2\\n9 1\\n4 10\\n3 7\\n5 5\\n2 6\\n7 8\\n3 10\\n8 2\\n9 1\\n4 8\\n10 2\\n2 8\\n2 5\\n4 5\\n7 4\\n9 1\\n5 1\\n1 9\\n10 5\\n9 6\\n2 4\\n8 3\\n8 1\\n4 4\\n9 8\\n8 6\\n9 8\\n4 9\\n5 3\\n8 3\\n1 1\\n7 6\\n1 6\\n3 4\\n10 9\\n3 4\\n6 7\\n1 5\\n6 7\\n5 1\\n2 7\\n9 1\\n5 1\\n3 4\\n5 9\\n9 1\\n9 1\\n3 5\\n5 3\\n10 8\\n9 5\\n8 10\\n1 4\\n6 2\\n3 9\\n5 1\\n2 5\\n7 5\\n5 7\\n8 1\\n1 2\\n5 6\\n5 6\\n7 4\\n10 9\\n5 10\\n2 9\\n4 10\\n7 4\\n1 3\\n10 2\\n8 10\\n1 10\\n3 4\\n10 4\\n6 4\\n9 1\\n9 2\\n5 9\\n5 4\\n4 7\\n10 8\\n1 9\\n1 5\\n8 4\\n6 7\\n8 5\\n5 8\\n9 2\\n7 8\\n7 2\\n2 7\\n6 10\\n7 1\\n2 4\\n1 5\\n6 3\\n4 6\\n4 1\\n10 9\\n10 1\\n8 8\\n9 4\\n1 6\\n7 3\\n3 5\\n3 2\\n3 2\\n1 5\\n9 7\\n10 8\\n6 1\\n6 9\\n6 4\\n2 3\\n1 9\\n1 7\\n1 10\\n4 6\\n4 7\\n6 2\\n2 8\\n5 5\\n1 2\\n7 7\\n5 10\\n2 2\\n9 7\\n3 2\\n4 5\\n9 1\\n7 6\\n2 3\\n6 3\\n8 6\\n2 9\\n3 2\\n2 10\\n6 6\\n10 2\\n5 8\\n6 5\\n6 3\\n9 10\\n9 6\\n2 4\\n9 1\\n4 2\\n1 4\\n7 4\\n7 8\\n2 2\\n9 8\\n8 2\\n2 8\\n10 5\\n9 9\\n7 6\\n5 2\\n4 7\\n6 6\\n9 10\\n5 8\\n4 10\\n9 2\\n4 8\\n6 7\\n6 10\\n7 10\\n6 2\\n3 6\\n2 10\\n2 7\\n4 8\\n10 4\\n8 4\\n1 5\\n3 6\\n2 3\\n10 5\\n7 3\\n6 1\\n5 6\\n2 7\\n3 8\\n3 1\\n1 2\\n4 8\\n3 7\\n4 7\\n5 5\\n8 10\\n7 3\\n9 5\\n9 1\\n1 2\\n8 6\\n7 3\\n4 9\\n4 10\\n3 5\\n1 8\\n2 3\\n9 3\\n1 4\\n9 7\\n1 3\\n10 3\\n6 7\\n10 8\\n2 10\\n4 7\\n7 10\\n1 8\\n9 1\\n8 5\\n7 1\\n4 3\\n10 7\\n9 4\\n7 2\\n3 2\\n3 10\\n7 4\\n9 3\\n6 6\\n2 9\\n3 2\\n8 3\\n1 8\\n6 8\\n4 8\\n10 2\\n6 1\\n8 8\\n7 4\\n7 3\\n8 8\\n8 2\\n1 1\\n10 8\\n1 7\\n7 2\\n1 9\\n8 2\\n6 3\\n2 3\\n3 1\\n3 1\\n8 7\\n10 9\\n7 10\\n8 10\\n5 7\\n3 3\\n7 6\\n8 7\\n1 3\\n10 4\\n7 7\\n2 10\\n1 8\\n10 4\\n2 9\\n9 5\\n8 9\\n9 8\\n10 1\\n7 10\\n5 9\\n5 4\\n1 4\\n8 9\\n8 9\\n4 2\\n7 8\\n8 3\\n2 1\\n1 10\\n5 8\\n8 8\\n6 3\\n8 2\\n7 4\\n3 4\\n2 8\\n6 8\\n4 10\\n6 9\\n6 7\\n3 7\\n2 1\\n3 5\\n6 3\\n4 8\\n8 10\\n10 2\\n4 4\\n7 3\\n3 8\\n9 1\\n9 10\\n8 6\\n10 3\\n10 6\\n1 5\\n5 8\\n7 2\\n9 2\\n9 4\\n3 7\\n9 7\\n7 2\\n5 4\\n2 3\\n5 10\\n5 8\\n10 6\\n2 7\\n7 4\\n7 7\\n1 6\\n9 5\\n4 5\\n1 1\\n3 8\\n3 8\\n5 7\\n7 2\\n4 2\\n1 7\\n8 8\\n6 8\\n6 1\\n9 4\\n6 2\\n4 8\\n1 7\\n3 5\\n9 9\\n8 1\\n1 10\\n10 2\\n7 7\\n6 6\\n10 3\\n2 4\\n8 8\\n1 1\\n2 4\\n5 9\\n5 3\\n4 5\\n2 6\\n5 2\\n7 8\\n9 7\\n7 8\\n4 7\\n7 3\\n9 6\\n10 9\\n7 5\\n7 8\\n9 10\\n2 6\\n8 4\\n5 9\\n3 6\\n5 1\\n2 5\\n10 3\\n4 3\\n1 8\\n9 10\\n4 9\\n2 7\\n4 5\\n2 10\\n4 3\\n5 3\\n6 6\\n10 2\\n8 8\\n5 8\\n7 6\\n7 6\\n1 3\\n3 6\\n4 1\\n2 5\\n7 6\\n4 2\\n2 4\\n10 7\\n4 3\\n4 1\\n2 4\\n8 8\\n9 1\\n6 5\\n2 5\\n2 9\\n1 3\\n4 8\\n4 5\\n7 6\\n5 4\\n9 2\\n3 6\\n10 10\\n10 4\\n2 2\\n4 2\\n9 2\\n5 7\\n8 4\\n4 9\\n6 7\\n5 8\\n8 5\\n7 4\\n8 8\\n9 2\\n4 2\\n10 4\\n2 7\\n1 3\\n7 8\\n8 3\\n8 9\\n2 4\\n5 6\\n4 2\\n8 7\\n9 10\\n1 4\\n10 5\\n5 7\\n4 9\\n9 9\\n1 1\\n5 4\\n9 5\\n3 1\\n8 10\\n8 7\\n9 2\\n7 7\\n9 5\\n7 5\\n2 5\\n7 4\\n2 8\\n3 7\\n4 4\\n3 4\\n9 3\\n9 1\\n10 1\\n6 3\\n7 7\\n5 4\\n7 6\\n1 8\\n4 3\\n1 2\\n10 4\\n2 7\\n3 3\\n2 10\\n6 5\\n5 4\\n5 10\\n3 2\\n4 3\\n2 5\\n2 5\\n2 4\\n1 10\\n1 5\\n2 10\\n6 3\\n9 6\\n1 6\\n10 1\\n6 3\\n2 2\\n10 7\\n5 1\\n9 6\\n10 1\\n5 6\\n8 9\\n7 3\\n10 10\\n2 1\\n9 3\\n7 8\\n4 10\\n2 4\\n8 1\\n4 9\\n1 8\\n3 6\\n8 6\\n4 6\\n7 5\\n5 4\\n9 6\\n4 2\\n7 10\\n3 6\\n7 6\\n1 1\\n1 1\\n8 5\\n3 6\\n2 6\\n5 9\\n10 10\\n5 4\\n5 8\\n5 3\\n8 5\\n3 1\\n7 10\\n5 2\\n996\\n4 10\\n10 2\\n3 9\\n3 5\\n3 10\\n2 5\\n7 3\\n6 7\\n3 2\\n10 5\\n10 7\\n10 6\\n9 3\\n6 5\\n1 8\\n9 4\\n8 2\\n4 5\\n9 4\\n9 5\\n2 1\\n6 8\\n3 1\\n9 9\\n3 3\\n7 2\\n10 1\\n2 6\\n7 7\\n4 10\\n10 3\\n5 10\\n4 10\\n5 1\\n9 9\\n8 1\\n4 4\\n6 10\\n7 4\\n10 4\\n1 2\\n8 7\\n7 9\\n4 8\\n4 8\\n10 7\\n7 1\\n2 1\\n4 9\\n8 7\\n1 7\\n7 4\\n2 5\\n1 1\\n8 6\\n7 9\\n3 4\\n1 5\\n5 2\\n1 8\\n7 10\\n2 2\\n7 3\\n2 1\\n1 8\\n2 8\\n9 7\\n8 8\\n7 9\\n4 9\\n5 5\\n10 5\\n5 6\\n1 9\\n10 9\\n4 9\\n1 7\\n9 1\\n10 2\\n5 8\\n4 4\\n2 1\\n2 2\\n8 7\\n5 3\\n5 8\\n1 9\\n2 10\\n3 10\\n9 8\\n2 3\\n6 10\\n2 9\\n9 3\\n10 5\\n10 10\\n10 3\\n8 6\\n10 2\\n8 1\\n10 3\\n8 8\\n7 8\\n5 2\\n5 8\\n1 9\\n10 6\\n8 4\\n9 8\\n4 8\\n6 8\\n1 7\\n9 8\\n6 10\\n7 8\\n10 3\\n9 7\\n3 2\\n8 4\\n1 8\\n7 5\\n5 8\\n1 2\\n5 1\\n4 4\\n5 10\\n2 1\\n4 10\\n6 2\\n3 8\\n3 2\\n6 2\\n4 4\\n3 8\\n6 9\\n3 7\\n1 1\\n8 2\\n10 3\\n2 10\\n6 6\\n3 7\\n6 9\\n4 3\\n5 8\\n1 4\\n5 2\\n3 4\\n8 4\\n9 1\\n2 8\\n5 6\\n1 5\\n4 5\\n7 7\\n4 1\\n10 2\\n1 3\\n10 4\\n6 2\\n4 5\\n9 9\\n6 4\\n4 6\\n10 7\\n7 3\\n9 9\\n9 6\\n8 1\\n3 1\\n3 4\\n7 3\\n9 7\\n6 7\\n5 5\\n6 6\\n4 3\\n2 7\\n6 7\\n2 8\\n9 6\\n10 7\\n3 5\\n9 1\\n3 9\\n6 4\\n7 4\\n1 7\\n2 4\\n2 8\\n2 2\\n3 1\\n9 9\\n10 9\\n9 9\\n9 2\\n7 2\\n3 10\\n6 4\\n8 1\\n10 1\\n5 9\\n2 5\\n5 1\\n8 7\\n5 6\\n1 6\\n8 10\\n8 2\\n4 9\\n5 9\\n2 1\\n2 6\\n7 2\\n1 5\\n4 1\\n4 2\\n7 9\\n6 6\\n1 9\\n4 3\\n10 2\\n9 4\\n8 6\\n3 4\\n9 1\\n9 10\\n2 4\\n2 6\\n7 10\\n9 3\\n6 7\\n4 10\\n9 1\\n7 9\\n6 2\\n7 2\\n9 6\\n9 4\\n5 9\\n1 2\\n2 10\\n7 2\\n7 3\\n1 9\\n7 6\\n10 5\\n3 1\\n5 7\\n7 2\\n3 6\\n8 9\\n7 7\\n5 8\\n8 7\\n9 6\\n7 8\\n3 1\\n4 4\\n4 9\\n7 7\\n2 1\\n6 5\\n3 4\\n7 2\\n5 6\\n8 1\\n6 3\\n2 8\\n8 1\\n1 8\\n10 3\\n3 6\\n6 3\\n4 9\\n2 3\\n9 1\\n8 8\\n4 4\\n10 3\\n4 8\\n5 6\\n10 5\\n8 2\\n6 10\\n5 6\\n3 8\\n7 3\\n3 9\\n6 10\\n2 10\\n3 9\\n8 9\\n10 7\\n1 6\\n10 7\\n3 1\\n9 10\\n1 1\\n10 2\\n6 3\\n8 8\\n4 5\\n1 6\\n2 8\\n3 1\\n10 5\\n3 9\\n2 4\\n10 7\\n3 9\\n3 8\\n8 10\\n7 7\\n6 1\\n6 5\\n1 9\\n4 4\\n4 4\\n5 6\\n8 2\\n1 6\\n10 7\\n8 8\\n3 6\\n10 9\\n10 4\\n3 10\\n5 6\\n8 5\\n4 8\\n3 5\\n6 9\\n3 2\\n6 8\\n8 6\\n9 7\\n1 7\\n3 5\\n7 4\\n2 3\\n7 5\\n8 2\\n9 6\\n4 7\\n9 8\\n5 2\\n8 6\\n8 9\\n3 6\\n5 6\\n8 6\\n6 5\\n9 4\\n5 8\\n6 10\\n8 5\\n8 4\\n9 8\\n2 6\\n7 9\\n3 8\\n2 10\\n9 4\\n6 1\\n6 3\\n2 6\\n1 6\\n3 2\\n8 5\\n2 2\\n7 4\\n9 5\\n1 5\\n10 6\\n7 2\\n1 1\\n7 3\\n8 1\\n3 9\\n9 6\\n8 8\\n8 9\\n5 8\\n9 10\\n2 2\\n9 6\\n7 4\\n4 1\\n7 8\\n3 3\\n9 6\\n6 9\\n5 1\\n5 4\\n3 3\\n2 9\\n3 4\\n2 3\\n5 8\\n7 9\\n6 10\\n10 4\\n5 5\\n4 9\\n6 10\\n3 3\\n6 2\\n9 10\\n1 7\\n10 5\\n1 3\\n10 8\\n10 8\\n1 2\\n6 10\\n2 8\\n2 1\\n9 7\\n8 9\\n8 8\\n7 1\\n6 4\\n7 4\\n10 8\\n5 4\\n8 3\\n2 5\\n2 3\\n2 2\\n7 8\\n1 9\\n6 6\\n5 9\\n6 8\\n5 2\\n9 4\\n6 7\\n2 5\\n1 4\\n1 7\\n5 7\\n5 8\\n1 1\\n5 9\\n5 6\\n9 9\\n1 2\\n7 3\\n8 2\\n1 2\\n5 2\\n1 6\\n1 4\\n9 8\\n3 10\\n5 3\\n9 4\\n7 5\\n4 8\\n6 8\\n10 6\\n9 6\\n2 3\\n4 4\\n2 2\\n4 3\\n8 2\\n2 2\\n9 4\\n10 6\\n6 3\\n2 5\\n10 3\\n2 10\\n1 2\\n2 2\\n3 9\\n2 3\\n9 7\\n4 9\\n2 10\\n7 7\\n1 6\\n8 3\\n10 1\\n9 1\\n8 10\\n10 7\\n9 7\\n5 3\\n10 3\\n6 5\\n9 7\\n4 10\\n4 3\\n8 9\\n3 2\\n9 7\\n4 4\\n2 2\\n5 1\\n6 3\\n1 9\\n9 5\\n6 2\\n3 2\\n6 1\\n3 2\\n7 1\\n10 4\\n2 2\\n5 7\\n5 9\\n10 3\\n2 1\\n3 6\\n8 7\\n10 9\\n7 3\\n1 6\\n7 7\\n4 9\\n9 2\\n7 1\\n9 10\\n7 2\\n1 8\\n3 8\\n7 10\\n3 8\\n3 1\\n7 5\\n6 7\\n9 10\\n1 5\\n7 4\\n7 3\\n3 9\\n10 4\\n7 9\\n9 4\\n4 6\\n3 2\\n9 4\\n6 1\\n10 7\\n5 4\\n9 10\\n3 10\\n3 5\\n6 2\\n2 4\\n10 9\\n9 9\\n3 1\\n2 5\\n1 1\\n7 2\\n7 1\\n8 9\\n9 4\\n4 3\\n4 7\\n4 1\\n7 7\\n1 5\\n6 2\\n8 9\\n3 4\\n5 10\\n10 1\\n9 5\\n4 3\\n6 8\\n2 6\\n3 3\\n4 10\\n3 2\\n8 5\\n1 3\\n9 1\\n9 3\\n7 6\\n1 6\\n10 10\\n8 9\\n6 1\\n9 3\\n7 2\\n3 9\\n1 3\\n10 7\\n4 7\\n8 1\\n6 5\\n6 6\\n7 10\\n4 5\\n9 4\\n10 10\\n2 10\\n7 7\\n8 4\\n2 9\\n2 10\\n4 7\\n4 4\\n1 8\\n5 3\\n7 6\\n2 2\\n4 6\\n1 3\\n8 9\\n5 5\\n3 2\\n4 7\\n9 4\\n10 1\\n9 9\\n7 6\\n3 4\\n4 10\\n1 4\\n8 3\\n9 5\\n7 5\\n6 1\\n3 10\\n1 8\\n6 8\\n7 6\\n4 6\\n9 10\\n4 9\\n9 6\\n4 9\\n8 8\\n4 6\\n7 10\\n1 7\\n9 8\\n5 6\\n4 6\\n3 1\\n8 4\\n9 9\\n10 4\\n6 8\\n4 4\\n4 2\\n10 2\\n1 10\\n3 7\\n6 9\\n3 5\\n9 2\\n8 7\\n7 5\\n4 3\\n5 6\\n9 6\\n5 4\\n10 6\\n7 8\\n5 6\\n9 6\\n5 7\\n1 5\\n5 10\\n3 10\\n8 9\\n4 8\\n7 5\\n2 8\\n4 7\\n8 3\\n3 4\\n7 10\\n2 10\\n3 7\\n9 2\\n1 2\\n4 8\\n4 8\\n4 2\\n6 7\\n3 3\\n9 7\\n5 8\\n4 8\\n3 9\\n3 6\\n4 3\\n4 9\\n4 1\\n3 9\\n5 7\\n10 5\\n4 4\\n1 1\\n3 6\\n9 2\\n2 9\\n2 5\\n4 2\\n7 3\\n8 4\\n1 1\\n9 4\\n8 7\\n4 9\\n10 10\\n10 9\\n1 6\\n7 2\\n5 8\\n1 3\\n6 8\\n9 10\\n6 9\\n8 5\\n6 1\\n5 3\\n6 1\\n6 8\\n8 2\\n1 3\\n3 8\\n6 4\\n10 9\\n10 2\\n2 2\\n3 8\\n9 5\\n2 1\\n8 10\\n4 4\\n7 4\\n9 2\\n7 7\\n3 9\\n8 4\\n6 5\\n5 6\\n6 5\\n9 6\\n7 4\\n7 8\\n5 1\\n5 9\\n8 9\\n2 7\\n8 8\\n6 6\\n3 1\\n7 9\\n7 7\\n8 1\\n3 7\\n10 6\\n10 9\\n5 2\\n2 10\\n6 6\\n4 10\\n4 9\\n2 10\\n4 5\\n2 1\\n9 3\\n1 10\\n2 5\\n2 9\\n9 5\\n1 2\\n4 4\\n5 2\\n6 8\\n10 5\\n1 1\\n1 9\\n9 1\\n7 4\\n9 3\\n7 2\\n5 8\\n6 2\\n7 1\\n9 9\\n10 10\\n9 4\\n4 7\\n3 4\\n8 7\\n8 3\\n2 9\\n3 7\\n3 9\\n8 7\\n1 2\\n1 4\\n4 10\\n5 8\\n9 9\\n6 3\\n10 3\\n9 4\\n6 10\\n2 8\\n8 8\\n8 7\\n4 6\\n4 1\\n5 5\\n1 3\\n9 1\\n5 7\\n3 9\\n5 1\\n2 7\\n3 1\\n7 10\\n3 6\\n2 2\\n3 2\\n3 9\\n6 2\\n3 8\\n5 8\\n5 4\\n4 7\\n6 2\\n1 3\\n1 2\\n5 1\\n1 5\\n10 4\\n5 5\\n1 8\\n6 8\\n8 10\\n9 5\\n7 10\\n7 3\\n3 5\\n1 2\\n2 7\\n3 2\\n3 3\\n2 3\\n4 8\\n4 8\\n7 6\\n1 3\\n2 6\\n4 10\\n4 7\\n9 2\\n7 4\\n8 2\\n2 1\\n5 5\\n2 7\\n5 5\\n8 10\\n9 6\\n6 1\\n4 2\\n3 6\\n5 10\\n2 2\\n1 4\\n6 9\\n7 10\\n10 5\\n2 1\\n10 2\\n2 4\\n3 10\\n10 1\\n5 7\\n8 3\\n6 9\\n8 3\\n6 7\\n5 1\\n9 7\\n2 1\\n2 10\\n7 5\\n5 8\\n1 4\\n9 8\\n5 4\\n7 1\\n8 5\\n1 5\\n1 4\\n6 6\\n4 2\\n3 3\\n10 10\\n7 2\\n4 6\\n2 7\\n6 5\\n1 6\\n6 9\\n9 1\\n10 7\\n2 7\\n5 8\\n5 8\\n9 1\\n10 10\\n9 10\\n10 6\\n4 7\\n6 7\\n9 8\\n7 5\\n8 9\\n10 1\\n3 8\\n9 5\\n8 6\\n9 1\\n6 3\\n8 1\\n10 4\\n4 6\\n5 8\\n1 2\\n1 4\\n4 8\\n5 5\\n2 5\\n5 8\\n8 10\\n9 10\\n2 1\\n3 4\\n7 7\\n7 9\\n2 2\\n9 3\\n2 4\\n9 6\\n7 4\\n1 5\\n7 1\\n3 10\\n6 3\\n5 8\\n9 1\\n4 1\\n10 7\\n6 9\\n1 5\\n8 3\\n9 3\\n6 1\\n10 4\\n5 2\\n10 7\\n10 6\\n5 10\\n8 2\\n10 6\\n6 5\\n5 2\\n3 7\\n10 3\\n4 10\\n8 5\\n8 6\\n8 5\\n4 1\\n6 10\\n6 3\\n2 10\\n4 5\\n7 2\\n9 3\\n2 4\\n8 2\\n1 6\\n9 7\\n2 7\\n10 4\\n9 2\\n6 10\\n10 7\\n5 10\\n665\\n8 5\\n3 5\\n10 10\\n10 4\\n1 3\\n9 1\\n6 3\\n6 1\\n5 4\\n4 8\\n4 2\\n5 6\\n1 5\\n3 5\\n1 4\\n4 5\\n7 3\\n8 5\\n6 3\\n9 3\\n2 10\\n1 2\\n8 9\\n5 7\\n10 5\\n3 9\\n2 1\\n7 2\\n4 3\\n1 4\\n9 10\\n4 5\\n7 6\\n4 5\\n5 2\\n6 6\\n5 3\\n2 4\\n1 3\\n7 3\\n7 7\\n2 9\\n5 1\\n7 7\\n10 6\\n2 9\\n9 1\\n7 1\\n7 7\\n8 10\\n6 7\\n8 7\\n10 9\\n8 2\\n2 4\\n2 10\\n8 5\\n3 5\\n10 1\\n7 7\\n2 5\\n3 9\\n6 7\\n6 6\\n3 9\\n2 10\\n4 9\\n8 10\\n5 9\\n1 2\\n1 1\\n4 5\\n3 8\\n2 1\\n1 1\\n1 8\\n7 4\\n10 1\\n2 5\\n6 2\\n10 1\\n5 10\\n7 3\\n10 6\\n9 5\\n7 4\\n7 8\\n1 1\\n3 4\\n10 1\\n10 8\\n7 2\\n5 4\\n7 2\\n1 10\\n5 10\\n10 8\\n2 8\\n9 9\\n10 5\\n9 9\\n9 8\\n10 3\\n3 10\\n9 9\\n3 9\\n8 6\\n9 9\\n2 3\\n7 2\\n6 7\\n2 4\\n5 1\\n6 1\\n3 9\\n10 7\\n6 9\\n7 5\\n10 10\\n9 2\\n4 6\\n4 7\\n5 8\\n5 9\\n7 4\\n10 1\\n9 10\\n6 4\\n6 9\\n10 9\\n1 10\\n4 6\\n9 1\\n2 7\\n1 5\\n5 6\\n6 3\\n9 6\\n9 3\\n1 7\\n1 2\\n5 5\\n7 1\\n10 5\\n3 2\\n7 10\\n9 3\\n8 1\\n5 3\\n1 1\\n10 9\\n8 2\\n7 5\\n3 7\\n2 6\\n5 4\\n10 2\\n9 9\\n3 5\\n5 3\\n8 4\\n2 10\\n8 6\\n1 9\\n5 4\\n8 8\\n2 4\\n4 1\\n5 8\\n8 4\\n5 4\\n5 6\\n2 9\\n7 10\\n9 1\\n8 10\\n2 1\\n2 1\\n1 8\\n5 7\\n6 9\\n1 5\\n10 2\\n6 3\\n1 7\\n8 9\\n2 2\\n7 1\\n4 3\\n6 10\\n7 6\\n5 8\\n9 5\\n10 1\\n9 1\\n5 6\\n2 1\\n6 10\\n1 2\\n4 3\\n4 4\\n2 3\\n6 1\\n5 4\\n4 3\\n4 3\\n5 1\\n3 7\\n4 10\\n8 9\\n4 8\\n4 3\\n8 9\\n10 7\\n2 3\\n4 1\\n6 7\\n6 2\\n3 8\\n7 8\\n9 1\\n1 9\\n4 8\\n7 9\\n8 8\\n9 8\\n10 1\\n1 4\\n7 2\\n3 3\\n3 4\\n3 4\\n3 10\\n1 7\\n6 10\\n8 10\\n8 4\\n4 5\\n4 2\\n8 3\\n2 9\\n6 1\\n7 1\\n1 9\\n7 1\\n7 9\\n7 3\\n3 2\\n8 4\\n4 3\\n1 7\\n8 1\\n5 5\\n1 1\\n2 4\\n6 7\\n10 7\\n8 1\\n5 6\\n8 9\\n5 1\\n8 7\\n5 10\\n1 6\\n1 3\\n7 8\\n4 4\\n4 2\\n9 9\\n10 8\\n5 3\\n4 2\\n7 5\\n1 1\\n1 10\\n5 4\\n8 10\\n8 2\\n5 3\\n10 6\\n10 1\\n3 10\\n10 7\\n10 7\\n6 2\\n2 8\\n4 10\\n4 10\\n1 1\\n2 10\\n7 1\\n9 6\\n3 8\\n4 2\\n7 8\\n5 8\\n4 4\\n3 2\\n5 6\\n8 2\\n10 5\\n7 10\\n6 6\\n10 4\\n5 3\\n8 5\\n4 3\\n4 2\\n5 7\\n6 6\\n7 10\\n6 9\\n5 10\\n5 2\\n6 10\\n6 5\\n10 9\\n1 7\\n6 5\\n5 5\\n6 6\\n7 5\\n5 1\\n9 10\\n7 10\\n8 8\\n1 7\\n2 8\\n5 6\\n1 5\\n7 2\\n8 6\\n9 6\\n3 10\\n4 3\\n6 7\\n10 6\\n7 2\\n9 6\\n1 9\\n5 10\\n8 5\\n1 7\\n7 9\\n6 4\\n9 9\\n7 7\\n5 1\\n9 4\\n6 9\\n2 8\\n9 5\\n5 3\\n4 10\\n3 3\\n4 3\\n10 8\\n3 4\\n8 3\\n4 2\\n1 1\\n6 8\\n3 8\\n6 2\\n2 10\\n5 1\\n9 1\\n5 1\\n7 2\\n9 8\\n3 7\\n10 1\\n7 7\\n2 1\\n3 4\\n9 10\\n7 2\\n9 9\\n7 2\\n1 10\\n1 5\\n10 6\\n1 3\\n10 5\\n3 3\\n5 2\\n6 8\\n9 6\\n10 4\\n6 9\\n8 3\\n7 3\\n10 3\\n9 1\\n8 6\\n10 7\\n5 5\\n10 4\\n7 10\\n10 7\\n6 8\\n2 6\\n1 9\\n5 2\\n2 1\\n4 2\\n8 6\\n4 2\\n10 8\\n7 5\\n3 8\\n8 8\\n8 4\\n5 3\\n1 1\\n10 8\\n1 8\\n9 1\\n9 1\\n1 8\\n7 8\\n5 10\\n6 5\\n8 6\\n4 9\\n6 3\\n10 6\\n4 5\\n5 4\\n7 7\\n4 5\\n1 3\\n2 2\\n8 1\\n2 3\\n2 6\\n5 9\\n10 7\\n1 9\\n6 7\\n9 5\\n7 3\\n5 8\\n8 7\\n10 5\\n5 8\\n6 9\\n3 9\\n8 4\\n9 2\\n6 6\\n9 1\\n3 8\\n4 9\\n3 8\\n10 1\\n8 1\\n8 5\\n4 10\\n2 4\\n2 9\\n2 1\\n2 6\\n7 9\\n2 4\\n7 7\\n4 5\\n1 2\\n1 3\\n9 9\\n2 8\\n2 5\\n4 2\\n3 6\\n10 9\\n2 8\\n8 3\\n9 8\\n9 8\\n1 3\\n6 2\\n2 6\\n10 5\\n4 9\\n10 3\\n3 3\\n9 4\\n10 7\\n3 6\\n1 5\\n2 4\\n7 4\\n4 7\\n8 6\\n4 10\\n5 6\\n2 6\\n6 5\\n3 6\\n5 1\\n3 5\\n7 9\\n8 2\\n8 8\\n3 1\\n10 10\\n3 9\\n2 9\\n1 2\\n4 8\\n6 6\\n2 1\\n5 2\\n3 9\\n3 7\\n5 10\\n6 4\\n9 6\\n9 6\\n9 2\\n1 7\\n2 4\\n4 3\\n1 4\\n2 10\\n7 10\\n4 10\\n8 10\\n10 5\\n4 8\\n10 9\\n6 9\\n3 1\\n3 9\\n2 9\\n5 5\\n5 6\\n9 1\\n1 10\\n4 7\\n9 5\\n4 9\\n10 2\\n2 6\\n4 2\\n9 3\\n7 10\\n1 9\\n3 6\\n9 9\\n9 9\\n7 5\\n2 4\\n1 9\\n8 3\\n3 7\\n9 8\\n9 9\\n7 2\\n1 6\\n7 5\\n7 1\\n9 7\\n8 5\\n2 1\\n7 9\\n2 4\\n2 5\\n7 4\\n6 7\\n1 6\\n7 1\\n2 8\\n9 7\\n5 8\\n4 3\\n7 10\\n6 10\\n2 7\\n1 6\\n7 3\\n9 7\\n1 8\\n7 7\\n1 4\\n1 5\\n10 7\\n8 2\\n7 3\\n2 10\\n8 3\\n5 6\\n4 4\\n4 9\\n7 4\\n6 4\\n4 9\\n7 2\\n3 8\\n10 2\\n8 9\\n3 2\\n1 4\\n1 5\\n8 1\\n8 1\\n4 10\\n9 7\\n6 8\\n4 10\\n3 2\\n10 10\\n1 8\\n3 9\\n1 6\\n6 7\\n10 1\\n8 10\\n6 5\\n5 9\\n6 10\\n7 7\\n1 8\\n1 10\\n7 2\\n5 10\\n9 3\\n9 9\\n2 9\\n6 9\\n4 8\\n4 10\\n2 9\\n9 10\\n8 8\\n9 10\\n3 7\\n4 9\\n6 10\\n10 1\\n7 4\\n2 8\\n6 9\\n5 3\\n8 10\\n5 2\\n5 3\\n7 5\\n8 4\\n7 9\\n5 7\\n9 8\\n8 7\\n5 9\\n4 6\\n6 5\\n10 5\\n2 7\\n10 4\\n3 5\\n10 10\\n5 2\\n1 5\\n1 3\\n9 4\\n217\\n8 7\\n3 3\\n7 1\\n9 5\\n6 4\\n6 8\\n2 3\\n4 1\\n9 7\\n1 7\\n3 3\\n7 5\\n2 9\\n1 1\\n3 5\\n1 1\\n5 9\\n1 7\\n7 1\\n8 8\\n3 1\\n1 4\\n8 1\\n4 2\\n1 5\\n7 5\\n4 8\\n3 7\\n3 10\\n3 6\\n7 3\\n8 10\\n4 9\\n2 8\\n2 1\\n10 3\\n9 3\\n10 3\\n8 10\\n5 10\\n1 3\\n4 7\\n6 6\\n8 9\\n2 5\\n5 10\\n5 5\\n1 8\\n2 1\\n6 8\\n2 6\\n10 7\\n8 10\\n1 5\\n7 3\\n7 1\\n10 1\\n1 8\\n8 4\\n9 3\\n9 8\\n7 8\\n10 7\\n2 8\\n7 8\\n1 6\\n7 2\\n8 8\\n8 6\\n6 6\\n4 7\\n4 10\\n3 1\\n5 1\\n4 9\\n4 9\\n10 4\\n9 7\\n5 4\\n2 7\\n7 7\\n7 9\\n1 4\\n9 2\\n1 2\\n5 2\\n8 9\\n9 2\\n2 9\\n9 10\\n8 10\\n5 3\\n9 6\\n1 2\\n9 9\\n6 5\\n5 9\\n10 7\\n3 5\\n8 6\\n1 3\\n5 4\\n3 5\\n9 8\\n9 3\\n4 8\\n2 2\\n10 10\\n2 7\\n8 5\\n8 8\\n9 3\\n4 5\\n10 4\\n6 7\\n4 10\\n3 1\\n5 1\\n10 7\\n9 10\\n5 6\\n3 7\\n4 10\\n5 10\\n6 10\\n9 3\\n7 2\\n7 2\\n6 2\\n7 7\\n8 6\\n9 9\\n1 3\\n3 9\\n9 3\\n6 5\\n7 2\\n9 8\\n1 9\\n8 7\\n10 10\\n3 8\\n7 9\\n7 4\\n1 10\\n1 7\\n3 7\\n5 9\\n6 7\\n4 5\\n8 4\\n8 6\\n1 6\\n6 5\\n3 2\\n10 3\\n7 1\\n5 6\\n3 1\\n7 10\\n2 5\\n8 5\\n2 8\\n4 5\\n3 3\\n4 9\\n9 4\\n5 10\\n1 7\\n10 5\\n8 8\\n8 5\\n8 10\\n10 10\\n8 5\\n9 9\\n6 1\\n7 10\\n2 3\\n8 4\\n3 3\\n2 2\\n6 7\\n8 8\\n7 2\\n4 9\\n5 1\\n9 7\\n8 4\\n3 9\\n5 10\\n10 3\\n10 10\\n7 9\\n6 7\\n6 9\\n4 8\\n1 8\\n4 3\\n4 3\\n3 5\\n7 6\\n1 9\\n6 6\\n2 7\\n3 9\\n8 5\\n7 2\\n3 8\\n6 3\\n5 9\\n9 8\\n1 6\\n4 9\\n10 1\\n3 10\\n2 3\\n896\\n1 4\\n3 3\\n5 4\\n7 6\\n3 3\\n4 10\\n6 8\\n6 10\\n8 2\\n9 1\\n7 8\\n7 8\\n5 4\\n6 5\\n6 2\\n3 10\\n10 2\\n5 10\\n6 7\\n3 4\\n6 3\\n3 8\\n5 8\\n8 3\\n7 7\\n2 8\\n8 10\\n6 8\\n5 10\\n1 8\\n4 3\\n8 5\\n2 4\\n3 7\\n8 7\\n8 10\\n4 10\\n3 10\\n7 4\\n5 1\\n8 6\\n6 4\\n10 10\\n4 3\\n2 7\\n8 8\\n6 2\\n4 5\\n8 1\\n4 6\\n3 2\\n9 8\\n7 9\\n1 9\\n9 2\\n2 6\\n6 1\\n8 5\\n9 4\\n7 3\\n8 3\\n1 9\\n5 6\\n4 8\\n2 10\\n4 1\\n4 7\\n8 9\\n9 10\\n2 8\\n3 4\\n6 9\\n6 10\\n4 8\\n9 10\\n10 5\\n8 4\\n8 7\\n7 9\\n7 1\\n10 5\\n8 3\\n7 1\\n3 6\\n9 1\\n2 6\\n9 4\\n6 2\\n9 10\\n9 2\\n9 6\\n9 4\\n3 6\\n7 10\\n7 6\\n2 8\\n1 1\\n5 7\\n5 6\\n7 9\\n10 7\\n7 3\\n3 5\\n8 6\\n9 4\\n2 3\\n4 5\\n4 4\\n4 6\\n7 3\\n7 1\\n3 4\\n8 7\\n4 4\\n7 4\\n7 4\\n3 3\\n3 4\\n7 8\\n2 2\\n5 5\\n2 4\\n10 4\\n4 2\\n2 1\\n5 8\\n9 2\\n10 9\\n1 8\\n8 8\\n4 1\\n3 1\\n10 9\\n10 2\\n5 9\\n6 6\\n6 3\\n2 5\\n2 6\\n9 1\\n3 3\\n9 3\\n8 8\\n6 2\\n8 6\\n2 8\\n5 1\\n8 6\\n3 1\\n3 2\\n4 9\\n2 3\\n2 7\\n8 1\\n4 10\\n2 6\\n7 2\\n10 10\\n10 3\\n3 3\\n9 6\\n2 8\\n8 8\\n7 7\\n4 1\\n4 4\\n1 7\\n1 10\\n7 10\\n9 9\\n7 10\\n10 8\\n3 5\\n9 7\\n7 5\\n7 2\\n7 2\\n8 5\\n1 8\\n2 5\\n7 6\\n10 1\\n4 6\\n4 2\\n2 2\\n3 3\\n8 10\\n4 3\\n1 7\\n7 1\\n4 4\\n3 6\\n6 5\\n6 8\\n4 5\\n3 9\\n2 4\\n3 10\\n4 5\\n7 2\\n3 9\\n3 6\\n6 8\\n1 9\\n4 9\\n10 3\\n1 8\\n6 10\\n4 5\\n1 9\\n2 10\\n7 4\\n3 2\\n8 1\\n7 6\\n4 5\\n2 3\\n6 3\\n4 2\\n3 3\\n10 4\\n5 10\\n4 6\\n9 3\\n4 9\\n4 9\\n7 7\\n1 8\\n10 2\\n6 7\\n3 10\\n2 5\\n7 1\\n1 10\\n3 2\\n8 8\\n6 2\\n6 3\\n3 4\\n4 5\\n10 10\\n6 2\\n5 5\\n9 7\\n6 10\\n1 3\\n5 5\\n3 10\\n5 3\\n9 3\\n10 4\\n8 10\\n4 5\\n3 9\\n5 8\\n10 1\\n8 5\\n7 8\\n5 8\\n4 9\\n3 8\\n8 4\\n1 8\\n7 7\\n6 6\\n3 9\\n4 3\\n7 7\\n9 3\\n3 4\\n3 3\\n10 3\\n5 6\\n5 4\\n1 1\\n7 2\\n7 5\\n10 7\\n10 8\\n10 2\\n10 4\\n1 9\\n7 8\\n5 6\\n3 7\\n5 5\\n6 8\\n1 10\\n2 3\\n10 2\\n8 1\\n8 9\\n9 1\\n7 8\\n1 4\\n4 3\\n4 3\\n8 10\\n2 6\\n3 1\\n9 6\\n3 3\\n9 10\\n7 8\\n7 3\\n4 1\\n10 8\\n6 5\\n8 8\\n5 9\\n3 5\\n5 1\\n10 1\\n5 8\\n7 1\\n1 10\\n2 8\\n6 9\\n5 7\\n10 1\\n9 8\\n6 1\\n7 9\\n7 6\\n5 10\\n4 6\\n5 3\\n1 8\\n8 5\\n5 5\\n7 5\\n2 7\\n4 10\\n1 2\\n8 10\\n5 9\\n2 2\\n8 8\\n2 6\\n3 10\\n7 8\\n9 10\\n3 5\\n8 3\\n1 2\\n9 5\\n4 2\\n8 5\\n5 6\\n9 3\\n3 8\\n9 8\\n1 8\\n3 6\\n1 3\\n5 8\\n5 1\\n4 1\\n3 8\\n2 3\\n10 5\\n6 6\\n1 2\\n9 9\\n4 3\\n5 5\\n3 5\\n9 4\\n2 5\\n3 5\\n9 2\\n8 9\\n4 6\\n6 6\\n8 3\\n9 10\\n8 5\\n3 3\\n4 10\\n9 8\\n9 2\\n2 1\\n4 5\\n10 3\\n5 10\\n5 8\\n3 2\\n8 7\\n9 5\\n7 1\\n5 2\\n3 9\\n4 3\\n4 2\\n6 5\\n2 5\\n5 4\\n6 5\\n9 9\\n4 2\\n3 2\\n5 3\\n8 1\\n7 7\\n7 5\\n5 7\\n10 2\\n10 10\\n10 3\\n7 1\\n4 3\\n1 10\\n10 10\\n7 3\\n3 2\\n8 2\\n2 6\\n8 1\\n4 2\\n5 9\\n1 9\\n10 3\\n9 8\\n2 10\\n3 5\\n3 5\\n7 3\\n10 5\\n5 2\\n6 3\\n4 10\\n7 5\\n3 9\\n4 2\\n10 4\\n2 6\\n4 7\\n3 7\\n9 9\\n8 1\\n4 3\\n1 5\\n10 4\\n10 1\\n2 8\\n6 8\\n3 4\\n1 9\\n2 6\\n7 3\\n3 9\\n9 2\\n2 6\\n9 5\\n8 4\\n5 8\\n2 6\\n1 3\\n3 7\\n10 10\\n1 7\\n4 6\\n2 5\\n4 8\\n10 9\\n2 1\\n8 4\\n4 4\\n2 4\\n9 2\\n4 6\\n8 2\\n4 9\\n5 8\\n4 5\\n10 7\\n1 7\\n5 8\\n3 1\\n2 2\\n3 2\\n6 9\\n1 3\\n1 8\\n1 9\\n1 8\\n3 10\\n2 4\\n7 5\\n3 7\\n9 4\\n6 4\\n10 9\\n6 3\\n8 3\\n4 8\\n5 2\\n3 8\\n5 2\\n10 1\\n8 2\\n2 5\\n6 1\\n6 3\\n3 8\\n7 6\\n7 6\\n10 2\\n7 2\\n5 5\\n6 1\\n2 2\\n1 7\\n9 7\\n7 5\\n8 6\\n7 4\\n4 10\\n9 5\\n3 9\\n3 5\\n7 10\\n7 5\\n3 3\\n6 4\\n5 4\\n9 7\\n3 5\\n9 10\\n5 7\\n3 1\\n5 9\\n10 9\\n3 5\\n4 1\\n2 9\\n1 4\\n8 3\\n3 7\\n5 2\\n7 2\\n1 8\\n10 1\\n3 8\\n6 10\\n5 5\\n10 10\\n8 9\\n1 1\\n1 5\\n5 9\\n4 10\\n8 4\\n3 9\\n3 10\\n6 6\\n3 2\\n5 7\\n2 7\\n6 8\\n5 4\\n9 1\\n7 9\\n10 7\\n1 1\\n3 8\\n10 6\\n3 5\\n5 1\\n5 4\\n4 5\\n6 1\\n8 10\\n8 5\\n2 6\\n1 1\\n6 10\\n7 2\\n10 1\\n4 2\\n6 8\\n5 8\\n2 2\\n7 2\\n9 9\\n8 8\\n7 2\\n6 9\\n9 9\\n6 5\\n3 6\\n4 6\\n10 4\\n3 3\\n4 4\\n2 9\\n3 5\\n9 1\\n3 10\\n10 1\\n2 3\\n10 2\\n10 6\\n9 9\\n5 3\\n9 3\\n8 2\\n2 3\\n1 6\\n8 9\\n9 5\\n5 3\\n6 9\\n2 9\\n9 9\\n5 3\\n1 7\\n5 10\\n8 5\\n2 8\\n3 10\\n6 10\\n7 2\\n1 6\\n1 10\\n10 5\\n5 3\\n1 8\\n10 9\\n7 7\\n8 10\\n8 5\\n3 4\\n5 4\\n5 10\\n9 1\\n8 6\\n10 1\\n8 1\\n3 8\\n5 8\\n2 3\\n5 8\\n2 8\\n3 3\\n9 7\\n5 2\\n8 4\\n4 8\\n5 1\\n7 7\\n1 8\\n4 9\\n4 6\\n2 1\\n8 1\\n3 10\\n9 9\\n2 9\\n3 7\\n1 3\\n9 7\\n7 2\\n2 2\\n5 5\\n9 2\\n6 9\\n10 1\\n1 4\\n4 4\\n5 2\\n6 5\\n4 1\\n9 1\\n2 6\\n6 5\\n8 3\\n10 1\\n8 5\\n9 7\\n3 7\\n1 10\\n9 9\\n9 4\\n7 5\\n1 8\\n10 9\\n7 9\\n9 2\\n1 9\\n10 5\\n3 10\\n9 2\\n2 1\\n9 9\\n3 4\\n1 8\\n2 4\\n9 3\\n7 1\\n5 10\\n10 6\\n1 7\\n8 1\\n1 5\\n3 10\\n3 6\\n8 4\\n5 7\\n6 3\\n5 9\\n4 10\\n8 7\\n3 7\\n4 3\\n1 6\\n7 3\\n5 10\\n6 5\\n9 10\\n5 9\\n1 3\\n10 3\\n6 2\\n8 9\\n3 1\\n8 2\\n8 1\\n7 1\\n1 6\\n7 6\\n8 8\\n8 8\\n4 4\\n2 6\\n4 6\\n6 10\\n4 2\\n1 6\\n3 5\\n6 10\\n10 10\\n2 2\\n4 8\\n7 2\\n2 4\\n8 7\\n1 4\\n10 2\\n9 5\\n2 6\\n1 4\\n3 6\\n6 6\\n10 3\\n6 6\\n9 10\\n7 4\\n9 3\\n8 10\\n5 4\\n4 2\\n9 2\\n5 4\\n4 4\\n9 3\\n2 5\\n10 9\\n7 7\\n2 9\\n4 7\\n7 10\\n1 5\\n4 1\\n6 1\\n5 10\\n6 8\\n6 2\\n7 3\\n9 2\\n4 1\\n3 8\\n2 9\\n6 3\\n7 7\\n7 4\\n8 3\\n10 4\\n4 1\\n6 3\\n10 1\\n4 6\\n3 1\\n6 7\\n8 6\\n10 5\\n1 10\\n4 5\\n8 8\\n10 10\\n2 7\\n10 4\\n8 1\\n1 4\\n2 10\\n2 3\\n4 9\\n7 10\\n1 2\\n10 1\\n10 10\\n5 10\\n7 6\\n6 5\\n7 4\\n8 7\\n6 2\\n10 2\\n9 5\\n9 1\\n1 8\\n8 3\\n3 7\\n2 1\\n8 7\\n4 6\\n3 2\\n9 7\\n4 5\\n10 3\\n8 1\\n6 6\\n3 6\\n8 1\\n2 8\\n6 6\\n5 2\\n7 5\\n4 1\\n8 2\\n3 10\\n3 10\\n5 9\\n6 6\\n10 6\\n7 6\\n5 3\\n5 10\\n9 9\\n9 9\\n6 2\\n9 3\\n3 6\\n8 6\\n3 10\\n3 6\\n5 4\\n6 2\\n7 5\\n6 1\\n8 2\\n10 8\\n9 2\\n4 9\\n2 8\\n5 2\\n7 10\\n8 1\\n6 5\\n5 10\\n6 7\\n6 5\\n7 4\\n7 4\\n8 1\\n10 3\\n6 10\\n7 1\\n10 3\\n8 7\\n2 2\\n10 4\\n5 3\\n9 6\\n1 7\\n4 10\\n3 8\\n1 1\\n7 2\\n9 3\\n7 5\\n3 2\\n8 7\\n4 6\\n2 3\\n7 1\\n611\\n1 9\\n5 6\\n3 6\\n3 1\\n5 9\\n10 1\\n7 8\\n10 1\\n5 3\\n2 6\\n1 7\\n5 4\\n6 5\\n7 8\\n1 3\\n7 10\\n1 2\\n7 6\\n1 7\\n9 2\\n2 1\\n9 1\\n2 3\\n6 6\\n6 10\\n8 8\\n7 5\\n9 6\\n8 2\\n3 2\\n7 2\\n8 4\\n6 2\\n9 10\\n8 6\\n2 5\\n6 2\\n1 3\\n4 5\\n4 5\\n2 4\\n6 2\\n3 4\\n2 10\\n1 2\\n10 6\\n6 3\\n1 9\\n8 6\\n4 1\\n10 6\\n7 4\\n7 7\\n9 9\\n6 9\\n6 1\\n4 1\\n2 9\\n4 1\\n1 10\\n3 9\\n3 3\\n6 5\\n8 2\\n2 3\\n6 3\\n3 6\\n10 2\\n9 7\\n3 1\\n4 1\\n7 5\\n10 1\\n8 2\\n9 6\\n2 6\\n6 10\\n5 9\\n10 3\\n5 7\\n1 7\\n8 4\\n8 1\\n8 5\\n2 7\\n9 1\\n1 5\\n2 9\\n10 6\\n3 8\\n10 6\\n1 5\\n3 4\\n8 7\\n7 2\\n6 7\\n6 4\\n6 8\\n4 7\\n8 1\\n10 1\\n10 8\\n6 6\\n10 3\\n4 10\\n8 7\\n9 3\\n8 7\\n8 5\\n5 10\\n6 7\\n7 3\\n7 9\\n1 6\\n5 3\\n7 10\\n7 1\\n9 9\\n7 6\\n6 9\\n1 5\\n3 2\\n5 8\\n1 8\\n10 7\\n9 1\\n9 1\\n8 1\\n3 4\\n7 8\\n1 3\\n1 8\\n8 5\\n9 8\\n4 9\\n1 9\\n6 7\\n6 10\\n2 10\\n2 2\\n1 5\\n2 10\\n6 5\\n7 5\\n4 5\\n6 3\\n7 9\\n6 3\\n8 2\\n6 1\\n6 7\\n3 10\\n2 7\\n4 8\\n2 8\\n10 8\\n10 5\\n5 5\\n4 7\\n8 10\\n2 1\\n8 8\\n1 7\\n4 7\\n9 4\\n8 10\\n5 8\\n7 7\\n8 3\\n8 5\\n3 4\\n4 4\\n6 2\\n4 3\\n2 6\\n5 4\\n9 3\\n8 5\\n5 4\\n3 7\\n4 5\\n4 5\\n2 6\\n3 9\\n10 5\\n9 2\\n10 3\\n4 3\\n5 6\\n3 10\\n5 2\\n9 4\\n7 2\\n7 6\\n6 2\\n6 8\\n7 2\\n10 6\\n9 1\\n3 2\\n9 7\\n3 5\\n8 6\\n3 8\\n3 7\\n6 1\\n2 3\\n2 6\\n4 5\\n3 6\\n2 1\\n4 9\\n6 9\\n9 6\\n2 8\\n5 1\\n7 9\\n6 5\\n5 1\\n1 4\\n10 2\\n8 3\\n2 4\\n4 8\\n1 2\\n1 2\\n3 6\\n8 7\\n10 2\\n5 7\\n5 5\\n9 6\\n7 1\\n2 2\\n2 4\\n8 3\\n8 1\\n10 10\\n8 1\\n9 2\\n7 8\\n3 10\\n2 3\\n9 6\\n2 4\\n9 9\\n5 6\\n3 7\\n4 7\\n3 2\\n8 1\\n7 3\\n9 4\\n5 1\\n8 2\\n8 7\\n4 4\\n5 9\\n4 4\\n5 8\\n7 8\\n5 2\\n6 4\\n4 1\\n6 10\\n2 4\\n2 5\\n9 3\\n10 6\\n4 3\\n9 7\\n5 7\\n6 6\\n3 5\\n4 6\\n5 8\\n10 5\\n10 10\\n4 7\\n5 3\\n6 6\\n6 2\\n3 10\\n10 3\\n10 8\\n5 4\\n5 10\\n3 4\\n8 1\\n9 8\\n7 3\\n6 7\\n3 5\\n3 7\\n5 10\\n2 7\\n4 10\\n7 9\\n3 7\\n7 7\\n5 7\\n5 8\\n8 1\\n8 1\\n9 2\\n5 10\\n6 7\\n8 7\\n2 4\\n2 7\\n3 9\\n1 7\\n6 8\\n8 7\\n7 3\\n2 5\\n1 7\\n10 1\\n1 6\\n4 2\\n7 7\\n10 6\\n8 8\\n7 9\\n4 7\\n6 8\\n10 1\\n5 1\\n10 8\\n1 7\\n10 5\\n5 9\\n9 8\\n8 8\\n7 5\\n2 8\\n6 4\\n3 1\\n6 4\\n2 10\\n5 1\\n8 5\\n9 7\\n5 1\\n3 2\\n10 3\\n3 8\\n7 9\\n7 2\\n9 7\\n3 3\\n7 10\\n5 3\\n2 4\\n10 7\\n6 7\\n4 8\\n9 9\\n5 5\\n5 9\\n8 3\\n1 2\\n2 7\\n3 2\\n1 7\\n7 4\\n8 2\\n9 3\\n2 1\\n4 1\\n10 2\\n2 1\\n10 4\\n2 4\\n3 4\\n6 5\\n6 2\\n10 4\\n9 4\\n9 10\\n7 3\\n5 2\\n8 6\\n8 2\\n4 2\\n3 8\\n10 2\\n1 4\\n5 3\\n9 1\\n9 2\\n5 7\\n10 7\\n6 7\\n7 6\\n9 6\\n4 10\\n1 5\\n6 1\\n6 5\\n9 10\\n6 8\\n6 7\\n9 9\\n9 9\\n7 8\\n8 8\\n1 7\\n4 3\\n10 1\\n8 9\\n8 9\\n5 8\\n3 9\\n6 10\\n2 8\\n2 7\\n3 9\\n2 1\\n5 8\\n4 5\\n2 2\\n6 5\\n10 6\\n1 1\\n4 7\\n10 5\\n10 7\\n6 1\\n1 5\\n8 2\\n5 7\\n5 3\\n10 9\\n6 10\\n5 2\\n3 3\\n10 6\\n5 5\\n2 5\\n4 3\\n2 4\\n3 3\\n5 4\\n10 10\\n3 3\\n7 9\\n4 8\\n6 9\\n7 2\\n10 3\\n1 1\\n4 1\\n8 6\\n7 7\\n6 6\\n1 6\\n2 10\\n9 9\\n2 6\\n8 4\\n9 10\\n1 9\\n7 10\\n4 10\\n4 3\\n8 4\\n2 3\\n8 6\\n5 2\\n10 5\\n8 2\\n6 5\\n1 5\\n8 1\\n9 10\\n1 6\\n1 3\\n5 1\\n2 6\\n1 8\\n8 8\\n2 7\\n4 3\\n7 9\\n10 9\\n9 10\\n8 7\\n8 2\\n7 7\\n5 4\\n4 10\\n10 2\\n9 2\\n6 6\\n4 1\\n4 10\\n7 2\\n2 5\\n5 8\\n9 3\\n5 6\\n10 10\\n5 5\\n4 8\\n1 1\\n4 1\\n4 2\\n7 2\\n6 2\\n8 1\\n10 1\\n9 2\\n10 1\\n3 5\\n8 6\\n4 7\\n4 6\\n3 4\\n10 5\\n4 4\\n4 3\\n5 6\\n2 10\\n2 1\\n3 6\\n4 10\\n3 6\\n1 9\\n4 1\\n4 3\\n8 4\\n3 8\\n4 6\\n5 6\\n2 9\\n9 4\\n8 5\\n3 9\\n10 4\\n9 4\\n7 2\\n7 2\\n9 8\\n6 1\\n5 2\\n4 8\\n6 1\\n2 1\\n10 1\\n2 4\\n5 4\\n8 5\\n9 9\\n5 1\\n7 9\\n4 8\\n7 2\\n4 5\\n1 7\\n7 10\\n10 9\\n5 1\\n8 7\\n9 7\\n7 2\\n1 6\\n1 6\\n10 9\\n7 3\\n3 4\\n7 9\\n5 4\\n4 7\\n1 8\\n4 5\\n10 1\\n5 3\\n7 7\\n7 1\\n10 1\\n3 1\\n7 9\\n9 10\\n6 3\\n5 6\\n3 1\\n3 9\\n9 8\\n10 9\\n9 6\\n1 10\\n2 10\\n1 9\\n6 4\\n10 4\\n2 3\\n5 9\\n2 9\\n5 2\\n3 6\\n2 5\\n1 3\\n9 2\\n1 1\\n8 10\\n3 5\\n4 1\\n2 10\\n1 1\\n2 8\\n876\\n9 6\\n4 10\\n3 5\\n5 6\\n3 1\\n2 8\\n10 2\\n5 1\\n8 4\\n9 5\\n2 2\\n3 8\\n6 7\\n1 10\\n4 1\\n6 5\\n5 1\\n1 1\\n4 3\\n7 8\\n10 8\\n6 1\\n2 1\\n4 2\\n5 10\\n1 2\\n4 1\\n6 2\\n5 9\\n4 9\\n10 7\\n9 7\\n1 8\\n5 8\\n10 2\\n4 1\\n2 3\\n4 1\\n5 5\\n4 7\\n1 6\\n1 8\\n1 3\\n3 4\\n1 5\\n1 3\\n1 1\\n9 4\\n5 7\\n5 2\\n2 10\\n1 10\\n10 2\\n8 1\\n5 8\\n1 10\\n4 5\\n1 5\\n6 4\\n2 2\\n8 4\\n7 8\\n9 10\\n10 4\\n1 3\\n1 5\\n5 4\\n6 3\\n7 1\\n1 7\\n4 6\\n5 5\\n2 3\\n8 10\\n8 7\\n4 2\\n1 4\\n1 7\\n7 10\\n3 3\\n2 8\\n1 5\\n7 2\\n1 8\\n3 7\\n10 8\\n6 10\\n5 1\\n7 10\\n7 4\\n10 2\\n7 7\\n1 4\\n5 8\\n4 4\\n2 3\\n5 5\\n2 2\\n10 5\\n5 8\\n8 3\\n6 8\\n1 6\\n10 4\\n6 6\\n8 5\\n5 7\\n10 1\\n7 4\\n10 8\\n6 4\\n3 4\\n7 9\\n7 3\\n8 6\\n3 3\\n7 2\\n6 9\\n9 7\\n5 7\\n9 7\\n1 8\\n2 9\\n2 5\\n1 7\\n1 1\\n5 10\\n2 7\\n7 2\\n8 7\\n9 9\\n3 9\\n2 6\\n8 2\\n10 8\\n6 3\\n3 3\\n1 10\\n4 10\\n7 7\\n6 2\\n8 4\\n2 10\\n3 7\\n5 9\\n2 2\\n7 9\\n7 9\\n2 2\\n10 4\\n5 8\\n8 3\\n10 10\\n9 1\\n6 3\\n6 3\\n1 2\\n1 7\\n3 3\\n6 9\\n10 4\\n5 9\\n7 9\\n1 5\\n4 6\\n2 4\\n5 4\\n10 4\\n4 5\\n9 5\\n8 3\\n3 6\\n10 9\\n5 3\\n6 1\\n1 1\\n2 2\\n4 1\\n10 10\\n1 9\\n3 8\\n2 2\\n7 5\\n10 7\\n8 10\\n6 1\\n10 9\\n8 3\\n5 1\\n7 10\\n7 9\\n10 6\\n2 9\\n10 6\\n10 9\\n4 2\\n2 1\\n3 2\\n6 10\\n3 3\\n5 6\\n2 3\\n8 5\\n4 4\\n9 9\\n5 1\\n7 4\\n10 3\\n9 6\\n4 6\\n4 10\\n10 7\\n4 4\\n4 9\\n8 6\\n1 7\\n2 3\\n4 2\\n5 4\\n8 6\\n5 9\\n1 9\\n5 9\\n4 5\\n4 3\\n6 9\\n6 1\\n5 5\\n3 4\\n3 9\\n6 5\\n9 3\\n9 8\\n3 4\\n2 5\\n1 1\\n5 10\\n1 3\\n9 7\\n3 10\\n3 7\\n7 5\\n5 5\\n2 2\\n4 5\\n6 5\\n6 1\\n1 9\\n6 4\\n5 9\\n9 1\\n10 10\\n9 2\\n10 9\\n1 6\\n8 2\\n5 6\\n10 5\\n7 3\\n9 10\\n5 9\\n8 9\\n10 8\\n10 2\\n6 10\\n2 2\\n5 6\\n2 6\\n10 8\\n9 2\\n9 7\\n1 6\\n10 10\\n7 10\\n5 8\\n2 8\\n8 9\\n2 9\\n5 2\\n6 8\\n7 1\\n8 7\\n9 6\\n9 1\\n5 4\\n3 4\\n7 8\\n9 1\\n7 7\\n9 9\\n7 7\\n2 10\\n2 5\\n3 5\\n1 7\\n5 7\\n4 6\\n7 9\\n7 3\\n9 3\\n5 4\\n6 4\\n9 10\\n1 5\\n6 9\\n10 6\\n6 7\\n9 1\\n4 3\\n6 5\\n9 7\\n10 9\\n7 9\\n6 3\\n9 3\\n8 5\\n3 5\\n8 9\\n6 5\\n5 10\\n2 3\\n3 3\\n8 7\\n5 8\\n8 2\\n2 6\\n9 1\\n8 9\\n4 5\\n4 2\\n6 3\\n9 1\\n4 3\\n5 3\\n6 1\\n3 8\\n4 6\\n10 8\\n10 6\\n7 5\\n1 7\\n7 1\\n4 3\\n10 1\\n10 4\\n9 10\\n7 6\\n6 2\\n10 2\\n6 7\\n5 1\\n1 8\\n3 3\\n6 9\\n5 9\\n7 5\\n1 9\\n10 6\\n7 3\\n8 4\\n6 7\\n1 10\\n1 9\\n2 1\\n7 9\\n8 4\\n1 10\\n2 9\\n1 4\\n4 4\\n8 6\\n1 3\\n9 9\\n3 4\\n8 8\\n5 9\\n9 7\\n5 1\\n9 7\\n6 1\\n2 8\\n5 7\\n6 3\\n5 4\\n7 6\\n4 10\\n2 6\\n3 3\\n2 1\\n2 5\\n10 1\\n6 3\\n2 3\\n1 6\\n4 1\\n1 9\\n10 1\\n1 7\\n5 2\\n7 9\\n7 10\\n4 9\\n5 10\\n8 8\\n3 9\\n8 9\\n1 9\\n6 7\\n5 1\\n6 2\\n10 1\\n6 6\\n6 5\\n1 4\\n2 4\\n8 1\\n4 3\\n8 6\\n2 8\\n4 10\\n1 8\\n1 1\\n1 3\\n3 6\\n4 5\\n1 3\\n2 6\\n6 2\\n6 4\\n1 5\\n3 5\\n3 1\\n7 6\\n7 6\\n3 6\\n2 1\\n6 8\\n7 7\\n1 2\\n1 3\\n9 9\\n10 7\\n10 10\\n5 10\\n4 3\\n4 5\\n1 4\\n8 1\\n5 8\\n8 9\\n3 2\\n9 2\\n3 10\\n8 9\\n3 10\\n1 8\\n10 1\\n9 2\\n10 2\\n7 4\\n6 1\\n8 9\\n9 9\\n5 7\\n1 1\\n10 9\\n9 5\\n8 8\\n3 10\\n6 3\\n6 7\\n8 4\\n6 5\\n1 4\\n9 9\\n3 5\\n6 8\\n7 2\\n6 3\\n7 5\\n9 2\\n8 8\\n9 2\\n3 2\\n7 5\\n3 2\\n2 8\\n9 9\\n3 4\\n9 2\\n7 9\\n2 10\\n9 7\\n9 3\\n10 6\\n1 8\\n4 2\\n2 7\\n10 8\\n9 4\\n5 8\\n4 8\\n4 1\\n7 6\\n3 6\\n1 1\\n10 9\\n10 7\\n9 4\\n2 4\\n6 4\\n10 6\\n9 4\\n9 5\\n8 9\\n5 6\\n2 4\\n7 1\\n6 9\\n10 1\\n3 1\\n5 1\\n1 5\\n7 9\\n9 1\\n6 10\\n2 2\\n8 9\\n7 4\\n10 5\\n10 1\\n2 4\\n5 9\\n2 8\\n10 2\\n4 3\\n9 1\\n5 2\\n4 7\\n3 2\\n5 6\\n10 4\\n6 9\\n2 10\\n8 4\\n5 1\\n10 10\\n4 9\\n6 5\\n4 10\\n5 1\\n3 4\\n7 1\\n3 7\\n10 8\\n6 4\\n6 7\\n2 5\\n1 3\\n10 1\\n2 9\\n10 2\\n1 10\\n1 1\\n9 3\\n4 7\\n5 1\\n5 7\\n2 5\\n7 5\\n9 2\\n3 6\\n7 7\\n7 5\\n2 9\\n6 1\\n10 4\\n10 4\\n7 10\\n3 7\\n6 8\\n4 10\\n7 1\\n6 6\\n3 3\\n1 2\\n4 3\\n3 3\\n5 7\\n3 6\\n4 10\\n10 5\\n5 10\\n8 2\\n10 3\\n1 5\\n10 5\\n2 2\\n8 9\\n8 4\\n8 2\\n1 5\\n10 2\\n9 2\\n10 6\\n2 10\\n5 5\\n4 1\\n6 10\\n9 1\\n10 9\\n6 7\\n10 9\\n2 2\\n4 2\\n2 10\\n6 2\\n9 5\\n9 10\\n6 6\\n6 4\\n3 5\\n6 1\\n9 7\\n3 7\\n8 1\\n7 2\\n8 9\\n5 1\\n2 3\\n2 7\\n7 4\\n7 3\\n4 2\\n3 5\\n10 2\\n2 9\\n6 7\\n4 3\\n1 9\\n3 7\\n7 3\\n7 2\\n10 8\\n5 5\\n8 6\\n8 7\\n5 9\\n10 9\\n4 10\\n7 9\\n5 7\\n8 5\\n6 10\\n4 3\\n7 3\\n9 9\\n3 2\\n4 9\\n5 3\\n10 4\\n1 1\\n3 1\\n4 7\\n3 3\\n7 9\\n7 3\\n4 4\\n5 1\\n9 3\\n4 6\\n8 2\\n1 8\\n10 7\\n10 7\\n9 1\\n10 5\\n3 1\\n9 5\\n6 8\\n6 4\\n1 9\\n9 6\\n1 5\\n8 8\\n5 5\\n8 5\\n5 7\\n2 1\\n10 3\\n10 8\\n1 2\\n3 7\\n2 4\\n10 6\\n2 7\\n4 3\\n4 4\\n4 4\\n5 7\\n10 1\\n3 5\\n3 5\\n5 2\\n1 5\\n5 3\\n3 8\\n3 4\\n7 2\\n10 10\\n6 3\\n3 7\\n6 8\\n8 5\\n10 10\\n10 10\\n7 6\\n4 1\\n5 4\\n6 7\\n10 8\\n2 8\\n4 8\\n5 1\\n3 1\\n7 8\\n10 1\\n2 9\\n10 9\\n2 7\\n4 8\\n7 2\\n1 10\\n7 7\\n7 1\\n5 7\\n4 10\\n3 4\\n7 2\\n6 2\\n9 8\\n1 7\\n3 3\\n8 10\\n8 10\\n4 9\\n6 4\\n4 9\\n8 5\\n3 8\\n3 4\\n3 8\\n3 7\\n10 2\\n7 9\\n6 1\\n1 7\\n2 7\\n5 4\\n2 3\\n9 5\\n1 1\\n1 1\\n8 4\\n9 9\\n2 3\\n7 10\\n2 9\\n10 7\\n7 9\\n10 7\\n3 8\\n10 3\\n8 10\\n1 5\\n10 9\\n5 5\\n7 4\\n3 1\\n8 8\\n1 3\\n8 9\\n8 5\\n4 3\\n1 9\\n10 3\\n9 3\\n3 8\\n7 8\\n5 5\\n1 4\\n6 1\\n10 5\\n6 7\\n2 2\\n3 4\\n3 2\\n10 10\\n8 3\\n1 7\\n3 4\\n5 9\\n6 7\\n6 6\\n7 5\\n5 1\\n10 4\\n9 5\\n10 6\\n8 10\\n5 8\\n9 9\\n3 5\\n3 7\\n5 3\\n3 1\\n4 7\\n5 3\\n4 1\\n7 8\\n3 6\\n9 9\\n2 7\\n5 9\\n7 5\\n2 1\\n4 8\\n7 4\\n8 4\\n2 1\\n8 8\\n9 5\\n10 9\\n1 3\\n5 3\\n7 1\\n7 9\\n6 6\\n9 6\\n6 2\\n9 2\\n3 2\\n4 8\\n9 2\\n6 5\\n10 8\\n10 3\\n9 6\\n8 6\\n4 4\\n5 4\\n9 1\\n4 8\\n6 3\\n8 5\\n4 3\\n9 5\\n8 5\\n2 7\\n6 6\\n8 5\\n4 2\\n6 5\\n8 10\\n1 5\\n8 7\\n1 1\\n8 10\\n3 2\\n3 7\\n1 3\\n4 10\\n1 4\\n8 1\\n10 10\\n6 4\\n99\\n2 1\\n6 4\\n4 1\\n10 6\\n2 1\\n7 8\\n1 3\\n2 10\\n1 8\\n6 1\\n6 6\\n2 2\\n6 9\\n5 6\\n8 5\\n10 7\\n3 3\\n9 10\\n7 5\\n7 5\\n6 7\\n2 1\\n5 1\\n7 4\\n10 8\\n6 1\\n6 1\\n3 3\\n5 2\\n4 1\\n7 7\\n6 10\\n5 9\\n3 10\\n1 7\\n4 4\\n6 4\\n6 10\\n4 6\\n8 3\\n8 8\\n3 6\\n1 9\\n1 9\\n3 9\\n1 6\\n7 3\\n5 9\\n6 3\\n4 8\\n6 4\\n7 1\\n2 2\\n3 1\\n5 3\\n6 10\\n3 6\\n3 6\\n1 1\\n2 5\\n1 5\\n7 4\\n6 7\\n9 5\\n9 9\\n3 1\\n5 1\\n6 8\\n3 8\\n9 3\\n3 6\\n10 7\\n10 1\\n2 2\\n2 4\\n7 1\\n4 9\\n6 3\\n1 1\\n2 7\\n2 5\\n7 7\\n5 5\\n10 1\\n1 2\\n2 6\\n4 7\\n6 6\\n1 3\\n7 3\\n10 1\\n1 4\\n8 2\\n2 3\\n2 5\\n2 7\\n7 1\\n8 7\\n1 2\\n788\\n1 10\\n1 9\\n6 7\\n7 2\\n10 1\\n4 10\\n1 3\\n6 9\\n9 8\\n9 6\\n10 7\\n1 7\\n6 4\\n5 5\\n10 9\\n2 6\\n10 7\\n8 3\\n7 5\\n4 4\\n6 2\\n2 1\\n5 10\\n7 3\\n9 3\\n10 7\\n7 6\\n6 3\\n6 10\\n3 5\\n1 8\\n2 10\\n3 5\\n6 9\\n8 5\\n9 7\\n2 1\\n8 5\\n10 4\\n4 10\\n10 9\\n1 7\\n1 8\\n10 7\\n4 8\\n3 4\\n10 3\\n2 2\\n7 10\\n6 7\\n7 5\\n10 9\\n3 1\\n7 4\\n4 9\\n2 8\\n10 7\\n7 2\\n7 1\\n1 6\\n9 4\\n4 6\\n6 9\\n10 1\\n8 3\\n5 2\\n7 1\\n5 4\\n9 8\\n3 5\\n5 6\\n3 4\\n5 9\\n2 2\\n5 10\\n1 3\\n9 3\\n6 4\\n6 7\\n4 1\\n1 7\\n10 2\\n6 7\\n6 2\\n1 5\\n3 7\\n1 10\\n8 7\\n9 6\\n2 9\\n4 6\\n8 4\\n10 5\\n4 8\\n10 2\\n4 7\\n3 3\\n9 4\\n3 1\\n5 5\\n1 7\\n9 1\\n5 1\\n3 5\\n3 7\\n4 8\\n10 9\\n2 9\\n8 7\\n1 5\\n5 4\\n1 9\\n10 5\\n6 8\\n2 8\\n5 10\\n6 9\\n5 10\\n1 4\\n9 7\\n7 6\\n4 1\\n2 10\\n5 6\\n6 4\\n4 4\\n1 8\\n5 7\\n6 6\\n9 6\\n7 9\\n8 8\\n7 2\\n8 3\\n2 7\\n8 8\\n10 5\\n8 10\\n10 1\\n7 7\\n8 10\\n8 3\\n8 10\\n10 5\\n10 8\\n10 5\\n9 10\\n4 8\\n4 2\\n8 6\\n9 1\\n8 8\\n7 1\\n3 9\\n5 8\\n10 8\\n7 1\\n4 3\\n7 6\\n10 1\\n5 4\\n4 9\\n6 6\\n9 9\\n6 8\\n8 2\\n4 3\\n3 7\\n8 6\\n8 7\\n5 6\\n5 4\\n2 3\\n1 10\\n1 9\\n10 3\\n2 3\\n2 10\\n7 7\\n2 8\\n7 8\\n7 3\\n3 10\\n6 9\\n10 1\\n8 6\\n3 9\\n5 9\\n3 2\\n6 6\\n5 2\\n1 10\\n1 5\\n1 4\\n4 2\\n1 10\\n1 1\\n9 9\\n10 9\\n7 6\\n8 7\\n1 2\\n10 8\\n10 10\\n2 8\\n10 3\\n4 2\\n2 1\\n9 9\\n10 1\\n2 9\\n1 1\\n2 9\\n2 2\\n10 6\\n9 8\\n3 10\\n6 5\\n4 3\\n6 6\\n2 9\\n5 6\\n8 9\\n5 6\\n3 8\\n5 5\\n4 6\\n5 8\\n4 7\\n4 8\\n5 7\\n5 2\\n9 6\\n8 1\\n4 2\\n10 9\\n2 10\\n8 9\\n6 9\\n5 8\\n3 9\\n6 8\\n9 4\\n8 7\\n4 7\\n3 1\\n4 2\\n1 1\\n7 8\\n2 8\\n8 7\\n1 3\\n10 2\\n10 9\\n3 8\\n6 4\\n7 3\\n1 9\\n9 5\\n6 10\\n1 8\\n9 1\\n6 1\\n5 10\\n1 7\\n5 5\\n5 5\\n10 9\\n6 9\\n7 2\\n10 1\\n6 10\\n5 1\\n6 9\\n6 7\\n7 4\\n6 6\\n6 5\\n8 3\\n5 5\\n9 6\\n5 5\\n2 6\\n3 1\\n10 2\\n3 9\\n7 5\\n6 9\\n2 5\\n3 9\\n6 6\\n2 2\\n8 6\\n9 6\\n6 8\\n10 5\\n2 1\\n10 9\\n2 5\\n5 1\\n4 3\\n8 6\\n5 9\\n4 9\\n8 7\\n8 5\\n6 8\\n10 4\\n10 2\\n3 5\\n6 2\\n6 2\\n2 7\\n4 9\\n8 3\\n1 9\\n9 9\\n7 1\\n4 6\\n5 5\\n8 2\\n4 7\\n7 10\\n7 6\\n8 9\\n2 5\\n1 9\\n6 7\\n8 9\\n4 3\\n9 7\\n3 9\\n9 8\\n4 5\\n10 7\\n10 6\\n8 8\\n5 3\\n4 4\\n4 3\\n8 9\\n6 6\\n6 8\\n8 8\\n8 9\\n9 3\\n2 7\\n6 7\\n3 2\\n3 6\\n10 6\\n1 2\\n3 9\\n3 5\\n7 2\\n1 10\\n6 2\\n3 10\\n5 5\\n7 10\\n3 5\\n8 1\\n10 5\\n8 5\\n7 3\\n10 1\\n10 9\\n2 2\\n3 9\\n6 6\\n6 8\\n1 7\\n3 2\\n10 9\\n10 4\\n3 1\\n5 2\\n2 3\\n2 10\\n6 9\\n5 1\\n5 5\\n6 4\\n10 7\\n2 9\\n3 5\\n7 3\\n2 5\\n1 7\\n6 7\\n9 5\\n7 3\\n3 7\\n9 10\\n1 4\\n9 4\\n9 4\\n1 8\\n6 1\\n5 9\\n5 4\\n6 2\\n2 3\\n2 9\\n1 6\\n3 1\\n10 9\\n2 10\\n3 4\\n1 3\\n3 4\\n3 8\\n5 1\\n1 8\\n3 5\\n3 5\\n3 6\\n9 8\\n10 7\\n5 10\\n5 2\\n1 5\\n9 8\\n9 4\\n9 8\\n1 3\\n3 1\\n7 5\\n7 9\\n7 7\\n10 6\\n6 6\\n10 5\\n4 5\\n2 10\\n9 9\\n2 4\\n6 7\\n7 6\\n8 4\\n2 9\\n10 9\\n7 6\\n3 1\\n4 2\\n4 5\\n10 5\\n9 2\\n9 1\\n10 3\\n4 4\\n10 1\\n9 7\\n4 9\\n4 2\\n5 1\\n2 8\\n5 6\\n4 2\\n8 2\\n1 7\\n3 7\\n5 5\\n9 10\\n1 2\\n7 9\\n8 4\\n4 6\\n3 10\\n8 4\\n3 7\\n9 6\\n8 4\\n3 5\\n6 5\\n6 2\\n9 5\\n9 1\\n6 2\\n2 9\\n1 10\\n6 9\\n4 10\\n7 2\\n5 5\\n1 10\\n7 2\\n8 8\\n9 8\\n4 2\\n1 4\\n5 1\\n1 5\\n3 7\\n10 6\\n6 1\\n5 6\\n6 1\\n2 6\\n5 9\\n7 3\\n9 1\\n3 8\\n2 10\\n10 3\\n5 2\\n9 9\\n1 4\\n2 3\\n4 6\\n3 7\\n6 2\\n10 8\\n5 8\\n2 10\\n2 3\\n9 1\\n10 3\\n5 5\\n7 10\\n10 6\\n10 10\\n6 2\\n7 3\\n9 8\\n6 4\\n10 8\\n7 3\\n5 8\\n4 3\\n8 5\\n4 3\\n3 1\\n6 9\\n9 2\\n8 9\\n3 5\\n6 6\\n6 5\\n4 1\\n3 4\\n9 10\\n6 9\\n3 9\\n7 10\\n10 8\\n3 1\\n7 10\\n6 3\\n7 10\\n10 9\\n3 8\\n7 6\\n3 2\\n7 9\\n9 10\\n2 2\\n4 8\\n5 1\\n3 3\\n3 7\\n8 8\\n10 2\\n1 7\\n10 1\\n10 3\\n8 3\\n1 2\\n6 1\\n3 5\\n9 6\\n10 7\\n10 8\\n8 5\\n1 3\\n5 1\\n9 2\\n4 3\\n4 2\\n1 8\\n2 10\\n1 4\\n9 3\\n9 4\\n9 5\\n9 4\\n2 2\\n8 3\\n1 2\\n2 8\\n6 3\\n2 10\\n2 6\\n6 5\\n1 6\\n8 7\\n3 10\\n3 3\\n2 10\\n5 1\\n6 2\\n10 6\\n5 6\\n10 8\\n1 3\\n2 2\\n9 9\\n8 1\\n8 6\\n9 5\\n8 9\\n1 8\\n7 2\\n6 10\\n9 3\\n3 7\\n9 8\\n7 3\\n2 5\\n7 5\\n7 9\\n6 10\\n7 5\\n3 8\\n3 3\\n10 2\\n10 4\\n9 2\\n9 7\\n8 10\\n8 10\\n8 7\\n4 2\\n1 6\\n10 5\\n1 2\\n5 3\\n10 7\\n4 8\\n4 6\\n1 1\\n2 7\\n3 6\\n10 9\\n1 9\\n5 7\\n9 10\\n4 8\\n1 7\\n7 2\\n8 6\\n3 3\\n8 2\\n5 9\\n8 8\\n10 1\\n7 3\\n7 5\\n10 3\\n1 2\\n6 5\\n1 5\\n4 4\\n1 2\\n1 9\\n10 8\\n2 2\\n5 4\\n3 10\\n2 2\\n6 7\\n6 8\\n6 8\\n4 7\\n9 1\\n1 10\\n6 2\\n7 2\\n8 9\\n1 4\\n9 4\\n3 8\\n4 6\\n7 5\\n10 6\\n1 3\\n2 1\\n2 9\\n6 6\\n2 6\\n6 10\\n1 6\\n9 2\\n4 1\\n2 7\\n2 7\\n4 4\\n10 4\\n6 2\\n2 1\\n6 9\\n2 6\\n7 4\\n3 5\\n3 7\\n5 1\\n5 3\\n6 9\\n9 9\\n5 7\\n7 3\\n8 3\\n8 1\\n4 3\\n4 6\\n3 3\\n10 4\\n2 8\\n3 5\\n4 10\\n2 8\\n5 9\\n1 2\\n2 10\\n4 3\\n4 1\\n6 10\\n7 2\\n7 6\\n7 3\\n8 5\\n2 8\\n6 2\\n1 1\\n7 2\\n8 10\\n3 10\\n8 1\\n9 10\\n10 2\\n1 6\\n2 9\\n8 8\\n4 2\\n10 10\\n4 10\\n6 6\\n5 2\\n4 8\\n9 1\\n9 4\\n4 3\\n10 4\\n10 7\\n1 10\\n8 6\\n8 9\\n3 3\\n9 9\\n6 7\\n7 3\\n2 8\\n10 9\\n2 2\\n7 7\\n6 8\\n9 5\\n8 8\\n4 2\\n1 9\\n10 3\\n8 9\\n3 4\\n9 4\\n7 1\\n9 10\\n4 5\\n1 5\\n9 1\\n8 10\\n4 9\\n5 3\\n3 9\\n5 5\\n4 2\\n5 1\\n4 3\\n5 2\\n178\\n6 2\\n10 10\\n1 1\\n8 6\\n9 9\\n1 7\\n10 3\\n8 6\\n4 2\\n3 10\\n8 6\\n6 6\\n1 1\\n1 5\\n1 5\\n4 4\\n1 6\\n5 5\\n2 8\\n10 6\\n1 9\\n9 4\\n3 9\\n8 3\\n10 9\\n5 8\\n10 4\\n7 5\\n2 10\\n4 1\\n2 7\\n6 4\\n10 6\\n7 6\\n2 8\\n3 6\\n8 2\\n10 4\\n4 8\\n5 7\\n8 2\\n3 8\\n6 1\\n1 7\\n3 7\\n10 10\\n2 9\\n1 10\\n5 3\\n5 7\\n2 6\\n5 9\\n2 8\\n4 5\\n3 8\\n8 2\\n4 4\\n1 3\\n5 1\\n5 10\\n6 8\\n4 8\\n6 8\\n3 7\\n8 6\\n10 2\\n10 6\\n2 8\\n9 4\\n6 4\\n6 5\\n1 4\\n9 10\\n7 2\\n5 5\\n9 9\\n7 2\\n8 1\\n1 3\\n3 2\\n5 4\\n2 3\\n6 2\\n7 2\\n9 9\\n1 8\\n10 2\\n3 2\\n6 9\\n10 8\\n5 4\\n10 7\\n3 6\\n1 6\\n9 5\\n8 1\\n3 6\\n4 3\\n10 5\\n4 8\\n5 10\\n7 6\\n4 8\\n8 9\\n4 5\\n9 1\\n3 8\\n9 4\\n9 2\\n1 9\\n9 2\\n4 2\\n10 3\\n4 7\\n10 10\\n1 10\\n10 3\\n6 1\\n8 7\\n5 4\\n7 1\\n2 10\\n2 10\\n9 5\\n4 2\\n5 6\\n4 3\\n9 2\\n4 9\\n7 10\\n3 3\\n6 3\\n7 10\\n4 4\\n10 8\\n9 2\\n2 7\\n5 8\\n7 6\\n8 9\\n1 2\\n6 6\\n7 6\\n10 1\\n6 1\\n10 2\\n6 3\\n9 9\\n5 5\\n10 9\\n6 9\\n6 4\\n3 6\\n6 8\\n5 8\\n1 9\\n7 4\\n8 8\\n5 4\\n3 8\\n8 1\\n1 10\\n5 5\\n4 6\\n9 7\\n9 2\\n9 3\\n7 2\\n6 10\\n1 8\\n10 6\\n6 1\\n9 7\\n3 7\\n10 4\\n6 1\\n8 10\\n9 5\\n514\\n5 6\\n2 5\\n3 9\\n4 7\\n3 9\\n6 5\\n9 2\\n1 8\\n1 7\\n10 8\\n10 8\\n3 2\\n1 8\\n1 9\\n7 8\\n1 3\\n10 1\\n4 8\\n9 4\\n7 8\\n5 10\\n3 6\\n1 10\\n3 10\\n10 4\\n3 1\\n8 6\\n6 6\\n7 4\\n9 8\\n10 10\\n7 3\\n10 4\\n9 3\\n6 10\\n2 6\\n10 10\\n1 4\\n3 10\\n6 4\\n8 9\\n8 2\\n6 10\\n2 10\\n10 2\\n8 2\\n9 9\\n1 1\\n2 3\\n4 10\\n3 4\\n3 2\\n7 1\\n6 4\\n6 3\\n3 9\\n6 3\\n10 4\\n8 2\\n5 6\\n7 5\\n4 9\\n2 10\\n5 9\\n9 4\\n1 1\\n5 9\\n4 2\\n5 6\\n10 3\\n8 6\\n3 9\\n2 4\\n9 2\\n1 3\\n10 2\\n4 8\\n7 5\\n10 1\\n1 4\\n6 3\\n8 10\\n7 4\\n3 5\\n1 4\\n10 3\\n1 4\\n4 7\\n7 4\\n1 10\\n2 4\\n8 5\\n3 9\\n2 2\\n10 7\\n8 5\\n10 5\\n9 8\\n5 2\\n4 9\\n7 8\\n9 7\\n6 8\\n1 7\\n9 4\\n10 1\\n1 10\\n10 4\\n4 9\\n8 6\\n10 3\\n9 3\\n5 7\\n1 8\\n10 10\\n4 9\\n4 3\\n6 2\\n1 5\\n4 3\\n3 3\\n4 5\\n10 6\\n2 3\\n5 2\\n2 10\\n3 8\\n5 3\\n6 10\\n1 4\\n2 10\\n6 3\\n8 9\\n3 4\\n5 5\\n6 3\\n7 3\\n6 5\\n5 3\\n6 1\\n2 4\\n3 9\\n10 3\\n8 6\\n1 8\\n7 1\\n6 4\\n2 3\\n4 7\\n9 6\\n3 10\\n9 4\\n4 7\\n3 2\\n5 6\\n6 2\\n6 8\\n2 3\\n5 10\\n10 9\\n1 6\\n8 8\\n2 6\\n2 1\\n2 7\\n8 2\\n5 10\\n2 3\\n2 9\\n1 10\\n5 5\\n10 1\\n8 3\\n10 3\\n9 4\\n9 2\\n5 9\\n7 9\\n7 10\\n9 8\\n3 5\\n9 8\\n9 7\\n5 7\\n9 7\\n2 4\\n8 10\\n9 5\\n8 5\\n3 7\\n6 9\\n8 2\\n3 9\\n4 2\\n10 5\\n6 8\\n10 7\\n9 3\\n7 5\\n9 1\\n4 10\\n9 7\\n10 2\\n4 9\\n5 6\\n8 10\\n9 9\\n4 7\\n7 5\\n4 2\\n9 3\\n3 1\\n2 1\\n7 1\\n8 5\\n10 10\\n3 4\\n10 3\\n8 2\\n3 8\\n4 2\\n5 8\\n4 3\\n2 1\\n9 5\\n9 3\\n8 7\\n9 5\\n9 10\\n7 2\\n10 5\\n2 7\\n6 1\\n3 9\\n3 3\\n1 10\\n8 1\\n6 7\\n4 4\\n1 6\\n10 7\\n3 10\\n9 5\\n6 1\\n3 1\\n2 2\\n6 10\\n1 1\\n1 4\\n6 8\\n4 1\\n8 1\\n1 8\\n2 7\\n5 1\\n1 2\\n8 10\\n6 6\\n7 7\\n10 2\\n2 10\\n5 4\\n5 2\\n3 10\\n8 9\\n5 8\\n7 4\\n3 1\\n10 1\\n1 9\\n4 4\\n10 7\\n9 5\\n5 3\\n2 6\\n3 3\\n2 2\\n1 2\\n7 6\\n6 9\\n1 10\\n4 1\\n5 2\\n1 9\\n7 7\\n3 7\\n6 4\\n4 8\\n8 7\\n6 7\\n1 3\\n10 3\\n10 8\\n7 7\\n6 6\\n1 7\\n3 7\\n10 10\\n4 8\\n9 7\\n6 2\\n1 2\\n9 4\\n8 10\\n9 9\\n3 10\\n3 1\\n4 5\\n9 7\\n7 3\\n7 9\\n5 10\\n7 7\\n5 8\\n7 1\\n3 5\\n2 1\\n9 3\\n5 6\\n2 1\\n9 10\\n6 1\\n3 1\\n7 5\\n9 5\\n7 9\\n3 5\\n4 7\\n9 4\\n1 9\\n4 9\\n3 10\\n5 2\\n1 6\\n1 10\\n2 9\\n3 6\\n2 8\\n9 9\\n8 4\\n5 3\\n2 1\\n9 6\\n9 8\\n7 2\\n7 6\\n9 7\\n5 7\\n4 8\\n4 3\\n6 5\\n7 7\\n9 2\\n10 6\\n9 2\\n7 8\\n9 1\\n9 6\\n4 10\\n3 5\\n10 7\\n7 7\\n2 8\\n8 2\\n8 6\\n8 3\\n9 2\\n9 3\\n8 3\\n4 6\\n10 4\\n9 10\\n3 8\\n4 4\\n5 4\\n10 2\\n6 7\\n5 2\\n5 6\\n7 7\\n10 10\\n6 6\\n8 8\\n7 8\\n6 1\\n7 7\\n3 8\\n2 7\\n4 8\\n6 2\\n6 6\\n7 2\\n5 8\\n6 7\\n10 3\\n9 8\\n9 2\\n10 8\\n4 1\\n10 4\\n6 3\\n6 8\\n9 2\\n4 10\\n4 4\\n10 7\\n10 6\\n7 4\\n3 3\\n7 1\\n8 9\\n4 2\\n3 2\\n4 8\\n7 6\\n7 8\\n2 10\\n2 10\\n9 1\\n5 4\\n10 7\\n5 4\\n4 3\\n7 4\\n4 2\\n8 9\\n3 4\\n3 3\\n9 8\\n4 6\\n6 10\\n8 6\\n5 7\\n3 4\\n2 3\\n1 5\\n4 8\\n2 3\\n7 5\\n4 4\\n8 4\\n10 1\\n9 10\\n10 5\\n8 6\\n9 3\\n8 5\\n6 3\\n2 8\\n1 2\\n6 10\\n9 10\\n8 7\\n10 9\\n1 6\\n7 7\\n1 2\\n1 3\\n8 4\\n2 8\\n1 3\\n3 9\\n9 8\\n9 6\\n9 8\\n5 7\\n4 6\\n2 6\\n6 10\\n5 6\\n3 4\\n7 10\\n1 7\\n1 5\\n2 10\\n5 7\\n10 10\\n6 10\\n5 3\\n5 9\\n8 4\\n2 6\\n1 9\\n8 3\\n4 1\\n9 1\\n2 9\\n10 4\\n1 3\\n2 2\\n7 5\\n5 10\\n8 6\\n9 2\\n1 4\\n10 6\\n10 10\\n7 4\\n8 9\\n6 9\\n7 6\\n6 3\\n4 8\\n7 4\\n2 5\\n2 2\\n1 2\\n1 5\\n10 6\\n7 6\\n7 2\\n7 1\\n10 7\\n1 2\\n883\\n3 3\\n4 7\\n10 3\\n10 5\\n9 4\\n6 4\\n7 7\\n6 3\\n7 9\\n7 7\\n2 1\\n9 6\\n8 3\\n6 5\\n10 7\\n8 2\\n9 3\\n3 2\\n7 10\\n5 3\\n1 8\\n6 3\\n8 5\\n1 4\\n2 8\\n5 7\\n5 6\\n6 2\\n6 7\\n4 1\\n6 3\\n5 4\\n6 3\\n2 10\\n7 3\\n7 5\\n1 1\\n6 4\\n1 3\\n1 10\\n4 3\\n1 6\\n6 9\\n2 10\\n6 1\\n4 4\\n6 1\\n9 3\\n8 5\\n6 9\\n4 6\\n6 1\\n8 2\\n2 1\\n6 5\\n6 7\\n9 5\\n8 1\\n5 2\\n10 8\\n9 8\\n10 9\\n1 3\\n6 10\\n4 6\\n5 1\\n5 3\\n3 5\\n6 5\\n5 2\\n6 1\\n7 2\\n6 9\\n7 4\\n8 4\\n4 3\\n2 3\\n6 7\\n10 7\\n1 2\\n3 6\\n4 1\\n10 3\\n3 1\\n8 4\\n3 1\\n8 5\\n1 5\\n8 7\\n9 2\\n1 6\\n8 6\\n8 10\\n7 10\\n9 3\\n9 10\\n6 4\\n2 4\\n4 8\\n7 8\\n5 2\\n9 9\\n5 10\\n1 10\\n2 9\\n10 4\\n10 10\\n4 6\\n10 10\\n5 4\\n8 2\\n10 10\\n1 8\\n3 7\\n6 9\\n5 9\\n7 1\\n9 6\\n1 8\\n9 4\\n7 2\\n4 4\\n1 1\\n7 9\\n1 4\\n10 3\\n4 9\\n8 7\\n10 5\\n6 2\\n1 4\\n9 4\\n2 9\\n6 10\\n2 4\\n8 5\\n1 7\\n3 2\\n3 2\\n8 6\\n8 4\\n6 3\\n10 1\\n4 9\\n7 4\\n8 3\\n8 10\\n2 10\\n1 9\\n4 8\\n6 1\\n4 8\\n3 3\\n4 6\\n1 5\\n7 3\\n8 1\\n7 2\\n3 1\\n7 7\\n3 9\\n5 3\\n3 2\\n8 10\\n4 8\\n10 2\\n4 10\\n2 10\\n4 6\\n8 8\\n6 1\\n2 1\\n3 4\\n6 1\\n1 5\\n1 9\\n10 3\\n7 6\\n6 8\\n6 5\\n7 7\\n10 2\\n6 5\\n3 3\\n10 6\\n10 2\\n4 10\\n1 3\\n9 3\\n9 3\\n3 9\\n1 7\\n6 7\\n9 5\\n7 4\\n7 8\\n8 1\\n10 8\\n10 4\\n2 6\\n9 4\\n10 3\\n6 1\\n7 10\\n1 6\\n3 3\\n2 6\\n2 8\\n5 8\\n9 8\\n1 9\\n1 1\\n6 8\\n5 6\\n7 7\\n3 5\\n7 9\\n10 3\\n7 5\\n9 7\\n9 2\\n4 2\\n6 9\\n6 10\\n3 7\\n3 5\\n5 9\\n9 8\\n1 7\\n4 6\\n1 10\\n6 8\\n1 3\\n5 7\\n2 4\\n7 6\\n9 7\\n10 1\\n2 4\\n10 1\\n3 1\\n6 6\\n2 4\\n8 2\\n8 9\\n9 5\\n4 8\\n5 1\\n2 4\\n3 5\\n9 1\\n8 1\\n7 7\\n7 8\\n7 7\\n4 2\\n6 3\\n1 6\\n5 9\\n8 7\\n5 5\\n5 2\\n5 8\\n10 1\\n7 1\\n2 5\\n10 1\\n10 3\\n7 5\\n5 7\\n6 4\\n8 7\\n5 4\\n2 2\\n10 6\\n10 8\\n10 6\\n5 6\\n2 7\\n4 4\\n7 7\\n1 4\\n5 1\\n3 2\\n5 3\\n7 9\\n3 3\\n2 9\\n4 1\\n8 7\\n6 2\\n9 2\\n10 3\\n9 7\\n7 8\\n6 10\\n8 9\\n9 5\\n2 9\\n1 8\\n7 3\\n9 3\\n7 9\\n8 5\\n8 3\\n5 9\\n2 1\\n7 5\\n8 5\\n1 9\\n5 7\\n4 7\\n3 10\\n2 7\\n1 7\\n9 6\\n2 7\\n10 4\\n6 9\\n1 4\\n7 9\\n10 4\\n2 10\\n4 10\\n6 4\\n4 6\\n7 6\\n3 8\\n7 6\\n3 4\\n8 5\\n1 8\\n3 3\\n3 7\\n9 4\\n7 6\\n9 8\\n3 1\\n4 1\\n7 7\\n10 10\\n8 1\\n2 2\\n10 10\\n9 2\\n9 1\\n4 9\\n2 8\\n2 2\\n3 8\\n1 3\\n3 1\\n9 3\\n1 6\\n10 2\\n3 1\\n9 5\\n8 2\\n9 8\\n9 4\\n1 7\\n7 8\\n2 7\\n10 6\\n2 10\\n10 10\\n6 10\\n1 8\\n7 5\\n9 4\\n10 9\\n2 2\\n9 10\\n6 7\\n9 4\\n6 1\\n6 10\\n8 7\\n5 9\\n5 9\\n3 10\\n7 2\\n10 10\\n6 7\\n4 4\\n8 8\\n8 9\\n2 9\\n4 10\\n7 8\\n6 1\\n9 4\\n9 7\\n1 1\\n10 7\\n1 7\\n6 9\\n7 5\\n10 4\\n6 8\\n6 10\\n3 7\\n4 4\\n10 2\\n2 1\\n6 8\\n10 8\\n7 8\\n2 6\\n7 7\\n9 2\\n2 2\\n10 2\\n6 3\\n3 9\\n10 7\\n8 9\\n9 2\\n7 1\\n7 7\\n5 5\\n9 1\\n2 10\\n2 6\\n4 7\\n8 10\\n10 4\\n10 2\\n10 2\\n4 9\\n10 4\\n2 10\\n9 9\\n4 3\\n9 4\\n1 5\\n9 2\\n3 7\\n2 9\\n4 3\\n5 4\\n5 2\\n8 7\\n9 3\\n5 8\\n5 7\\n6 1\\n6 9\\n9 9\\n3 4\\n3 5\\n10 7\\n2 1\\n1 6\\n4 8\\n5 5\\n7 5\\n9 7\\n3 10\\n6 3\\n6 4\\n10 6\\n7 8\\n5 1\\n2 3\\n7 4\\n6 2\\n8 2\\n3 1\\n8 8\\n8 10\\n3 10\\n8 2\\n1 8\\n10 7\\n2 6\\n10 5\\n7 10\\n1 9\\n5 4\\n1 2\\n9 7\\n7 5\\n6 10\\n5 5\\n4 5\\n8 6\\n8 5\\n5 7\\n9 10\\n5 1\\n9 2\\n8 2\\n10 1\\n5 3\\n10 9\\n6 3\\n1 1\\n3 9\\n7 3\\n3 6\\n5 9\\n4 10\\n7 2\\n10 5\\n9 2\\n3 5\\n7 5\\n1 5\\n5 8\\n7 4\\n8 3\\n7 9\\n1 2\\n6 2\\n3 5\\n8 1\\n6 3\\n6 9\\n4 3\\n5 3\\n1 8\\n4 2\\n10 10\\n10 6\\n8 9\\n10 5\\n3 2\\n4 5\\n1 3\\n4 1\\n3 3\\n9 4\\n7 6\\n9 1\\n8 3\\n10 5\\n3 1\\n10 9\\n4 9\\n10 9\\n7 9\\n4 4\\n6 5\\n5 7\\n1 7\\n1 8\\n4 10\\n5 3\\n1 10\\n10 3\\n2 8\\n5 6\\n9 4\\n3 6\\n8 7\\n8 8\\n8 5\\n3 9\\n9 2\\n8 10\\n9 10\\n8 9\\n2 6\\n9 8\\n8 8\\n9 7\\n10 4\\n8 1\\n6 10\\n3 9\\n9 3\\n8 8\\n3 2\\n9 8\\n3 3\\n8 2\\n2 6\\n7 4\\n7 5\\n5 9\\n10 6\\n5 4\\n9 2\\n9 5\\n10 8\\n9 10\\n2 5\\n4 5\\n6 1\\n7 10\\n2 10\\n10 4\\n3 4\\n7 1\\n3 4\\n4 1\\n9 1\\n6 9\\n4 9\\n10 10\\n7 5\\n2 5\\n10 8\\n6 7\\n9 9\\n9 3\\n9 3\\n1 8\\n6 4\\n9 8\\n10 4\\n9 5\\n5 5\\n3 8\\n6 10\\n10 1\\n9 6\\n8 9\\n10 4\\n5 8\\n9 9\\n9 9\\n6 7\\n5 6\\n10 8\\n7 2\\n7 8\\n9 7\\n6 4\\n4 7\\n8 1\\n2 9\\n3 8\\n4 7\\n6 3\\n7 6\\n10 2\\n7 2\\n7 8\\n3 8\\n6 10\\n4 3\\n9 3\\n7 4\\n5 10\\n2 10\\n1 5\\n2 5\\n7 6\\n1 5\\n9 2\\n6 2\\n6 6\\n10 5\\n3 10\\n6 7\\n3 6\\n5 4\\n1 3\\n8 1\\n6 2\\n8 6\\n3 7\\n3 3\\n10 8\\n9 3\\n8 5\\n6 9\\n1 7\\n8 10\\n3 6\\n8 5\\n2 10\\n5 10\\n10 6\\n5 1\\n8 5\\n9 5\\n3 9\\n8 2\\n10 6\\n3 10\\n6 9\\n4 4\\n5 10\\n10 2\\n5 10\\n2 5\\n1 8\\n2 8\\n8 2\\n1 10\\n9 9\\n8 1\\n5 8\\n1 7\\n10 5\\n10 1\\n1 4\\n2 4\\n7 9\\n5 6\\n7 9\\n10 3\\n8 2\\n9 2\\n9 10\\n2 8\\n1 2\\n4 5\\n6 2\\n1 9\\n8 8\\n4 7\\n4 6\\n3 3\\n5 5\\n4 10\\n1 7\\n2 4\\n8 5\\n3 1\\n5 8\\n9 9\\n9 2\\n4 5\\n4 8\\n1 10\\n8 9\\n6 7\\n2 10\\n2 2\\n6 6\\n2 1\\n7 5\\n6 9\\n6 7\\n7 8\\n9 2\\n5 6\\n4 10\\n10 4\\n2 10\\n9 7\\n5 2\\n8 5\\n7 8\\n10 4\\n10 1\\n4 4\\n1 6\\n6 6\\n4 3\\n8 9\\n10 8\\n4 5\\n5 9\\n2 6\\n9 9\\n10 10\\n9 7\\n7 7\\n1 7\\n9 8\\n9 4\\n2 5\\n5 1\\n8 4\\n8 4\\n2 8\\n1 10\\n10 9\\n3 4\\n6 4\\n4 8\\n10 1\\n5 10\\n4 7\\n9 3\\n5 6\\n6 4\\n3 10\\n3 2\\n5 2\\n6 7\\n10 3\\n2 3\\n2 9\\n6 8\\n9 3\\n4 5\\n8 9\\n7 1\\n5 9\\n10 10\\n3 8\\n10 6\\n1 10\\n1 4\\n7 7\\n1 5\\n3 1\\n9 2\\n9 10\\n2 9\\n9 1\\n5 8\\n9 2\\n2 2\\n10 7\\n6 8\\n8 7\\n1 1\\n1 7\\n2 2\\n10 3\\n5 8\\n1 10\\n3 4\\n2 5\\n5 7\\n10 2\\n7 5\\n10 8\\n7 3\\n9 7\\n6 2\\n5 7\\n1 10\\n3 2\\n9 4\\n8 9\\n1 4\\n5 9\\n9 4\\n5 5\\n3 9\\n1 3\\n10 7\\n8 8\\n5 5\\n6 1\\n4 2\\n4 7\\n5 5\\n7 5\\n7 8\\n2 3\\n4 9\\n1 7\\n4 4\\n7 7\\n8 5\\n9 10\\n3 9\\n7 1\\n8 9\\n10 4\\n8 3\\n5 7\\n8 3\\n1 6\\n4 9\\n10 8\\n10 2\\n3 10\\n8 7\\n10 6\\n9 2\\n4 2\\n9 8\\n3 6\\n10 8\\n7 9\\n6 4\\n8 6\\n3 7\\n2 8\\n5 9\\n4 4\\n2 10\\n1 1\\n615\\n9 4\\n1 6\\n2 3\\n8 4\\n9 2\\n8 6\\n1 6\\n8 2\\n10 9\\n10 8\\n6 4\\n1 9\\n4 7\\n1 7\\n10 3\\n4 10\\n4 9\\n7 5\\n7 2\\n4 4\\n2 10\\n10 5\\n1 2\\n3 2\\n2 9\\n2 1\\n9 5\\n1 6\\n9 8\\n7 4\\n6 10\\n4 1\\n5 6\\n9 4\\n10 10\\n4 1\\n5 9\\n9 8\\n3 8\\n5 4\\n2 10\\n9 6\\n10 6\\n5 4\\n10 3\\n4 3\\n10 8\\n7 3\\n7 10\\n9 9\\n6 6\\n4 2\\n6 5\\n7 10\\n5 2\\n9 3\\n3 9\\n10 1\\n9 5\\n7 1\\n2 10\\n8 10\\n1 10\\n2 1\\n10 2\\n8 9\\n10 8\\n6 10\\n10 5\\n6 4\\n5 9\\n2 10\\n5 1\\n8 9\\n2 9\\n3 6\\n1 2\\n4 5\\n7 2\\n6 8\\n6 3\\n1 2\\n7 10\\n5 2\\n5 6\\n9 2\\n1 7\\n1 3\\n7 8\\n9 6\\n6 6\\n4 1\\n8 9\\n2 2\\n6 4\\n4 1\\n6 8\\n2 2\\n9 5\\n5 2\\n8 7\\n10 4\\n8 1\\n6 6\\n3 4\\n8 7\\n10 4\\n6 5\\n8 7\\n3 2\\n3 5\\n3 9\\n3 5\\n1 3\\n6 3\\n8 6\\n4 2\\n5 2\\n2 8\\n3 1\\n2 5\\n1 10\\n3 2\\n4 6\\n10 10\\n7 5\\n5 8\\n10 9\\n1 4\\n8 4\\n3 3\\n3 10\\n3 6\\n4 7\\n9 2\\n3 6\\n3 7\\n3 1\\n5 10\\n9 6\\n6 1\\n5 1\\n3 5\\n7 1\\n6 5\\n6 6\\n1 9\\n1 9\\n5 10\\n5 9\\n10 8\\n6 1\\n7 9\\n9 2\\n9 7\\n9 10\\n6 10\\n4 4\\n6 3\\n7 2\\n2 2\\n7 1\\n6 2\\n5 4\\n6 9\\n5 1\\n9 4\\n10 4\\n6 4\\n10 1\\n6 2\\n2 5\\n7 8\\n9 6\\n3 1\\n6 5\\n3 1\\n8 8\\n5 8\\n9 5\\n8 10\\n9 6\\n3 7\\n3 6\\n10 4\\n8 4\\n3 7\\n5 2\\n7 10\\n8 10\\n5 3\\n1 3\\n2 5\\n10 5\\n4 8\\n6 5\\n7 5\\n2 6\\n5 3\\n9 5\\n3 4\\n9 4\\n10 7\\n3 6\\n9 6\\n5 2\\n3 3\\n5 7\\n2 3\\n7 2\\n8 2\\n3 3\\n1 3\\n1 6\\n3 2\\n2 2\\n5 4\\n8 5\\n5 3\\n10 4\\n9 10\\n6 7\\n3 10\\n6 3\\n8 6\\n3 8\\n5 1\\n8 8\\n8 1\\n4 4\\n3 10\\n1 1\\n6 4\\n9 7\\n3 4\\n5 2\\n2 5\\n7 3\\n9 2\\n1 3\\n10 8\\n3 4\\n8 4\\n5 7\\n1 3\\n6 4\\n10 3\\n6 3\\n10 2\\n10 8\\n3 3\\n1 4\\n4 2\\n6 10\\n10 7\\n2 7\\n8 8\\n6 9\\n10 6\\n1 6\\n3 2\\n10 5\\n4 4\\n5 5\\n3 3\\n4 8\\n10 2\\n7 8\\n10 10\\n3 2\\n9 1\\n10 2\\n9 5\\n10 10\\n8 8\\n2 1\\n2 9\\n4 3\\n8 9\\n6 2\\n8 10\\n7 6\\n2 10\\n5 10\\n10 3\\n4 6\\n9 6\\n5 8\\n8 4\\n10 7\\n6 3\\n1 3\\n1 6\\n10 1\\n2 10\\n8 4\\n1 2\\n1 2\\n9 5\\n8 1\\n6 4\\n1 4\\n3 9\\n6 1\\n8 3\\n10 4\\n2 5\\n10 1\\n9 2\\n5 1\\n4 10\\n7 9\\n6 4\\n4 8\\n2 9\\n6 6\\n10 3\\n7 1\\n6 4\\n7 3\\n9 6\\n8 4\\n5 2\\n10 3\\n5 3\\n5 6\\n3 6\\n9 10\\n5 1\\n3 9\\n10 2\\n1 10\\n1 6\\n7 1\\n6 5\\n10 9\\n8 9\\n2 4\\n6 5\\n7 8\\n5 3\\n1 9\\n5 9\\n6 9\\n4 1\\n8 5\\n10 10\\n5 8\\n10 10\\n8 3\\n2 6\\n8 5\\n4 8\\n1 9\\n9 6\\n5 8\\n1 7\\n10 5\\n7 10\\n8 10\\n3 6\\n1 7\\n7 3\\n5 5\\n1 9\\n1 10\\n9 7\\n5 9\\n5 4\\n10 9\\n2 10\\n9 3\\n10 2\\n3 3\\n10 1\\n5 1\\n9 1\\n3 10\\n4 8\\n10 4\\n9 9\\n6 10\\n1 3\\n6 8\\n9 7\\n10 9\\n9 1\\n3 4\\n5 4\\n8 1\\n6 10\\n8 6\\n8 2\\n6 6\\n10 2\\n7 9\\n7 8\\n8 5\\n10 7\\n4 6\\n6 7\\n1 2\\n5 2\\n3 10\\n6 2\\n5 8\\n4 2\\n1 7\\n8 7\\n3 3\\n6 8\\n3 9\\n5 9\\n1 8\\n1 4\\n6 1\\n1 6\\n4 8\\n1 4\\n9 10\\n4 4\\n9 6\\n1 5\\n7 6\\n5 2\\n10 8\\n5 2\\n9 6\\n1 5\\n9 3\\n6 7\\n2 7\\n6 1\\n2 4\\n8 3\\n1 6\\n6 6\\n6 1\\n5 3\\n9 2\\n5 5\\n4 2\\n4 9\\n4 4\\n6 10\\n1 2\\n8 8\\n10 5\\n6 5\\n4 9\\n5 7\\n5 8\\n1 9\\n4 4\\n2 7\\n10 3\\n9 2\\n10 10\\n6 1\\n7 3\\n9 6\\n9 3\\n5 8\\n3 6\\n2 3\\n9 7\\n4 10\\n2 8\\n7 1\\n7 8\\n1 7\\n8 7\\n1 2\\n3 7\\n3 1\\n9 10\\n3 8\\n2 8\\n9 4\\n9 3\\n6 1\\n10 4\\n2 5\\n8 3\\n7 1\\n1 7\\n2 5\\n1 6\\n7 10\\n8 4\\n1 6\\n8 10\\n6 5\\n1 9\\n3 9\\n1 6\\n7 2\\n9 10\\n9 9\\n9 10\\n10 3\\n1 10\\n9 8\\n9 8\\n7 7\\n2 6\\n4 4\\n3 4\\n8 7\\n7 5\\n8 10\\n7 1\\n5 8\\n3 5\\n9 1\\n6 1\\n4 2\\n9 1\\n9 3\\n9 2\\n7 4\\n2 2\\n1 4\\n3 10\\n5 2\\n5 10\\n9 6\\n3 1\\n5 4\\n1 5\\n7 6\\n5 5\\n1 7\\n6 8\\n6 6\\n10 1\\n3 4\\n7 2\\n1 3\\n5 8\\n4 5\\n9 6\\n7 9\\n3 8\\n8 6\\n6 2\\n9 3\\n1 10\\n10 2\\n4 8\\n10 6\\n4 9\\n9 9\\n7 6\\n5 9\\n4 8\\n2 6\\n2 1\\n7 10\\n2 8\\n3 2\\n10 6\\n3 4\\n6 9\\n2 7\\n1 6\\n8 8\\n7 8\\n2 10\\n3 10\\n4 1\\n2 10\\n8 4\\n7 7\\n7 8\\n2 9\\n9 9\\n3 1\\n6 4\\n4 6\\n2 7\\n10 10\\n6 8\\n6 5\\n6 7\\n7 4\\n1 1\\n2 1\\n6 6\\n8 1\\n8 10\\n5 2\\n5 4\\n7 10\\n3 10\\n8 1\\n1 1\\n3 9\\n2 3\\n9 6\\n4 9\\n7 6\\n7 3\\n8 8\\n7 6\\n9 4\\n4 9\\n6 7\\n10 1\\n9 9\\n5 8\\n5 5\\n8 3\\n7 1\\n3 2\\n56\\n8 9\\n9 9\\n8 9\\n5 7\\n10 1\\n4 9\\n8 2\\n10 4\\n9 8\\n1 6\\n4 4\\n3 9\\n6 10\\n7 6\\n6 7\\n7 4\\n4 5\\n4 5\\n4 1\\n2 10\\n1 2\\n10 3\\n7 1\\n5 8\\n4 5\\n8 5\\n4 6\\n1 6\\n4 5\\n10 3\\n3 3\\n9 6\\n6 6\\n3 3\\n3 9\\n9 2\\n4 4\\n4 10\\n9 8\\n7 9\\n1 5\\n9 6\\n3 3\\n7 10\\n5 4\\n2 1\\n5 7\\n8 8\\n8 6\\n6 1\\n5 3\\n1 6\\n9 3\\n8 7\\n9 5\\n4 8\\n\", \"100\\n592\\n6005 5722\\n9028 947\\n861 5327\\n5450 7938\\n3534 6082\\n9029 9503\\n5189 417\\n4791 618\\n947 5119\\n9929 755\\n2617 6683\\n2243 7093\\n9934 3711\\n1522 2938\\n1708 2660\\n9744 9902\\n6117 8491\\n106 5046\\n3844 5137\\n3221 862\\n3301 2897\\n6492 8921\\n5195 7898\\n4302 4696\\n1512 9477\\n2149 3353\\n775 2431\\n6604 9341\\n9769 1180\\n3716 5298\\n9226 5059\\n4532 9826\\n8597 6984\\n8486 5577\\n1843 5811\\n4982 5981\\n5072 2603\\n3488 9044\\n6749 6990\\n9 2275\\n5615 8919\\n1665 4567\\n9031 3542\\n4884 5044\\n5977 7023\\n7437 2238\\n1759 4280\\n5976 6505\\n9392 4059\\n177 4457\\n1555 9260\\n5973 6196\\n6377 3494\\n7553 5751\\n9117 3169\\n8080 7661\\n4361 6710\\n9184 6273\\n5950 2684\\n191 9260\\n6936 8495\\n9957 8637\\n3593 1106\\n7179 9745\\n5046 7776\\n8814 9547\\n3715 2348\\n2205 6070\\n3126 782\\n7107 3791\\n3328 8361\\n3897 4924\\n1968 6837\\n4362 9657\\n1907 4829\\n3047 2460\\n5104 2915\\n2700 1322\\n181 4562\\n1999 3039\\n8408 2141\\n8959 1361\\n7424 4\\n7230 2166\\n6767 8699\\n7643 8321\\n5948 1065\\n274 7419\\n5572 6983\\n2633 119\\n5136 2216\\n537 7767\\n9686 696\\n4733 9959\\n5494 7345\\n7454 3103\\n2216 5145\\n3700 9108\\n8495 6727\\n2579 7673\\n9586 5267\\n5656 8951\\n8807 1953\\n5972 2258\\n8214 2641\\n6265 2227\\n4772 2497\\n1922 1144\\n8309 2011\\n4813 8025\\n5789 7061\\n4708 6787\\n6961 3373\\n4051 8317\\n5146 1362\\n9915 6171\\n6988 1771\\n7914 1447\\n8307 5355\\n9437 730\\n8471 4437\\n3090 2538\\n9864 9011\\n2628 8684\\n7879 256\\n64 8639\\n581 997\\n7952 8040\\n9170 3389\\n7697 4326\\n1505 526\\n1863 8809\\n2430 1314\\n7967 5033\\n7691 492\\n7605 7308\\n5358 8556\\n4255 2237\\n8260 9524\\n7296 949\\n273 1205\\n6477 7205\\n345 3731\\n9986 8242\\n6521 4156\\n1186 9743\\n8424 7597\\n2604 9044\\n152 8375\\n8411 8870\\n2751 6398\\n4153 4782\\n8412 7806\\n1712 4546\\n7785 3495\\n8978 1073\\n7487 9596\\n2261 6455\\n6007 5320\\n2953 6392\\n7124 8138\\n4187 6152\\n2817 3767\\n1180 3778\\n8641 983\\n587 3640\\n2696 5176\\n4230 8118\\n2955 4009\\n8715 6869\\n2599 4421\\n1287 5461\\n3717 1166\\n8718 2814\\n5810 1041\\n6383 7416\\n3431 1657\\n7403 1440\\n7783 6935\\n4465 227\\n640 5816\\n4025 6144\\n4 8438\\n3534 4053\\n5095 56\\n3911 456\\n4133 3515\\n6904 4884\\n178 6549\\n5704 6160\\n3086 9278\\n9798 6694\\n5253 1438\\n1864 5001\\n5640 6385\\n4742 1105\\n7861 800\\n9803 5151\\n1806 1894\\n4877 9048\\n8823 6098\\n2885 8544\\n1845 4682\\n2380 5225\\n9999 7659\\n7007 8020\\n7052 1937\\n7715 8402\\n5787 5659\\n7581 9114\\n1549 8714\\n6162 5528\\n4018 7011\\n9471 6735\\n76 7642\\n9566 1501\\n6421 181\\n142 9150\\n8593 4637\\n7785 1519\\n2091 6723\\n4188 5791\\n4171 266\\n1044 1753\\n2894 6476\\n3657 8579\\n2398 7609\\n1414 5715\\n345 8558\\n3003 6121\\n9931 2341\\n7223 2719\\n1649 6876\\n7623 9184\\n6421 7517\\n9366 1215\\n9587 212\\n5735 6715\\n2206 8783\\n7352 972\\n7792 7133\\n4877 5596\\n1640 2159\\n8663 9867\\n1954 6613\\n6416 3509\\n8994 6433\\n9545 1520\\n3434 4975\\n1832 9152\\n9638 4191\\n9095 3207\\n4824 4285\\n6436 4402\\n6961 8048\\n2935 7552\\n9600 988\\n9237 2198\\n9689 1376\\n3989 583\\n1879 5229\\n2248 784\\n7436 5259\\n8216 2339\\n6179 8756\\n5184 4665\\n6573 5447\\n6084 8004\\n128 7279\\n8054 1610\\n7726 9865\\n6721 108\\n1778 3879\\n2590 8207\\n2655 9439\\n3087 3646\\n9733 4431\\n9704 5337\\n204 8603\\n8387 489\\n6774 965\\n2428 3996\\n4632 2454\\n9380 16\\n224 2832\\n4003 9677\\n7564 5474\\n9615 9179\\n5721 5029\\n1719 1747\\n2494 819\\n8646 5169\\n1361 2276\\n6891 7005\\n9479 8723\\n6889 8185\\n6627 2630\\n8453 3481\\n2305 2544\\n2921 6284\\n8726 1971\\n2312 1306\\n2719 9482\\n9723 4018\\n4068 4165\\n2979 5682\\n6552 3131\\n8609 5846\\n9894 2760\\n6648 1667\\n7884 4891\\n8605 6462\\n3397 5219\\n7529 9728\\n7726 2688\\n8744 1127\\n4497 3018\\n3950 8758\\n934 5507\\n8659 3821\\n3698 955\\n7529 3086\\n6600 7231\\n8780 9628\\n4431 771\\n4487 4007\\n515 157\\n1587 3172\\n9771 3513\\n3435 3273\\n7276 8864\\n861 7570\\n5226 5160\\n13 1137\\n5735 1164\\n9410 7017\\n3591 3373\\n9325 8593\\n9859 2510\\n5432 9499\\n7983 9716\\n1128 9087\\n609 3838\\n2923 1850\\n7662 973\\n5708 6977\\n2486 5656\\n7780 7887\\n7692 502\\n4924 6269\\n1173 4366\\n1280 5183\\n5773 2122\\n9087 5099\\n7754 3193\\n6507 7526\\n1581 4949\\n1269 3625\\n6905 1846\\n3262 2542\\n592 5854\\n1395 6121\\n5741 9580\\n5829 3685\\n2814 2295\\n2428 2143\\n7916 1387\\n9392 3645\\n5966 5562\\n3656 7663\\n6883 16\\n3598 3124\\n849 2185\\n298 2419\\n1658 4036\\n416 6558\\n462 8043\\n9269 5033\\n9881 1683\\n4974 3364\\n8025 5506\\n7521 9533\\n1500 8577\\n4290 8610\\n9135 556\\n2288 1783\\n4358 6456\\n7396 6972\\n115 8010\\n2530 6919\\n3198 6752\\n2331 5186\\n4123 1618\\n3252 6520\\n1845 738\\n1075 5447\\n9303 577\\n4450 5005\\n9858 5101\\n934 4333\\n139 9832\\n2431 2956\\n8967 1563\\n5972 5427\\n5708 4861\\n1373 5578\\n8641 6715\\n205 9033\\n9358 8014\\n2753 5721\\n3456 1453\\n8081 5446\\n7714 5479\\n6412 8973\\n6683 2674\\n8193 3257\\n3718 6668\\n7741 3815\\n150 1617\\n7492 1769\\n6633 4682\\n275 5422\\n6218 808\\n1427 6513\\n631 9247\\n9227 5196\\n3302 891\\n92 3828\\n437 665\\n2177 5785\\n4655 1778\\n2134 9030\\n4860 5014\\n4146 2235\\n8072 3630\\n4031 2604\\n5990 4147\\n1642 6800\\n6475 8113\\n5405 250\\n250 1221\\n7155 8490\\n3934 1873\\n8503 2821\\n7945 1280\\n6043 4155\\n8188 2768\\n2016 1335\\n1633 2321\\n3364 2281\\n734 5669\\n3225 1533\\n5958 5625\\n1608 5261\\n6722 5607\\n215 4512\\n1959 8751\\n5218 4602\\n8097 4409\\n6320 3980\\n4937 4149\\n236 168\\n5878 3782\\n3530 9289\\n2300 8688\\n4854 4169\\n2538 9618\\n2285 2392\\n8487 6247\\n5354 5381\\n2446 7350\\n4891 997\\n3482 652\\n2864 2709\\n9635 3817\\n31 7491\\n5427 1676\\n8578 8257\\n304 188\\n9673 4983\\n6370 4615\\n1394 7422\\n6593 1116\\n5655 5257\\n4081 7125\\n8642 8595\\n8184 7691\\n7663 9098\\n3011 1181\\n8727 3457\\n3923 6802\\n2369 4909\\n3893 5307\\n9319 8407\\n5024 3141\\n5539 4703\\n6704 7159\\n1372 8542\\n1535 1558\\n4350 1011\\n8113 3652\\n4648 2120\\n7250 777\\n2096 2864\\n6125 6713\\n7664 4308\\n5284 6895\\n7442 6656\\n1969 7465\\n6623 4360\\n3651 455\\n7928 1952\\n6658 5275\\n18 7793\\n684 8078\\n5728 9384\\n426 7738\\n9937 3284\\n5541 2392\\n7147 1752\\n4647 5840\\n3914 2033\\n6400 374\\n4671 6121\\n46 760\\n418 8596\\n584 9689\\n9163 6165\\n8213 3818\\n399 4919\\n722 9568\\n1008 419\\n7968 4489\\n254 6364\\n917 9925\\n5562 3139\\n2268 8951\\n8398 1263\\n8110 7491\\n8072 3849\\n4251 6741\\n4119 3883\\n63 3447\\n2104 7127\\n9303 8565\\n1294 3729\\n3039 4831\\n2717 8032\\n9202 792\\n8164 7128\\n6151 8563\\n2928 2632\\n2245 2234\\n6772 1484\\n9352 8914\\n8246 425\\n586 5914\\n3050 6320\\n4412 3015\\n5315 8728\\n6719 3318\\n4118 8229\\n826 2737\\n4739 6599\\n1290 14\\n7221 8521\\n3221 2144\\n2455 6789\\n4029 9658\\n9252 9500\\n7640 5322\\n9761 1989\\n9642 1283\\n168 9657\\n3844 3524\\n6352 7742\\n840 201\\n5981 955\\n4493 7384\\n1118 6212\\n5420 3225\\n5683 2376\\n1492 695\\n2988 5554\\n7816 600\\n1121 9235\\n1653 4566\\n122 9497\\n8080 9560\\n8692 4550\\n9713 817\\n7970 853\\n124\\n5636 3932\\n1454 9123\\n1021 9726\\n402 9310\\n5917 4115\\n1969 8017\\n7419 6506\\n7959 6876\\n9690 5586\\n1669 7832\\n5588 1550\\n528 7439\\n1186 1068\\n7592 9342\\n6653 4840\\n591 2703\\n5989 5454\\n2366 9566\\n1416 8109\\n1138 2305\\n2985 8770\\n7898 7168\\n479 4953\\n9073 2002\\n6349 7613\\n3509 9765\\n1803 5053\\n389 9965\\n5598 7787\\n2517 3473\\n6090 4061\\n2367 8733\\n9548 2225\\n7345 1737\\n5083 9093\\n1128 6638\\n7884 8751\\n1082 6552\\n5190 902\\n5594 3003\\n3453 2465\\n6792 7693\\n3286 7989\\n1026 4472\\n6591 6979\\n9287 9399\\n2519 5688\\n6252 3368\\n5232 6455\\n4036 9141\\n9528 3330\\n2917 4660\\n5010 9306\\n6689 7500\\n6137 1527\\n3664 6055\\n1541 8468\\n5599 7903\\n6304 981\\n1162 4695\\n4657 6929\\n6392 2696\\n887 4322\\n8226 5536\\n2783 5266\\n4577 143\\n6798 4769\\n7133 2902\\n8862 3262\\n1489 1387\\n5291 1867\\n3199 6868\\n4681 1676\\n6355 2757\\n4473 3217\\n6462 3538\\n9912 9312\\n814 6490\\n6536 5531\\n7257 4599\\n144 7912\\n601 5708\\n1967 4466\\n2658 608\\n6476 6751\\n4364 2057\\n6284 8406\\n8628 2563\\n3593 3512\\n159 5389\\n6839 96\\n2715 9056\\n8548 5786\\n9341 7358\\n9087 2574\\n6060 5694\\n7460 6499\\n8777 1570\\n5087 9176\\n7806 283\\n7150 5716\\n7523 9586\\n9165 7909\\n1603 2746\\n8606 9479\\n1459 6448\\n6733 5173\\n4886 8887\\n1253 556\\n7339 6917\\n5768 4487\\n2115 239\\n4024 3361\\n2952 2271\\n3012 9704\\n8367 2867\\n6386 6395\\n5385 6928\\n6310 6977\\n2506 2895\\n4861 718\\n9240 3715\\n1724 3721\\n7823 351\\n598\\n1155 3770\\n9137 3602\\n5957 5890\\n9707 8514\\n2511 6805\\n8104 8141\\n8035 2174\\n2213 6342\\n6284 4261\\n9733 8312\\n8213 4899\\n6454 684\\n1251 8783\\n5801 4542\\n3083 6391\\n8476 8516\\n5964 4586\\n756 4985\\n8634 9681\\n7288 3772\\n2766 2176\\n411 6466\\n3801 3772\\n3409 571\\n4940 1835\\n3818 1783\\n7088 3553\\n6247 2155\\n1884 8405\\n5272 973\\n8855 591\\n1020 4813\\n9052 3724\\n9441 7017\\n5255 5106\\n5839 4591\\n2799 9055\\n1773 8467\\n3770 3510\\n4244 3968\\n575 4029\\n59 7070\\n5398 2385\\n1666 3387\\n9076 9203\\n2238 4939\\n7482 2507\\n8102 7193\\n3539 6135\\n7839 6769\\n5223 3974\\n6620 8822\\n4446 2805\\n3700 9871\\n8494 7527\\n9893 9626\\n5372 5825\\n3410 5855\\n4809 8099\\n6560 6571\\n4202 6700\\n2992 9959\\n1002 2657\\n4283 894\\n8147 2289\\n7276 1770\\n3639 3964\\n2088 779\\n5938 1151\\n8335 6065\\n1047 3299\\n9645 931\\n3405 3233\\n6069 4525\\n6119 979\\n5975 737\\n1833 2333\\n1540 3644\\n5957 1476\\n2879 2178\\n2208 67\\n201 6774\\n1818 2817\\n7465 6970\\n9878 1827\\n1852 8110\\n3669 7201\\n1213 9202\\n7808 1653\\n3908 6635\\n8533 3187\\n1966 2562\\n9763 8831\\n1649 6668\\n4757 4732\\n5227 1971\\n5404 7913\\n4269 1908\\n3472 5925\\n2181 3251\\n9389 3595\\n7910 6856\\n6801 2676\\n9998 1864\\n74 2738\\n2181 3609\\n4957 1315\\n2556 6775\\n6822 9945\\n6264 916\\n4990 9519\\n5454 515\\n9010 4543\\n7885 1771\\n2018 8467\\n3081 5998\\n8522 5416\\n9579 5292\\n4935 4656\\n9078 4467\\n7343 7079\\n7056 3914\\n1687 6143\\n5697 2219\\n1985 1647\\n3382 4941\\n6879 820\\n7975 8207\\n1137 9219\\n1093 1754\\n9858 3903\\n5937 120\\n1267 5690\\n6400 3171\\n6516 1185\\n6087 3604\\n9913 5307\\n7949 3817\\n412 3860\\n7384 5679\\n4489 9433\\n6579 2601\\n3564 9391\\n7069 3560\\n2331 8792\\n212 1011\\n3744 3984\\n8379 1963\\n416 6021\\n9652 856\\n2771 5756\\n1169 1831\\n7380 4426\\n1194 837\\n6544 1747\\n9781 5666\\n1421 9688\\n6574 9608\\n2064 7087\\n3149 7344\\n6315 2527\\n3825 9847\\n3869 2367\\n5351 1895\\n7173 7264\\n4844 6800\\n9437 8892\\n3515 8088\\n492 7812\\n8170 924\\n2153 961\\n5267 3264\\n4660 9938\\n958 4343\\n5902 3304\\n5099 9908\\n4610 5434\\n2793 6723\\n2097 3242\\n8144 3514\\n2442 9610\\n911 3364\\n6348 998\\n340 8799\\n2330 9280\\n6975 8312\\n9530 9189\\n4768 8375\\n2913 2410\\n9647 6539\\n5740 9052\\n2960 7814\\n3058 7128\\n9395 7595\\n1568 6397\\n351 8107\\n2217 957\\n9932 5791\\n7544 8032\\n6694 4018\\n6693 5003\\n1623 1949\\n4070 8331\\n2305 9706\\n1275 9707\\n9726 4885\\n4831 708\\n1824 1806\\n2829 5471\\n7229 7100\\n8151 4046\\n4659 9237\\n8264 4736\\n1088 6648\\n993 618\\n4627 6166\\n4589 4520\\n4087 7609\\n4809 1851\\n2909 7383\\n592 4512\\n1760 7177\\n745 4434\\n3846 8885\\n3081 7734\\n1484 75\\n7860 777\\n3553 5869\\n8343 5356\\n8736 2394\\n7815 4296\\n2484 1246\\n8873 8837\\n9119 1550\\n6402 9044\\n9606 5119\\n1271 9050\\n1471 8695\\n3098 3847\\n8948 7511\\n2919 7200\\n4506 8149\\n2998 1820\\n6684 8360\\n2226 1578\\n9528 5808\\n4325 9124\\n9151 3824\\n9867 1564\\n8178 2929\\n3432 9517\\n6353 1633\\n848 4520\\n5574 6321\\n9444 5658\\n7693 6639\\n5863 7698\\n2886 7175\\n5321 4600\\n1703 3101\\n346 5436\\n2334 1824\\n6338 2198\\n7345 9966\\n1504 1157\\n8262 6744\\n4225 1664\\n1359 6526\\n4335 6982\\n8064 5060\\n2075 9698\\n4507 5590\\n6135 8450\\n2582 3535\\n6109 8529\\n4797 5133\\n764 9019\\n8630 4110\\n6309 3497\\n5244 6237\\n5782 6968\\n1049 3120\\n912 1113\\n4846 9649\\n8402 3714\\n7396 9079\\n9578 6456\\n4237 2459\\n2716 4294\\n5251 8466\\n2631 2548\\n1797 1139\\n7861 8736\\n5947 7421\\n5651 1747\\n1015 1284\\n966 5845\\n7345 6498\\n8685 502\\n1775 1080\\n9315 1591\\n9654 9942\\n7491 3516\\n6760 7834\\n7449 2416\\n7604 5399\\n7611 1245\\n6154 4022\\n2914 7387\\n725 4056\\n3084 2299\\n5795 7153\\n5402 8504\\n6022 8786\\n6083 9374\\n4601 4651\\n1523 2997\\n9776 755\\n8329 5543\\n464 5690\\n6651 9059\\n976 8365\\n8210 2851\\n1978 7862\\n854 3776\\n3169 2180\\n4078 5294\\n219 9368\\n8521 810\\n4112 2488\\n2447 43\\n5324 3114\\n5011 5799\\n559 4646\\n7440 5243\\n9666 2562\\n6090 3973\\n3980 5199\\n47 3885\\n4909 7956\\n6674 246\\n9966 2383\\n1826 8867\\n1905 3414\\n7261 4167\\n1876 5639\\n7675 7738\\n2627 4581\\n5043 7405\\n9805 3448\\n5415 2533\\n333 1923\\n3447 96\\n1676 1582\\n3687 9464\\n4161 2808\\n912 4197\\n9153 2491\\n3620 4485\\n7753 2222\\n545 1951\\n8521 5221\\n8806 1116\\n601 3987\\n2237 7322\\n8885 9949\\n1202 1848\\n7865 4892\\n9002 3263\\n3729 5910\\n2481 9826\\n8965 2085\\n2826 4286\\n6363 3132\\n8964 8797\\n9106 5034\\n2425 79\\n3868 8413\\n7807 2466\\n8718 9419\\n231 8642\\n7678 232\\n5028 4145\\n679 8857\\n87 2535\\n1618 7699\\n5772 999\\n4489 2495\\n5612 7196\\n3981 7687\\n601 2263\\n8605 6652\\n1257 1794\\n4602 4996\\n5726 7892\\n5845 2619\\n7535 7013\\n899 4844\\n8083 7092\\n7440 4156\\n9126 4074\\n2298 7494\\n2103 9309\\n4146 1979\\n1702 7249\\n2179 3350\\n267 4005\\n1130 1635\\n8224 2074\\n4247 2245\\n8436 5104\\n1057 8541\\n5516 6628\\n9455 156\\n2392 8698\\n7323 2017\\n2824 9247\\n4070 2107\\n3649 3125\\n3 4120\\n1115 2707\\n8083 7970\\n8871 851\\n7496 8677\\n6188 2335\\n4784 8152\\n2806 8674\\n5457 636\\n8963 5378\\n5782 7445\\n397 3940\\n6667 2835\\n4509 2637\\n2099 2199\\n3704 4960\\n3467 5958\\n6298 8004\\n413 9412\\n4376 4644\\n75 882\\n3054 9673\\n3482 6872\\n2299 7548\\n4981 7137\\n4128 3476\\n8535 7523\\n754 7478\\n3831 9687\\n8338 746\\n934 1326\\n3465 5421\\n3979 370\\n4680 8179\\n3122 3259\\n2153 4195\\n7757 9207\\n7445 4543\\n8391 3313\\n875 1116\\n8840 8581\\n4362 7537\\n4149 9531\\n8213 5271\\n5221 1824\\n7251 8595\\n9752 8877\\n922 2207\\n7086 386\\n2268 1276\\n8123 4887\\n1408 3474\\n2979 9256\\n9120 8932\\n5258 6222\\n1864 5246\\n9496 4041\\n8197 4381\\n2769 1450\\n9696 3395\\n6565 7452\\n2518 9572\\n5960 4602\\n8113 4282\\n6429 9166\\n8878 4098\\n7066 2329\\n9986 1728\\n8077 4661\\n5533 212\\n7550 1774\\n2896 8462\\n6774 3636\\n5826 9910\\n8296 3187\\n7599 8361\\n9152 266\\n1557 8562\\n9719 3210\\n8604 5025\\n7127 8380\\n527 998\\n9458 873\\n7133 6418\\n265 7975\\n3086 5758\\n4078 2524\\n138 6964\\n6375 571\\n3619 5261\\n4524 7778\\n8792 7713\\n5890 9735\\n6680 2268\\n3111 3111\\n6873 4122\\n3973 9139\\n6319 1405\\n2069 4181\\n6523 653\\n6836 6638\\n6870 9937\\n9456 9591\\n5310 6085\\n500 7438\\n3837 2379\\n7786 1611\\n9022 674\\n698 3174\\n9233 7700\\n3882 9296\\n3580 1706\\n1838 7224\\n7108 5961\\n4715 4178\\n2621 220\\n507 1690\\n5032 6816\\n302 4918\\n5588 1865\\n3771 2336\\n9393 5071\\n6765 1033\\n4878 7779\\n700 9376\\n4150 9129\\n6294 9668\\n9878 8977\\n4166 756\\n1298 2491\\n34 1278\\n6224 7016\\n4435 9436\\n2987 2632\\n28 9192\\n8425 8664\\n2257 1058\\n4707 4921\\n1537 487\\n3426 4437\\n6805 258\\n9115 5486\\n2118 5713\\n1428 1765\\n7393 7779\\n1219 1779\\n7858 3359\\n990 510\\n6242 4313\\n8744 6772\\n2915 5300\\n8955 7918\\n3220 5408\\n2034 8355\\n2776 1262\\n7017 3247\\n3548 1575\\n7121 586\\n8416 3082\\n4090 8294\\n6939 318\\n9051 7707\\n9716 8462\\n7167 7061\\n8451 4035\\n1407 699\\n8002 9955\\n9469 9036\\n4556 4524\\n6982 2208\\n6195 7600\\n9678 9583\\n7005 8636\\n5072 2291\\n5181 2690\\n405 3129\\n5184 8618\\n3047 4506\\n9283 9322\\n102\\n1502 8624\\n4180 1519\\n5869 1883\\n4279 4876\\n8499 2115\\n5885 5022\\n4246 7458\\n1099 8869\\n2020 2446\\n9234 5808\\n6378 4457\\n5117 1337\\n6892 1374\\n5247 6834\\n3361 3708\\n6942 9380\\n1751 4372\\n1959 5524\\n9121 5672\\n3539 7613\\n6769 2170\\n4164 145\\n1677 7002\\n6847 7307\\n9292 1820\\n1703 8074\\n2116 5437\\n3627 5261\\n7025 3771\\n7776 621\\n2107 8105\\n3583 7398\\n7232 421\\n6137 6443\\n1267 1794\\n7426 5501\\n8839 90\\n595 9519\\n9773 9749\\n3694 7984\\n8700 8412\\n4815 6217\\n700 7165\\n8799 2419\\n4201 1650\\n1358 3498\\n2133 9795\\n9478 9721\\n716 8231\\n7341 3221\\n2738 5302\\n1490 1966\\n1586 543\\n4139 5443\\n3159 7037\\n345 3851\\n2891 5511\\n1789 3326\\n8863 9375\\n9193 9243\\n5554 3100\\n6921 4395\\n3942 3768\\n816 6294\\n2647 7400\\n5336 1140\\n6749 4554\\n7460 1777\\n8971 8158\\n7357 7323\\n7378 5584\\n3131 1517\\n3697 5612\\n7621 929\\n7407 9270\\n6633 9727\\n8318 3175\\n1091 5316\\n4666 2452\\n5404 2855\\n2409 555\\n5248 9644\\n9762 490\\n3163 34\\n6071 7808\\n2301 2206\\n1274 6669\\n8572 2595\\n7258 2377\\n1835 2253\\n922 4504\\n4512 2552\\n3036 2013\\n7236 7681\\n7590 2639\\n3567 7218\\n3588 5717\\n4393 7533\\n7041 3739\\n298 1305\\n2046 5324\\n9755 9389\\n198\\n1693 6866\\n2256 1102\\n1353 9580\\n1380 6325\\n2395 4\\n3197 2783\\n2171 3824\\n8917 7690\\n1700 9823\\n7732 3900\\n6355 8368\\n601 8022\\n7152 2992\\n6398 137\\n4154 3348\\n168 1428\\n8758 4916\\n4248 362\\n743 3981\\n1719 7621\\n8498 637\\n5709 7133\\n2814 3324\\n2188 6627\\n733 4136\\n2171 7890\\n8435 7729\\n2533 9810\\n6803 9783\\n7795 6067\\n7287 3384\\n9398 2091\\n9009 1732\\n9314 1689\\n7743 4687\\n7282 4018\\n1821 1483\\n6373 5059\\n3124 1953\\n9201 1787\\n4163 3353\\n6232 5805\\n6915 7357\\n5268 641\\n6812 6098\\n2684 4967\\n517 7597\\n5003 7712\\n4368 2960\\n8734 3027\\n9310 5633\\n3924 6179\\n8018 464\\n1812 9949\\n9660 4990\\n7802 8540\\n6987 5048\\n3661 8164\\n3470 7662\\n4544 9923\\n6458 8902\\n4264 4359\\n9001 2023\\n4306 9038\\n3061 1042\\n3303 232\\n5539 3922\\n1523 6355\\n1513 6478\\n6706 4211\\n4950 3964\\n6961 8624\\n314 1189\\n1412 2669\\n1220 9553\\n9104 5854\\n8111 9472\\n3834 1615\\n5203 4013\\n1188 2408\\n9623 9854\\n2830 3126\\n2762 5618\\n247 569\\n2640 1603\\n9173 566\\n1990 8461\\n9000 457\\n7304 9332\\n2238 7840\\n485 5011\\n8196 5138\\n6418 3468\\n792 2894\\n3145 6501\\n424 967\\n1373 602\\n2265 6781\\n4081 2859\\n7797 4267\\n5543 7787\\n1405 1779\\n1214 3311\\n3553 6822\\n6922 1448\\n6709 6725\\n2429 2923\\n8928 452\\n9367 9900\\n7025 9333\\n5848 4006\\n7637 4096\\n7078 8642\\n6871 7550\\n2754 9661\\n221 5212\\n6268 1378\\n6321 3352\\n9394 6963\\n2158 9321\\n4862 1574\\n8851 8443\\n6932 9806\\n1407 1020\\n3364 5460\\n7792 3021\\n2539 2200\\n5745 7198\\n1592 5855\\n9803 1036\\n6387 4521\\n5871 5716\\n9890 4519\\n933 1158\\n9265 6012\\n1403 3068\\n5445 3790\\n2306 7978\\n542 3333\\n1291 7321\\n6791 5688\\n6667 240\\n4296 5509\\n2393 419\\n2035 8838\\n821 8425\\n9236 7793\\n2995 9856\\n6905 8997\\n5861 2030\\n3883 7346\\n8438 5383\\n4831 3705\\n5666 9463\\n9529 2817\\n8225 3802\\n6795 6078\\n2022 1216\\n9635 8550\\n1271 7870\\n7953 5483\\n2829 9315\\n3106 3647\\n6239 3239\\n5157 4718\\n6651 7530\\n2484 348\\n1831 8689\\n1073 7671\\n5242 3021\\n2879 8276\\n6188 7560\\n7328 1760\\n3908 1241\\n3388 2177\\n1179 9360\\n6078 4449\\n1949 1276\\n8351 9596\\n8877 6599\\n3848 2511\\n9025 1299\\n8406 4518\\n7497 5866\\n6404 331\\n1804 6377\\n5811 5097\\n5765 1946\\n4422 9020\\n6948 6020\\n5918 7152\\n749 1380\\n7539 7456\\n642 9851\\n5260 8417\\n6945 4604\\n6832 102\\n7169 9015\\n899\\n4083 1273\\n5768 3559\\n8417 5630\\n3557 4947\\n7186 622\\n8783 153\\n2639 1709\\n1566 3955\\n6049 4117\\n4348 5697\\n8903 8321\\n2052 2381\\n3974 1350\\n2685 4403\\n3797 9106\\n7082 9043\\n8818 4351\\n8097 6706\\n1724 7695\\n6419 4627\\n337 4020\\n7890 7589\\n9032 2085\\n1925 6617\\n8662 7862\\n2912 3087\\n3302 1023\\n6396 8304\\n2321 5147\\n5025 7596\\n562 6914\\n5909 6468\\n9762 6692\\n2212 374\\n7246 7428\\n1778 9331\\n4695 3399\\n9580 7312\\n6349 6628\\n9421 1212\\n2330 2903\\n3832 204\\n3139 7599\\n5439 8562\\n7774 4411\\n2574 2840\\n3540 3599\\n6813 1083\\n3264 9857\\n8340 2534\\n5631 6814\\n9361 5097\\n1740 7953\\n2903 851\\n407 6132\\n6847 9587\\n8669 2544\\n7759 5995\\n6094 8553\\n8616 1907\\n1934 5125\\n8138 3740\\n8932 9557\\n4655 8580\\n2757 1066\\n4893 1912\\n6127 5004\\n5110 8159\\n3504 1249\\n2017 5898\\n4732 1522\\n6282 573\\n4925 9861\\n388 3951\\n3448 2540\\n6183 1801\\n4737 7612\\n3001 4254\\n2635 1475\\n8395 6881\\n1835 6092\\n2411 8359\\n6247 3552\\n7640 4423\\n9481 7187\\n2386 4237\\n4778 5389\\n7179 7243\\n291 5962\\n2285 6217\\n7650 7157\\n2078 8485\\n4858 1793\\n9121 405\\n9104 2012\\n890 5441\\n6036 6704\\n4077 1334\\n3508 9064\\n268 9132\\n2305 6170\\n6213 163\\n6263 9126\\n9462 446\\n8320 5021\\n3992 8538\\n3153 1972\\n4473 2163\\n9645 666\\n7696 933\\n5579 9837\\n2772 9839\\n2509 5159\\n6903 1330\\n3430 9587\\n8537 4809\\n1248 9795\\n7706 654\\n1798 4308\\n9600 3658\\n4934 9684\\n9529 7543\\n3843 5295\\n3868 5355\\n1188 7658\\n2814 1951\\n9604 9579\\n1811 5861\\n9793 5311\\n9212 7540\\n9914 5845\\n906 2311\\n2240 8758\\n9167 5589\\n5782 5790\\n1424 9337\\n6595 2050\\n5484 1814\\n66 7979\\n6139 4140\\n1184 5438\\n1437 5405\\n6425 4358\\n8005 7432\\n4761 3527\\n5186 6826\\n6901 8360\\n8404 9343\\n6214 6137\\n4998 1748\\n4878 9215\\n9841 4132\\n970 6734\\n7044 112\\n4521 554\\n3352 9952\\n9165 1875\\n405 936\\n5246 9182\\n2169 331\\n7865 5668\\n7696 1456\\n2193 904\\n8554 1635\\n2721 4488\\n9800 1141\\n5111 6659\\n1061 827\\n6935 7316\\n7916 2379\\n2017 3417\\n4789 7599\\n2635 9445\\n8173 4447\\n2229 2963\\n6265 5456\\n1903 219\\n6360 425\\n3489 2200\\n7254 4686\\n5909 399\\n4533 4003\\n314 1860\\n900 4542\\n6040 3078\\n5820 2516\\n8904 9002\\n7682 5196\\n3179 4007\\n5251 4774\\n6567 9139\\n1972 8269\\n6436 5889\\n4294 6730\\n6973 5662\\n3320 6822\\n9576 886\\n6231 6995\\n1723 5971\\n723 7264\\n1440 645\\n2589 3688\\n5151 3442\\n9448 7931\\n465 3160\\n1686 1182\\n7877 3511\\n763 5075\\n2792 1330\\n3942 5412\\n8802 2581\\n8852 6641\\n8062 4124\\n5258 9165\\n5748 8210\\n7314 3450\\n2446 7101\\n2803 6398\\n175 5571\\n3992 397\\n1591 10\\n3357 1065\\n821 3335\\n9859 3151\\n8171 3110\\n5692 761\\n6234 6492\\n8749 9560\\n7822 2340\\n8304 462\\n2237 4091\\n7197 5425\\n3845 3908\\n9669 3781\\n9093 8711\\n8180 4072\\n3064 9517\\n6606 2652\\n2246 8073\\n8532 7914\\n1770 3487\\n7835 4336\\n6123 1554\\n6130 1617\\n4014 2074\\n8873 3915\\n7203 6400\\n8822 3894\\n8082 4503\\n2877 1100\\n4941 839\\n1943 3553\\n1142 317\\n2753 9787\\n3000 9092\\n9559 2523\\n951 8107\\n6255 5032\\n3983 9086\\n5936 8543\\n2951 7641\\n7373 3748\\n3583 1824\\n6255 6985\\n5509 6607\\n2920 9557\\n6744 7307\\n3927 9879\\n2773 4202\\n4073 920\\n5520 4144\\n8656 9076\\n667 7742\\n4788 6177\\n7030 2969\\n4701 7831\\n9007 9901\\n2862 1227\\n6651 535\\n7875 1770\\n3448 6259\\n5221 5952\\n8532 208\\n7074 8019\\n9216 5710\\n6086 5831\\n7642 1439\\n7538 4169\\n1831 5502\\n9235 1108\\n5845 1972\\n6621 1082\\n4922 4415\\n7043 7337\\n2928 4412\\n1377 1510\\n6565 6572\\n329 6049\\n4386 9046\\n8745 3887\\n2355 3663\\n349 1753\\n9287 9990\\n7420 3634\\n685 4111\\n9675 7745\\n6371 5715\\n7370 4930\\n3965 666\\n9563 2579\\n5770 5159\\n5311 549\\n8586 6488\\n1413 2665\\n1839 3476\\n7537 6030\\n6660 2623\\n8093 368\\n4368 3065\\n6184 10\\n9875 6141\\n2682 5507\\n5317 2220\\n8282 4439\\n6354 936\\n6320 487\\n2419 1109\\n7277 5563\\n431 1147\\n1486 9234\\n8855 6346\\n9842 155\\n3020 5115\\n7187 2709\\n2526 5931\\n1985 3064\\n1321 1952\\n149 1407\\n7047 3287\\n6294 7098\\n4595 8922\\n6764 1566\\n5685 3783\\n197 6190\\n3600 6785\\n681 7801\\n7537 8207\\n8020 2270\\n5123 2567\\n1833 6137\\n214 268\\n2143 4773\\n623 6946\\n5285 7405\\n6264 7122\\n5294 5512\\n6303 7686\\n6316 9881\\n4495 5111\\n3427 9613\\n6777 5038\\n9774 6035\\n9351 8662\\n2090 9546\\n7237 5718\\n1471 2484\\n304 894\\n1640 6755\\n2426 9089\\n8290 6820\\n5756 815\\n8318 1925\\n9266 742\\n1172 700\\n5496 5004\\n505 9281\\n811 6404\\n3256 7967\\n2869 6190\\n5335 3300\\n3158 8784\\n8895 7784\\n1535 5666\\n3785 5208\\n6564 1826\\n3621 6865\\n8726 3442\\n4811 8430\\n606 2969\\n2177 303\\n3562 110\\n6404 9035\\n2940 8098\\n9559 949\\n1651 3511\\n9202 497\\n4340 9650\\n2879 8390\\n6349 2566\\n4007 9895\\n7504 2682\\n5143 1998\\n8886 7909\\n3155 8374\\n5856 514\\n8017 2838\\n8532 6510\\n3986 5868\\n8962 2702\\n4600 762\\n1528 791\\n7454 8688\\n9606 7490\\n8119 5961\\n3016 4827\\n356 3612\\n9707 7108\\n8759 404\\n7680 9826\\n5669 2295\\n435 7069\\n2672 3843\\n5617 589\\n1738 7405\\n1394 7057\\n8632 1243\\n5987 1384\\n8829 4257\\n4255 1408\\n9882 1480\\n5573 745\\n7369 876\\n8488 4897\\n7467 8126\\n5878 9967\\n5340 8923\\n7307 1088\\n6284 6568\\n5221 2306\\n5768 9261\\n6864 1392\\n8221 513\\n301 8981\\n6560 4085\\n6048 370\\n6589 8428\\n362 9449\\n9164 4068\\n7358 6576\\n7304 6666\\n82 5627\\n5747 8384\\n8958 1103\\n4065 5840\\n7632 5464\\n9319 3897\\n7655 7294\\n348 5626\\n6057 21\\n581 4952\\n8793 4430\\n324 2764\\n7315 895\\n8379 7283\\n3084 4654\\n9690 4956\\n4382 2536\\n9092 9764\\n9673 1206\\n7649 9346\\n5202 5062\\n1832 945\\n7728 8733\\n2 9836\\n4274 5186\\n7263 3305\\n446 3347\\n4624 417\\n9861 487\\n5540 7583\\n7597 6272\\n9295 593\\n4352 7983\\n8608 5457\\n7707 7806\\n2163 888\\n6051 9678\\n241 5122\\n7103 8661\\n1835 5418\\n2296 1887\\n942 8311\\n6388 2714\\n2057 3203\\n4140 1260\\n1943 4031\\n6605 2003\\n4301 7120\\n4588 3093\\n4321 7431\\n9541 8227\\n756 1933\\n1441 5276\\n2236 9809\\n3661 5969\\n9037 537\\n6061 3833\\n1620 4236\\n2358 7961\\n2603 4093\\n9451 4096\\n559 4314\\n5734 1618\\n5491 6996\\n8245 1303\\n3878 7748\\n2969 6411\\n9433 3360\\n1899 4964\\n927 7447\\n3329 7622\\n8678 2758\\n2264 5694\\n5289 1207\\n9498 958\\n7721 7207\\n7677 658\\n9209 1299\\n5315 4317\\n320 123\\n7132 9262\\n4325 636\\n6729 1042\\n8486 5064\\n3025 1838\\n538 6183\\n5677 5410\\n3591 6925\\n6588 454\\n6417 7227\\n7976 7909\\n1824 3268\\n8832 953\\n2882 1650\\n9629 9527\\n9327 8524\\n8317 9064\\n3354 2510\\n9553 5553\\n5464 7555\\n1830 7252\\n8211 3765\\n8159 2648\\n2788 2998\\n6657 761\\n2016 7030\\n3778 4022\\n8909 8294\\n39 947\\n3386 6921\\n4719 8751\\n9720 2752\\n9529 4782\\n6391 9791\\n7032 4637\\n8518 6463\\n3979 3618\\n2512 2453\\n9112 5996\\n451 1500\\n1721 5932\\n7625 6648\\n8308 3802\\n8306 9379\\n669 366\\n3548 9213\\n3984 1450\\n8061 4428\\n3925 5340\\n6051 2850\\n767 7218\\n6974 289\\n5233 1825\\n114 331\\n5098 887\\n1395 2959\\n7326 9236\\n2149 541\\n7218 5756\\n5456 3599\\n9596 4788\\n8360 3356\\n1493 1811\\n553 8246\\n2081 2301\\n3305 9406\\n2170 7368\\n4371 3110\\n2989 9428\\n4566 7598\\n3909 9739\\n8963 334\\n8474 1817\\n9266 3331\\n1613 1356\\n9602 2716\\n3598 8159\\n308 7049\\n9010 7177\\n1994 9352\\n3139 5671\\n9064 4102\\n170 7874\\n9998 5265\\n5191 6175\\n1653 4546\\n6634 7984\\n581 4033\\n8111 4144\\n3640 2151\\n8851 530\\n7687 3003\\n2143 2452\\n510 5361\\n8537 3829\\n8479 3920\\n9585 4285\\n7016 8748\\n3093 2062\\n6312 58\\n8624 1218\\n3259 7717\\n4204 268\\n7296 4820\\n3761 4866\\n8621 9715\\n4060 5630\\n7945 5922\\n9197 8251\\n6605 4117\\n39 7442\\n3294 256\\n3231 9424\\n618 4064\\n148 2036\\n5187 1042\\n606 91\\n1251 4730\\n1187 6164\\n2637 4815\\n9897 3405\\n141 5076\\n6848 6691\\n8325 662\\n116 21\\n5191 8674\\n1689 398\\n5299 8107\\n2435 9079\\n6341 9635\\n7564 661\\n9677 4019\\n9444 7002\\n4186 2682\\n5655 3144\\n3084 6339\\n9864 6294\\n4184 9485\\n4332 734\\n5838 8609\\n2843 5222\\n3405 9832\\n7565 6909\\n6778 4199\\n3505 4529\\n3594 4447\\n4496 6674\\n3716 6998\\n9678 2604\\n28 241\\n6391 5609\\n8922 5278\\n6606 2514\\n6557 6664\\n5653 4315\\n127 317\\n402 2277\\n3166 7081\\n9389 9741\\n6305 314\\n6914 8475\\n4865 4327\\n126 4837\\n7891 5130\\n9273 5800\\n2559 5977\\n8920 8047\\n2568 48\\n1840 1961\\n8355 8804\\n3631 6398\\n1866 4943\\n922 6\\n3423 1496\\n9372 9112\\n4401 4828\\n3879 8787\\n5649 4613\\n8376 5872\\n4350 2807\\n851 459\\n8925 215\\n3541 3331\\n3532 7643\\n9177 8620\\n19 4347\\n8373 2141\\n1920 9171\\n3917 4084\\n595 974\\n9333 9099\\n1169 6071\\n622 1589\\n7035 6897\\n5465 6293\\n924 7562\\n9918 5402\\n4285 7995\\n6242 525\\n853 5683\\n8462 8771\\n1655 7853\\n8238 6813\\n2932 6273\\n9753 5426\\n249 5586\\n3981 6711\\n8515 1414\\n5840 4036\\n3204 7835\\n5158 8070\\n1339 630\\n2039 1531\\n6313 6498\\n8520 1686\\n2654 6238\\n1864 5854\\n3209 7491\\n4244 180\\n3356 2226\\n5478 5504\\n3715 4854\\n5733 2145\\n710 8988\\n6762 5238\\n7547 8522\\n1244 1410\\n3601 1907\\n8898 3645\\n5196 5792\\n4305 6097\\n3639 9115\\n4676 4824\\n6537 3738\\n3110 8839\\n5370 4235\\n2341 8213\\n9739 5181\\n7031 1502\\n6104 3002\\n4452 871\\n4549 8516\\n9297 563\\n1849 8336\\n8287 5815\\n9063 9207\\n3599 2586\\n7177 3723\\n3038 5179\\n4718 4602\\n2685 6630\\n3704 5858\\n4654 6013\\n6801 5338\\n5305 4897\\n6918 2297\\n3794 1773\\n1979 276\\n332 334\\n7437 3787\\n2920 1407\\n3819 4904\\n7168 9282\\n7161 3500\\n6596 1586\\n578 579\\n1770 322\\n7564 5501\\n39 367\\n1170 7078\\n8064 4366\\n9511 1999\\n4437 6063\\n6564 2901\\n6572 125\\n540 6475\\n1504 195\\n1653 5606\\n5217 1072\\n8709 1165\\n2707 7973\\n3481 1091\\n8390 9485\\n6950 9386\\n8636 7123\\n6257 5809\\n3080 482\\n4204 6739\\n9306 8728\\n6148 7469\\n294 5582\\n4400 7474\\n5841 7232\\n8200 8110\\n3248 5103\\n992 4088\\n664 7043\\n6428 6687\\n4659 9327\\n1624 2161\\n8605 2077\\n2388 760\\n6237 4503\\n9739 7552\\n7268 6338\\n3492 4247\\n2214 2349\\n3271 4604\\n786 7242\\n7102 5373\\n5321 2206\\n628 6882\\n1958 1854\\n7603 3497\\n7613 1152\\n6406 650\\n1480 2573\\n2302 5791\\n466 5815\\n8135 2695\\n5471 4231\\n331 8169\\n8775 1532\\n453 3860\\n5148 689\\n1458 9827\\n9027 7417\\n3940 957\\n3543 739\\n7039 2735\\n810 6776\\n9580 6581\\n2485 5147\\n1547 4375\\n7332 316\\n1093 667\\n1708 5549\\n595 1488\\n817 9321\\n6283 6281\\n1741 7056\\n6862 8970\\n5295 2558\\n502 6744\\n1035 7924\\n6421 7735\\n2743 9172\\n6845 442\\n4456 294\\n3714 4676\\n4814 7117\\n3013 6865\\n5797 1667\\n6790 9864\\n373 6122\\n647 987\\n549 352\\n2124 7178\\n7256 1318\\n1694 8964\\n4849 9088\\n6231 2713\\n8894 758\\n9910 9695\\n5308 1768\\n9477 1722\\n1697 412\\n1174 1337\\n3570 6995\\n858\\n9165 1313\\n1511 6240\\n5958 4199\\n7980 236\\n2322 1066\\n4597 6589\\n8259 3506\\n1290 5032\\n1207 8330\\n4015 6398\\n2869 3462\\n8043 8030\\n3966 9341\\n1213 2474\\n7301 3530\\n4430 8972\\n6453 5592\\n5167 2919\\n294 570\\n9279 3469\\n3868 855\\n7697 9462\\n9080 7534\\n1151 6213\\n9971 5875\\n8349 7200\\n7634 8957\\n4963 6184\\n7253 5736\\n498 6257\\n6182 9433\\n8194 5369\\n3143 5796\\n5141 2882\\n554 5222\\n5532 6507\\n4233 2124\\n4712 8547\\n3461 6058\\n7034 5687\\n5063 4647\\n1788 6416\\n1339 295\\n2602 8696\\n1536 1698\\n5287 9762\\n3046 3987\\n2189 8006\\n7246 9433\\n553 8341\\n4002 200\\n3937 6631\\n1116 336\\n4605 2443\\n9685 6415\\n2646 5974\\n1565 6546\\n2355 320\\n793 2532\\n7354 4199\\n3716 10\\n6735 6905\\n5714 5562\\n5306 4914\\n3938 400\\n7205 3440\\n6984 4168\\n8941 4393\\n1494 7347\\n9680 2981\\n2490 4222\\n9169 8989\\n1408 9544\\n5963 3360\\n6029 5019\\n3923 3410\\n880 8539\\n3528 9910\\n705 4132\\n9 7117\\n535 7618\\n7620 2744\\n3706 7324\\n5776 4058\\n5140 2160\\n7731 6087\\n95 3579\\n7361 6640\\n3968 4884\\n5436 2840\\n3584 3237\\n556 5569\\n7256 3430\\n243 2804\\n5338 7115\\n3078 4943\\n1560 6482\\n7925 9056\\n597 3989\\n2746 5199\\n5110 3619\\n7240 462\\n8653 3440\\n8052 8277\\n8795 174\\n3518 5949\\n9317 2653\\n3514 4057\\n1865 2791\\n3949 2847\\n6451 1112\\n2433 8185\\n1299 7203\\n5975 4388\\n3526 1373\\n8495 8760\\n2952 1802\\n9132 4650\\n9675 8474\\n8035 6809\\n1661 4966\\n139 8407\\n3543 9139\\n1435 8832\\n3392 3741\\n6214 8897\\n6842 1187\\n2067 9331\\n6398 1090\\n8553 1449\\n5295 1076\\n6197 6187\\n2602 6147\\n588 4514\\n5281 5446\\n2464 8422\\n4575 5466\\n7327 1276\\n3284 9811\\n3045 508\\n327 987\\n209 9104\\n5190 4667\\n9028 626\\n7209 9982\\n9179 2935\\n3529 8861\\n1809 5166\\n3208 2486\\n2622 4485\\n7188 811\\n155 7625\\n4400 688\\n1733 5302\\n1383 6461\\n290 3509\\n7810 3626\\n5332 3195\\n5426 2492\\n9366 6754\\n700 6298\\n8082 2883\\n1914 3557\\n8121 5181\\n6992 5180\\n7865 656\\n1275 7\\n5775 2014\\n2989 3067\\n5421 7605\\n2913 8857\\n574 9059\\n9166 3328\\n651 6509\\n5730 4405\\n204 2135\\n5297 2579\\n2222 7542\\n4851 4392\\n1974 4896\\n7164 2787\\n9471 2147\\n5262 9060\\n1526 6035\\n7599 4645\\n3922 2427\\n8632 4308\\n1332 2655\\n6304 5105\\n2941 1970\\n6321 5214\\n4026 6405\\n1254 8347\\n9947 5159\\n9155 3447\\n6252 3711\\n6249 5684\\n2299 5296\\n8999 1919\\n5800 9848\\n9396 3171\\n6813 9720\\n8507 2923\\n532 5654\\n9960 7733\\n1984 7669\\n1663 4833\\n3990 9388\\n1512 6087\\n5648 901\\n690 234\\n4634 5483\\n3551 5912\\n1993 7195\\n6544 4715\\n900 7208\\n6748 4826\\n2039 8673\\n4879 2583\\n3308 4859\\n5222 3529\\n38 8095\\n6110 794\\n6271 5951\\n6261 4498\\n2719 5967\\n9791 184\\n4595 6867\\n3776 4764\\n7214 2939\\n572 3256\\n9395 9468\\n1082 432\\n6451 8850\\n3025 1371\\n6449 2276\\n9538 2099\\n8675 75\\n8925 8873\\n9693 7203\\n6728 1003\\n5136 8098\\n1212 9076\\n2540 1074\\n5431 2877\\n7272 3993\\n839 6398\\n4390 2838\\n7183 2850\\n3359 4615\\n4690 3318\\n4043 3241\\n3445 2473\\n2004 2723\\n8816 1456\\n5682 6170\\n3862 7627\\n5984 7371\\n5390 1456\\n7627 5342\\n8330 7518\\n4865 9239\\n3150 8040\\n7273 3029\\n4983 8839\\n4213 1894\\n4952 9626\\n8593 582\\n7083 6879\\n4248 5129\\n1640 8716\\n1273 578\\n6656 1349\\n6402 8271\\n5216 2878\\n4746 1452\\n4833 3086\\n3808 987\\n9030 7401\\n3284 8462\\n3136 9587\\n289 1974\\n224 9360\\n2568 6513\\n2632 938\\n4421 2493\\n9034 836\\n6635 169\\n1378 876\\n4861 757\\n475 3978\\n5943 4828\\n4398 5640\\n8716 3887\\n5437 5704\\n7870 6029\\n9377 720\\n2173 9339\\n6540 9489\\n9343 427\\n1836 8424\\n4131 1530\\n2640 4809\\n3592 9897\\n768 3056\\n8957 8757\\n2730 1593\\n1285 2105\\n1551 2546\\n3211 9461\\n847 5737\\n6787 5459\\n8406 4961\\n4498 9644\\n8887 5979\\n5933 2304\\n6437 8789\\n4514 2377\\n8330 7713\\n8605 963\\n9106 6145\\n6214 6400\\n9578 249\\n2905 2926\\n2770 6697\\n6149 5880\\n6997 4403\\n1689 8954\\n2934 1383\\n5756 7329\\n6958 2354\\n4763 4842\\n9776 2871\\n745 3433\\n5657 1470\\n1516 9843\\n7549 641\\n2128 1206\\n496 9917\\n1160 705\\n7849 753\\n997 8980\\n2504 4362\\n25 396\\n7123 5575\\n3940 3906\\n440 9684\\n3039 3819\\n4114 6084\\n4056 2091\\n6817 8868\\n4150 1302\\n9825 3376\\n5569 8183\\n7743 5253\\n8895 2499\\n1042 1215\\n6823 5859\\n5753 9252\\n8999 7624\\n4919 651\\n3043 8857\\n649 453\\n4805 6032\\n1664 6670\\n3619 2905\\n6496 1301\\n378 8373\\n6919 5516\\n1002 2224\\n5131 5265\\n8200 6025\\n2304 8672\\n2267 4924\\n3959 1135\\n7067 5386\\n3401 7339\\n1469 4874\\n9529 3323\\n3284 6311\\n4695 582\\n9022 4326\\n7174 5189\\n3039 8183\\n6124 9104\\n484 9576\\n4483 6837\\n6902 1127\\n2694 9219\\n9304 8791\\n2233 8645\\n6016 2521\\n3394 1639\\n3772 3419\\n8449 7562\\n1307 845\\n1863 4128\\n4832 8261\\n9462 2930\\n9146 9053\\n959 6358\\n9805 5472\\n3269 7586\\n9038 9263\\n5282 3270\\n8031 5949\\n656 3501\\n7796 2417\\n854 3323\\n8138 6826\\n8465 8230\\n6577 2170\\n7146 5753\\n7413 9110\\n4651 718\\n458 9440\\n1829 7364\\n2432 6745\\n2614 4712\\n9953 1051\\n6445 4363\\n5116 8340\\n7013 9462\\n6642 2843\\n3282 9581\\n5987 5265\\n8487 7747\\n5722 19\\n3870 2733\\n5877 3857\\n7020 1703\\n1391 9426\\n6329 7177\\n4491 85\\n1133 6097\\n1497 7753\\n8384 4106\\n7590 944\\n2869 1087\\n4458 3472\\n8774 1587\\n5118 1334\\n5870 8675\\n2771 8823\\n8083 3267\\n7188 3707\\n2494 1893\\n3314 5252\\n3764 4378\\n5005 8140\\n8635 4766\\n7323 9133\\n4971 5094\\n2926 6503\\n9682 3290\\n4106 6586\\n7546 9516\\n2976 6568\\n3226 6388\\n6667 8683\\n4201 1131\\n6800 1319\\n5966 6045\\n2191 1153\\n7850 5612\\n7917 957\\n5588 8548\\n3860 4452\\n4418 7627\\n2480 4584\\n5578 2914\\n3810 7455\\n9648 573\\n9716 453\\n3834 3296\\n8808 1300\\n4160 5052\\n7413 4109\\n9867 4980\\n8009 7125\\n3302 5088\\n3183 1904\\n7549 7288\\n4375 6093\\n5051 4701\\n6241 1635\\n228 4846\\n641 180\\n2986 5529\\n2862 1798\\n9293 2146\\n521 1417\\n6785 588\\n3813 5795\\n1064 3366\\n6182 1107\\n2511 8386\\n6063 7519\\n6782 8745\\n8586 9041\\n4913 8\\n2857 1089\\n1252 4430\\n3285 967\\n9620 2868\\n3486 8546\\n201 7282\\n2940 2166\\n9772 70\\n2399 4971\\n4913 1692\\n581 9228\\n4703 1895\\n8226 5491\\n108 4971\\n1141 5437\\n9395 4445\\n7924 3880\\n8577 8803\\n3220 1105\\n2027 8899\\n5317 1012\\n3425 1099\\n2067 7666\\n3491 2798\\n3619 903\\n1873 8098\\n3988 4703\\n5141 1284\\n2765 6948\\n995 8806\\n2023 4349\\n4484 7923\\n6846 2813\\n4778 1142\\n522 682\\n9311 8199\\n968 2739\\n8447 167\\n47 1245\\n2922 2092\\n4637 7589\\n3848 6251\\n2246 508\\n8002 4505\\n5694 6187\\n9882 6151\\n476 408\\n5489 1249\\n7705 3751\\n4891 4742\\n4336 769\\n9170 9778\\n7392 1627\\n2792 503\\n8660 4533\\n4535 1711\\n2501 9598\\n4528 6845\\n471 668\\n8862 102\\n3318 8272\\n6233 3328\\n5057 1338\\n9960 6685\\n1385 2443\\n4384 8438\\n1283 8539\\n6376 6030\\n6057 3519\\n1084 6867\\n578 6080\\n1360 1461\\n671 3954\\n4022 3213\\n6149 9821\\n7831 6597\\n1165 5491\\n4140 1119\\n2140 6384\\n7465 1585\\n9964 7217\\n3162 9216\\n7515 1180\\n9967 2069\\n6049 9545\\n4235 4551\\n7925 1352\\n6827 6456\\n8667 2296\\n1142 3112\\n1909 1694\\n8958 6803\\n4147 3055\\n5337 64\\n6462 8265\\n5436 4871\\n14 5436\\n7249 7072\\n1224 7028\\n5077 8088\\n2059 7941\\n3548 2203\\n552 3457\\n5821 4095\\n3755 8374\\n5136 3930\\n1710 1400\\n7943 8098\\n1799 2321\\n2796 1898\\n6297 8601\\n5928 9267\\n8400 1050\\n134 7253\\n4226 3647\\n3017 4989\\n1111 3600\\n2741 8707\\n7501 5907\\n1770 7151\\n5201 67\\n4849 9131\\n9842 2885\\n9360 6868\\n9454 740\\n6141 5541\\n2799 6898\\n5731 5496\\n1650 5938\\n5361 4941\\n3646 1578\\n5393 8166\\n4253 9593\\n2633 7313\\n5933 3050\\n4488 1708\\n1042 348\\n8008 138\\n1743 6914\\n5321 1038\\n812 2500\\n3770 1948\\n4861 2244\\n4376 2058\\n5138 1727\\n8884 6742\\n8589 5669\\n4754 1184\\n7083 5787\\n6629 8798\\n2767 472\\n3761 6381\\n7229 8404\\n8453 2596\\n9445 5942\\n7914 120\\n2614 9375\\n7355 4063\\n8532 4274\\n2407 5856\\n6616 3241\\n805 1349\\n5476 2550\\n7695 6456\\n1699 9587\\n3911 3998\\n9470 145\\n5458 5663\\n6763 9467\\n5650 5176\\n3228 6652\\n8604 840\\n7371 633\\n1421 3255\\n620 8824\\n5834 4255\\n6292 5264\\n6734 4478\\n5974 5251\\n9062 3596\\n6070 9638\\n6611 1725\\n1820 9061\\n118 734\\n1605 152\\n2013 6913\\n481 6533\\n8385 6620\\n4183 9384\\n9295 1633\\n2899 5412\\n7868 7529\\n7742 954\\n3124 8634\\n6431 2539\\n1088 2462\\n9639 3284\\n8584 5479\\n9352 5535\\n1186 7401\\n533 2146\\n3782 836\\n3459 2799\\n5022 7759\\n7599 5922\\n4929 3233\\n3753 7519\\n7372 9162\\n7729 1083\\n1929 2106\\n599 7756\\n5937 2064\\n4479 7374\\n6363 3381\\n6359 1693\\n6496 350\\n9873 281\\n4809 6685\\n4660 4089\\n9934 8523\\n7785 5570\\n6817 6834\\n103 9346\\n8039 2386\\n6443 3334\\n5187 365\\n3607 4225\\n6108 4165\\n9983 415\\n969 9000\\n7869 7188\\n9397 9329\\n2581 7795\\n7907 6298\\n2012 6546\\n1488 9766\\n7643 2711\\n1512 6543\\n255 7912\\n1621 914\\n434 3175\\n626 5437\\n8602 7149\\n9724 6942\\n8102 8247\\n8816 5194\\n5568 9524\\n4399 5359\\n5867 2223\\n6698 9297\\n9678 4771\\n1307 8647\\n8667 6932\\n1371 5914\\n1115 7004\\n5801 4157\\n5494 2312\\n2540 2618\\n1901 5081\\n491 3079\\n7332 6806\\n4086 7078\\n3242 9885\\n6105 3829\\n318 7675\\n1588 3865\\n3060 4129\\n4710 8656\\n5010 1635\\n7949 8365\\n4387 9975\\n6007 676\\n7899 9364\\n7707 9786\\n1924 7189\\n3990 5979\\n3958 4414\\n3750 5780\\n5253 1850\\n8557 593\\n9411 6202\\n8654 53\\n2605 8521\\n6778 8448\\n668 5495\\n174 6957\\n341 876\\n8713 3082\\n8001 724\\n8902 2513\\n7373 5580\\n1053 1208\\n1047 587\\n9174 4336\\n806 6501\\n3997 7693\\n1886 6809\\n8024 7790\\n3988 2556\\n4724 2728\\n4030 5937\\n1158 4427\\n9519 8336\\n5096 2370\\n727 6569\\n3058 4550\\n2498 2130\\n8522 4131\\n9953 3562\\n7769 467\\n1016 1087\\n2256 2573\\n4928 189\\n7242 1451\\n4484 968\\n9610 2074\\n9488 5469\\n4476 3248\\n7120 9591\\n37 8045\\n158 1619\\n7687 9352\\n8295 2156\\n5494 360\\n8888 1508\\n7682 1554\\n2277 2116\\n8203 4756\\n3129 6988\\n4099 7180\\n9117 9642\\n9068 9910\\n6749 5234\\n6242 9967\\n4488 5111\\n5208 2991\\n9886 9975\\n2678 2370\\n7954 7298\\n4806 9630\\n2495 8933\\n3606 889\\n1603 2634\\n8849 3628\\n8689 6307\\n8781 8508\\n8623 9740\\n9682 4791\\n2909 6982\\n6335 9587\\n3075 2951\\n7260 4497\\n4264 4695\\n7365 1253\\n5671 1605\\n8249 547\\n9767 6685\\n42\\n728 2864\\n2004 205\\n5908 1042\\n8869 7667\\n8792 1735\\n8260 9288\\n8882 1664\\n3944 2338\\n8441 127\\n9789 2661\\n1488 6050\\n9024 364\\n907 5363\\n920 4837\\n9407 7962\\n1036 9696\\n6919 4811\\n1828 4487\\n3903 8614\\n5646 6667\\n9611 6464\\n8870 2993\\n4050 4333\\n9306 2435\\n7976 3864\\n7733 7871\\n3942 7434\\n2141 7397\\n6630 5358\\n7934 3151\\n1294 4147\\n1008 6274\\n3324 1800\\n4017 3908\\n7964 8979\\n13 3170\\n7717 7564\\n5615 5232\\n2761 8966\\n5641 3822\\n150 1550\\n7845 1834\\n837\\n1750 2829\\n9205 690\\n6564 2482\\n9839 6255\\n1644 2888\\n8871 6782\\n8595 8467\\n7892 7720\\n5418 9398\\n4367 9376\\n9054 7301\\n6329 3120\\n1126 7592\\n2271 7495\\n6182 6765\\n1512 3439\\n3230 3164\\n7560 3321\\n6980 1426\\n4224 4144\\n223 5195\\n6189 2196\\n8926 8531\\n915 5775\\n500 2454\\n866 4485\\n4753 6367\\n3378 6939\\n3611 4563\\n2457 8165\\n7527 60\\n1288 2944\\n596 1634\\n7046 9629\\n9915 9908\\n9446 8230\\n8584 7005\\n5675 6815\\n6939 4121\\n1249 4155\\n3017 7715\\n5761 2340\\n6676 4063\\n6190 7215\\n1620 9573\\n4875 9895\\n7879 3791\\n3953 6200\\n529 1214\\n3840 8397\\n4472 5812\\n6548 1864\\n4093 3109\\n6199 9531\\n7079 8839\\n4417 6065\\n8369 9473\\n5348 9127\\n6327 9933\\n9569 9388\\n5865 8471\\n2013 9764\\n4217 2089\\n8450 9634\\n9993 2856\\n1968 1350\\n4729 1986\\n8566 7594\\n7403 6832\\n4083 7171\\n7956 260\\n569 9232\\n8060 6832\\n7499 4648\\n9711 1762\\n4877 1536\\n2836 8882\\n549 2582\\n2989 604\\n2565 1776\\n4471 4850\\n3523 4768\\n3028 3914\\n4413 1541\\n2284 1978\\n4591 9540\\n5206 8096\\n3932 3002\\n3482 2270\\n2181 3870\\n2217 8282\\n2530 49\\n3192 3421\\n5738 4424\\n1042 5922\\n3015 4545\\n7288 1878\\n6612 6890\\n8158 7545\\n348 2406\\n8741 466\\n4771 7153\\n5654 5079\\n1155 7867\\n3973 6128\\n5733 1049\\n4658 2958\\n5298 8463\\n9370 125\\n1629 7995\\n8682 8867\\n6290 4932\\n5499 4825\\n1951 2413\\n7020 9633\\n6379 9380\\n7462 7823\\n6242 9747\\n5205 2494\\n287 8014\\n8845 5327\\n9717 3376\\n1007 9949\\n7529 4424\\n7745 747\\n2441 878\\n1185 5673\\n4144 8116\\n7898 1326\\n247 7769\\n1606 3413\\n7920 7556\\n7268 9175\\n4122 8310\\n9485 8778\\n397 4630\\n4201 9906\\n9362 3188\\n8597 4925\\n9027 3976\\n5397 8212\\n9642 43\\n9427 1053\\n8359 8318\\n632 2336\\n8063 5644\\n9716 5785\\n4311 559\\n5396 6904\\n7384 2304\\n3531 1628\\n3535 8996\\n3830 2550\\n9848 1024\\n575 4878\\n1244 6053\\n2598 451\\n7833 9049\\n2157 7711\\n917 2839\\n3281 5545\\n8747 9636\\n3798 7660\\n1668 4279\\n7454 6190\\n5236 4944\\n6375 5849\\n6282 3789\\n3867 9260\\n8719 420\\n5077 7773\\n9768 8675\\n4586 637\\n4029 7206\\n2748 1225\\n4143 8907\\n4969 9135\\n3860 9052\\n4409 6211\\n783 3576\\n2145 1042\\n6419 8026\\n943 476\\n1324 6038\\n7665 5682\\n2311 2689\\n3096 2366\\n8728 9423\\n7525 4067\\n2196 2058\\n8712 8418\\n6348 3243\\n812 1360\\n7444 1065\\n5845 5561\\n9353 530\\n2343 3743\\n9476 8012\\n7144 3219\\n2405 8392\\n6811 1834\\n270 3229\\n6240 48\\n7860 2998\\n5943 1106\\n7973 640\\n4814 4341\\n5827 719\\n1881 3388\\n4070 1572\\n8038 2668\\n7035 5443\\n522 3218\\n1609 3729\\n2481 880\\n4248 3856\\n7974 5154\\n7981 857\\n4492 2215\\n2636 8109\\n9238 8793\\n2728 3749\\n1190 9870\\n3936 2956\\n7044 7393\\n6052 6043\\n3144 8620\\n4280 8377\\n7732 4008\\n9782 1612\\n1368 344\\n5672 9991\\n7918 2564\\n7358 8735\\n8895 7649\\n4980 2910\\n9364 887\\n8321 569\\n7058 3434\\n8288 6335\\n1501 6522\\n2429 9641\\n491 9579\\n3913 7025\\n3625 5856\\n3959 2517\\n8903 3847\\n1957 6852\\n1087 6904\\n5234 4477\\n7473 517\\n5754 8567\\n293 8300\\n3593 2732\\n4324 35\\n6894 2002\\n6260 1954\\n1752 676\\n6301 4803\\n1587 1251\\n26 4719\\n5550 588\\n3489 9965\\n2037 9960\\n4178 9686\\n9555 9981\\n9920 2303\\n2871 8330\\n2773 9980\\n9948 3629\\n1680 5955\\n3889 1642\\n894 2689\\n9110 8323\\n451 6103\\n5984 3844\\n1864 5191\\n5882 8440\\n5111 6049\\n5133 4796\\n9278 896\\n4447 633\\n859 5021\\n5247 2109\\n9875 1797\\n9353 8639\\n4453 132\\n7138 6779\\n2378 2605\\n705 3355\\n5433 7068\\n1802 2693\\n4663 4778\\n6958 1706\\n5669 8972\\n8221 259\\n3647 4775\\n503 7693\\n3345 8484\\n5934 8566\\n3653 1257\\n6223 5284\\n9028 3118\\n1605 1155\\n8611 4530\\n1138 5163\\n7770 1103\\n8611 4126\\n4001 5332\\n1609 3174\\n2365 4311\\n2683 7265\\n8593 7427\\n6747 199\\n291 5233\\n6387 3591\\n1813 8949\\n7171 7004\\n2414 1074\\n1090 3167\\n5229 7439\\n7685 2829\\n5299 8947\\n9581 3916\\n6418 1359\\n2627 1831\\n2376 3725\\n5380 7916\\n8230 7866\\n3101 9225\\n5920 1979\\n4062 3968\\n8467 8936\\n2723 8562\\n6681 4728\\n2212 9730\\n9990 8039\\n7959 9356\\n4174 8600\\n3694 9095\\n4828 4949\\n9591 5403\\n254 8248\\n4470 6998\\n3186 7061\\n4775 3894\\n8268 3615\\n6860 1589\\n4234 1226\\n4482 969\\n9631 7\\n6854 8690\\n9401 1780\\n804 5993\\n3568 913\\n8433 2192\\n9828 8364\\n6780 1194\\n4825 6088\\n1570 8066\\n5742 5110\\n3377 9890\\n9225 3094\\n304 6021\\n4853 7058\\n6660 346\\n6925 1214\\n3131 1590\\n9398 9142\\n1385 3524\\n3760 4689\\n3778 1970\\n9691 5602\\n6018 3187\\n2431 9336\\n9892 2628\\n1582 6846\\n3183 6382\\n2072 1026\\n6688 595\\n5939 8891\\n5113 5315\\n420 2045\\n1733 5482\\n3223 4163\\n3401 4435\\n1019 7933\\n3823 126\\n4634 53\\n8195 6810\\n7600 8633\\n7474 347\\n7380 8297\\n5256 3559\\n6770 8980\\n3450 3671\\n4510 1059\\n8338 7801\\n9301 4572\\n4628 8418\\n951 5279\\n1941 9033\\n1490 4072\\n7456 6919\\n2019 5036\\n8644 9404\\n8635 2665\\n9858 6590\\n9014 5740\\n1974 8990\\n3540 1912\\n6214 9778\\n5959 7335\\n5609 5072\\n5012 1834\\n5680 8195\\n2074 4199\\n3750 1810\\n6924 1163\\n1103 6342\\n6171 808\\n8365 7871\\n6847 1021\\n3744 6813\\n1798 1903\\n7162 8920\\n5683 8444\\n2353 9466\\n5703 4003\\n1477 383\\n7202 4384\\n7092 7938\\n6170 6870\\n3077 5461\\n7288 5678\\n7494 7205\\n2810 591\\n457 5624\\n1341 2461\\n3201 3902\\n9511 9339\\n8639 1852\\n4297 4314\\n8714 1464\\n8892 517\\n6056 6701\\n8451 9642\\n9077 1200\\n1580 8168\\n5924 8814\\n4671 6947\\n4604 1162\\n9236 2944\\n1889 5258\\n8374 9900\\n4004 5649\\n2457 6446\\n4198 3842\\n4455 5175\\n9126 3622\\n6399 628\\n2506 3924\\n5088 7928\\n6122 5450\\n9800 7882\\n4087 1291\\n7581 8113\\n4903 9696\\n1012 6647\\n6919 2665\\n3808 6917\\n5446 6856\\n4809 4411\\n4408 4586\\n696 1266\\n4112 1462\\n4639 9175\\n7144 9201\\n5910 1217\\n6090 7833\\n3038 2397\\n131 1273\\n6445 5432\\n9800 8416\\n397 4286\\n1648 4828\\n5362 96\\n2805 503\\n800 3028\\n7728 3669\\n8844 3831\\n257 4207\\n3433 818\\n8366 6429\\n7847 9806\\n9473 8055\\n8499 6294\\n5934 591\\n2431 241\\n7709 4383\\n2594 8824\\n9339 6862\\n1053 470\\n7373 6581\\n5675 9709\\n2870 9074\\n650 9156\\n6437 547\\n1309 3722\\n1201 9175\\n8022 7529\\n4303 8512\\n5423 8004\\n603 5962\\n8396 4316\\n5931 6452\\n1850 4315\\n9982 8246\\n5746 6522\\n8360 6380\\n8732 1159\\n8463 9143\\n4096 634\\n1452 8224\\n7421 7389\\n6026 7475\\n4767 7147\\n971 1624\\n7660 7364\\n7440 5105\\n2413 759\\n1261 7919\\n3463 5735\\n9186 448\\n6455 1254\\n2987 7150\\n8774 2662\\n5928 1160\\n6246 8776\\n6056 3507\\n8715 8718\\n7441 5211\\n8890 3573\\n4950 734\\n4505 2282\\n1757 2321\\n1029 6962\\n9352 3675\\n8344 1910\\n1689 7341\\n4908 8040\\n2679 2463\\n9074 2124\\n7951 8043\\n4579 920\\n45 7485\\n939 6285\\n1522 3230\\n3154 6773\\n5015 5458\\n904 7007\\n2874 4278\\n1607 3194\\n2781 8563\\n8949 5313\\n5850 2217\\n1211 2860\\n8559 1000\\n9161 3604\\n7718 1098\\n2423 7937\\n8505 6292\\n7334 6907\\n8077 361\\n4121 5878\\n1225 1930\\n7673 902\\n7639 8915\\n1910 3451\\n2196 5540\\n636 2832\\n6077 6678\\n194 8243\\n2254 6013\\n1907 5730\\n3827 2502\\n6697 1885\\n7189 1270\\n2087 5561\\n5501 7227\\n952 899\\n1815 2320\\n9399 7459\\n9300 9779\\n173 2818\\n9679 8471\\n20 4864\\n7575 670\\n6960 4573\\n4981 6572\\n9975 9180\\n2041 6086\\n7771 375\\n8333 5702\\n2469 2759\\n5604 5549\\n1990 2416\\n5945 5757\\n6703 8039\\n4635 3644\\n6449 4980\\n7303 2475\\n9312 4871\\n449 1677\\n5665 4728\\n1808 435\\n2756 6375\\n4984 9029\\n9347 420\\n5636 5243\\n815 5058\\n2648 898\\n7180 1748\\n3174 8385\\n8889 1225\\n2227 4466\\n1096 5886\\n1 8527\\n3792 9705\\n8609 4017\\n8080 7346\\n1274 784\\n2343 7534\\n8878 3502\\n596 6438\\n2909 323\\n2270 8811\\n6866 8121\\n5076 8906\\n3499 408\\n6288 1865\\n5239 5932\\n9156 622\\n4444 1537\\n1197 1103\\n8520 4450\\n92 9901\\n3812 729\\n7457 3490\\n4932 4849\\n8749 799\\n6248 3908\\n5918 8395\\n1435 5851\\n1749 2617\\n3236 9976\\n1938 939\\n8010 5156\\n8987 1736\\n2417 4757\\n9986 8105\\n1503 6734\\n9489 6966\\n5848 4382\\n2822 5721\\n2234 8964\\n288 6184\\n4257 5216\\n9039 9666\\n8641 5241\\n7635 9116\\n590 4399\\n4799 7460\\n5824 8582\\n3735 7228\\n2647 995\\n6116 5977\\n2348 8638\\n3753 7027\\n5907 7380\\n421 278\\n5236 193\\n2676 7086\\n5279 7205\\n5324 9345\\n9066 7129\\n6612 7917\\n7590 369\\n2881 8081\\n1716 2728\\n6518 2188\\n3058 7731\\n6502 7357\\n2156 4901\\n9032 7744\\n6868 5696\\n9458 5866\\n8181 1988\\n9494 6617\\n4892 4215\\n9063 5741\\n4529 3752\\n9369 5268\\n8626 2268\\n3319 7530\\n2187 7303\\n5755 1730\\n7061 9399\\n2912 5487\\n2451 9268\\n3396 607\\n1486 1795\\n4969 9626\\n5892 3483\\n8179 1688\\n2790 4023\\n7948 1553\\n4911 10\\n4616 6556\\n1993 137\\n4701 222\\n2579 2111\\n2600 280\\n197 1519\\n8655 4679\\n9529 901\\n7372 533\\n9859 8856\\n1123 6731\\n4696 2487\\n9988 2344\\n354 6867\\n2972 8904\\n3097 7068\\n8478 1383\\n2024 6448\\n4133 2623\\n3296 8297\\n9571 9273\\n245 4749\\n4874 1992\\n5752 8756\\n1957 9508\\n8436 8306\\n3455 2892\\n8117 1997\\n7739 8158\\n8360 9862\\n1516 2179\\n4593 1421\\n2956 2797\\n2289 7687\\n816 3416\\n7526 7308\\n7733 440\\n9824 134\\n3699 954\\n6975 7423\\n5292 1523\\n4692 8845\\n5714 2611\\n4403 3805\\n1895 9159\\n6934 9521\\n6889 4103\\n8996 3999\\n4594 1453\\n2154 3815\\n930 5384\\n2485 5198\\n9510 1763\\n9677 6354\\n2715 6404\\n8026 9943\\n5743 7853\\n5270 3295\\n2674 7579\\n4598 3751\\n4719 3617\\n6481 9879\\n6675 4644\\n2411 4279\\n1040 289\\n6922 4471\\n3226 7439\\n4518 2545\\n1503 2471\\n2244 9633\\n8912 7979\\n238 9136\\n243 2855\\n3137 3973\\n9914 5591\\n3516 1758\\n8984 9327\\n9425 2458\\n2975 9740\\n9648 9787\\n700 1869\\n5450 2642\\n5391 5056\\n5209 4728\\n8746 7618\\n433 7468\\n3885 8978\\n3423 9322\\n3606 7444\\n5317 8842\\n8366 8481\\n5039 1850\\n8186 9761\\n3475 4040\\n7282 682\\n2490 5786\\n7350 9295\\n901 6432\\n7832 626\\n5555 6337\\n8439 1000\\n4873 4310\\n2849 3730\\n6776 4156\\n6127 9841\\n5510 1195\\n4453 9901\\n5652 8855\\n9289 9899\\n1796 4751\\n5344 8334\\n7134 5625\\n8662 6276\\n2980 6240\\n1996 3545\\n3651 2089\\n8406 3270\\n2940 2055\\n5873 8127\\n730\\n5674 3369\\n4984 5002\\n5364 959\\n7465 4589\\n5583 5067\\n1352 1705\\n3278 8511\\n5996 2467\\n5629 233\\n823 2573\\n1668 9415\\n9675 2391\\n6823 7100\\n6612 6887\\n5857 71\\n9434 7617\\n7348 2258\\n3660 5419\\n5360 4343\\n7635 1194\\n3191 503\\n2741 979\\n3861 6360\\n2549 5587\\n8818 5577\\n3059 9524\\n9964 4066\\n6966 3277\\n4303 7028\\n3785 9978\\n3020 211\\n5485 9926\\n2370 9814\\n5395 3192\\n6624 2226\\n2131 4588\\n917 7193\\n3619 8656\\n7711 76\\n6864 9091\\n6968 2946\\n2401 4312\\n2319 7987\\n7507 2795\\n8326 2144\\n1802 3182\\n9650 2413\\n2118 2866\\n494 995\\n2575 8849\\n3928 3005\\n9326 280\\n325 2276\\n2426 8145\\n8989 9857\\n2865 9562\\n4374 4987\\n6233 1121\\n2414 6768\\n3414 3707\\n9509 5995\\n6547 7608\\n3731 2207\\n3185 4922\\n1674 2116\\n8711 1311\\n6477 2887\\n8635 6850\\n2224 1908\\n4462 1767\\n4639 133\\n2450 9236\\n4622 9653\\n2614 7836\\n2046 5411\\n4360 6248\\n3197 4527\\n5391 2510\\n1413 5169\\n9179 2306\\n4312 1974\\n1661 5602\\n6034 7255\\n628 5096\\n1905 8576\\n8406 3694\\n954 6976\\n120 973\\n6197 7532\\n288 4093\\n2811 8084\\n1939 3803\\n2341 4587\\n8521 9705\\n8965 6665\\n9420 5545\\n5085 811\\n1364 4241\\n4733 1308\\n2489 4404\\n8135 861\\n6187 4369\\n7354 9711\\n5138 8683\\n5713 5841\\n2013 2698\\n9822 6572\\n1421 2885\\n543 5213\\n4557 4948\\n6842 5400\\n5964 3916\\n4332 6189\\n1093 2835\\n8810 291\\n376 1151\\n7584 147\\n5523 5556\\n8449 4894\\n6091 6202\\n9893 2694\\n1812 5984\\n6921 6939\\n4021 175\\n5575 4712\\n1348 6850\\n4500 4098\\n5003 8461\\n1617 707\\n2616 4739\\n5186 7736\\n6897 3957\\n4862 165\\n3425 4595\\n3785 680\\n1472 1699\\n1342 6549\\n6533 1549\\n2166 2773\\n3901 6879\\n4015 9921\\n2463 9889\\n10 8129\\n529 9451\\n5589 3850\\n5975 818\\n1193 4404\\n515 7414\\n4839 3919\\n4752 2203\\n6231 6021\\n7190 7570\\n5165 800\\n6467 5394\\n4826 1762\\n7380 64\\n7023 4437\\n3238 2461\\n1181 1426\\n2126 3397\\n3709 5282\\n4675 1286\\n2803 4341\\n1022 8956\\n596 8402\\n2353 2761\\n3944 8311\\n4249 3729\\n7198 6515\\n6755 5842\\n7250 2075\\n3877 518\\n3294 6902\\n6719 2676\\n6954 5711\\n8367 7612\\n9379 5031\\n4349 8421\\n3574 5173\\n848 5151\\n529 1795\\n6888 4810\\n3138 1504\\n2655 4994\\n6728 560\\n4373 7828\\n7392 4634\\n3377 5495\\n77 1163\\n6711 9524\\n9102 4276\\n3140 8027\\n5177 8880\\n7441 6030\\n5689 2032\\n4353 6037\\n7721 39\\n4048 1321\\n3788 28\\n7126 6978\\n8404 363\\n9136 1019\\n7643 9287\\n2789 8090\\n5282 1889\\n7477 1364\\n7344 8687\\n6814 1282\\n4391 6021\\n2016 1827\\n9189 2087\\n1227 2956\\n3228 574\\n9709 2818\\n9734 7198\\n1897 4462\\n8956 9048\\n2812 5219\\n5453 3146\\n6148 8101\\n3036 2091\\n9116 7987\\n562 5190\\n5774 4271\\n332 7883\\n8186 4441\\n1966 6078\\n6983 3684\\n2844 2221\\n6593 8637\\n5531 557\\n2864 8608\\n8403 8472\\n3308 4319\\n8421 2071\\n8830 4647\\n1137 7671\\n6920 1695\\n825 458\\n5445 5605\\n6846 5051\\n4516 3079\\n3712 4791\\n8435 1437\\n5281 8857\\n1843 6947\\n8403 1996\\n667 6849\\n4529 2776\\n4397 2528\\n5962 760\\n8572 7257\\n5827 7607\\n50 825\\n4062 2669\\n3224 7270\\n858 7733\\n4640 4796\\n6807 1952\\n4352 2423\\n8711 8142\\n7905 2626\\n7532 2524\\n7356 3136\\n3746 1008\\n9051 901\\n6043 3133\\n861 2663\\n1575 2117\\n9318 597\\n7404 2839\\n3614 3787\\n3344 77\\n10 625\\n8993 6718\\n2794 7898\\n4021 9554\\n9775 2680\\n8986 7811\\n6379 4597\\n9151 1276\\n4750 8519\\n9577 2798\\n5942 9728\\n7754 8120\\n970 4995\\n3132 604\\n3855 3116\\n850 6150\\n4714 646\\n74 7756\\n374 3084\\n5624 2878\\n8500 4573\\n3137 4895\\n6716 6650\\n5756 8342\\n9730 2256\\n2671 7479\\n9831 5500\\n3500 9220\\n7996 6108\\n6953 5308\\n8905 4193\\n4788 7256\\n8577 9995\\n1634 651\\n3189 6224\\n101 8683\\n9624 2577\\n9134 9976\\n8983 8247\\n5358 9444\\n5679 2827\\n6666 8528\\n6561 5037\\n9616 7079\\n121 979\\n1279 9240\\n2598 9989\\n6401 4053\\n6698 559\\n4518 3651\\n4779 6110\\n4739 8762\\n9537 9325\\n874 3008\\n1535 5576\\n3735 2896\\n5853 2380\\n7974 4604\\n4467 2682\\n9290 464\\n4449 9594\\n4294 4600\\n6053 9842\\n6573 4680\\n7699 5723\\n2362 7079\\n6992 6079\\n4107 5278\\n5464 3837\\n4194 4688\\n8103 7661\\n1990 254\\n9941 4373\\n5835 5780\\n5109 7562\\n302 2662\\n6312 2674\\n7941 1682\\n2484 2516\\n1786 6685\\n907 5156\\n8420 8005\\n6281 908\\n9345 6561\\n9392 8607\\n3961 6486\\n6553 6745\\n3508 9954\\n977 3779\\n4150 3523\\n8892 115\\n7357 2574\\n7195 2640\\n2575 1321\\n3426 565\\n4723 4563\\n2500 3131\\n619 8131\\n8570 4212\\n5499 7953\\n3187 9072\\n6207 7816\\n4360 7893\\n2013 3014\\n854 9375\\n6387 6510\\n2989 7088\\n6410 2124\\n8271 4725\\n3665 477\\n4271 4882\\n7013 349\\n2452 8357\\n3964 9942\\n8297 1775\\n8633 4170\\n2427 1376\\n4065 5963\\n1365 2229\\n3264 1607\\n2800 2645\\n4039 4635\\n661 5186\\n1307 9994\\n9451 8177\\n5738 6581\\n7440 5346\\n7271 8636\\n2451 1629\\n8650 5685\\n8073 9166\\n5578 770\\n1466 8445\\n7193 5267\\n4086 1534\\n7622 4203\\n3658 7431\\n8585 9343\\n5381 3296\\n5106 5359\\n2226 3703\\n5694 2755\\n6310 5617\\n5994 7493\\n6262 7144\\n9717 2798\\n6312 4207\\n7170 9805\\n3488 5542\\n6563 3018\\n3026 2963\\n9383 8354\\n9122 3264\\n1523 8431\\n6475 5844\\n7710 8058\\n9361 8292\\n8475 6990\\n2666 6452\\n8779 3695\\n5399 2294\\n7236 2286\\n3880 1250\\n5465 1750\\n4276 8415\\n830 9232\\n8235 8267\\n9160 6610\\n6164 2570\\n4775 3346\\n4301 8503\\n1353 7661\\n3427 9346\\n1930 9841\\n8617 5672\\n1548 8261\\n4060 3724\\n8021 9970\\n163 510\\n7718 4184\\n180 5499\\n7950 3307\\n7725 4290\\n995 1667\\n5696 5948\\n4145 9401\\n1924 9999\\n4878 7764\\n694 7079\\n8214 6896\\n177 7148\\n3528 4173\\n1016 5944\\n239 6171\\n7902 1536\\n5032 1954\\n6316 8519\\n6117 1352\\n3283 9262\\n4664 6369\\n8578 2345\\n5555 6399\\n9464 1737\\n7132 4180\\n2091 6618\\n409 6994\\n1879 3553\\n1009 1382\\n5453 3367\\n8527 9753\\n7320 5041\\n2390 8958\\n6847 1840\\n7850 292\\n5811 2571\\n8211 1690\\n5381 700\\n4388 6913\\n7426 7792\\n5567 1276\\n1320 2030\\n3485 8445\\n4220 9236\\n1185 2173\\n4809 529\\n4190 2060\\n4170 6780\\n212 1464\\n2145 5624\\n8881 539\\n9540 5963\\n4764 5721\\n3926 942\\n2784 6233\\n9437 5911\\n5758 4285\\n5289 9456\\n1510 6787\\n4508 1833\\n7101 7249\\n5177 1526\\n3102 7998\\n5729 3597\\n1308 9583\\n5872 6679\\n603 8659\\n4301 7021\\n5302 4147\\n7346 6644\\n1804 8517\\n5581 7187\\n6957 12\\n7520 8279\\n6271 1104\\n2417 176\\n3299 1286\\n9399 1908\\n512 7362\\n8527 32\\n8968 8407\\n2841 6358\\n662 7655\\n308 204\\n2513 6349\\n1642 9364\\n4821 6181\\n5001 2400\\n811 2769\\n382 8931\\n486 5797\\n7711 5128\\n229 2503\\n5540 6077\\n1924 1666\\n3473 7178\\n489 614\\n2002 8794\\n6275 7184\\n1267 1043\\n1104 1662\\n2958 3626\\n9427 1614\\n887 8113\\n6124 3339\\n1014 7021\\n9276 8463\\n5037 8261\\n6956 2124\\n326 903\\n7666 6485\\n8664 395\\n240 6560\\n9724 3582\\n6187 3203\\n9213 9565\\n6432 9496\\n132 15\\n173 5619\\n7731 41\\n1792 7466\\n6196 6728\\n2424 9624\\n73 4881\\n203 8561\\n7483 5353\\n9402 1241\\n4619 1815\\n8484 5371\\n4132 2224\\n1516 7270\\n5888 9490\\n1463 1210\\n8971 6868\\n8478 4771\\n8246 1226\\n7727 629\\n6645 7512\\n1054 2655\\n3560 3803\\n1947 6345\\n6391 2014\\n9127 7198\\n794 3301\\n3576 9365\\n2690 8566\\n5656 6186\\n4134 5763\\n757 69\\n7221 1699\\n8454 6680\\n9034 1687\\n5592 8608\\n2431 8979\\n5490 5373\\n6496 2652\\n8271 8411\\n3946 6408\\n7967 7094\\n4821 4665\\n5419 9087\\n7869 7744\\n9457 9595\\n3069 6535\\n2255 8363\\n1510 5112\\n3349 7302\\n2566 3509\\n6923 4760\\n9777 9348\\n6403 7149\\n4761 6240\\n5747 2827\\n5902 408\\n989 7297\\n570 4765\\n7872 9823\\n165 255\\n5407 1941\\n3921 5305\\n8326 4817\\n1348 1224\\n1333 651\\n2658 3845\\n5177 1634\\n3869 8712\\n8991 1121\\n2775 3016\\n4458 6738\\n3347 2801\\n8512 9833\\n6575 902\\n6733 7432\\n4318 9457\\n6277 1301\\n1178 1693\\n941 8626\\n4739 7775\\n7491 5503\\n1050 6255\\n79 7707\\n8041 1934\\n1335 5525\\n1919 1108\\n7240 9191\\n1253 1890\\n8945 3566\\n7612 6866\\n4993 4025\\n4503 6564\\n622 7313\\n9187 6206\\n344 7789\\n5882 2426\\n1150 4356\\n4533 6935\\n2608 946\\n4036 4150\\n2993 8271\\n3410 2175\\n4208 3913\\n1890 3012\\n3369 140\\n6885 9712\\n5090 7309\\n9542 7737\\n5303 5776\\n550 3444\\n8051 8153\\n4604 5831\\n7478 4368\\n3719 41\\n910 2363\\n323 8456\\n2462 6632\\n3435 2198\\n819 2636\\n6832 8640\\n7972 93\\n9016 6874\\n8828 7457\\n5342 3714\\n5836 3850\\n3142 6656\\n4780 158\\n1310 1339\\n6060 9263\\n5624 3763\\n1985 193\\n8409 5917\\n4147 4972\\n7664 4010\\n8574 5192\\n9993 2155\\n790 2783\\n4055 4232\\n2148 6275\\n9363 7873\\n5230 95\\n5263 6982\\n4248 757\\n8838 5780\\n8944 3471\\n833 257\\n6165 3731\\n1219 6612\\n3120 7868\\n5380 4333\\n1946 1866\\n9032 8423\\n6198 8756\\n7692 3544\\n3865 8038\\n6795 7674\\n7659 920\\n9724 6086\\n5011 1175\\n6562 6919\\n10\\n7753 8903\\n8665 1978\\n5734 99\\n8046 3125\\n5348 4042\\n2990 2242\\n5490 7353\\n250 1521\\n905 4881\\n835 524\\n564\\n6511 1106\\n5257 4226\\n4704 4436\\n425 5393\\n1879 3280\\n5143 3632\\n7555 1067\\n4632 2744\\n1635 1206\\n7490 6529\\n2568 6871\\n4923 8189\\n914 9267\\n6122 4043\\n3393 1491\\n4849 1060\\n1353 5673\\n9102 4846\\n9522 1879\\n2644 2244\\n2047 487\\n5361 8881\\n7445 2248\\n3474 1727\\n3859 8245\\n4441 8425\\n8855 2082\\n3543 8880\\n4571 6765\\n6370 8767\\n9055 4214\\n357 1067\\n5002 9147\\n9337 2521\\n5941 5864\\n4109 2262\\n6516 2883\\n5570 4935\\n3354 9064\\n5889 4323\\n7993 280\\n500 3991\\n6233 6094\\n4488 1776\\n862 1442\\n7617 5392\\n3309 940\\n5215 870\\n902 81\\n9166 7913\\n9451 9549\\n6441 8654\\n7277 5527\\n4391 4450\\n2278 2609\\n1225 1278\\n4447 4581\\n5178 9781\\n3981 4399\\n6979 4243\\n5070 6215\\n7184 8829\\n277 8331\\n3791 3514\\n5742 8403\\n5843 752\\n6683 8894\\n534 4008\\n311 6085\\n4403 456\\n7296 2519\\n2588 6774\\n4914 9232\\n7667 7723\\n3743 25\\n4210 2673\\n9539 8790\\n910 6545\\n9784 4633\\n3619 5571\\n7980 8564\\n5164 2097\\n1331 2285\\n2787 4446\\n9429 8177\\n6879 2199\\n5296 260\\n5369 5858\\n6806 4064\\n3247 4908\\n3983 2061\\n32 5403\\n3829 4328\\n7042 1937\\n4441 6753\\n1316 3865\\n6497 8387\\n3471 1740\\n4834 4100\\n6178 690\\n906 3797\\n7194 8594\\n7336 6631\\n3823 7654\\n7293 8294\\n8156 4519\\n8568 1771\\n2696 4267\\n1978 3594\\n3155 222\\n1332 5981\\n4273 9971\\n3564 5897\\n998 6216\\n2616 9773\\n7118 9889\\n1141 1183\\n5212 8521\\n3283 173\\n8312 7611\\n8621 4810\\n2751 4338\\n7279 9966\\n6735 6953\\n8498 5459\\n5913 5934\\n9945 1001\\n6538 750\\n549 3459\\n1995 4999\\n2081 9305\\n8381 1419\\n6562 4645\\n2418 1506\\n6485 7431\\n9374 8203\\n1265 2957\\n1737 1676\\n7768 6401\\n634 9538\\n1723 2613\\n6469 4335\\n8422 7647\\n452 9693\\n5584 6404\\n6534 3239\\n9645 1731\\n7918 5810\\n7532 3114\\n8532 1837\\n8248 2440\\n6170 3506\\n2672 7557\\n1360 5182\\n7632 7842\\n8460 173\\n4339 9205\\n9240 1478\\n6025 189\\n5716 9204\\n7790 5046\\n6035 4128\\n9235 2329\\n1339 340\\n8060 1269\\n5001 9351\\n3506 2150\\n2498 7693\\n6951 6137\\n9512 5975\\n9297 8946\\n5898 5757\\n9160 6655\\n3969 2148\\n3615 7545\\n4529 9199\\n7577 7085\\n2354 3525\\n9206 742\\n6743 8388\\n6327 5058\\n6314 2891\\n2511 6755\\n6180 2171\\n2995 1674\\n2192 8140\\n3354 2340\\n195 3485\\n9440 5019\\n7622 1559\\n4965 500\\n9894 6259\\n5157 8920\\n5203 9480\\n9411 3178\\n8987 6559\\n1791 44\\n3943 2953\\n8503 9928\\n9981 8759\\n4631 2219\\n3943 4821\\n3344 9539\\n9520 8715\\n6471 1658\\n1391 5409\\n9059 831\\n3332 1604\\n6241 2059\\n3526 4382\\n9955 2743\\n1782 7012\\n5164 4288\\n7085 4752\\n2317 3623\\n404 9382\\n1827 3041\\n8714 7433\\n1823 6790\\n6452 7504\\n6282 7655\\n1960 4494\\n4919 7571\\n1777 8999\\n9113 8421\\n3330 6080\\n4212 80\\n1174 2667\\n1689 2648\\n9457 7943\\n9769 4419\\n1497 707\\n2767 9163\\n9315 7321\\n74 4174\\n4195 5596\\n4478 3538\\n448 2403\\n2723 987\\n8115 6351\\n8299 4156\\n2147 6192\\n1344 5260\\n2137 3239\\n5438 6545\\n8483 1024\\n441 999\\n5684 7952\\n139 1103\\n5968 6136\\n8625 6272\\n7533 3643\\n6353 9087\\n2917 7805\\n4189 8885\\n2754 8097\\n5506 1550\\n2582 5853\\n1218 2894\\n3699 4550\\n7375 8734\\n874 6446\\n5116 866\\n1524 9420\\n3007 4795\\n7631 9871\\n6758 7660\\n3061 6576\\n916 2329\\n9647 5021\\n6485 8670\\n9947 4746\\n6110 1153\\n2031 4774\\n563 5192\\n3045 8976\\n3527 8519\\n4399 4038\\n5236 4279\\n1994 7813\\n7826 5800\\n6025 4581\\n8397 7594\\n3219 6578\\n8037 7546\\n4861 1845\\n1097 7911\\n8473 2738\\n5926 5482\\n342 2956\\n8478 7028\\n811 7298\\n4895 1461\\n9407 1203\\n4234 3019\\n168 8103\\n6729 7354\\n6293 306\\n1761 6373\\n7040 3070\\n4558 6075\\n2396 9352\\n4409 9195\\n4344 8530\\n4569 2739\\n5306 8024\\n3439 5095\\n5719 7189\\n1504 2177\\n870 1382\\n6424 3681\\n3268 7221\\n7981 1966\\n8770 4463\\n9234 9499\\n8970 3119\\n8548 708\\n5164 734\\n2171 8757\\n7140 6265\\n2240 4461\\n2408 9456\\n90 1372\\n961 6055\\n9630 1133\\n8552 1840\\n3859 8519\\n9879 9836\\n7017 1863\\n4156 5084\\n2578 5132\\n321 5915\\n8899 5216\\n6729 5582\\n6368 2170\\n3019 8839\\n8674 943\\n4958 9715\\n2784 5132\\n6088 8496\\n6322 5556\\n411 5480\\n3508 1522\\n1206 2298\\n2575 623\\n6853 5781\\n8923 436\\n570 9719\\n6011 5005\\n490 6908\\n7378 1492\\n7099 170\\n2710 4168\\n6426 3862\\n5203 2097\\n294 9822\\n418 4333\\n7943 4281\\n3375 4847\\n3580 3866\\n9478 1566\\n9323 8193\\n1298 3506\\n8634 5157\\n3126 5774\\n1258 1976\\n6065 4549\\n3319 6770\\n3711 8668\\n5104 3981\\n2095 6486\\n2904 6785\\n1567 2674\\n7545 5455\\n389 862\\n5728 3189\\n6383 4537\\n5685 2567\\n9836 9497\\n5943 9252\\n1677 6312\\n8086 6245\\n5900 6135\\n8537 9512\\n2705 5736\\n2842 6194\\n7940 8357\\n8647 4804\\n6199 6071\\n4968 9877\\n7591 2162\\n9599 2141\\n5054 7717\\n3874 3073\\n2294 4076\\n7483 3115\\n5395 2114\\n434 4336\\n2833 9953\\n5762 6774\\n7236 1365\\n8047 51\\n4437 3525\\n6788 3375\\n8857 9602\\n693 9086\\n9895 4937\\n7255 3816\\n8296 3210\\n1186 4494\\n3867 6953\\n9159 7938\\n953 1258\\n1428 1293\\n5986 3707\\n1788 9253\\n7547 9970\\n7917 3335\\n9881 7095\\n1600 9844\\n3553 977\\n5171 8757\\n3625 7428\\n1703 811\\n1738 5453\\n6877 643\\n4728 1523\\n8589 6250\\n129 8306\\n2470 8211\\n4827 7501\\n8027 7497\\n8207 3245\\n8033 7248\\n2544 3930\\n2471 7407\\n5092 6267\\n1324 9216\\n395 4095\\n5394 3714\\n6782 9155\\n4822 3035\\n1472 4788\\n4709 6650\\n7822 4987\\n5392 6588\\n3489 8389\\n6264 7931\\n7484 1994\\n5339 9399\\n6911 708\\n3783 6223\\n5804 898\\n6922 9299\\n6256 5777\\n9906 8492\\n7598 7458\\n2581 3812\\n9213 5582\\n4017 7973\\n7312 6979\\n3889 6350\\n5492 7990\\n669 5198\\n1820 5806\\n1971 9694\\n6170 5508\\n87 5955\\n5752 6827\\n4732 7743\\n1089 1470\\n3724 9722\\n2350 6004\\n8415 4640\\n5770 1064\\n9998 3910\\n1568 1740\\n7748 4795\\n3135 3233\\n8211 5849\\n7764 9460\\n6547 3660\\n8318 6816\\n7618 875\\n8606 2447\\n1220 5522\\n9734 3364\\n783 8936\\n83 7153\\n1809 5839\\n4046 470\\n4728 1525\\n5617 1709\\n7149 5948\\n1477 2058\\n7103 1960\\n478 3333\\n5843 6125\\n2192 3829\\n5528 8475\\n6950 3820\\n4758 2362\\n4502 6252\\n6913 4332\\n4406 5288\\n4269 4035\\n4844 678\\n3638 3788\\n6689 55\\n3018 3080\\n2207 8517\\n9682 3562\\n3564 4541\\n4760 7693\\n4673 6710\\n271 570\\n1932 6743\\n1624 452\\n1678 4080\\n4502 209\\n206 7494\\n9654 2517\\n8457 4500\\n6361 3237\\n6602 643\\n4056 4833\\n6113 7154\\n2105 6213\\n9348 7989\\n5959 698\\n5491 5952\\n5329 2364\\n7935 2213\\n9653 8202\\n4912 6442\\n315 8076\\n6101 3991\\n4928 8473\\n2081 9005\\n4560 5506\\n1062 5833\\n7179 648\\n2003 387\\n7630 6839\\n8403 3359\\n3270 9998\\n5618 2282\\n4792 727\\n8276 142\\n9914 141\\n7091 8976\\n7500 8534\\n3182 7168\\n8307 4146\\n5987 4061\\n9546 3031\\n5001 151\\n4727 5624\\n6129 2448\\n2258 2874\\n821 878\\n1548 9660\\n8595 1203\\n4058 6488\\n662\\n8130 860\\n415 4913\\n2331 2330\\n7755 1030\\n8234 1542\\n2745 6066\\n5925 5641\\n3784 682\\n5554 9390\\n1429 1418\\n1608 4934\\n6010 1856\\n5253 3541\\n7621 5831\\n5756 7004\\n5265 9525\\n247 3131\\n2288 9467\\n7619 2895\\n8015 1550\\n5075 7645\\n9400 9990\\n4173 4027\\n9241 8928\\n1805 9278\\n3939 2556\\n391 8466\\n2931 4015\\n8141 4587\\n5428 4430\\n1242 20\\n4411 9495\\n156 2312\\n2233 4898\\n4828 2081\\n6116 2439\\n9223 9382\\n5617 8155\\n343 601\\n5072 7145\\n6265 9970\\n6500 4164\\n236 4690\\n9550 1934\\n2707 5099\\n3174 4763\\n7791 3453\\n4738 8327\\n3381 1339\\n3459 5982\\n6878 8839\\n2122 2542\\n731 6198\\n3904 4637\\n2630 1265\\n7292 765\\n9391 9310\\n5344 4804\\n6355 4428\\n6225 7949\\n5852 5541\\n258 758\\n452 1722\\n8525 6636\\n9538 7217\\n3613 4260\\n8871 9298\\n3178 8878\\n5753 1707\\n3409 3319\\n3275 1451\\n9283 5845\\n407 976\\n2632 2660\\n9852 465\\n4923 1494\\n5510 6593\\n6260 5568\\n9610 4668\\n9237 5517\\n7416 1026\\n8810 4966\\n9486 65\\n3966 6102\\n1380 8788\\n6269 1098\\n1382 5426\\n2217 2476\\n4023 108\\n4438 7012\\n2770 9538\\n9849 3704\\n3777 6475\\n1861 2559\\n3859 7708\\n8512 440\\n7787 9664\\n1137 1437\\n2818 6130\\n2211 3150\\n814 5325\\n7132 9297\\n7136 8745\\n1341 5656\\n7631 3852\\n6801 6559\\n8913 6682\\n3825 6457\\n1496 3348\\n8485 539\\n2513 6791\\n1028 2752\\n5882 7551\\n3002 4626\\n8295 2563\\n2536 7548\\n6807 23\\n9835 1218\\n4541 1503\\n9813 7028\\n8084 5713\\n5913 4274\\n9541 5397\\n9719 8302\\n8489 1983\\n2462 6024\\n1898 4244\\n9063 6310\\n5177 8977\\n514 9715\\n1796 5219\\n1798 26\\n6321 1904\\n3530 966\\n573 5609\\n1191 6029\\n847 3800\\n8839 5939\\n1134 2371\\n8244 6353\\n8596 6528\\n1686 804\\n8614 9448\\n657 3126\\n1930 9811\\n3343 9980\\n7157 4290\\n6900 4299\\n3666 1602\\n2657 3156\\n7478 9366\\n1938 4558\\n2304 700\\n6522 2056\\n354 155\\n8767 2566\\n6622 9649\\n1059 5218\\n4583 210\\n2849 4149\\n9862 7364\\n94 2308\\n1552 2490\\n8330 8842\\n7644 661\\n4299 6615\\n7174 8487\\n4182 5426\\n7698 3504\\n823 5388\\n2361 1338\\n6563 6970\\n7600 5561\\n6238 4962\\n4808 320\\n4765 1105\\n6445 2058\\n4722 7140\\n2445 5721\\n8551 7990\\n1072 9872\\n4922 2385\\n161 5903\\n378 618\\n6971 4721\\n3304 4397\\n2227 6492\\n3631 1488\\n7294 8654\\n2191 953\\n4896 1359\\n4249 7673\\n6012 8122\\n660 3326\\n9636 9722\\n4027 3415\\n1907 9733\\n5718 3860\\n149 5588\\n6549 1628\\n1142 3105\\n4555 5629\\n4367 4094\\n1626 7381\\n7825 4062\\n450 1290\\n3711 5890\\n9578 1668\\n2606 4291\\n272 5547\\n5167 4054\\n3275 6763\\n2735 9526\\n955 9329\\n7524 7224\\n196 5868\\n8372 8579\\n773 9732\\n7273 435\\n2039 2507\\n5067 869\\n3938 1511\\n3066 3912\\n7658 5399\\n3282 6152\\n6444 4912\\n2805 3027\\n7048 4514\\n6802 9282\\n9948 9416\\n9968 1066\\n3275 5351\\n6464 7018\\n8531 3990\\n6967 6300\\n5538 9665\\n1850 4414\\n2569 5597\\n2085 3351\\n6132 2522\\n5887 3270\\n8599 7907\\n1904 6442\\n5890 2110\\n785 8373\\n6706 4963\\n2583 3739\\n9856 3021\\n3634 3604\\n7187 5669\\n7424 7162\\n7556 7127\\n3047 8831\\n4002 1120\\n9491 6920\\n706 8163\\n7347 1554\\n7384 7969\\n1891 7796\\n1399 1456\\n1047 8410\\n3613 9235\\n1100 5206\\n5116 2594\\n2899 1641\\n707 5903\\n9667 131\\n9249 7987\\n4965 9630\\n4519 8230\\n5313 9794\\n4369 2133\\n8549 986\\n7900 9249\\n8 6049\\n9467 5242\\n5721 6358\\n1948 8146\\n4071 6891\\n8450 5819\\n5557 8654\\n8947 8481\\n8430 7343\\n2488 6708\\n5335 5781\\n3688 1803\\n2394 8369\\n5678 5626\\n8045 5511\\n8530 1753\\n8825 194\\n9405 2718\\n1324 2071\\n82 3115\\n2671 3796\\n7238 5064\\n3128 4064\\n9903 2580\\n9473 4353\\n7180 6260\\n2686 2680\\n2559 5938\\n9832 2388\\n5610 5182\\n2458 2802\\n9558 6729\\n5040 1714\\n3858 9480\\n7473 4834\\n3238 6250\\n5409 6679\\n3463 8952\\n535 6036\\n6165 2167\\n2932 4337\\n8143 6788\\n400 5513\\n2593 5651\\n9924 9\\n5585 6080\\n9605 4453\\n6458 7652\\n2413 8707\\n1054 8864\\n3894 1774\\n841 580\\n2532 3043\\n3805 3692\\n3954 2123\\n2609 5997\\n1181 8863\\n520 7802\\n1580 8456\\n325 3447\\n9072 1221\\n5959 2492\\n985 5853\\n4253 8264\\n4296 9949\\n2282 4281\\n8866 5379\\n5907 2455\\n8156 3258\\n2777 363\\n2708 1590\\n6590 3170\\n5014 3000\\n7923 6810\\n8704 3865\\n845 8128\\n1174 6522\\n600 6162\\n7645 997\\n3856 697\\n1360 74\\n9350 6682\\n7333 5255\\n2395 6997\\n878 3569\\n9405 4438\\n9476 4737\\n7313 8441\\n806 6181\\n9521 8950\\n6130 9781\\n5157 5732\\n1291 7745\\n2951 2945\\n1297 1611\\n4160 1005\\n6057 7439\\n710 9054\\n2317 2561\\n7154 2675\\n8852 676\\n5443 7246\\n7661 7975\\n6454 3478\\n9745 8439\\n6708 2050\\n4005 7901\\n3435 956\\n8468 1871\\n7066 2573\\n2546 570\\n6080 2534\\n8400 2030\\n51 363\\n8271 7475\\n3901 8468\\n6732 4990\\n3697 1751\\n4297 3876\\n9685 5751\\n6377 1809\\n35 4535\\n234 8777\\n6088 9117\\n1091 3302\\n1610 8332\\n9133 1340\\n5838 7127\\n4308 5023\\n1898 5563\\n3385 731\\n5704 9430\\n7501 8547\\n661 8228\\n9456 1131\\n2852 6092\\n8989 3115\\n6739 5682\\n7913 8368\\n7750 5532\\n2917 2875\\n6880 5837\\n7873 2733\\n5398 6781\\n3067 2361\\n1445 7815\\n2037 9302\\n2328 7491\\n8472 3744\\n9116 4941\\n9514 650\\n2767 9841\\n4165 1728\\n1294 6722\\n8581 2810\\n6253 8019\\n948 9930\\n1553 1361\\n7538 1626\\n3397 1373\\n53 868\\n1930 1228\\n7954 6913\\n7987 5978\\n4426 4964\\n1973 9872\\n5430 7732\\n652 1620\\n2645 3670\\n9462 204\\n762 2834\\n1086 1304\\n3061 9554\\n9839 9029\\n9380 4111\\n9671 6892\\n6861 2667\\n7158 265\\n2624 2122\\n4621 9457\\n756 4952\\n7760 6725\\n5854 288\\n4335 2340\\n8089 1427\\n2181 7534\\n9459 6410\\n6133 4883\\n356 8993\\n3518 291\\n1937 5194\\n4500 9939\\n7676 6142\\n1968 4394\\n4230 715\\n3697 4367\\n8126 8138\\n3124 2589\\n5480 2665\\n8700 7745\\n4267 3172\\n2273 7610\\n1229 1385\\n2251 159\\n1387 1638\\n6588 8511\\n3667 7645\\n2141 9325\\n2830 5515\\n2772 9772\\n253 2344\\n8614 3585\\n1034 8340\\n7409 1756\\n86 3251\\n1218 3524\\n7297 8304\\n4584 5527\\n8888 7724\\n55 9257\\n8000 5789\\n3196 3730\\n714 4350\\n961 4299\\n927 6445\\n250 2045\\n3004 9254\\n2812 1821\\n7076 9306\\n2704 4479\\n2590 3922\\n1018 7768\\n294 5268\\n3557 2170\\n8539 3051\\n7657 6293\\n4374 8140\\n9702 5009\\n2765 1188\\n9650 3685\\n3624 9364\\n8726 5839\\n1559 7073\\n7110 3333\\n8121 9529\\n3433 1630\\n1655 7344\\n6701 2395\\n5482 7963\\n603 1932\\n5644 1477\\n1209 7209\\n4100 1891\\n3971 6449\\n2363 8950\\n9694 7603\\n8384 8263\\n6250 1191\\n9309 971\\n7396 6408\\n1514 3751\\n7171 1391\\n5714 442\\n6884 7019\\n9915 8481\\n438 3412\\n1716 7300\\n7956 2806\\n8968 2868\\n5200 2706\\n2776 5840\\n8357 4823\\n608 959\\n3985 5124\\n4461 5665\\n6857 5076\\n9959 8486\\n1824 7408\\n8760 9009\\n2105 7675\\n5608 9281\\n7783 3614\\n1360 6515\\n7987 2463\\n4323 3470\\n1623 5637\\n4196 6386\\n522 7700\\n9698 2051\\n5470 3110\\n125 3519\\n2003 6802\\n2020 3514\\n5529 167\\n9016 7292\\n2930 4460\\n3974 5771\\n7604 7264\\n3632 4884\\n6896 3760\\n9128 4509\\n3467 2790\\n4179 8338\\n4650 4460\\n1401 704\\n5495 5832\\n7045 8701\\n3345 8304\\n8154 8947\\n5031 6422\\n4910 5980\\n1213 9148\\n1294 4088\\n1820 4190\\n3988 4282\\n7569 4914\\n402 1024\\n9523 3107\\n1750 6965\\n3535 9881\\n1641 4560\\n7119 5362\\n6667 7627\\n6267 8781\\n6782 945\\n4107 3849\\n7220 3024\\n86 9484\\n7119 8589\\n1118 2393\\n5665 5514\\n1281 1757\\n7053 548\\n5002 9207\\n4334 1371\\n900 4515\\n1712 9753\\n8357 9453\\n9821 2180\\n4298 3777\\n8386 6274\\n8298 336\\n7164 6515\\n2118 8269\\n5044 1176\\n1748 1968\\n1471 4564\\n4680 5469\\n8973 760\\n5831 3346\\n1066 2490\\n8637 962\\n2676 7347\\n1968 8526\\n8491 1425\\n1332 2907\\n5963 2245\\n1815 1954\\n7318 5860\\n8162 7007\\n2034 6356\\n9281 1987\\n3498 6977\\n7877 5523\\n2800 8484\\n476 1612\\n9215 3047\\n4177 4815\\n896 1464\\n990 2047\\n5203 4907\\n2667 3515\\n5094 9915\\n2342 4986\\n482 1737\\n7210 9137\\n4735 1550\\n293 4407\\n980 4044\\n7613 4358\\n2430 9224\\n7391 4651\\n5655 3011\\n5560 8149\\n9056 3772\\n2283 1348\\n9640 1686\\n8928 6654\\n562\\n9166 922\\n4313 981\\n996 2225\\n9827 2616\\n1254 9960\\n5980 8844\\n7344 7879\\n804 6442\\n1164 2638\\n4426 6318\\n5601 9243\\n3198 673\\n523 4858\\n9254 309\\n4268 1535\\n5496 6397\\n9224 554\\n3136 1188\\n3201 6286\\n4732 7800\\n9844 490\\n2154 8211\\n3450 1126\\n2159 835\\n4926 5644\\n3605 5371\\n1919 9067\\n8693 4516\\n6135 3590\\n4209 1554\\n9571 285\\n3717 2859\\n4842 8183\\n2680 2377\\n3770 2436\\n3703 7844\\n7427 4477\\n8813 6229\\n4530 4862\\n8040 6953\\n8006 7096\\n4921 2433\\n8102 3285\\n2745 6426\\n7983 6387\\n7237 5613\\n3232 3303\\n6981 82\\n2452 4956\\n9855 2481\\n4235 3599\\n5575 3965\\n5056 7992\\n1144 9868\\n672 2940\\n6374 7650\\n5758 8239\\n3783 6721\\n9980 7482\\n1453 2060\\n8455 1149\\n6509 3818\\n8792 5244\\n2341 7235\\n3052 701\\n8176 3522\\n1516 6686\\n2106 3882\\n5458 4470\\n9208 1188\\n9073 2308\\n4692 5029\\n3896 7646\\n5799 2318\\n9553 1358\\n9340 1177\\n1086 4270\\n8040 6778\\n6939 9661\\n9872 8821\\n5877 4917\\n6701 2578\\n5237 7559\\n7899 3602\\n6177 1933\\n2527 924\\n5321 2249\\n625 1025\\n325 1210\\n7579 3566\\n6361 8003\\n1537 6610\\n3623 9665\\n5182 5097\\n5947 2829\\n4765 4821\\n1216 5999\\n6923 1584\\n4910 4499\\n4649 808\\n9364 7873\\n2992 7085\\n1607 2415\\n6597 9108\\n3816 424\\n8351 9816\\n6624 3692\\n7959 9700\\n4093 4447\\n6767 9855\\n5540 2703\\n3899 4039\\n3996 5242\\n6566 7912\\n3297 4970\\n7308 1156\\n927 8521\\n8268 9618\\n4522 2892\\n8844 9111\\n6413 1871\\n7535 508\\n8748 7590\\n1133 6595\\n4943 243\\n708 8617\\n9812 9782\\n7418 1346\\n2337 5041\\n6959 4917\\n2183 3719\\n7606 1045\\n7880 4085\\n7982 7217\\n8522 8685\\n4849 8154\\n1014 5346\\n5736 6127\\n7482 4458\\n442 437\\n338 6932\\n9848 4512\\n7031 9718\\n5513 9098\\n1802 3432\\n7375 6278\\n7386 385\\n1447 2394\\n3835 8284\\n4414 3238\\n5824 1887\\n8930 3037\\n9611 1450\\n9879 6416\\n364 2795\\n8271 5912\\n2439 7651\\n4783 6635\\n7418 1475\\n8674 147\\n406 9932\\n6435 9855\\n9346 603\\n7120 5196\\n1032 1427\\n6433 6537\\n407 4043\\n9285 4541\\n7354 5727\\n8491 2931\\n5122 8292\\n519 1529\\n9729 9298\\n9056 1196\\n3226 260\\n1131 1789\\n895 8701\\n4486 9363\\n2549 8612\\n3069 7938\\n5078 6980\\n8795 8210\\n5430 1844\\n5799 4562\\n328 6619\\n2562 8694\\n4586 2443\\n9333 6452\\n4288 7542\\n8050 2367\\n7651 2077\\n949 7796\\n1382 4135\\n4234 4936\\n2967 7455\\n8532 4576\\n8637 1067\\n9241 903\\n5270 123\\n8527 2775\\n720 3468\\n3596 9357\\n5823 9295\\n5480 3782\\n1826 3403\\n8121 2782\\n1748 8402\\n8666 6461\\n723 7201\\n710 2455\\n1963 7539\\n2867 5335\\n9655 6183\\n980 5109\\n1162 702\\n982 7135\\n2995 2057\\n2556 8906\\n5027 3448\\n3347 2105\\n7375 3935\\n3615 7310\\n4305 815\\n576 9969\\n2973 3136\\n1878 1092\\n858 1646\\n2711 8255\\n91 9267\\n9358 1552\\n4197 8977\\n4879 8350\\n9786 1651\\n1464 434\\n8281 4297\\n961 9152\\n6371 2335\\n6963 5202\\n8382 9286\\n714 3843\\n8244 4738\\n2514 5084\\n2598 1846\\n7379 3023\\n8883 2621\\n931 9114\\n1325 4\\n1890 9352\\n7666 7146\\n217 5920\\n9253 8312\\n9225 741\\n2937 2756\\n4540 9618\\n6805 7503\\n3777 9285\\n9599 5969\\n7270 253\\n712 4489\\n2397 9470\\n4990 64\\n3637 8367\\n359 4267\\n9542 4030\\n8345 761\\n1454 53\\n1049 6222\\n4681 31\\n8011 7698\\n9169 8885\\n3616 1807\\n8868 9594\\n3507 1662\\n5569 7691\\n6013 7872\\n5835 5305\\n5977 8729\\n1825 5439\\n2583 7180\\n486 8047\\n5010 7994\\n1644 1042\\n7803 136\\n1113 4087\\n6604 1270\\n3918 8375\\n4988 452\\n2599 238\\n8966 4827\\n2913 5037\\n1110 7245\\n3843 4538\\n8104 6742\\n782 1607\\n144 8065\\n8037 7535\\n7348 146\\n4305 8980\\n164 9040\\n6434 3038\\n6319 1727\\n5467 8869\\n4369 2247\\n3167 6446\\n6396 6689\\n8879 1784\\n4679 2068\\n717 2132\\n3541 5951\\n854 4505\\n7999 8936\\n741 7651\\n3701 1699\\n7644 1660\\n7142 856\\n6634 8656\\n3519 9191\\n3698 5311\\n4585 3566\\n1733 1877\\n5112 396\\n927 3327\\n4816 6591\\n8756 1298\\n2841 9864\\n8261 4492\\n5596 1819\\n2405 7684\\n6617 1219\\n7505 9762\\n7679 5407\\n7728 8712\\n711 555\\n7025 7665\\n5697 493\\n2950 9729\\n9438 5274\\n5447 5293\\n5034 7443\\n7685 2888\\n5432 2167\\n2100 1021\\n7983 1764\\n5617 9478\\n7530 1347\\n928 8535\\n2945 6174\\n8245 7785\\n7308 4027\\n8054 1901\\n7161 3526\\n1795 4057\\n6208 1895\\n7161 2427\\n3319 7029\\n4579 7706\\n3855 962\\n1523 6132\\n8422 2766\\n9258 7768\\n7837 6836\\n9519 6685\\n3115 360\\n8116 7653\\n9207 1564\\n5972 1287\\n728 8332\\n1406 4683\\n6150 4167\\n2769 5745\\n6389 6303\\n8372 5343\\n8420 7428\\n1546 4953\\n131 4068\\n2870 3654\\n360 3608\\n934 745\\n375 5793\\n5627 807\\n7564 7377\\n2564 2054\\n1593 8763\\n8544 3567\\n6110 8438\\n5076 2367\\n2545 773\\n575 4260\\n8353 8489\\n9836 8640\\n3097 2505\\n8590 9032\\n3620 2950\\n1645 8007\\n9648 9600\\n3281 6159\\n5454 3520\\n201 2636\\n6360 9396\\n3558 2435\\n7423 181\\n6993 8143\\n674 3399\\n7326 2065\\n9510 4389\\n6850 9043\\n6896 6537\\n1898 5513\\n4489 5282\\n455 4590\\n5070 3587\\n4991 9144\\n2315 2745\\n5619 9901\\n3374 5795\\n6219 9821\\n800 1199\\n4070 6998\\n7613 7500\\n865 4894\\n5344 6072\\n2490 514\\n7294 1216\\n1699 5700\\n1525 7216\\n2965 3317\\n707 7361\\n7175 9044\\n620 9103\\n8857 9901\\n6522 8835\\n9731 4600\\n7185 8917\\n11 8029\\n8397 3251\\n3030 4441\\n941 9661\\n5141 8440\\n2456 9271\\n7556 3193\\n7953 4424\\n1887 5419\\n8725 877\\n9888 3610\\n3200 3644\\n7978 6528\\n1333 3810\\n5267 732\\n5661 6549\\n8512 8365\\n9821 9920\\n6783 4966\\n7179 3509\\n7805 773\\n31 5775\\n9238 839\\n34 4523\\n8955 83\\n9128 7204\\n8660 3611\\n2424 9948\\n8971 8060\\n5169 7770\\n3045 6564\\n2531 8160\\n679 1919\\n9739 8899\\n6520 5006\\n9584 9848\\n447 3731\\n8536 5201\\n9444 4589\\n5263 655\\n2150 3177\\n8017 6348\\n1521 4262\\n5126 1501\\n335 9268\\n665 9019\\n9583 4013\\n6201 6656\\n3952 6213\\n9594 4986\\n4452 3035\\n8230 3737\\n9486 5177\\n7308 1736\\n9685 6522\\n1608 1629\\n8761 4809\\n2333 6092\\n4983 4759\\n8508 6680\\n5472 2571\\n2438 8933\\n1307 7965\\n7058 2422\\n1551 6998\\n8482 8856\\n5164 7539\\n2383 1554\\n8347 1944\\n4051 8135\\n7254 5134\\n6941 2696\\n8643 2364\\n8325 6802\\n4088 7198\\n6502 8740\\n6120 9159\\n3529 2023\\n2310 1666\\n5798 1850\\n7716 7060\\n6719 5644\\n590 8279\\n3794 7602\\n6642 6225\\n8688 6685\\n9544 347\\n5057 422\\n3866 5476\\n6092 9493\\n8902 5921\\n7132 2052\\n6657 8593\\n8132 2033\\n553 8693\\n449 8616\\n5221 4482\\n1947 6971\\n6115 653\\n7183 9478\\n6019 9189\\n167 5134\\n1069 4426\\n152 9405\\n560 4435\\n372 8789\\n3529 2336\\n8244 2115\\n4433 3363\\n3016 4253\\n6897 1472\\n8292 6135\\n1024 6939\\n623 9090\\n290 3185\\n1790 1172\\n8070 7313\\n8693 2326\\n2575 5496\\n59 1378\\n9467 316\\n6638 7065\\n9774 2178\\n5317 2243\\n6471 1765\\n4835 1909\\n2440 4038\\n7418 2061\\n6575 2152\\n843\\n2822 4243\\n2394 5052\\n5841 4706\\n8683 252\\n6642 9361\\n8532 839\\n868 2699\\n6278 9269\\n7835 7836\\n7993 6022\\n4502 1483\\n4299 5986\\n4319 8324\\n8376 3716\\n8610 7223\\n6877 3268\\n1081 4764\\n2767 8855\\n1956 3173\\n7133 593\\n104 2987\\n8723 6343\\n6535 4555\\n3084 9724\\n6112 8611\\n4369 2064\\n6435 3258\\n697 4245\\n9143 2323\\n7697 7892\\n9236 2907\\n3282 3074\\n439 1866\\n9911 678\\n4005 2355\\n1297 6213\\n5234 4321\\n1510 7125\\n3132 7355\\n5751 961\\n5485 2951\\n7490 3958\\n4338 2394\\n7031 1114\\n7698 7202\\n1931 7639\\n4756 186\\n241 540\\n6068 2269\\n8365 7034\\n6533 5604\\n6570 4117\\n5236 1603\\n4012 9956\\n1559 8211\\n7793 7666\\n7349 4261\\n4540 8662\\n8310 9050\\n8574 5277\\n5587 9170\\n6912 4963\\n5262 336\\n8038 4077\\n5612 4309\\n8005 3385\\n1442 9401\\n3761 6558\\n9834 5533\\n9683 5462\\n4903 6746\\n9898 2441\\n3937 8771\\n679 4596\\n630 2066\\n243 4023\\n9543 1128\\n5161 2461\\n4649 1661\\n5462 3353\\n7881 1298\\n8527 7320\\n1544 9638\\n6208 2022\\n4683 6149\\n6129 1926\\n1339 9692\\n149 1960\\n4087 6688\\n6569 552\\n3712 4003\\n4828 2373\\n8261 8491\\n149 7739\\n8486 1427\\n4505 6534\\n7805 827\\n4861 7539\\n985 7066\\n1465 3150\\n3940 4017\\n5752 797\\n3522 6337\\n3177 4215\\n5890 8894\\n5445 5780\\n2449 7548\\n8656 8658\\n5368 7946\\n7965 3870\\n5525 9568\\n166 3934\\n3674 9328\\n7168 5427\\n181 3257\\n1683 7081\\n9333 5298\\n8486 350\\n2428 3349\\n5075 9261\\n3675 2534\\n4433 4647\\n2428 8247\\n3954 1540\\n9628 1924\\n7915 6741\\n8769 9820\\n2973 5831\\n6017 1983\\n5347 2909\\n6861 7495\\n5122 8385\\n6080 5796\\n1898 6481\\n9081 400\\n4666 2683\\n2950 5753\\n747 9503\\n3008 3317\\n579 1370\\n8942 7668\\n7254 8335\\n1468 6030\\n6920 7731\\n8167 645\\n9428 193\\n7221 7786\\n7226 1914\\n7376 715\\n7154 8262\\n5068 3790\\n5847 4547\\n7540 2593\\n8547 3342\\n3767 4932\\n6268 8065\\n295 897\\n1280 4484\\n7456 7453\\n4524 3948\\n2649 3954\\n197 3574\\n5113 1905\\n6412 8112\\n6684 5769\\n5102 6412\\n957 6829\\n6743 1046\\n69 3360\\n5505 4286\\n7434 4231\\n7791 3459\\n7753 8074\\n9135 2215\\n5701 1941\\n7636 469\\n1883 7097\\n1758 1971\\n1559 1345\\n5639 722\\n7757 3644\\n1791 7838\\n3319 1942\\n8209 8716\\n9219 2371\\n7298 9647\\n6394 2203\\n5038 3100\\n3017 5505\\n1788 2011\\n6688 4890\\n7856 902\\n6755 7890\\n8223 9820\\n3468 8011\\n3137 9492\\n289 1232\\n5449 6598\\n9032 8079\\n2041 3743\\n9095 4652\\n3112 1258\\n8753 5606\\n8972 3697\\n8604 9621\\n3637 9785\\n7543 1566\\n1876 9338\\n6215 8187\\n6272 2689\\n3217 6011\\n3885 9387\\n1130 6340\\n5163 318\\n5742 9005\\n121 1728\\n6392 4948\\n7992 3134\\n9877 2756\\n8881 2006\\n3524 5888\\n9807 8698\\n4866 2574\\n788 6097\\n3848 26\\n7762 2727\\n5713 2940\\n6110 9705\\n4146 7917\\n4941 1467\\n2838 1797\\n2965 6792\\n1892 3545\\n1616 1652\\n9611 9555\\n1234 6738\\n4955 3425\\n401 8569\\n6311 8969\\n7696 5018\\n4811 2418\\n504 4523\\n8424 9754\\n9263 7560\\n2999 2391\\n4988 9136\\n2658 5503\\n6257 2010\\n4697 9597\\n7559 700\\n9207 8720\\n5853 4354\\n9009 3261\\n2900 8704\\n4175 3411\\n583 8017\\n6327 6332\\n9957 4968\\n7974 9940\\n7687 6402\\n228 4894\\n2001 9766\\n6772 6052\\n3441 6268\\n5542 6176\\n5648 1394\\n3827 8654\\n9223 5672\\n9276 7387\\n2058 5808\\n2156 4228\\n9731 8348\\n4798 9233\\n2539 5118\\n9110 7318\\n2712 215\\n5070 3206\\n7278 1068\\n2431 5637\\n7863 6293\\n3003 9292\\n9208 2037\\n3824 7184\\n4814 8669\\n9859 8869\\n8939 9091\\n1980 8565\\n3848 7936\\n2421 1438\\n8632 6529\\n1213 7576\\n9640 6671\\n6686 3283\\n5340 9385\\n7098 4088\\n8453 3855\\n2557 8084\\n5376 5778\\n7899 3393\\n1790 3783\\n5363 7021\\n507 8794\\n2354 5466\\n2668 6192\\n9636 2824\\n9042 50\\n4798 9749\\n8276 6292\\n54 7773\\n3927 4636\\n6969 3255\\n6769 2986\\n9036 6373\\n4482 8217\\n1917 5422\\n7584 5514\\n3235 9073\\n9551 8888\\n1180 6232\\n950 1843\\n3147 3603\\n3507 1469\\n7235 4197\\n4993 5132\\n7402 43\\n7499 3621\\n9530 5071\\n6076 8813\\n8321 4261\\n7927 2034\\n7504 4205\\n1492 3991\\n8090 4839\\n7067 5826\\n3701 5834\\n2506 5980\\n3832 9317\\n8940 2490\\n1915 9617\\n5044 778\\n3531 8469\\n9052 991\\n6283 2284\\n4906 8769\\n6537 8357\\n3268 3724\\n6909 3028\\n716 5375\\n8299 816\\n8368 2378\\n1061 1893\\n4316 3065\\n8979 4485\\n885 4291\\n3337 9356\\n3599 6107\\n1163 6006\\n4341 9601\\n1376 451\\n2605 862\\n8048 6196\\n4470 6192\\n5462 3656\\n1246 20\\n5141 7948\\n201 6334\\n5237 1172\\n4974 23\\n8733 7217\\n265 3449\\n9258 7778\\n9773 2460\\n7749 5810\\n9814 5663\\n6903 8886\\n4324 2658\\n1216 6075\\n3503 8708\\n4874 6881\\n9166 1117\\n6031 5039\\n9324 9677\\n9904 8911\\n7950 6031\\n4075 4600\\n4121 6176\\n3459 5181\\n972 1184\\n9164 5921\\n8554 9148\\n8468 5877\\n5113 2474\\n6430 186\\n8850 9012\\n9743 9513\\n1512 8881\\n3757 6176\\n1418 3204\\n1110 5657\\n8591 7617\\n7565 3983\\n7046 4548\\n8774 7597\\n1489 9667\\n5055 2766\\n8343 2573\\n9356 3919\\n3801 3900\\n4638 3838\\n521 7725\\n7194 6778\\n9122 4414\\n8636 2317\\n9102 4014\\n522 6324\\n2333 2565\\n79 2579\\n8873 1061\\n9618 7438\\n7038 5359\\n2222 5125\\n9874 6450\\n7580 9431\\n3614 7412\\n6821 7818\\n3920 5453\\n1030 4391\\n2796 3290\\n8585 1034\\n1323 8522\\n1516 538\\n1061 1697\\n1135 9702\\n2318 4890\\n8632 4528\\n4287 2886\\n7827 2675\\n9138 8843\\n4588 6515\\n7347 9811\\n3751 2961\\n8335 6830\\n9272 1561\\n1110 6818\\n3164 3558\\n4865 6745\\n9385 3644\\n2645 7010\\n7927 2061\\n2695 311\\n9844 3453\\n4260 3679\\n2544 9926\\n4691 6379\\n1390 3816\\n2541 9142\\n9912 1631\\n3760 9697\\n2861 1386\\n7934 6152\\n7611 3699\\n1591 5753\\n2430 141\\n878 8784\\n7429 6456\\n1418 8269\\n5920 4124\\n498 9466\\n8509 8394\\n7838 2110\\n2842 4070\\n9943 4143\\n138 9547\\n5101 4231\\n6278 4681\\n4112 6100\\n3992 4653\\n6124 6614\\n5658 8767\\n9513 3871\\n396 895\\n5886 4824\\n1866 4814\\n8567 8875\\n4677 3665\\n8164 1509\\n7305 7969\\n4534 8061\\n8414 7771\\n4643 7488\\n3561 849\\n9471 1730\\n6704 6694\\n2071 3078\\n1162 1953\\n6952 1840\\n9659 8772\\n1995 2915\\n244 7043\\n2415 5543\\n8209 7962\\n1849 8054\\n8513 5619\\n412 4049\\n2524 6559\\n2439 775\\n7518 2495\\n7440 5328\\n9524 2956\\n8917 7187\\n3725 8759\\n1703 4445\\n4548 2642\\n1930 416\\n1764 8937\\n7832 702\\n9715 63\\n7561 8711\\n8158 4940\\n2029 3409\\n4247 9792\\n4240 4841\\n4751 6468\\n2211 19\\n80 227\\n7199 2644\\n7437 156\\n93 7403\\n9638 3540\\n4922 3310\\n6021 5043\\n172 6124\\n1958 2705\\n6499 6082\\n1734 4168\\n8168 6744\\n7697 7665\\n1209 2227\\n9936 9398\\n1927 3630\\n7993 7720\\n5971 965\\n9918 9290\\n3465 107\\n9748 3114\\n6455 3821\\n7153 4864\\n5218 1460\\n6782 341\\n6439 2927\\n3868 997\\n3950 1159\\n9143 5939\\n5589 2909\\n93 9586\\n3239 5857\\n2769 6240\\n4068 9983\\n5957 2436\\n1 4776\\n4253 988\\n231 584\\n3214 3582\\n6251 6596\\n9290 5049\\n3998 8588\\n4285 2480\\n7061 7359\\n3960 2843\\n2837 3487\\n6520 9520\\n9323 8543\\n3151 6992\\n98 1487\\n9305 5242\\n6164 202\\n6498 1574\\n2 5226\\n1936 3807\\n215 7587\\n6505 500\\n5207 8459\\n4882 8017\\n3524 1526\\n503 874\\n6430 4008\\n5323 1354\\n5195 2056\\n2635 6428\\n6366 534\\n8702 3477\\n9669 9619\\n8018 3402\\n1280 8567\\n5024 5372\\n3963 9833\\n4885 8756\\n7738 7161\\n1065 2232\\n431 4700\\n4166 3227\\n1914 4847\\n8447 2717\\n5671 6859\\n6981 8896\\n7192 7786\\n98 9131\\n9387 26\\n2864 5954\\n6791 1901\\n4607 1618\\n2788 1648\\n6100 4654\\n4051 2076\\n5032 626\\n955 5196\\n1379 1753\\n6679 4213\\n9278 4510\\n823 1878\\n2265 7640\\n906 6469\\n9022 3572\\n131 6862\\n894 8648\\n7125 6986\\n6972 1654\\n8427 1159\\n8077 6957\\n3337 4498\\n6470 6015\\n5288 2606\\n9873 6965\\n5570 8309\\n2378 9534\\n2119 2277\\n5664 722\\n8512 1822\\n7067 751\\n2060 1384\\n3815 8448\\n2354 6278\\n8035 3108\\n3200 9045\\n1959 1400\\n3321 6236\\n4958 9467\\n6032 4025\\n6240 8967\\n9174 2647\\n3341 6551\\n3283 2378\\n3507 4642\\n2437 603\\n8137 6924\\n4020 3860\\n5152 3875\\n7335 4335\\n6205 6764\\n4410 1326\\n2295 8124\\n5769 5089\\n4647 4888\\n7172 2002\\n1010 6570\\n951 3033\\n1555 3982\\n6699 6196\\n5890 9492\\n1042 8755\\n424 627\\n5635 7776\\n2842 3267\\n9769 8776\\n9419 5681\\n1492 2127\\n4792 1034\\n6091 9643\\n5805 6467\\n5792 1340\\n2070 5880\\n8238 2930\\n160 1701\\n1680 8839\\n1062 8456\\n7683 485\\n5557 1049\\n1202 1856\\n6698 427\\n6826 8918\\n3767 5451\\n8790 5479\\n142 9141\\n666 1086\\n7442 6485\\n4825 2598\\n3252 5716\\n9131 4209\\n6026 4427\\n9973 5046\\n9755 9148\\n46 4141\\n7489 6919\\n759 856\\n8960 4913\\n9847 9911\\n2294 8577\\n1276 1582\\n6838 7143\\n492 9027\\n646 1294\\n4679 2522\\n859 7003\\n5270 1348\\n4584 2480\\n1241 3081\\n5630 2532\\n3814 2589\\n506 8034\\n2891 413\\n9998 1432\\n935 6502\\n9325 6823\\n1265 3442\\n6881 4581\\n1586 8296\\n3552 8737\\n650 4976\\n2136 9271\\n2367 7229\\n4841 6967\\n5599 6171\\n1764 3663\\n8776 5822\\n3618 5256\\n7126 9947\\n8644 4010\\n6298 6092\\n5370 9170\\n9826 1745\\n6485 5276\\n4456 8588\\n7975 2097\\n7340 3009\\n3614 3216\\n5090 3395\\n2065 8281\\n8571 9325\\n3090 6796\\n2628 3539\\n5104 7211\\n6419 4113\\n7035 4723\\n4977 6158\\n9449 4184\\n8414 9803\\n9564 8833\\n937 4925\\n1149 4851\\n4165 4633\\n3730 24\\n3986 2438\\n8486 8498\\n2011 880\\n8581 9710\\n2492 1331\\n268 5564\\n9726 5567\\n1688 4585\\n4482 1551\\n7519 4566\\n4096 4727\\n4590 8746\\n1614 3871\\n1214 4789\\n1032 8701\\n8707 3863\\n5127 1108\\n1490 5875\\n9940 5208\\n3730 9306\\n7612 6025\\n6659 7459\\n9266 1413\\n5127 1681\\n3867 3468\\n9146 3737\\n3956 5575\\n514 178\\n2787 8331\\n1275 6821\\n5080 9510\\n1476 6383\\n2514 128\\n7410 3636\\n4496 6055\\n8483 6574\\n7213 138\\n8210 2394\\n1012 4335\\n3706 9062\\n452 517\\n421 7452\\n5452 9318\\n6040 7233\\n9194 2167\\n8370 9698\\n3366 8731\\n3804 8883\\n9084 3670\\n8223 7103\\n8263 751\\n8108 3545\\n724 1167\\n8150 4587\\n900 9862\\n9621 2497\\n7352 3518\\n9150 7763\\n1587 456\\n7389 3604\\n5476 7981\\n3283 6086\\n3337 927\\n1436 7937\\n6210 7130\\n6851 9015\\n8607 3775\\n4582 4437\\n6230 5966\\n9874 6371\\n4581 8237\\n21 6410\\n8130 9483\\n235 6420\\n6897 2933\\n8135 5322\\n309 1953\\n2396 2890\\n4116 610\\n2945 6119\\n5459 9316\\n7841 547\\n528\\n7560 4014\\n7671 2691\\n3494 8760\\n4194 1033\\n1448 4460\\n887 7300\\n8094 7168\\n5281 4780\\n5310 8987\\n3575 9942\\n3552 2166\\n3659 8545\\n3652 6631\\n3839 5952\\n7397 2287\\n4542 8732\\n443 3955\\n5414 3365\\n868 1525\\n1565 7745\\n5927 9969\\n1215 8183\\n4284 3181\\n2984 3098\\n9104 4722\\n500 7899\\n7076 3617\\n953 4276\\n996 2065\\n5035 4083\\n4751 1744\\n8738 4886\\n8906 102\\n3603 812\\n7692 6802\\n8429 6987\\n4006 9633\\n6000 7986\\n8901 2536\\n9814 9978\\n518 6486\\n8341 6140\\n6458 1799\\n6397 6464\\n8472 2715\\n3359 925\\n8550 259\\n6780 7722\\n4793 3272\\n753 6334\\n1488 254\\n7680 2186\\n845 3943\\n2188 407\\n8324 8967\\n4743 9596\\n9930 2057\\n1775 3411\\n9156 885\\n6753 7511\\n1264 8347\\n963 9733\\n2125 2284\\n5267 2114\\n4326 8378\\n1803 1323\\n8792 5579\\n6730 7802\\n4212 849\\n1702 9032\\n7875 7468\\n6246 2645\\n9131 110\\n5818 8596\\n7363 7779\\n3580 9009\\n138 9226\\n9782 6044\\n2506 437\\n4792 3775\\n6907 5305\\n79 9954\\n1236 1695\\n3898 7305\\n8205 8483\\n9681 3272\\n3896 764\\n123 6122\\n2641 3226\\n6103 275\\n2284 9083\\n8838 7048\\n5012 2400\\n5573 8040\\n4651 6944\\n7821 1989\\n1174 9939\\n7083 4357\\n6913 7187\\n6447 9136\\n8362 4058\\n991 3571\\n4608 9340\\n677 2404\\n5078 4304\\n6826 2887\\n1925 3342\\n7625 6826\\n9033 3081\\n7050 5528\\n3479 3399\\n3361 7806\\n953 7617\\n6719 4330\\n2560 1011\\n346 4225\\n1512 9057\\n8395 6709\\n7383 5344\\n1154 4717\\n9138 4084\\n9575 5182\\n3850 8809\\n8110 390\\n3742 627\\n5407 3689\\n3548 1564\\n693 8237\\n7322 502\\n4689 443\\n9024 5014\\n9860 7575\\n2441 9829\\n3655 6218\\n3727 7129\\n6974 7705\\n9184 3967\\n4599 6777\\n4272 5140\\n5409 4728\\n4430 1856\\n4676 948\\n4839 1855\\n2052 7439\\n2446 4468\\n3811 2431\\n1651 219\\n181 8970\\n6618 7481\\n8909 4090\\n18 4918\\n9771 6807\\n1805 5153\\n2918 9733\\n2503 6940\\n7529 6687\\n3928 5644\\n7241 296\\n1471 1125\\n617 812\\n42 8205\\n4563 6913\\n8427 2976\\n1598 7807\\n2491 2916\\n4416 7651\\n840 2978\\n4824 5057\\n9129 472\\n7300 359\\n7127 7279\\n4370 1631\\n9089 4978\\n5505 8958\\n4840 1867\\n8599 7869\\n2468 2620\\n8799 8817\\n7448 4406\\n2628 2646\\n5990 3386\\n9437 8967\\n7683 6947\\n3876 7185\\n6060 5092\\n1068 9450\\n2275 260\\n6575 5216\\n5524 4380\\n5630 1967\\n9406 5430\\n6778 967\\n614 4549\\n29 2101\\n930 4182\\n2494 6256\\n3788 1479\\n6248 1337\\n498 9286\\n7380 2975\\n1260 6486\\n4114 2084\\n2606 7154\\n3173 14\\n3039 3450\\n6504 9961\\n4230 6752\\n7847 2007\\n7006 5489\\n8290 4153\\n2448 6057\\n3268 2778\\n7854 4803\\n167 2569\\n1498 7407\\n4653 6620\\n8165 5608\\n9747 433\\n7859 6904\\n9513 8828\\n6109 7283\\n3494 939\\n9786 7640\\n3863 9248\\n3681 9171\\n4181 5971\\n7000 1669\\n7147 9580\\n4712 4301\\n5066 4928\\n5547 5362\\n6779 9745\\n1483 3991\\n7760 2029\\n5622 8507\\n4168 5642\\n9705 4069\\n8246 4050\\n2324 1926\\n6761 4108\\n7977 3907\\n7609 9757\\n5651 3244\\n8395 9090\\n5398 9583\\n3104 6624\\n7463 8953\\n2955 4461\\n6248 3353\\n4627 9674\\n381 9469\\n9574 597\\n6405 1557\\n6314 9522\\n961 6623\\n523 3740\\n9134 7604\\n7330 3465\\n4639 6583\\n8229 6859\\n5232 7956\\n2691 7040\\n8516 8363\\n6027 3047\\n2234 4865\\n3330 895\\n6428 2963\\n5698 8443\\n4591 4105\\n1599 9533\\n4313 3392\\n2798 2069\\n2487 5696\\n7321 6069\\n5251 9871\\n2680 6962\\n7432 4859\\n7038 8966\\n2757 9978\\n5564 6324\\n3404 4439\\n2778 3192\\n5364 5313\\n364 8061\\n6879 8082\\n4857 815\\n7412 239\\n2937 2897\\n5778 9281\\n8261 379\\n534 1174\\n9662 1943\\n2341 3160\\n6415 1260\\n3668 7324\\n9355 5979\\n6446 9055\\n9427 8723\\n6994 2181\\n9449 3511\\n5022 5255\\n4779 5970\\n1320 2830\\n2499 10000\\n2368 5658\\n2481 2686\\n3492 5009\\n1563 6610\\n4404 9912\\n9755 9105\\n583 921\\n4812 6309\\n6062 6060\\n7529 3179\\n2001 8136\\n4854 7565\\n23 6843\\n4542 7151\\n2543 6036\\n2967 4545\\n7684 9293\\n8792 2254\\n6893 9575\\n4521 5116\\n1742 421\\n8984 3313\\n136 4463\\n5890 2253\\n1415 9008\\n6244 8617\\n4066 4611\\n5529 6173\\n7968 5135\\n1082 4785\\n1121 2088\\n2238 1438\\n2423 2635\\n891 7031\\n8300 8818\\n7681 4699\\n902 6565\\n1162 313\\n157 8904\\n5299 7826\\n5400 4018\\n4465 9142\\n7084 884\\n6183 2344\\n1649 2823\\n6806 3986\\n1312 8791\\n3799 590\\n5398 1467\\n8179 1405\\n2426 8289\\n9794 9432\\n576 3545\\n4721 470\\n7087 1868\\n7862 5202\\n115 8564\\n5695 2746\\n4308 8881\\n8388 2305\\n2457 9339\\n5771 4269\\n7348 8873\\n8798 6858\\n2861 3789\\n7837 772\\n8855 1211\\n6024 9500\\n6517 7942\\n780 1371\\n2085 9861\\n9276 8628\\n9073 6707\\n5734 5095\\n712 3795\\n8516 9215\\n2033 5655\\n6350 9809\\n8988 9840\\n134 7721\\n6280 2682\\n6832 3127\\n905 8221\\n6361 8465\\n6854 4577\\n5340 3859\\n7790 9472\\n9 8254\\n2848 908\\n3304 7206\\n8353 8415\\n7658 8457\\n8635 3750\\n2667 1525\\n1843 6559\\n5161 4864\\n4449 9527\\n9042 131\\n4802 2425\\n2309 7085\\n103 7157\\n6561 7470\\n3455 2858\\n4868 3837\\n9673 4796\\n6305 4959\\n4053 1485\\n2126 8603\\n9509 2114\\n7159 9241\\n3591 8692\\n8551 405\\n6289 9864\\n9242 1517\\n7361 9224\\n1433 8299\\n5750 1704\\n1244 67\\n4989 2333\\n5995 8625\\n944 8180\\n4280 5888\\n4303 3368\\n6917 5986\\n2030 4389\\n3926 3883\\n6527 2683\\n1994 367\\n8051 1309\\n4305 8056\\n2484 8617\\n1828 3556\\n3722 8005\\n7626 9291\\n5260 2128\\n5086 3786\\n2665 5504\\n6715 5551\\n8629 3\\n3119 9230\\n257 8630\\n6082 3579\\n4861 4378\\n5449 8645\\n1142 5317\\n5888 3186\\n5839 4073\\n9670 2348\\n8829 1258\\n9457 8791\\n318 6493\\n2915 2475\\n8606 9609\\n7981 8595\\n9595 1576\\n2503 8588\\n553 7324\\n9603 5011\\n8429 5684\\n5684 7657\\n1020 5955\\n3821 3493\\n3184 10\\n5167 6412\\n9061 2689\\n8312 8479\\n9513 5230\\n5864 6559\\n5697 3158\\n6553 5415\\n7775 7540\\n1374 6309\\n969 591\\n8300 2539\\n7803 4751\\n7715 9032\\n6371 5186\\n5200 6445\\n3460 161\\n6514 5243\\n1489 2589\\n7575 9431\\n5 3848\\n3698 1278\\n2195 3508\\n6013 8495\\n3861 7520\\n2579 8203\\n3845 7872\\n9876 6718\\n4002 9064\\n1237 3817\\n9023 3627\\n476 9444\\n9164 6561\\n3253 7431\\n7027 6474\\n2414 4147\\n1089 4110\\n8543 9912\\n6664 7749\\n2168 1563\\n2599 3710\\n8629 7574\\n8517 1877\\n9453 4856\\n7059 622\\n5896 881\\n6386 9484\\n9889 5844\\n3772 1076\\n8946 3999\\n1501 2879\\n1126 1883\\n594 9462\\n4703 6732\\n2167 8996\\n3209 627\\n9270 4935\\n9452 8719\\n667 5778\\n9774 6523\\n6088 7916\\n1708 450\\n555\\n7639 5026\\n8687 370\\n9492 652\\n6077 5825\\n1229 1153\\n881 5811\\n1754 439\\n788 7366\\n7342 3877\\n9316 9171\\n1256 8651\\n1221 7993\\n5655 1460\\n6154 1416\\n9435 3057\\n5753 1140\\n1433 9836\\n9954 4164\\n6767 5508\\n2906 2986\\n702 8357\\n6640 1282\\n7537 7803\\n21 8844\\n4017 1556\\n7085 6863\\n674 3387\\n8527 8293\\n9518 1812\\n4543 1211\\n7833 2925\\n2714 4035\\n5479 6950\\n7260 5613\\n396 2178\\n5730 5150\\n7744 554\\n7155 5529\\n4943 8800\\n5004 6337\\n8092 6855\\n6393 4136\\n34 5733\\n5155 2314\\n7141 6110\\n4333 144\\n9900 9969\\n3975 5095\\n156 3953\\n9690 4269\\n9038 8277\\n5665 3695\\n1237 2668\\n3587 6981\\n1500 6458\\n5125 7755\\n1078 847\\n3591 5396\\n7492 7824\\n6888 7875\\n731 538\\n4351 475\\n5170 8525\\n9975 1909\\n9554 5471\\n6479 2383\\n3153 3206\\n1226 9187\\n8107 2193\\n9044 4725\\n5875 9775\\n2283 2481\\n3733 8198\\n2942 6967\\n9578 618\\n6382 7291\\n3223 1165\\n4233 2662\\n577 1639\\n3050 2406\\n760 1932\\n2381 6657\\n3721 6993\\n4001 2580\\n7710 7594\\n5674 3402\\n7170 1713\\n4502 6964\\n7858 4650\\n1190 732\\n1344 6761\\n4860 313\\n7722 7772\\n1938 2130\\n9317 7151\\n3595 1872\\n9426 1364\\n8697 6089\\n9518 1067\\n4818 636\\n2328 5391\\n2018 2374\\n6073 3269\\n6074 2206\\n369 6894\\n565 5533\\n7398 1118\\n8889 7527\\n1922 3412\\n3006 5598\\n6757 4498\\n751 2339\\n4567 6061\\n2177 7257\\n74 5292\\n2866 3330\\n7599 6737\\n7681 1298\\n1971 6187\\n369 6719\\n5149 5039\\n3168 565\\n509 9502\\n7884 1913\\n6956 2742\\n6587 9323\\n9309 4647\\n215 8684\\n8214 1003\\n9761 9430\\n9437 8088\\n3057 9626\\n1028 2436\\n3091 3278\\n4914 2313\\n7179 6561\\n8054 697\\n1617 5960\\n350 5817\\n3477 6686\\n5281 2901\\n2061 6055\\n4222 8724\\n3191 9123\\n5088 1099\\n7515 9273\\n2425 4476\\n5428 5623\\n8272 9540\\n9485 7943\\n2536 3039\\n786 8060\\n3430 5274\\n6626 2118\\n8560 7689\\n8591 3000\\n4369 9195\\n1405 765\\n4160 4288\\n1416 9626\\n9759 2975\\n9066 9783\\n1339 6476\\n5620 7308\\n8021 7409\\n1905 9072\\n2018 7294\\n5812 1702\\n5583 6841\\n9862 3977\\n8609 2167\\n6889 7305\\n1711 1856\\n7973 8677\\n8444 3760\\n7534 1513\\n25 324\\n2525 4522\\n8340 5578\\n7522 5515\\n8886 3588\\n9465 1442\\n7069 5093\\n9216 6174\\n3015 7214\\n6337 2502\\n5379 6088\\n101 7607\\n9581 7166\\n5021 287\\n7124 3272\\n1129 3763\\n5578 5756\\n5408 3901\\n4581 3680\\n8404 7762\\n6847 2852\\n9572 412\\n822 3128\\n8785 5701\\n8655 5901\\n3867 7503\\n9605 1787\\n4908 5288\\n4494 3296\\n6826 7384\\n3876 1740\\n4898 8555\\n6575 485\\n3370 3244\\n5791 1476\\n1562 7405\\n2745 4831\\n195 3174\\n4250 6956\\n5654 3973\\n9605 576\\n3576 1138\\n6516 5867\\n6789 3896\\n6482 1027\\n8790 4215\\n4608 6551\\n770 6830\\n7229 2291\\n5763 2998\\n2370 7221\\n6253 3219\\n6532 706\\n5616 2651\\n705 4197\\n1947 3678\\n9695 1589\\n1012 8832\\n3472 763\\n199 9931\\n261 2179\\n9618 7287\\n8903 8402\\n525 2396\\n8610 6746\\n8942 7498\\n6523 6955\\n4646 3932\\n1783 3682\\n1984 5602\\n5971 5203\\n2319 7947\\n161 8165\\n1390 9724\\n7543 3903\\n8984 8224\\n2554 8168\\n6373 6945\\n780 8287\\n5658 8670\\n7971 6395\\n4136 1878\\n5941 8267\\n3308 6344\\n4836 1072\\n6648 4177\\n518 5657\\n6391 4053\\n5388 7397\\n1581 6428\\n6491 8452\\n7352 7082\\n5203 4995\\n1372 7297\\n8761 626\\n414 1314\\n2588 7228\\n4394 2599\\n6293 5070\\n9695 5645\\n9028 5268\\n7610 3823\\n8580 3109\\n9886 399\\n7696 5716\\n8738 1887\\n5401 6730\\n8754 3647\\n8839 7427\\n6220 7391\\n6946 9633\\n3159 7453\\n5336 7003\\n6317 6490\\n306 2984\\n1789 7501\\n8811 6269\\n6146 9604\\n8686 8136\\n1370 9213\\n2899 732\\n8539 3768\\n2947 120\\n6928 656\\n6550 3821\\n2152 8787\\n1290 684\\n1821 9461\\n364 4763\\n8513 8249\\n4858 8649\\n6129 9833\\n6666 7878\\n5959 2714\\n1006 9573\\n4013 4660\\n5014 237\\n4653 777\\n8104 1799\\n4459 4088\\n3965 5403\\n5243 9244\\n6260 7206\\n1891 1\\n7993 1218\\n7548 8735\\n894 6945\\n651 5249\\n5737 3291\\n2644 9515\\n1106 7922\\n916 840\\n668 482\\n704 4696\\n6131 500\\n3110 8990\\n6470 6709\\n4971 5570\\n7108 8003\\n1142 3292\\n4645 5541\\n1834 3426\\n9688 1153\\n8419 822\\n7559 5483\\n807 4070\\n985 3012\\n3966 212\\n1566 3515\\n8693 3916\\n9813 3226\\n5287 7484\\n951 232\\n9121 2573\\n2439 1522\\n341 8195\\n4002 7044\\n9462 4002\\n4094 167\\n5647 7628\\n565 728\\n8499 9783\\n2324 1265\\n4438 1421\\n6629 9574\\n9417 9315\\n5891 8517\\n6968 5736\\n1267 2010\\n7685 1604\\n9300 8471\\n9721 9972\\n2106 8951\\n2851 1045\\n4040 2357\\n8178 9911\\n8343 6231\\n5455 1367\\n4446 3863\\n4607 9081\\n1832 6210\\n7641 4481\\n341 6229\\n4880 9246\\n6507 999\\n5043 8082\\n9275 3017\\n4508 2329\\n113 9480\\n4255 8165\\n8444 173\\n6707 2539\\n9349 4956\\n6576 1813\\n6595 2275\\n6999 4822\\n7080 8633\\n1518 6708\\n1461 3923\\n64 8207\\n239 629\\n3995 6764\\n2649 3946\\n2922 5138\\n2624 3814\\n3063 2612\\n354 6452\\n8714 3504\\n4097 284\\n6753 7370\\n6616 2299\\n8141 2802\\n7994 5359\\n9626 4008\\n5582 3722\\n2617 4109\\n3356 1153\\n2432 8260\\n911 4666\\n9563 133\\n3884 7042\\n2298 6536\\n4347 5798\\n3379 658\\n2848 7714\\n4087 4095\\n51 8413\\n7264 2356\\n5749 1935\\n5388 5795\\n3724 465\\n5748 2339\\n2436 6626\\n4989 1439\\n2704 5267\\n261 562\\n660 8002\\n7146 8853\\n5221 688\\n9191 468\\n215 7989\\n3529 7254\\n5599 5886\\n1563 2777\\n3407 3015\\n3256 2678\\n7388 7837\\n1415 65\\n3416 7722\\n718 59\\n7946 2911\\n3794 4777\\n5876 2981\\n580 9581\\n7032 1570\\n4946 1420\\n30 4973\\n9086 6548\\n4833 5560\\n2760 1738\\n6586 5473\\n3438 1529\\n658 5955\\n7710 1497\\n1713 8972\\n7653 3032\\n6596 8986\\n8897 3684\\n820 2060\\n6130 8381\\n7078 5117\\n8723 1811\\n4205 2645\\n8932 8164\\n7649 786\\n6441 3693\\n6159 11\\n7586 8740\\n6698 1855\\n5750 6073\\n74 5469\\n266 7167\\n5754 8169\\n9697 4504\\n5455 1672\\n6424 506\\n3195 853\\n3590 6774\\n2515 9437\\n9649 2643\\n4159 8775\\n5911 8312\\n3430 7260\\n638 654\\n3120 3238\\n5635 161\\n9651 1443\\n490 1595\\n8963 8918\\n8178 4443\\n9841 7811\\n442 6810\\n2352 659\\n7920 6470\\n6745 7419\\n7428 5878\\n5260 3991\\n9406 2861\\n5071 5124\\n6810 1747\\n915 8256\\n7770 8777\\n2275 6313\\n5795 8280\\n4988 2336\\n3852 2759\\n6794 3456\\n8992 8856\\n6558 6181\\n6372 6087\\n5675 874\\n9740 5675\\n4614 2470\\n5982 9323\\n711 6059\\n1489 7830\\n9774 1056\\n2698 4885\\n7711 1533\\n2946 965\\n5897 2637\\n3968 4972\\n3748 1756\\n9921 3326\\n8593 8103\\n2621 2029\\n5198 9290\\n7584 755\\n4178 8864\\n2059 3760\\n4597 9016\\n1631 638\\n2892 6675\\n786 1484\\n8517 9548\\n5526 9655\\n2950 1317\\n6716 9227\\n5985 9415\\n5967 2062\\n870 5109\\n3909 9325\\n1866 3165\\n4328 2947\\n8741 3869\\n9826 9692\\n9811 4358\\n2061 7392\\n1185 743\\n831\\n5437 4277\\n6559 8425\\n3101 890\\n7152 3305\\n4056 8600\\n8942 9435\\n9910 7996\\n2970 2905\\n6945 5093\\n214 9592\\n6412 9963\\n2669 1414\\n2698 9432\\n5584 7015\\n9986 7731\\n6904 8471\\n8012 4536\\n3628 3837\\n6781 9707\\n9153 7322\\n1959 4443\\n7910 6486\\n1505 4768\\n8628 6372\\n6753 7799\\n1500 7646\\n6287 8134\\n394 9121\\n6397 2145\\n9900 9004\\n1020 5961\\n7309 7461\\n1145 2019\\n3494 1247\\n7861 753\\n862 805\\n491 7152\\n1707 6812\\n8350 9199\\n4763 3651\\n4122 6819\\n2354 8835\\n7850 9248\\n7545 2857\\n7874 7022\\n4536 484\\n4964 9364\\n5027 6745\\n7393 9781\\n596 3302\\n526 8101\\n5081 5672\\n4171 1180\\n5949 5332\\n6648 5824\\n48 5227\\n3197 4222\\n3228 9608\\n5196 7902\\n7903 5399\\n9495 698\\n6768 9627\\n5263 8176\\n5696 313\\n4118 8402\\n4931 1082\\n1093 841\\n2212 1773\\n9419 800\\n2742 7986\\n388 4068\\n7733 8714\\n3565 4411\\n8122 824\\n7434 1742\\n3463 5351\\n3163 7816\\n379 2586\\n1768 1274\\n8585 9526\\n6055 5200\\n9635 5901\\n4253 57\\n5844 116\\n303 7444\\n4856 8570\\n1444 2083\\n8908 8814\\n4462 1029\\n1363 7456\\n9245 2423\\n9916 5915\\n3437 4087\\n5059 3148\\n2921 9396\\n3468 6548\\n2248 7093\\n6898 9375\\n8837 4001\\n6199 6311\\n4499 388\\n2142 6209\\n4342 2766\\n323 3871\\n6712 3219\\n3206 3017\\n4361 4585\\n6493 4053\\n5681 2887\\n2590 4279\\n9716 2406\\n6392 2953\\n5896 619\\n2224 7851\\n1837 6653\\n8116 4593\\n5069 2028\\n5352 9179\\n4094 389\\n1357 9188\\n8330 8706\\n5787 3344\\n675 4639\\n7661 2518\\n6490 5906\\n8752 399\\n5926 9715\\n1857 132\\n3234 7971\\n600 8812\\n7866 4613\\n6917 2734\\n9175 6104\\n4643 9478\\n3285 2140\\n6594 629\\n1891 5055\\n6977 6462\\n5048 3456\\n1467 4900\\n3280 440\\n9850 5842\\n9707 267\\n5187 1558\\n9633 2829\\n8758 9194\\n3689 289\\n3244 3759\\n9565 9978\\n2771 9846\\n1660 8149\\n2128 7036\\n3046 3068\\n7035 9680\\n9645 1668\\n6418 8472\\n8323 2995\\n4231 6034\\n3004 4641\\n5267 512\\n1963 105\\n7633 8943\\n1327 9072\\n3336 89\\n6152 3414\\n1206 5681\\n7716 3567\\n1738 9722\\n8118 7002\\n4143 1308\\n4224 9680\\n1895 2884\\n9125 6396\\n3436 2597\\n2052 2460\\n2914 9530\\n8559 4011\\n4001 2397\\n2069 4937\\n7192 511\\n7746 6690\\n4360 1628\\n3503 2275\\n9739 5031\\n9837 6329\\n7961 6339\\n5586 1780\\n8039 1558\\n1806 8965\\n398 6810\\n9169 6861\\n2805 911\\n6847 4309\\n73 4442\\n7719 3721\\n529 8782\\n2892 377\\n9690 3084\\n4591 9517\\n3257 9908\\n5221 2032\\n7435 8134\\n8740 5951\\n6164 5740\\n6763 8298\\n6993 6257\\n2903 436\\n2024 5542\\n454 8519\\n8868 3573\\n5462 8469\\n9158 8214\\n1445 4334\\n2615 7621\\n430 7030\\n9948 6920\\n2257 7752\\n9874 5217\\n6204 3881\\n9259 7037\\n7578 482\\n1121 335\\n8308 4400\\n4898 3503\\n7497 6713\\n770 6111\\n5182 7853\\n7248 2586\\n613 6573\\n2655 5944\\n3722 2258\\n561 10\\n7192 1691\\n5783 9620\\n7313 8657\\n7526 1589\\n5252 7988\\n2388 3750\\n4885 1040\\n5173 8683\\n7170 6743\\n7131 5720\\n9749 4384\\n2070 943\\n9861 7104\\n1971 5347\\n2912 3561\\n2936 5\\n4225 9197\\n9725 3788\\n6086 9813\\n2343 4325\\n1666 1128\\n9754 6123\\n812 4147\\n9896 5883\\n6451 8576\\n8920 4658\\n4069 8849\\n8294 175\\n1655 4300\\n5740 6185\\n4910 3530\\n431 101\\n3676 4881\\n1312 5957\\n7255 7771\\n6532 1097\\n4192 8729\\n8732 8936\\n7581 3382\\n8426 8551\\n3142 5519\\n4632 5038\\n519 2723\\n2944 9878\\n6250 2934\\n2853 615\\n2320 7270\\n9184 9525\\n8793 6177\\n3050 648\\n9380 4361\\n5216 1051\\n7437 7371\\n821 6176\\n7378 5501\\n3394 1400\\n9651 1542\\n2686 6251\\n1983 3679\\n6100 8287\\n9268 7823\\n2520 9898\\n7271 2394\\n6963 8037\\n9754 3303\\n4863 451\\n2639 7682\\n8954 5766\\n8240 9262\\n3516 7404\\n9307 2356\\n5166 4777\\n2600 9783\\n2621 1275\\n1639 7388\\n9334 7265\\n6744 7309\\n3034 2028\\n9124 9363\\n4821 5572\\n2362 3780\\n8514 8751\\n157 8747\\n5958 9589\\n6973 6079\\n6473 7755\\n8067 5661\\n389 1146\\n9236 7471\\n6569 5402\\n3379 2131\\n6503 8768\\n3389 8190\\n6754 1592\\n2674 5963\\n7666 215\\n9277 662\\n6613 4669\\n4674 5474\\n2557 1326\\n8928 2142\\n4345 5694\\n5368 4929\\n6739 8974\\n3627 6990\\n3818 5972\\n2164 8784\\n7481 7878\\n2561 1767\\n2150 774\\n8595 8376\\n8720 3965\\n557 4256\\n6872 7959\\n8784 4858\\n4282 6550\\n529 3694\\n5631 7748\\n2218 5352\\n5265 4785\\n3779 984\\n7000 2968\\n1702 5051\\n7531 375\\n9282 9684\\n55 7440\\n3495 8164\\n9702 2102\\n5733 8408\\n1348 9366\\n2156 9590\\n7099 7716\\n8932 7827\\n8142 4326\\n5148 2787\\n503 5345\\n2997 2425\\n5094 947\\n6918 9613\\n1958 1310\\n799 6152\\n9129 2501\\n3238 133\\n5975 763\\n6815 7982\\n9918 836\\n7495 4325\\n8009 4220\\n9587 3609\\n1321 9363\\n9609 1908\\n1888 3696\\n6118 8929\\n3054 8464\\n6481 3285\\n1522 9963\\n5181 4321\\n2348 6288\\n4500 334\\n5195 2198\\n7657 8212\\n2369 1156\\n889 6477\\n3465 7932\\n3907 3216\\n185 5249\\n2634 4030\\n9914 9281\\n8507 3730\\n4858 4551\\n2319 7186\\n4460 5447\\n2339 2740\\n5162 9190\\n8899 9075\\n2622 7745\\n6310 4203\\n8655 4433\\n1203 6433\\n2250 6242\\n6854 1020\\n3138 3830\\n4305 6957\\n3682 3612\\n9686 7021\\n3459 2186\\n1527 696\\n5181 3547\\n9881 6645\\n6333 5142\\n9516 7992\\n1476 7975\\n5775 3638\\n4537 4924\\n2346 82\\n874 808\\n5769 757\\n3205 2886\\n5753 9780\\n333 929\\n5585 89\\n5241 7912\\n1120 83\\n7818 525\\n3858 3888\\n6678 9562\\n9413 4218\\n2354 9792\\n1788 9433\\n6980 788\\n5807 8293\\n4209 4157\\n2845 3790\\n5496 6587\\n3607 9353\\n3524 2393\\n378 6660\\n1432 4558\\n2938 2954\\n3741 6311\\n4820 4125\\n4773 3502\\n103 4095\\n9611 4975\\n7207 6928\\n9107 7672\\n6786 3503\\n2912 2499\\n4245 6158\\n1804 709\\n1818 9516\\n8385 9952\\n2031 2044\\n9343 5847\\n9786 4689\\n9606 5033\\n4484 1047\\n8946 5341\\n4259 5036\\n9922 7233\\n7312 5836\\n25 6242\\n5862 5181\\n663 1384\\n6247 3348\\n1870 1408\\n5129 2336\\n8861 7642\\n2283 2675\\n648 7552\\n7807 6522\\n7207 793\\n4735 121\\n3220 4783\\n5339 3545\\n1002 9115\\n697 9379\\n2510 2843\\n7922 8589\\n7948 5614\\n6963 1849\\n304 3987\\n4135 1445\\n7814 3050\\n956 5592\\n6904 9344\\n8406 2398\\n7000 3402\\n2992 5569\\n3529 4669\\n5451 7884\\n3856 1492\\n7830 7114\\n6507 7480\\n9356 196\\n7340 86\\n9000 5370\\n382 3760\\n3269 9525\\n2023 3892\\n4419 3076\\n7256 2576\\n1099 213\\n740 9878\\n9635 185\\n4288 2914\\n3832 9182\\n5513 8991\\n3903 8816\\n5936 710\\n6020 6123\\n7690 9431\\n4708 704\\n5485 9382\\n9815 6980\\n8402 58\\n2684 3257\\n6850 7593\\n7954 4149\\n590 8876\\n4397 8932\\n9157 6714\\n4051 7712\\n8888 1773\\n1361 4120\\n9777 3688\\n8661 8025\\n9363 2011\\n4188 7273\\n986 8766\\n5098 745\\n3193 2967\\n234 3092\\n3702 1400\\n7780 871\\n6535 6017\\n9022 6554\\n2349 2918\\n409 8935\\n3342 7795\\n3664 6387\\n5156 2918\\n299 2098\\n1398 5329\\n2428 2596\\n5353 6030\\n1931 3704\\n6271 9334\\n2766 785\\n9171 1376\\n2719 5805\\n7655 6563\\n3844 1616\\n8972 9937\\n9840 2702\\n3697 257\\n5025 7792\\n6109 4128\\n6581 9329\\n2751 752\\n8987 2632\\n1098 7756\\n8938 4825\\n6772 8177\\n9374 6361\\n3998 8568\\n954 2791\\n9082 3188\\n500 4818\\n6592 6999\\n5722 7266\\n2914 7689\\n4804 4871\\n1494 8087\\n6339 6770\\n7092 3519\\n103 6526\\n7230 6182\\n537 1967\\n2243 6474\\n5747 6551\\n7707 3615\\n2731 1943\\n5545 7206\\n7372 8549\\n2779 2234\\n9336 9272\\n8711 46\\n3779 5306\\n2879 6380\\n7586 878\\n145 650\\n4770 2871\\n6657 2470\\n28 978\\n4238 5428\\n4742 5144\\n1290 3666\\n7114 4969\\n2712 1075\\n4081 2852\\n7397 6410\\n5463 2456\\n4497 3019\\n770 3703\\n8140 4776\\n1911 9673\\n6444 8495\\n453 1904\\n1748 2994\\n4032 6122\\n7085 6707\\n1206 5356\\n3426 9757\\n8687 8124\\n3716 2616\\n6521 5003\\n9649 3617\\n6283 8854\\n3036 6845\\n3677 3594\\n7574 6230\\n264 7204\\n8867 8711\\n9959 493\\n4380 5378\\n3573 5428\\n3593 9174\\n1359 9692\\n1762 3815\\n9178 9622\\n9002 5243\\n2177 2753\\n6279 827\\n2468 3405\\n2962 1485\\n4802 1420\\n8555 75\\n1784 3524\\n3499 2756\\n336 4819\\n8814 3957\\n5515 5891\\n7099 201\\n1853 1882\\n6903 5672\\n5242 1641\\n7246 9198\\n95 8299\\n4088 5905\\n2459 1360\\n1065 1277\\n8301 264\\n6979 1994\\n1878 4358\\n4006 5804\\n7249 9416\\n3971 9079\\n8008 8583\\n6309 7342\\n2642 6672\\n8423 9314\\n259 9091\\n7708 1255\\n3265 39\\n1300 4774\\n9139 6121\\n4673 3231\\n5199 8926\\n3291 4851\\n2522 4430\\n1535 1485\\n5260 6536\\n7768 6147\\n3064 625\\n6742 1270\\n2887 1543\\n2513 4322\\n1989 3688\\n4624 4251\\n5380 2510\\n4863 8874\\n5441 4977\\n7857 3157\\n2454 9819\\n8035 2403\\n1681 5303\\n1079 755\\n6709 2588\\n1832 1461\\n1459 2295\\n1894 778\\n6131 2752\\n4424 8759\\n4669 9927\\n48 8173\\n5917 6561\\n9887 5177\\n5460 8173\\n6235 1953\\n3996 9919\\n7796 5299\\n45 5211\\n9444 3091\\n5959 6613\\n1023 6366\\n7088 5287\\n676 625\\n9407 632\\n9199 3274\\n3570 6140\\n1636 7176\\n8490 3839\\n411 9763\\n2916 6959\\n844 9733\\n3387 4177\\n2373 8652\\n9151 96\\n4637 3620\\n6191 5453\\n1849 8208\\n8615 8799\\n1148 9918\\n8345 609\\n5971 775\\n1026 3833\\n6766 4654\\n4344 3709\\n2897 7979\\n7611 9816\\n2490 4378\\n9111 9474\\n671 7131\\n4595 2191\\n2410 9425\\n9680 9964\\n3270 6760\\n8547 6349\\n8480 1302\\n3032 3092\\n3224 6414\\n2692 6439\\n4477 796\\n6685 3781\\n555 1681\\n4712 7912\\n8388 9490\\n5067 8597\\n9204 1642\\n6222 4926\\n1629 7610\\n5243 9435\\n9311 6868\\n4688 8204\\n6372 6712\\n7374 1350\\n1620 8415\\n4149 5544\\n5879 7874\\n3787 6174\\n2102 8023\\n6096 6353\\n8852 3034\\n1537 6371\\n835 5453\\n9620 6140\\n8805 3380\\n24 6909\\n5534 7312\\n6112 268\\n3942 5453\\n9655 9590\\n4774 9327\\n2723 2378\\n4794 1097\\n9631 8740\\n4380 1823\\n523 6587\\n841 2986\\n2150 1081\\n4413 6756\\n3656 5016\\n3112 8876\\n4581 5591\\n6928 8534\\n1439 4904\\n3502 8521\\n7985 3376\\n5682 2615\\n8448 4657\\n3440 343\\n4810 2802\\n1188 1798\\n9175 8303\\n3471 3699\\n3753 3059\\n4272 2418\\n2486 9316\\n5023 5831\\n1864 6068\\n5780 2155\\n5490 8041\\n923 1164\\n5358 6261\\n1294 4296\\n5584 4366\\n2281 1779\\n7328 5833\\n8175 5760\\n8114 8189\\n7972 5744\\n334 8087\\n3502 7396\\n3018 2233\\n5319 7103\\n4006 4643\\n7600 8360\\n5531 6017\\n259\\n6635 6116\\n4325 2498\\n4129 216\\n526 1354\\n8599 3570\\n6539 9366\\n9536 8609\\n8045 195\\n14 9208\\n420 7616\\n5436 3902\\n1673 8867\\n5449 9361\\n1309 3835\\n2859 8289\\n490 169\\n9711 443\\n4518 6895\\n8913 3274\\n218 6771\\n3624 3472\\n2811 2974\\n3461 7503\\n8872 9400\\n5426 4699\\n9326 8229\\n4592 6717\\n5824 3347\\n5757 1055\\n9357 8726\\n8584 8422\\n9210 8678\\n2390 1557\\n5685 353\\n1148 7701\\n2128 2594\\n2438 5308\\n9275 9246\\n5438 2211\\n3532 8587\\n7527 1401\\n6121 666\\n6613 1331\\n5400 6019\\n5788 519\\n164 7408\\n2634 8195\\n9466 5924\\n2238 6772\\n5903 8134\\n1446 160\\n5980 60\\n4841 3842\\n6629 964\\n5515 6492\\n3144 1110\\n2483 6019\\n4450 4118\\n6194 3892\\n2948 894\\n9377 2993\\n7075 7380\\n8473 5483\\n320 6889\\n2085 5183\\n640 5610\\n3206 865\\n2261 1254\\n3992 8887\\n4968 4971\\n425 9008\\n8869 8336\\n8361 6226\\n4789 9638\\n2207 3176\\n397 5661\\n1110 1743\\n4595 350\\n1164 8732\\n2188 6787\\n2450 4395\\n4879 5812\\n8717 6321\\n9594 4928\\n2196 8517\\n560 2024\\n1441 9788\\n3327 4875\\n58 9184\\n2882 5801\\n2063 1722\\n6781 898\\n5207 8912\\n2581 5276\\n5032 7177\\n6462 9276\\n112 1123\\n6184 8022\\n9498 893\\n5299 1854\\n9503 4239\\n429 6856\\n1323 3799\\n1214 6703\\n9693 4103\\n4943 9703\\n1938 1037\\n9408 3995\\n7963 248\\n1118 6144\\n2114 8457\\n6820 873\\n3738 7099\\n8587 4837\\n1678 5664\\n2582 3760\\n1666 4407\\n5820 9640\\n485 7131\\n4709 5972\\n6034 5955\\n6606 5758\\n6499 6473\\n2466 9133\\n9413 7043\\n245 2668\\n9428 6506\\n3362 1703\\n4948 5454\\n8269 1241\\n6746 9645\\n9695 331\\n6566 2067\\n707 8995\\n8530 2913\\n1310 3623\\n1740 7760\\n8973 2186\\n2482 4037\\n1091 7263\\n8406 3769\\n8072 617\\n1545 7427\\n7906 5573\\n38 634\\n6200 336\\n9632 8639\\n4941 1684\\n2159 1463\\n7961 1665\\n8144 4278\\n3131 1947\\n1078 120\\n3293 4302\\n640 1174\\n1477 231\\n3136 9287\\n2950 9595\\n2525 2634\\n3715 7580\\n1801 505\\n5449 3080\\n6195 7417\\n7250 4786\\n2272 8783\\n9209 2442\\n8378 8020\\n7811 5285\\n2018 8947\\n7985 4681\\n7990 5080\\n5803 3893\\n6711 3763\\n5694 8837\\n3475 9881\\n9434 9352\\n2374 1846\\n3064 8544\\n8328 8217\\n8716 2306\\n6987 152\\n4440 2170\\n8845 4848\\n8203 6199\\n5889 5822\\n3654 8727\\n4314 6769\\n3784 15\\n2378 8657\\n7288 6037\\n3661 6585\\n4789 2532\\n7948 5666\\n3767 3682\\n3148 7287\\n6619 5746\\n4031 1960\\n2133 330\\n7381 2899\\n2299 7662\\n6620 1340\\n414 9176\\n9946 529\\n4679 3774\\n9798 2213\\n1342 9448\\n5680 9599\\n9888 6450\\n383 7525\\n993 4107\\n2158 587\\n5860 7950\\n5234 5661\\n5044 128\\n3504 978\\n5210 8341\\n4200 8929\\n8553 8524\\n9161 6275\\n1296 1911\\n3418 6565\\n3406 9402\\n1981 1653\\n5680 235\\n5233 6493\\n9715 4032\\n8302 7434\\n6192 8615\\n5720 3775\\n7968 9026\\n4200 3714\\n9740 3942\\n9150 4070\\n3715 6711\\n9774 5716\\n770 1297\\n119 5146\\n1702 7083\\n7268 8918\\n3357 546\\n7789 6663\\n3311 1998\\n7905 8558\\n6803 3965\\n6635 5361\\n4207 8683\\n4328 5874\\n156 6217\\n3745 2128\\n7005 529\\n6028 9217\\n8334 1169\\n3583 931\\n7904 8563\\n1819 3593\\n3435 8534\\n4467 9211\\n2646 9758\\n7110 3379\\n983\\n6373 731\\n1115 8435\\n9419 7943\\n2773 5564\\n6134 7589\\n3890 6004\\n9353 6472\\n8096 6679\\n4108 3244\\n2595 9657\\n1397 9706\\n3928 5674\\n1649 4787\\n3119 5432\\n3919 3654\\n3399 5245\\n3625 7195\\n7304 9272\\n2563 9050\\n6919 7514\\n1609 2370\\n384 6926\\n3065 2959\\n5497 8887\\n7723 6923\\n4597 2774\\n2406 2083\\n6017 6759\\n9485 4743\\n6012 8235\\n7083 1565\\n6200 7832\\n6208 843\\n7037 2142\\n2086 4589\\n463 7387\\n9774 1206\\n9102 6565\\n7334 4031\\n2886 3002\\n5060 4517\\n6493 5202\\n6655 6685\\n7193 4666\\n832 908\\n8849 4397\\n9595 8370\\n2199 2185\\n2586 882\\n6688 3576\\n4926 7526\\n893 9244\\n2167 3249\\n6939 9835\\n8403 4451\\n5636 2746\\n285 9419\\n1765 4616\\n8788 8871\\n1237 4957\\n646 8284\\n1461 5462\\n3645 59\\n8553 4771\\n5107 5701\\n885 6136\\n4486 350\\n3418 3604\\n7591 6007\\n580 2026\\n5660 4322\\n5394 4720\\n5618 6940\\n5933 2973\\n1679 9788\\n7001 2730\\n2342 1802\\n3552 2048\\n7076 2250\\n1397 7863\\n9261 6573\\n609 8609\\n7800 6573\\n9920 3477\\n161 7572\\n203 7450\\n3651 5083\\n6372 884\\n9879 4729\\n5089 147\\n5709 2535\\n4676 4503\\n7045 8049\\n8243 498\\n6647 2203\\n4987 5792\\n4922 2447\\n7307 2555\\n9489 9081\\n9369 5712\\n2934 4745\\n7912 5722\\n3774 3437\\n6692 7307\\n2780 3264\\n217 1579\\n2707 3283\\n9159 3007\\n7871 375\\n6878 4579\\n9448 4055\\n3153 1843\\n3934 8753\\n2610 8412\\n281 5702\\n4305 8732\\n968 9278\\n5475 8315\\n5753 3285\\n1987 1905\\n5442 1156\\n8499 5125\\n3170 9139\\n1660 2457\\n7343 6030\\n3471 6274\\n2911 366\\n7529 2060\\n3619 4766\\n9939 1431\\n6662 8390\\n9358 941\\n2859 6142\\n9542 2803\\n1070 7966\\n1918 1730\\n3358 4887\\n540 8323\\n8665 6919\\n3997 7427\\n3227 925\\n2666 89\\n5570 9661\\n7877 8700\\n5640 6991\\n5827 2492\\n8756 2007\\n6807 1768\\n7176 5042\\n197 2590\\n2660 6152\\n607 8197\\n2819 8479\\n1936 4032\\n2758 5527\\n8215 3016\\n3993 8657\\n6443 7228\\n7664 5924\\n6730 1270\\n4824 6696\\n2923 9464\\n5296 9219\\n8844 1960\\n975 1201\\n9870 3362\\n4175 2176\\n1453 3952\\n7442 2902\\n2736 4352\\n7941 3767\\n4554 7425\\n6232 3827\\n1225 1874\\n4705 2797\\n6876 3080\\n3018 5121\\n6280 1622\\n6813 2423\\n7045 9965\\n1203 2811\\n3133 623\\n8962 1785\\n8790 8351\\n9450 2065\\n574 207\\n5454 942\\n1405 666\\n6893 3043\\n2210 4814\\n2620 9701\\n384 1780\\n1257 6045\\n5664 1250\\n5802 2747\\n9560 1825\\n6639 874\\n9813 3842\\n7614 5492\\n3836 9230\\n4116 6920\\n4439 711\\n2438 2389\\n6428 7833\\n8554 9510\\n5720 2328\\n9831 6655\\n176 7109\\n2190 3559\\n3162 2336\\n978 9580\\n8394 3724\\n3379 7004\\n3954 139\\n9666 7895\\n1152 1951\\n9670 5798\\n7794 4530\\n9242 6151\\n3809 7634\\n5839 4766\\n6256 5416\\n5710 2263\\n9492 2512\\n2514 1070\\n9433 7328\\n1592 4191\\n4237 6398\\n5444 1553\\n6465 7886\\n5549 2758\\n736 3016\\n1016 4057\\n6629 9601\\n2523 5454\\n3821 1891\\n9437 3760\\n843 2140\\n697 1900\\n5197 9818\\n6627 3816\\n5833 393\\n9939 9651\\n1660 3600\\n9965 3000\\n5765 5834\\n7968 4114\\n9593 7882\\n9149 910\\n5610 9235\\n165 6478\\n8314 9596\\n4292 7637\\n8443 1236\\n1878 1066\\n3203 4004\\n684 8362\\n7932 7610\\n8808 2161\\n4410 6701\\n6104 4070\\n4802 3322\\n6568 3982\\n3791 9162\\n7676 3394\\n5096 4827\\n3614 4360\\n5224 9752\\n1990 7291\\n9103 2366\\n7610 4540\\n6534 2088\\n3538 6515\\n1826 9904\\n6162 6385\\n9286 4604\\n647 4453\\n2686 5780\\n6621 9867\\n6964 9093\\n6270 4204\\n2648 8466\\n6348 4246\\n9680 1380\\n1819 2545\\n7729 8036\\n5866 2313\\n5759 1102\\n4952 7895\\n6028 2745\\n213 25\\n5108 644\\n6217 1925\\n5547 2502\\n9776 1093\\n4890 9342\\n2598 1300\\n1696 9039\\n1490 8960\\n3283 6286\\n8638 7841\\n3758 7230\\n7596 7249\\n8745 2921\\n7697 9431\\n1780 8736\\n635 4052\\n7750 8205\\n7964 3160\\n5152 2849\\n1679 52\\n7256 969\\n9600 49\\n6173 4694\\n6176 5062\\n9092 6445\\n437 3144\\n1612 1514\\n5055 6199\\n7738 8245\\n3506 9113\\n1534 1142\\n8492 7405\\n8939 6891\\n2517 7250\\n6225 5084\\n5026 8257\\n352 7693\\n4157 2812\\n4948 1836\\n2458 9158\\n7030 6533\\n9820 4412\\n4529 3843\\n6238 1112\\n5725 8367\\n9247 8606\\n9189 9116\\n4036 6929\\n7753 1363\\n5759 7146\\n5447 7819\\n5294 2399\\n4168 8935\\n2161 2909\\n8858 9628\\n7865 5513\\n6155 6141\\n9627 489\\n9598 2344\\n7181 6302\\n8133 5687\\n4489 4811\\n9125 2837\\n7723 1323\\n6796 4686\\n9401 6666\\n7017 639\\n8149 3626\\n1567 5222\\n5106 4699\\n2208 9652\\n3399 4891\\n7982 1751\\n3247 7275\\n4437 240\\n9272 5165\\n8996 6661\\n237 2052\\n1768 9100\\n3929 8586\\n5364 1298\\n7976 8975\\n319 8315\\n2846 1798\\n8276 1978\\n6175 7776\\n791 2801\\n7695 1178\\n7887 2354\\n5247 756\\n4218 2371\\n2929 3216\\n8419 323\\n2430 2125\\n1223 2872\\n7540 8168\\n4236 4230\\n182 3409\\n8109 3973\\n5745 3982\\n4841 254\\n5417 8269\\n8286 155\\n2463 7491\\n7155 2048\\n6019 7678\\n3182 5239\\n2391 9741\\n4252 1425\\n4052 2506\\n430 6603\\n4224 9232\\n1134 7497\\n9173 9491\\n9259 8641\\n2631 6173\\n4400 1639\\n7961 3224\\n1706 9727\\n7002 807\\n5226 7795\\n2693 2024\\n8127 7176\\n6917 2130\\n4613 8812\\n155 7721\\n9532 4544\\n3592 876\\n435 4003\\n7877 9264\\n8768 9424\\n5161 2383\\n9169 1021\\n8732 8573\\n2114 6835\\n4556 2358\\n5145 1451\\n4789 1326\\n5242 8543\\n4962 6079\\n6350 5842\\n8825 3856\\n3521 5941\\n86 4358\\n1922 946\\n2351 5932\\n8723 9970\\n9212 3545\\n3591 1973\\n8060 2296\\n1341 5506\\n1041 5449\\n6388 6091\\n6963 7846\\n7791 3044\\n9992 6448\\n9607 3509\\n5897 9945\\n9229 1310\\n4536 7996\\n598 8064\\n582 9700\\n4530 3575\\n2709 95\\n8668 1980\\n7092 9516\\n6364 6806\\n8892 8421\\n9529 7588\\n2986 7656\\n3643 6592\\n9594 2844\\n8756 2927\\n8994 7103\\n700 9773\\n3242 8548\\n9086 5883\\n3508 5062\\n9125 4446\\n9448 1602\\n5675 7938\\n3488 6162\\n69 8784\\n2987 3096\\n1820 3918\\n1781 8601\\n1176 6592\\n9103 2857\\n4371 5480\\n4875 6210\\n8046 1520\\n9394 869\\n3742 5166\\n2575 379\\n793 8017\\n5795 9906\\n8809 340\\n6557 5367\\n7899 6280\\n7616 5981\\n1063 6594\\n6827 938\\n964 5682\\n8579 5324\\n5727 7945\\n9680 3194\\n1278 4251\\n2711 5040\\n5048 1659\\n6764 7846\\n9417 6728\\n770 6472\\n9591 7504\\n2590 2557\\n7830 3112\\n3391 861\\n4455 7522\\n2622 7888\\n1730 9533\\n3424 6596\\n2373 553\\n4029 7375\\n9309 1074\\n2577 4861\\n1803 4426\\n1163 4390\\n9040 1226\\n1054 883\\n5494 7192\\n3807 5360\\n2994 2656\\n4915 2849\\n9158 7533\\n5693 4753\\n2594 9278\\n1801 7096\\n966 8636\\n6418 9083\\n4232 9454\\n1481 3158\\n9815 8524\\n6749 8670\\n6612 8677\\n104 7498\\n2205 6686\\n3756 6519\\n4119 5310\\n4719 5041\\n7705 5999\\n4937 615\\n4576 8883\\n540 3130\\n9802 7105\\n1405 9705\\n8802 9420\\n5737 210\\n472 9147\\n6380 8173\\n2525 1178\\n2368 7715\\n2898 2154\\n6839 9738\\n5591 617\\n482 1137\\n4058 5676\\n3980 4932\\n5850 6489\\n9515 3032\\n2513 9921\\n6167 3671\\n4716 1517\\n8479 739\\n9810 5686\\n2075 3861\\n1681 9679\\n1155 9132\\n1934 8792\\n1093 6799\\n1127 6740\\n7154 3000\\n3576 1489\\n6399 6909\\n6400 2470\\n4995 9037\\n314 8306\\n2568 9197\\n8308 6889\\n4359 1295\\n668 886\\n1697 9300\\n6714 9043\\n9498 7409\\n4766 8979\\n4649 2287\\n6846 1483\\n2070 6990\\n1225 3239\\n7497 3641\\n5148 6031\\n6550 2151\\n7947 8201\\n9187 8629\\n4632 2275\\n9598 7001\\n2981 4375\\n7114 9976\\n586 4390\\n5070 801\\n7668 7324\\n7226 9226\\n9848 1765\\n3515 4611\\n4540 8208\\n3159 6146\\n5673 2886\\n3600 2845\\n3711 9544\\n2851 4101\\n7236 6721\\n1498 869\\n6609 6074\\n8016 7451\\n9347 2181\\n6938 2407\\n4150 9923\\n3008 9002\\n465 580\\n7200 350\\n2085 2357\\n7097 3007\\n8451 8455\\n5621 4611\\n7165 5650\\n6305 6267\\n2098 1904\\n9098 5286\\n2588 8241\\n1834 3047\\n3192 1396\\n4672 4754\\n8544 6581\\n430 4407\\n8041 8320\\n7093 1462\\n6859 4802\\n8555 6129\\n9033 9998\\n9117 144\\n6751 5334\\n8090 1299\\n5453 7364\\n46 9478\\n913 6498\\n284 6878\\n6624 5184\\n908 8443\\n649 672\\n9907 5502\\n342 7659\\n779 7760\\n4147 8355\\n7781 9948\\n1163 8807\\n1856 2974\\n874 6527\\n4036 7698\\n3864 9428\\n2189 3345\\n3776 8127\\n2172 9016\\n2939 6608\\n2570 7458\\n8713 9058\\n4961 6059\\n9766 8818\\n1451 3774\\n3199 1357\\n7839 5937\\n6399 798\\n8386 7305\\n3624 8779\\n6617 7682\\n8354 3540\\n2532 9310\\n3618 8363\\n3202 3909\\n2851 531\\n834 410\\n5955 1957\\n5404 1535\\n7120 2187\\n6799 3772\\n6993 3641\\n7910 5757\\n6401 1063\\n7716 3635\\n1736 6321\\n1962 3073\\n8025 667\\n7948 2708\\n8814 1236\\n3509 5924\\n6561 4123\\n4825 6906\\n4884 4033\\n9591 2070\\n1987 9896\\n1561 9833\\n8055 4856\\n321 6374\\n8233 5938\\n3275 1774\\n1198 8948\\n152 7970\\n2309 8986\\n6122 1781\\n4807 1570\\n7888 3723\\n4696 2610\\n1559 9374\\n4177 3708\\n5095 972\\n5689 746\\n8240 1511\\n7131 8663\\n6303 7217\\n4661 1842\\n4843 376\\n1458 2744\\n4635 654\\n7286 9013\\n6545 5443\\n740 3305\\n7216 4776\\n9652 3177\\n486 5168\\n1097 2139\\n6820 1543\\n4272 4579\\n2288 233\\n4161 7072\\n8104 177\\n5958 1742\\n1357 2390\\n1172 2070\\n4829 7788\\n2347 3030\\n2758 1102\\n2085 9080\\n9225 5185\\n8267 6782\\n4912 4267\\n7637 3127\\n8699 9843\\n6732 9706\\n7553 121\\n6498 5177\\n3899 4770\\n4312 4653\\n9742 7514\\n4213 1023\\n9138 1776\\n5440 3311\\n8300 7705\\n3733 5945\\n8565 1484\\n5682 3999\\n2639 1055\\n8843 1871\\n5134 2861\\n357 2528\\n8550 433\\n6091 3609\\n8439 6422\\n7591 3561\\n8634 3158\\n1699 9470\\n866 9345\\n4700 8028\\n6650 1193\\n2448 1991\\n3005 3017\\n9996 4326\\n9129 2587\\n902 7768\\n3894 902\\n6901 5611\\n1689 1127\\n7336 2642\\n3723 1717\\n4951 2126\\n660 1772\\n9345 5836\\n1763 5423\\n7047 3319\\n2062 8845\\n2393 4794\\n7212 6161\\n1448 4041\\n7039 7443\\n8636 6364\\n4582 9216\\n41 2158\\n7884 5420\\n8542 7728\\n955 6220\\n7285 4784\\n6545 9174\\n1034 6900\\n973 3542\\n4342 2828\\n7218 8892\\n9431 7085\\n8308 4091\\n1089 3801\\n2426 3272\\n1060 7874\\n9625 562\\n8705 3165\\n1091 4757\\n5140 6850\\n1713 2316\\n5300 2915\\n6139 3961\\n3624 4530\\n9433 4890\\n8564 5233\\n4903 8117\\n3104 5512\\n6788 8141\\n5099 738\\n4422 7661\\n276 5352\\n1312 2746\\n9584 7579\\n43 8313\\n9256 8922\\n8329 8836\\n8858 1532\\n9764 2710\\n449 7448\\n5651 8093\\n2457 2782\\n9933 6921\\n5328 2174\\n6419 181\\n9316 4953\\n5919 9787\\n5582 7338\\n5701 4891\\n3180 1327\\n437 1202\\n338 8970\\n6396 3062\\n3913 7261\\n9704 5980\\n9171 920\\n1960 9012\\n4962 6627\\n268 389\\n6051 8186\\n7234 8439\\n3231 8368\\n7213 6635\\n5907 5598\\n6608 9030\\n5306 8053\\n7460 4833\\n4380 2939\\n9894 3438\\n3356 1076\\n9072 3032\\n3480 9044\\n2334 3278\\n4432 5770\\n1315 60\\n2373 5305\\n5230 2626\\n2179 7545\\n1570 3449\\n3385 8366\\n5011 4277\\n8244 3420\\n7701 8818\\n4575 8158\\n2882 149\\n1633 6197\\n771 4562\\n6815 3020\\n7115 4602\\n315 2041\\n7967 2775\\n5048 572\\n6688 3104\\n9824 6796\\n8798 5859\\n4276 8312\\n4691 1134\\n4707 9521\\n7846 2053\\n2009 5296\\n3089 5833\\n2365 5497\\n6 34\\n4705 5860\\n8886 5137\\n9830 6287\\n9410 8070\\n8404 6764\\n3328 1194\\n2707 9259\\n8123 2585\\n6526 9051\\n1574 8974\\n2355 1919\\n5016 2039\\n1065 2229\\n315 2142\\n4135 7014\\n2043 405\\n8531 6968\\n469 8149\\n4697 9727\\n9532 2120\\n2144 9520\\n62 6463\\n8828 4896\\n641 782\\n8063 330\\n9175 1855\\n8087 4079\\n1806 4487\\n8345 9156\\n8617 8230\\n4535 1958\\n1040 3896\\n9874 7714\\n2488 1203\\n5572 5576\\n954 9521\\n6368 5286\\n3417 538\\n876 1267\\n9230 3320\\n9032 3281\\n4461 7016\\n9965 1888\\n4964 1778\\n1801 5610\\n7217 9620\\n3029 3781\\n2387 6953\\n2107 9369\\n3609 1940\\n6637 8954\\n9664 3352\\n6645 2349\\n9670 711\\n6720 4505\\n1283 8174\\n8387 8840\\n356 1996\\n3389 4708\\n6297 8996\\n1586 5635\\n2500 646\\n7879 2177\\n8666 4097\\n7425 8870\\n9350 8832\\n8204 5265\\n3633 5207\\n4629 2123\\n4566 2823\\n4688 4718\\n7539 1972\\n5651 6781\\n7706 9425\\n4285 327\\n7964 6875\\n8038 9662\\n6991 5292\\n3812 3707\\n3587 1811\\n7378 1499\\n7377 1934\\n1632 5142\\n7990 9438\\n7363 5113\\n9391 5545\\n483 8868\\n5951 3992\\n738\\n3327 5677\\n1601 585\\n9615 9127\\n8608 2691\\n3506 6045\\n4279 5243\\n6194 680\\n2908 8021\\n6604 6052\\n9653 5435\\n6832 7602\\n1477 4983\\n139 105\\n4824 4516\\n1636 5247\\n6971 5431\\n6024 5421\\n4420 9650\\n5236 1952\\n9463 954\\n4685 198\\n4235 5808\\n6340 8325\\n3825 2602\\n2157 4581\\n7752 8966\\n2599 9770\\n2611 7235\\n8884 9540\\n9466 3703\\n5173 4882\\n7499 1845\\n6057 5501\\n2622 1167\\n2801 1428\\n6123 1291\\n642 9702\\n5238 9850\\n8429 1045\\n9598 4288\\n1591 294\\n6048 6169\\n7873 2393\\n5039 5726\\n2864 6823\\n4636 990\\n1554 9500\\n9730 5971\\n8567 9459\\n89 3173\\n8974 1802\\n4837 6260\\n6046 3588\\n3323 6996\\n449 9440\\n3832 8643\\n3286 1451\\n3583 6645\\n9726 8572\\n5060 9304\\n4073 3778\\n1398 4313\\n5331 6298\\n8559 8098\\n1146 515\\n5516 344\\n6087 4037\\n7582 169\\n4588 377\\n9661 7390\\n9801 9122\\n5460 2796\\n1136 7474\\n6958 3444\\n1549 4956\\n1141 6012\\n2773 301\\n4447 572\\n9580 4354\\n6039 3647\\n8603 6249\\n8305 2503\\n2925 732\\n5786 1268\\n4848 6173\\n2012 1610\\n8971 729\\n9690 5340\\n9311 1800\\n1616 3795\\n7000 2123\\n1910 3455\\n8712 2132\\n1174 416\\n3369 7346\\n134 1138\\n1843 3971\\n6139 5347\\n98 3466\\n6504 4254\\n8017 8913\\n755 7470\\n6309 1410\\n1769 6391\\n1563 8680\\n5273 6273\\n9318 593\\n1611 6227\\n8640 4994\\n6663 1198\\n8563 3564\\n1304 4391\\n8379 9282\\n9180 5477\\n4426 5618\\n2463 887\\n4843 2962\\n1673 184\\n2286 41\\n6164 5956\\n397 2348\\n7836 7555\\n4419 6036\\n9248 2645\\n9424 7736\\n8174 6569\\n1192 9347\\n9516 1436\\n8460 6304\\n5355 5586\\n1276 8417\\n9452 3708\\n8881 4417\\n7381 7627\\n7031 5750\\n1605 6098\\n8142 5594\\n9681 9269\\n2920 8503\\n7895 281\\n4821 4179\\n8260 5823\\n5126 3709\\n7680 6027\\n6574 5199\\n7474 3248\\n7198 2772\\n3263 6299\\n8389 591\\n6315 627\\n5 3723\\n5334 1615\\n1214 8464\\n171 7771\\n9999 2330\\n2569 1330\\n2726 3739\\n438 806\\n9154 851\\n322 1385\\n8719 8864\\n8548 4063\\n8542 5088\\n7089 4528\\n2359 243\\n6964 5842\\n5657 7210\\n2056 4942\\n5900 3179\\n5085 4670\\n1075 1610\\n2251 6140\\n9716 1117\\n4877 915\\n7314 842\\n5492 9350\\n8691 1590\\n3021 6254\\n1914 463\\n5284 2245\\n522 7583\\n6208 8755\\n7343 7084\\n6027 8614\\n1133 4004\\n9883 719\\n2932 9350\\n3584 7978\\n4439 2078\\n1813 2961\\n5719 5530\\n2280 4617\\n3645 5164\\n4565 1719\\n8169 8513\\n6932 8540\\n3222 108\\n6196 9198\\n9475 5965\\n2820 9097\\n7274 5925\\n6315 739\\n4307 140\\n3853 582\\n1007 8156\\n5601 2109\\n8807 8686\\n3419 3280\\n7171 9473\\n9799 7447\\n4790 5682\\n9381 2487\\n7877 6387\\n725 7380\\n5003 2191\\n7503 6674\\n51 2602\\n8831 6221\\n6276 3105\\n1792 3764\\n1460 6881\\n3735 7845\\n1402 2679\\n6576 710\\n5616 2306\\n4089 1197\\n5471 5745\\n10000 6238\\n9590 6163\\n7021 6478\\n3662 9451\\n2707 1270\\n937 6614\\n3459 1348\\n2846 9564\\n484 2304\\n9515 9554\\n808 498\\n5844 9267\\n4976 7201\\n5630 3163\\n845 1493\\n684 2773\\n3674 8063\\n9535 6846\\n275 3137\\n5975 5432\\n9797 2017\\n1840 5760\\n2427 9472\\n9564 2048\\n4536 7798\\n2661 2490\\n4375 438\\n2116 5907\\n1759 2205\\n1557 308\\n7883 819\\n8571 8733\\n2510 5372\\n6019 8342\\n4893 764\\n9351 123\\n8487 6134\\n3966 7164\\n8363 347\\n3757 1515\\n3291 3067\\n8638 3177\\n2618 2509\\n9763 8644\\n4842 3616\\n2373 7792\\n5266 4063\\n7227 5117\\n3572 7426\\n9858 7178\\n5180 4036\\n1181 6714\\n2425 775\\n4116 6001\\n1562 6532\\n613 4821\\n8702 6763\\n7109 211\\n7036 1731\\n9568 1990\\n3861 6361\\n5844 5964\\n3840 7891\\n544 8889\\n9641 3593\\n7764 6154\\n9962 4349\\n8078 2059\\n9458 2772\\n9104 8701\\n1864 8991\\n4135 1538\\n5531 7989\\n3601 6869\\n1313 5790\\n1781 3710\\n4912 3373\\n9435 7153\\n1673 1148\\n9916 8740\\n6556 3073\\n6621 2724\\n8540 7146\\n9507 8650\\n1308 6311\\n1876 7505\\n1438 1986\\n8905 8691\\n9370 5880\\n1139 7135\\n4400 2002\\n9775 6014\\n9977 4126\\n8307 2066\\n2510 8576\\n1104 634\\n6270 8125\\n3358 7287\\n1132 8220\\n4844 5848\\n2002 3343\\n1107 5627\\n4615 6621\\n4276 8625\\n6865 1783\\n5370 4481\\n2706 9701\\n576 5014\\n6254 1749\\n8524 4498\\n2882 5760\\n7803 9108\\n7762 6138\\n6503 3228\\n4623 7835\\n4002 8761\\n9071 4316\\n9718 3869\\n5735 9399\\n6755 1228\\n1498 5575\\n4114 4684\\n91 8994\\n9998 6533\\n918 1089\\n1795 8999\\n8210 7143\\n1388 5925\\n3813 163\\n4115 2501\\n7981 3947\\n7586 7660\\n9746 449\\n7270 8502\\n4647 34\\n8021 6953\\n7407 4275\\n95 7694\\n6230 7340\\n8895 4133\\n7954 1205\\n8908 4362\\n6554 7401\\n88 2293\\n9396 8366\\n8466 7474\\n744 4295\\n3203 301\\n7088 8418\\n9430 7956\\n644 40\\n1278 8543\\n1529 3436\\n8982 2939\\n7439 1046\\n4877 1693\\n6789 7158\\n9823 8441\\n4023 1470\\n915 9329\\n8310 5406\\n1667 6470\\n5317 6736\\n3487 9261\\n5247 7628\\n7034 6801\\n1265 8414\\n9577 9996\\n5743 4706\\n49 7279\\n697 472\\n336 168\\n2829 4963\\n6079 5104\\n8147 2022\\n4306 7636\\n4370 4977\\n4511 4185\\n943 6197\\n6161 1536\\n4869 2290\\n7573 7941\\n102 9112\\n4921 3340\\n2980 2736\\n332 364\\n9952 7392\\n1178 6805\\n6792 2439\\n1248 5331\\n2725 3498\\n6982 8992\\n8958 2358\\n2251 3496\\n5491 4809\\n5975 4128\\n2109 3453\\n9091 1665\\n2250 7467\\n7956 3418\\n2621 4159\\n2964 6734\\n1688 4620\\n8032 822\\n7386 1370\\n3976 4418\\n3147 7006\\n1129 3786\\n9758 2310\\n2562 9773\\n6038 6302\\n4675 4463\\n7936 3892\\n8613 7371\\n9031 4986\\n5547 1275\\n9402 9633\\n7211 247\\n3707 4530\\n6268 5095\\n4236 4779\\n1188 5346\\n9031 2353\\n6447 528\\n2493 5524\\n942 9536\\n3657 7031\\n8373 5218\\n511 8625\\n4378 8206\\n9021 5507\\n6695 8331\\n9760 3121\\n4023 1331\\n8771 1010\\n3332 825\\n6921 1778\\n7922 648\\n9444 3770\\n7600 8360\\n167 5637\\n477 810\\n1751 4652\\n8424 7054\\n8949 2438\\n1064 7925\\n7598 4071\\n7084 4316\\n1554 5263\\n3368 7233\\n4180 5567\\n9862 7350\\n3614 4708\\n6455 9673\\n5386 2442\\n3509 9948\\n6137 84\\n2424 480\\n7501 5926\\n9855 5231\\n4312 7814\\n2756 4537\\n3776 1696\\n6499 3169\\n3567 431\\n835 8802\\n4543 8248\\n9977 6090\\n7405 4194\\n5616 9248\\n1552 9532\\n1278 959\\n2051 8354\\n4176 9044\\n4205 7428\\n1356 1091\\n526 6160\\n8654 4758\\n5441 1700\\n2764 1325\\n2469 6782\\n7163 784\\n9253 614\\n8091 4265\\n3882 9929\\n769 9120\\n7311 6075\\n6689 9776\\n2842 7295\\n1952 4082\\n6665 7165\\n6413 5071\\n954 6022\\n710 1959\\n5848 9125\\n1155 9425\\n9204 4991\\n8706 1233\\n781 4066\\n4919 9536\\n9264 7228\\n4756 5059\\n1527 248\\n2561 9383\\n8529 4779\\n927 2803\\n1136 1515\\n9661 5809\\n6910 4556\\n9503 3563\\n6479 9571\\n3294 2276\\n7167 375\\n1002 3452\\n5121 5434\\n6262 5585\\n523 6751\\n1480 1725\\n4074 5477\\n4421 3986\\n8303 7348\\n500 9993\\n7244 6017\\n2416 1354\\n9145 5695\\n3984 3963\\n6922 6994\\n5189 2144\\n4690 4491\\n8863 3313\\n7931 202\\n687 208\\n1055 508\\n6370 5028\\n5688 1968\\n6834 1639\\n935 8450\\n8234 9193\\n7758 5441\\n2153 1676\\n2851 290\\n2862 9182\\n6562 1700\\n9564 890\\n4528 404\\n8782 7458\\n2620 4431\\n7785 3225\\n8603 1997\\n759 2475\\n9825 910\\n7831 2870\\n6385 5434\\n2687 6641\\n7760 1613\\n9579 1057\\n5553 9642\\n1551 8789\\n1475 1991\\n4316 1574\\n9127 3720\\n1183 5167\\n4602 8133\\n8062 8391\\n3584 5998\\n5097 9560\\n7140 1878\\n1332 3035\\n9090 9259\\n4453 7636\\n766 7600\\n1702 2035\\n1907 6662\\n2979 4273\\n4690 8070\\n9089 3179\\n8969 514\\n1537 1810\\n4955 8192\\n6857 3432\\n1415 910\\n1264 1186\\n2971 6659\\n3851 2409\\n6196 4226\\n3138 2227\\n9836 8132\\n4145 4764\\n2002 3356\\n7756 7999\\n8771 216\\n1008 4716\\n2963 7497\\n2649 8277\\n3398 6024\\n6230 4838\\n9496 9379\\n4351 148\\n4291 524\\n1302 1782\\n4429 8477\\n7993 5132\\n7806 2216\\n9282 3328\\n4226 4087\\n3392 4629\\n3557 4431\\n7500 3922\\n7732 7326\\n4889 1000\\n270 4510\\n2385 5861\\n4676 3178\\n728 7056\\n9965 1246\\n4642 721\\n2687 3530\\n5700 7397\\n2994 4114\\n9846 5408\\n2655 3440\\n3102 4886\\n1943 4839\\n8049 869\\n4523 6104\\n6463 310\\n8095 7545\\n9895 3884\\n9748 49\\n3248 6853\\n2409 2091\\n2830 9804\\n5022 2204\\n6323 135\\n4713 5183\\n4779 8578\\n7288 3113\\n7263 5941\\n7767 925\\n8503 3344\\n4759 7107\\n9589 9398\\n1109 7606\\n4251 2329\\n9197 1382\\n137 9546\\n8041 4735\\n5856 8550\\n2297 481\\n500 989\\n6362 7262\\n2616 5451\\n6808 3907\\n6205 4186\\n2996 9723\\n5754 4985\\n7766 4747\\n9595 5404\\n6144 818\\n3123 5177\\n7008 5073\\n3766 6340\\n8798 2888\\n3434 7088\\n428 2976\\n2170 9194\\n5581 2708\\n6705 4038\\n9043 676\\n2389 4349\\n6510 7031\\n9514 5163\\n2457 4297\\n3868 3590\\n4239 938\\n3450 1954\\n7312 9147\\n6372 9065\\n6503 5235\\n5124 1855\\n7866 698\\n4494 5191\\n1319 1889\\n4240 800\\n3208 5467\\n1818 4946\\n8966 1788\\n7404 6320\\n4773 3201\\n3224 7801\\n63 9496\\n2194 5106\\n5951 8576\\n2718 9123\\n5314 5680\\n6172 1692\\n4660 4920\\n7478 1080\\n5905 5035\\n9017 9320\\n2533 1082\\n5632 1124\\n3090 7730\\n5823 1279\\n398 2962\\n4691 3868\\n434 2846\\n1948 1644\\n3587 8404\\n1727 7978\\n4737 4492\\n364\\n1073 6999\\n788 939\\n7780 9864\\n5326 62\\n3672 5101\\n5428 6575\\n4495 5755\\n2622 3269\\n899 1937\\n3313 9137\\n5071 6945\\n3609 3143\\n1074 4377\\n9039 9998\\n5533 7049\\n2414 9610\\n5998 8233\\n6877 5182\\n619 6657\\n9434 9090\\n1999 8195\\n6278 151\\n9209 9234\\n2531 6089\\n4815 143\\n9324 79\\n2206 9345\\n4787 9882\\n4311 656\\n3995 7589\\n9646 889\\n7683 4285\\n4715 6896\\n1373 3348\\n1793 1246\\n5308 2886\\n5479 76\\n6204 4096\\n6379 3978\\n1755 7974\\n6814 9611\\n4525 9957\\n9910 4200\\n3634 1262\\n1652 7202\\n5942 4155\\n84 845\\n1184 3734\\n73 6472\\n4106 6236\\n8710 9864\\n1230 5101\\n9959 6625\\n6039 3189\\n2306 8827\\n1248 5915\\n4739 6585\\n2713 2649\\n2667 8358\\n9588 3820\\n7506 5675\\n4874 7060\\n7864 962\\n8359 8119\\n1086 7807\\n1839 3497\\n4698 5974\\n3050 2343\\n4694 7977\\n4122 7401\\n7458 9851\\n8961 5265\\n4428 5898\\n9259 3111\\n7924 1526\\n3993 4379\\n4801 2752\\n3714 8817\\n994 5773\\n955 4282\\n7593 9172\\n1032 1737\\n8431 3459\\n7512 7708\\n453 1601\\n2719 2775\\n9717 3435\\n9222 29\\n3106 8435\\n1566 155\\n4480 5314\\n6705 2989\\n7007 712\\n4574 5188\\n6432 8568\\n58 4082\\n300 6992\\n3070 7514\\n371 9645\\n5925 4745\\n4861 5118\\n3079 5995\\n5769 1383\\n5542 1749\\n1534 8584\\n6911 7734\\n4579 7811\\n917 5817\\n6028 9008\\n641 3825\\n1269 7226\\n2543 1274\\n9328 6977\\n9021 2770\\n9454 304\\n842 1097\\n6246 4403\\n120 1735\\n3804 3407\\n1700 6747\\n1071 6567\\n503 431\\n2334 6709\\n6714 5152\\n4791 9421\\n9007 6719\\n6164 6811\\n9708 4770\\n9681 1685\\n9243 6696\\n7281 4329\\n6708 6301\\n2582 3780\\n9177 6955\\n2058 3938\\n8938 4241\\n2093 1550\\n8622 3712\\n1156 1624\\n6109 8718\\n4277 4177\\n8458 9216\\n6779 1332\\n9337 9504\\n6492 6802\\n9111 2351\\n2087 1454\\n3575 7113\\n8905 7174\\n153 4923\\n5119 7285\\n9751 8682\\n8970 1033\\n439 5982\\n5003 797\\n1733 1094\\n6711 976\\n4952 2590\\n9704 4526\\n3290 6038\\n6236 7562\\n8516 5908\\n3624 4349\\n1837 8085\\n4378 8414\\n1347 7751\\n6982 3940\\n5264 9507\\n1539 6954\\n1551 87\\n1913 2577\\n863 2814\\n7023 4613\\n1245 8238\\n4039 3802\\n6791 7163\\n9143 5357\\n5746 3401\\n1175 4832\\n9562 6396\\n4881 2942\\n3818 6327\\n9164 2760\\n9783 2303\\n2927 978\\n9907 9248\\n5700 1218\\n9005 2936\\n515 3333\\n607 3871\\n9169 4468\\n7680 1368\\n943 9326\\n1252 6127\\n8693 5869\\n1631 4534\\n5236 3394\\n3742 7347\\n7458 437\\n9647 4638\\n9476 227\\n2864 4276\\n9016 1696\\n4054 7436\\n9522 7169\\n2631 4665\\n3242 8409\\n7878 8585\\n3573 198\\n338 2294\\n7001 1061\\n1990 1040\\n7203 8248\\n4246 7810\\n9086 6616\\n9531 3682\\n3132 6826\\n6364 853\\n2324 9791\\n2770 7478\\n5525 9831\\n2889 3070\\n4692 4637\\n7664 2209\\n8469 9123\\n482 4244\\n2493 2112\\n2403 7598\\n1618 5590\\n2314 1359\\n9355 161\\n480 7398\\n2477 8637\\n6982 388\\n3335 6186\\n9595 6544\\n8497 5934\\n3486 3843\\n2421 6044\\n7322 3827\\n6574 7\\n6866 5852\\n6182 1073\\n6535 2651\\n7100 1676\\n2663 4706\\n8335 6244\\n7454 4591\\n6602 4960\\n3058 343\\n6977 1953\\n755 5857\\n3062 4026\\n5334 2674\\n9668 7591\\n7257 7459\\n1573 5701\\n6498 3509\\n9661 9350\\n4379 8452\\n6567 7016\\n1830 6163\\n8640 596\\n6218 2611\\n9402 3785\\n2505 1856\\n2563 9076\\n7897 466\\n5383 3382\\n2866 2274\\n7714 7945\\n5219 4791\\n4732 2522\\n7586 3201\\n8486 8922\\n4023 4068\\n1983 8293\\n2088 9720\\n2336 6808\\n7910 8109\\n5325 4830\\n9178 4568\\n5118 1887\\n8529 9579\\n1523 903\\n5492 8630\\n1936 441\\n8185 5704\\n4268 2745\\n1055 7669\\n3709 8003\\n7627 666\\n8132 5740\\n7941 9738\\n8082 1312\\n8228 7316\\n7199 9431\\n7478 7578\\n4998 5376\\n5967 5697\\n1628 9931\\n7219 653\\n8364 5775\\n3285 6504\\n1667 6832\\n1091 7288\\n3849 8602\\n6973 5076\\n1459 384\\n7878 9322\\n701 9493\\n2613 7134\\n5443 4672\\n1214 843\\n2359 8747\\n7207 9504\\n6843 8691\\n2577 277\\n6151 8154\\n2556 6041\\n8454 9181\\n1855 6746\\n4831 4905\\n5149 7572\\n881 8585\\n2926 1366\\n8005 2253\\n7428 3626\\n8760 3811\\n9994 1453\\n4234 2874\\n335 2084\\n8526 6135\\n7965 459\\n237 1727\\n1031 6775\\n6017 398\\n7664 9397\\n4736 1346\\n4489 6442\\n9339 6846\\n2268 6572\\n9760 274\\n3728 7873\\n1123 8540\\n2248 9315\\n604 4866\\n101 5364\\n7363 5266\\n8074 4896\\n7238 6867\\n5184 8722\\n1598 4798\\n2343 641\\n2243 7999\\n8794 5912\\n6533 2455\\n1591 7356\\n6643 3126\\n8961 5077\\n5997 9099\\n6137 1419\\n3454 2603\\n6503 9974\\n688\\n6851 1722\\n3692 6795\\n7163 358\\n852 9868\\n4632 4606\\n2563 1044\\n5503 4478\\n8036 4581\\n9848 3694\\n4480 9954\\n2250 1939\\n7292 2618\\n8844 2519\\n7587 2411\\n4244 6368\\n3771 5778\\n8745 5337\\n4916 5649\\n3044 1945\\n1902 8811\\n4266 5141\\n4581 9619\\n3489 5024\\n5388 1190\\n3267 9134\\n2311 557\\n1343 2554\\n4766 9964\\n8666 9033\\n3769 6598\\n6521 8544\\n5012 3920\\n5823 5160\\n1586 3438\\n8906 184\\n7967 1178\\n3067 9586\\n9667 4199\\n523 7171\\n327 1257\\n7289 891\\n2995 8186\\n7647 8681\\n8113 75\\n4997 7399\\n1178 7728\\n117 5891\\n1582 8938\\n9968 7414\\n7660 4734\\n7448 2232\\n8539 7233\\n5270 5048\\n2765 4064\\n5489 38\\n6143 5629\\n6421 7824\\n5636 2336\\n9943 1233\\n2108 7519\\n2065 4551\\n7882 5237\\n5136 3286\\n8572 5449\\n5575 1445\\n7196 7691\\n7171 8574\\n6067 9001\\n8406 5307\\n2004 304\\n3964 9881\\n7910 152\\n5052 7608\\n2520 9197\\n3297 3199\\n4239 6955\\n4999 2630\\n3983 5659\\n534 4802\\n5663 2235\\n9879 2576\\n6747 2789\\n203 3537\\n9230 1139\\n6869 9652\\n8368 2837\\n8526 5252\\n5465 4524\\n2101 9235\\n7823 6048\\n1785 1547\\n6769 6140\\n2432 4568\\n8428 5073\\n6490 3747\\n678 7432\\n8664 4691\\n4848 1227\\n1650 4810\\n6634 3290\\n3993 3246\\n8808 941\\n3707 1011\\n8426 3910\\n3299 6716\\n7203 1833\\n8152 1828\\n8094 728\\n12 6603\\n8290 9630\\n6401 7670\\n9888 3885\\n7347 2265\\n8619 4190\\n1712 7221\\n5439 6605\\n9053 105\\n6453 6700\\n1704 2153\\n4136 5408\\n6391 6778\\n2666 1538\\n3786 1469\\n3472 5901\\n9168 7994\\n3618 662\\n8743 4907\\n3320 8404\\n5420 2694\\n8033 9847\\n5233 750\\n343 4642\\n3169 1770\\n1773 5945\\n1200 7115\\n7505 7342\\n4682 2507\\n3707 4838\\n3596 894\\n2933 4820\\n546 7243\\n2551 4252\\n1541 7687\\n6642 6127\\n1142 3162\\n3258 3308\\n7515 9652\\n3583 382\\n6094 1332\\n9101 4165\\n6745 4783\\n8738 1362\\n4812 6270\\n1752 3228\\n3948 8101\\n3792 7922\\n4286 3006\\n476 3655\\n6766 4176\\n6201 3674\\n5244 8676\\n9312 7076\\n1772 5877\\n5185 6964\\n6479 5818\\n5681 6254\\n4366 4492\\n687 4310\\n2190 1456\\n7022 5997\\n6450 1828\\n6872 4586\\n6668 2674\\n9039 4774\\n9031 6502\\n133 6812\\n4975 7211\\n9681 6375\\n4724 9118\\n4667 9020\\n6473 9926\\n6442 1747\\n3162 7670\\n7722 1217\\n6586 5037\\n8802 9993\\n6556 6062\\n2496 6993\\n7931 8045\\n5550 6010\\n7535 8123\\n7737 4849\\n5787 3405\\n2823 3168\\n2671 166\\n8699 3887\\n2389 8478\\n6870 7519\\n2524 3343\\n4498 1835\\n2993 6219\\n4274 7000\\n2452 3878\\n2561 3948\\n5198 6991\\n8292 2509\\n9064 7326\\n5508 5012\\n9567 5913\\n4867 5480\\n6830 2574\\n9392 3577\\n3917 7242\\n6922 7348\\n2178 9177\\n3510 1899\\n8100 4384\\n2238 1806\\n8984 9854\\n1065 8410\\n1435 2027\\n2161 5791\\n6282 9940\\n7361 8802\\n5498 2897\\n3357 7723\\n5606 7842\\n7289 3474\\n5368 8025\\n6123 3412\\n2664 986\\n6737 1610\\n7492 8492\\n9396 2686\\n2047 2834\\n2240 5246\\n8638 5991\\n7584 517\\n8580 6138\\n6323 439\\n6834 7415\\n6322 2808\\n894 2308\\n932 8500\\n5764 5855\\n3937 63\\n5592 5246\\n529 7040\\n160 549\\n8703 2404\\n6796 3051\\n4057 6698\\n2525 3403\\n2867 7191\\n2899 9651\\n2636 5999\\n6839 2564\\n1855 8880\\n7768 9132\\n8170 3291\\n653 8055\\n8302 722\\n9126 9501\\n5077 1804\\n9391 8746\\n4453 2162\\n2897 6380\\n1197 2065\\n762 4395\\n212 7375\\n5507 2699\\n344 5985\\n1632 2002\\n3797 4484\\n1509 195\\n2524 2573\\n326 7648\\n6358 801\\n1215 5092\\n1483 5988\\n9835 7979\\n4991 1665\\n5231 8946\\n3633 2486\\n3158 6187\\n2403 8418\\n3237 3426\\n4723 6872\\n4431 5607\\n7484 9261\\n641 9594\\n6225 9300\\n7086 6005\\n1329 4691\\n7460 8475\\n4288 3457\\n2768 411\\n3091 6731\\n7715 7258\\n5991 4144\\n5951 7764\\n2842 9295\\n4298 1195\\n3004 7504\\n6276 8708\\n9041 13\\n809 3656\\n2897 4761\\n7208 5565\\n9662 5592\\n99 7568\\n6137 9204\\n8457 7841\\n2748 2016\\n9570 437\\n9894 543\\n1717 8127\\n3720 5526\\n2042 10000\\n9202 1881\\n9473 6430\\n3861 9061\\n7232 8255\\n4947 6768\\n4397 541\\n1205 2519\\n947 3336\\n6236 9983\\n4737 3388\\n2395 733\\n9450 6619\\n3121 6195\\n5684 3654\\n8723 3856\\n2281 5941\\n6032 2255\\n6603 7092\\n9230 5127\\n5067 8732\\n1176 5662\\n5760 9142\\n4326 2711\\n2753 5521\\n4179 1220\\n3981 7325\\n4257 1965\\n6607 914\\n1284 3976\\n6915 4241\\n2331 3521\\n2162 6920\\n3443 6554\\n8 9352\\n3238 7682\\n2358 3043\\n9618 511\\n4342 4070\\n4670 2038\\n5019 2772\\n4475 7760\\n388 7873\\n6310 1602\\n2732 7193\\n828 5985\\n7861 8168\\n2768 6492\\n2918 3158\\n8238 8497\\n6331 2153\\n6207 9574\\n6074 3315\\n4304 2323\\n1945 8456\\n8683 5918\\n5735 7794\\n2311 7900\\n7342 2285\\n2055 9295\\n25 7774\\n7944 9012\\n3855 1504\\n3557 4961\\n1685 3588\\n9977 8165\\n5273 1352\\n3325 9147\\n4766 7290\\n3436 1827\\n6798 7997\\n6794 4444\\n8423 4723\\n9091 2109\\n306 9229\\n9724 6351\\n19 5688\\n4213 9797\\n1683 8593\\n7622 4517\\n8941 1873\\n5348 468\\n3391 1614\\n1701 9275\\n2540 2481\\n1004 9079\\n6102 6189\\n8630 5043\\n7551 3826\\n8668 4449\\n8035 5227\\n8316 4185\\n4538 6502\\n432 4495\\n5994 5359\\n1597 5241\\n9246 9181\\n8559 9074\\n9404 4276\\n6471 6147\\n1220 9361\\n3158 2738\\n1899 6208\\n1163 8917\\n5943 2904\\n3739 1155\\n4888 8206\\n1164 6990\\n5058 8645\\n6688 952\\n8940 5783\\n680 5017\\n4978 3983\\n8294 5296\\n1106 2455\\n8910 3830\\n4507 5964\\n4389 3422\\n101 7617\\n1899 8932\\n7950 5975\\n8407 5985\\n3757 1433\\n5767 9758\\n7911 5106\\n3759 5647\\n1401 1394\\n1458 3438\\n1470 1294\\n7206 6122\\n6877 7563\\n4255 5539\\n8887 1715\\n8740 2613\\n5847 8485\\n6066 8477\\n345 5287\\n2216 4718\\n2430 8501\\n360 4077\\n1856 7663\\n7193 3940\\n6411 4212\\n9709 3226\\n3553 5530\\n8301 4050\\n9047 4557\\n7165 7681\\n7428 936\\n4578 8130\\n7462 8793\\n6581 6437\\n1463 7250\\n6126 5097\\n4103 1060\\n73 7891\\n629 8353\\n3168 214\\n8969 9146\\n315 8831\\n4179 5324\\n864 6566\\n2605 855\\n8000 3935\\n2836 9369\\n5546 7099\\n9051 3457\\n1072 4893\\n3675 992\\n4071 244\\n9142 6776\\n559 1755\\n6032 4680\\n1895 4635\\n8868 8808\\n666 4562\\n5539 1268\\n8178 4682\\n2265 4412\\n5795 7150\\n3199 5274\\n9105 2558\\n3593 7849\\n8496 6914\\n2159 7995\\n7001 9874\\n9575 5206\\n9927 2209\\n7077 1593\\n9529 7315\\n3188 6918\\n5210 7112\\n4572 6191\\n7507 7303\\n2700 5196\\n5850 5052\\n5134 1168\\n2032 8804\\n9755 2270\\n9103 6546\\n7098 9019\\n9982 8154\\n6811 5689\\n8046 4075\\n7683 3290\\n2174 8492\\n9360 9085\\n654 8332\\n104 7100\\n9113 4056\\n7435 3043\\n3365 5589\\n5151 2048\\n1757 9909\\n3224 748\\n9063 482\\n9630 2860\\n9117 3127\\n2180 1698\\n3188 3651\\n6869 3461\\n8827 8311\\n2472 1698\\n1931 8330\\n9354 7835\\n4152 9252\\n3964 8044\\n8078 3277\\n6856 9121\\n5482 8026\\n4718 1641\\n9269 2395\\n5156 9426\\n4066 7289\\n8950 3752\\n5661 4281\\n4317 671\\n3958 9017\\n396 5880\\n6496 3251\\n9473 8509\\n2992 6525\\n6293 7671\\n3616 3881\\n5539 754\\n8908 4974\\n3242 996\\n8481 2499\\n6391 3880\\n2288 9266\\n4023 5608\\n5006 1610\\n5612 1321\\n8250 3661\\n7275 2977\\n5093 4282\\n2060 9458\\n901 8870\\n9934 2232\\n8877 717\\n7670 8721\\n1038 2430\\n1335 3680\\n9921 5248\\n6580 1979\\n2210 357\\n1726 2326\\n4930 2740\\n8404 3069\\n1078 2345\\n4470 8829\\n6711 9772\\n5032 925\\n2661 982\\n4227 3845\\n3717 9722\\n8209 5223\\n3076 7610\\n6718 8561\\n4438 8566\\n3730 8146\\n425 2240\\n8679 5096\\n2871 6788\\n8324 7287\\n7368 3893\\n5037 1972\\n7733 6543\\n9461 6455\\n3313 9938\\n8668 4211\\n5074 7648\\n3139 1503\\n6348 397\\n4985 7638\\n4499 7759\\n4991 197\\n3857 6458\\n7689 1206\\n9502 7133\\n6161 2749\\n8220 8570\\n3935 2878\\n3701 4205\\n3077 2278\\n5013 5638\\n7881 1015\\n5555 6550\\n9990 3962\\n5440 3122\\n9516 5783\\n711 7015\\n2187 3597\\n52 6718\\n4926 3870\\n6316 1328\\n5705 4048\\n1537 800\\n6790 6131\\n6303 2667\\n1859 4423\\n630 2238\\n9715 7412\\n5077 5969\\n806 8526\\n2770 5175\\n7071 5517\\n1890 8092\\n3047 7238\\n4560 5313\\n5103 5518\\n5226 241\\n1501 1258\\n7501 1447\\n3851 4257\\n4512 4046\\n4178 2825\\n510 7630\\n6398 9640\\n2380 5929\\n1115 7810\\n393 1819\\n4934 9225\\n9364 105\\n9651 3073\\n1864 6667\\n6130 6854\\n9044 8829\\n7441 4560\\n1571 9159\\n4338 9891\\n2993 6565\\n5119 5810\\n1110 976\\n8550 1333\\n4432 1460\\n7244 3270\\n4395 6460\\n7625 4460\\n5712 78\\n1456 5768\\n6040 689\\n7624 5364\\n8207 9802\\n3896 7782\\n5155 206\\n4440 2195\\n6559 7755\\n8220 9300\\n3031 7679\\n760\\n1037 4170\\n6578 4303\\n9885 2822\\n4170 7026\\n1581 1665\\n4182 8655\\n7762 9103\\n9279 8314\\n2003 7284\\n139 1221\\n2551 2163\\n4263 9787\\n8916 206\\n7082 2045\\n813 9595\\n3136 462\\n2530 1606\\n1858 1758\\n6830 5993\\n2209 8712\\n1215 3394\\n3648 493\\n9027 5702\\n1221 4313\\n9787 2626\\n7552 6443\\n6911 6591\\n7505 5442\\n5704 9597\\n8104 3622\\n7103 1688\\n7183 6730\\n4232 1545\\n2343 3489\\n9301 6725\\n8678 9448\\n779 7189\\n4215 7862\\n9673 4606\\n4257 7994\\n8903 7552\\n6599 755\\n1265 983\\n6424 8118\\n8563 8446\\n7030 3717\\n3889 3852\\n9436 7937\\n8565 3920\\n385 5502\\n999 2717\\n6997 8890\\n1983 2671\\n7741 101\\n1301 2786\\n2592 5717\\n9682 889\\n6894 1039\\n456 1037\\n6205 6793\\n7860 1388\\n6465 8845\\n1130 9359\\n659 9770\\n5913 4770\\n8549 5755\\n4159 7477\\n8484 7863\\n2345 7249\\n2034 200\\n7433 9171\\n6508 501\\n8326 1958\\n9165 5122\\n9297 3225\\n5221 6583\\n7146 3824\\n7297 7441\\n5069 9050\\n679 2085\\n5303 305\\n1569 6931\\n6069 1700\\n2531 7539\\n540 3614\\n4869 9723\\n6275 884\\n5378 2804\\n9259 2386\\n4630 2240\\n4938 183\\n4782 2249\\n7825 6351\\n7827 9137\\n3612 1406\\n2539 8231\\n4079 8613\\n3782 7325\\n6548 3514\\n4956 541\\n1958 2693\\n4560 9471\\n5362 6477\\n2406 9616\\n7609 4737\\n3608 7781\\n7703 85\\n2431 4589\\n8714 4643\\n4881 4129\\n4619 7542\\n639 297\\n93 6537\\n662 4640\\n519 5886\\n3016 9150\\n4917 3139\\n9269 2190\\n5076 5376\\n5568 2250\\n4742 8264\\n4767 6965\\n2641 8306\\n4586 9616\\n8631 9124\\n8269 8059\\n292 2055\\n1665 9917\\n4559 8252\\n3656 6524\\n1259 2184\\n906 9017\\n6194 5390\\n1380 5512\\n2592 8401\\n5158 9654\\n3644 89\\n7655 8919\\n3194 9680\\n8 2439\\n5845 5250\\n6221 8399\\n9473 2445\\n154 9708\\n6316 671\\n7616 3514\\n8403 2067\\n9371 6293\\n9753 3207\\n9874 3157\\n2044 8787\\n8675 3864\\n513 571\\n4371 4274\\n5123 7170\\n8083 1652\\n8424 3606\\n4646 403\\n6066 3237\\n566 5229\\n912 5289\\n773 262\\n6385 3710\\n5630 3218\\n7051 2622\\n6390 9593\\n3396 96\\n1669 2047\\n3993 6632\\n2106 7174\\n3339 8300\\n5612 6035\\n9454 343\\n5433 8768\\n6624 169\\n7099 2795\\n4345 5851\\n6574 5126\\n7608 1793\\n9871 4755\\n9930 8959\\n9632 7559\\n799 1840\\n2707 2965\\n6779 7609\\n816 3772\\n8884 5796\\n4018 8879\\n1482 4103\\n41 3044\\n2508 2274\\n2630 1069\\n2766 4517\\n6351 9522\\n134 4959\\n152 3244\\n1293 9777\\n3477 4046\\n2268 5842\\n3883 8634\\n3510 5146\\n9370 1307\\n1017 1827\\n5938 810\\n1314 1429\\n6203 4036\\n9141 261\\n1876 9603\\n4111 9046\\n6903 5130\\n242 1668\\n2561 8680\\n4784 5703\\n6566 2961\\n128 9639\\n8413 9378\\n9537 1627\\n9324 851\\n8107 2972\\n4623 8775\\n9820 1432\\n2458 2792\\n2719 4796\\n8298 6833\\n3235 7127\\n6812 4207\\n3274 5338\\n6305 2682\\n9435 2549\\n3934 4104\\n9347 6305\\n3024 1972\\n6063 2621\\n7703 7303\\n8300 3856\\n3924 8103\\n5186 4090\\n3179 9432\\n6999 8630\\n1208 5421\\n6423 9366\\n4340 6622\\n5509 8411\\n9110 1246\\n3052 312\\n5364 1959\\n7944 5620\\n8971 7787\\n2368 1367\\n666 7383\\n4630 4481\\n2271 6122\\n9670 9626\\n9060 5082\\n7285 7705\\n6860 5740\\n9662 8583\\n5578 5746\\n189 9206\\n3852 9428\\n4935 8378\\n4325 1535\\n3206 5444\\n4411 437\\n1267 8685\\n2850 332\\n8749 7172\\n5134 2101\\n3193 5677\\n5994 3919\\n5390 9537\\n1265 1454\\n1551 5060\\n1610 9262\\n8490 8513\\n3081 969\\n8974 8756\\n1340 8542\\n3973 8828\\n4139 8286\\n2913 7551\\n1895 993\\n7505 9648\\n5368 1403\\n8446 9816\\n5426 7555\\n7896 7703\\n7383 7115\\n2438 9635\\n2996 6853\\n9580 5885\\n2909 8946\\n9772 4923\\n4721 7183\\n607 3695\\n5098 3152\\n3329 4433\\n1571 4987\\n7370 5909\\n7779 2370\\n4200 8872\\n4608 1412\\n9748 3411\\n5559 8121\\n1137 4070\\n7874 5326\\n9297 1259\\n9240 756\\n2610 7138\\n8166 3288\\n4057 9411\\n1243 7906\\n7381 1148\\n1680 8216\\n499 3639\\n5104 9573\\n7637 2703\\n7025 9088\\n5862 4029\\n895 5804\\n1488 4430\\n5176 9374\\n2088 7935\\n4071 4934\\n5396 4181\\n2562 5168\\n9436 9271\\n562 6988\\n3860 4868\\n611 5340\\n5567 9502\\n8515 713\\n5168 7705\\n8605 3218\\n3229 2759\\n1639 9669\\n6414 7495\\n7659 1208\\n1819 3973\\n9202 8371\\n1251 4852\\n236 9041\\n4989 9921\\n7840 198\\n397 7775\\n8365 3222\\n6073 6873\\n5358 839\\n1660 9233\\n3177 1763\\n4876 1507\\n3484 8673\\n6908 9315\\n4468 8546\\n4393 6168\\n5893 7708\\n4522 2051\\n3020 147\\n818 6239\\n2945 846\\n2674 6728\\n3450 3109\\n1338 5296\\n1681 5672\\n7443 651\\n6266 1662\\n9470 7644\\n3251 77\\n286 3799\\n3716 3169\\n1757 7559\\n5610 9384\\n6320 473\\n6892 4384\\n3643 3084\\n3722 2227\\n2370 5792\\n7743 8557\\n5363 2781\\n8209 7581\\n4101 2719\\n7328 5667\\n6500 4715\\n9088 4247\\n8842 9087\\n9859 3628\\n9868 2334\\n5205 7956\\n8165 3620\\n6694 9422\\n2287 8298\\n5982 1824\\n2297 2548\\n705 3426\\n634 9881\\n5303 1789\\n5894 8745\\n9786 6170\\n5127 4478\\n4071 6367\\n6353 6797\\n7292 7265\\n8425 5957\\n5957 1492\\n6879 4537\\n3798 1145\\n4761 1830\\n7890 1418\\n8245 4381\\n3624 9493\\n8134 9443\\n8334 6761\\n9508 8832\\n9601 9648\\n2140 7855\\n587 6114\\n8300 8606\\n4471 586\\n4554 5699\\n1119 1998\\n8145 8495\\n9291 6494\\n8964 2614\\n1781 3029\\n7573 4158\\n4902 6317\\n9663 9315\\n4271 579\\n3103 3546\\n5339 4091\\n8126 7849\\n8996 949\\n298 7874\\n3515 9\\n5385 7910\\n47 8109\\n5777 1921\\n4738 3988\\n8191 836\\n5088 6119\\n9965 926\\n3507 8703\\n7813 6237\\n9543 7166\\n940 1163\\n9933 5414\\n6842 2311\\n6072 6441\\n2188 9049\\n7655 9634\\n5475 4029\\n266 1824\\n2153 7611\\n7683 602\\n5878 5143\\n4873 752\\n3138 9346\\n9504 6194\\n1072 7667\\n1635 3722\\n6875 586\\n9599 4235\\n9246 7187\\n5358 9743\\n7087 5910\\n2436 8770\\n4413 8512\\n9744 5248\\n6639 5982\\n2705 5444\\n4673 7448\\n9008 4049\\n7126 2047\\n7347 5852\\n4960 5058\\n3710 9592\\n7786 4886\\n2836 562\\n5896 2464\\n6886 3724\\n9930 9180\\n2693 6584\\n5648 5610\\n4571 5244\\n3822 193\\n8647 1090\\n8189 8514\\n6784 3286\\n1906 9390\\n776 5727\\n963 8128\\n3142 7161\\n2257 8684\\n3526 8951\\n2285 8558\\n5887 5190\\n4185 481\\n964 2398\\n6953 3386\\n4153 2244\\n9146 9452\\n3847 1656\\n8651 35\\n1421 3722\\n9598 3911\\n5951 5545\\n889 1369\\n3268 9165\\n4113 7679\\n7161 4626\\n7920 9115\\n4042 3497\\n413 6818\\n5599 7151\\n5568 7504\\n1600 8009\\n1087 2313\\n2426 7207\\n3681 2822\\n787 1376\\n6514 6139\\n9185 119\\n8077 9312\\n3672 7628\\n3726 3626\\n3462 7111\\n5420 8132\\n6296 6508\\n1086 738\\n4546 2273\\n6228 1314\\n7908 3577\\n545 3719\\n3956 7871\\n7573 6234\\n2653 9688\\n3261 3388\\n3869 6042\\n912 2448\\n137 3022\\n6571 3103\\n8890 6826\\n3573 557\\n869 8238\\n86 576\\n5216 3715\\n3461 8\\n692 3380\\n5658 7070\\n2941 4431\\n8118 1430\\n5378 7103\\n1435 8057\\n1956 6812\\n5461 232\\n3364 6494\\n6804 7087\\n6831 122\\n3783 4670\\n186 5380\\n5458 3605\\n1106 6044\\n1676 9765\\n2228 4426\\n1519 5959\\n132 8071\\n223 3896\\n8881 7251\\n8992 4519\\n6895 4615\\n1042 42\\n4459 9759\\n3582 9973\\n6712 5152\\n1462 4804\\n6241 8472\\n1914 1735\\n254 2363\\n8344 4979\\n1172 6513\\n9841 7594\\n7155 7665\\n7984 9306\\n6662 7584\\n8139 8328\\n3393 7822\\n6876 9654\\n9636 8606\\n9030 677\\n4417 9155\\n2055 3464\\n8518 246\\n4167 6968\\n6833 6808\\n3521 316\\n2038 5657\\n3064 9516\\n6454 9870\\n2993 1140\\n4735 7957\\n2823 4908\\n3671 8139\\n9852 8616\\n1959 9410\\n7515 3886\\n1885 5707\\n5155 8532\\n1438 429\\n1647 7965\\n1549 2375\\n4127 3665\\n7127 9111\\n4283 433\\n2485 4881\\n795 510\\n4731 3283\\n3299 4743\\n6173 4011\\n9005 7312\\n8182 7490\\n7621 4435\\n5454 9135\\n6554 4644\\n213 7370\\n2586 5419\\n2153 455\\n6717 7259\\n5366 5653\\n320 6470\\n6457 2622\\n8508 4671\\n134 1406\\n955 6602\\n3302 9218\\n757 7991\\n8221 3688\\n9440 2901\\n3496 8603\\n6260 327\\n9338 4954\\n15 5680\\n6096 879\\n436 5722\\n5111 3865\\n9360 6919\\n6574 9949\\n5478 9109\\n9663 6990\\n3193 1486\\n1396 6954\\n5900 235\\n9336 5966\\n7235 6857\\n652 5908\\n8006 6263\\n6456 1399\\n1368 9793\\n3131 2109\\n1790 8938\\n862 7439\\n3549 6648\\n7398 8893\\n7799 7228\\n9489 4047\\n7584 1920\\n9293 7988\\n3598 7154\\n6360 3515\\n1997 9566\\n6735 9195\\n3220 1394\\n8748 7477\\n864 662\\n3948 4909\\n9527 9386\\n9655 217\\n1339 691\\n8231 4558\\n3044 5588\\n946 8015\\n7938 4698\\n5409 68\\n5670 4171\\n8227 2101\\n8413 1459\\n5784 5799\\n3148 9095\\n6948 648\\n4105 3955\\n6433 5215\\n5689 6962\\n5876 6690\\n6555 9053\\n2276 3318\\n2098 6912\\n6840 6266\\n9639 7938\\n3495 1606\\n7617 683\\n4533 4715\\n1306 6480\\n2201 6440\\n446 6680\\n7549 847\\n5189 77\\n8131 3973\\n3972 5122\\n2234 7371\\n1417 6026\\n8950 2509\\n5041 9951\\n8017 6458\\n2841 7969\\n8652 2555\\n2307 7623\\n1767 2296\\n9302 1207\\n4262 7303\\n2708 1961\\n4784 6760\\n3105 7169\\n8626 200\\n9833 4222\\n2659 5967\\n6881 5129\\n7400 5022\\n7249 9970\\n5723 1091\\n6441 7259\\n1590 1669\\n2568 9709\\n9362 4359\\n2681 1124\\n7420 7053\\n9305 2360\\n413 1519\\n9279 3737\\n8451 156\\n2621 4591\\n2965 4181\\n9961 2175\\n7501 8305\\n1110 7215\\n2656 9422\\n6461 6669\\n6455 8369\\n1280 5000\\n3870 4524\\n6302 2847\\n1315 8471\\n4891 4400\\n1113 7731\\n1098 249\\n9914 5485\\n2206 4990\\n2790 1878\\n1761 3244\\n7528 5628\\n193 534\\n4542 1502\\n37\\n2182 6473\\n6701 5160\\n3242 72\\n795 6672\\n3088 6762\\n1059 3959\\n6990 5072\\n8215 8521\\n7381 3037\\n4933 8994\\n4212 9884\\n1636 9988\\n677 2919\\n3464 779\\n2892 4953\\n4830 9758\\n4993 4630\\n6480 2500\\n4655 7416\\n9491 9417\\n3066 5182\\n1117 1157\\n5867 8230\\n5618 2474\\n9674 169\\n286 1796\\n2013 600\\n928 5435\\n3706 532\\n487 1415\\n6679 5352\\n9311 8264\\n2480 9911\\n115 8645\\n795 1145\\n2139 974\\n93 3618\\n404\\n6794 413\\n453 8313\\n4107 8315\\n1075 7175\\n6828 104\\n8795 951\\n5297 1412\\n5252 7916\\n4687 5342\\n1113 7028\\n6878 4994\\n9031 1727\\n566 6880\\n5864 6605\\n5183 9390\\n2587 9364\\n5314 2341\\n2292 8844\\n6026 2167\\n3752 1115\\n6713 6954\\n4419 235\\n8784 329\\n9907 1645\\n9140 5720\\n8833 7871\\n7182 7954\\n7017 1122\\n2778 8552\\n4134 7922\\n7657 5504\\n9878 6935\\n19 8843\\n2797 5940\\n5775 5529\\n6701 9286\\n2670 8683\\n1465 1954\\n7880 1029\\n2123 774\\n1916 9769\\n6106 8549\\n6398 9962\\n3361 5937\\n8209 9731\\n2618 9278\\n8921 8486\\n9876 8802\\n5682 1182\\n4412 7560\\n8784 2181\\n434 5077\\n9073 5743\\n8847 3420\\n6520 891\\n5652 8268\\n5399 1219\\n5716 2486\\n8814 3634\\n5789 3095\\n1467 2247\\n9850 7740\\n8723 5982\\n9184 8080\\n5597 594\\n7378 7410\\n5231 5613\\n3281 2721\\n4394 904\\n2274 9153\\n6356 7336\\n4923 3815\\n2533 800\\n8223 327\\n5993 9503\\n238 7430\\n6762 7673\\n5424 4446\\n9122 9202\\n3941 393\\n7766 3683\\n416 4430\\n3232 1132\\n9559 2512\\n9419 3566\\n4140 3005\\n5945 6807\\n8627 8499\\n5778 2344\\n5398 3546\\n1402 921\\n1524 86\\n1684 6659\\n3757 5248\\n3927 3728\\n5737 1152\\n1455 8631\\n9838 2850\\n6935 2706\\n2120 1334\\n5717 8675\\n9649 2217\\n7586 7955\\n7679 6520\\n624 9291\\n1187 1568\\n2346 4830\\n4043 8839\\n8496 8983\\n3395 8304\\n7401 2594\\n7752 8379\\n6380 2505\\n968 6197\\n7509 1891\\n2022 2117\\n7467 6020\\n3421 2355\\n1996 3738\\n5226 9629\\n8975 4509\\n1899 9827\\n6648 3393\\n97 2967\\n9721 5094\\n9954 9841\\n425 4117\\n1416 1209\\n2607 6\\n5536 4933\\n1530 6741\\n4254 2746\\n2309 3568\\n1756 2044\\n2253 5285\\n1921 4509\\n3180 2230\\n5372 6011\\n8942 1505\\n2770 3076\\n6179 9287\\n4912 9173\\n7911 2918\\n9830 7194\\n2043 9707\\n4175 137\\n470 5157\\n9872 582\\n8280 9831\\n2415 2915\\n5555 7035\\n8530 5281\\n4405 1974\\n1594 7024\\n2794 1565\\n5196 1200\\n7646 8893\\n5047 9502\\n3087 8360\\n4054 3911\\n4744 5602\\n1324 8052\\n8582 8307\\n340 8363\\n819 840\\n1903 8999\\n7803 6490\\n8486 8313\\n1115 2361\\n6356 4347\\n5845 8221\\n3589 4661\\n1231 8314\\n6243 4330\\n3608 7241\\n3870 6628\\n4614 1563\\n9832 9915\\n1584 9824\\n3939 2072\\n1792 557\\n2308 4755\\n1921 6721\\n555 7538\\n1553 6067\\n9255 8412\\n6490 3110\\n2199 1020\\n7583 2852\\n9053 7248\\n2831 4906\\n2228 6643\\n2849 3737\\n5791 4156\\n8292 3522\\n575 5879\\n352 2955\\n5088 4012\\n3672 9930\\n452 2265\\n4373 5267\\n2523 5630\\n9556 9500\\n722 1866\\n2647 8228\\n759 5121\\n1060 1154\\n8438 9124\\n276 822\\n5161 2512\\n13 9116\\n4743 5571\\n2274 2337\\n7161 782\\n3492 8281\\n5719 9945\\n9965 9227\\n8405 1195\\n3859 5420\\n3155 2101\\n8388 2310\\n5771 7474\\n1110 7017\\n898 3200\\n7854 5070\\n5585 7554\\n8494 4482\\n9963 8172\\n9349 6725\\n3989 8124\\n1351 2251\\n8903 5593\\n6166 1327\\n6462 9223\\n3344 4132\\n7969 5256\\n6267 4368\\n985 7384\\n6559 4170\\n3601 8918\\n7359 3329\\n1635 3095\\n8439 7210\\n4684 3584\\n8961 760\\n4418 8893\\n1670 1222\\n8465 8111\\n8449 7023\\n7630 5004\\n3850 3277\\n6448 3937\\n5398 9670\\n6424 7669\\n4859 2596\\n8179 7164\\n6496 8846\\n8283 1258\\n7518 7051\\n3998 3968\\n9568 5780\\n7774 9630\\n2505 3954\\n6354 768\\n1581 2707\\n7128 9416\\n7371 6408\\n8401 8738\\n1272 2930\\n8507 7736\\n9771 6070\\n6405 6115\\n8925 9884\\n2131 6799\\n3175 7204\\n2994 4159\\n4374 6318\\n2912 991\\n7424 2407\\n8000 305\\n7874 3594\\n2101 5785\\n1728 6740\\n9134 3051\\n1107 528\\n233 4929\\n5736 229\\n4910 1034\\n9174 7220\\n3375 6245\\n7678 851\\n167 8110\\n6775 8946\\n6663 9724\\n3022 7441\\n6417 3849\\n4742 9272\\n6804 4560\\n8653 2477\\n4791 2925\\n5184 1750\\n2293 8522\\n5074 7186\\n6522 3732\\n1800 4134\\n6815 3038\\n8309 4091\\n2226 9988\\n6765 2948\\n1277 6953\\n7210 6627\\n9189 2916\\n5375 9688\\n4508 5767\\n5635 907\\n7067 2770\\n3235 3268\\n3663 9006\\n587 9185\\n485 2555\\n9786 1070\\n6796 5722\\n9409 9421\\n8422 9241\\n6775 3188\\n5567 5128\\n9835 621\\n2665 1478\\n7506 204\\n9502 6746\\n4738 7950\\n5867 2903\\n8697 822\\n6403 7449\\n478 9331\\n601 9247\\n238 3228\\n5739 9243\\n1074 1013\\n4245 9138\\n2045 7091\\n3787 9325\\n7219 2217\\n4874 2503\\n5329 1810\\n8634 4871\\n5455 8906\\n7119 1918\\n7535 277\\n912 3638\\n7625 87\\n9036 1346\\n1155 2012\\n1257 733\\n7537 1126\\n6485 7210\\n176 9518\\n2103 2748\\n5817 280\\n5736 6121\\n5044 8430\\n4813 8621\\n98 1494\\n3954 4500\\n6154 4739\\n5275 1940\\n1851 4687\\n2846 8260\\n8554 8768\\n2100 8192\\n1507 6702\\n854 7484\\n9222 4852\\n9012 4051\\n6140 4338\\n2535 2738\\n3240 1425\\n1745 7180\\n2417 4439\\n920 2720\\n5386 8610\\n5241 132\\n855 9522\\n9699 7779\\n1592 4492\\n8354 2012\\n3972 3729\\n2107 1401\\n1439 3000\\n5708 8948\\n2245 3086\\n4007 4113\\n8765 4516\\n5319 3621\\n1024 8334\\n2777 7529\\n7607 9241\\n5792 580\\n4460 3192\\n1558 7763\\n213 9707\\n376 2623\\n225 6548\\n1870 334\\n462\\n1309 4984\\n2550 2125\\n7587 3344\\n5772 9009\\n664 3162\\n6906 3528\\n9247 1615\\n8700 5557\\n7146 3577\\n8083 126\\n1009 740\\n1732 217\\n1126 3841\\n4395 9736\\n2753 8937\\n4336 4958\\n3627 2983\\n351 941\\n6336 2437\\n1311 4619\\n364 8194\\n9175 4995\\n287 8112\\n9002 3713\\n4576 6756\\n9361 438\\n3027 8117\\n1999 8990\\n6830 1681\\n4606 1590\\n3928 2767\\n2571 7456\\n6644 7908\\n4089 5074\\n4726 8573\\n5416 1823\\n5596 2440\\n343 138\\n3924 45\\n2677 5888\\n6574 8594\\n1699 4765\\n5509 2646\\n2271 8280\\n8751 2551\\n7179 363\\n5680 3245\\n7269 6343\\n3430 289\\n2873 3435\\n5809 785\\n133 2296\\n1762 4421\\n1538 646\\n5733 8971\\n883 8821\\n118 6517\\n3417 595\\n5489 2745\\n749 2589\\n1021 7736\\n6065 1471\\n8013 5090\\n2805 2473\\n2900 1375\\n9700 4020\\n5744 3531\\n2768 1010\\n7508 6065\\n1779 4741\\n557 9344\\n6091 3173\\n7628 3923\\n4158 6482\\n1541 3496\\n8244 3495\\n7514 3084\\n1801 345\\n8537 2702\\n3309 3811\\n3079 1932\\n7975 3257\\n7622 2936\\n5769 5374\\n2838 8750\\n9701 346\\n9485 3802\\n4704 9162\\n6287 269\\n9589 691\\n1285 5953\\n1098 606\\n711 1995\\n6183 3039\\n3921 6076\\n5270 2235\\n858 9141\\n2205 2546\\n1741 3800\\n9665 8826\\n6521 3515\\n3687 3388\\n5820 7860\\n9999 8149\\n8330 8022\\n9682 715\\n6906 4329\\n7477 8930\\n6794 7508\\n7573 8339\\n2392 5635\\n2638 2734\\n609 3153\\n6091 7509\\n6271 8604\\n5513 9704\\n4249 5889\\n8118 3051\\n9541 26\\n5993 5308\\n6589 8734\\n480 7175\\n8648 4136\\n1531 6523\\n5860 935\\n4634 6173\\n5147 1556\\n6545 7598\\n4489 1218\\n2749 8246\\n8229 3902\\n6840 5178\\n2497 847\\n6278 5511\\n3824 1177\\n9884 909\\n7954 101\\n7770 1051\\n1646 5052\\n3869 9913\\n8425 9560\\n742 6494\\n219 6877\\n646 4657\\n6856 5262\\n8411 176\\n3787 4764\\n4864 8420\\n1077 3416\\n2946 8815\\n7105 6484\\n1337 2092\\n708 8669\\n1276 4517\\n8061 5304\\n4194 1009\\n2583 225\\n627 1112\\n5098 7828\\n1396 7705\\n7041 9296\\n9618 6936\\n5443 6427\\n2666 565\\n7967 1050\\n9676 4328\\n4205 3471\\n7307 5149\\n9256 1896\\n7678 7213\\n167 4559\\n4083 3885\\n2190 120\\n4023 3597\\n2076 1681\\n268 4194\\n8545 8816\\n2874 2998\\n5794 384\\n1429 1338\\n3393 8497\\n4631 1647\\n3854 5812\\n278 5476\\n5047 4515\\n4263 736\\n2546 5902\\n2161 8622\\n3207 916\\n3702 7993\\n6744 4756\\n3196 6884\\n4656 1732\\n7914 8743\\n9446 1307\\n1797 3429\\n373 5084\\n7725 3528\\n1477 9852\\n2273 7133\\n3912 1409\\n4766 8956\\n7675 7261\\n5199 8460\\n7046 8227\\n4326 7157\\n7282 2922\\n7514 5564\\n2825 2141\\n914 610\\n5743 7376\\n7075 3648\\n2684 2192\\n6235 3955\\n4835 6258\\n9311 7569\\n648 8944\\n9842 6491\\n5364 7076\\n1438 5184\\n3191 199\\n5199 2699\\n7057 8821\\n9732 1615\\n7962 7839\\n5229 8974\\n5776 7214\\n7160 8519\\n1840 6250\\n5784 193\\n171 3920\\n5633 5248\\n5769 7562\\n9926 8799\\n1673 6031\\n3902 2596\\n2922 4546\\n3185 4081\\n6539 983\\n6451 9878\\n5300 6504\\n2353 1331\\n6803 7923\\n6209 70\\n5695 9314\\n4897 6564\\n9290 2388\\n9674 2818\\n2519 9621\\n6735 9816\\n3148 3573\\n2524 4899\\n387 5069\\n7729 9495\\n5227 8389\\n4781 5450\\n5321 4141\\n9294 3198\\n1544 6998\\n8492 1807\\n5113 6288\\n3115 8333\\n7308 6009\\n8671 6674\\n9400 3575\\n99 5330\\n1696 9311\\n2438 3100\\n7399 8839\\n3184 3099\\n8418 7694\\n7496 3452\\n5106 6495\\n4877 9915\\n2560 5873\\n2191 3944\\n5225 1255\\n6037 7776\\n7161 1311\\n7541 6916\\n6872 5236\\n7018 8906\\n2411 9011\\n5388 7413\\n8553 2406\\n415 7540\\n916 5303\\n663 5059\\n96 9947\\n7599 9629\\n8896 1555\\n1957 3016\\n6442 8648\\n6553 9859\\n3659 6067\\n4742 2396\\n5399 2644\\n2305 1102\\n4861 7452\\n2968 3803\\n3377 4252\\n6301 2538\\n2551 1749\\n360 7354\\n4965 6258\\n880 454\\n3619 8878\\n272 9910\\n9074 31\\n5645 4415\\n9715 3810\\n2179 9453\\n432 2671\\n1983 331\\n586 7157\\n7671 3601\\n9178 8744\\n3432 1843\\n1432 6073\\n7892 1437\\n824 3049\\n5127 4606\\n7771 1460\\n7280 9389\\n7683 7488\\n7112 1283\\n4138 992\\n5404 3217\\n1318 1524\\n3333 6230\\n6262 6165\\n5093 8497\\n6715 5645\\n414 2176\\n2957 2750\\n1562 1914\\n2881 93\\n962 2373\\n1651 532\\n8505 7361\\n3946 6081\\n5693 8\\n9611 599\\n8621 8785\\n1624 5371\\n2796 504\\n4968 2193\\n246 9219\\n5149 9839\\n3596 1924\\n9327 3085\\n9066 1532\\n1440 6014\\n4429 7303\\n8201 1080\\n8768 6468\\n2590 2003\\n7687 2541\\n1809 9642\\n6664 8344\\n5084 2014\\n3101 2952\\n1850 9047\\n9376 8972\\n5053 7411\\n5311 4201\\n1936 4909\\n3814 464\\n6529 2873\\n220 3966\\n1461 4914\\n3188 1432\\n6825 989\\n5144 333\\n1519 3824\\n2527 7260\\n8581 8082\\n3285 2862\\n3201 7821\\n9429 1217\\n9528 7991\\n5712 5918\\n3463 5085\\n6975 5510\\n4469 4036\\n7838 3287\\n5212 1846\\n1887 576\\n3782 9038\\n8145 8560\\n4738 8054\\n7558 2573\\n5059 1170\\n7260 8116\\n7891 5017\\n1938 8617\\n6098 1049\\n160 1888\\n4109 2557\\n3732 9759\\n3654 4942\\n6654 3130\\n3532 9190\\n5203 2587\\n1182 9338\\n3176 7381\\n774 5640\\n340 6464\\n1304 6444\\n7580 2084\\n1468 8693\\n6372 4506\\n5683 4803\\n9495 8349\\n5075 7204\\n3713 2642\\n9308 7814\\n6756 5155\\n8801 8368\\n5485 6196\\n3516 3527\\n2113 5284\\n1636 4285\\n4095 140\\n4572 2781\\n2189 2604\\n1982 5856\\n5806 5160\\n263 7213\\n1819 4633\\n2 2965\\n3178 6469\\n2042 5175\\n5863 9290\\n8089 2230\\n8930 3371\\n4476 2637\\n8397 7658\\n3658 4812\\n1012 9606\\n7414 6497\\n3074 9938\\n6508 1271\\n3850 5906\\n330 8958\\n1868 4518\\n7186 6327\\n8826 3011\\n3825 1489\\n5406 1883\\n6045 5816\\n8469 6667\\n5959 3545\\n8994 6796\\n8801 8895\\n809 2263\\n3811 8453\\n119 3288\\n5452 5935\\n727 1036\\n7507 4234\\n9211 8651\\n518\\n2329 540\\n8270 2058\\n6145 158\\n6070 5565\\n3210 8352\\n2253 8591\\n1557 2810\\n4267 7678\\n1981 3079\\n3560 7081\\n3411 7495\\n9567 6575\\n5319 1744\\n5929 1458\\n4268 4525\\n1610 7555\\n4203 7388\\n2364 4930\\n4887 967\\n5573 4529\\n173 936\\n15 4403\\n5084 5684\\n49 8075\\n2464 6094\\n2326 5683\\n5848 9165\\n4703 3135\\n242 6522\\n9079 6078\\n4537 4286\\n8818 3264\\n6736 3674\\n8659 781\\n2981 9230\\n3740 2888\\n2914 9764\\n9999 9857\\n5187 7057\\n7474 711\\n592 3366\\n2481 61\\n1958 1319\\n4483 9424\\n3905 3243\\n8835 1467\\n1838 231\\n3678 6370\\n7396 7397\\n3371 5076\\n1063 3865\\n1793 8266\\n5757 3835\\n285 9107\\n828 8011\\n6486 6444\\n920 127\\n8433 9682\\n5985 5181\\n6044 3420\\n2873 8029\\n9090 5230\\n8611 8328\\n7561 3439\\n2930 4986\\n3982 408\\n90 7543\\n3814 4436\\n1894 2011\\n1384 3693\\n194 5650\\n4871 2978\\n1845 6817\\n4683 5828\\n7221 9402\\n8165 7946\\n9040 3554\\n3042 5754\\n9628 7194\\n6711 5779\\n9694 6125\\n8201 3773\\n2584 9026\\n644 2534\\n5414 3980\\n8821 2829\\n3950 2036\\n4237 4869\\n7589 7267\\n3116 7217\\n9980 8926\\n5624 9798\\n9659 7976\\n9954 4378\\n6991 7703\\n8681 9487\\n8219 3002\\n6548 4707\\n2112 6477\\n4252 3581\\n7194 9903\\n5872 1666\\n5033 7736\\n8916 4891\\n7855 7259\\n2367 8582\\n5452 5593\\n8876 5933\\n5222 1524\\n649 282\\n344 5403\\n363 2516\\n3575 2194\\n4862 1659\\n1385 7788\\n2874 4635\\n6924 658\\n7182 6391\\n1128 8763\\n1681 3678\\n1168 4598\\n2417 981\\n9747 8353\\n642 7641\\n9957 7457\\n606 6539\\n7099 6787\\n9373 8672\\n8684 7901\\n1283 3671\\n3519 4852\\n3842 6498\\n9584 4553\\n2639 5125\\n7887 4449\\n5078 2470\\n3869 7268\\n4095 9988\\n4011 7015\\n3110 5928\\n2908 3413\\n3047 4354\\n2653 7727\\n7383 7784\\n5062 384\\n3475 8843\\n2794 5298\\n5620 4145\\n2916 3792\\n8458 456\\n5845 6083\\n5369 253\\n9001 7404\\n6961 129\\n3917 996\\n7804 6496\\n2566 3270\\n9000 7980\\n2263 3944\\n8674 4346\\n9255 9917\\n8373 5571\\n5574 1431\\n226 1410\\n7016 1072\\n661 3150\\n1747 9007\\n4352 7392\\n1785 5258\\n243 3031\\n1992 5495\\n4683 6638\\n1787 5298\\n942 4170\\n5527 1644\\n629 6623\\n9832 1093\\n4429 5348\\n6246 6600\\n4998 4484\\n4192 1866\\n387 9423\\n6114 8469\\n6880 4737\\n3562 604\\n6586 4809\\n2124 6158\\n146 1200\\n8475 146\\n1834 5566\\n8782 1748\\n161 6744\\n9535 1549\\n6519 7581\\n1736 7231\\n3451 3826\\n9396 286\\n8614 8958\\n4633 4718\\n7522 9061\\n2464 6322\\n9945 8126\\n6359 8829\\n316 8245\\n580 6419\\n8428 2790\\n2661 8455\\n2869 660\\n3678 942\\n8809 3174\\n6560 3122\\n9618 7420\\n2586 2098\\n1929 2821\\n4751 756\\n6166 3593\\n785 4338\\n1260 1516\\n8420 6721\\n4580 2604\\n8144 7974\\n10 7795\\n3454 5004\\n1670 9566\\n6552 2387\\n861 775\\n1557 5173\\n6771 5987\\n1960 1729\\n8162 6047\\n3590 8499\\n8246 7855\\n4725 9379\\n5789 2780\\n8627 8782\\n399 6162\\n5584 1708\\n4994 7988\\n5982 3587\\n1942 3438\\n3021 2588\\n6625 8704\\n3297 7925\\n9060 1245\\n490 864\\n5928 6289\\n2959 5593\\n705 2258\\n3645 9204\\n236 6236\\n4732 7450\\n2864 5347\\n8801 9731\\n3793 6495\\n9270 630\\n6121 7527\\n3820 2195\\n44 9131\\n186 3226\\n3569 1801\\n4184 7405\\n4684 3553\\n6413 7200\\n893 1291\\n5774 5667\\n2909 2692\\n9312 4487\\n3736 4183\\n2775 4784\\n5817 6051\\n2314 3312\\n8267 7441\\n7151 5639\\n8330 9883\\n6154 5508\\n1701 4012\\n5240 3563\\n4871 1915\\n8535 5132\\n2644 5667\\n3533 1311\\n7374 3127\\n3877 6349\\n841 2378\\n3535 5349\\n8065 9581\\n9541 8016\\n8284 5175\\n2125 4854\\n2120 4062\\n1601 8378\\n9745 684\\n9782 7734\\n9494 8966\\n6457 4301\\n2964 4544\\n6118 3853\\n5502 4950\\n7000 3484\\n5046 3368\\n297 1963\\n8127 9222\\n3366 2208\\n5019 9992\\n2032 303\\n1266 6173\\n3259 6246\\n1542 4923\\n8062 740\\n8423 7243\\n6784 1283\\n8427 1723\\n5344 9310\\n4650 2696\\n3054 3313\\n7531 128\\n8485 2486\\n216 4565\\n8719 9113\\n4208 7885\\n6260 3776\\n4089 3097\\n8198 2658\\n226 3346\\n2711 2311\\n8630 6610\\n2747 5227\\n7983 8383\\n3114 898\\n3290 5274\\n3394 3754\\n9807 2785\\n7812 8280\\n2403 3994\\n2924 3393\\n2799 9984\\n291 5457\\n4020 727\\n3173 954\\n3325 9890\\n6662 3121\\n4487 9304\\n8472 5943\\n7496 3573\\n3925 4100\\n3638 8534\\n9080 1123\\n2210 1249\\n1322 7548\\n6450 6865\\n2911 239\\n6654 4700\\n6431 6161\\n440 8069\\n1706 1580\\n6870 3133\\n1788 4699\\n3237 5570\\n9003 7815\\n8834 272\\n4518 5390\\n8049 6376\\n8645 2690\\n3703 8550\\n6657 9298\\n3917 4940\\n6270 891\\n1775 7823\\n2424 6577\\n2204 6196\\n1111 8092\\n275 8617\\n9986 9541\\n3704 9907\\n6512 4179\\n2618 6000\\n2407 4854\\n3120 1089\\n5755 5751\\n2301 932\\n7756 2435\\n9354 9232\\n3530 6036\\n1885 5242\\n4585 820\\n4377 8286\\n9243 4681\\n3379 4843\\n5949 5948\\n6818 9013\\n9836 6423\\n1128 5936\\n8158 7988\\n8552 6734\\n5683 9623\\n1300 1589\\n2428 765\\n725 9992\\n1855 2429\\n7301 7457\\n9544 6616\\n2076 5485\\n2557 6403\\n4351 1561\\n8189 2597\\n3828 5955\\n4968 7502\\n6246 7736\\n2713 412\\n5854 7158\\n9912 6937\\n7657 6380\\n9610 2470\\n642 4885\\n8840 8620\\n8097 9184\\n7047 6182\\n2670 7043\\n5159 3188\\n7845 841\\n1746 1348\\n9182 3375\\n9635 5707\\n2705 8450\\n2860 3982\\n5936 4170\\n7721 4229\\n3149 7103\\n4936 8135\\n6972 8743\\n9680 3232\\n359 1790\\n103 302\\n982 9798\\n532 9658\\n7055 9974\\n4065 8826\\n825 8905\\n8090 4012\\n9529 7924\\n5667 6716\\n8184 1084\\n8594 8243\\n7980 9120\\n4326 3624\\n8627 5132\\n2536 6451\\n9136 7593\\n6767 3492\\n5598 8545\\n4863 4813\\n9122 7666\\n4338 475\\n8105 2645\\n1405 4696\\n5198 4296\\n8805 6888\\n8053 3571\\n7351 5876\\n2385 7106\\n2818 9523\\n924 3000\\n5650 2310\\n5590 9735\\n5355 9885\\n736 6825\\n3172 9920\\n1984 2088\\n9449 9859\\n3527 1122\\n1447 1499\\n2095 1999\\n1925 5280\\n8712 4999\\n6203 8266\\n4251 9974\\n1051 500\\n4932 5779\\n464 8659\\n2203 883\\n8589 2879\\n6788 2566\\n1079 7791\\n7883 3328\\n5569 8161\\n7738 659\\n5301 5443\\n7457 159\\n3259 9235\\n9144 4720\\n3945 9869\\n1198 3809\\n5425 7611\\n1334 4005\\n1973 1131\\n8158 4508\\n4290 590\\n9351 7731\\n3737 5290\\n185 2146\\n4249 1119\\n5823 6176\\n9669 1317\\n8716 1325\\n102 2849\\n3960 718\\n4205 4668\\n4188 8647\\n8930 9243\\n5364 7023\\n3327 9184\\n449 2787\\n5676 1827\\n7563 7774\\n4668 9907\\n8747 5191\\n1227 5562\\n9322 1212\\n680\\n5711 8303\\n6924 4232\\n545 2246\\n1080 5568\\n8415 8221\\n5841 4197\\n1862 9747\\n9571 5739\\n3446 1410\\n9431 4080\\n1974 7937\\n6945 3014\\n6414 6954\\n2647 4792\\n4654 27\\n6766 8426\\n5665 1328\\n2969 798\\n2066 8759\\n9307 2507\\n851 9645\\n9672 7878\\n1259 8057\\n5935 7835\\n6929 8873\\n8633 5069\\n8843 3300\\n3434 5198\\n5738 5994\\n9370 9435\\n4514 4421\\n6968 3041\\n3066 8673\\n5684 8453\\n1809 8447\\n3322 5835\\n129 1316\\n3907 7701\\n5510 4229\\n6365 354\\n6300 5079\\n3016 4731\\n8628 7007\\n5963 7875\\n3753 5473\\n2138 92\\n5104 3874\\n4815 8620\\n6620 6439\\n479 2664\\n3413 6569\\n1249 9438\\n4781 4041\\n7603 3846\\n4170 8306\\n4984 5903\\n3515 9199\\n4221 6676\\n4158 4976\\n325 8672\\n7941 373\\n9842 5245\\n1209 7020\\n6015 869\\n4733 4758\\n9662 4963\\n5698 3567\\n5123 4334\\n952 6593\\n5393 372\\n3587 9584\\n7685 2094\\n1418 4717\\n1093 4067\\n7367 3876\\n367 9287\\n5047 3325\\n96 9862\\n5582 4022\\n1383 6896\\n7645 8527\\n1957 4772\\n531 3648\\n2873 9757\\n3999 4082\\n7795 6077\\n5710 8888\\n6046 1501\\n2363 5039\\n5661 675\\n3422 1764\\n2 8933\\n4126 4340\\n5165 5984\\n1745 2659\\n4433 5639\\n4954 368\\n888 2272\\n4065 2372\\n1683 4298\\n9025 9574\\n9246 3088\\n9237 7394\\n2460 1455\\n6363 6889\\n255 8837\\n6759 186\\n5910 4115\\n9609 7923\\n8478 7015\\n1352 3420\\n958 5328\\n5642 42\\n1679 5201\\n5732 6415\\n3086 2067\\n9419 4074\\n8679 6972\\n4016 6468\\n5154 9062\\n8329 4575\\n3947 7072\\n8512 8549\\n8553 4314\\n9006 6113\\n7704 6571\\n6766 106\\n9424 8693\\n2058 5762\\n6184 856\\n5627 4959\\n3480 4288\\n697 5604\\n519 3410\\n8103 8730\\n3122 4147\\n264 951\\n5290 221\\n9373 5234\\n7162 257\\n1617 8520\\n8778 2658\\n1658 4288\\n7845 984\\n2749 6270\\n3831 2367\\n659 6989\\n5067 9197\\n782 7175\\n928 943\\n6033 1763\\n3838 5721\\n9291 1639\\n6756 9170\\n4680 3843\\n212 6447\\n8755 8407\\n8626 9788\\n8107 2264\\n3923 728\\n8139 8691\\n3254 868\\n6354 4616\\n2302 9728\\n5897 2618\\n3071 4262\\n2494 10\\n1428 6031\\n6895 7018\\n9292 6813\\n3085 515\\n4114 3929\\n800 5628\\n1555 4420\\n4356 3615\\n2507 1800\\n26 8641\\n2774 8851\\n8652 6967\\n7235 8599\\n7287 427\\n6394 424\\n9111 3501\\n5303 6285\\n2911 7085\\n5490 9513\\n2474 5998\\n8327 6208\\n6422 5317\\n8059 456\\n8763 2041\\n9580 9287\\n8414 539\\n2400 9754\\n4224 1464\\n8970 5073\\n2441 4916\\n9934 8788\\n9249 8199\\n7639 1617\\n2732 5602\\n724 1127\\n4846 1824\\n1458 4872\\n767 7869\\n5073 3325\\n2181 9376\\n9341 5663\\n6574 6185\\n4261 4573\\n82 817\\n5806 4289\\n4369 1904\\n3065 7568\\n3931 7129\\n6251 7613\\n278 957\\n6217 7883\\n9957 9544\\n6119 2197\\n8663 3164\\n6396 4987\\n4816 2739\\n7091 1844\\n591 1389\\n5319 4898\\n553 8417\\n6625 3446\\n8981 2864\\n489 8812\\n2839 2013\\n9978 5553\\n1177 2886\\n9417 7899\\n9230 3347\\n5203 7298\\n924 1076\\n2764 6797\\n7259 829\\n6403 9273\\n8462 3173\\n2207 2775\\n2069 9811\\n1671 2588\\n3081 1162\\n7899 9107\\n9425 190\\n2305 2657\\n6983 3321\\n45 4277\\n4121 8381\\n159 4473\\n7266 4490\\n2985 2583\\n3525 6134\\n226 2095\\n5688 324\\n1859 875\\n4935 4451\\n3749 9258\\n2223 7920\\n254 3889\\n3616 2731\\n4766 402\\n8861 414\\n6549 2827\\n6831 4278\\n6911 2591\\n3725 5510\\n2899 9152\\n260 7965\\n9460 7361\\n3910 3331\\n5794 7882\\n6808 6114\\n4495 5042\\n4834 4294\\n1575 8634\\n8938 5901\\n7053 2821\\n2205 7122\\n1076 5397\\n3812 6343\\n1620 3585\\n4724 1723\\n4693 3960\\n3653 2699\\n152 9164\\n659 9261\\n1141 3209\\n7867 8467\\n1168 9842\\n106 959\\n5200 8659\\n7311 5773\\n5136 4944\\n5226 1119\\n2925 4146\\n8961 6023\\n863 6178\\n9464 4685\\n8816 7453\\n9912 5279\\n4874 4190\\n6793 5378\\n8602 4\\n3154 3005\\n2757 4856\\n5659 4068\\n6992 4500\\n1183 8575\\n4330 9617\\n9072 6599\\n7282 6260\\n7590 5424\\n2993 5388\\n3508 7544\\n5039 9790\\n2274 8056\\n899 4248\\n372 3097\\n817 1645\\n3815 2350\\n5961 1457\\n135 1972\\n832 2941\\n8038 3388\\n6523 8607\\n6102 6965\\n256 4715\\n6866 5346\\n5387 1867\\n9407 1314\\n2949 133\\n8437 6755\\n1833 1535\\n8844 1156\\n9207 1803\\n9087 747\\n4095 7743\\n6652 8503\\n8270 2365\\n899 9258\\n3717 2239\\n1612 9535\\n4850 5263\\n5972 6588\\n5346 271\\n9012 4013\\n3006 6978\\n2771 8139\\n1121 1794\\n1958 1433\\n5278 3308\\n3894 5265\\n8294 1693\\n2444 7265\\n7801 8564\\n496 3924\\n3144 8019\\n9151 8768\\n8321 5327\\n7015 5320\\n6183 3054\\n3497 2055\\n9109 5587\\n1782 57\\n9383 3855\\n7799 1927\\n3402 9611\\n7800 2998\\n4586 6607\\n3716 8822\\n7431 8576\\n8708 2509\\n3499 6303\\n5010 8653\\n2489 7819\\n6985 9985\\n5486 5123\\n3544 3401\\n7241 3539\\n3549 3347\\n8485 97\\n5682 8597\\n4980 2875\\n2060 1925\\n3317 819\\n7071 6458\\n3043 6325\\n1536 551\\n4985 1713\\n9696 2477\\n9332 5017\\n7634 7999\\n4397 9592\\n7009 355\\n4773 9816\\n5618 3375\\n7235 111\\n9395 6608\\n9842 1003\\n2018 9294\\n757 3583\\n6817 3721\\n503 36\\n2340 5071\\n8411 4010\\n3756 1671\\n641 2120\\n4552 712\\n4522 3925\\n9268 2169\\n8639 5034\\n8250 1189\\n4295 8508\\n8383 3064\\n5504 2269\\n2468 7933\\n1756 3057\\n2926 7708\\n1567 8740\\n2532 4192\\n7875 7080\\n6575 8605\\n612 5177\\n5642 3144\\n8378 3605\\n6552 3745\\n7236 2652\\n8761 9556\\n9246 9251\\n1145 8706\\n9371 121\\n1769 4931\\n6593 8551\\n8707 5512\\n500 6006\\n292 7423\\n39 5225\\n3955 4918\\n2295 7780\\n4278 7425\\n5805 8876\\n7490 8940\\n5745 148\\n7410 919\\n741 2167\\n9767 9182\\n4931 4987\\n7039 5590\\n9428 8222\\n8983 4536\\n7549 4952\\n7391 577\\n543 4693\\n7768 9695\\n2722 6073\\n1786 8601\\n7816 9426\\n4793 479\\n9186 101\\n1855 3307\\n7106 6067\\n3705 3577\\n247 3461\\n2773 102\\n5534 6425\\n8690 4887\\n5258 4166\\n3920 1625\\n5332 5821\\n3328 6639\\n2878 1264\\n5399 5257\\n6179 850\\n3927 9693\\n2952 6343\\n873 9340\\n8658 193\\n6889 9168\\n6833 9218\\n1328 8355\\n8503 5850\\n4306 5559\\n4467 3594\\n7649 7008\\n6093 121\\n7453 2183\\n1535 7036\\n2266 8489\\n6924 8226\\n4683 7850\\n7495 588\\n1060 1409\\n3965 7171\\n7312 7964\\n6276 8502\\n4951 5346\\n6955 1570\\n4596 4322\\n2035 5343\\n478 792\\n825 3\\n2591 3059\\n1145 3639\\n6260 6536\\n4921 8679\\n217 6155\\n7728 2969\\n4068 5096\\n375 5674\\n5256 7973\\n2307 8745\\n841 7143\\n7827 1277\\n4648 2149\\n2988 8380\\n3185 8458\\n4508 1031\\n5798 2076\\n6159 4478\\n3148 6704\\n2164 5126\\n531 5531\\n155 8823\\n4157 715\\n1439 6872\\n6914 7155\\n3144 1511\\n1885 6722\\n2105 1372\\n8136 7632\\n6032 5691\\n7758 9734\\n7812 9949\\n3647 536\\n4499 2345\\n8892 1664\\n614 8107\\n7242 2543\\n8419 2562\\n6981 4151\\n2600 596\\n1169 6605\\n9205 9369\\n3419 4693\\n45 6336\\n6936 4530\\n877 5463\\n9197 8200\\n8445 3837\\n5023 7362\\n5933 5085\\n9494 8369\\n6251 1351\\n3491 2021\\n3903 9453\\n7549 8840\\n6841 160\\n6026 4261\\n3731 1739\\n1243 2227\\n464 643\\n3907 8673\\n1031 9187\\n3344 2302\\n4654 8662\\n2622 724\\n8602 5517\\n1919 7933\\n1641 3257\\n6628 720\\n6297 1980\\n4749 152\\n6081 1406\\n7643 9068\\n2893 8503\\n4537 4904\\n3710 4143\\n5486 3344\\n2727 4049\\n7520 7260\\n5557 1587\\n3559 7712\\n7002 3411\\n5175 304\\n6444 455\\n2211 1345\\n3497 786\\n2119 3975\\n1555 8002\\n6238 2957\\n9371 1915\\n8803 1874\\n1555 3530\\n5640 3210\\n8531 3883\\n4915 4681\\n2750 5897\\n9026 2033\\n2375 6357\\n3938 134\\n9030 7817\\n4550 1348\\n5024 7238\\n5620 6829\\n9071 3889\\n7948 8866\\n9384 1438\\n4044 8302\\n7901 4700\\n4318 5932\\n3324 5988\\n5537 7789\\n740 7297\\n5665 2142\\n316 227\\n7127 1542\\n710 7475\\n7031 8068\\n6404 4780\\n2144 1571\\n8277 4653\\n6443 6407\\n1265 1689\\n7735 3193\\n2968 8980\\n8896 469\\n5220 910\\n4309 3795\\n9148 6191\\n5431 8430\\n5635 2892\\n6454 8378\\n411 6346\\n4536 5855\\n4821 9100\\n8555 3136\\n3600 248\\n2811 3222\\n8548 991\\n1235 4632\\n3698 220\\n2827 4128\\n5573 7289\\n3811 8695\\n5588 4712\\n3764 8272\\n885 5082\\n8826 2085\\n5616 6931\\n7535 4049\\n4296 8402\\n9101 1700\\n1581 6035\\n5076 6642\\n8695 8595\\n1018 9765\\n5971 9943\\n11 1703\\n5270 9577\\n2657 7131\\n9806 9302\\n1696 160\\n1972 5489\\n1549 7145\\n5510 1357\\n123 8151\\n1912 9374\\n5108 3628\\n4496 291\\n7695 2256\\n8182 2433\\n7487 5274\\n173 7655\\n3416 445\\n723 5380\\n4874 6424\\n8490 7349\\n314\\n1232 1193\\n6192 6877\\n6604 563\\n5741 6594\\n1772 1440\\n8817 7895\\n8817 664\\n6626 9635\\n2170 9327\\n7044 6025\\n7405 6446\\n8612 3773\\n311 1332\\n3129 4632\\n2879 624\\n5962 2648\\n6405 327\\n4885 1178\\n2931 584\\n9646 8504\\n6967 7668\\n8699 4711\\n1301 2579\\n8690 7696\\n6263 3341\\n505 6119\\n5675 3113\\n1555 6384\\n4210 7376\\n1323 7613\\n1360 9180\\n2886 685\\n1992 4083\\n7402 3736\\n7681 9051\\n3802 71\\n2640 7038\\n9451 3407\\n1952 9455\\n4065 5745\\n9606 2055\\n8369 2459\\n1417 8528\\n9565 5855\\n3522 5859\\n6701 72\\n4111 7548\\n6186 1384\\n3814 1326\\n5523 6853\\n7684 2392\\n4624 347\\n7104 7164\\n8571 3739\\n6980 8082\\n8205 4227\\n7004 6908\\n7289 6899\\n1142 9819\\n1007 9362\\n4013 2851\\n7804 2370\\n9582 805\\n6579 1364\\n9970 8181\\n9754 6243\\n5208 486\\n1687 1134\\n3655 1174\\n58 4560\\n8678 7185\\n4861 5693\\n6664 5122\\n7852 6891\\n9654 8148\\n2041 2259\\n3353 2419\\n6395 7660\\n8311 2887\\n13 6174\\n8176 9409\\n8331 4194\\n6692 3921\\n969 9374\\n8960 8321\\n9851 2688\\n6955 3244\\n8119 5034\\n1820 4848\\n5421 8773\\n5920 3235\\n614 6865\\n1077 7783\\n1198 6480\\n9070 4155\\n7213 2498\\n2784 5751\\n5087 6814\\n6445 4928\\n8753 5238\\n712 5051\\n752 8358\\n6031 1384\\n5666 3755\\n5470 8334\\n8158 5536\\n4303 5815\\n5246 7113\\n207 8255\\n7134 5326\\n2189 2484\\n1505 44\\n3975 4251\\n7292 7676\\n169 6997\\n8906 4367\\n3826 6440\\n2581 7139\\n3807 7182\\n5103 4326\\n6831 1517\\n4973 5454\\n8686 9468\\n4473 5344\\n5361 2945\\n6258 6495\\n4781 4760\\n5079 2049\\n7391 7899\\n5078 4982\\n5577 6878\\n2531 494\\n4417 2415\\n6351 3621\\n1831 3192\\n1157 594\\n316 9577\\n9662 3991\\n5731 3445\\n9614 9730\\n1578 4542\\n306 4259\\n5973 4811\\n5406 8219\\n7808 9150\\n2696 6020\\n4069 4202\\n631 5128\\n5392 3532\\n6649 3885\\n5257 4528\\n6415 8317\\n1093 636\\n7976 3659\\n5266 3993\\n8887 6916\\n1148 866\\n8204 2444\\n3245 6610\\n7875 5048\\n7404 1382\\n2952 1003\\n8621 4926\\n9856 7957\\n8912 131\\n9939 4679\\n5266 6060\\n9169 7861\\n1103 8431\\n4490 9205\\n7379 5271\\n2570 5695\\n6534 4463\\n2701 4257\\n5695 7909\\n93 3038\\n5472 4427\\n4566 3760\\n1581 8833\\n1566 9566\\n7234 6110\\n7706 3507\\n963 9761\\n8896 1158\\n5919 2085\\n8347 2387\\n9150 9065\\n9194 663\\n9897 4775\\n3670 2635\\n8420 8678\\n7127 8582\\n6099 6969\\n2694 3930\\n8959 1747\\n3216 5944\\n6885 3283\\n8743 694\\n8003 2797\\n80 2986\\n3976 2328\\n4243 5802\\n1588 8975\\n1727 3982\\n1604 6958\\n9183 2640\\n6159 4558\\n2294 5250\\n8244 519\\n8897 851\\n3237 3224\\n9502 4898\\n224 7059\\n2884 734\\n6360 3594\\n3236 1278\\n195 7241\\n4161 6992\\n3032 5024\\n529 2605\\n7783 3296\\n8239 4961\\n2921 2651\\n7250 1624\\n9424 693\\n4285 794\\n8207 5384\\n3291 7855\\n664 9344\\n6181 1376\\n2429 5039\\n5651 3845\\n5802 1205\\n1283 7009\\n4505 9212\\n1023 5667\\n3742 3223\\n2350 5329\\n7031 9011\\n7338 7090\\n7493 5873\\n1294 3203\\n4330 6176\\n3869 1533\\n6485 2072\\n5457 6455\\n7603 576\\n618 1827\\n9574 676\\n6193 3477\\n7067 468\\n8049 9303\\n6989 1409\\n562 7740\\n894 3376\\n1841 4092\\n5241 1932\\n211 2336\\n3424 2262\\n1387 3940\\n2635 8052\\n5543 2343\\n5957 6650\\n321 1091\\n1039 5659\\n5313 960\\n6394 492\\n925 8116\\n4071 3234\\n5541 180\\n454 9935\\n765 5700\\n3792 6121\\n1843 5021\\n4162 1017\\n291 2441\\n4886 1795\\n7566 5561\\n4749 3675\\n8023 5516\\n950 4824\\n8368 8778\\n8443 6349\\n4283 6107\\n2578 347\\n7123 9962\\n7417 1980\\n3607 4924\\n502 7487\\n8149 3287\\n6615 2031\\n7471 1009\\n8270 7824\\n7277 7613\\n331 179\\n3362 9570\\n4122 7955\\n2946 8282\\n5406 5352\\n6826 399\\n6640 4468\\n5132 2860\\n3862 3734\\n497 7893\\n7715 226\\n3184 2852\\n7393 9796\\n8423 845\\n2679 523\\n7629 1087\\n3956 7902\\n3811 2416\\n819 3956\\n3382 2254\\n941\\n984 5313\\n9045 2412\\n4417 1340\\n3745 8975\\n5960 5198\\n7288 7818\\n2626 1305\\n9402 8636\\n8432 6827\\n2774 3747\\n2005 167\\n6899 8842\\n1745 5695\\n5312 6457\\n4174 8856\\n5180 5680\\n3642 5917\\n9694 3275\\n8154 3235\\n4100 826\\n9824 782\\n7366 6754\\n10000 3309\\n5386 9187\\n3084 4142\\n8272 2005\\n2703 4714\\n2507 2061\\n3084 6528\\n139 6432\\n9738 2039\\n1669 8974\\n7751 8765\\n2859 4015\\n7215 2568\\n7771 577\\n3486 8329\\n5792 3084\\n7019 5719\\n828 3916\\n3603 4988\\n5620 1064\\n6705 5978\\n5678 1482\\n9483 3923\\n3698 7025\\n2509 6388\\n7370 2720\\n1196 2592\\n1570 5776\\n3678 4874\\n5043 5069\\n34 5830\\n5937 9357\\n6430 491\\n3259 3451\\n7205 4180\\n3944 9117\\n1529 8302\\n1374 3913\\n6272 8635\\n4683 8380\\n2365 9899\\n7766 1026\\n5641 8761\\n6049 8126\\n8027 3969\\n4435 8891\\n6765 4388\\n1145 5212\\n6702 7661\\n3988 8971\\n2610 2036\\n3565 3220\\n9935 7703\\n2959 4248\\n2450 3849\\n4236 7504\\n8369 9332\\n9220 4889\\n2675 1187\\n5916 4006\\n8836 7009\\n3642 4829\\n6342 1666\\n7186 6894\\n8839 1846\\n3194 6878\\n702 4740\\n5956 500\\n8122 1477\\n4044 2116\\n596 9845\\n5245 1149\\n1694 986\\n7565 6752\\n3238 3984\\n1062 8187\\n6795 6190\\n9995 3637\\n7714 7985\\n1956 7880\\n4350 7132\\n3269 8109\\n2341 6946\\n1826 5994\\n5163 1938\\n1735 8865\\n6407 5060\\n4319 1800\\n7729 1936\\n4998 8533\\n5754 9838\\n4627 4122\\n2670 3615\\n3717 1743\\n7952 4206\\n2435 7985\\n4332 8665\\n8389 537\\n4127 2364\\n1277 2080\\n3331 1172\\n6699 4761\\n4082 7479\\n1001 5820\\n9281 2140\\n3568 4454\\n5917 8174\\n1532 42\\n5828 5018\\n7900 6802\\n4 4844\\n7241 7046\\n2430 3693\\n2970 1994\\n3360 5516\\n9097 8018\\n1317 9434\\n594 4162\\n6769 2942\\n6184 3779\\n8645 4534\\n3852 7963\\n5060 9896\\n2685 2676\\n3674 1160\\n4120 8158\\n3965 3912\\n756 1983\\n7366 6999\\n8338 1770\\n4319 7065\\n5166 6181\\n7447 7483\\n8264 4730\\n9168 9384\\n7788 2926\\n5675 7108\\n5175 9049\\n2896 668\\n3142 9183\\n4307 4509\\n5313 3006\\n2745 1268\\n488 7768\\n2624 6363\\n4897 4206\\n6763 445\\n6848 4924\\n5536 1010\\n731 4565\\n1801 9015\\n5250 4235\\n5847 5827\\n3877 9519\\n6290 5024\\n5381 6088\\n4935 2876\\n7185 4986\\n9887 4984\\n7749 9556\\n6668 9169\\n1465 7028\\n3269 1169\\n4938 9826\\n4103 9022\\n1747 9655\\n7301 1572\\n3734 9600\\n8611 5371\\n7005 7850\\n4851 4114\\n3429 4075\\n2754 6374\\n6491 6214\\n4217 8824\\n34 8714\\n5285 214\\n1072 2581\\n7291 1986\\n5764 6654\\n7059 1831\\n6223 1211\\n5568 8534\\n3736 1673\\n6766 8647\\n4254 5197\\n5074 4084\\n935 7458\\n1424 8043\\n7827 4381\\n8061 4600\\n7880 1612\\n8966 2377\\n164 7490\\n9759 3399\\n9551 92\\n8099 5978\\n8538 9731\\n3711 305\\n6617 2483\\n2773 5166\\n4745 5303\\n3907 9196\\n8732 6105\\n7107 280\\n6825 8755\\n1863 4834\\n9679 9375\\n9248 4024\\n4001 430\\n1167 2337\\n3656 2893\\n7889 817\\n2382 8329\\n8266 4967\\n7627 3136\\n6595 7241\\n2672 4281\\n8216 3378\\n6034 8452\\n3827 7604\\n1351 6540\\n8458 5160\\n9999 9983\\n9349 2725\\n4302 99\\n7419 331\\n7103 4613\\n8105 9789\\n4508 1209\\n551 401\\n9206 4524\\n5691 6536\\n142 7618\\n8973 3204\\n3434 2604\\n9602 8209\\n7359 5459\\n7782 4365\\n1657 1621\\n3209 2863\\n8459 1924\\n7137 451\\n7325 3423\\n5587 9927\\n3695 4012\\n7296 4922\\n5267 1687\\n7712 4806\\n7933 2969\\n9709 458\\n1672 1137\\n4786 9434\\n8350 7821\\n3415 116\\n5611 579\\n6387 1917\\n9328 8247\\n2559 1936\\n6790 7153\\n500 9178\\n5508 3809\\n3415 1679\\n1326 3074\\n1559 246\\n167 550\\n6740 2218\\n6028 6257\\n6553 4189\\n7329 1176\\n304 8280\\n8171 5291\\n1480 2325\\n5966 7689\\n9797 4821\\n368 4132\\n1460 1542\\n8007 1663\\n766 758\\n3089 2113\\n7304 4263\\n5196 3738\\n2842 6930\\n8456 1578\\n692 8486\\n3627 6281\\n4773 1222\\n4922 3728\\n1118 4631\\n2021 740\\n683 2679\\n9716 3660\\n1506 2465\\n180 267\\n285 8515\\n1176 4027\\n1829 618\\n7127 9745\\n8182 8837\\n4848 8671\\n7586 3130\\n5624 3903\\n3769 4016\\n1986 2772\\n3494 1230\\n3855 8115\\n600 7611\\n2057 9889\\n178 5330\\n2612 9628\\n9107 2784\\n4318 3433\\n323 2295\\n6280 5345\\n1355 4391\\n2130 735\\n7818 5858\\n8137 6535\\n5283 6980\\n748 5036\\n3561 6808\\n1692 6510\\n5896 2751\\n7898 2587\\n4847 7144\\n4512 5799\\n7604 3730\\n8834 9858\\n987 8508\\n7656 8698\\n446 6683\\n3982 610\\n6099 8353\\n2872 6020\\n726 9739\\n7457 5348\\n8762 2001\\n2108 7721\\n1206 2974\\n3667 8703\\n1013 6780\\n770 6655\\n2305 3914\\n4105 5268\\n662 2457\\n685 2200\\n597 8510\\n3808 1820\\n996 7747\\n1968 5339\\n1358 9942\\n1079 464\\n774 7315\\n4198 3767\\n941 5904\\n5145 2938\\n8171 3891\\n4898 2144\\n8150 4641\\n9067 5327\\n4396 6649\\n6185 3457\\n606 1004\\n5433 4980\\n3496 6375\\n6691 6063\\n6087 5511\\n6359 9241\\n3001 5696\\n5367 8117\\n1009 8218\\n5910 4573\\n7132 7724\\n5336 4146\\n7050 6817\\n61 5476\\n8698 3978\\n5051 8879\\n7110 7596\\n635 973\\n237 7118\\n5505 9311\\n5578 7637\\n5011 1101\\n3000 1437\\n9801 531\\n6780 733\\n2801 2451\\n2025 6826\\n5471 2088\\n4851 7113\\n4914 1945\\n6879 216\\n9353 1302\\n6962 4724\\n3955 8667\\n2044 8053\\n7151 3395\\n115 2529\\n9128 7467\\n5027 9047\\n6556 6786\\n7823 3511\\n4835 4284\\n1484 4951\\n8523 6859\\n8876 8211\\n7200 4847\\n5565 6831\\n460 1507\\n371 7296\\n7791 1565\\n8418 2549\\n602 8544\\n9490 1123\\n9636 6128\\n1775 2322\\n3021 1349\\n8676 1648\\n7721 3734\\n3502 5123\\n8628 1167\\n1451 6039\\n1262 8262\\n8563 3538\\n6373 3142\\n2128 6952\\n5982 4061\\n6328 5271\\n1871 6372\\n9676 1363\\n8388 7424\\n873 5107\\n9469 5013\\n7476 9324\\n2169 1117\\n6544 8150\\n4476 513\\n3221 4493\\n7292 7439\\n9280 3149\\n8664 6984\\n7794 9866\\n4329 8301\\n3998 7805\\n8354 4188\\n2719 5348\\n6876 8111\\n3777 1042\\n3923 1723\\n1551 4928\\n229 9452\\n935 8975\\n2350 7892\\n1132 554\\n1892 715\\n5435 9549\\n9868 8204\\n4138 4007\\n3751 9329\\n671 4371\\n1584 9063\\n8592 5369\\n8176 8514\\n4998 6628\\n4114 7393\\n5161 3141\\n1113 4274\\n1382 7808\\n4604 8058\\n3409 1443\\n5830 6140\\n8965 3422\\n5039 3976\\n1229 2879\\n3159 9037\\n9303 6710\\n5287 5964\\n1980 7538\\n4663 3063\\n8623 2354\\n4888 8291\\n9632 5627\\n1911 1495\\n8391 7268\\n9507 947\\n7598 3109\\n1196 5563\\n6883 1181\\n2533 1621\\n1922 2212\\n3916 1307\\n2935 7132\\n889 5376\\n8465 3590\\n1071 8079\\n9025 2724\\n785 423\\n2684 7523\\n7311 7491\\n3768 6366\\n6996 2444\\n3005 4231\\n1979 7024\\n8890 8216\\n658 438\\n8239 2561\\n8712 3867\\n8687 2849\\n4851 7395\\n2957 1798\\n1351 2169\\n5442 2959\\n840 826\\n7712 6744\\n2043 8381\\n7800 76\\n2319 5022\\n7027 5685\\n8531 4050\\n4807 4392\\n3582 5173\\n2849 5431\\n7260 5075\\n4434 1156\\n7984 3162\\n1875 7815\\n5011 8074\\n5319 335\\n2118 5081\\n6149 1485\\n3496 174\\n9559 3468\\n1202 5849\\n5610 9343\\n2848 2759\\n5685 9260\\n8941 1243\\n6971 1973\\n4254 7769\\n5900 7865\\n4832 3736\\n972 9858\\n930 5150\\n5968 2458\\n3964 4552\\n5248 7732\\n2552 7808\\n2021 8097\\n5196 1363\\n8513 177\\n6022 727\\n3379 6149\\n9248 7245\\n679 9483\\n8937 2072\\n5289 1264\\n6668 9484\\n3703 5683\\n4064 3335\\n1974 7122\\n931 2405\\n6711 4254\\n7604 1\\n202 9816\\n4486 5118\\n7032 4908\\n5523 9456\\n1539 4747\\n7644 3586\\n1874 9527\\n2364 2903\\n9795 7953\\n9625 5390\\n4785 4847\\n3350 8949\\n5859 1787\\n5079 4354\\n5216 9295\\n4817 9828\\n8670 189\\n3383 8919\\n7230 874\\n9139 5698\\n1341 7158\\n6077 9751\\n9702 7853\\n1494 7166\\n947 1392\\n1349 5417\\n5741 5140\\n250 6677\\n3452 2888\\n1872 9765\\n6261 7500\\n9229 4068\\n9170 9325\\n7083 2123\\n6381 3833\\n7210 8765\\n7025 9075\\n543 7825\\n626 1811\\n7817 5205\\n6480 7374\\n1581 9840\\n7272 8138\\n9403 740\\n7283 2042\\n4195 3811\\n1316 6980\\n2305 5161\\n969 6807\\n4100 7371\\n2460 8865\\n1552 5762\\n7932 7985\\n3795 9605\\n8358 4615\\n2134 7232\\n3670 7588\\n94 6201\\n7947 211\\n2705 7995\\n9364 5153\\n6286 7329\\n239 3623\\n8423 5967\\n3620 5341\\n4107 6088\\n180 9179\\n1545 6537\\n8121 5749\\n8277 3444\\n1000 722\\n9702 5256\\n2170 7597\\n7092 6962\\n188 8205\\n8331 6973\\n9541 5347\\n3360 9677\\n1474 5159\\n7754 2635\\n685 5007\\n7970 8459\\n7082 6984\\n9177 2120\\n5040 2525\\n7597 9229\\n6082 183\\n2189 7542\\n1743 320\\n6690 7874\\n2791 4095\\n4028 7672\\n7676 2227\\n804 4560\\n3134 3037\\n3412 8068\\n8434 6271\\n3517 7072\\n8455 5211\\n4620 7310\\n9737 7708\\n3667 810\\n5838 5342\\n2259 8024\\n8436 6578\\n6726 3588\\n5454 4276\\n3691 8316\\n4020 4550\\n4885 4999\\n6510 898\\n6316 7213\\n5609 8673\\n9330 3987\\n9723 3516\\n683 3055\\n7774 6884\\n4890 1881\\n6794 2643\\n8031 4967\\n2647 5441\\n9611 1478\\n1283 2535\\n1199 8365\\n9924 5603\\n8195 6993\\n6321 1615\\n9990 3868\\n2067 2225\\n7689 8819\\n6978 3978\\n6154 5533\\n3150 5521\\n5982 1724\\n3111 1538\\n5010 3444\\n51 9594\\n4761 1578\\n1510 1784\\n1549 8642\\n908 1071\\n179 9949\\n9102 1108\\n4799 2955\\n2978 9344\\n8697 2314\\n7455 8949\\n8386 9418\\n5625 353\\n127 5658\\n6404 27\\n2810 6003\\n8211 2756\\n2930 1162\\n3856 7558\\n2944 5333\\n3033 4307\\n3784 2198\\n8345 1130\\n68 9175\\n7780 6445\\n633 5154\\n3626 3746\\n2157 4593\\n6661 4622\\n3534 1696\\n2211 2712\\n2919 2129\\n1065 9894\\n6920 6715\\n9904 357\\n1695 5121\\n8155 3638\\n3518 3867\\n6928 3395\\n8112 4273\\n686 9351\\n9815 9421\\n5003 7064\\n2849 3087\\n2205 7393\\n7767 5739\\n1269 6107\\n2757 1455\\n5954 1138\\n9543 7619\\n440 5535\\n6040 2182\\n3569 5758\\n9747 9231\\n5606 9430\\n4358 8100\\n4183 5958\\n5429 4774\\n4537 2308\\n6956 940\\n1722 3681\\n8726 5396\\n2157 7734\\n2852 5668\\n2971 3167\\n1963 6010\\n688 5765\\n6614 9246\\n7281 5783\\n8661 7466\\n4398 7675\\n3714 6318\\n5093 6\\n2376 6698\\n8136 6041\\n5895 2965\\n6460 9788\\n5202 6401\\n6567 5133\\n1368 3844\\n2923 9908\\n269 1372\\n409 8479\\n6850 1617\\n1240 2032\\n3493 5910\\n1667 4284\\n7946 4379\\n9625 2165\\n9008 3402\\n5801 2438\\n8157 7844\\n4826 6286\\n6065 2948\\n9109 2343\\n3541 5130\\n2478 6197\\n9579 7528\\n7442 4666\\n5373 8924\\n7742 2386\\n958 8559\\n3943 640\\n4186 3346\\n4787 2954\\n3196 3386\\n5205 4255\\n5760 2169\\n9565 8581\\n8725 3051\\n2347 5600\\n6749 5951\\n5380 5384\\n2766 2584\\n9539 8401\\n1201 8433\\n5359 1021\\n3724 9313\\n5752 4770\\n6668 8952\\n7574 8098\\n6694 1786\\n9581 8762\\n9157 1205\\n3998 3535\\n4307 8052\\n3303 8331\\n2894 917\\n5021 9667\\n3974 6999\\n167 7672\\n2498 3385\\n4922 4392\\n7049 8125\\n6184 2771\\n2326 9050\\n6565 727\\n5769 7418\\n9682 9885\\n1891 7695\\n7439 3146\\n7829 6410\\n2180 5414\\n1072 7375\\n665 5591\\n2332 8938\\n4670 4390\\n9259 5441\\n3229 7074\\n4432 5593\\n7281 872\\n4063 5649\\n6625 615\\n6550 5590\\n6812 5195\\n5308 106\\n6910 2938\\n4465 1378\\n3509 1129\\n2566 6980\\n6606 8909\\n2048 3817\\n5649 2480\\n187 2790\\n7820 3009\\n8865 4813\\n3983 2565\\n6679 7423\\n5790 8849\\n4934 2476\\n825 5897\\n9473 7857\\n5334 9034\\n4602 1794\\n5348 9059\\n7473 1242\\n1453 8279\\n8373 9824\\n3508 4888\\n2937 8137\\n5362 6085\\n2016 6761\\n5423 3497\\n9727 2623\\n5413 8532\\n4748 3199\\n917 4721\\n3135 1063\\n3801 6629\\n3685 7310\\n1873 6371\\n972 9715\\n3851 5125\\n7110 9757\\n6065 6511\\n1648 5396\\n8230 5901\\n4781 9507\\n2260 4407\\n1023 7080\\n9591 9761\\n3058 8457\\n4886 7012\\n7347 5088\\n1838 9123\\n4045 6605\\n6023 9358\\n7980 1123\\n2051 4887\\n183 3647\\n246 9644\\n9455 5715\\n9458 8955\\n3578 5606\\n3083 2105\\n502 5770\\n3370 6506\\n7011 9017\\n6704 1716\\n719\\n183 6490\\n6180 6130\\n6334 7112\\n2593 2845\\n167 4754\\n9397 4996\\n8836 5372\\n58 9499\\n3026 6298\\n2705 3859\\n7312 4236\\n8673 2502\\n6429 2038\\n8860 6733\\n1010 3107\\n6703 4505\\n1948 6098\\n6674 3994\\n1991 9951\\n8203 3160\\n5794 5148\\n7342 4437\\n6597 5100\\n8322 9439\\n8312 7566\\n6436 8411\\n5001 9000\\n9125 881\\n8243 9615\\n4120 9048\\n5087 4845\\n4587 5007\\n6626 6253\\n3399 3471\\n8845 3219\\n333 5998\\n8094 9067\\n7046 8069\\n9138 2724\\n1860 1741\\n2826 4701\\n6217 2324\\n9503 530\\n9238 3427\\n428 8667\\n8946 7453\\n15 1622\\n4166 1545\\n4923 6736\\n1452 919\\n5740 6349\\n3981 4045\\n7642 7192\\n6138 4156\\n9896 4812\\n1889 6034\\n5685 7949\\n221 1590\\n9899 8469\\n6905 8685\\n4686 2171\\n5191 9113\\n8202 5757\\n5386 3140\\n5040 4794\\n445 494\\n8424 6904\\n5623 8976\\n432 3603\\n3810 8151\\n1307 4024\\n357 3012\\n1416 9416\\n9697 8822\\n9084 5215\\n7902 2366\\n1607 6518\\n5117 4492\\n5724 377\\n8940 350\\n5198 4834\\n2838 6696\\n8246 6924\\n1424 5881\\n669 5011\\n8003 2071\\n6843 9043\\n3222 1565\\n7463 2485\\n5025 9381\\n4844 9632\\n5671 1405\\n9145 8915\\n7220 947\\n1371 9704\\n9019 5570\\n8125 7991\\n3599 5088\\n556 1547\\n1507 7226\\n7198 264\\n9506 8910\\n6635 8039\\n8780 7478\\n8734 9050\\n8205 8800\\n9072 6773\\n7372 8869\\n7897 9192\\n7512 8591\\n7912 2517\\n6177 2891\\n9954 2241\\n8571 943\\n5464 222\\n8077 535\\n1045 188\\n2383 3080\\n9088 3908\\n3666 7799\\n5667 6934\\n9224 1387\\n7905 7538\\n4258 401\\n7902 6185\\n7558 1297\\n6213 9170\\n9752 9867\\n7797 3419\\n7377 1722\\n2132 2376\\n150 6737\\n9706 9765\\n82 9973\\n5972 1287\\n8892 600\\n4433 7327\\n1952 9189\\n6134 4573\\n2809 233\\n1078 9140\\n6541 1186\\n5245 1010\\n8355 3357\\n7606 6481\\n1637 4909\\n3053 7754\\n1918 8756\\n5147 5984\\n1509 3364\\n4332 4050\\n7672 5855\\n1466 2024\\n111 1539\\n692 5509\\n3327 9954\\n7706 3288\\n1659 370\\n1151 1886\\n1860 4133\\n8820 6866\\n517 5172\\n5252 6097\\n8248 4652\\n9823 1669\\n4080 7692\\n1752 1549\\n9904 3653\\n6630 9695\\n2410 5097\\n667 2446\\n9466 8706\\n313 1934\\n2726 2619\\n8242 4762\\n5015 8770\\n9688 9761\\n5310 7776\\n4314 7294\\n5852 5543\\n9100 2551\\n9017 4893\\n642 9894\\n4818 4298\\n393 2632\\n1194 4022\\n3580 6002\\n6222 2892\\n2180 524\\n9630 2720\\n7726 7880\\n4032 9825\\n2980 3752\\n3080 9649\\n9973 1134\\n3889 2544\\n9044 9603\\n4990 7166\\n6550 572\\n7635 4931\\n4233 4294\\n4935 6653\\n8940 2039\\n8300 1374\\n9859 4616\\n3827 8739\\n2023 4155\\n1539 1986\\n3470 7624\\n9410 2892\\n9231 7408\\n5578 7728\\n5964 4300\\n5955 8302\\n9434 5271\\n506 3845\\n80 4488\\n9390 8081\\n6467 1531\\n8540 8115\\n7650 214\\n2478 8829\\n1962 1796\\n5522 4580\\n2558 7479\\n9113 2821\\n8897 5373\\n4010 7291\\n1445 5683\\n4719 3892\\n8231 5983\\n2312 5844\\n368 2499\\n7668 9147\\n6822 4218\\n2335 2655\\n1420 6216\\n3838 9568\\n830 3744\\n1899 9453\\n3753 872\\n1008 7664\\n7208 2092\\n9827 9633\\n7927 1241\\n8833 6501\\n835 1473\\n928 9144\\n980 2168\\n5815 3447\\n4423 1538\\n5715 3477\\n5366 2288\\n1887 2813\\n4898 6980\\n6151 818\\n5966 3187\\n2705 2431\\n3636 4239\\n8060 266\\n4928 9160\\n8698 9116\\n4996 8708\\n6891 8876\\n7210 5343\\n3008 1768\\n1123 9902\\n3939 286\\n9223 3685\\n1321 4725\\n3174 2902\\n2925 8775\\n8036 8065\\n4165 3900\\n510 8841\\n6720 4841\\n1902 875\\n4336 9218\\n7618 7896\\n8302 8195\\n3717 9029\\n4151 2768\\n2869 230\\n5481 6718\\n3837 8582\\n643 440\\n8033 4114\\n5972 1100\\n7547 527\\n2685 171\\n2292 794\\n3721 3205\\n62 603\\n3106 8756\\n6541 1205\\n8209 9780\\n4917 4358\\n2324 22\\n3176 7508\\n8188 6642\\n8558 5847\\n5505 177\\n2918 4627\\n9370 5000\\n6338 9552\\n7254 814\\n8956 3440\\n4805 33\\n9432 7627\\n6157 9285\\n298 2463\\n9450 694\\n8618 6687\\n3775 5107\\n7225 4033\\n9713 315\\n5513 4421\\n3202 8191\\n8500 5170\\n7224 9208\\n9074 6615\\n8283 920\\n189 2851\\n8453 4528\\n1422 241\\n7250 5657\\n3148 4000\\n7375 2890\\n891 3054\\n755 2834\\n5746 7652\\n666 3932\\n796 9366\\n6247 2784\\n4138 6731\\n8487 8955\\n5876 8173\\n8045 2037\\n1952 4332\\n3705 584\\n2461 4298\\n3815 989\\n159 6118\\n6998 8176\\n9456 9709\\n7049 6679\\n2169 605\\n5058 2778\\n8755 2677\\n3507 1500\\n625 8879\\n2016 6080\\n8733 1904\\n6276 612\\n3579 80\\n6671 7103\\n8706 3167\\n1456 1401\\n6113 7870\\n2720 556\\n636 1079\\n4636 865\\n6864 6507\\n1513 8305\\n9434 124\\n7006 9418\\n1559 7195\\n101 972\\n6734 1433\\n4728 8882\\n3197 2077\\n6229 5759\\n5947 6601\\n5430 4792\\n905 7243\\n5197 7085\\n1297 2717\\n9575 1733\\n3685 8161\\n4587 7412\\n8386 5410\\n7699 618\\n3103 4252\\n5075 1202\\n6921 3033\\n7806 2114\\n6596 3543\\n3535 9666\\n2359 4361\\n4454 6245\\n1161 1337\\n1630 413\\n4108 3312\\n9637 1445\\n8255 9800\\n3399 979\\n645 5500\\n9554 5646\\n3791 4414\\n3626 7617\\n3651 7742\\n1461 2769\\n5746 6351\\n2287 3205\\n1625 4409\\n5021 9485\\n2648 8496\\n6930 6588\\n2476 5346\\n8336 3869\\n9116 6187\\n7612 4987\\n8550 6053\\n3687 4061\\n8110 3326\\n2041 2979\\n1782 5997\\n5228 9213\\n4608 8666\\n9964 6084\\n9567 9244\\n2666 6818\\n7200 4863\\n703 9497\\n1707 3511\\n2620 1925\\n1628 6181\\n5170 9661\\n3193 7145\\n4801 9080\\n5938 7193\\n2082 6487\\n5714 9465\\n3920 5756\\n6535 5254\\n8126 87\\n686 9840\\n4356 1615\\n6023 8687\\n5601 1818\\n9002 3695\\n2291 7252\\n6166 6963\\n7551 7737\\n462 8792\\n9304 4130\\n4675 620\\n7735 3147\\n8259 325\\n7454 4164\\n5275 9477\\n2749 2247\\n722 7070\\n8531 3844\\n1406 9990\\n4039 8381\\n669 9480\\n3668 2658\\n8033 3345\\n5559 6078\\n6713 6220\\n4603 5284\\n2418 2355\\n6596 3755\\n2611 4505\\n8313 8291\\n6013 601\\n3395 2511\\n4897 5211\\n844 3366\\n3915 5047\\n7983 3102\\n5940 1633\\n9126 4591\\n9562 5666\\n8329 6780\\n7006 1433\\n7684 101\\n8154 4528\\n431 4304\\n9844 4050\\n9163 2246\\n5863 8676\\n7119 629\\n3077 6714\\n901 3844\\n1924 2079\\n4019 2849\\n5321 1412\\n4069 3965\\n4869 2710\\n8244 7356\\n1979 4521\\n5973 5108\\n9240 6968\\n3419 2753\\n5458 8962\\n4441 55\\n4742 8321\\n8900 7838\\n2959 1857\\n2121 3717\\n3158 9628\\n945 8563\\n8632 8309\\n8868 226\\n3425 9102\\n5312 473\\n6875 2265\\n3524 7112\\n1038 97\\n8950 8760\\n638 3125\\n3534 6734\\n3849 4639\\n1543 5694\\n1975 8429\\n5227 596\\n5808 5653\\n387 2925\\n172 8560\\n883 9826\\n7442 3480\\n5157 179\\n8647 9274\\n7142 8967\\n337 4233\\n9126 9267\\n4997 9789\\n9132 8644\\n9613 6247\\n3052 4117\\n2967 5932\\n9738 5809\\n2879 913\\n8041 7267\\n8842 9317\\n2694 4329\\n4440 3906\\n8343 4382\\n5555 9630\\n3111 4807\\n138 637\\n7734 4099\\n7596 3490\\n732 3930\\n7395 9420\\n427 9342\\n544 6658\\n2645 1951\\n6528 4607\\n3053 8055\\n2036 5430\\n838 4080\\n8808 8540\\n5743 7344\\n5475 3306\\n9777 3576\\n2187 4413\\n1086 2823\\n2597 5011\\n6688 219\\n8590 2846\\n9151 2456\\n739 798\\n408 2580\\n3656 2790\\n6999 8958\\n217 8914\\n4065 1961\\n142 7443\\n8095 2495\\n5988 6893\\n5702 4491\\n1453 4990\\n3310 8051\\n6755 2264\\n7856 3935\\n3249 3059\\n5015 4445\\n1024 5970\\n7177 1906\\n6128 249\\n8989 2223\\n8062 761\\n8767 3949\\n1326 933\\n1671 5156\\n6466 129\\n6461 5766\\n6456 9088\\n7942 9788\\n5313 6550\\n2369 6211\\n895 9292\\n843 8294\\n9097 5107\\n7404 6929\\n7772 3249\\n4415 1683\\n9246 6039\\n4337 936\\n9863 1624\\n4689 5922\\n1775 8791\\n1433 5058\\n2877 5384\\n6884 3089\\n5171 633\\n5922 8805\\n4936 7982\\n470 6996\\n712 7194\\n9938 3047\\n6511 8082\\n6640 1427\\n2967 3240\\n5865 8270\\n4242 8889\\n6869 1066\\n8619 5126\\n6996 1054\\n2122 539\\n7489 8542\\n5609 1069\\n1909 7380\\n5658 3198\\n804 581\\n8488 6391\\n2058 8409\\n9626 4797\\n4024 6338\\n346 7103\\n2681 7864\\n5446 1793\\n4877 60\\n32 4820\\n2619 826\\n2983 9691\\n423 7115\\n3497 3819\\n6343 8448\\n7766 2249\\n8051 3722\\n7362 5491\\n1321 47\\n9721 8906\\n2488 6109\\n789 1860\\n6161 4518\\n939 8867\\n2359 4222\\n8456 4576\\n9769 4675\\n8651 6689\\n9786 3044\\n6685 995\\n1698 6919\\n5346 4371\\n3827 2613\\n4722 7177\\n1404 8223\\n5778 7523\\n6175 3975\\n9787 3460\\n8729 2572\\n8258 6822\\n5666 5940\\n4985 7326\\n5874 6612\\n5287 6144\\n2848 7271\\n5834 7451\\n6524 6746\\n6809 9861\\n4714 6830\\n5972 8615\\n9102 3940\\n1222 6421\\n7880 3082\\n7168 903\\n560 405\\n951 8043\\n7080 9327\\n5763 7585\\n6243 1638\\n1860 4423\\n7034 5564\\n3385 5546\\n1168 2708\\n3062 6125\\n7278 7278\\n4182 8158\\n4455 6846\\n6539 1562\\n7088 1397\\n4986 3255\\n4484 4852\\n7258 3753\\n7836 4473\\n7290 4449\\n8331 497\\n5679 805\\n1361 5534\\n6803 3805\\n3642 2883\\n5092 1903\\n6408 9990\\n7402 2634\\n5605 2308\\n4673 6081\\n9285 4883\\n5281 4889\\n7616 5884\\n1045 487\\n9549 6183\\n3195 8645\\n3420 3949\\n2701 4231\\n737\\n2508 3484\\n673 669\\n3190 136\\n432 9653\\n8287 8390\\n5505 3706\\n7686 6351\\n5532 9449\\n662 4768\\n758 3261\\n5393 1058\\n9468 8640\\n3673 8116\\n3646 2647\\n1298 3451\\n860 5825\\n4336 8824\\n7276 5246\\n291 1210\\n2108 4232\\n5912 6477\\n424 2504\\n8609 2596\\n7773 9463\\n3456 4416\\n6096 9550\\n3103 1968\\n8830 8448\\n5204 9145\\n3944 9414\\n4276 9534\\n5734 8880\\n7598 9587\\n6391 5574\\n4605 8847\\n7067 9569\\n3860 6876\\n4068 4823\\n3876 721\\n8054 4879\\n2391 2991\\n9880 8831\\n6784 298\\n7537 4556\\n8610 2140\\n6740 5627\\n5544 918\\n589 3648\\n3317 2497\\n9235 7498\\n8092 4474\\n2750 9742\\n8925 3518\\n4436 374\\n4294 8328\\n1623 7274\\n7757 1978\\n7339 6474\\n2438 9586\\n5041 6183\\n3798 9680\\n8452 20\\n4637 6716\\n3699 4806\\n1813 1526\\n3362 9243\\n8588 7217\\n4717 2762\\n3200 5734\\n264 2624\\n6196 9475\\n770 7057\\n3278 9325\\n3168 4426\\n5616 8635\\n7714 4824\\n8186 8878\\n9032 4813\\n4246 800\\n9243 7568\\n5789 172\\n4904 2044\\n2147 8084\\n6254 4519\\n4719 4090\\n719 8657\\n2057 410\\n5609 1276\\n522 803\\n2951 5931\\n2517 7986\\n6478 487\\n7737 7754\\n8531 3069\\n5075 1490\\n7922 8985\\n9270 6144\\n1742 3738\\n5436 1741\\n8101 7204\\n7969 1651\\n3711 7597\\n304 9990\\n6730 6351\\n7869 8974\\n9255 9863\\n1095 7836\\n5575 8915\\n4336 8204\\n8208 268\\n3317 2838\\n321 4763\\n3089 6213\\n2078 8799\\n5479 499\\n4107 1398\\n8876 8641\\n3834 324\\n7639 4219\\n9792 261\\n8292 6459\\n1226 6135\\n2028 2260\\n175 4321\\n8529 1687\\n1854 4893\\n3807 6229\\n531 1486\\n9752 8632\\n9138 7723\\n1944 9390\\n3946 1387\\n2028 1074\\n986 3776\\n2560 2949\\n6966 25\\n365 932\\n8669 4133\\n7419 8302\\n9589 1699\\n5698 14\\n9646 3765\\n6953 1263\\n427 1253\\n7826 8962\\n9890 8898\\n4520 509\\n2249 5544\\n7651 6950\\n8831 1419\\n1794 5331\\n5183 4874\\n7512 9688\\n2914 4645\\n3905 6356\\n5873 8667\\n343 7751\\n7181 903\\n2212 8585\\n1563 6161\\n1513 5489\\n5136 6238\\n5301 4320\\n7303 4591\\n2924 4143\\n9768 9011\\n3362 7400\\n9616 8407\\n3737 3716\\n8002 2703\\n6083 9228\\n8236 1631\\n6225 4917\\n827 168\\n9981 5788\\n7135 100\\n423 525\\n6850 2023\\n6759 271\\n1730 9391\\n8572 7269\\n2779 5995\\n4384 5041\\n2426 8438\\n881 9617\\n388 4651\\n8709 6810\\n7901 3601\\n2953 6502\\n495 2432\\n4538 9783\\n354 7446\\n3646 3235\\n2387 1881\\n7258 7934\\n1075 4603\\n6583 5709\\n3635 9473\\n2170 3447\\n4032 6791\\n7550 9046\\n2196 1253\\n3102 2572\\n4505 6692\\n7394 158\\n5328 3717\\n728 2256\\n2180 6749\\n8760 6730\\n4007 2606\\n3303 9177\\n8973 8184\\n6367 4495\\n8971 5115\\n3417 7766\\n7426 3318\\n2994 6392\\n4362 4221\\n1436 3054\\n7530 7984\\n7212 6923\\n9155 4238\\n3833 3377\\n469 3320\\n2573 4657\\n8895 3672\\n6474 5824\\n5080 9036\\n4378 3081\\n3033 4598\\n2058 9531\\n1027 3798\\n4630 4336\\n3216 9257\\n9673 6196\\n7478 730\\n4564 4516\\n6721 1806\\n439 6589\\n7785 6095\\n3972 382\\n2817 700\\n2659 8491\\n1353 8374\\n3507 7907\\n4530 3758\\n4571 8108\\n7434 9459\\n3860 2320\\n3507 8025\\n564 4391\\n5624 7399\\n7095 118\\n8886 4738\\n1973 7004\\n4364 9178\\n850 9332\\n8648 9330\\n6045 4956\\n4361 4171\\n184 7821\\n3694 2490\\n1262 8023\\n4517 4054\\n3870 1651\\n4872 577\\n9067 9536\\n7640 5041\\n2418 5598\\n7177 4087\\n6849 3234\\n3246 9656\\n1773 462\\n1625 6991\\n6492 3562\\n8560 1290\\n915 7430\\n8333 9323\\n8279 9025\\n1336 8682\\n3001 572\\n6552 4372\\n3003 9460\\n5566 7970\\n2612 6633\\n7103 6987\\n7824 2979\\n6386 4358\\n6288 7856\\n9129 4788\\n4169 7630\\n2274 6477\\n6036 3341\\n7206 2951\\n9533 8100\\n3848 6557\\n3092 8153\\n9903 360\\n508 690\\n1236 4924\\n2051 4267\\n4147 8769\\n6426 9215\\n4376 2405\\n5131 8442\\n5817 3878\\n158 1175\\n6651 7567\\n910 1666\\n6055 1753\\n3446 8201\\n6442 2470\\n5763 4196\\n4843 5359\\n4249 5227\\n6000 7395\\n917 6508\\n3770 5238\\n8499 9718\\n3750 4440\\n5591 8381\\n2774 3595\\n8552 4549\\n2132 3036\\n6096 4020\\n3978 4547\\n9464 6654\\n4494 3279\\n1534 3010\\n4966 9495\\n1041 9160\\n6935 166\\n7367 5472\\n2390 3565\\n1184 128\\n8397 223\\n9477 7766\\n8079 9217\\n8011 7697\\n133 5020\\n7949 5766\\n2276 3161\\n6120 1389\\n5079 3608\\n7044 7736\\n4947 6608\\n6509 542\\n4438 430\\n1222 9014\\n6293 2536\\n5042 6444\\n3261 844\\n2189 1323\\n6330 9991\\n777 11\\n989 468\\n9352 8668\\n7134 4094\\n4694 965\\n8087 7683\\n9504 4145\\n4236 6556\\n3284 8872\\n710 655\\n7507 1677\\n4181 9107\\n4557 7110\\n6762 1956\\n4939 7723\\n889 4691\\n3710 671\\n2688 3188\\n9395 3210\\n6052 4700\\n3890 5491\\n2281 5916\\n843 4417\\n6711 768\\n2353 4322\\n5974 5017\\n8448 2433\\n6751 9968\\n9154 1878\\n5805 6482\\n4146 7046\\n562 5484\\n2481 9227\\n9454 3022\\n3612 6710\\n5789 6091\\n741 3469\\n3630 2904\\n9174 1936\\n5166 9790\\n6917 440\\n8051 9893\\n7050 4925\\n264 7696\\n5849 3939\\n7270 2312\\n1153 6895\\n4264 9380\\n1521 5295\\n4239 4297\\n9850 655\\n6702 9486\\n6783 5415\\n5748 6527\\n8287 1951\\n6558 795\\n4774 6405\\n5775 4466\\n7837 6241\\n6086 7803\\n9590 1272\\n8706 3705\\n6869 6047\\n133 2217\\n528 2896\\n5175 5519\\n8553 8221\\n3492 7532\\n7650 4065\\n1268 650\\n5518 6513\\n244 8081\\n8353 8931\\n8309 887\\n547 1788\\n1470 8585\\n70 4340\\n1899 9837\\n6079 4726\\n501 7219\\n4132 3768\\n5951 6547\\n666 9965\\n5563 5409\\n3027 313\\n3449 4710\\n748 4389\\n2173 5389\\n1864 3188\\n6978 5797\\n6021 1916\\n6049 9365\\n2746 4650\\n8692 2577\\n3360 5816\\n440 3365\\n4828 5780\\n2515 7251\\n9412 4559\\n5661 4333\\n7022 5209\\n38 362\\n1739 8572\\n8504 657\\n9251 2405\\n9275 6557\\n3624 8119\\n4638 5729\\n7850 9418\\n2272 2239\\n8933 2302\\n479 4606\\n2087 4771\\n8163 6755\\n4559 4961\\n1846 3170\\n475 9189\\n43 8715\\n2733 4968\\n8603 6157\\n6032 4102\\n4702 9882\\n4838 3732\\n3747 9426\\n3075 502\\n7285 2383\\n9067 5990\\n4683 7177\\n3776 6908\\n1716 2711\\n776 1845\\n7027 103\\n2774 9984\\n6873 7534\\n190 5049\\n8850 2440\\n8810 7503\\n6734 4029\\n2406 6397\\n2150 8385\\n1483 6381\\n5741 3318\\n6417 7268\\n343 2466\\n9925 3236\\n1251 608\\n4615 7530\\n2016 1381\\n5590 2247\\n2226 4943\\n9118 690\\n9221 968\\n1446 7253\\n7975 9079\\n3119 5261\\n281 3735\\n6882 9809\\n4492 8747\\n4683 3383\\n294 4957\\n6707 6626\\n841 5845\\n6496 1708\\n2241 5938\\n5948 5155\\n2541 1907\\n6785 8586\\n2190 7720\\n7276 240\\n8150 4914\\n3676 1717\\n4066 1312\\n2326 3912\\n8925 4844\\n1973 8670\\n1376 8310\\n8058 1190\\n7351 6298\\n8561 1006\\n6170 7835\\n6783 318\\n7575 3321\\n4527 4075\\n7919 9831\\n2543 7705\\n7088 1820\\n3117 4550\\n4223 2630\\n1887 198\\n6846 3930\\n3418 8670\\n9691 9260\\n1875 5486\\n9448 7376\\n7334 6115\\n6680 6886\\n7282 2586\\n9277 9861\\n3721 8978\\n7777 1325\\n8191 2620\\n4350 8131\\n2035 3628\\n776 3881\\n36 9773\\n4043 4787\\n6780 2831\\n3369 2440\\n6860 5846\\n9239 7834\\n9705 2218\\n4313 8173\\n4533 5302\\n1635 5187\\n2949 6298\\n5567 7302\\n9736 2745\\n6128 4651\\n5479 7331\\n1321 8411\\n8800 919\\n1603 3148\\n5750 6855\\n7459 4302\\n7915 1250\\n9493 2660\\n7846 2633\\n2914 1598\\n3745 8094\\n4088 2751\\n6266 8753\\n2882 309\\n2424 8691\\n9791 5669\\n6028 7014\\n195 7386\\n2974 2329\\n1934 546\\n7765 7529\\n496 7648\\n7797 3078\\n8630 9952\\n5399 8\\n7906 3468\\n9854 2618\\n7100 888\\n1600 8829\\n9612 9679\\n3225 3572\\n7559 9139\\n1245 2466\\n5462 8174\\n8428 3847\\n2510 4520\\n18 6586\\n7761 2155\\n5653 4004\\n4916 3541\\n7662 7966\\n2774 2721\\n7951 3501\\n5218 7250\\n184 1874\\n162 7177\\n6849 7274\\n6440 8771\\n2245 4250\\n2726 7184\\n5021 6160\\n5674 9853\\n9051 1892\\n1564 2946\\n3432 2678\\n497 5913\\n2487 4241\\n8910 8626\\n2127 8109\\n6526 6333\\n1400 1287\\n2101 7898\\n1812 2751\\n7387 416\\n8379 9115\\n294 3741\\n2694 3512\\n6963 9818\\n7506 2909\\n4139 6048\\n5114 3781\\n1963 3534\\n2515 5177\\n2188 6072\\n6778 3690\\n32 8406\\n6405 2135\\n3109 9780\\n7368 7165\\n5550 6765\\n6843 5006\\n4223 7908\\n6260 9961\\n9889 4385\\n7513 8832\\n7546 7594\\n259 5907\\n6797 4891\\n448 2570\\n4149 1320\\n5400 4139\\n9377 5336\\n7474 5858\\n2236 6814\\n4389 1628\\n686 6054\\n8990 7190\\n5136 9896\\n7681 6164\\n6852 9034\\n4165 6645\\n4902 2932\\n2066 6396\\n5715 2884\\n4132 2727\\n7836 367\\n5759 8699\\n8657 7070\\n406 5619\\n2729 1796\\n2030 994\\n8615 6883\\n4466 5147\\n7457 5766\\n5343 2051\\n2692 1335\\n6213 2549\\n1402 1337\\n9535 7172\\n5146 1684\\n43 2835\\n7779 650\\n3333 235\\n7441 171\\n8128 8764\\n8839 2877\\n9438 6282\\n3574 6551\\n2863 7815\\n3314 3885\\n8835 4672\\n2037 5525\\n7157 301\\n9506 1485\\n854 5004\\n6264 5745\\n5430 2912\\n6210 2779\\n6126 609\\n4354 8442\\n92 2063\\n7614 4993\\n7004 9147\\n2642 7773\\n1130 4950\\n2970 3473\\n9036 6128\\n1585 4923\\n1487 6181\\n7778 8027\\n2957 1249\\n897 771\\n6465 4793\\n2970 1358\\n4010 6141\\n2959 5610\\n2959 2585\\n1721 3988\\n8235 2043\\n7026 8545\\n5735 7528\\n8709 8337\\n4717 248\\n8844 9700\\n8617 8915\\n914\\n9230 5087\\n835 8311\\n3183 6304\\n9752 9371\\n152 9301\\n1831 5107\\n1899 2995\\n4666 3104\\n4025 5848\\n7605 1840\\n8263 1873\\n1748 3890\\n4501 5384\\n3032 8975\\n4536 433\\n5542 5606\\n3885 47\\n8192 47\\n1869 3675\\n588 702\\n2207 367\\n5194 6309\\n966 3829\\n9639 7653\\n2412 9661\\n3701 6754\\n2510 3560\\n5098 5990\\n6176 9479\\n9970 597\\n5801 8177\\n3970 7336\\n1020 7746\\n7026 5743\\n718 5771\\n6468 1161\\n4456 2883\\n684 7563\\n4274 3547\\n8829 8333\\n9473 6341\\n9071 9596\\n444 6094\\n9264 2406\\n9478 1859\\n9583 4315\\n8041 7810\\n4324 2173\\n9484 4585\\n3847 961\\n6743 4603\\n4446 3295\\n9982 6404\\n9113 24\\n8134 1231\\n8788 3525\\n9815 8474\\n1315 1732\\n4600 7877\\n3661 2286\\n7929 5077\\n990 2505\\n4273 4127\\n5756 2986\\n5266 4040\\n6875 469\\n7246 8055\\n685 2240\\n9369 782\\n4808 2259\\n6758 6468\\n5866 8843\\n5911 1013\\n5949 2379\\n4425 5929\\n5329 7495\\n6904 379\\n3515 6374\\n3388 3498\\n933 5068\\n9553 8707\\n9187 9188\\n5800 5116\\n6333 2644\\n7632 531\\n3717 4798\\n1040 1457\\n7452 3498\\n7688 1774\\n4800 2496\\n4463 2683\\n4370 1794\\n7819 7594\\n7854 3451\\n4767 9224\\n9796 34\\n9220 1404\\n54 9265\\n7703 5584\\n7527 787\\n1752 7124\\n6252 9026\\n1584 9582\\n3310 1383\\n6945 4680\\n3442 5090\\n3938 8380\\n7597 1834\\n1518 6056\\n6452 309\\n5868 3830\\n2451 254\\n8525 2577\\n7321 8235\\n3679 8405\\n2566 9481\\n3050 1402\\n8889 7798\\n1383 1172\\n3046 4469\\n4124 2629\\n9578 6622\\n2899 2206\\n8129 3374\\n8749 7855\\n5730 6447\\n8465 9132\\n8070 6029\\n5420 3961\\n9472 8555\\n2281 3773\\n9778 8847\\n4318 6742\\n3996 8905\\n7285 1333\\n8983 4214\\n4820 839\\n7591 1881\\n9998 9394\\n6902 4627\\n8172 7843\\n4738 5855\\n1092 19\\n3315 9731\\n5136 9810\\n2026 7803\\n6559 4781\\n5914 1541\\n4583 4896\\n9870 4040\\n3208 5552\\n676 9794\\n5155 9257\\n7988 2493\\n7860 7855\\n9902 6055\\n4218 8639\\n9318 6759\\n2911 4828\\n1592 8194\\n6932 2689\\n9517 4179\\n5687 8804\\n4049 5578\\n4905 6556\\n6845 4033\\n1393 2840\\n6968 5594\\n1816 3546\\n8553 1895\\n602 2835\\n6330 7336\\n2422 2615\\n753 6297\\n6792 7095\\n409 8278\\n2965 2652\\n358 8954\\n3277 6879\\n650 2180\\n5008 6352\\n1340 1564\\n4290 1022\\n2069 7936\\n6889 7488\\n4688 3099\\n4968 3135\\n6174 4780\\n6093 6260\\n2249 3228\\n557 9256\\n3568 956\\n8533 4244\\n3259 9934\\n6521 516\\n3766 4135\\n6812 3948\\n8239 6280\\n762 4795\\n6480 4823\\n8757 9044\\n7877 5695\\n6128 4463\\n9066 5693\\n5239 956\\n9262 5497\\n6299 9716\\n5750 3758\\n5311 418\\n7004 4418\\n2867 4993\\n2791 9752\\n8404 6354\\n5103 2104\\n9629 9120\\n1390 7390\\n8038 1229\\n3231 3337\\n8104 1910\\n9285 9567\\n4186 5873\\n5110 6484\\n4233 6922\\n2561 5871\\n8566 470\\n8092 2793\\n5042 9698\\n5155 9134\\n8197 1524\\n9568 6100\\n3212 7311\\n5980 3721\\n6771 9246\\n2035 7171\\n8194 9624\\n9906 8005\\n6728 5176\\n7767 6695\\n9293 2614\\n1537 5254\\n5079 3436\\n9814 4434\\n4574 3337\\n499 9334\\n363 4008\\n6619 948\\n3963 7891\\n8851 3966\\n226 4770\\n5431 4904\\n8307 9860\\n8588 8885\\n1715 2250\\n6745 4986\\n5059 6503\\n5399 7873\\n8917 5024\\n3420 2077\\n8404 5943\\n1074 2584\\n2349 8448\\n7442 6719\\n8105 471\\n4058 2245\\n4672 2568\\n4276 8214\\n3555 3323\\n8960 6869\\n2795 7097\\n1221 8776\\n834 231\\n5915 3360\\n9322 3586\\n5551 5304\\n7166 6505\\n1939 6645\\n5228 1847\\n1816 5422\\n8161 8255\\n7388 1182\\n7781 5344\\n6541 2569\\n4142 3918\\n1144 5259\\n216 2541\\n6756 4435\\n6143 8130\\n9425 6839\\n2082 3803\\n2737 4516\\n707 2456\\n1608 594\\n6694 3410\\n5799 5736\\n695 7216\\n3484 995\\n9428 5553\\n6415 3733\\n2831 5620\\n6374 2081\\n1631 1111\\n6830 8579\\n19 8252\\n2591 9812\\n6773 8526\\n2739 1098\\n1582 2411\\n2642 7978\\n7975 1892\\n7268 5036\\n2573 7839\\n7263 2471\\n6354 239\\n5962 271\\n5445 8761\\n7376 9736\\n7180 4183\\n7802 231\\n9464 1780\\n7624 906\\n6492 4265\\n857 863\\n8725 2200\\n2357 5141\\n9096 7713\\n4268 1358\\n3845 5451\\n7000 7388\\n1846 4032\\n8615 8173\\n8386 4695\\n3331 83\\n5177 8207\\n3097 8798\\n1571 7739\\n4520 8919\\n1384 2161\\n4653 1489\\n1279 6498\\n907 9499\\n6481 7043\\n8097 2538\\n2065 3304\\n4454 2931\\n6498 4699\\n4189 5193\\n3550 9266\\n5334 9830\\n7010 5817\\n5682 8464\\n4242 6735\\n3077 753\\n722 7024\\n103 3046\\n7049 805\\n1760 4950\\n3484 4837\\n97 4869\\n7301 8305\\n940 7698\\n281 1091\\n7900 9673\\n1551 4049\\n3289 1952\\n3180 6484\\n1372 7768\\n7691 5852\\n8803 6266\\n145 2714\\n3220 1260\\n4786 1272\\n5520 2821\\n7567 6651\\n8244 7576\\n575 4210\\n6490 1403\\n463 8506\\n1650 7476\\n4952 9784\\n2272 3316\\n2554 1906\\n1449 3732\\n5913 9552\\n964 6617\\n2547 8104\\n8889 7828\\n3517 7755\\n9190 9769\\n6408 8447\\n1992 830\\n5062 2339\\n6312 4889\\n5371 8787\\n5522 475\\n8406 6352\\n8125 7524\\n1006 9865\\n7386 4641\\n4776 5997\\n3829 2551\\n1619 7947\\n1006 1312\\n4835 9948\\n4199 9786\\n7159 3130\\n9814 2143\\n8367 335\\n1933 3852\\n9549 3987\\n2055 5751\\n5949 2433\\n6278 8005\\n6353 9427\\n2911 6415\\n5110 8908\\n5515 3758\\n5869 4053\\n3167 9322\\n800 9088\\n9152 9849\\n4375 4804\\n2320 1212\\n6914 4065\\n8538 7273\\n8028 9519\\n8220 847\\n6724 3211\\n5137 8218\\n6774 3215\\n9518 6632\\n9619 6455\\n2887 804\\n9767 7198\\n3640 7860\\n7673 1831\\n6736 4795\\n9654 5100\\n2576 1311\\n8967 5591\\n5269 6910\\n4292 1945\\n4750 5554\\n8545 7300\\n1993 9569\\n8819 4109\\n8704 7347\\n9990 3475\\n8423 5219\\n4544 6504\\n6467 2815\\n6492 260\\n2358 6652\\n6450 7939\\n7033 8744\\n8061 2404\\n9031 9478\\n1098 1583\\n519 7717\\n2033 1165\\n4850 791\\n1584 6266\\n2261 2209\\n3997 3016\\n5330 2929\\n4066 9774\\n772 1701\\n168 9458\\n3089 5759\\n2351 5142\\n5593 2872\\n3669 2800\\n4084 4625\\n1929 498\\n7218 1926\\n4097 3483\\n9943 4198\\n6963 1122\\n4175 8382\\n5190 8549\\n5019 8713\\n1660 6317\\n4792 9986\\n839 6514\\n9484 5415\\n8443 2941\\n7055 2692\\n1710 3175\\n7593 4499\\n3891 4987\\n8885 1878\\n3232 2510\\n3659 3911\\n54 7202\\n176 4909\\n3681 2347\\n288 492\\n3856 487\\n4046 315\\n3346 8657\\n8483 2694\\n338 1394\\n2693 462\\n4688 2248\\n9676 6842\\n983 5506\\n6389 2237\\n7859 8439\\n3170 5630\\n3085 8677\\n7367 9163\\n2860 5741\\n6682 3786\\n2560 4571\\n9843 1365\\n8259 353\\n5339 8123\\n3702 3508\\n973 2214\\n2647 3880\\n2865 8804\\n3262 623\\n1083 5663\\n8978 5460\\n6999 262\\n9422 6726\\n8477 517\\n4076 3347\\n1050 3366\\n8328 9570\\n1951 284\\n140 1325\\n9063 7614\\n5809 8188\\n5661 3112\\n6400 2590\\n7933 3111\\n9144 5109\\n3817 717\\n5950 9819\\n5726 5179\\n2558 2624\\n9265 5078\\n20 6359\\n8702 528\\n3239 482\\n1418 8335\\n8486 4365\\n1544 6710\\n9380 2976\\n7034 7383\\n5002 7739\\n6916 3652\\n2274 3178\\n7656 5598\\n3061 7347\\n364 7274\\n1736 6677\\n1036 9889\\n992 5427\\n4300 4989\\n5834 4119\\n2149 5436\\n3637 9949\\n7009 2091\\n3188 6731\\n7760 2714\\n3741 1969\\n2327 2892\\n9677 2599\\n2062 3725\\n5775 151\\n2038 4495\\n420 2117\\n7953 1312\\n7112 2674\\n5217 9427\\n3202 9231\\n7315 4740\\n6620 6531\\n4331 206\\n6795 1566\\n9245 7975\\n6143 2312\\n5903 7427\\n8641 8448\\n3720 9090\\n3664 7885\\n1445 5705\\n3584 7086\\n3101 9801\\n6874 7144\\n8726 8732\\n1567 2696\\n2178 3182\\n1610 1764\\n387 6548\\n4619 3916\\n5208 7485\\n3732 5100\\n7220 2161\\n7173 2292\\n8353 8325\\n171 6636\\n8446 651\\n8162 2859\\n5867 3634\\n2709 191\\n5343 1134\\n7052 6239\\n7507 8033\\n5212 4517\\n5315 9593\\n7022 8864\\n132 6758\\n8787 4988\\n308 9475\\n4894 1613\\n4915 8558\\n8980 2087\\n1824 8122\\n3524 3659\\n3520 8583\\n9548 9379\\n7544 4093\\n3261 6739\\n3138 8530\\n5559 1110\\n63 2032\\n8710 2380\\n5219 4741\\n8496 8926\\n2462 3673\\n1351 2295\\n1958 1614\\n2069 8833\\n5081 3005\\n4057 3107\\n3294 4383\\n4225 8567\\n2623 2335\\n1785 9271\\n5681 8318\\n3060 4640\\n8866 734\\n6239 5199\\n5302 9991\\n2369 151\\n4130 6262\\n6848 3613\\n1348 6844\\n5772 2228\\n6873 8171\\n2366 6382\\n102 6901\\n1649 7566\\n5422 6024\\n406 7866\\n4834 1757\\n194 9483\\n4732 6617\\n8156 1758\\n563 5731\\n196 5324\\n951 1074\\n2741 8254\\n4937 5913\\n4948 8430\\n3109 5300\\n853 3491\\n9605 289\\n9211 7931\\n7046 5354\\n4652 929\\n7931 5405\\n3951 6592\\n6616 935\\n6697 1857\\n2765 9274\\n3040 3660\\n6945 6479\\n2565 9587\\n3515 5705\\n7225 3181\\n1014 786\\n5360 1792\\n534 8318\\n3138 4363\\n7406 5641\\n679 302\\n8835 7569\\n3888 2947\\n5206 2130\\n3311 7482\\n5521 8225\\n8310 8162\\n9421 7294\\n1557 6162\\n1854 6807\\n2228 6106\\n9708 4392\\n1539 5094\\n6185 9311\\n4456 8561\\n3888 3343\\n2180 8592\\n9733 1840\\n6997 978\\n1105 3481\\n1360 366\\n745 6196\\n7002 5652\\n310 5488\\n865 6917\\n2404 8675\\n6781 9067\\n5015 264\\n5676 2439\\n2237 9110\\n1852 6596\\n6220 2313\\n8122 1586\\n5940 871\\n7951 5747\\n5553 3812\\n9432 1107\\n4173 1457\\n9270 7863\\n2421 3697\\n1178 8233\\n293 64\\n7127 536\\n9608 616\\n8817 2731\\n3895 5732\\n1256 5513\\n4709 9039\\n7461 7659\\n1317 7517\\n3266 2117\\n9567 9494\\n9590 7304\\n310 5186\\n8061 6307\\n2082 9603\\n4300 3610\\n3624 7781\\n8359 7250\\n6898 8401\\n4933 3866\\n1025 9391\\n8353 400\\n5492 2846\\n7145 2735\\n7951 653\\n457 3122\\n7044 9939\\n5116 1260\\n8388 5101\\n3192 2539\\n8616 6146\\n2062 1687\\n6891 2072\\n8140 5937\\n526 2818\\n820 3418\\n3677 4171\\n7166 9685\\n8784 7169\\n6144 9070\\n9243 8194\\n6801 4259\\n6240 4055\\n9404 2031\\n4819 3418\\n1806 1455\\n1652 1938\\n5395 1240\\n8261 9301\\n2829 2170\\n1396 7716\\n3873 8770\\n4390 6790\\n6055 5125\\n5858 4721\\n8615 8381\\n8284 7215\\n2755 666\\n3450 4247\\n9650 6937\\n8411 8655\\n6022 99\\n2627 4474\\n3696 6092\\n9568 5012\\n9428 4846\\n1315 840\\n8264 6086\\n7094 1783\\n4749 313\\n4048 6635\\n327 9138\\n4812 3072\\n8118 9397\\n3880 6511\\n6153 8902\\n1489 7729\\n7550 2934\\n2232 6531\\n1880 7636\\n4430 8468\\n7968 1567\\n404 5426\\n3780 3459\\n7170 5106\\n388 4088\\n1958 1677\\n2119 6697\\n3678 7175\\n4678 137\\n7830 5131\\n4599 7668\\n5199 2721\\n4641 7513\\n3527 382\\n4240 4014\\n1927 5342\\n1405 6862\\n1615 4726\\n2112 7620\\n5094 729\\n9780 1081\\n10 9831\\n1975 3443\\n3366 6989\\n4808 885\\n6540 8416\\n8342 3527\\n7858 7918\\n9834 4829\\n6349 9119\\n1635 3295\\n3917 8453\\n4121 565\\n4064 9242\\n6326 5242\\n5450 9809\\n7122 2115\\n37 5235\\n9590 8401\\n794 9805\\n5045 9895\\n4455 8552\\n8180 1222\\n7737 7242\\n2016 6432\\n3439 6605\\n7528 1702\\n2213 6960\\n4857 2285\\n7071 6030\\n4396 9659\\n7637 874\\n8294 3965\\n1495 1630\\n4135 1320\\n1470 2556\\n3154 3301\\n7062 5542\\n9607 8222\\n2150 5984\\n132 885\\n7269 7129\\n8031 1847\\n6704 2120\\n9159 157\\n9229 6295\\n9377 3260\\n2401 2335\\n8269 1479\\n1542 2331\\n8623 6104\\n8558 6493\\n7853 5805\\n6662 9858\\n610 967\\n7843 4383\\n7567 9302\\n1601 3268\\n9422 8745\\n7909 6715\\n1696 498\\n2047 1591\\n6519 9552\\n6767 6605\\n3218 4425\\n1084 1757\\n748 5583\\n7714 1450\\n1767 3193\\n336 3066\\n9860 5514\\n38 3517\\n4369 5123\\n9481 7688\\n3171 7667\\n6300 7798\\n3094 2964\\n6872 3312\\n662 8816\\n2707 2909\\n5311 1839\\n6688 1565\\n6197 7198\\n8101 763\\n377\\n5059 3546\\n7779 3511\\n4570 7159\\n5308 8224\\n8359 7487\\n3516 4602\\n5676 6989\\n2744 5309\\n6596 3026\\n3789 5938\\n7417 503\\n3444 7120\\n1753 9154\\n3849 5305\\n5163 2897\\n8456 54\\n6255 6959\\n5318 6169\\n7391 3600\\n3839 2224\\n2282 5687\\n900 7520\\n7112 4585\\n156 6154\\n7636 5460\\n3014 103\\n1186 3988\\n1926 4747\\n8533 3850\\n3570 8461\\n6343 8018\\n2496 7386\\n3400 5567\\n1903 3902\\n4640 4234\\n8596 353\\n6236 9057\\n1183 7089\\n743 9137\\n9504 4863\\n8098 6522\\n4979 8752\\n3853 2957\\n7090 9264\\n6649 4836\\n4462 9739\\n3124 8332\\n4055 3940\\n6119 2527\\n5302 5370\\n9612 3253\\n6091 47\\n4139 8891\\n1538 129\\n5532 359\\n3753 6919\\n8637 9022\\n2008 9608\\n4788 8971\\n5884 5284\\n8207 650\\n8014 7205\\n6259 9193\\n6473 3430\\n8584 1472\\n4805 4438\\n1962 5957\\n3199 7389\\n6126 9969\\n4154 7634\\n3913 4667\\n8152 831\\n3718 9406\\n2021 1330\\n3605 8590\\n6807 880\\n9084 9975\\n1050 676\\n1421 7916\\n6159 1855\\n5309 7296\\n1909 623\\n7084 9621\\n1305 3418\\n6839 6335\\n8108 8515\\n6228 931\\n7562 4755\\n9450 9208\\n3394 6212\\n7241 2571\\n1857 4039\\n9274 1992\\n1610 8869\\n4542 2700\\n6022 8925\\n3885 2028\\n687 2529\\n9980 4734\\n5231 9442\\n5915 4634\\n4569 599\\n7967 3206\\n4221 2982\\n9401 4004\\n8512 8633\\n519 4288\\n4483 6510\\n1448 9794\\n4666 504\\n8403 1653\\n4904 4475\\n9552 9625\\n6316 7919\\n7860 8176\\n7525 9480\\n4180 6435\\n7803 4741\\n4531 2345\\n9301 176\\n6311 7521\\n6041 5901\\n2652 7216\\n6290 6545\\n7955 8316\\n7210 2184\\n7226 2805\\n7380 6079\\n3299 1364\\n8445 3864\\n7178 2457\\n5149 5478\\n7435 6204\\n5394 9225\\n6305 5304\\n8721 5270\\n435 3749\\n7598 2107\\n9682 7818\\n9798 1574\\n6891 1634\\n3696 59\\n5952 6158\\n8691 4139\\n5214 5592\\n7630 9963\\n7585 1170\\n5483 9876\\n3901 3609\\n2871 1021\\n146 8851\\n1255 6935\\n5035 1126\\n8357 2063\\n824 1084\\n2413 8778\\n2957 1793\\n1083 1933\\n3114 2634\\n9132 6114\\n4730 2226\\n6681 8746\\n4296 9087\\n4821 5834\\n8763 9567\\n4288 4117\\n8786 9580\\n3488 8909\\n302 7566\\n8246 2090\\n1113 8836\\n8782 2772\\n1634 662\\n3013 6844\\n165 4035\\n5698 4765\\n6894 3619\\n1071 4689\\n4791 2363\\n4239 219\\n8962 8313\\n3841 4738\\n7418 8988\\n8632 5113\\n7743 1190\\n1739 6151\\n5716 2306\\n7221 1111\\n1671 2774\\n4543 455\\n3797 5911\\n1522 1215\\n128 1868\\n4989 1034\\n3303 3912\\n3364 4511\\n7356 8723\\n3575 4280\\n357 2267\\n3904 6374\\n7100 6713\\n36 8149\\n3892 2705\\n1564 226\\n732 1368\\n6051 3\\n9533 3771\\n4301 9674\\n7395 225\\n8731 3802\\n4034 8964\\n8528 1119\\n2293 3959\\n566 927\\n5786 3849\\n208 8854\\n2234 4885\\n6977 7319\\n5048 6710\\n9225 7051\\n4702 9\\n9723 1604\\n7714 1027\\n508 6128\\n9745 4509\\n6135 1766\\n9425 4824\\n230 9485\\n6974 3165\\n9319 7574\\n8455 8143\\n1884 9250\\n3470 7441\\n3889 7196\\n9126 7956\\n2917 4395\\n4098 189\\n519 1061\\n4588 2634\\n4737 1099\\n3674 9561\\n3087 7633\\n8336 1763\\n4841 2397\\n2854 7151\\n4197 1245\\n7734 775\\n2000 4283\\n7587 2804\\n2155 6995\\n8105 8055\\n6273 2017\\n9206 466\\n2971 1726\\n8434 1238\\n8391 9225\\n5601 9654\\n4006 6252\\n3227 3735\\n9642 9176\\n6721 1803\\n7573 1315\\n531 5478\\n2346 2263\\n7422 7510\\n5653 655\\n1878 6251\\n783 2026\\n1429 2187\\n6691 8016\\n1601 1558\\n743 6044\\n367 6989\\n4047 9116\\n2345 9474\\n447 1221\\n3979 9188\\n8498 2715\\n6219 9370\\n2690 3273\\n1989 9479\\n6744 1627\\n2613 7437\\n8873 1764\\n2839 9460\\n2377 4963\\n7713 3040\\n5502 5461\\n6259 5710\\n4293 5852\\n8894 8534\\n7572 2494\\n6674 8706\\n8915 9863\\n4581 709\\n9029 4289\\n8684 4377\\n3059 7278\\n9513 7715\\n9089 4360\\n9913 1994\\n4260 3541\\n2072 235\\n8817 6701\\n927 9729\\n9340 3649\\n2645 8667\\n2935 4816\\n5323 4649\\n1304 2757\\n2152 5057\\n856 1464\\n7848 5390\\n9223 8477\\n9278 1945\\n9531 4388\\n4286 1828\\n4507 9694\\n6903 6667\\n6150 1992\\n4198 8454\\n6611 6592\\n5254 5221\\n5983 6748\\n2949 8933\\n4207 9080\\n7233 9450\\n3257 2063\\n471 8005\\n3962 6392\\n470 2688\\n9588 1335\\n1851 1303\\n1690 4662\\n5246 2068\\n8702 8866\\n1843 4655\\n7935 9597\\n6028 4040\\n5489 2139\\n7807 6769\\n8506 1790\\n8667 6482\\n3887 199\\n2443 60\\n9395 7162\\n746 7019\\n5882 7953\\n8864 224\\n8930 3858\\n4035 6665\\n2067 5904\\n6808 207\\n1159 143\\n1556 3559\\n2021 702\\n8514 5391\\n2291 267\\n3105 831\\n7788 917\\n3877 7452\\n8113 4915\\n4359 8472\\n1379 244\\n2357 8127\\n5547 9811\\n8340 8755\\n1316 1297\\n9111 9954\\n7071 2650\\n7558 6398\\n1859 1395\\n5857 3358\\n5924 1417\\n985 7925\\n7953 9736\\n1769 7313\\n815\\n6426 5825\\n8492 6588\\n5547 8388\\n2548 790\\n8676 8777\\n5628 2623\\n7024 3771\\n4603 3600\\n1851 9975\\n6480 6544\\n3963 6259\\n9889 4880\\n5379 6988\\n6928 7909\\n1544 6547\\n8215 8883\\n8384 2061\\n168 30\\n9380 7669\\n5180 9771\\n9865 1907\\n7536 2220\\n6315 2338\\n2329 1288\\n789 4828\\n5895 7178\\n1042 9094\\n7818 6883\\n9004 7659\\n8139 8101\\n3736 5814\\n139 1607\\n6358 7525\\n6828 415\\n2342 4363\\n8651 371\\n2726 1020\\n384 8743\\n9599 1652\\n7114 1012\\n8319 6167\\n3277 6319\\n1089 3064\\n7976 4088\\n1968 7907\\n7318 8478\\n5326 2725\\n5042 4649\\n6745 6441\\n9936 1528\\n5769 7182\\n6307 2800\\n2452 1935\\n7279 7642\\n4165 5721\\n2505 2492\\n561 3736\\n5292 5893\\n9565 3352\\n8142 6236\\n9732 2264\\n526 8301\\n2012 9491\\n2828 3669\\n2516 6098\\n7884 2107\\n7003 3260\\n5088 3842\\n4149 7394\\n8601 9743\\n7446 5711\\n4540 8299\\n4975 724\\n8527 3334\\n4076 3732\\n4734 4702\\n6018 2433\\n1448 5924\\n6034 4829\\n5117 8204\\n8111 5528\\n6252 4272\\n8414 3186\\n9344 2885\\n4286 6747\\n3230 5257\\n6220 482\\n3642 5213\\n9310 1704\\n8776 8068\\n5256 9230\\n154 8700\\n8304 7402\\n7430 7937\\n824 4879\\n8455 7923\\n9365 5996\\n3171 8268\\n712 7532\\n1565 9326\\n7205 3881\\n2493 4615\\n2891 298\\n4620 9337\\n4194 8578\\n9953 9662\\n1204 6926\\n5857 2964\\n9126 4341\\n7264 9565\\n8648 9416\\n458 7209\\n5880 3517\\n9845 8936\\n6069 4032\\n5502 555\\n125 4411\\n519 5340\\n5846 38\\n6565 8181\\n138 4067\\n226 2867\\n1819 7116\\n7591 837\\n704 6638\\n6560 2977\\n2997 4451\\n3494 6128\\n932 2248\\n355 9406\\n3772 4725\\n5933 725\\n3784 7451\\n3780 3307\\n1056 2194\\n51 1974\\n5858 9247\\n7637 8598\\n120 3178\\n3440 411\\n8283 4181\\n119 7014\\n401 8798\\n8069 3897\\n4711 1691\\n4022 9436\\n9350 9370\\n9691 3057\\n6409 1561\\n1355 3463\\n1348 3990\\n5041 8042\\n3122 4060\\n3504 1309\\n3620 3890\\n1564 4820\\n6988 6628\\n6057 9119\\n4266 717\\n3417 5107\\n1972 556\\n6667 4820\\n4662 8563\\n5138 7068\\n3741 1721\\n7588 4286\\n5657 4323\\n8132 4777\\n942 7607\\n1353 8973\\n4119 6075\\n7738 4366\\n7020 5789\\n7489 4371\\n818 9827\\n1877 8045\\n4653 7963\\n1511 638\\n7373 2336\\n9713 9101\\n2517 2823\\n7972 1785\\n5307 6493\\n6805 3285\\n5564 3513\\n8901 6134\\n7669 4178\\n2029 9274\\n5678 8885\\n2130 6742\\n4414 8910\\n313 9668\\n8040 5218\\n3153 8195\\n5644 7194\\n8666 825\\n3628 9696\\n525 3684\\n8333 8003\\n5657 6586\\n9195 7403\\n2952 3021\\n2608 4854\\n822 1577\\n3970 6641\\n4679 8572\\n7750 923\\n6266 325\\n8767 460\\n7210 9716\\n9078 3659\\n6210 3580\\n5481 2150\\n5676 1543\\n4789 1750\\n9723 3957\\n8558 5324\\n5158 1913\\n9483 5294\\n4552 6484\\n3395 8750\\n6534 300\\n4739 8760\\n3360 987\\n5083 838\\n6598 884\\n7276 3841\\n4300 388\\n8386 2740\\n202 1982\\n8391 7216\\n3318 907\\n352 975\\n282 997\\n4146 633\\n7372 1771\\n6099 1213\\n7253 4122\\n8474 4033\\n6584 6501\\n7930 5908\\n9932 5350\\n2975 1232\\n821 2905\\n4314 889\\n1841 838\\n5701 6980\\n68 9235\\n7687 4807\\n9362 4091\\n8216 7262\\n3698 6062\\n916 6266\\n9438 1208\\n6295 4155\\n9012 1231\\n8038 1279\\n6950 7806\\n180 9030\\n1419 9512\\n5663 1594\\n9503 4363\\n363 6636\\n7393 9301\\n3222 2885\\n7533 5449\\n9875 3979\\n456 2266\\n4357 7682\\n2903 5326\\n4199 2116\\n1338 887\\n7562 3441\\n1179 114\\n5227 9936\\n5327 3496\\n586 3727\\n5578 6299\\n2987 7645\\n9113 4078\\n5806 8092\\n6652 3692\\n6881 3871\\n8864 7042\\n4930 4410\\n8160 2428\\n549 5250\\n6972 8675\\n3933 1654\\n6605 3837\\n7290 5374\\n3065 7003\\n456 2879\\n2756 7106\\n8958 8644\\n1503 6983\\n8415 7062\\n3455 1493\\n5562 1736\\n1691 8553\\n1867 9209\\n3105 37\\n3434 1498\\n2124 1342\\n7389 5610\\n7066 5993\\n9671 5597\\n5929 9543\\n2622 3125\\n8716 8154\\n9672 1577\\n4971 8297\\n5679 6544\\n8221 776\\n4515 1963\\n9296 3153\\n5330 5605\\n3125 501\\n7496 7198\\n3541 1169\\n5429 9497\\n9710 7986\\n5656 6773\\n1532 1278\\n9241 9786\\n5101 3548\\n4612 7590\\n3725 1143\\n7481 4851\\n7657 8408\\n3023 9572\\n768 9613\\n978 8424\\n6935 4953\\n1390 1749\\n3983 5771\\n3102 6974\\n8972 7955\\n7176 3296\\n6596 3242\\n5697 9906\\n2316 5662\\n9549 851\\n2521 23\\n3016 8087\\n1217 8664\\n6314 7163\\n8911 7671\\n3064 8225\\n4783 4484\\n4291 5202\\n6522 9278\\n2327 8822\\n7393 4227\\n1273 850\\n2509 5753\\n3428 2475\\n8835 9772\\n5543 2270\\n7497 8052\\n9206 2954\\n3431 6723\\n7461 905\\n1295 9224\\n5459 7491\\n7577 8905\\n929 9471\\n5843 4808\\n586 2049\\n3657 110\\n4757 8367\\n5097 6650\\n5074 3945\\n8591 9897\\n2145 4970\\n9424 4943\\n6526 429\\n254 5876\\n7009 8649\\n7626 2692\\n5007 5029\\n1155 1190\\n8839 9785\\n360 1498\\n9839 4796\\n6793 9321\\n8245 2992\\n8309 9480\\n175 5005\\n4011 9055\\n1896 7763\\n1189 1151\\n6031 9239\\n4101 771\\n649 9685\\n4407 1218\\n886 9395\\n7373 2023\\n31 3297\\n2985 4779\\n8431 6626\\n3076 5684\\n1658 8170\\n543 9859\\n9802 5204\\n5487 5324\\n3981 6321\\n3790 6798\\n8103 5703\\n2993 8638\\n3524 5913\\n6963 4996\\n2343 3951\\n9663 2444\\n9567 8925\\n2380 53\\n1802 9268\\n885 6858\\n288 5361\\n352 8776\\n8142 4734\\n6652 3163\\n5987 703\\n9325 1779\\n7955 7071\\n2733 177\\n9958 8746\\n1188 1085\\n6644 9794\\n7568 1929\\n4267 7380\\n5760 6425\\n1082 8929\\n9977 5377\\n3766 2374\\n933 2402\\n7868 1979\\n1894 124\\n2993 4718\\n5555 9318\\n4981 3607\\n335 8930\\n2053 666\\n2926 1728\\n7186 8319\\n6416 7113\\n302 9455\\n8131 4954\\n5173 5343\\n5544 6862\\n6123 3076\\n7906 4156\\n5556 478\\n5123 7119\\n1468 4958\\n5005 7262\\n8551 4510\\n5828 2147\\n3559 8077\\n7940 978\\n9586 7106\\n9463 6500\\n4772 1593\\n3711 6544\\n5389 2728\\n2522 1914\\n4680 9295\\n2167 4407\\n5127 1589\\n7088 3602\\n3220 4129\\n5888 5322\\n9735 6693\\n41 2856\\n8126 3912\\n4236 7545\\n2843 8598\\n1928 2155\\n1657 4152\\n8893 7585\\n3502 2098\\n3630 7463\\n2050 2456\\n2080 6030\\n8316 4202\\n6231 4147\\n5614 6161\\n7160 992\\n8114 4519\\n7467 8653\\n5039 1316\\n3374 5799\\n3483 2364\\n8069 2693\\n2279 8699\\n4637 326\\n3480 1563\\n6356 1949\\n9843 237\\n5888 5026\\n4362 1485\\n8216 8110\\n2889 6320\\n2718 674\\n6734 3872\\n9786 1081\\n2596 7826\\n5584 9511\\n8713 3887\\n3049 8101\\n1250 3579\\n1758 6628\\n4388 6130\\n757 5598\\n7802 1276\\n9043 4286\\n2000 3171\\n1301 6274\\n1145 3843\\n7877 2603\\n7938 4643\\n3002 2649\\n5288 1805\\n1069 9616\\n616 2216\\n4857 1832\\n9954 9950\\n6905 1835\\n9351 5608\\n7899 6472\\n9994 7703\\n425 6824\\n9475 2992\\n5828 5592\\n2730 3663\\n8294 9748\\n9531 1687\\n2395 5550\\n834 7249\\n641 5354\\n4723 233\\n148 7557\\n2088 7144\\n7159 9534\\n1124 4884\\n5072 5213\\n7985 9199\\n1249 5719\\n4895 5374\\n2468 3408\\n9051 8141\\n7562 410\\n342 22\\n9856 7017\\n5212 8128\\n5339 3925\\n2586 7550\\n3825 796\\n3229 1469\\n2304 1018\\n2695 34\\n7105 8166\\n4174 2496\\n2921 2092\\n1949 8213\\n8929 9604\\n3020 8369\\n8586 465\\n9207 1850\\n5781 8251\\n9253 2267\\n7909 8890\\n4456 1005\\n8301 1172\\n6778 4346\\n2128 2538\\n9614 7972\\n8401 729\\n9189 2357\\n952 353\\n5876 688\\n4026 1020\\n9378 1000\\n7285 7063\\n8322 5766\\n1916 5651\\n9180 9401\\n7885 2953\\n5088 1169\\n8499 7233\\n7062 2547\\n3799 9744\\n7094 3789\\n1891 3032\\n5956 5316\\n5642 8583\\n4694 8556\\n8570 2161\\n6457 4297\\n7493 7758\\n3969 4280\\n498 2419\\n8706 2720\\n604 6613\\n8171 1125\\n4520 8013\\n6523 9537\\n6798 1314\\n1328 6950\\n4869 9266\\n2049 4818\\n6451 3483\\n4032 3330\\n5215 2403\\n1022 9237\\n3388 7566\\n9519 5906\\n8100 1399\\n2453 3142\\n3909 3475\\n807 1328\\n6543 5154\\n3286 6501\\n236 1258\\n544 9032\\n2893 3032\\n5284 4600\\n354 9689\\n4490 7432\\n2037 9325\\n6557 7766\\n3426 4371\\n6566 6964\\n617 9100\\n5755 1052\\n5027 7545\\n9556 4586\\n5217 1996\\n3077 1626\\n9443 7502\\n3964 3806\\n317 8349\\n6001 6684\\n3212 4750\\n9924 8154\\n9106 1939\\n3895 5460\\n5073 3622\\n270 5725\\n313 265\\n1745 9060\\n5501 3708\\n2089 8774\\n6844 9543\\n2173 5304\\n2494 519\\n3526 3545\\n4386 3190\\n9349 9056\\n1401 5253\\n6531 9874\\n7829 8125\\n9833 2953\\n4650 1314\\n1207 8390\\n1775 5507\\n3897 9028\\n5742 6359\\n4764 6235\\n4286 7993\\n8242 1513\\n7807 1963\\n4933 2930\\n8100 4593\\n1879 9367\\n471 7579\\n2037 2340\\n1763 3683\\n7591 59\\n5188 3402\\n2127 3148\\n4836 9085\\n6703 396\\n4818 590\\n3215 1452\\n264 9749\\n2424 4413\\n6957 8529\\n2511 909\\n4250 6684\\n9780 561\\n3757 2285\\n9085 5856\\n7463 2960\\n7747 7537\\n7374 4333\\n1106 2483\\n9846 3612\\n9967 9751\\n1160 790\\n536 834\\n702 8783\\n1081 6563\\n1908 240\\n8960 2293\\n5741 2956\\n6615 8129\\n429 1467\\n9910 4068\\n2419 8906\\n8498 6861\\n3964 9935\\n6366 6169\\n9187 5745\\n1182 8505\\n5599 7621\\n4062 975\\n4651 4385\\n3756 4164\\n6823 598\\n5429 7199\\n3826 3920\\n6610 8095\\n1934 4274\\n766 4668\\n6423 7556\\n144 3310\\n4934 906\\n4481 9167\\n6700 6684\\n1059 1912\\n7181 9651\\n5854 1894\\n6367 3662\\n5219 4449\\n7242 4812\\n9322 7546\\n1683 5623\\n2654 5504\\n2386 8281\\n8588 6362\\n3084 267\\n3114 6782\\n9294 189\\n6169 2847\\n864 5757\\n3581 8694\\n2572 1989\\n8249 2638\\n2662 1775\\n6197 942\\n3260 3044\\n3894 2317\\n9250 9573\\n2837 3111\\n1776 7834\\n3543 9769\\n1062 9104\\n12 1128\\n477 9108\\n5137 3789\\n1847 8515\\n1009 5548\\n8633 8242\\n1166 2142\\n9292 3460\\n2565 9497\\n6804 5563\\n564 2992\\n4794 2355\\n3147 4925\\n3907 9704\\n5234 5677\\n6860 9211\\n5789 7487\\n4289 4058\\n5002 2034\\n6410 3977\\n6507 6285\\n1682 4935\\n9927 9430\\n5813 1870\\n7903 5066\\n5891 802\\n8057 499\\n5466 8778\\n3798 440\\n6554 1387\\n8203 5691\\n2263 6804\\n3844 6344\\n3129 8728\\n1940 6645\\n8167 2365\\n7866 3592\\n7335 6365\\n9930 3265\\n5354 1709\\n6121 2657\\n670 230\\n5182 1860\\n3767 9355\\n9111 9783\\n5831 6199\\n402 6442\\n1854 5233\\n8195 3739\\n1612 2983\\n7143 2682\\n3584 5565\\n4166 2606\\n967 1384\\n1952 7247\\n5220 6980\\n2784 4816\\n452\\n4248 6152\\n4416 8500\\n8443 6874\\n5944 5772\\n4814 7649\\n5386 9397\\n3310 4123\\n3781 439\\n3249 2636\\n7237 1790\\n5650 9369\\n5965 5776\\n9261 901\\n3140 7407\\n4776 5679\\n2535 7069\\n4910 91\\n5918 5481\\n1887 2170\\n1383 9813\\n4498 2139\\n1654 9799\\n7004 8883\\n9234 6918\\n8829 4399\\n7462 4274\\n743 9158\\n1820 750\\n1687 1766\\n2922 1332\\n6670 2020\\n7471 3029\\n4100 1343\\n5609 1503\\n4671 3324\\n9139 5060\\n6448 5932\\n9847 8178\\n6453 6926\\n9928 2580\\n6501 1140\\n9097 9690\\n2467 1563\\n3498 4074\\n8771 5903\\n4794 5305\\n560 1015\\n1664 1101\\n229 9085\\n6603 2437\\n7546 8484\\n7548 4710\\n6099 1084\\n6597 5630\\n3056 3464\\n9253 1475\\n929 2581\\n9124 8668\\n148 7579\\n6381 6602\\n8001 8892\\n1287 85\\n8548 6057\\n7376 710\\n3014 1431\\n3300 312\\n225 7655\\n7329 9039\\n3438 8372\\n1082 6155\\n3156 6775\\n2774 338\\n6179 2151\\n6292 6988\\n7705 1223\\n1966 4396\\n4855 4691\\n5704 8609\\n362 4528\\n4491 2528\\n8108 9376\\n456 3748\\n5018 4218\\n8266 5460\\n8804 8020\\n9200 9134\\n4360 1417\\n9025 3855\\n6808 8863\\n6886 9699\\n8322 2019\\n9557 5548\\n8769 2741\\n249 9323\\n7764 6027\\n8602 8806\\n7908 7311\\n5609 7721\\n2794 7028\\n3864 4008\\n7367 9895\\n5191 3841\\n7977 7966\\n9187 8622\\n5253 8597\\n1836 282\\n4238 4269\\n1086 9439\\n5305 7877\\n2987 9782\\n398 2988\\n5165 9170\\n1717 1578\\n5039 3497\\n2237 1162\\n2200 6730\\n8171 7212\\n907 7609\\n9917 9343\\n4271 7220\\n1637 6823\\n3908 8105\\n4866 7019\\n9475 5546\\n9668 1924\\n9557 2321\\n7090 6822\\n4068 8627\\n926 9971\\n6283 3678\\n5185 8093\\n8129 1326\\n907 2670\\n4993 2666\\n4496 7573\\n953 909\\n1827 1000\\n6937 8193\\n4300 7615\\n1090 2612\\n8826 3095\\n6243 173\\n496 4482\\n9053 8008\\n2874 8907\\n4590 7566\\n8466 1667\\n4239 4078\\n5866 5530\\n8674 8817\\n3055 9421\\n1606 5916\\n478 9002\\n2881 9435\\n8136 2134\\n4441 9555\\n4519 7943\\n9729 9906\\n231 710\\n7749 5589\\n6364 4034\\n3293 9347\\n6517 571\\n7732 3658\\n8543 6735\\n3710 5016\\n2170 6123\\n9605 5297\\n198 4006\\n8635 5379\\n9389 5841\\n2453 9971\\n5140 8574\\n1225 6199\\n2645 9655\\n3308 8327\\n9965 1141\\n2720 6471\\n9618 2371\\n8578 8908\\n254 3604\\n843 5281\\n2409 7543\\n6950 9155\\n4904 543\\n6467 3762\\n6762 3117\\n6168 1877\\n7939 6588\\n2853 8196\\n4794 7890\\n8214 982\\n6255 438\\n8820 4560\\n6890 3767\\n6053 7665\\n5056 9841\\n2394 4095\\n2606 3577\\n8679 459\\n2195 5648\\n1064 2181\\n3633 2191\\n8169 3953\\n8726 4094\\n9955 3711\\n9189 2358\\n6123 7935\\n6757 9470\\n3736 6532\\n2651 3282\\n2049 4370\\n3251 6520\\n2522 6213\\n3062 6602\\n8107 1472\\n2858 8719\\n1904 5002\\n2725 4999\\n915 2708\\n8053 3209\\n9918 5438\\n5658 6486\\n2155 3468\\n8152 1840\\n4808 5745\\n3103 2589\\n9316 6941\\n9439 960\\n6078 9382\\n6359 3394\\n2564 4512\\n7673 1084\\n9152 8078\\n8833 1004\\n9227 2439\\n1607 5659\\n6384 8798\\n5238 330\\n9406 6570\\n5122 2422\\n3592 9680\\n5700 5150\\n1026 113\\n3509 9845\\n6491 7530\\n789 7495\\n6627 9495\\n1329 5620\\n1184 8425\\n7068 3949\\n7691 3553\\n6723 3361\\n2473 9797\\n4102 2304\\n797 4005\\n1303 3889\\n3429 2244\\n7534 613\\n5237 4765\\n8620 6495\\n7756 6432\\n9094 7545\\n1944 7530\\n6650 1626\\n3119 3841\\n181 1147\\n3049 9757\\n5071 3617\\n8209 6104\\n7561 6456\\n387 8226\\n821 1229\\n8067 1790\\n1114 2869\\n5899 7062\\n1430 6033\\n3764 7989\\n4713 5980\\n1631 439\\n1276 5741\\n7807 4358\\n2306 7178\\n3365 2116\\n4656 6885\\n7571 7130\\n9099 4298\\n8778 3301\\n5959 6644\\n1147 944\\n3966 6517\\n7777 429\\n4701 1030\\n1950 4006\\n9604 4591\\n4901 4414\\n8149 3841\\n5654 3805\\n6581 4943\\n8699 4848\\n3266 596\\n2282 9111\\n7453 7354\\n4764 5424\\n63 21\\n8254 5011\\n6231 4839\\n712 6204\\n9899 6575\\n1419 6717\\n5354 7880\\n3102 971\\n2138 5713\\n95 8140\\n4005 3511\\n5339 1612\\n1993 7980\\n3318 3202\\n6044 4373\\n4764 5754\\n1388 4991\\n5563 2698\\n1697 6513\\n6274 8367\\n9661 7750\\n4628 9988\\n1703 7475\\n3840 6914\\n3927 7703\\n3268 3767\\n7473 3181\\n7699 8856\\n3373 3567\\n4444 9847\\n6400 4813\\n2578 2993\\n8408 7640\\n2047 7350\\n2567 1006\\n1825 8667\\n8995 6810\\n1446 3459\\n3478 5354\\n2494 3640\\n7335 7195\\n2950 3886\\n4125 6196\\n8755 152\\n9010 6911\\n1593 1391\\n827 8969\\n5106 5262\\n7641 4585\\n9907 5385\\n9207 2977\\n6212 8862\\n7694 7832\\n6844 1934\\n4284 1347\\n8865 3552\\n9909 2417\\n6786 8389\\n2144 8092\\n2228 2491\\n5538 3678\\n649 807\\n3884 3702\\n8990 7120\\n1658 4614\\n4998 6304\\n3839 5901\\n1773 7430\\n6554 6988\\n8442 5629\\n3147 7779\\n2393 4265\\n2807 6151\\n3977 675\\n9106 7807\\n9401 1070\\n4490 6141\\n8528 7013\\n9855 650\\n1382 8936\\n4719 2840\\n8386 2376\\n5340 6127\\n1854 1234\\n4640 1200\\n7741 2849\\n2053 5218\\n4689 8921\\n8358 152\\n2837 4692\\n6152 2931\\n4957 566\\n9372 6690\\n1430 573\\n1520 6959\\n1508 5957\\n6993 9374\\n6709 6528\\n6640 3542\\n1092 7739\\n8687 3905\\n4065 1873\\n2479 1107\\n6623 9182\\n8413 936\\n5233 7374\\n8740 6684\\n9968 825\\n2652 9999\\n4556 9836\\n2240 2352\\n5317 185\\n4399 3450\\n9228 6084\\n1241 7742\\n7615 1429\\n5699 5613\\n5755 3218\\n6192 6784\\n7378 1531\\n4667 1189\\n322 4544\\n584 1008\\n2755 4697\\n707 3787\\n9491 4334\\n6920 9581\\n9684 2862\\n5094 4368\\n2609 1164\\n6392 7890\\n7353 7049\\n5089 696\\n6454 8742\\n7704 2756\\n5352 9060\\n2990 9689\\n5127 3677\\n5431 5846\\n9929 8237\\n3543 9513\\n8843 4025\\n708 6801\\n8933 4527\\n5676 9683\\n2601 7343\\n8934 169\\n3163 5986\\n591\\n296 2850\\n9506 7055\\n8426 7010\\n4895 8254\\n8866 5679\\n1478 1354\\n7497 2973\\n1737 1785\\n8455 4003\\n8613 1145\\n9345 296\\n8331 7575\\n818 8025\\n8049 8991\\n3935 9166\\n5923 7953\\n1276 279\\n4104 2846\\n9243 3577\\n8152 6370\\n4194 6969\\n7140 6240\\n1727 4794\\n1733 2175\\n5328 1456\\n8781 8846\\n5192 4010\\n1481 8753\\n3985 9031\\n2679 7181\\n5268 3820\\n7077 6327\\n9631 8350\\n318 5537\\n7407 6297\\n7825 1900\\n6549 3075\\n980 782\\n1876 6351\\n971 320\\n7250 4541\\n8838 4486\\n7741 9341\\n6020 3146\\n2663 8387\\n8933 919\\n9901 1367\\n281 8759\\n2550 8434\\n9715 6878\\n5279 1807\\n6449 3137\\n4416 2540\\n4947 1459\\n2269 5685\\n4925 4784\\n5740 5288\\n9617 2119\\n7228 7438\\n2830 316\\n5703 2674\\n3549 2660\\n7679 3338\\n7034 8279\\n1374 6532\\n1529 9193\\n3089 4931\\n6976 5171\\n1731 3922\\n4427 9110\\n6830 7052\\n8820 7838\\n9215 7946\\n226 2307\\n6725 242\\n280 3066\\n8113 4423\\n4525 5341\\n8538 8101\\n2867 18\\n9498 8150\\n3380 8350\\n424 1159\\n5161 5886\\n1600 4136\\n7743 5273\\n4511 8828\\n6065 9772\\n8375 2351\\n2973 3846\\n4796 342\\n1266 9629\\n2632 5427\\n5622 6227\\n8527 2865\\n8118 8337\\n9137 5622\\n3146 8967\\n5355 399\\n8557 4796\\n6815 8979\\n4127 2562\\n9448 9271\\n34 3787\\n7032 5809\\n2179 5476\\n1030 2839\\n7771 788\\n3028 3196\\n9652 6603\\n8879 1084\\n7746 2052\\n9488 4699\\n554 9574\\n2280 9006\\n3456 9104\\n7243 7672\\n1587 8334\\n9992 2250\\n962 6250\\n9859 3950\\n6938 3020\\n2575 7304\\n4746 811\\n8427 9861\\n94 3629\\n79 5453\\n6856 1227\\n3565 5355\\n4266 5053\\n1402 180\\n3520 7255\\n3338 7213\\n8080 1921\\n8995 1963\\n6632 8766\\n6445 8191\\n1579 2859\\n9295 420\\n8820 4632\\n9375 9840\\n6825 9486\\n4781 7634\\n813 4726\\n4073 723\\n7875 5509\\n6577 1615\\n3086 6548\\n1562 2237\\n5332 2533\\n1752 3084\\n5149 1610\\n9799 2139\\n2809 6168\\n9436 5271\\n873 7829\\n3969 8319\\n1731 3423\\n4944 6498\\n2644 7250\\n1165 6800\\n9331 9870\\n3172 2564\\n1916 7211\\n7578 9682\\n290 101\\n6816 6855\\n3486 8548\\n3789 1927\\n6365 4461\\n5629 6312\\n1989 1270\\n7390 7025\\n4337 3785\\n3251 3459\\n9049 2415\\n2102 9086\\n8697 7232\\n4424 1995\\n5184 9917\\n3007 7732\\n1245 5483\\n6092 6336\\n9123 8446\\n5872 7213\\n4106 2678\\n6055 8929\\n7913 1326\\n6443 8082\\n7213 1299\\n4457 3588\\n957 5875\\n8606 341\\n5687 3091\\n6564 4853\\n6422 1761\\n2499 8022\\n7126 5421\\n6032 1628\\n2633 4319\\n6921 4895\\n7518 9815\\n4386 9465\\n2668 4931\\n8491 1775\\n1719 7424\\n8846 7969\\n9671 4597\\n4694 2096\\n1257 3691\\n4138 3062\\n4627 8338\\n1414 1106\\n8399 2495\\n2729 2978\\n5811 3867\\n5938 1695\\n5394 1783\\n6292 6326\\n4131 298\\n8051 9164\\n3245 2969\\n8203 2310\\n2198 9416\\n4514 996\\n4444 5265\\n3500 503\\n6964 6465\\n3069 3779\\n1394 2583\\n5200 2744\\n1751 1897\\n9528 4320\\n8332 9798\\n6378 7623\\n6853 7052\\n3334 3174\\n2619 7123\\n1419 6630\\n197 6868\\n409 62\\n9484 5229\\n8449 8290\\n2387 1422\\n3958 2906\\n759 4496\\n6358 2266\\n8192 9736\\n3232 8551\\n9046 4531\\n8838 4655\\n5882 9064\\n3385 8572\\n6782 9969\\n1403 3228\\n2799 7147\\n4457 7794\\n5048 7203\\n7982 6591\\n138 9129\\n6913 5771\\n1326 6217\\n377 8234\\n889 174\\n6652 791\\n7369 8115\\n4252 1749\\n8069 4504\\n108 3878\\n1893 8126\\n6949 8271\\n4952 7431\\n3767 3503\\n5838 4811\\n2158 8631\\n3175 9778\\n5410 4863\\n8326 2661\\n2815 2040\\n1558 6295\\n5399 1354\\n4033 7958\\n1524 1124\\n9609 7878\\n3694 9959\\n4366 2829\\n48 4965\\n8890 7159\\n1578 6794\\n5378 5669\\n9924 9034\\n3675 1453\\n9737 2444\\n6976 217\\n6043 9962\\n3888 4962\\n1142 3440\\n2003 7990\\n4327 3983\\n5394 7549\\n1023 1331\\n9700 5857\\n3346 9988\\n9560 1718\\n5369 5\\n2018 9361\\n2844 144\\n7238 2135\\n3061 2419\\n8794 9573\\n5474 1635\\n5111 422\\n6018 7049\\n450 8652\\n340 2850\\n3018 4885\\n1550 2394\\n728 5897\\n1125 5383\\n2856 9712\\n1319 9493\\n7372 3465\\n4180 9559\\n2881 7744\\n533 2701\\n9222 4100\\n631 3967\\n1762 882\\n6011 8472\\n4561 6625\\n2067 4995\\n5546 8098\\n9250 1164\\n9637 8333\\n2132 9615\\n4298 9550\\n8304 811\\n8678 8180\\n6952 1742\\n5814 2747\\n8178 2232\\n9573 4172\\n2319 6731\\n2755 1368\\n1308 4461\\n1473 6139\\n7926 4605\\n1479 9879\\n7669 860\\n7066 1020\\n1700 9554\\n3919 324\\n5623 446\\n6446 9495\\n3977 4620\\n1871 5781\\n6730 4536\\n656 3937\\n6845 3337\\n9282 9407\\n595 6437\\n377 7932\\n2799 1585\\n1823 1004\\n9665 7688\\n5016 6246\\n7636 2423\\n4633 8637\\n7003 2931\\n6854 655\\n2468 6036\\n24 4039\\n1204 3386\\n538 2393\\n7538 5528\\n3984 2630\\n4216 8626\\n8127 577\\n468 9381\\n8720 1101\\n8152 9803\\n854 5263\\n592 952\\n9745 3818\\n2627 83\\n3108 3354\\n5989 8892\\n858 2597\\n2588 2345\\n2238 8790\\n8792 6689\\n8025 3845\\n5430 3990\\n8250 3414\\n8948 1832\\n1437 1076\\n1781 352\\n9476 9020\\n9843 1367\\n5526 4318\\n6570 8586\\n107 8343\\n3538 3686\\n9426 1238\\n3451 4541\\n9516 3786\\n918 4634\\n533 7863\\n786 5985\\n2111 1878\\n1411 2309\\n8931 6142\\n2774 1710\\n9644 1335\\n1129 7457\\n4303 8497\\n4485 1315\\n9359 7025\\n8384 7554\\n3734 4517\\n5666 8830\\n7838 6243\\n1102 5171\\n2194 5574\\n6265 1099\\n6902 4454\\n5163 1528\\n5151 4403\\n5517 974\\n5936 7312\\n4257 2796\\n1770 4824\\n6758 1449\\n7063 7501\\n8812 8350\\n1728 5919\\n8856 6014\\n6932 8026\\n4180 1885\\n6795 4076\\n2716 9757\\n6466 7971\\n9131 2491\\n4153 1766\\n3856 2565\\n7164 8621\\n7899 5374\\n493 9273\\n241 9430\\n5426 2658\\n4781 2668\\n7243 2377\\n3178 4106\\n4615 5846\\n6501 1960\\n7237 1199\\n1928 7761\\n8730 6079\\n2476 7711\\n5415 7314\\n7815 7752\\n8997 8217\\n4458 4621\\n5319 3859\\n8712 7408\\n6528 5941\\n8079 9239\\n1035 5334\\n8126 8401\\n228 4635\\n1635 3224\\n1163 9630\\n6676 4575\\n382 240\\n8157 3836\\n2915 6694\\n3887 8974\\n4679 9565\\n3309 6771\\n5233 8238\\n9209 8937\\n8140 255\\n5275 3517\\n4176 3751\\n1497 270\\n4756 8795\\n7323 6388\\n7542 8685\\n5818 1623\\n5573 1448\\n2858 1645\\n3529 8278\\n6281 7904\\n8789 9031\\n1961 1892\\n6279 5043\\n4027 7376\\n577 6468\\n4140 2734\\n5284 5075\\n1444 4145\\n7604 8706\\n3959 7340\\n3404 8165\\n2781 2036\\n9970 1122\\n7422 2025\\n6627 7326\\n7172 4668\\n9536 5168\\n9488 7966\\n8969 921\\n2436 7644\\n5124 1334\\n9581 8911\\n3796 4836\\n682 5450\\n1544 6154\\n2798 168\\n9963 1560\\n3505 8182\\n6754 3680\\n5275 613\\n367 9411\\n5502 7310\\n1318 7679\\n5340 7312\\n6498 4167\\n1231 6100\\n788 7088\\n8369 3759\\n3311 6455\\n1409 5076\\n52 60\\n5577 7279\\n5105 9670\\n4323 9102\\n9069 7448\\n4629 9949\\n6523 8055\\n2246 501\\n4643 8932\\n8891 8391\\n6383 7700\\n4950 6524\\n5165 1573\\n7882 4332\\n5504 1633\\n7888 5443\\n3818 6666\\n8900 9032\\n6238 4025\\n2286 5742\\n9646 221\\n4913 7117\\n4562 8223\\n8439 2394\\n5020 5290\\n4590 5784\\n8611 7958\\n6641 7616\\n6542 9589\\n5034 2573\\n4623 8858\\n2894 6103\\n5921 6801\\n8441 4593\\n9709 1259\\n9341 9370\\n2499 3398\\n8484 2786\\n5833 8312\\n6215 2025\\n4415 5408\\n8980 2690\\n7194 8220\\n7881 7479\\n9639 7382\\n6122 4510\\n7026 872\\n5687 9048\\n5564 3508\\n929 9106\\n2021 6794\\n8352 801\\n3557 5066\\n5057 3610\\n3659 1418\\n4372 6572\\n8455 4102\\n7934 2699\\n700\\n6828 639\\n8424 4184\\n3257 2593\\n2038 4155\\n3414 8608\\n6044 9940\\n3904 441\\n536 319\\n3226 7863\\n9636 5555\\n7898 2284\\n4078 4851\\n4776 249\\n1119 7057\\n5457 7695\\n5321 4909\\n281 2393\\n1029 658\\n3061 672\\n9541 4614\\n186 3287\\n1987 8770\\n4398 998\\n8418 2071\\n8799 6760\\n2725 8654\\n9175 1478\\n1628 8212\\n5212 6127\\n6988 7294\\n7893 5919\\n9861 3410\\n174 7490\\n9564 2336\\n632 3582\\n9950 3296\\n8231 4626\\n2589 5848\\n1391 8538\\n8834 8481\\n2635 2458\\n9504 3017\\n5209 6737\\n1444 2741\\n1719 8073\\n8856 594\\n1010 8416\\n5000 3865\\n3655 5146\\n1931 4515\\n4197 4834\\n6152 4745\\n5026 1405\\n3860 7129\\n5575 7149\\n8681 6923\\n4832 6900\\n321 9908\\n7066 4255\\n1223 3717\\n9703 1060\\n2865 9579\\n1055 3875\\n4643 6233\\n5808 9009\\n6686 6101\\n5080 7742\\n7170 7097\\n708 6556\\n6777 6469\\n1555 8728\\n1364 5919\\n5539 6873\\n5779 4372\\n2184 1978\\n8216 5110\\n6575 9756\\n3395 3725\\n5986 6958\\n7426 2276\\n945 1943\\n1695 3195\\n1722 5487\\n420 1656\\n7560 4763\\n6091 3796\\n2470 5828\\n1761 6147\\n9633 3204\\n2810 9767\\n5756 843\\n9484 3834\\n6027 4335\\n4343 8487\\n255 5928\\n8353 6328\\n6412 4299\\n49 768\\n3972 220\\n3617 6068\\n9756 6026\\n8746 8780\\n7287 4312\\n4755 10000\\n1220 6453\\n8688 4934\\n3681 6355\\n5514 2198\\n810 8776\\n2183 5649\\n8656 9782\\n1050 542\\n3873 7998\\n2832 703\\n6960 4481\\n5490 8493\\n6050 7498\\n1706 7089\\n7684 4530\\n5981 9264\\n5646 7503\\n4177 6133\\n1518 4710\\n9235 4939\\n8365 4995\\n1496 1338\\n2887 1979\\n9266 9552\\n8319 2736\\n8056 5123\\n2754 8570\\n3505 656\\n8180 2938\\n9160 5721\\n5356 9741\\n5186 2981\\n7645 6605\\n4726 3191\\n3029 4982\\n2056 7161\\n7496 8962\\n3513 3254\\n5154 8499\\n4363 6962\\n1158 6478\\n6824 8319\\n6166 2884\\n7428 8158\\n2817 3406\\n5349 1875\\n282 7540\\n846 7019\\n7692 4982\\n5800 3972\\n6762 6664\\n2302 1919\\n9839 5200\\n921 2141\\n9067 9896\\n2751 1415\\n3601 7433\\n9738 6562\\n4925 878\\n2233 8893\\n1037 227\\n3117 5202\\n834 1496\\n8581 2617\\n5015 451\\n4261 7647\\n3919 4370\\n6208 6294\\n7597 1980\\n7761 8149\\n6888 4142\\n8796 5814\\n9251 9728\\n8135 7052\\n576 3547\\n8403 780\\n4397 8224\\n9910 7877\\n2239 8207\\n5643 8222\\n577 1832\\n4727 142\\n8615 7054\\n1760 7707\\n1954 8644\\n6978 2046\\n7497 9621\\n2643 2681\\n6892 6769\\n3837 8580\\n8909 2973\\n9868 3738\\n9328 1067\\n1341 2124\\n2167 8177\\n5589 527\\n2876 8310\\n5951 5903\\n2480 16\\n4498 875\\n3818 109\\n7961 6458\\n7718 2993\\n4255 8196\\n6642 3781\\n4269 6642\\n6720 1805\\n8554 6310\\n990 9130\\n3572 8596\\n652 6934\\n270 3403\\n399 4451\\n4475 3865\\n2650 2813\\n7418 7193\\n3149 1419\\n8519 5403\\n2981 6584\\n5535 2451\\n9666 912\\n672 4392\\n495 3236\\n4971 5038\\n4720 4263\\n4420 2737\\n3615 5122\\n773 7582\\n8946 6505\\n7337 6779\\n5161 414\\n1772 5110\\n3777 8517\\n847 4378\\n2207 8133\\n6229 2889\\n4082 8495\\n7262 4861\\n337 3792\\n4641 7349\\n745 5092\\n9893 9106\\n6753 6761\\n8628 9441\\n1220 1557\\n1081 8600\\n6869 795\\n2508 3795\\n6452 9083\\n3261 1712\\n1083 5389\\n384 779\\n8699 6117\\n5138 2925\\n9365 2624\\n5665 4770\\n3668 5563\\n5827 3000\\n8973 7991\\n4352 3252\\n6312 2967\\n5681 2684\\n5664 125\\n3524 5693\\n2206 3134\\n8191 2816\\n9278 3812\\n2634 6057\\n5568 4799\\n7713 9947\\n4596 4012\\n79 1216\\n7844 3331\\n6185 4304\\n918 4894\\n361 2036\\n7413 4530\\n9387 6744\\n1628 5659\\n3623 1679\\n2934 1574\\n3921 4852\\n2028 1150\\n6660 7175\\n114 4161\\n9523 8646\\n7429 4245\\n2993 3443\\n2061 8110\\n2489 7663\\n1711 8427\\n7776 6915\\n2903 885\\n9170 6664\\n6395 1629\\n2850 2234\\n8610 1038\\n3943 2121\\n57 9385\\n5255 5706\\n9276 6636\\n142 4509\\n8717 3732\\n9719 9679\\n5539 9099\\n3484 7406\\n664 1540\\n896 9169\\n1016 7126\\n6880 7634\\n2608 3709\\n5531 4975\\n3126 3061\\n4056 8047\\n9669 2510\\n3186 2457\\n6635 7547\\n9862 9831\\n9187 3956\\n3855 4461\\n9126 1171\\n3360 2013\\n5130 4555\\n4810 9167\\n1274 999\\n6338 4727\\n7793 6609\\n2018 9366\\n4719 3328\\n9539 1083\\n1209 3318\\n1644 8627\\n4335 3103\\n6015 4494\\n9586 9420\\n2886 9079\\n6188 775\\n3739 6433\\n6171 6096\\n5973 5116\\n5980 3068\\n7461 1442\\n5754 3056\\n5239 9992\\n1618 645\\n3563 2109\\n1283 2029\\n5138 3095\\n3916 2171\\n5895 7225\\n2528 8977\\n1633 1178\\n7352 1377\\n2334 8079\\n8958 2068\\n7989 8050\\n8177 673\\n9340 2429\\n9955 5312\\n9368 6334\\n9626 5601\\n4176 8928\\n411 7427\\n3953 9383\\n7602 2052\\n5255 7131\\n5470 6281\\n3907 5998\\n4902 4887\\n9279 4298\\n7914 5259\\n4933 6997\\n9523 4780\\n6178 445\\n7287 643\\n1573 9028\\n1453 1614\\n2959 5038\\n7026 220\\n1004 3573\\n9535 9808\\n5655 2319\\n4389 4661\\n6008 7878\\n9037 7159\\n8080 3359\\n7567 150\\n7290 4477\\n5084 9825\\n6430 7343\\n6518 2502\\n2001 9649\\n5990 3583\\n9146 6889\\n4574 7096\\n5409 411\\n5303 3451\\n9648 2294\\n8866 781\\n8994 4167\\n1834 7443\\n4490 6658\\n1330 2425\\n9812 9310\\n7703 4296\\n7826 5866\\n9583 405\\n7202 6000\\n803 4734\\n3269 3725\\n7824 7926\\n579 214\\n8819 6272\\n7144 5625\\n6563 5121\\n572 4536\\n9006 8115\\n2507 6470\\n7757 1759\\n842 6275\\n2933 4360\\n6035 1263\\n7326 621\\n2871 6817\\n9454 5238\\n4447 525\\n5240 1580\\n7950 3070\\n1651 9085\\n344 4864\\n7046 6199\\n4675 2292\\n4634 6976\\n3102 1965\\n3615 2028\\n4521 6835\\n7248 6815\\n524 7419\\n7866 6997\\n8962 3211\\n5175 3054\\n8829 9186\\n5770 6884\\n9518 5541\\n7597 4284\\n1728 8533\\n4325 7814\\n3488 4417\\n8074 991\\n9210 7562\\n1562 6809\\n1565 8240\\n3085 3569\\n2408 207\\n1214 4312\\n3406 5586\\n3772 3291\\n5104 6721\\n2221 1251\\n6470 6023\\n6777 3171\\n4757 5346\\n6437 9181\\n1814 2642\\n856 7999\\n4852 8072\\n6724 5178\\n3160 4367\\n4409 9431\\n1872 7196\\n8058 1956\\n7944 2683\\n6943 9426\\n7029 1772\\n4263 9309\\n5710 4183\\n2413 7186\\n58 9173\\n435 8116\\n4357 3576\\n3250 2993\\n5494 4027\\n4451 4891\\n7542 8339\\n3880 3945\\n8657 6167\\n5851 992\\n1884 2029\\n9705 2950\\n9318 4315\\n8271 6979\\n7171 6686\\n6305 116\\n3752 1352\\n7946 5874\\n483 187\\n9449 6353\\n9311 5666\\n1473 8938\\n4181 2284\\n5783 897\\n1909 9018\\n59 1572\\n9002 9980\\n9194 8748\\n5134 923\\n8780 6189\\n441 5402\\n347 4459\\n1104 3396\\n2905 1801\\n4273 237\\n3266 6681\\n3013 113\\n2602 3668\\n392 9642\\n2439 1708\\n2839 9486\\n8726 5586\\n4389 3908\\n5711 5198\\n9857 4277\\n4024 2982\\n1886 6779\\n9001 9621\\n1266 7799\\n250 7884\\n8502 9314\\n6729 6470\\n9398 3322\\n6111 2476\\n3739 1392\\n4433 8558\\n4949 3796\\n3282 4807\\n3630 1586\\n9039 6573\\n4777 5904\\n1242 9647\\n7790 2765\\n8720 4001\\n292 8203\\n1914 5695\\n979 8838\\n2655 1875\\n1829 9901\\n6479 5883\\n5331 7915\\n3721 7175\\n654 4604\\n9929 2871\\n681 4818\\n8960 214\\n1776 7570\\n4222 3526\\n4159 1899\\n8258 6620\\n301 2669\\n368 3720\\n8403 7749\\n4402 664\\n8720 9530\\n4533 741\\n9317 8309\\n4449 6739\\n8120 9122\\n532 587\\n1837 2921\\n1419 5375\\n7102 6725\\n3576 3605\\n2488 9099\\n4071 5642\\n146 2667\\n9212 834\\n665 3492\\n7533 4284\\n4701 3925\\n7149 4495\\n2335 5036\\n9458 7342\\n4377 5600\\n5514 1456\\n9722 6046\\n7808 5241\\n5958 6188\\n5382 2106\\n4324 1676\\n1801 5679\\n2114 6534\\n1686 2089\\n5903 5509\\n7181 8205\\n1428 765\\n4891 2220\\n6659 559\\n3413 5619\\n5359 151\\n9886 5148\\n5590 9163\\n7820 8096\\n4975 6152\\n4372 4796\\n5165 2839\\n3361 3849\\n1205 4123\\n4862 2494\\n119 3639\\n4083 650\\n8427 8269\\n9506 211\\n623 8997\\n6222 5421\\n1751 8367\\n582 5981\\n8966 5949\\n8286 66\\n9157 4611\\n7715 6577\\n3579 8021\\n308 3840\\n2389 3569\\n2334 539\\n5606 7309\\n5390 1144\\n1968 6295\\n2596 666\\n8193 6248\\n6878 3491\\n3323 9650\\n8732 1180\\n7446 2889\\n9588 2640\\n5888 2093\\n421 4719\\n106 691\\n4684 8719\\n3602 6501\\n2123 4042\\n9871 1768\\n7780 1536\\n7996 9725\\n4492 6353\\n527 754\\n2998 9745\\n2506 7367\\n7524 8367\\n9851 5486\\n7833 186\\n4201 9292\\n9046 7907\\n9091 6199\\n4688 9398\\n150 1703\\n9272 2528\\n2817 9823\\n9591 9539\\n6764 9470\\n8831 4660\\n2566 1641\\n66 8331\\n558 5575\\n9483 9726\\n746 4732\\n8300 2549\\n9465 4886\\n6896 7087\\n3568 8676\\n2109 1977\\n8831 199\\n5472 220\\n2224 477\\n1629 8035\\n8588 7840\\n3323 3804\\n7393 5842\\n2531 7657\\n7193 5927\\n2107 9962\\n7583 2467\\n8761 5099\\n7411 1101\\n6582 233\\n828 5591\\n1394 7483\\n268 7369\\n8471 2053\\n4603 8169\\n2682 1559\\n3882 59\\n8477 2751\\n6280 8440\\n5112 5848\\n9191 6209\\n8256 9179\\n3351 5941\\n332\\n4040 8808\\n8377 1865\\n1301 9198\\n1304 3117\\n1097 802\\n6046 1429\\n1930 1594\\n2244 1692\\n9101 3529\\n9092 8271\\n6535 158\\n4228 6782\\n7316 4825\\n6845 7505\\n5458 5454\\n8522 8439\\n8866 4479\\n2397 2523\\n2060 6178\\n2542 7441\\n6094 3049\\n7685 2751\\n653 9275\\n6868 4027\\n5567 4855\\n6125 1362\\n7127 1229\\n4839 7635\\n3025 7196\\n4852 848\\n6751 307\\n5059 5518\\n7406 5443\\n1696 1223\\n5480 1303\\n1648 8221\\n3037 2734\\n7040 5000\\n8723 674\\n8527 9324\\n4159 3506\\n2053 3771\\n2371 1678\\n6989 6380\\n273 4235\\n2009 4620\\n558 1657\\n9829 2823\\n9891 7823\\n496 3555\\n4375 6811\\n2805 8980\\n2046 6213\\n7542 3977\\n7473 4926\\n6032 7824\\n9514 1398\\n9217 5751\\n9813 3457\\n28 1508\\n9264 1408\\n8973 2860\\n3647 4132\\n9047 2803\\n8327 6540\\n5753 9701\\n5015 1534\\n5169 5140\\n1790 2616\\n859 9086\\n352 6602\\n5 3945\\n4149 9772\\n5288 9464\\n3006 881\\n396 9922\\n3813 5232\\n2405 2728\\n9454 5570\\n324 1281\\n2668 2542\\n6048 9709\\n4046 7772\\n7864 6997\\n122 2172\\n7577 1373\\n6773 4668\\n5578 6408\\n6403 5186\\n2257 3030\\n6239 4146\\n4618 4955\\n8365 8199\\n5715 8453\\n9688 97\\n9198 1948\\n1793 8821\\n654 5052\\n1571 9556\\n2325 3142\\n7857 3233\\n7401 2573\\n3026 2207\\n1883 178\\n9258 3976\\n2817 5228\\n7338 1947\\n6751 1673\\n3091 924\\n9578 2690\\n5853 6946\\n9707 6061\\n6914 8181\\n5776 4796\\n919 2290\\n7164 2465\\n8182 4727\\n9927 9127\\n4414 7159\\n3104 7737\\n9493 1479\\n6906 8152\\n6886 5251\\n559 3436\\n5409 8008\\n865 8376\\n4122 3879\\n4406 3707\\n6615 2203\\n2433 155\\n7208 4013\\n1436 3409\\n8474 2938\\n8819 7940\\n8385 762\\n1249 7783\\n4838 7090\\n8002 4935\\n7730 2359\\n36 7570\\n3998 4774\\n8000 6574\\n6655 5622\\n575 88\\n6001 4696\\n8946 4442\\n852 1306\\n7231 7807\\n6743 5031\\n6308 840\\n3896 6000\\n9671 8681\\n6546 8641\\n6263 894\\n340 899\\n6094 8562\\n7712 3306\\n4030 4400\\n4590 5762\\n6136 8686\\n9641 6007\\n7343 3342\\n5921 2151\\n1350 8202\\n3505 9427\\n8507 3713\\n6643 2990\\n2945 4065\\n4191 4900\\n566 8506\\n6407 5043\\n1746 8078\\n7506 7239\\n7783 9782\\n6611 8084\\n5869 5424\\n3487 5884\\n8273 2837\\n4910 5227\\n2674 6134\\n7421 2997\\n3837 1051\\n3326 4732\\n703 2278\\n9490 4354\\n1100 9326\\n2344 2742\\n1614 2012\\n1683 2541\\n368 8487\\n8541 8974\\n8797 6995\\n9589 5015\\n7157 3101\\n4954 1354\\n1485 4812\\n8602 8807\\n3423 6296\\n327 908\\n2353 3452\\n786 8482\\n4674 8808\\n8966 6329\\n1810 4480\\n5989 8751\\n7764 9638\\n3159 8633\\n152 1872\\n2499 5541\\n2861 6689\\n6218 864\\n7642 8201\\n867 1597\\n4982 192\\n1500 8629\\n8746 2491\\n3444 824\\n4254 1119\\n2795 1000\\n5592 4948\\n1096 4139\\n7422 6051\\n8259 4648\\n571 6469\\n2308 9121\\n7004 9153\\n9262 3375\\n1681 2667\\n8025 3214\\n7635 4478\\n5015 1894\\n558 1885\\n1982 5707\\n152 5576\\n4352 4611\\n5108 8482\\n1138 6289\\n4863 7736\\n9571 2219\\n3215 9724\\n1368 3296\\n411 1251\\n3005 672\\n7895 6930\\n7537 9846\\n9464 9314\\n8242 2378\\n7308 5799\\n7269 5495\\n699 7966\\n150 7678\\n1322 7426\\n8806 3900\\n3020 1873\\n7282 8331\\n2251 9802\\n3582 5088\\n8426 8103\\n3287 9263\\n1731 3484\\n6990 3440\\n6231 9577\\n9986 6894\\n1121 4162\\n1222 7115\\n8372 3535\\n2169 1867\\n2957 175\\n1910 589\\n355 8971\\n6757 2815\\n1510 4645\\n1713 4753\\n1512 4187\\n2113 3818\\n6988 672\\n7657 482\\n9926 7239\\n2166 8137\\n9323 5471\\n7475 914\\n1167 7470\\n5418 9415\\n4681 894\\n7590 4014\\n8532 2628\\n6988 7980\\n5473 1176\\n9061 7937\\n1167 4848\\n4122 710\\n1641 9777\\n8975 3149\\n331 2478\\n7850 309\\n4641 2605\\n7629 4771\\n335 1508\\n1549 1962\\n1348 2176\\n8961 4751\\n8119 3404\\n8587 9217\\n4147 3055\\n4125 2812\\n6198 2729\\n8140 1179\\n3895 6932\\n8057 7894\\n7926 4260\\n8192 2007\\n5429 7433\\n8414 370\\n5553 7227\\n1510 5529\\n5108 5513\\n9431 5779\\n7142 3469\\n1770 261\\n1296 8268\\n2751 949\\n7123 2969\\n7310 6332\\n456 8487\\n7043 8131\\n3550 4206\\n6400 2815\\n8805 3357\\n7948 9528\\n3943 4917\\n3663 4811\\n2575 2822\\n596\\n6223 1337\\n8464 9378\\n9700 6865\\n4866 6231\\n4867 479\\n5830 478\\n9495 830\\n4375 7612\\n4416 3559\\n8694 2373\\n5911 731\\n9735 6338\\n910 781\\n8886 1171\\n9997 8486\\n3614 3995\\n5772 2185\\n7093 3741\\n710 9197\\n2054 1858\\n2162 4779\\n9351 9139\\n7898 4618\\n4031 424\\n7787 3965\\n3674 5340\\n815 6479\\n9272 5768\\n9228 5601\\n5973 1830\\n422 6881\\n1127 9980\\n8906 1832\\n2277 325\\n1726 4253\\n7135 8570\\n5565 5650\\n7721 3432\\n171 2264\\n6682 313\\n7043 7509\\n5104 2485\\n6345 4759\\n8511 5996\\n1903 6901\\n354 9753\\n5673 596\\n6053 9992\\n1099 699\\n4059 6806\\n1349 6008\\n136 5127\\n7354 4414\\n7319 702\\n4579 3855\\n3206 9172\\n6082 3276\\n5334 2092\\n2244 153\\n3092 7610\\n4560 380\\n5582 6045\\n1309 6973\\n9688 6483\\n9408 6657\\n288 4559\\n2994 3857\\n9379 4600\\n3266 6136\\n3309 1082\\n7907 4695\\n5292 5616\\n5833 2209\\n7545 2089\\n9221 3008\\n7670 1372\\n2535 6171\\n383 6166\\n7059 510\\n5321 88\\n1409 2684\\n1059 9835\\n4839 8335\\n3889 134\\n7642 220\\n2061 1761\\n2784 8090\\n955 4588\\n8977 959\\n2559 5960\\n7711 4924\\n942 2379\\n8617 6850\\n1249 5249\\n1453 5650\\n3666 231\\n894 922\\n6247 3992\\n1134 1788\\n9970 83\\n5354 84\\n5782 6468\\n3599 9488\\n2328 4337\\n117 6472\\n3732 3018\\n8818 9094\\n5026 1369\\n4590 1269\\n1106 3339\\n6455 5133\\n2971 8092\\n2505 25\\n1606 8488\\n2646 8223\\n1813 5761\\n5972 7113\\n715 3600\\n881 4423\\n8768 3410\\n3555 3798\\n6084 4993\\n341 2358\\n9296 4012\\n152 7582\\n3097 3960\\n861 2539\\n903 3334\\n4168 5470\\n9953 4013\\n737 6204\\n1597 2205\\n1891 4390\\n5220 960\\n4369 7141\\n7885 2245\\n9769 1756\\n3926 6453\\n6100 7819\\n4336 2505\\n1348 9696\\n163 1672\\n6086 2700\\n3175 6768\\n9769 8609\\n6647 2753\\n8261 5045\\n1666 8691\\n4364 7939\\n8941 5276\\n6393 6658\\n877 6773\\n9311 6955\\n733 7841\\n3182 7826\\n3274 565\\n5317 1656\\n9835 8044\\n675 5081\\n2541 3354\\n3779 1928\\n9127 8774\\n9669 8871\\n1493 9957\\n6012 2009\\n9973 9401\\n3858 892\\n2741 5653\\n3442 7517\\n9186 279\\n2560 6836\\n1574 2241\\n3153 4422\\n2964 4639\\n5514 1467\\n2701 4681\\n3153 2987\\n5339 1488\\n9507 5392\\n3966 6009\\n473 8046\\n3850 9514\\n214 6325\\n7000 7499\\n4948 8607\\n4625 7319\\n960 2327\\n995 64\\n4761 9066\\n6283 1922\\n3520 9918\\n7042 511\\n778 6521\\n6191 449\\n4433 2469\\n2535 1274\\n7713 7134\\n414 5272\\n505 2179\\n3801 9117\\n7523 8339\\n6338 5476\\n215 792\\n8519 3266\\n3603 7414\\n7938 5045\\n9477 9912\\n7971 4710\\n9908 7548\\n9681 5771\\n1789 5419\\n3903 4881\\n7107 8902\\n6772 1014\\n7900 9496\\n1647 4906\\n8119 956\\n2935 1500\\n4572 2215\\n6290 3968\\n324 1700\\n2386 6648\\n933 7717\\n5938 8811\\n5306 5341\\n9786 7615\\n7718 2716\\n7629 4642\\n9512 6246\\n7283 9454\\n6388 3437\\n1345 4408\\n1643 188\\n2302 7892\\n8909 9817\\n9048 8750\\n4130 2469\\n3392 3459\\n9936 7051\\n7953 990\\n3348 1467\\n2948 3957\\n1213 8313\\n4992 7810\\n8763 6659\\n8000 480\\n2297 8703\\n4706 517\\n7566 7808\\n9427 5474\\n4212 1336\\n6572 1820\\n1083 1850\\n3137 950\\n234 1911\\n9506 8581\\n5665 6273\\n3504 4509\\n9747 8668\\n4649 1712\\n8176 1549\\n5012 839\\n3028 7800\\n9744 1314\\n4558 6101\\n2007 3405\\n7610 1935\\n8703 2797\\n1510 3374\\n1675 4976\\n6121 4513\\n5492 2771\\n9939 4206\\n7510 9928\\n3111 2433\\n8462 7026\\n5412 1975\\n7532 6388\\n5213 6825\\n7636 223\\n3565 5284\\n1599 8680\\n4176 5800\\n6619 5895\\n5285 8206\\n2784 1332\\n8841 6946\\n9538 1194\\n5533 6888\\n1070 9479\\n9277 4312\\n4983 7934\\n4308 2400\\n5931 8957\\n5345 6530\\n5411 8871\\n5293 1257\\n8596 4289\\n6391 2712\\n9764 3586\\n1230 3765\\n5584 5644\\n3391 7011\\n1386 1084\\n6843 6091\\n4205 1326\\n3809 5630\\n1806 9126\\n9611 2683\\n9033 7689\\n8636 9261\\n3493 8640\\n7204 2392\\n3834 9451\\n9843 8312\\n3538 7334\\n2653 247\\n6543 384\\n9753 884\\n1107 8554\\n10 1537\\n7887 3084\\n887 3354\\n1773 7316\\n7526 9889\\n8187 8002\\n7600 2663\\n6342 5237\\n3220 3466\\n4085 6766\\n5883 8459\\n1638 185\\n8182 1129\\n5385 1904\\n2972 8669\\n3822 4462\\n5208 1096\\n7750 3935\\n5815 1142\\n9819 1810\\n7938 1738\\n8012 3949\\n7193 3630\\n9078 1978\\n7639 8528\\n4113 1956\\n4269 624\\n8553 5498\\n7176 9908\\n2090 5895\\n968 8806\\n7114 6828\\n9424 855\\n7681 1378\\n5150 8825\\n4735 953\\n1026 2351\\n2370 63\\n1300 2823\\n1680 7932\\n8973 8616\\n3330 283\\n2848 9308\\n8347 5606\\n8134 7477\\n2599 1890\\n5160 118\\n9834 9190\\n730 5509\\n8942 7903\\n5028 3929\\n5380 27\\n5494 60\\n6580 2360\\n7772 5770\\n5799 7254\\n5462 7082\\n9184 7809\\n1844 966\\n2777 1659\\n5280 9265\\n7616 7294\\n9892 4295\\n4256 9583\\n3747 9785\\n5467 4321\\n6986 1837\\n7790 6960\\n4161 9924\\n1260 4060\\n113 5801\\n4085 4381\\n2130 3343\\n2683 404\\n2179 9469\\n9708 6080\\n712 8531\\n9467 8297\\n348 7149\\n5379 8193\\n8690 1549\\n9172 8810\\n631 6298\\n2778 4025\\n4705 3393\\n9529 6107\\n697 3651\\n9621 395\\n4756 5344\\n8975 8631\\n5938 2845\\n6983 1794\\n4989 6340\\n6926 891\\n6104 5938\\n4732 5463\\n7349 5181\\n7697 5899\\n8225 1352\\n4299 424\\n9777 5336\\n5724 8382\\n2342 1594\\n6943 9466\\n5341 8125\\n1380 8445\\n1790 3158\\n2499 1989\\n9438 4352\\n920 496\\n2376 1965\\n5348 9214\\n7770 2639\\n4812 5059\\n7953 1807\\n1506 4835\\n4294 2184\\n1209 9975\\n5466 2699\\n4920 6247\\n5896 9900\\n122 9456\\n8120 9347\\n5587 5299\\n4140 3484\\n5388 517\\n2221 1177\\n5345 7957\\n1262 991\\n5018 2877\\n3172 7893\\n2582 1622\\n7694 3277\\n883 8328\\n270 8524\\n6151 6011\\n2478 1807\\n302 1176\\n8920 6443\\n5518 7515\\n2930 916\\n5173 6050\\n2041 5423\\n442 934\\n9615 3703\\n7897 2322\\n1820 3408\\n1385 1942\\n4451 902\\n3415 3412\\n2777 2813\\n4048 6527\\n472 8034\\n8611 4325\\n3152 8888\\n4092 5948\\n9420 7792\\n8560 6830\\n467 4877\\n6871 1465\\n6029 3560\\n5098 8165\\n8491 323\\n7594 9910\\n665 4640\\n9510 7956\\n5257 1051\\n7207 738\\n8775 8618\\n4704 9852\\n1910 408\\n6437 6916\\n3486 6797\\n2553 3156\\n4345 1875\\n3682 4012\\n6589 3620\\n6341 4128\\n2815 3073\\n6650 7784\\n759 7951\\n4817 1800\\n5906 627\\n1118 2352\\n4162 8204\\n4407 5445\\n9040 8269\\n9056 6849\\n7976 6036\\n3078 9018\\n9988 434\\n7055 8775\\n2140 8915\\n3134 380\\n3790 6613\\n5910 5666\\n8160 5156\\n6452 289\\n9974 1200\\n2889 5188\\n1354 1494\\n6505 3635\\n8566 7219\\n3205 9655\\n4141 1078\\n3134 1905\\n6387 7051\\n2364 3672\\n6227 4867\\n7203 2400\\n3228 8581\\n5800 3646\\n1186 7018\\n5078 1643\\n4755 5681\\n8740 665\\n7995 6869\\n4715 1034\\n158 4521\\n9640 3135\\n8227 6574\\n9357 8308\\n3944 2724\\n4477 8322\\n8740 8409\\n4729 9987\\n9525 7600\\n256 2773\\n7408 7972\\n2404 3744\\n7930 2707\\n4302 9098\\n8643 4300\\n5670 5498\\n1452 9030\\n7328 2981\\n8715 3876\\n1778 1725\\n9448 6825\\n3145 4053\\n8952 3463\\n7902 4913\\n8101 9856\\n8283 6818\\n9485 1707\\n9193 3765\\n1213 6724\\n3781 6230\\n9914 5032\\n3225 3844\\n951 8681\\n8358 1444\\n8959 3472\\n5389 3893\\n8652 4918\\n6028 4203\\n168 7551\\n9392 4787\\n754 3773\\n7567 1357\\n5364 1458\\n1368 9357\\n7466 7674\\n4043 2378\\n1767 7190\\n9504 230\\n7644 1791\\n1608 2721\\n8615 8632\\n4189 4907\\n9722 2330\\n6714 4593\\n7435 3172\\n131 2636\\n2025 3531\\n5929 2271\\n71\\n6778 7532\\n3157 7414\\n2775 9069\\n8373 5493\\n2516 2014\\n1326 7509\\n2909 81\\n3188 9547\\n6200 146\\n7386 7139\\n7773 8576\\n5720 2153\\n2059 7366\\n8337 3841\\n4386 8979\\n4608 8267\\n3442 2624\\n3165 966\\n6291 7828\\n9327 6025\\n127 2194\\n5645 6428\\n1978 114\\n2119 2014\\n3937 266\\n7937 2541\\n9943 7438\\n5203 2228\\n5007 6196\\n88 8516\\n5494 5593\\n570 1857\\n1731 1718\\n7901 8975\\n4596 7852\\n6855 7559\\n7335 2862\\n8410 9846\\n659 7178\\n6405 8466\\n9096 9080\\n8399 4200\\n6364 6978\\n7051 8758\\n638 4020\\n4236 8623\\n9813 5843\\n6771 9516\\n3992 3106\\n5855 9954\\n7160 9517\\n1006 5723\\n8948 3407\\n1207 2595\\n47 1241\\n4396 2318\\n3224 3141\\n310 4617\\n6515 7921\\n4502 9847\\n7860 7117\\n3886 9431\\n8856 8242\\n4106 3218\\n1637 7603\\n6332 3934\\n6297 6784\\n4297 2620\\n207 2029\\n9996 2725\\n767 8854\\n785\\n4757 427\\n9028 6749\\n9694 2718\\n7714 5227\\n6704 2894\\n4489 9183\\n6766 5830\\n7581 9535\\n7231 1472\\n3045 9011\\n1371 505\\n9696 4448\\n5274 9851\\n1646 7171\\n7157 4006\\n9712 4480\\n3501 8961\\n1210 6522\\n3311 1717\\n1448 1238\\n4159 8423\\n6185 1324\\n3220 724\\n9478 1146\\n3860 2354\\n5856 133\\n2747 5589\\n2295 942\\n353 7379\\n8856 1377\\n3962 6364\\n6918 2529\\n1700 1408\\n6932 1624\\n5347 9836\\n6543 8703\\n7542 508\\n3192 5538\\n408 2935\\n1527 8552\\n1665 2877\\n9696 5377\\n9648 115\\n2359 2772\\n3794 9392\\n2039 4199\\n8684 9320\\n1212 8100\\n3569 2651\\n6690 9029\\n2633 4995\\n6384 2499\\n2636 1063\\n3931 7262\\n9123 5369\\n6313 7122\\n7228 9859\\n7848 8298\\n3903 6714\\n8816 2859\\n2255 7190\\n4841 4163\\n2908 9596\\n7265 2525\\n4624 305\\n7703 2859\\n4933 6278\\n3225 8346\\n1139 5982\\n6694 5627\\n6070 9047\\n7593 2717\\n7639 4792\\n6053 9769\\n2435 7841\\n8124 2447\\n599 135\\n4888 9394\\n1921 8871\\n4231 7197\\n4804 3690\\n3057 5710\\n2536 422\\n4324 5041\\n2325 6950\\n7391 3023\\n3983 3316\\n166 9958\\n5507 7108\\n9621 6870\\n7046 648\\n6807 2168\\n4975 7300\\n1320 2561\\n6737 3726\\n2022 4202\\n4797 9525\\n8181 1801\\n3608 1487\\n4115 3903\\n5209 7065\\n4574 66\\n5859 1899\\n1858 3141\\n3122 9574\\n8262 6156\\n339 6652\\n5850 8279\\n4119 3139\\n7510 9022\\n7537 491\\n7379 498\\n191 6877\\n8830 9536\\n368 4242\\n6836 4831\\n7094 2655\\n9490 7197\\n315 5902\\n1699 7859\\n8552 3488\\n7915 2212\\n2291 4681\\n5126 5262\\n3813 7821\\n7971 9311\\n5466 5541\\n7451 5369\\n2926 9991\\n3514 4135\\n4320 5417\\n3997 1419\\n4410 8904\\n6517 9806\\n5631 6298\\n803 985\\n5825 4774\\n3859 9934\\n9090 9449\\n5465 9910\\n6917 5913\\n597 5776\\n4147 3499\\n6474 1122\\n1974 1934\\n3245 9290\\n1221 5765\\n1693 2547\\n165 3057\\n5558 1123\\n6684 9189\\n7417 8045\\n4155 9245\\n5206 3300\\n8448 3769\\n1150 4360\\n3236 5382\\n5965 2836\\n4394 7076\\n9679 1411\\n9011 4814\\n3399 7660\\n6208 268\\n9600 3643\\n8030 8629\\n7502 6574\\n9090 95\\n5694 5609\\n347 1790\\n49 4369\\n2811 6206\\n4111 9627\\n9095 8822\\n6171 6771\\n5922 1385\\n9503 2891\\n2182 7909\\n3313 8922\\n1049 5268\\n6016 6140\\n8947 7094\\n2575 4012\\n4541 8054\\n6728 1825\\n6170 466\\n5970 2291\\n9947 3793\\n1560 9965\\n7595 8344\\n3249 5752\\n2384 4115\\n2936 5963\\n4293 2042\\n7057 9941\\n5001 745\\n8895 609\\n251 587\\n4529 6787\\n9363 3746\\n3858 3846\\n7118 6311\\n7494 2393\\n3155 9272\\n4457 4287\\n9608 5389\\n8426 6611\\n2258 9237\\n5567 5564\\n9669 2080\\n7535 4452\\n951 1371\\n6364 6096\\n1545 6920\\n7002 1558\\n5838 5190\\n2523 9436\\n9083 5067\\n2652 4507\\n6609 4150\\n3423 2877\\n8178 8734\\n4682 5836\\n2180 4963\\n8157 4292\\n851 4168\\n9704 9155\\n1669 6144\\n7786 5367\\n1648 8338\\n2190 9338\\n4692 9989\\n4272 2636\\n3048 7631\\n6214 5463\\n8260 7010\\n2636 735\\n3208 2395\\n4934 7905\\n9620 1518\\n4986 820\\n4748 9331\\n9929 7072\\n43 6429\\n4364 7372\\n1927 6487\\n5007 894\\n4440 7999\\n8763 5819\\n5617 4881\\n9614 1245\\n188 6911\\n8089 2209\\n7743 7759\\n9443 8414\\n9871 8046\\n8263 8221\\n2251 2278\\n2451 4067\\n7124 2388\\n5928 8176\\n9905 5451\\n9914 7649\\n633 1680\\n2833 2242\\n6091 1108\\n5848 1748\\n6990 6109\\n6120 9267\\n4362 3234\\n7712 1468\\n1861 6179\\n1257 970\\n6592 225\\n9093 9584\\n9816 1905\\n9321 14\\n709 4592\\n3804 30\\n8153 2631\\n5335 6124\\n4083 3445\\n487 4665\\n4019 2347\\n3658 7609\\n8667 1943\\n7824 4568\\n7043 5586\\n5727 7014\\n1108 6230\\n7716 3636\\n7917 9327\\n6049 7915\\n8296 9637\\n5953 3550\\n6943 4794\\n1161 4054\\n7001 3494\\n5946 9107\\n2525 2249\\n3961 8903\\n6848 6947\\n6924 2922\\n196 7151\\n9804 8247\\n233 4768\\n187 6955\\n6406 3542\\n6328 6448\\n1076 7426\\n9186 4974\\n2829 932\\n3894 2294\\n2386 2333\\n5220 3592\\n7469 5079\\n8610 6197\\n1180 7285\\n5471 6616\\n5565 5327\\n6184 5930\\n5267 510\\n6210 287\\n3422 3750\\n4674 8695\\n3874 583\\n6399 1944\\n2452 1670\\n6088 6174\\n1369 2300\\n3547 4467\\n1670 9179\\n8010 1563\\n1219 5834\\n7259 2448\\n7460 1781\\n4697 2083\\n1378 4882\\n9588 8947\\n8061 3090\\n9439 2527\\n2831 9428\\n194 5245\\n5090 6442\\n7090 2364\\n5569 8712\\n5045 4846\\n2038 8984\\n590 4237\\n8910 1804\\n1476 7970\\n7083 147\\n5646 1192\\n3693 6428\\n1617 6006\\n6607 7066\\n2362 9410\\n2416 8213\\n6125 3978\\n8547 331\\n7388 2791\\n1608 9441\\n4636 5136\\n3665 3066\\n8746 2800\\n4310 9665\\n793 4989\\n4577 4756\\n1075 2806\\n5582 6339\\n2620 3847\\n5181 8023\\n6399 8802\\n9825 6431\\n868 2069\\n6983 4611\\n6467 1044\\n6503 1991\\n4629 4780\\n2598 5549\\n5735 1810\\n4361 838\\n3080 407\\n8280 5113\\n5592 7297\\n241 5585\\n2680 1820\\n9767 8202\\n8766 7509\\n5744 3813\\n910 3444\\n963 8209\\n107 536\\n437 7029\\n5253 7320\\n1888 4835\\n5571 4152\\n6046 9617\\n1263 3374\\n5154 388\\n8788 808\\n3173 5264\\n6105 2331\\n2741 8587\\n2616 1297\\n5797 7514\\n415 9739\\n3812 9605\\n5387 8274\\n1701 1950\\n6642 9037\\n9613 7852\\n2339 9640\\n1356 1627\\n6719 558\\n8327 8568\\n2872 1432\\n1218 1243\\n7094 6598\\n1466 6582\\n2723 5632\\n8382 2200\\n3896 1504\\n6541 9091\\n4232 5633\\n1812 2519\\n1009 1366\\n2715 1613\\n7942 4899\\n6582 9095\\n3175 5542\\n153 7130\\n8628 5971\\n341 630\\n4201 2760\\n6675 6544\\n9583 9527\\n8414 7972\\n3286 6262\\n1584 663\\n1695 1051\\n8601 6983\\n3875 2208\\n5998 3855\\n3415 3082\\n6587 5962\\n5389 8410\\n8273 6572\\n3770 8898\\n2630 4379\\n4622 1144\\n794 1753\\n5698 7661\\n8419 75\\n2604 9073\\n5564 8371\\n8123 5348\\n9468 6419\\n645 62\\n4090 8945\\n9075 2294\\n5643 100\\n1796 5626\\n3771 7340\\n5955 285\\n621 5724\\n4957 7734\\n2655 1932\\n1751 1133\\n5728 4179\\n3336 4681\\n4707 7939\\n4150 8381\\n2829 2485\\n7820 3552\\n6752 6740\\n3639 4861\\n3603 7262\\n5432 2447\\n4227 7396\\n7896 6505\\n5923 2327\\n8041 6259\\n3447 7063\\n7818 7582\\n1068 3962\\n7238 4348\\n9769 3618\\n2981 88\\n6786 4082\\n8217 4541\\n3208 8611\\n609 7742\\n7063 9931\\n3775 3141\\n5020 5063\\n6409 8272\\n9746 2080\\n5031 2601\\n2637 197\\n2458 519\\n8512 7371\\n301 3387\\n2804 5222\\n1209 9955\\n963 8863\\n1973 6046\\n7540 4050\\n7752 2777\\n5838 248\\n8080 5667\\n4107 1498\\n7063 7795\\n5041 9199\\n1072 9942\\n5076 355\\n2485 7926\\n7189 34\\n3853 2069\\n1458 4204\\n9653 3666\\n9615 9825\\n638 6139\\n278 8095\\n3107 9277\\n7145 6473\\n4743 9613\\n6678 7541\\n4659 382\\n6204 3778\\n6570 1810\\n2080 3149\\n1385 870\\n4834 9289\\n5640 5779\\n9200 1017\\n8631 2250\\n7006 2090\\n8623 4998\\n5839 9667\\n4744 9335\\n1247 7856\\n310 9468\\n389 726\\n4721 2242\\n9829 5420\\n7461 216\\n5347 2674\\n2008 1167\\n6987 5981\\n8150 9220\\n4297 3710\\n6240 9068\\n3665 2905\\n5827 7674\\n4753 7011\\n2484 8462\\n4977 4602\\n3851 3303\\n5794 6323\\n8133 6801\\n4762 9350\\n9508 2487\\n4640 9202\\n3603 5873\\n2757 5399\\n9240 4574\\n9071 6219\\n5306 8032\\n8614 5244\\n8346 6549\\n6673 930\\n5170 5615\\n578 1365\\n9660 5302\\n6138 3228\\n5137 609\\n6823 7083\\n613 5550\\n6417 4171\\n1398 8730\\n7394 3149\\n8924 368\\n2416 9968\\n6872 2916\\n560 4003\\n6900 7770\\n2281 6474\\n7554 7630\\n8844 2581\\n3164 1751\\n6033 9643\\n7753 8315\\n971 158\\n7695 7245\\n6202 2093\\n301 5381\\n4719 8636\\n1329 2788\\n3864 3494\\n9864 5420\\n285 9084\\n9820 2298\\n2252 4909\\n9595 7104\\n590 9548\\n625 6939\\n4103 7173\\n5524 2597\\n7198 665\\n3451 5250\\n182 7128\\n1080 2546\\n1919 9173\\n2947 9014\\n4343 6709\\n9532 2663\\n5683 4398\\n4344 2024\\n4213 8292\\n4154 803\\n7020 1045\\n942 9319\\n4851 805\\n8547 219\\n7969 4513\\n2968 668\\n758 1838\\n7549 3783\\n8973 284\\n3442 7622\\n9246 772\\n8135 2250\\n6030 2438\\n5750 9008\\n7090 6476\\n9157 3391\\n677 5546\\n3955 540\\n225 8902\\n3008 3574\\n4986 1876\\n2654 354\\n8627 5430\\n4686 1387\\n406 8672\\n1522 1914\\n5647 835\\n6451 462\\n6466 9973\\n3320 1584\\n1729 2449\\n52 5982\\n7135 6091\\n4381 864\\n9117 5009\\n8966 4284\\n6424 1001\\n3586 393\\n857 7125\\n9972 6351\\n1545 9346\\n2256 4203\\n6321 2193\\n6377 3639\\n7103 1067\\n7864 5427\\n9609 4246\\n6001 3248\\n189 3734\\n3011 8747\\n8750 2795\\n295 3872\\n3948 8891\\n8060 9476\\n4407 4848\\n3213 5524\\n3763 7144\\n3318 6900\\n1424 8067\\n9429 1839\\n3172 3276\\n4153 2327\\n2509 8655\\n4328 6410\\n7010 2374\\n5664 8497\\n9964 9815\\n5078 1571\\n4226 8855\\n6368 4032\\n7946 2842\\n8280 1145\\n3698 4843\\n6287 1174\\n639 4781\\n672 1251\\n8277 9663\\n3081 3665\\n8412 371\\n1285 101\\n990 5958\\n1153 1970\\n5626 5781\\n8982 4507\\n3519 3693\\n3661 1183\\n5771 8615\\n5963 4330\\n1273 2761\\n2949 8788\\n4091 6327\\n4187 7541\\n7901 7202\\n3773 1311\\n5678 9064\\n6794 3369\\n2787 3697\\n7289 682\\n5973 690\\n146 5463\\n5871 9049\\n5680 8288\\n1733 5233\\n9153 2099\\n5656 3689\\n7501 7596\\n2865 1702\\n5585 5716\\n9059 327\\n234 1319\\n5352 1313\\n2973 9286\\n274 2640\\n8561 1467\\n315 446\\n8008 5134\\n6087 6233\\n4169 8855\\n142 9306\\n4654 2650\\n9006 5048\\n2838 777\\n1309 6262\\n6493 3058\\n2478 2255\\n6287 587\\n7097 8468\\n2885 7443\\n3318 1992\\n7006 3965\\n5016 9228\\n6232 7431\\n3067 3889\\n4752 9084\\n7798 914\\n4850 2488\\n9502 1803\\n171 7981\\n1188 8160\\n7185 4302\\n1398 9572\\n6961 3790\\n4745 6961\\n9131 2991\\n8620 2258\\n3724 1714\\n1352 667\\n2239 5197\\n7288 1901\\n1474 7169\\n4667 6059\\n6897 9622\\n3495 1757\\n8965 259\\n4925 4296\\n9195 8762\\n3681 2987\\n3688 8363\\n645 5048\\n3250 9791\\n1175 9494\\n1952 8376\\n4969 8066\\n596 9115\\n8648 1001\\n374\\n8406 6369\\n8885 6646\\n4799 9358\\n7573 987\\n9130 5043\\n1054 518\\n9037 2210\\n6460 8949\\n2213 7555\\n1018 3128\\n2128 7667\\n1834 4838\\n8487 1552\\n8454 8815\\n8429 5458\\n9787 3242\\n4661 1600\\n2483 7413\\n1339 3579\\n6403 6036\\n3611 8770\\n283 102\\n6055 3331\\n7354 6346\\n9895 9530\\n3668 3233\\n5889 6604\\n2125 2183\\n4833 9172\\n4780 166\\n6068 4586\\n6551 8581\\n1744 4921\\n8214 3648\\n8411 3163\\n8072 4630\\n2308 1755\\n7496 3252\\n9247 203\\n6682 9249\\n7085 5123\\n6471 1902\\n1245 4886\\n9011 330\\n5733 2388\\n5073 4629\\n6132 5854\\n819 1567\\n10000 5439\\n6800 2513\\n9338 5604\\n9955 5231\\n8599 8167\\n3325 2739\\n3171 1834\\n7066 9649\\n9412 5118\\n6800 6768\\n5460 4484\\n6225 9547\\n6729 1371\\n2457 6575\\n7520 7870\\n5465 9720\\n1517 3138\\n2439 6434\\n208 9273\\n572 7226\\n9936 6740\\n1748 6477\\n2900 7344\\n2585 7801\\n3094 4350\\n1542 3138\\n5664 6987\\n1466 419\\n1508 8358\\n3448 8253\\n4331 5981\\n1259 1886\\n5825 7219\\n798 8163\\n5764 359\\n5769 2824\\n7195 9838\\n3348 153\\n8414 6814\\n3508 7892\\n7322 2681\\n9959 9454\\n8706 130\\n357 4035\\n8616 7123\\n8902 2310\\n2620 2269\\n1213 8183\\n1706 6116\\n3139 2959\\n215 1716\\n1997 9146\\n7126 799\\n8035 1288\\n3498 9414\\n4077 69\\n1613 4929\\n8472 7219\\n1037 5927\\n3506 9642\\n7666 1346\\n850 3538\\n3996 8232\\n7555 9676\\n9002 5774\\n1981 6435\\n4647 4554\\n9429 7524\\n1750 1196\\n8603 6826\\n7588 7983\\n1214 4281\\n3446 2160\\n1731 7782\\n1332 8455\\n3269 8836\\n2621 5487\\n3773 1560\\n9065 2642\\n8586 8915\\n2719 8012\\n1230 299\\n4956 3224\\n3422 3924\\n8217 1819\\n2463 1726\\n215 6692\\n6666 2987\\n2259 746\\n6840 1888\\n5513 8898\\n6971 8254\\n9716 2670\\n9016 8110\\n6888 543\\n8829 1178\\n5193 7233\\n1334 1639\\n4545 4351\\n3030 6939\\n7615 7627\\n2293 7536\\n3087 6107\\n607 95\\n9834 4621\\n4095 5856\\n96 9464\\n672 7801\\n6810 4401\\n8205 3915\\n7570 9888\\n7979 706\\n8156 1088\\n8403 8860\\n4823 4823\\n137 1109\\n5518 7099\\n2537 8778\\n2032 8365\\n4681 6191\\n8734 3678\\n4807 6467\\n6679 9464\\n6814 4378\\n9445 4411\\n8281 3966\\n8824 8772\\n1862 4928\\n3561 6616\\n2366 3320\\n4260 8615\\n7800 6333\\n5859 3424\\n6367 262\\n6670 8435\\n4961 3937\\n1881 2956\\n212 8961\\n7858 2406\\n7885 1345\\n8400 8963\\n3983 9371\\n6438 3402\\n7925 5152\\n2651 8554\\n3347 6163\\n2872 1496\\n3851 1970\\n1913 8515\\n8595 855\\n7344 8962\\n9451 4580\\n4456 4241\\n3999 9178\\n4185 1245\\n3085 8954\\n5140 4901\\n3207 7705\\n9133 5601\\n7676 3297\\n9165 7835\\n20 5670\\n2016 9334\\n1225 736\\n336 7998\\n9079 3620\\n4656 8584\\n5667 6404\\n877 7246\\n5661 5466\\n5683 3236\\n6831 6539\\n1968 4997\\n5978 8404\\n820 4231\\n8937 4296\\n992 2197\\n4962 6790\\n3203 2039\\n2203 5867\\n7432 4571\\n5089 3924\\n7799 5153\\n6257 2497\\n1640 443\\n4847 1331\\n4875 583\\n6440 5429\\n215 897\\n545 4323\\n3424 2220\\n7941 1277\\n9223 7809\\n6197 8474\\n5489 4546\\n6444 2445\\n9650 9763\\n1721 1844\\n6065 8490\\n9482 5402\\n9946 8575\\n6140 9923\\n9876 336\\n156 444\\n8781 3081\\n4212 4886\\n6282 522\\n9474 6602\\n8103 4289\\n9487 4121\\n3905 7349\\n7032 5503\\n8790 1705\\n1849 7672\\n6818 6611\\n4939 3017\\n8977 1466\\n5297 1743\\n3536 1460\\n647 7509\\n9334 3164\\n630 8510\\n8537 9759\\n8608 5429\\n7762 8389\\n319 529\\n1359 1448\\n1460 7424\\n7334 1238\\n4133 5313\\n1214 6465\\n3651 5762\\n8766 3001\\n2737 363\\n2521 3894\\n8022 5488\\n2231 1449\\n7530 6231\\n7293 6925\\n2825 634\\n9063 6616\\n2291 9285\\n7227 6634\\n9690 686\\n399 966\\n2785 1212\\n1242 9780\\n1815 4661\\n2578 1965\\n2050 6327\\n6174 7148\\n3233 7147\\n8251 1027\\n9338 6502\\n2845 5559\\n4482 279\\n8226 7269\\n570 472\\n8638 354\\n4044 1013\\n2143 3403\\n7034 8209\\n6630 2403\\n6860 849\\n5528 3726\\n6408 3809\\n9988 746\\n904 5200\\n3912 4969\\n5029 4584\\n6918 8811\\n9454 8898\\n4011 1358\\n8410 967\\n1119 6474\\n781 4152\\n7689 4664\\n3825 1900\\n6374 5714\\n4668 3519\\n5722 4048\\n4279 6161\\n2309 7887\\n6707 6697\\n7943 666\\n8311 3871\\n1163 8619\\n5945 9445\\n5483 1281\\n1339 3290\\n2454 7721\\n57 2934\\n6291 7135\\n8675 2126\\n6956 6173\\n2352 2572\\n2681 9789\\n7478 3738\\n8899 2657\\n5924 8214\\n2784 1014\\n2044 6861\\n7079 1637\\n885 9704\\n5123 2786\\n6671 5419\\n7539 972\\n5520 4578\\n274 3240\\n1135 6939\\n8179 2913\\n8175 3922\\n4833 5843\\n6588 5273\\n7509 184\\n9273 9236\\n6673 9584\\n3530 1089\\n2825 5043\\n1426 2592\\n7421 6386\\n461 2122\\n9248 3291\\n2999 4188\\n4367 6513\\n3561 1138\\n789\\n5104 2710\\n221 1790\\n3377 8315\\n7619 4395\\n7853 3522\\n4942 6055\\n6241 3622\\n4647 1272\\n7602 6935\\n6938 6501\\n8493 6566\\n3916 2008\\n9620 8722\\n5363 4091\\n7233 8838\\n7292 4017\\n7086 6854\\n6099 1940\\n6131 544\\n2648 9603\\n1213 2753\\n5868 3944\\n7594 7584\\n4702 6114\\n9649 6863\\n5394 9593\\n3084 3676\\n2035 3980\\n8131 5847\\n957 721\\n1582 9600\\n5123 5648\\n7241 8064\\n9617 8730\\n6683 6184\\n5898 2801\\n5459 740\\n8550 7848\\n9400 1457\\n456 7845\\n769 8285\\n8409 1368\\n4949 974\\n3765 5428\\n2769 3199\\n6045 3189\\n5512 1289\\n469 347\\n6649 5864\\n7044 4388\\n7403 3858\\n2561 6107\\n7912 7090\\n5454 8134\\n7454 3399\\n5828 7271\\n7625 4475\\n2360 9014\\n6231 1330\\n6608 9146\\n4568 231\\n1013 2597\\n5109 2328\\n1296 3471\\n7746 1278\\n4956 5916\\n7133 1314\\n3618 6231\\n1924 1724\\n3436 2776\\n4685 6049\\n8067 2375\\n8391 6636\\n3990 1531\\n9634 6144\\n9991 5668\\n88 5612\\n3715 8385\\n8751 1597\\n7793 4725\\n692 299\\n8542 2226\\n8227 1840\\n865 5274\\n3517 7980\\n4877 7643\\n8580 177\\n8830 2891\\n1935 5199\\n8578 9872\\n5302 4153\\n4735 1682\\n8882 9621\\n6258 2155\\n2882 2404\\n1259 2987\\n550 9587\\n6995 9314\\n6815 1169\\n4699 9080\\n2168 8619\\n6066 8270\\n7473 1832\\n5708 6046\\n2331 8086\\n4837 9487\\n1624 8870\\n6414 5396\\n2566 5001\\n7567 3346\\n1022 863\\n3709 802\\n3879 8885\\n3659 4408\\n3757 9543\\n999 8150\\n3348 5210\\n8211 5238\\n6432 9021\\n8427 628\\n9939 6549\\n6381 7075\\n5957 9155\\n8230 26\\n2058 7934\\n9582 2602\\n929 2507\\n8597 7113\\n7898 5988\\n5412 7096\\n991 5889\\n9427 2696\\n5941 5402\\n4697 5780\\n2298 2413\\n5546 8183\\n1991 8876\\n7128 2052\\n3376 998\\n868 3800\\n7672 7047\\n6082 5756\\n9391 3352\\n3462 6171\\n1736 1249\\n595 784\\n2079 331\\n146 9019\\n6376 1086\\n4065 6801\\n1951 1868\\n831 6667\\n1791 152\\n4605 9013\\n5004 2993\\n9697 4904\\n3395 1990\\n5126 7186\\n2573 5285\\n5754 8144\\n3706 770\\n5958 8708\\n7649 177\\n2926 6964\\n2627 6978\\n1446 4006\\n9668 9018\\n3073 9983\\n4505 4507\\n520 7778\\n8423 7511\\n7210 6598\\n1923 1217\\n960 3096\\n3131 463\\n3305 2375\\n5546 4954\\n6578 5802\\n3649 1064\\n9473 5055\\n9771 721\\n8470 3506\\n9503 6416\\n6146 2851\\n314 8352\\n9751 6610\\n1479 3582\\n5320 2184\\n5066 1887\\n7014 9197\\n2526 170\\n2582 7905\\n7321 9292\\n759 3594\\n1553 7130\\n4084 759\\n318 7415\\n6244 2648\\n783 5696\\n1189 8026\\n4235 7236\\n319 1012\\n5810 9860\\n6713 6256\\n2916 1191\\n3917 456\\n6571 8066\\n7146 9305\\n1978 4719\\n5221 1804\\n7505 3861\\n9115 5515\\n4183 3971\\n7240 9057\\n2264 471\\n4905 6641\\n1151 1260\\n763 7739\\n3874 7807\\n8432 7098\\n870 8454\\n1632 1914\\n309 9079\\n2767 6921\\n509 9746\\n6280 8570\\n8119 3181\\n3362 1120\\n5092 7335\\n5371 8227\\n6798 5465\\n1721 756\\n8905 9700\\n9969 710\\n7937 6757\\n2862 1579\\n7918 4570\\n6196 6935\\n5718 7132\\n7459 7206\\n3108 6514\\n1514 3510\\n7801 6463\\n3844 448\\n7420 4655\\n3888 8884\\n4120 3810\\n3948 7327\\n9479 108\\n2543 697\\n9199 9795\\n8885 1194\\n5731 7286\\n9604 2820\\n154 8309\\n5744 6706\\n3964 8153\\n7090 4232\\n3206 5876\\n3472 4503\\n5941 6877\\n1686 9493\\n4602 7885\\n830 805\\n1455 7245\\n388 8921\\n2119 9021\\n9611 6618\\n477 5476\\n3852 2401\\n7396 856\\n5684 7482\\n8785 259\\n6254 6852\\n3958 7598\\n556 2334\\n362 8232\\n9191 2076\\n7721 8200\\n142 5072\\n2979 2956\\n1783 6729\\n4178 2030\\n5670 8236\\n4646 2759\\n2295 8005\\n429 374\\n7705 2010\\n8918 3835\\n7823 8745\\n8919 1909\\n6698 8154\\n852 2882\\n9620 1247\\n1575 5703\\n7044 8416\\n4373 7085\\n5175 4699\\n7543 6005\\n4449 3241\\n6084 9233\\n2700 5690\\n3013 7668\\n8183 9568\\n266 5770\\n7483 4059\\n4479 3068\\n4719 8107\\n2889 2464\\n4383 7786\\n5 1335\\n42 5856\\n1515 5166\\n5949 1774\\n7707 7918\\n4527 9978\\n8182 7080\\n6875 6715\\n9385 7118\\n7275 7652\\n8372 668\\n1701 1193\\n6024 7452\\n4106 3891\\n4598 5928\\n3327 4434\\n9659 3852\\n9045 1808\\n5438 7205\\n4638 4359\\n7472 1645\\n2407 9198\\n5974 4905\\n684 5641\\n7247 6456\\n2234 7167\\n7614 1017\\n4724 9565\\n79 7139\\n2236 2145\\n7382 2295\\n8232 2422\\n566 3618\\n4903 5256\\n9322 1519\\n2738 2546\\n7940 2563\\n1974 1976\\n9248 2040\\n1494 8565\\n9756 7630\\n1816 6342\\n6561 369\\n8212 3573\\n1872 114\\n5081 9724\\n5786 8981\\n3351 3249\\n3245 8766\\n315 1788\\n4517 243\\n5103 1018\\n8246 6002\\n5 7992\\n3969 4280\\n1886 8419\\n3368 887\\n631 3283\\n414 1048\\n5066 8025\\n2697 9852\\n5066 4560\\n7130 7930\\n3545 3627\\n8556 2127\\n2810 6399\\n4083 8017\\n8591 6432\\n7462 8836\\n4958 8326\\n5815 1118\\n4317 8357\\n8040 958\\n9918 6433\\n1588 748\\n8307 4088\\n2689 4311\\n7626 4823\\n938 6658\\n546 2394\\n8066 1594\\n3221 2367\\n8273 474\\n1271 6252\\n8229 6488\\n8775 6926\\n4694 6676\\n7375 3075\\n9144 8603\\n2359 6895\\n8447 2636\\n1788 8069\\n899 4350\\n3029 5422\\n303 6672\\n6935 9405\\n1079 7351\\n4590 4366\\n5390 6948\\n8291 7613\\n485 5168\\n144 4016\\n7347 2255\\n6468 9657\\n3184 4933\\n5178 9540\\n9035 6971\\n6971 6579\\n2861 4474\\n9411 1181\\n3831 4860\\n958 2156\\n5862 5088\\n7795 7317\\n582 4236\\n7989 6893\\n2741 4399\\n3822 2904\\n4362 6544\\n2504 381\\n9390 2722\\n5151 426\\n1881 8552\\n7233 2300\\n5735 7395\\n3832 3072\\n57 5308\\n8591 6638\\n3137 149\\n8001 2573\\n9332 3391\\n9401 5316\\n7897 3142\\n7550 2120\\n7928 4447\\n7918 7571\\n1849 3819\\n5966 881\\n1739 7879\\n7329 7571\\n9263 490\\n1961 6926\\n7884 5823\\n6689 8998\\n361 2229\\n1866 4816\\n7435 3713\\n5132 7575\\n5704 496\\n7088 4284\\n25 9633\\n7827 3454\\n4102 1712\\n4790 238\\n80 2505\\n1864 4758\\n7728 5672\\n9673 1749\\n6385 9066\\n3399 4275\\n1187 5951\\n208 3448\\n2762 9054\\n462 8849\\n8458 8129\\n906 6469\\n4965 6491\\n7519 7836\\n5789 9809\\n2980 5960\\n1855 4737\\n8899 109\\n6091 2744\\n9420 2886\\n1979 8232\\n928 9868\\n9779 9087\\n121 7219\\n4806 3398\\n4322 6317\\n3210 8151\\n9737 2217\\n3684 8650\\n3196 1176\\n1101 6450\\n8569 5314\\n2588 1525\\n9763 8308\\n531 9141\\n7456 3758\\n5179 9507\\n582 5111\\n8996 4030\\n8896 8858\\n4184 1243\\n9049 8728\\n8155 1259\\n9660 9242\\n6786 6733\\n2058 9661\\n4743 8852\\n7959 4997\\n5672 7302\\n7095 5109\\n521 6042\\n8722 7961\\n2765 1539\\n9065 2764\\n8709 7336\\n7311 7462\\n5093 1022\\n167 5619\\n8839 1999\\n36 5001\\n9026 2767\\n4507 437\\n4412 7683\\n7569 5838\\n2461 2246\\n3572 2896\\n4407 8098\\n3367 8466\\n5032 7118\\n9399 4767\\n1466 7462\\n88 5610\\n3416 7477\\n4173 9516\\n5929 9686\\n8458 9892\\n203 8503\\n6841 2318\\n9493 5148\\n8406 6303\\n3407 3303\\n4048 5225\\n80 1351\\n8638 2952\\n768 8349\\n9102 7951\\n9854 710\\n9238 2800\\n9768 6627\\n460 9718\\n7578 3261\\n65 9626\\n9530 6140\\n9665 9968\\n4999 2723\\n6676 6721\\n7032 9180\\n4561 2949\\n3697 9371\\n5389 2970\\n7825 5668\\n7526 6263\\n3894 8977\\n8894 5568\\n6853 3804\\n3932 5777\\n6022 4029\\n401 8721\\n2809 1275\\n5924 6394\\n7390 1534\\n1667 1643\\n905 2806\\n637 9690\\n4645 5568\\n144 4632\\n6089 3706\\n5061 2396\\n9823 4970\\n5007 1494\\n6550 9191\\n2576 466\\n6403 111\\n5663 4820\\n6917 938\\n6728 8932\\n550 5220\\n5632 738\\n3435 2736\\n1100 2182\\n4398 4072\\n4025 5100\\n2272 388\\n4249 3682\\n9703 8392\\n1319 3044\\n3565 4618\\n6307 9509\\n1300 7493\\n3867 2136\\n1063 9166\\n9470 3181\\n9192 3309\\n7495 4208\\n1404 2730\\n6181 484\\n9779 5705\\n2140 8937\\n8630 635\\n4943 1852\\n8394 7515\\n186 5464\\n5636 5501\\n6404 9078\\n3660 8945\\n2127 8209\\n9788 9422\\n2555 3390\\n6463 1742\\n4815 6614\\n5126 1335\\n561 5937\\n5992 2174\\n598 8834\\n605 6253\\n7377 2883\\n5369 3481\\n3531 9187\\n58 7231\\n6018 445\\n1650 1613\\n6666 1099\\n497 5966\\n4949 6059\\n5551 7053\\n4435 4548\\n6065 2153\\n2944 8551\\n3958 3762\\n8505 143\\n7649 6282\\n1099 596\\n772 9301\\n8472 6437\\n3010 7471\\n7588 5523\\n5332 4081\\n8893 2671\\n5700 1927\\n9698 7649\\n4229 8807\\n2290 9561\\n7902 7554\\n3482 2268\\n6786 5797\\n4166 3760\\n817 6982\\n89 8794\\n1217 1633\\n9479 6527\\n7489 7915\\n8071 1235\\n6027 4904\\n5576 3807\\n6585 1674\\n1295 6873\\n1597 1224\\n2713 9157\\n2182 9224\\n5958 4375\\n4823 8902\\n2334 7402\\n9446 7960\\n7812 5143\\n893 1234\\n9972 4350\\n9087 5021\\n5901 597\\n5340 395\\n2651 221\\n1707 2616\\n7512 1399\\n1565 3952\\n442 7885\\n4405 9521\\n3341 9231\\n28 8924\\n6465 8859\\n4777 992\\n5639 405\\n8573 9318\\n7307 5170\\n4954 5477\\n9921 7237\\n8185 7052\\n2899 8501\\n8721 2872\\n5260 4815\\n1595 5899\\n2487 2499\\n7354 2715\\n3689 6398\\n7444 5114\\n4655 3042\\n349 8078\\n4262 5867\\n3148 7068\\n6518 5945\\n4032 226\\n657 6981\\n464 6944\\n6505 934\\n2171 6990\\n4353 9941\\n3420 2292\\n5233 4540\\n8622 2086\\n6126 6422\\n9882 7009\\n7576 6332\\n2734 6414\\n7956 9588\\n7186 5455\\n4110 5703\\n7000 6263\\n5630 9101\\n5882 7640\\n348 6501\\n9970 8857\\n2079 8868\\n3373 8888\\n893 3348\\n8817 9173\\n476 8086\\n4224 3309\\n6905 9926\\n7887 3708\\n4626 5820\\n4696 1665\\n1968 1839\\n4828 2599\\n6922 7568\\n9167 9823\\n5424 2923\\n3134 5912\\n7896 8323\\n7426 3344\\n5705 1691\\n5158 9487\\n134 5263\\n9525 4809\\n8529 5606\\n6939 7086\\n889 9048\\n4491 9901\\n8453 7791\\n4981 1547\\n4236 7192\\n4431 3186\\n4255 9331\\n4488 5928\\n670 489\\n3883 2759\\n5195 3331\\n5908 2082\\n8673 9196\\n8691 7270\\n5792 3776\\n2797 5582\\n2552 7763\\n8343 1608\\n4163 5446\\n7124 9283\\n4952 2712\\n8298 4860\\n4929 2043\\n9732 4620\\n9297 5870\\n9340 1787\\n2166 5299\\n7341 7682\\n3775 9250\\n4953 401\\n2955 3473\\n8847 5738\\n913\\n4873 2479\\n1003 7629\\n4251 819\\n6887 9843\\n9815 739\\n6560 6629\\n683 3627\\n3208 3924\\n4423 4122\\n2770 2713\\n3540 3287\\n8161 3526\\n8441 1643\\n2370 4320\\n2021 6075\\n1424 4287\\n1390 8429\\n1419 6951\\n8333 2557\\n274 5306\\n1197 8270\\n7843 1593\\n26 5160\\n1566 1195\\n3436 4951\\n298 8190\\n883 1703\\n1304 1985\\n5504 2314\\n5877 6287\\n3419 8039\\n5196 6416\\n3530 2284\\n5168 1027\\n9905 5103\\n3735 8841\\n44 3992\\n7468 8153\\n7866 6330\\n3886 2516\\n9325 2016\\n7581 4432\\n6974 8650\\n2659 8275\\n9884 8713\\n5624 5581\\n1328 6147\\n8280 7793\\n6698 9477\\n9104 9033\\n4159 9946\\n5623 1421\\n4062 8140\\n5195 7659\\n6092 3037\\n8612 1043\\n2971 7376\\n8819 5149\\n839 7571\\n2672 7681\\n7625 4645\\n6922 9350\\n5603 3896\\n9737 3149\\n3170 1169\\n8899 3244\\n6653 5846\\n3749 5906\\n7300 412\\n542 5835\\n3320 5772\\n4229 2506\\n7895 7001\\n377 100\\n5974 3884\\n178 6568\\n9630 1872\\n9789 2525\\n7494 1906\\n5229 7968\\n9045 2071\\n6377 8094\\n9421 9379\\n6602 3788\\n4029 3184\\n3805 8209\\n5686 7063\\n7147 3082\\n8809 9046\\n4560 479\\n3464 5218\\n8883 2654\\n6360 2552\\n7833 913\\n769 8082\\n5942 25\\n4077 5699\\n5599 9790\\n7082 1061\\n8576 5391\\n4674 8418\\n6166 5272\\n6829 4525\\n977 1632\\n5562 9535\\n7630 9767\\n505 1184\\n6090 725\\n625 8700\\n5149 5774\\n8450 8378\\n6954 2620\\n6139 3481\\n589 8126\\n1753 7670\\n2275 4632\\n439 2959\\n5357 7891\\n7322 8347\\n3376 1588\\n2340 5263\\n337 9753\\n9576 6879\\n526 5087\\n1099 3000\\n2368 5870\\n6903 7299\\n8431 3804\\n1718 5810\\n242 7042\\n7346 9483\\n575 1595\\n2069 3720\\n2614 6812\\n2089 3561\\n5991 8129\\n242 4911\\n836 3649\\n8119 9617\\n8804 7250\\n681 3866\\n3866 4667\\n7778 897\\n3216 2431\\n4223 2397\\n7240 6536\\n3729 6695\\n8203 2853\\n7439 5762\\n7965 6964\\n9671 9639\\n8907 8176\\n980 6381\\n4578 3121\\n6037 4158\\n9074 1116\\n7885 3496\\n1541 4023\\n8223 9326\\n2534 4477\\n8662 4863\\n6870 3523\\n7729 8289\\n6987 1911\\n5373 9588\\n8620 6361\\n3842 6758\\n5670 3557\\n7506 1352\\n7233 7485\\n3782 1492\\n4710 9855\\n3812 1455\\n761 373\\n4292 8462\\n1322 3\\n3302 10\\n3225 6570\\n7468 9174\\n2029 1988\\n7529 6659\\n4624 4275\\n9024 6372\\n9457 5410\\n4887 5080\\n4197 9182\\n142 8034\\n8114 5510\\n5589 1814\\n8400 9458\\n899 4570\\n8063 2286\\n2557 6794\\n4736 8531\\n4982 9844\\n5266 5262\\n905 6647\\n5513 1675\\n297 7255\\n322 4440\\n5675 3082\\n8735 1934\\n3082 78\\n7920 7916\\n9236 7742\\n7918 6328\\n5162 9924\\n4486 5024\\n5355 4379\\n1981 4390\\n32 4061\\n7775 1204\\n4638 433\\n5973 9973\\n2495 7698\\n335 5497\\n8866 413\\n8617 455\\n9315 3510\\n6491 6535\\n7820 4115\\n7721 2884\\n9224 4189\\n9523 1346\\n9621 2003\\n5716 2726\\n5186 1295\\n8471 3198\\n1778 3767\\n5303 7559\\n77 9832\\n5520 2488\\n1790 3489\\n4655 4986\\n9321 4386\\n7970 8417\\n7674 5384\\n1277 3939\\n9199 5452\\n4887 2324\\n5051 6467\\n2514 3241\\n7070 5715\\n5526 3766\\n1132 1642\\n8395 3385\\n5093 2509\\n9486 1525\\n7288 8701\\n842 9197\\n2044 8217\\n2157 2675\\n2133 8965\\n9785 4324\\n8791 1118\\n3751 4336\\n6469 8070\\n9639 9479\\n5013 869\\n4012 5464\\n8297 6711\\n9926 5079\\n6922 4948\\n6183 2545\\n432 9295\\n5372 3454\\n37 2634\\n3815 1557\\n9101 6743\\n7447 3347\\n6024 405\\n387 7818\\n8595 3025\\n1919 6739\\n1324 5306\\n9127 3679\\n6627 365\\n4596 9666\\n8539 4745\\n6532 2112\\n9637 7472\\n2940 4296\\n6295 8062\\n3134 9083\\n6449 9382\\n7044 4316\\n8094 1396\\n3355 3055\\n613 2916\\n3217 1625\\n6667 721\\n5485 4898\\n6970 9079\\n5572 1905\\n7555 146\\n9753 5978\\n893 6107\\n4004 5585\\n213 2983\\n5472 5966\\n5573 6415\\n1536 4812\\n5576 549\\n3124 9412\\n2531 7180\\n3456 4584\\n6428 6649\\n1069 5410\\n4623 2310\\n5844 1965\\n1980 2091\\n2480 5419\\n9894 6601\\n6447 3746\\n9371 8208\\n377 7983\\n3324 97\\n5299 2395\\n860 8414\\n7090 1116\\n4591 5698\\n892 8618\\n2931 2247\\n35 4929\\n2643 4959\\n6752 681\\n8721 4242\\n4120 9752\\n5406 6761\\n9723 5746\\n390 9100\\n1570 6974\\n9789 7300\\n9216 7026\\n2886 43\\n6364 4858\\n2452 8415\\n8709 689\\n2921 2446\\n6948 4689\\n1502 8174\\n6560 7221\\n4533 7485\\n4797 1842\\n6704 8906\\n8025 68\\n4811 1363\\n2165 2251\\n2143 9248\\n4516 1279\\n6240 8091\\n2001 6178\\n3957 2541\\n2863 7733\\n2275 999\\n1231 689\\n2216 4897\\n4091 3713\\n388 4665\\n2833 2971\\n7639 1157\\n8206 6361\\n2454 6821\\n3545 1256\\n5918 8089\\n6385 4235\\n8989 337\\n3463 2722\\n9614 4830\\n9883 240\\n8026 9001\\n3889 6392\\n231 1162\\n6449 5823\\n6492 7055\\n9641 678\\n7477 8750\\n4984 7895\\n1264 4555\\n2825 5287\\n6790 9980\\n6275 1177\\n2342 1809\\n876 9946\\n2674 9265\\n7985 3571\\n4549 6885\\n2479 117\\n4307 1901\\n653 2726\\n6666 7919\\n6933 5572\\n669 7580\\n6092 1892\\n8825 3796\\n5489 4269\\n7525 3893\\n8621 466\\n6949 5790\\n5847 8057\\n8821 7696\\n6743 1062\\n659 8618\\n4320 2357\\n2457 9471\\n8346 6875\\n4570 4688\\n9287 5660\\n6199 298\\n9942 4941\\n1065 6862\\n7968 4552\\n9375 8278\\n6384 624\\n8942 9591\\n7082 3001\\n8701 991\\n9438 7726\\n2910 6891\\n6134 9066\\n8312 2784\\n4789 9932\\n2008 7403\\n6566 7900\\n4815 5080\\n9776 2150\\n9258 10\\n1571 8315\\n2907 622\\n1954 6383\\n4069 7276\\n7736 6425\\n4946 8174\\n3220 6367\\n6220 2384\\n9135 7496\\n5682 4390\\n567 4928\\n3303 2628\\n7361 3645\\n5129 114\\n3312 6082\\n3723 7095\\n4505 9758\\n8899 6051\\n1299 3606\\n965 2418\\n7477 6277\\n5478 5321\\n2337 5308\\n4997 3922\\n9634 4429\\n6293 2958\\n3583 297\\n1519 6251\\n9536 4448\\n4869 4808\\n1925 7794\\n2431 7292\\n4423 1191\\n7545 6015\\n157 600\\n1588 4360\\n2011 3762\\n6747 768\\n2544 8460\\n411 203\\n9221 6118\\n2578 4015\\n6884 50\\n9298 3579\\n152 9561\\n795 6783\\n5480 2795\\n3109 4480\\n7525 8436\\n8989 3771\\n9127 6567\\n9160 9496\\n4742 7071\\n4629 2474\\n1144 3146\\n8011 2734\\n9898 7360\\n9748 9765\\n6735 2737\\n1916 6616\\n9374 6215\\n329 837\\n4350 9994\\n3326 2189\\n5013 450\\n3982 7156\\n6151 3940\\n9556 6826\\n9683 6734\\n6884 6963\\n4127 3747\\n1425 9080\\n688 5347\\n1006 9730\\n3106 1995\\n3979 6202\\n2497 9967\\n672 9543\\n3439 9297\\n6302 3259\\n8880 2871\\n9274 4526\\n2202 5589\\n3029 1552\\n8864 6395\\n1638 4654\\n8739 6009\\n7191 5375\\n8218 711\\n36 7580\\n6247 2144\\n4925 1023\\n9287 9967\\n2881 7468\\n3142 254\\n8333 4671\\n6192 7233\\n4477 2479\\n8309 7901\\n237 6988\\n2215 7332\\n5975 2780\\n3414 9757\\n9392 7737\\n1356 1495\\n2674 1922\\n9257 533\\n2423 757\\n3976 287\\n7641 2034\\n5769 60\\n7632 4847\\n9134 7214\\n8627 2732\\n4235 3890\\n1684 6245\\n2671 1704\\n7235 6533\\n5518 7148\\n9831 9141\\n1997 9159\\n1465 1780\\n1200 7896\\n3054 454\\n5651 361\\n1372 6932\\n2772 8611\\n6877 487\\n2058 2508\\n8284 5556\\n5247 9031\\n7612 2938\\n5148 2733\\n3226 4103\\n4288 9221\\n744 462\\n262 9522\\n1716 8002\\n7135 493\\n7584 7626\\n2784 9520\\n6785 4839\\n8800 4687\\n9287 7798\\n365 1147\\n3860 7609\\n3612 5111\\n9973 325\\n7196 1421\\n5412 5062\\n299 342\\n1054 9995\\n7434 4534\\n2064 1840\\n9150 8262\\n7285 8388\\n1626 7523\\n4745 2513\\n4059 2809\\n8876 1974\\n9154 5688\\n8893 1178\\n8380 3193\\n4914 5552\\n708 4871\\n8599 2577\\n2422 32\\n2687 968\\n9515 4895\\n1665 6968\\n7039 1829\\n8590 287\\n9570 637\\n3204 9213\\n2951 4891\\n1796 7440\\n4855 2206\\n3734 2493\\n6480 6970\\n7545 1338\\n1512 9256\\n4155 8121\\n6799 2863\\n5898 5606\\n6478 2917\\n1206 404\\n1798 1204\\n2140 1807\\n2802 169\\n7639 8773\\n5193 901\\n3135 4737\\n3519 9868\\n7844 5584\\n6730 8185\\n7474 9527\\n2978 4426\\n3380 6480\\n1986 6319\\n1864 803\\n6576 1712\\n4397 974\\n5107 1258\\n8671 822\\n3970 805\\n1884 6940\\n8774 9282\\n8243 9228\\n5384 6319\\n8738 9957\\n1042 13\\n8532 1158\\n1335 7227\\n3551 2070\\n7665 6787\\n1149 694\\n5822 9869\\n6264 9450\\n5539 6628\\n8712 5392\\n7790 2876\\n3502 7231\\n5460 9352\\n6822 9380\\n7296 6127\\n9168 8802\\n5252 2040\\n6323 1497\\n7809 7567\\n1575 2166\\n1748 7523\\n6082 4925\\n7881 2256\\n3819 4674\\n8699 4580\\n9637 7059\\n337 2944\\n3011 7870\\n7112 2780\\n396 7266\\n6091 2622\\n795 912\\n7965 4365\\n4224 4747\\n7091 4313\\n614 2217\\n1606 4435\\n7206 639\\n7697 492\\n7670 1500\\n7797 1210\\n7125 5399\\n9684 9215\\n8091 7143\\n9574 7056\\n5048 4143\\n4769 8360\\n4099 2906\\n8460 106\\n7143 9560\\n7388 975\\n1498 5913\\n736 3345\\n3807 7542\\n3161 514\\n6903 8887\\n7027 4588\\n8403 2230\\n1916 9420\\n4805 4746\\n363 1268\\n2678 7986\\n3567 7501\\n1682 8115\\n3358 8\\n708 4693\\n9388 1618\\n6757 3270\\n74 1333\\n870 3908\\n4181 5345\\n5300 4200\\n5196 877\\n5 797\\n994 17\\n1637 4365\\n971 8031\\n3233 1230\\n6326 2991\\n3226 8465\\n3340 713\\n7276 6342\\n6984 4141\\n8182 2493\\n9805 169\\n173 5495\\n2511 346\\n1498 8016\\n7410 6434\\n4840 157\\n3312 9455\\n7154 6732\\n319 2203\\n1492 9144\\n3487 62\\n7806 5372\\n770 1573\\n6341 7991\\n390 1391\\n659 1459\\n988 3847\\n283 1226\\n8040 8079\\n730 9546\\n8472 6125\\n4066 728\\n5806 6939\\n157 7257\\n6285 8693\\n307 7984\\n5794 4054\\n3469 1446\\n7390 4176\\n2912 5177\\n2986 2719\\n5114 261\\n2557 5113\\n6375 6311\\n7419 896\\n820 9036\\n5950 6473\\n3397 8897\\n4194 1475\\n7749 6797\\n3365 3730\\n7657 3052\\n4760 7101\\n2409 4729\\n5400 6546\\n3711 3379\\n4106 6167\\n1522 1681\\n7312 413\\n646 4584\\n8919 4847\\n9403 9631\\n7780 9800\\n4888 2284\\n8312 3932\\n8912 8830\\n5910 9164\\n9745 893\\n7662 1763\\n9121 3386\\n6213 4568\\n8247 9083\\n1717 6878\\n9485 138\\n1284 1330\\n1254 9214\\n6738 4729\\n9755 4298\\n1851 3268\\n1434 51\\n2749 7694\\n1126 5812\\n10 2392\\n3349 462\\n9265 5540\\n9660 5004\\n79 4184\\n1122 9255\\n2404 88\\n2051 3268\\n9254 9718\\n7202 4497\\n2353 7508\\n5969 5574\\n2086 9355\\n1115 8616\\n8861 2244\\n6948 4944\\n7679 5659\\n2027 780\\n2203 9641\\n5157 2688\\n2403 4597\\n7672 5479\\n3007 6946\\n5452 658\\n3225 4260\\n7186 8226\\n7022 7366\\n7811 3410\\n5886 4790\\n1103 3206\\n850 1866\\n8654 5239\\n989 135\\n1846 1122\\n4725 109\\n6211 8311\\n6664 1697\\n8783 483\\n6864 6122\\n7284 2795\\n5735 2310\\n8359 4316\\n7237 1996\\n2736 1728\\n138 7011\\n1126 6781\\n3913 7199\\n638 5695\\n2659 6662\\n6019 1287\\n1657 9616\\n2249 9795\\n6488 9989\\n9427 3471\\n5178 8242\\n4977 1777\\n3159 7420\\n4596 3854\\n498 9404\\n567 9192\\n7394 8153\\n8197 5874\\n567 5354\\n2745 8614\\n3815 5726\\n6039 8945\\n5836 1539\\n9366 1179\\n5430 7075\\n899 555\\n3009 3574\\n8296 3929\\n1867 6023\\n9369 628\\n9068 3331\\n5503 9632\\n9259 7248\\n3551 7981\\n4009 7349\\n2888 3276\\n284 5544\\n5288 8090\\n3275 9664\\n7872 4061\\n3476 6436\\n7925 2240\\n1693 7054\\n6038 5751\\n8828 7235\\n9909 3871\\n5006 5353\\n9545 9816\\n4756 4970\\n1343 4403\\n5213 6347\\n270 8114\\n1477 9313\\n6627 5297\\n7569 2359\\n3056 9723\\n7818 997\\n1166 8065\\n8604 5667\\n53 1035\\n3616 2523\\n1314 5207\\n8675 4336\\n5295 7363\\n1436 2167\\n8668 2567\\n8843 5703\\n4509 6402\\n4284 892\\n5031 8613\\n519 4350\\n9324 3986\\n6303 8424\\n2743 8714\\n8013 3343\\n4509 7621\\n456\\n8331 4910\\n5620 502\\n1688 8957\\n7346 1210\\n1188 8360\\n8949 524\\n9590 1793\\n7599 5816\\n9234 1617\\n4643 7733\\n2291 4506\\n7725 6359\\n5028 6687\\n3469 7481\\n1082 8871\\n3467 402\\n715 1249\\n876 3391\\n3979 5044\\n8889 2840\\n7003 5096\\n8854 2375\\n6978 9895\\n6150 5038\\n5632 1827\\n3044 7449\\n6784 3913\\n4410 5455\\n6093 5938\\n4467 3617\\n5227 5786\\n3492 3140\\n7121 5633\\n6438 7106\\n3536 3741\\n8531 2400\\n8279 6664\\n333 4390\\n2449 8479\\n6074 2697\\n4715 4754\\n4544 6546\\n9 2115\\n3660 3926\\n1470 3372\\n9251 7662\\n2190 2272\\n5203 8653\\n6581 4367\\n9080 3155\\n2153 8082\\n7649 2664\\n9593 2144\\n5534 3053\\n7086 8336\\n2961 8641\\n1905 6753\\n1965 6340\\n5775 8584\\n9568 5214\\n9837 3695\\n304 5097\\n1418 1627\\n6252 753\\n2932 2455\\n8237 779\\n976 3402\\n7158 1494\\n4555 2027\\n769 6988\\n8784 624\\n7751 1614\\n6413 6308\\n3084 8236\\n1013 3812\\n3921 7303\\n2316 2051\\n7341 1389\\n5562 9064\\n8011 2501\\n3435 7184\\n5720 5070\\n5980 6609\\n6021 6687\\n3696 4121\\n5983 1221\\n5706 998\\n6564 39\\n218 8583\\n8908 6740\\n8800 861\\n9417 7362\\n8731 7028\\n6182 9731\\n9178 3271\\n1363 8489\\n7879 3460\\n2665 7434\\n7923 4833\\n561 6920\\n6680 7186\\n300 5676\\n8176 3092\\n5500 1941\\n2082 2408\\n5472 1991\\n2894 1066\\n3813 1606\\n2956 139\\n1259 6433\\n6078 1250\\n8209 3894\\n4936 1707\\n1604 1926\\n4390 4990\\n5177 1941\\n116 5089\\n9234 5105\\n3848 3651\\n6980 9012\\n4468 5163\\n7293 7537\\n4961 7452\\n153 8661\\n7013 3816\\n45 232\\n4010 9617\\n7251 8770\\n9059 4688\\n8669 1795\\n6127 5836\\n439 8860\\n8569 8775\\n1963 1895\\n6617 9108\\n6857 6814\\n9367 5838\\n672 1524\\n1178 7490\\n4424 6760\\n2258 3924\\n1106 6657\\n5455 3428\\n539 6001\\n6288 6494\\n4205 1676\\n4068 1154\\n4274 624\\n8698 442\\n6258 9961\\n7574 9924\\n5604 3000\\n6419 8223\\n3168 5846\\n1733 4208\\n1418 9278\\n3891 266\\n162 4867\\n7803 3141\\n9655 510\\n39 1581\\n7074 7897\\n8224 9097\\n7615 2246\\n6076 1849\\n6047 8019\\n2854 9081\\n924 226\\n6835 9440\\n3875 4283\\n2685 8260\\n7061 9247\\n3537 6158\\n7410 6358\\n2481 1803\\n8905 6449\\n7507 4208\\n9620 9283\\n1898 8208\\n8663 8900\\n7768 9864\\n1082 4012\\n5267 8802\\n1968 9053\\n7636 5359\\n8368 5272\\n7046 6328\\n6215 6643\\n4607 9439\\n11 9216\\n1047 4339\\n202 9858\\n8669 2359\\n4309 6094\\n1642 36\\n3132 9052\\n3802 3484\\n3589 1998\\n2864 1091\\n4841 3114\\n9395 4055\\n5620 931\\n8558 1511\\n2554 2632\\n2775 4011\\n440 2946\\n1163 4167\\n3424 5496\\n5474 851\\n1300 241\\n4170 9245\\n9715 4127\\n7130 5270\\n5749 8304\\n8979 266\\n9049 9605\\n4867 1932\\n4240 383\\n2317 2175\\n471 7666\\n5601 4241\\n5459 5650\\n1176 5180\\n8524 4082\\n2926 9522\\n2807 1438\\n9453 4908\\n427 7485\\n486 9073\\n6048 2371\\n7172 5435\\n153 3908\\n9810 6735\\n4570 9781\\n2982 1682\\n5567 1435\\n2168 9541\\n4860 263\\n5483 624\\n22 6919\\n3588 8193\\n1619 4109\\n8017 2197\\n6949 382\\n8881 6176\\n1822 4793\\n716 2184\\n3595 6621\\n5231 2696\\n544 2479\\n7935 7057\\n6086 9937\\n3515 6604\\n9342 1986\\n2663 2237\\n4947 8516\\n5134 4936\\n7599 652\\n1650 2361\\n5117 3671\\n2533 274\\n7884 2403\\n1153 5007\\n3019 799\\n7654 6954\\n198 8951\\n5653 443\\n4200 3148\\n4937 1424\\n3067 2140\\n690 440\\n5779 1113\\n565 2216\\n6686 889\\n609 2259\\n9294 4352\\n6614 8391\\n7630 7721\\n1651 3295\\n7716 2246\\n9230 1579\\n3515 5221\\n4014 838\\n3326 1989\\n491 5328\\n871 7032\\n8058 2080\\n1615 842\\n9287 6543\\n6322 7424\\n3394 5254\\n9150 5756\\n4192 9957\\n2887 5037\\n4012 3975\\n3997 5190\\n8148 4899\\n191 9125\\n3271 5605\\n2894 8930\\n6080 4902\\n1112 3957\\n6325 7519\\n6157 6898\\n9259 2570\\n6689 468\\n5103 9567\\n2608 7346\\n9504 9916\\n5840 3803\\n7585 4247\\n8167 3732\\n9770 2443\\n6773 2467\\n9590 5721\\n5220 1240\\n7780 6222\\n7848 3783\\n3867 6045\\n4604 9842\\n2131 9041\\n1903 9453\\n7547 8569\\n4384 4469\\n2303 9422\\n7141 3465\\n1013 7235\\n9027 2498\\n3211 866\\n5402 1003\\n2076 3346\\n8064 2890\\n1409 9975\\n2078 8030\\n4416 8938\\n7861 2871\\n8648 6549\\n8658 3106\\n2777 2145\\n6791 7325\\n102 6267\\n1239 7917\\n4779 7670\\n5421 1131\\n1376 5412\\n9889 2774\\n8320 4053\\n9438 1781\\n7667 6449\\n3050 4173\\n9981 4389\\n4506 4727\\n4458 7244\\n8090 1272\\n4670 591\\n1087 9652\\n6137 822\\n3935 4808\\n1574 2511\\n1717 4346\\n6663 3075\\n8500 1264\\n4280 7095\\n9632 2184\\n5649 8143\\n9708 9600\\n4909 4062\\n3513 5137\\n3233 8404\\n8544 7526\\n6326 9629\\n1876 169\\n1445 8698\\n9000 7164\\n4981 7438\\n82 7263\\n938 3309\\n9829 167\\n9015 721\\n4627 7412\\n8974 7802\\n4144 3247\\n7275 6255\\n7744 6686\\n3634 6984\\n9451 4871\\n4900 9605\\n4638 3905\\n6952 6753\\n8786 9385\\n2209 1390\\n8441 6635\\n169 7751\\n4479 5669\\n5193 3686\\n8247 2818\\n1509 670\\n8651 2890\\n5538 264\\n8501 7853\\n1551 1884\\n9294 5402\\n8427 7479\\n7180 7396\\n1660 967\\n7540 4375\\n219 1748\\n6735 5701\\n4596 773\\n7630 8384\\n8524 4903\\n4476 4272\\n377 6413\\n407 9637\\n516 604\\n6414 7591\\n6606 5002\\n5841 5057\\n8786 621\\n18 4627\\n5880 6058\\n6582 4096\\n5492 9214\\n3321 3703\\n2535 330\\n4071 6893\\n915 4744\\n4616 1981\\n3555 8751\\n4247 1302\\n7553 4168\\n167 4301\\n6828 4316\\n6403 5019\\n6121 8044\\n2940 2804\\n8444 8586\\n1107 9279\\n4332 6614\\n2980 5753\\n3474 4384\\n8170 7382\\n5310 3861\\n9411 558\\n5469 7266\\n4246 903\\n8113 8645\\n2626 8798\\n5491 5192\\n6259 1043\\n8940 8976\\n6843 6156\\n111 3753\\n4345 347\\n8077 6024\\n9329 7473\\n70\\n7327 6939\\n7851 437\\n5176 3714\\n1730 8108\\n715 2981\\n5317 1170\\n1092 511\\n5420 1309\\n4068 8077\\n5518 8322\\n9928 475\\n9708 5051\\n9321 3810\\n429 2241\\n1458 8680\\n9366 2481\\n2705 526\\n1328 4934\\n714 743\\n562 4941\\n4336 6340\\n334 8051\\n9074 9925\\n7881 8757\\n50 2486\\n9557 39\\n5358 555\\n5590 152\\n1761 9975\\n3917 9335\\n4987 4118\\n9277 1651\\n3123 3807\\n8186 5621\\n7245 4398\\n8195 8756\\n3792 5563\\n781 3721\\n9088 8470\\n5010 5816\\n3014 3301\\n12 4084\\n5980 6410\\n5507 6111\\n2921 2755\\n7828 2301\\n2348 6015\\n9063 2236\\n2340 7751\\n9776 9683\\n6926 8961\\n8295 8690\\n7093 4810\\n5807 4971\\n2695 6413\\n4273 4815\\n6703 2932\\n9118 9317\\n4923 2462\\n7582 707\\n3425 9524\\n5223 87\\n9867 9049\\n3978 1577\\n7323 1540\\n9506 7133\\n1538 3865\\n2213 5119\\n5514 4538\\n196 8210\\n461\\n1810 828\\n9182 4006\\n491 5997\\n9551 2517\\n4371 8475\\n9838 3074\\n8465 4322\\n8804 3965\\n2700 2906\\n7156 7289\\n7771 3486\\n8935 8414\\n7087 2086\\n2607 9848\\n3326 2386\\n477 251\\n7225 9795\\n7976 1741\\n530 5359\\n1878 2250\\n4406 1204\\n7925 2688\\n5531 5716\\n1426 4887\\n5586 1556\\n7418 1365\\n6178 8045\\n4844 3861\\n7141 8546\\n5973 5131\\n4302 6401\\n286 3463\\n81 254\\n6213 8383\\n9040 9431\\n8256 717\\n3542 5611\\n6656 9503\\n1343 8910\\n2059 6075\\n6695 1714\\n1519 698\\n6966 1168\\n8034 5558\\n6945 8039\\n8194 6291\\n376 9384\\n3734 3630\\n5680 3017\\n2510 6186\\n6119 7593\\n3575 7206\\n5926 1372\\n9246 7356\\n3461 3603\\n2201 9356\\n2126 6732\\n3436 5688\\n9148 4246\\n4125 48\\n9440 8845\\n6204 9543\\n9537 9767\\n4212 8210\\n4434 1489\\n8352 8866\\n8699 9690\\n4291 4470\\n9147 1037\\n8379 8286\\n8610 9798\\n6121 3459\\n9631 2700\\n1805 2678\\n6696 6635\\n3667 3412\\n2008 415\\n6455 4710\\n5926 3556\\n651 3646\\n7802 5201\\n6171 9193\\n4531 918\\n8423 1798\\n2194 683\\n7617 1734\\n3015 5443\\n8216 1994\\n924 8785\\n7692 2219\\n6289 7786\\n5066 8607\\n1866 2147\\n5238 2407\\n5561 5841\\n9110 4085\\n6083 9782\\n6084 2538\\n4608 5314\\n8971 5887\\n944 1244\\n9472 9307\\n1296 6354\\n5017 9419\\n6435 3046\\n1179 4038\\n6226 2764\\n2450 4275\\n8376 4670\\n2400 1265\\n7374 5198\\n4470 6324\\n8754 6732\\n9759 896\\n3255 686\\n1724 1653\\n5937 9707\\n452 3084\\n8656 4419\\n9407 3584\\n2506 2086\\n4957 8403\\n9635 2575\\n7039 2558\\n2984 3841\\n7951 5026\\n3011 9576\\n317 4789\\n3441 4022\\n3564 7892\\n5646 6517\\n1869 3429\\n435 6804\\n3271 3057\\n3012 9608\\n3154 4353\\n6975 2442\\n8541 2857\\n8355 8589\\n5665 7497\\n4086 8041\\n2529 8241\\n7275 9010\\n7346 4088\\n6945 5390\\n3984 9006\\n2526 3656\\n3062 6756\\n5913 4782\\n4399 5920\\n818 3390\\n9842 9185\\n815 2477\\n3817 3885\\n2465 5022\\n9421 7391\\n2769 8131\\n7041 5601\\n7193 5525\\n584 6301\\n1698 3003\\n5845 6977\\n4784 9325\\n6640 2987\\n4945 84\\n9390 4261\\n1441 176\\n266 134\\n1168 1146\\n2749 1163\\n8788 355\\n3815 8898\\n4903 6094\\n5065 5713\\n3649 7877\\n3006 370\\n1709 1481\\n5725 8067\\n4928 2363\\n8984 2584\\n8635 7528\\n3467 160\\n4948 1241\\n4298 8015\\n1484 3973\\n508 7433\\n8045 3471\\n7824 7657\\n9024 3499\\n3348 3429\\n6095 9259\\n924 4531\\n7646 3541\\n8653 5563\\n2325 2073\\n5644 6000\\n3555 8087\\n671 6101\\n8942 4531\\n9704 2579\\n1142 148\\n1694 8726\\n6166 8305\\n5328 1739\\n853 5695\\n168 3633\\n1276 5293\\n6013 6272\\n7776 2068\\n5826 1736\\n7201 8885\\n5280 2121\\n4092 2116\\n1329 1714\\n2006 5923\\n8990 7953\\n7730 5499\\n2909 3787\\n9790 5937\\n455 1719\\n8125 8145\\n5603 4459\\n2744 5201\\n3220 4599\\n2502 5719\\n7366 9869\\n176 1216\\n2059 3519\\n8933 8120\\n9544 3249\\n537 7462\\n2324 1534\\n4902 6304\\n6610 6255\\n3569 619\\n8776 7409\\n4905 9182\\n6762 5051\\n7989 6894\\n9935 9986\\n7825 7805\\n4590 4924\\n5283 9734\\n9855 4936\\n1219 3757\\n6568 5507\\n1099 6548\\n6266 6427\\n7075 4898\\n9455 1461\\n7127 6327\\n5460 610\\n643 5498\\n5638 1038\\n6961 8371\\n4661 8338\\n9186 4106\\n6799 7475\\n8601 7827\\n2915 8767\\n7105 888\\n8166 2013\\n8326 5613\\n8122 1579\\n8859 5651\\n6696 8721\\n5700 6279\\n4703 7136\\n6611 4561\\n7640 1859\\n6711 9044\\n9193 8504\\n94 3376\\n1999 5771\\n4542 7395\\n8627 5091\\n2236 1338\\n2021 1558\\n5906 6960\\n5245 8246\\n6695 7485\\n3830 5984\\n4296 1694\\n1386 9823\\n9121 3748\\n8448 5414\\n3282 9583\\n1834 7674\\n237 9695\\n3030 4922\\n9830 6890\\n3387 5227\\n8104 3548\\n2327 6433\\n4104 5096\\n8728 1668\\n6882 8623\\n5463 4462\\n9405 6774\\n9946 3370\\n5675 48\\n8710 5434\\n8319 9191\\n7486 711\\n7959 3062\\n1999 4232\\n3156 2205\\n9360 8660\\n9693 5525\\n5870 9346\\n9904 2110\\n3322 1508\\n1636 1211\\n1852 4705\\n3816 3935\\n4903 6755\\n5601 2760\\n2084 6246\\n2278 1319\\n9296 8045\\n825 6935\\n3699 2203\\n3347 5766\\n2518 9307\\n7365 37\\n5731 7145\\n613 4533\\n3323 6502\\n7231 360\\n1503 9599\\n6977 9098\\n5659 3886\\n7065 9896\\n694 2018\\n3956 217\\n5643 1202\\n4368 6208\\n3161 9774\\n7540 4137\\n5113 8259\\n6675 1247\\n4024 7911\\n3580 6689\\n8292 4045\\n868 8656\\n8023 3344\\n1711 9150\\n9777 1397\\n8729 2725\\n1092 4643\\n4720 4022\\n5496 7722\\n4726 6928\\n9284 5637\\n9582 9757\\n3704 3686\\n4315 220\\n7839 5424\\n8413 3172\\n2004 8211\\n1827 9935\\n1605 9042\\n7494 6113\\n3604 9006\\n4354 483\\n3905 913\\n9180 8862\\n9282 8798\\n2385 1162\\n4346 1610\\n3513 2130\\n3136 2730\\n9089 6819\\n373 7296\\n813 5283\\n2831 4040\\n231 4540\\n7614 197\\n6169 909\\n8043 68\\n4285 1274\\n2852 7315\\n257 7758\\n6438 5217\\n8657 9584\\n4109 6332\\n838 671\\n7432 8178\\n92 3881\\n129 9625\\n4112 9719\\n8181 342\\n5985 6098\\n8870 3617\\n9350 317\\n8021 6538\\n5193 2409\\n7665 6354\\n6654 1485\\n8238 6114\\n172 3143\\n2165 4786\\n336 9241\\n9711 5250\\n9666 7880\\n9358 1800\\n4796 3845\\n2237 2946\\n9445 8978\\n1767 2887\\n2512 8789\\n5388 2196\\n5377 4900\\n3920 3309\\n5802 3037\\n9708 7731\\n2113 3360\\n6991 327\\n480 7418\\n6303 4631\\n9035 8014\\n5008 3884\\n3792 8980\\n8791 9970\\n313 8537\\n8905 1904\\n7963 8933\\n2744 8685\\n7377 5723\\n4534 4371\\n9348 4272\\n8123 7345\\n5518 3610\\n757 6601\\n9681 6219\\n3927 4044\\n8729 4249\\n5908 6032\\n5756 2366\\n8655 2645\\n1667 7615\\n9877 8326\\n9295 7116\\n9786 3784\\n8351 200\\n8498 9908\\n8289 7764\\n9512 5176\\n3945 5441\\n1357 8441\\n3281 4578\\n1584 9013\\n8369 5565\\n1577 8112\\n2696 795\\n3081 6276\\n2481 4448\\n7133 1400\\n3167 1516\\n7512 8397\\n3924 3409\\n313\\n4331 6770\\n8275 8943\\n7077 9375\\n3117 2026\\n3900 3979\\n3268 5402\\n7091 5200\\n1402 60\\n3619 4452\\n1031 6672\\n2175 4208\\n8370 7333\\n6192 5218\\n2980 1942\\n4385 9204\\n860 1455\\n465 6606\\n9589 5638\\n8429 765\\n3406 2730\\n784 9692\\n7514 8423\\n8686 5139\\n9941 2358\\n1367 8996\\n8599 9264\\n5785 619\\n3311 193\\n3502 5720\\n9909 671\\n1410 2139\\n1148 5672\\n64 5810\\n9051 8150\\n1861 3800\\n4189 1372\\n975 8078\\n5791 7918\\n6104 4297\\n1592 5992\\n8853 1683\\n7166 6269\\n6395 2578\\n4000 2822\\n6890 7379\\n3641 6621\\n5232 4119\\n9529 9398\\n5907 8249\\n970 3695\\n3195 7333\\n1974 5992\\n301 3885\\n3264 3721\\n6176 4172\\n884 4091\\n4363 2061\\n1735 5296\\n4027 5278\\n3133 4060\\n7777 1921\\n9853 1826\\n864 2498\\n5650 7622\\n881 3910\\n3540 3822\\n37 9568\\n3174 1598\\n9281 9603\\n3093 8368\\n5839 2684\\n8731 7903\\n7361 1254\\n4320 5282\\n7261 4947\\n6159 1264\\n893 7419\\n7106 4064\\n145 6959\\n4464 6161\\n8283 8741\\n6132 9021\\n7254 9671\\n1271 1801\\n7580 6416\\n1294 8228\\n1760 7985\\n8548 9760\\n4824 6891\\n2831 9800\\n209 747\\n6756 9045\\n5834 7675\\n5814 1943\\n1425 6832\\n875 3382\\n3816 7445\\n9110 7328\\n2587 3911\\n5109 2072\\n4636 4243\\n9952 3278\\n4556 6851\\n4712 9309\\n6121 9436\\n9720 554\\n2835 5013\\n8093 6937\\n1840 4251\\n1857 7909\\n653 768\\n5440 8204\\n1730 6117\\n5961 4181\\n2246 5047\\n6338 1806\\n7599 7368\\n8820 9844\\n8101 8731\\n8144 8934\\n4426 3702\\n8144 4637\\n4250 9708\\n9897 575\\n2598 5320\\n2984 4661\\n7691 3244\\n4321 4397\\n5951 7449\\n4103 3944\\n6150 3840\\n3835 565\\n4464 267\\n5304 4554\\n3755 8439\\n5805 7713\\n930 5349\\n7877 2986\\n9364 5764\\n9211 1408\\n8213 2752\\n8035 1182\\n4645 8973\\n7664 2415\\n3067 868\\n4590 8872\\n5430 248\\n6821 8768\\n3601 6686\\n6659 748\\n5697 864\\n8799 3671\\n4135 947\\n8651 7873\\n2212 6399\\n2315 1845\\n8784 8994\\n7269 14\\n3003 5316\\n9937 2005\\n3939 8459\\n7177 5221\\n4317 5177\\n8639 8880\\n4192 7418\\n5231 860\\n9640 1520\\n1436 7300\\n5870 2292\\n2620 2767\\n7193 6516\\n6140 1887\\n7447 9433\\n7112 5405\\n9642 6616\\n9824 6870\\n7018 1259\\n7178 3213\\n242 4532\\n6778 1454\\n9688 4912\\n5446 432\\n827 6707\\n2267 6752\\n4949 3789\\n1494 7861\\n6773 1983\\n3277 9184\\n9758 9232\\n1047 7783\\n6201 3524\\n7043 5703\\n695 180\\n904 3630\\n4033 4252\\n4795 933\\n5188 7945\\n6770 2684\\n461 1460\\n8443 7221\\n2494 3095\\n6811 2231\\n5391 9438\\n1913 8354\\n570 2297\\n1892 6209\\n3740 4924\\n7007 8428\\n7820 5021\\n8690 9262\\n7093 112\\n8920 5444\\n7134 3505\\n2726 5781\\n475 1407\\n7337 8511\\n417 7352\\n3660 8682\\n8842 5185\\n4995 778\\n6541 5832\\n7138 8511\\n4771 1669\\n2644 3505\\n2644 8616\\n2707 5643\\n9311 3507\\n2069 5866\\n583 4787\\n4800 7174\\n3440 3353\\n4795 3059\\n6667 8804\\n9975 2454\\n7693 9242\\n8277 8942\\n8083 7556\\n9492 9698\\n6095 8905\\n6089 1091\\n7621 7839\\n5894 9194\\n1588 9442\\n9883 259\\n1178 5069\\n6292 8392\\n5968 5257\\n7278 3382\\n5836 1321\\n711 2019\\n8289 9032\\n4247 731\\n3820 3782\\n4074 1914\\n7141 410\\n7121 7650\\n2314 9562\\n6977 4033\\n8400 2988\\n9184 7918\\n3853 8174\\n5712 6311\\n6322 2616\\n9113 3320\\n6264 2400\\n6237 1820\\n5708 2110\\n3125 1146\\n511 4283\\n5220 395\\n1314 6318\\n9791 2064\\n9618 9822\\n9369 4320\\n8321 3034\\n6299 3961\\n2526 2968\\n5504 6643\\n4341 167\\n880 9042\\n3445 4646\\n6596 9938\\n9783 2636\\n6327 506\\n7267 1730\\n9885 8539\\n8116 238\\n2865 4210\\n6690 668\\n6966 3598\\n2284 3707\\n9814 4425\\n3848 9299\\n3631 3239\\n8225 5790\\n1884 5184\\n6995 2553\\n9545 2271\\n4006 5272\\n736 2918\\n1230 5852\\n2715 4369\\n2406 1607\\n7934 7320\\n3011 4475\\n9939 288\\n600 7718\\n5415 7581\\n1886 8817\\n9223 2862\\n8749 3747\\n2399 6480\\n7885 8665\\n889\\n6899 5840\\n6491 1429\\n9664 2691\\n2739 1794\\n7878 4732\\n3924 6696\\n2775 2817\\n9510 9493\\n6625 2213\\n1536 1522\\n5907 3233\\n9103 3030\\n2100 9046\\n2193 8888\\n2454 8750\\n3796 7204\\n9689 1597\\n1230 5391\\n1386 6767\\n3500 4808\\n1555 2397\\n361 2578\\n1459 9502\\n8428 6292\\n794 6205\\n748 9858\\n709 592\\n6301 5212\\n2845 7259\\n5513 5643\\n3103 8276\\n8982 4545\\n7334 4920\\n5519 4240\\n3192 8501\\n6509 2691\\n9422 9014\\n3878 8483\\n7871 6964\\n3458 9020\\n8743 6080\\n5504 8072\\n3099 8312\\n5254 8599\\n858 2825\\n5213 269\\n4695 3221\\n2355 1649\\n4390 3862\\n6755 3016\\n7819 3892\\n7139 1283\\n1235 9531\\n4903 740\\n1583 2182\\n5658 1527\\n9322 8715\\n9304 4489\\n9907 1352\\n1867 118\\n2700 7919\\n4038 3258\\n9944 9960\\n4137 1285\\n7311 5015\\n692 3670\\n8858 2497\\n2377 1417\\n8633 2041\\n3359 7799\\n6837 5006\\n5360 569\\n3587 7933\\n5512 8905\\n7326 5444\\n2521 2515\\n5213 6593\\n3641 7025\\n1126 2604\\n7367 6944\\n5037 5319\\n8827 1930\\n2339 2930\\n1272 6976\\n2919 1894\\n7234 6646\\n9354 7455\\n5994 154\\n4067 6212\\n6603 2075\\n327 7758\\n565 1299\\n8490 5562\\n7142 4040\\n6319 1477\\n5758 7804\\n7766 2526\\n239 4988\\n9973 7112\\n4922 5772\\n508 6395\\n291 9717\\n3298 1544\\n6449 6132\\n5409 5555\\n564 6398\\n1813 3899\\n116 8410\\n3496 4107\\n6975 2139\\n3048 4938\\n2283 8009\\n4762 5577\\n1215 4751\\n6599 3684\\n6752 4176\\n1795 2690\\n7414 5021\\n25 5548\\n9997 9744\\n3054 4578\\n8183 3461\\n4166 5079\\n4462 9411\\n7182 848\\n4692 660\\n393 844\\n9982 99\\n7677 461\\n5832 3231\\n9137 9567\\n2360 9730\\n3135 3215\\n9247 7716\\n7255 601\\n5728 1101\\n1206 1767\\n1418 4356\\n676 6768\\n7840 7672\\n3022 4884\\n715 7242\\n1810 774\\n6532 1747\\n1884 2015\\n9407 3992\\n8776 547\\n8729 8823\\n7629 9547\\n6450 9182\\n355 1757\\n814 2185\\n6119 7164\\n7020 8585\\n1394 3016\\n716 6515\\n8613 3264\\n9161 4006\\n8594 3890\\n1326 1714\\n7014 5354\\n1915 9297\\n2056 8559\\n9054 230\\n3936 9171\\n4122 2449\\n338 3293\\n2924 1255\\n134 9100\\n9520 799\\n4012 7276\\n238 8869\\n3430 3446\\n6398 4621\\n8655 6659\\n9181 8320\\n3710 1621\\n1415 7957\\n1026 4731\\n554 1787\\n2579 5959\\n4408 3354\\n5725 3060\\n5766 396\\n2635 3019\\n2312 146\\n8836 859\\n6051 9057\\n7701 3873\\n1345 1902\\n6338 1128\\n475 3205\\n3807 6778\\n4065 3125\\n7729 6784\\n2986 2814\\n2352 5396\\n485 1449\\n6402 8232\\n6373 7705\\n951 3639\\n6597 777\\n7917 9174\\n1262 221\\n9840 3494\\n3425 9903\\n4702 1078\\n1905 7736\\n1489 2426\\n9043 8883\\n6833 1426\\n9649 2768\\n213 923\\n8742 8630\\n750 6701\\n1066 4425\\n855 4093\\n9583 9290\\n6868 3232\\n8866 5510\\n9874 680\\n6907 5989\\n4662 3101\\n5178 6512\\n3060 2487\\n1902 9506\\n1397 943\\n7109 1571\\n7486 7259\\n2014 5202\\n9878 3179\\n9914 3567\\n742 9529\\n5490 2740\\n1554 9414\\n8159 6038\\n2974 7265\\n6936 2883\\n6111 5725\\n3086 7761\\n7809 7231\\n767 3152\\n4234 2237\\n3225 7138\\n222 4647\\n9899 325\\n1761 988\\n2276 7020\\n6359 1660\\n6252 5773\\n8910 6724\\n880 7205\\n5917 1654\\n1866 1984\\n812 6231\\n9774 1450\\n4538 3188\\n921 7344\\n3100 2770\\n6158 5293\\n5989 2149\\n9135 1229\\n3372 512\\n3098 5525\\n6680 4696\\n6384 1041\\n9671 6713\\n7887 4820\\n8582 9301\\n6372 1058\\n8842 7756\\n594 545\\n3644 7491\\n5134 1264\\n5204 4597\\n8227 4639\\n8717 9253\\n6813 5672\\n5004 7166\\n9120 8829\\n1313 3179\\n4041 7776\\n4728 9932\\n5319 7429\\n8657 8112\\n9985 2743\\n7970 7904\\n1105 2529\\n8329 4113\\n6035 943\\n2782 316\\n804 9022\\n2164 8413\\n4793 151\\n9252 5501\\n4828 8015\\n1041 2991\\n8378 9682\\n8206 2311\\n7845 4184\\n9941 1544\\n8678 9488\\n3293 559\\n6573 3499\\n2967 2694\\n5104 3906\\n4135 2057\\n8748 1429\\n3872 1667\\n5532 2631\\n3107 3439\\n9439 6095\\n393 8398\\n8781 5949\\n1575 3445\\n3183 4544\\n6018 1150\\n7539 6440\\n850 7985\\n6667 785\\n6459 5692\\n3039 180\\n9848 1495\\n6107 6486\\n6262 1792\\n496 5072\\n8916 8376\\n1205 8156\\n5946 9580\\n8991 4420\\n6826 8000\\n7190 4605\\n9154 7084\\n9541 9700\\n5215 8091\\n2095 6391\\n236 556\\n1050 9041\\n7307 7657\\n5131 6966\\n3157 7630\\n9058 4241\\n3353 9752\\n717 2921\\n1289 2337\\n970 1489\\n4198 129\\n4607 6842\\n7682 8918\\n9449 1141\\n3789 6383\\n5483 9225\\n8907 5626\\n2270 1005\\n464 8528\\n3539 1584\\n6314 6797\\n9216 6028\\n5649 9902\\n7240 3256\\n2827 5406\\n9143 419\\n4896 3068\\n5520 9709\\n2835 3255\\n4428 8424\\n9545 2872\\n8580 8074\\n8245 582\\n6900 2094\\n3352 6708\\n5698 4665\\n7093 8710\\n1952 3287\\n2942 3930\\n3707 9479\\n2657 8058\\n3232 1823\\n5912 6254\\n7776 40\\n2247 6077\\n2678 1211\\n4926 1448\\n7567 6858\\n6403 9319\\n9726 6935\\n9366 4426\\n8645 4854\\n2616 5950\\n3409 412\\n1895 7295\\n7349 5259\\n7942 6862\\n4778 7139\\n7904 8831\\n7529 9314\\n7838 981\\n4256 5667\\n400 1550\\n7039 4154\\n5895 7121\\n2527 9930\\n9881 7499\\n429 1135\\n5440 7913\\n5947 4259\\n8602 7807\\n8561 9794\\n9700 2600\\n9671 3897\\n8224 890\\n8857 7674\\n8800 9758\\n2070 1869\\n1687 1955\\n1774 8801\\n6548 2548\\n5704 3784\\n1211 6480\\n379 6865\\n4831 9291\\n4566 9057\\n9820 9614\\n6934 8584\\n8388 105\\n807 2530\\n9693 8721\\n453 7522\\n9535 9684\\n2437 7849\\n2210 5017\\n7130 6996\\n6220 6552\\n2457 6660\\n131 4001\\n8110 5307\\n2285 6444\\n4086 1453\\n4340 3060\\n8606 9452\\n9444 5400\\n7003 7050\\n3215 4700\\n5741 4445\\n5278 6932\\n9587 5879\\n9822 7007\\n3171 2189\\n3945 8340\\n1215 7231\\n711 7775\\n9077 6590\\n1778 8964\\n4097 1052\\n7340 2415\\n6476 6236\\n1239 2693\\n8190 6763\\n9667 8725\\n5227 3593\\n4323 3459\\n9286 739\\n1351 9258\\n7951 6558\\n3635 8838\\n8803 1623\\n6152 7595\\n4632 7881\\n1711 9609\\n5502 2242\\n5713 1009\\n5409 2508\\n2377 5903\\n857 223\\n3940 2490\\n2972 4297\\n8252 5890\\n2541 3809\\n7989 7262\\n7759 3643\\n7170 2594\\n5460 4581\\n5217 357\\n6860 7736\\n5182 2072\\n9027 8375\\n3267 8189\\n4519 1178\\n6900 8441\\n3868 5128\\n8952 1288\\n8981 6027\\n6894 9831\\n8361 1328\\n2142 2697\\n4242 6074\\n8417 8235\\n9796 6070\\n3814 9784\\n23 146\\n9699 3607\\n2662 7644\\n8223 2521\\n6468 9728\\n7835 5690\\n6595 9027\\n6471 9899\\n4765 907\\n7903 9177\\n4282 8137\\n5274 2568\\n4403 1956\\n3908 1064\\n3839 8951\\n5220 8383\\n622 3132\\n9746 3894\\n3362 2376\\n5554 9539\\n151 664\\n149 3287\\n1317 6433\\n9094 499\\n5507 6408\\n5933 7458\\n1366 9563\\n4369 3803\\n9688 8226\\n3532 361\\n6387 1965\\n1478 1116\\n786 4826\\n8744 4222\\n6831 7595\\n2174 6605\\n3323 9485\\n488 3258\\n7302 5433\\n2527 7238\\n8483 5454\\n7474 8398\\n8055 2536\\n9469 530\\n9539 4554\\n8067 2726\\n835 6047\\n4867 4063\\n2274 6338\\n8747 8116\\n6642 5286\\n2248 201\\n6758 8650\\n5546 711\\n4763 3959\\n2016 250\\n6398 9878\\n2198 4670\\n7220 7856\\n9737 7321\\n8980 4485\\n6934 6671\\n1923 8643\\n4957 7465\\n1570 6804\\n3344 9225\\n6864 7359\\n8694 6813\\n7250 2997\\n3277 1119\\n9474 9789\\n6797 7310\\n2247 7631\\n4718 6189\\n590 4043\\n1652 8485\\n5260 1249\\n1541 2579\\n9094 4373\\n9377 7962\\n4912 6384\\n4329 1526\\n1590 1133\\n4338 6402\\n4189 6514\\n2438 2584\\n8866 6718\\n9149 4460\\n6457 7681\\n1548 6565\\n9784 2918\\n7649 5176\\n6314 1250\\n151 3770\\n3984 4729\\n5687 1962\\n2263 8804\\n9597 3630\\n5576 159\\n9765 4535\\n3622 2424\\n5189 8933\\n1121 3219\\n5792 6534\\n3207 6333\\n1208 8759\\n9713 6525\\n530 1217\\n7818 8975\\n5856 632\\n9546 998\\n9565 4413\\n7658 9050\\n8407 5373\\n3968 9318\\n3326 7147\\n686 2738\\n5178 7695\\n2052 8258\\n388 3140\\n5317 7074\\n671 5689\\n7139 5303\\n307 6710\\n2697 2402\\n6409 6587\\n9381 7492\\n6980 4916\\n8742 8760\\n2486 2523\\n7675 5914\\n9307 6149\\n86 4649\\n8673 6662\\n4171 8610\\n6512 8703\\n4482 5079\\n1915 5445\\n9706 1312\\n258 8533\\n2407 7475\\n843 5355\\n8835 3887\\n8662 1370\\n7537 8079\\n8681 3471\\n807 2\\n8750 491\\n5475 350\\n4272 2426\\n9874 7497\\n2771 7921\\n8331 4149\\n3428 2992\\n7108 3918\\n8878 950\\n7102 2699\\n9718 2897\\n3730 8120\\n8810 2197\\n666 9720\\n9804 7330\\n7060 390\\n4297 6411\\n5029 9011\\n4229 1446\\n454 2982\\n5023 607\\n7576 9989\\n5015 6111\\n4740 3990\\n8605 4939\\n9402 1975\\n2720 9389\\n2420 2854\\n745 7322\\n5324 3348\\n2381 9766\\n2858 8971\\n2360 4257\\n1960 3133\\n1607 9279\\n7635 8741\\n2588 1156\\n3978 8537\\n9750 7242\\n8716 5936\\n6079 6861\\n3931 2051\\n7474 4130\\n8353 6270\\n8862 6638\\n1520 6405\\n7548 7160\\n8904 6044\\n1046 2122\\n9348 3104\\n7370 7793\\n5095 8579\\n7302 3384\\n3227 1152\\n8101 647\\n7719 1845\\n2137 3508\\n8794 2534\\n317 7144\\n1003 9384\\n8276 9289\\n8524 6188\\n7012 7146\\n4331 9959\\n468 3703\\n4840 6432\\n1505 1446\\n2599 8196\\n8197 8182\\n2954 9369\\n9537 1407\\n2870 9633\\n8679 4613\\n8953 4720\\n3097 8574\\n1669 2852\\n5444 1380\\n9134 9282\\n1792 9083\\n5509 8622\\n1005 6268\\n4995 205\\n2257 171\\n203 3442\\n7285 8608\\n6543 9940\\n1752 1503\\n2805 6947\\n1280 2613\\n1366 3378\\n367 8850\\n6792 8235\\n2043 2460\\n1260 1168\\n3035 8869\\n2694 25\\n6839 3875\\n5412 2038\\n2279 8096\\n9319 5728\\n5833 9289\\n1543 2691\\n4498 4684\\n7990 9294\\n8501 9321\\n3031 6917\\n8792 4167\\n1050 7928\\n9037 6482\\n3364 5627\\n2928 5046\\n4538 2143\\n8733 9374\\n9244 9603\\n5593 6589\\n1608 8545\\n7077 6204\\n5100 6284\\n7856 8840\\n2780 5468\\n224 9843\\n6482 2551\\n2260 9949\\n4824 2984\\n2873 493\\n1881 1538\\n8056 2637\\n2901 2464\\n7683 8217\\n8528 2920\\n6211 2632\\n6673 9839\\n7603 6143\\n6826 355\\n4794 8409\\n6735 263\\n4384 2959\\n6949 4431\\n223 7555\\n1345 1157\\n2716 9659\\n9764 2941\\n3320 8819\\n3114 8317\\n927 5118\\n8326 7318\\n3027 5105\\n133 8929\\n292 9700\\n9933 780\\n9521 4024\\n9992 1030\\n4398 8805\\n4303 3261\\n2156 1342\\n5785 8453\\n2129 9759\\n932 1631\\n7072 321\\n4966 4858\\n4577 4656\\n8470 6706\\n9892 5035\\n6704 6905\\n8302 2881\\n5718 6738\\n948 5210\\n3360 4524\\n6800 6679\\n8271 675\\n1899 3659\\n2081 874\\n4590 8641\\n848 4327\\n4775 9623\\n9427 4058\\n9950 6682\\n2198 9988\\n7046 4932\\n2134 4154\\n7101 1481\\n9793 6210\\n8666 3977\\n2564 6639\\n8647 5952\\n6542 6042\\n8581 6704\\n5025 9092\\n240 3941\\n567 4823\\n7292 1530\\n5179 3198\\n6476 1300\\n5821 1172\\n6351 5471\\n784 9538\\n2207 9430\\n8635 6961\\n8994 8027\\n6811 8912\\n5620 812\\n3352 1227\\n3656 4087\\n465 2186\\n4367 6714\\n1959 7819\\n4983 7537\\n5982 6882\\n7236 7771\\n6459 7045\\n7363 9531\\n3549 6858\\n1889 2383\\n8599 3661\\n3334 8055\\n5267 3895\\n518 1653\\n3543 8215\\n9066 9385\\n8980 8480\\n6159 3690\\n1003 6620\\n1125 8047\\n7047 7905\\n7654 2941\\n4976 6845\\n3713 6742\\n6731 2635\\n1655 7386\\n4594 9549\\n2621 234\\n4926 7804\\n1736 4255\\n8381 6080\\n4312 9579\\n9796 5368\\n5354 5514\\n6286 1684\\n7804 2495\\n4759 8954\\n2010 7276\\n4241 6774\\n4361 8219\\n618\\n9792 1043\\n3457 5683\\n9163 4615\\n8698 8452\\n2233 2616\\n7880 2125\\n7426 7008\\n5723 2591\\n1572 9639\\n2219 2071\\n3758 2312\\n2611 2825\\n1160 5160\\n9221 2906\\n1710 3686\\n9871 859\\n2436 6827\\n1352 4951\\n5724 8194\\n7916 7060\\n9519 3969\\n5297 5042\\n4777 1547\\n4894 1460\\n1224 1763\\n8399 3943\\n3280 6289\\n5458 4221\\n4242 2959\\n5990 6111\\n4326 9327\\n7952 4658\\n6676 6105\\n8190 7926\\n7494 3509\\n1803 567\\n8562 631\\n305 2804\\n9045 3394\\n3948 2397\\n6018 5224\\n6009 2746\\n707 9815\\n5280 4600\\n3298 796\\n8113 9558\\n6189 8626\\n945 7851\\n9484 4074\\n2118 1677\\n3310 7870\\n7555 7451\\n6314 7810\\n6304 4722\\n6747 7031\\n3381 5789\\n6019 1063\\n1664 2546\\n843 4591\\n8419 7646\\n5509 5212\\n2185 4370\\n886 5056\\n1342 7080\\n5902 212\\n2368 5305\\n1965 4505\\n5082 1742\\n8789 7342\\n9111 7103\\n8969 6598\\n8798 1864\\n5929 4261\\n2266 3741\\n7025 7169\\n7674 3171\\n6080 9407\\n9993 8525\\n4461 1845\\n6307 6602\\n2994 5463\\n5545 3075\\n5439 9176\\n4070 4297\\n8205 6848\\n1911 507\\n7538 4032\\n8836 7910\\n1181 3418\\n6298 8316\\n8663 2940\\n7527 7209\\n4817 850\\n1446 7181\\n8392 483\\n2950 1571\\n1765 4138\\n8645 399\\n6293 4851\\n1588 5578\\n3899 860\\n3503 5971\\n9238 6850\\n1860 8173\\n360 132\\n4974 3804\\n3038 5187\\n8530 6181\\n7672 9012\\n4763 192\\n6272 5015\\n7287 762\\n6732 369\\n231 174\\n9950 6633\\n576 532\\n1901 4670\\n64 7263\\n4519 6039\\n8071 2842\\n9909 6227\\n7035 4460\\n3353 9476\\n2227 5614\\n6679 5032\\n4576 9023\\n2686 318\\n1825 4504\\n9783 2876\\n3915 9124\\n3376 9119\\n8179 9240\\n4876 5004\\n9272 8852\\n2880 9203\\n903 611\\n9182 4763\\n8408 6822\\n8226 3771\\n5050 4809\\n4841 6361\\n3346 4605\\n1757 3573\\n7633 8303\\n9457 1462\\n8282 154\\n3506 6216\\n959 8762\\n6251 6234\\n1892 4063\\n9003 3956\\n2313 5632\\n5426 7498\\n3010 6480\\n9602 1431\\n2953 4373\\n4497 1151\\n4641 7701\\n9925 7461\\n8227 7487\\n573 4642\\n6637 1876\\n688 7613\\n9294 3989\\n6858 1303\\n3390 8360\\n1434 7040\\n8225 661\\n949 2404\\n1093 560\\n7094 7118\\n9277 8709\\n9067 3374\\n2612 9483\\n9639 2325\\n4538 4959\\n9526 1524\\n2252 7902\\n9848 6572\\n732 4507\\n6398 211\\n5780 5763\\n6123 1357\\n3166 2366\\n3564 6918\\n6340 9207\\n4601 9871\\n5661 160\\n3898 1326\\n2375 2694\\n8104 7258\\n1343 3243\\n3002 3674\\n715 1368\\n2235 9044\\n6151 3542\\n1002 6184\\n3908 2804\\n2468 8446\\n324 2368\\n6348 2292\\n1628 3003\\n1631 9805\\n7934 4348\\n8527 5000\\n3362 1520\\n1386 4284\\n570 8684\\n6675 6019\\n5688 447\\n3905 5745\\n1902 597\\n8187 9280\\n8497 1314\\n8767 9905\\n5266 5829\\n5777 684\\n2774 2093\\n3136 633\\n4606 4907\\n4689 5840\\n7233 9439\\n8555 9926\\n9571 7319\\n2969 172\\n9090 323\\n1856 7828\\n1692 2549\\n3865 5170\\n2343 7194\\n7137 1922\\n3869 9018\\n8086 8071\\n2029 5197\\n1908 8402\\n2803 478\\n3046 6439\\n2372 3390\\n9075 1785\\n2840 3974\\n9589 7106\\n7682 8402\\n3905 4759\\n8989 7806\\n2229 5647\\n5899 5476\\n8811 9200\\n1093 4719\\n7753 8075\\n9726 4742\\n7996 1109\\n5983 7910\\n8342 8995\\n1760 2651\\n2322 1662\\n1070 3769\\n9301 6246\\n6001 7411\\n9987 7056\\n2687 119\\n9060 985\\n1810 5440\\n5185 5399\\n1469 8171\\n5213 8789\\n3047 482\\n4556 2612\\n2778 6736\\n456 2184\\n8657 215\\n4925 7247\\n2974 9554\\n4418 1624\\n4697 903\\n6550 8000\\n9011 9945\\n4389 73\\n5400 2445\\n9261 9472\\n6045 9321\\n1510 7268\\n1276 7002\\n9551 7979\\n2295 3471\\n7042 7399\\n6345 7511\\n1073 3442\\n1401 5533\\n3270 9360\\n1229 5565\\n7913 8764\\n3255 2451\\n8114 5043\\n7039 2220\\n424 906\\n3344 6054\\n9692 194\\n6811 8818\\n1133 9024\\n4671 8229\\n8823 5868\\n3257 4277\\n9709 4291\\n9006 7170\\n8092 8780\\n5246 6647\\n1774 2862\\n2199 1144\\n7162 2147\\n3928 9966\\n2634 7727\\n9592 1079\\n4267 3679\\n7386 1816\\n3622 5302\\n6334 7223\\n1750 5762\\n625 9750\\n5028 4369\\n8806 8104\\n4111 5721\\n1752 9338\\n6759 7069\\n9393 6744\\n7135 9284\\n1164 1413\\n9093 9620\\n3798 2394\\n2628 3620\\n4082 6629\\n8732 3108\\n2478 4452\\n1197 5842\\n347 8272\\n5468 9016\\n6734 3421\\n9634 6112\\n2268 7559\\n4677 6257\\n6015 7539\\n1743 3552\\n525 7528\\n2800 4307\\n934 4514\\n9491 935\\n214 7341\\n2806 3582\\n5657 1671\\n3881 6539\\n3361 3275\\n3503 9772\\n2128 8894\\n6620 4311\\n6303 988\\n2262 3544\\n2556 2395\\n7934 1232\\n2703 7834\\n4277 4421\\n1622 7955\\n8253 3853\\n3321 6947\\n3888 528\\n7594 6466\\n8040 5620\\n8281 8713\\n756 397\\n5087 1617\\n6986 309\\n2099 6602\\n5389 9378\\n6897 8654\\n2690 8629\\n1488 1162\\n6900 4225\\n1302 5314\\n6009 5391\\n5928 8835\\n7717 5148\\n9876 7595\\n1412 2721\\n6185 4848\\n1847 106\\n8657 7521\\n211 7137\\n999 2727\\n6362 6758\\n9718 7915\\n9081 1579\\n9620 9246\\n4769 2990\\n1041 9173\\n7542 3928\\n8682 1510\\n3309 8857\\n8086 3784\\n5593 5999\\n5167 9099\\n9402 1343\\n9007 9315\\n5904 289\\n2045 6914\\n4280 8264\\n4041 2483\\n5 9677\\n3547 6001\\n9910 7280\\n2977 369\\n9529 2868\\n2191 7350\\n1644 543\\n1754 5551\\n517 4970\\n8446 7623\\n1869 5705\\n965 3053\\n8500 1991\\n4012 2139\\n3939 4257\\n3556 5098\\n738 1771\\n1942 6607\\n7802 5538\\n6840 6247\\n8834 8490\\n4727 1242\\n5231 4726\\n1679 1759\\n9112 6891\\n4129 1901\\n3496 625\\n980 7054\\n7211 7931\\n9943 5813\\n8540 7458\\n2878 3481\\n378 9126\\n6471 5943\\n7720 2565\\n7886 2532\\n4873 7938\\n396 4180\\n5309 5054\\n693 5811\\n4445 232\\n7106 9126\\n9274 2667\\n2535 4108\\n5553 6553\\n2989 9962\\n5140 9856\\n5210 1446\\n9987 2535\\n8375 1663\\n9703 9898\\n2503 8388\\n3275 6329\\n9645 5543\\n4765 3600\\n4213 4526\\n1548 7607\\n9527 2319\\n3372 8091\\n34 6833\\n4198 3343\\n5530 1051\\n987 4309\\n9715 9568\\n4508 2336\\n6131 2778\\n9102 1422\\n2451 5260\\n9307 1788\\n5109 3008\\n4468 577\\n8937 7282\\n6651 4286\\n1335 6953\\n1919 7955\\n1608 829\\n9519 2213\\n2877 5527\\n958 7736\\n290 2434\\n3211 8618\\n8800 1349\\n3410 7741\\n8499 2147\\n2865 6210\\n7888 3857\\n8028 5719\\n2248 5072\\n6650 9797\\n8696 5734\\n6740 7320\\n3823 6479\\n4819 9063\\n9797 7504\\n7687 7823\\n395 1295\\n7598 7840\\n3294 8869\\n749 3689\\n6138 9383\\n9483 678\\n272 4096\\n6406 4228\\n1782 7934\\n8935 884\\n4314 2809\\n8464 2446\\n134 8533\\n5317 1902\\n6581 320\\n5703 9405\\n5565 4945\\n4724 1160\\n5567 1026\\n7948 6755\\n6826 4150\\n935 1924\\n2443 7944\\n3566 3905\\n48 7348\\n2954 6007\\n5726 7262\\n506 6176\\n3696 9237\\n7794 4286\\n6596 444\\n3262 5528\\n9330 2640\\n7271 3061\\n8390 4518\\n8630 5280\\n2213 6236\\n3672 3054\\n2784 4399\\n4969 6642\\n7854 5388\\n9581 6303\\n9800 839\\n2911 917\\n6879 168\\n809 9826\\n7817 9207\\n1232 9363\\n1699 1480\\n783 6766\\n4345 212\\n1589 915\\n5244 1010\\n964 4627\\n5686 8020\\n2414 4963\\n2663 2769\\n7180 9353\\n1812 3958\\n2923 7928\\n58 8281\\n6763 3121\\n3046 967\\n8290 7524\\n9143 2316\\n5007 8303\\n2692 5652\\n5702 4263\\n133 4441\\n363 4117\\n4039 3967\\n796 1049\\n1194 3334\\n2587 1382\\n2942 7267\\n5780 1155\\n2545 6347\\n8279 3330\\n1446 7477\\n1170 9924\\n9248 7524\\n8623 1244\\n2136 5010\\n1974 3533\\n9484 7952\\n5939 9284\\n6447 8337\\n8125 1072\\n8436 6630\\n9588 8283\\n6447 9173\\n5992 5981\\n7870 6995\\n5294 6644\\n5439 2635\\n3192 4975\\n8361 3757\\n6395 5338\\n9284 1916\\n1363 6289\\n5264 5230\\n4699 8218\\n8222 7279\\n3746 6341\\n5443 479\\n4661 1723\\n6028 2125\\n2917 4626\\n2057 7570\\n5285 1949\\n1206 4514\\n286 5240\\n4099 5628\\n4132 1846\\n760 1998\\n7002 5339\\n1356 4173\\n4853 5246\\n1898 2106\\n823\\n4631 4721\\n7855 462\\n5397 83\\n9958 5200\\n6917 1796\\n2309 7480\\n3547 5550\\n8913 5496\\n6194 4971\\n1521 8687\\n4203 386\\n689 5396\\n8964 754\\n2898 4846\\n4729 6397\\n6518 9362\\n3345 3609\\n1534 5177\\n6695 4070\\n7669 4621\\n1693 453\\n2768 2511\\n9811 3163\\n9385 8849\\n6784 4380\\n4 197\\n6592 9700\\n5611 8284\\n2371 5511\\n7889 616\\n6791 3605\\n6330 842\\n1232 2288\\n8363 10\\n5902 1227\\n4528 9006\\n8598 2343\\n2056 9766\\n1843 3482\\n4020 5833\\n5435 6741\\n6230 3499\\n6192 1124\\n2624 7301\\n7965 8178\\n9646 5106\\n428 6166\\n2706 3516\\n1388 2174\\n4890 6641\\n1786 8388\\n5005 1438\\n7360 4972\\n2393 2419\\n3958 3972\\n1715 2454\\n599 7490\\n8519 6337\\n4269 2177\\n3386 4915\\n1059 3407\\n5026 3476\\n2398 4083\\n6003 6059\\n9555 7304\\n2103 7141\\n5860 562\\n2696 2532\\n9705 3232\\n7454 2773\\n5193 3405\\n143 4801\\n2501 1565\\n2856 1888\\n6514 7584\\n897 7672\\n7847 5205\\n6417 2112\\n6713 2356\\n3603 5624\\n9322 4238\\n5363 4146\\n2081 1715\\n5147 6767\\n1122 6686\\n4793 3674\\n5345 3960\\n2579 3108\\n6768 7614\\n5171 9542\\n5802 5406\\n7411 7374\\n4715 283\\n5157 4129\\n9546 491\\n6325 9511\\n3780 8916\\n9846 2958\\n7150 3444\\n6803 927\\n6541 3716\\n9959 2352\\n3402 4929\\n8029 7599\\n9763 4146\\n7536 9284\\n8286 5437\\n384 2730\\n7302 1836\\n5446 4548\\n2130 4497\\n243 2488\\n982 6796\\n5043 4943\\n6218 2098\\n2425 9148\\n425 4903\\n6854 2068\\n3650 2884\\n6201 2890\\n9457 1095\\n9330 2305\\n9022 7110\\n2498 7822\\n8139 1844\\n698 3028\\n3232 1562\\n7626 94\\n9491 6909\\n7159 7496\\n1 5719\\n700 219\\n9395 4069\\n5884 8777\\n4543 6427\\n2097 9689\\n9133 7164\\n7989 4632\\n4572 8633\\n8723 197\\n9883 663\\n1814 8671\\n6082 2690\\n7490 5766\\n2089 4003\\n6439 6533\\n1198 3878\\n2781 7831\\n1223 7474\\n7093 1264\\n3251 5271\\n8797 6042\\n7527 7380\\n3831 3549\\n1149 1314\\n1960 2270\\n6995 2966\\n4645 8359\\n2430 2726\\n9502 9546\\n7244 8309\\n5336 2385\\n1901 1871\\n4375 4598\\n7790 2089\\n791 7333\\n7792 2090\\n2879 893\\n9217 379\\n7027 8856\\n9394 448\\n7324 2104\\n7564 8772\\n6725 3596\\n9219 3323\\n7430 3020\\n9294 5547\\n2174 8699\\n4383 4814\\n5119 8259\\n4791 9727\\n8657 1929\\n2632 9346\\n491 7832\\n8074 1525\\n1926 4569\\n6061 3362\\n1177 4949\\n3083 6088\\n6538 6435\\n6806 202\\n670 8672\\n7598 5225\\n6325 9358\\n8278 3662\\n8548 6388\\n4103 5913\\n528 1854\\n4875 9640\\n1418 1962\\n2555 6800\\n115 366\\n9690 7219\\n5512 8325\\n8512 4706\\n7300 5\\n7072 8336\\n1327 61\\n9153 6933\\n6699 9966\\n2514 6604\\n635 1155\\n8850 2799\\n7882 1542\\n2917 4601\\n6496 8716\\n1362 6960\\n3907 5081\\n9199 9368\\n7735 1779\\n5903 6537\\n7115 1437\\n3746 1759\\n6262 8923\\n1960 6346\\n1102 4811\\n3550 3001\\n4958 5751\\n157 7061\\n7312 9549\\n6357 9724\\n7345 7422\\n9572 7105\\n7749 3710\\n5051 6083\\n4111 5684\\n8298 1382\\n5828 2490\\n2625 9818\\n8436 6951\\n9659 753\\n5749 7142\\n7230 6085\\n4913 1514\\n7643 3696\\n5229 6035\\n2768 9515\\n8097 2467\\n2260 304\\n1782 8873\\n889 6921\\n6351 5060\\n9629 334\\n9782 9189\\n9344 5287\\n8062 4881\\n5990 3154\\n359 3353\\n4119 8030\\n4304 280\\n7412 7975\\n8695 4207\\n1380 2738\\n3645 8059\\n3686 8400\\n8703 5717\\n9211 6401\\n1820 4246\\n2243 5062\\n9316 4872\\n7008 5219\\n1174 8429\\n1081 9004\\n1871 8101\\n7068 7678\\n3293 3481\\n8582 5580\\n7040 2849\\n8690 87\\n3210 3963\\n844 1075\\n1458 9714\\n9609 8693\\n2458 2524\\n5715 4953\\n9333 7650\\n9605 2214\\n5052 1738\\n9223 291\\n5656 7064\\n9988 9132\\n5826 4266\\n5498 9440\\n9113 262\\n4708 1966\\n4649 6680\\n7933 574\\n2380 5124\\n6088 4944\\n6293 610\\n2625 3771\\n8970 2377\\n2460 3006\\n8422 6644\\n7464 9710\\n1444 5182\\n1813 1497\\n4076 636\\n3959 766\\n7365 436\\n7953 8336\\n266 4549\\n6749 3016\\n8281 9370\\n6466 1080\\n6734 1771\\n9473 3522\\n1693 902\\n105 6574\\n3153 7242\\n2376 3752\\n5457 3943\\n4472 5540\\n803 9155\\n4200 3701\\n1122 9191\\n1861 2715\\n3035 7360\\n7659 3727\\n6261 2499\\n3714 2145\\n5206 4952\\n7283 263\\n6915 3938\\n5789 7650\\n8290 9769\\n211 4077\\n5914 804\\n3766 2517\\n1228 2268\\n3302 2513\\n6557 6872\\n1580 2091\\n2235 9617\\n4567 1558\\n9459 5375\\n6876 7279\\n9672 6438\\n7477 688\\n723 2029\\n8169 9026\\n2474 6020\\n3355 9559\\n7816 8781\\n8602 18\\n1254 2601\\n3659 4423\\n4646 7648\\n2653 3335\\n3991 7945\\n1068 1418\\n3947 5913\\n4219 2952\\n2637 6142\\n6227 4173\\n1894 6324\\n3476 6448\\n654 7039\\n7498 7657\\n1420 2829\\n3264 5456\\n4843 6221\\n1924 6736\\n4572 9603\\n8355 9054\\n5041 8434\\n4415 2992\\n7475 952\\n5851 6547\\n4544 9612\\n5398 1552\\n944 7273\\n9638 372\\n8934 1127\\n996 9138\\n8325 7594\\n9351 1337\\n2843 4745\\n2716 8915\\n5893 44\\n9590 1768\\n2203 1705\\n242 6107\\n4529 8279\\n733 2983\\n4956 5432\\n4659 9281\\n9167 3046\\n9386 2429\\n8954 422\\n4910 4695\\n2468 9194\\n1603 9649\\n8849 5245\\n3102 1621\\n1273 6133\\n3869 6689\\n3331 8181\\n5726 8241\\n5943 3324\\n4689 2033\\n9577 8416\\n3512 9475\\n4156 8043\\n8428 6542\\n7938 5479\\n4594 3043\\n4212 3565\\n9920 1013\\n6210 1462\\n8126 6626\\n9052 5303\\n3161 445\\n7175 5803\\n3620 7456\\n2335 3895\\n889 8864\\n2011 6635\\n7545 1333\\n6421 970\\n239 9097\\n1856 1319\\n8305 55\\n1788 1220\\n262 6977\\n1738 3511\\n1673 7373\\n631 5629\\n9787 3287\\n736 3264\\n917 6018\\n3219 2775\\n5889 6192\\n9281 7662\\n9600 6290\\n2052 6127\\n4655 3175\\n6522 85\\n1180 9309\\n4880 43\\n5181 6491\\n9604 1140\\n7495 5704\\n6095 2092\\n8212 1920\\n3785 6787\\n3048 6585\\n3937 8017\\n5714 8430\\n7106 9780\\n4002 2804\\n4983 9269\\n5943 8489\\n5452 4028\\n3884 2127\\n8120 9146\\n4954 9822\\n5944 8911\\n5660 9029\\n8435 2718\\n7843 2568\\n7344 786\\n3973 2864\\n3689 814\\n8939 7525\\n1230 1011\\n5359 7492\\n7419 6508\\n9254 5155\\n1184 9443\\n4999 3273\\n1525 1671\\n537 9559\\n4660 9548\\n778 5918\\n2438 5833\\n8828 8251\\n7557 4545\\n625 1880\\n9684 826\\n5913 4420\\n5783 544\\n4489 3784\\n5964 9153\\n8045 7366\\n973 1119\\n5408 2196\\n9643 2564\\n7528 5683\\n7695 7462\\n9390 1336\\n6198 3223\\n3107 25\\n810 6754\\n3768 4081\\n8170 6989\\n2765 8956\\n6803 8743\\n7536 3865\\n2386 1562\\n8905 6123\\n298 367\\n4989 6100\\n2188 924\\n7309 5579\\n9139 6834\\n247 2801\\n7737 2485\\n8531 5518\\n2049 4092\\n3300 3138\\n5329 8230\\n3429 3131\\n1578 7071\\n5017 972\\n4989 2209\\n1706 8912\\n6488 1621\\n4380 318\\n4737 3283\\n3297 918\\n399 9586\\n1566 4347\\n6317 4435\\n1431 794\\n2778 1214\\n5710 1859\\n9078 525\\n1043 4641\\n3207 2936\\n8153 266\\n1208 9895\\n6282 4159\\n7459 4954\\n7132 3930\\n5475 5597\\n2633 5831\\n2732 1453\\n1152 4597\\n7964 2149\\n8616 8874\\n7658 370\\n2884 7834\\n2144 5740\\n1608 8139\\n6145 3043\\n7816 4990\\n3366 3232\\n3951 6432\\n1827 1589\\n8889 3515\\n9783 1475\\n4969 5801\\n5902 7350\\n8850 8932\\n5641 1503\\n2043 6638\\n1106 5130\\n6920 5438\\n8579 9735\\n7278 4156\\n6840 8433\\n7323 4684\\n4549 8781\\n7499 3778\\n7568 6002\\n2563 8600\\n3814 2464\\n4237 7991\\n8308 3999\\n8890 9783\\n5550 2050\\n6397 8302\\n6625 4403\\n90 7757\\n6193 9168\\n1815 4786\\n1745 7637\\n1807 5344\\n1121 3111\\n3668 3702\\n9267 6648\\n3117 3657\\n8800 5054\\n6315 959\\n8164 6592\\n2602 6833\\n3124 7074\\n5652 2872\\n7844 7062\\n1531 6085\\n237 2334\\n6225 935\\n2923 9197\\n1110 8281\\n1909 2720\\n250 8588\\n9387 2847\\n5156 9994\\n801 5398\\n2734 177\\n237 4637\\n2314 9185\\n1083 6577\\n7742 7971\\n3248 5356\\n5271 9247\\n3867 4567\\n1702 2210\\n6482 297\\n3127 8094\\n7305 2761\\n5478 6964\\n410 6860\\n7934 2849\\n1160 3886\\n4332 7344\\n3038 9661\\n9501 819\\n4482 9680\\n545 2357\\n8296 9971\\n1623 4122\\n9779 3599\\n9251 1580\\n2326 8984\\n8947 5683\\n2356 6551\\n5600 2007\\n5075 5500\\n9155 9543\\n5150 2701\\n1713 7719\\n8296 7200\\n3416 5455\\n9632 8037\\n4724 1042\\n6731 2172\\n2724 4598\\n8595 3082\\n2137 603\\n2250 6456\\n1767 5754\\n1360 2343\\n4178 2746\\n7576 1692\\n2515 9295\\n3785 3820\\n725 4095\\n6358 3282\\n3307 4238\\n2101 4421\\n3684 1726\\n4638 8782\\n2209 7230\\n8082 5930\\n5658 2140\\n9676 3039\\n8025 4766\\n6885 1863\\n7885 543\\n7572 3129\\n303 7816\\n6848 1342\\n2845 1927\\n1737 8971\\n9638 5763\\n4276 5076\\n3831 3485\\n1216 9647\\n1183 7174\\n747 518\\n7144 257\\n2005 8714\\n2269 9787\\n6855 6876\\n2660 7418\\n5323 1512\\n538 6195\\n5939 7631\\n6870 6748\\n1815 7799\\n1902 290\\n2998 157\\n2180 8203\\n3384 6314\\n8261 5285\\n2114 1909\\n938 9929\\n3692 9620\\n94 834\\n8925 6345\\n5491 6312\\n5986 8585\\n6981 7084\\n2947 954\\n4600 9987\\n892 2302\\n2078 1123\\n331 3283\\n4551 9723\\n302 406\\n9217 5113\\n6628 2444\\n4661 2054\\n6695 4139\\n2298 4124\\n9561 2348\\n3255 5348\\n5108 1350\\n8594 8790\\n778 3791\\n8384 9484\\n4585 5457\\n8832 7389\\n4453 2560\\n3803 4771\\n2245 868\\n7975 3048\\n118 2723\\n4945 7519\\n6656 2839\\n4961 5057\\n127 9872\\n7565 9985\\n4630 3209\\n5722 7615\\n1987 2521\\n1566 3312\\n3643 4482\\n3432 6886\\n4554 9229\\n8840 5641\\n563 517\\n1683 4460\\n2083 4236\\n391 2316\\n5206 5193\\n5614 3334\\n9008 3526\\n4395 6629\\n6599 7831\\n7762 8429\\n9414 9755\\n5443 2800\\n371 6914\\n6495 4469\\n3609 6791\\n4070 1370\\n46 8802\\n9242 9774\\n8316 3929\\n9839 1250\\n8970 1017\\n5530 346\\n3427 6195\\n2833 4698\\n2287 8359\\n8533 3974\\n9739 9840\\n8278 8421\\n5722 2273\\n3844 9353\\n5952 9431\\n7240 5410\\n6498 7091\\n5831 2429\\n4769 866\\n8088 3438\\n5713 2233\\n7147 7126\\n6377 4374\\n390 1630\\n5104 8231\\n4633 8439\\n5562 7237\\n8070 4239\\n9927 7201\\n8621 3536\\n7301 6152\\n4441 8170\\n3792 4945\\n2502 1653\\n3530 2419\\n6805 5027\\n9408 6337\\n4146 4525\\n9771 922\\n486 6199\\n723 3270\\n4976 3247\\n4294 5888\\n2257 115\\n6139 5329\\n1614 4881\\n1430 6206\\n6523 2426\\n2968 6999\\n6438 6079\\n5440 6414\\n2279 5944\\n9764 7112\\n2072 6662\\n4158 846\\n4117 684\\n6091 2208\\n8307 9664\\n6216 5598\\n8167 5670\\n4265 4431\\n2841 7594\\n7378 1784\\n4773 5600\\n606\\n8658 2381\\n4808 8605\\n4729 5090\\n5491 9593\\n6693 9958\\n9568 8769\\n9143 1347\\n8917 1834\\n4435 4047\\n3919 3313\\n2420 2028\\n8960 7049\\n7854 8495\\n9460 3016\\n69 2402\\n8037 5209\\n2600 2540\\n8247 5583\\n460 9270\\n599 7816\\n5708 452\\n3831 5828\\n4037 44\\n2345 7800\\n7511 7193\\n633 7185\\n7233 8003\\n7577 5986\\n4068 71\\n9180 8302\\n6059 4\\n6297 7952\\n4093 6038\\n3866 9693\\n1655 9524\\n6629 6849\\n4513 6117\\n1398 3747\\n5730 4252\\n4973 6557\\n7186 6050\\n84 9058\\n549 1093\\n9148 27\\n1172 6444\\n885 7820\\n3954 6106\\n3233 1056\\n792 1330\\n4139 2357\\n5387 7791\\n6565 5990\\n5752 7892\\n8108 5478\\n1304 8148\\n6912 6680\\n1891 2690\\n8182 7677\\n1748 1645\\n7918 9079\\n3714 4799\\n7880 3599\\n8581 3292\\n9603 6402\\n9326 2901\\n4100 7166\\n9668 3984\\n1260 9668\\n4696 3308\\n2001 7831\\n6175 3682\\n2512 6632\\n6778 2111\\n9965 3326\\n4500 8065\\n3913 8090\\n2286 3394\\n3296 3996\\n3235 6822\\n3293 5272\\n2550 6988\\n8666 6176\\n8842 9520\\n4081 9631\\n8321 5683\\n6202 1404\\n1814 1706\\n8089 6315\\n2192 1039\\n2132 2546\\n2780 3823\\n8812 2831\\n5005 3454\\n8496 1607\\n6499 5178\\n5041 5743\\n7518 9216\\n400 6836\\n5567 787\\n1266 8133\\n1691 2693\\n5827 6175\\n5967 7060\\n6941 4193\\n1121 4771\\n197 1817\\n4347 7281\\n5155 2811\\n6946 3657\\n527 423\\n4410 3199\\n7506 8579\\n4292 8390\\n7662 4610\\n3109 1533\\n9481 309\\n4850 374\\n5030 5944\\n1401 2304\\n2001 6978\\n4739 562\\n2489 710\\n6655 8110\\n8650 8325\\n8611 2074\\n3066 3176\\n3938 7478\\n3395 355\\n6633 8673\\n3828 8099\\n112 3275\\n7936 9046\\n1125 8273\\n3712 3177\\n9255 7475\\n539 2693\\n7187 4169\\n7378 5386\\n990 7015\\n8265 5793\\n3985 2508\\n3010 4690\\n6982 5657\\n2180 392\\n7524 5712\\n643 8253\\n204 1235\\n2134 2615\\n6979 4558\\n8846 1978\\n5361 7941\\n4740 8198\\n6552 3564\\n8255 6056\\n9744 9845\\n8808 6396\\n1887 7545\\n5358 6794\\n3552 1465\\n9186 6390\\n5726 1325\\n9346 3993\\n5724 1324\\n7177 4932\\n14 170\\n8275 9767\\n2501 7094\\n9114 787\\n7984 9612\\n9484 3653\\n8603 3050\\n7488 984\\n4063 7172\\n2953 9406\\n8977 2054\\n5163 9878\\n6141 6481\\n566 6521\\n3344 4996\\n6736 4851\\n9601 6497\\n8897 222\\n9811 3984\\n5628 2257\\n202 9907\\n1155 5053\\n1752 5858\\n2706 2365\\n3575 798\\n9714 7490\\n6937 4306\\n1635 8582\\n4258 593\\n3718 3323\\n3412 1299\\n5096 8554\\n9813 5137\\n4120 9763\\n2983 3691\\n9024 5913\\n1906 6304\\n205 988\\n2962 6005\\n7508 1793\\n9827 7416\\n5829 3647\\n1414 8883\\n7912 1592\\n7285 9649\\n1768 6935\\n8684 1608\\n3463 1398\\n4551 18\\n1647 3688\\n442 9288\\n3864 7765\\n8713 9251\\n4490 2301\\n6279 1311\\n93 1052\\n9951 5170\\n4328 6873\\n9804 1263\\n4196 1250\\n6367 5299\\n1066 449\\n5359 5469\\n391 5369\\n7557 6850\\n9278 5031\\n4934 5690\\n8546 5343\\n5530 7392\\n9156 2070\\n9181 450\\n6181 2202\\n420 1287\\n7236 8831\\n6855 8082\\n2305 4377\\n4234 6343\\n5038 7708\\n6436 6264\\n9612 1240\\n2421 5633\\n7180 7017\\n9895 541\\n4909 3480\\n3990 910\\n5560 6655\\n6522 4115\\n3102 5701\\n8605 4694\\n5532 2012\\n8473 6752\\n5990 6734\\n1733 835\\n6235 4937\\n362 587\\n7106 9931\\n2911 1555\\n6481 72\\n6905 5983\\n9955 9698\\n5539 8867\\n9877 3689\\n1864 2621\\n181 2391\\n1917 2494\\n5399 7606\\n735 4571\\n743 6720\\n4255 6593\\n1924 5507\\n4145 6188\\n4252 7704\\n3594 4900\\n1692 9767\\n8671 7163\\n6860 4409\\n6322 4551\\n9157 4659\\n2849 9305\\n9205 7040\\n2304 3152\\n1237 7592\\n1036 3234\\n4755 1295\\n4810 2571\\n7719 6892\\n3309 8977\\n133 3350\\n8288 7824\\n3806 4542\\n1788 9966\\n2217 6544\\n3602 6926\\n7690 6031\\n2620 9131\\n6166 4023\\n1946 2423\\n3114 9921\\n1037 5238\\n1560 4286\\n2121 9205\\n6365 3995\\n5427 1904\\n3321 8525\\n4104 5841\\n2193 112\\n6065 5967\\n3920 2236\\n1575 1022\\n5928 1228\\n3307 9506\\n8239 7161\\n6410 6171\\n4234 6110\\n1904 7175\\n9324 1650\\n1208 5763\\n7560 9403\\n2032 6785\\n1729 1270\\n621 2747\\n9073 3639\\n546 205\\n8128 2811\\n4191 6016\\n2586 799\\n3388 2146\\n4052 7946\\n3501 3613\\n7257 1924\\n9175 3150\\n8236 478\\n6737 7344\\n4678 552\\n202 7198\\n4556 566\\n3215 1741\\n2652 9122\\n8370 9050\\n3337 541\\n2983 444\\n3110 8858\\n1026 3676\\n3157 512\\n4773 8567\\n1787 6660\\n8362 1569\\n1375 7868\\n8267 9939\\n8668 4458\\n682 1590\\n535 6904\\n5129 1717\\n2530 2670\\n8544 4217\\n1305 4796\\n9151 7716\\n466 8438\\n123 1390\\n542 6011\\n1859 2999\\n3441 3127\\n1332 5392\\n9391 8520\\n3594 8220\\n7124 9207\\n1160 4223\\n7793 5810\\n9110 8367\\n8470 5220\\n6039 4064\\n4588 3618\\n4171 2247\\n294 8948\\n3269 1116\\n6442 5059\\n7253 3141\\n4193 2688\\n2324 6340\\n6980 1842\\n9327 7202\\n9024 134\\n7640 1177\\n3070 4384\\n2829 5877\\n1616 9510\\n9607 5490\\n9280 9153\\n8734 3206\\n7439 385\\n5618 3731\\n6927 4119\\n3656 6499\\n3582 6420\\n887 3116\\n4130 1897\\n8515 2801\\n7043 2180\\n9186 6330\\n6702 4817\\n7217 5802\\n4011 8265\\n4714 3699\\n5197 8392\\n4309 4853\\n3717 7643\\n2541 6571\\n7844 572\\n4926 6737\\n2504 6505\\n6200 306\\n5669 888\\n1417 1102\\n9472 6903\\n9115 9364\\n8799 7740\\n6258 8369\\n6170 9141\\n1571 682\\n2525 8957\\n9335 2981\\n481 6686\\n409 3686\\n1565 5932\\n319 9606\\n9621 9207\\n809 4294\\n5304 6290\\n463 3815\\n3535 275\\n1849 3312\\n3343 4325\\n3656 2208\\n2524 3815\\n5731 9557\\n921 2622\\n6341 676\\n3689 8851\\n60 2249\\n8210 6512\\n4701 7675\\n7158 774\\n6253 9551\\n4757 3205\\n4408 2097\\n1708 6581\\n5933 2423\\n2063 9879\\n2370 5124\\n3624 3218\\n1774 2673\\n7035 4725\\n920 6582\\n6746 8750\\n46 8256\\n8796 4234\\n5387 5677\\n164 7641\\n4337 1258\\n9562 1366\\n3140 7654\\n6416 6678\\n114 1859\\n7068 1736\\n4276 2211\\n3706 5728\\n3659 3121\\n5615 8415\\n9609 4462\\n994 3522\\n3134 7367\\n975 1004\\n2178 7998\\n6447 3751\\n3623 3703\\n6689 954\\n6123 6522\\n8461 1175\\n6611 8899\\n8408 7188\\n8765 3236\\n7942 9063\\n5465 3947\\n9651 5636\\n389 3070\\n2138 7306\\n6738 8382\\n7252 1770\\n290 4354\\n8684 7643\\n4409 600\\n1677 9110\\n733 5812\\n3770 6001\\n2265 92\\n1397 9967\\n1253 8015\\n821 5235\\n2529 8973\\n9232 3378\\n2700 5193\\n5044 1068\\n9879 5608\\n8318 3822\\n8196 1626\\n5802 1525\\n4859 4768\\n1307 6399\\n9209 2604\\n1576 4873\\n664 517\\n3467 7726\\n467 3834\\n1294 8364\\n6607 4529\\n1272 3716\\n6259 1868\\n1020 534\\n8777 6309\\n8301 7660\\n2470 7795\\n1616 6024\\n3272 3283\\n7066 5110\\n2711 8745\\n5047 5297\\n8508 6726\\n8433 2591\\n2294 6570\\n2566 9784\\n9543 1553\\n4754 692\\n8576 6100\\n507 2063\\n334 4314\\n6667 9814\\n8168 6850\\n5214 2305\\n8801 9422\\n2489 3576\\n4538 2200\\n5534 7991\\n3126 3126\\n1504 4645\\n3339 9814\\n5200 893\\n8944 6468\\n7728 7581\\n7863 8240\\n8262 6000\\n6356 8467\\n859 7538\\n4026 7379\\n5163 8503\\n193 9799\\n4792 4966\\n3073 5421\\n1517 6016\\n1690 2702\\n3114 5804\\n7441 2909\\n1074 4673\\n921 5572\\n4263 4165\\n916 2374\\n8440 9679\\n875 1328\\n2627 4334\\n7668 815\\n1480 5995\\n91 7610\\n429 7114\\n8627 1192\\n3567 3902\\n9160 5096\\n6070 4608\\n1982 6142\\n4216 7411\\n8295 3180\\n3616 1234\\n7441 1223\\n6860 1855\\n6149 5553\\n4393 9856\\n2413 5587\\n5662 9866\\n6618 8033\\n122 1385\\n2254 4408\\n1343 5924\\n5148 6948\\n1016 3506\\n9872 3936\\n6346 6002\\n8054 5639\\n5996 1369\\n5488 9354\\n4771 8076\\n121 2044\\n8576 7969\\n5156 8006\\n4391 2045\\n546\\n9617 4195\\n9579 3345\\n4729 6049\\n8350 1047\\n7034 7129\\n713 3006\\n8162 4030\\n1196 6332\\n358 2454\\n9785 8312\\n8373 8880\\n9456 1195\\n3056 5430\\n6969 2715\\n4378 7079\\n4852 2490\\n8693 654\\n247 8340\\n3030 4769\\n2494 6502\\n5531 1527\\n9936 3752\\n3753 3558\\n5896 1425\\n4775 2752\\n102 9577\\n8800 5668\\n2329 7471\\n1047 4427\\n7955 7010\\n909 1468\\n961 5926\\n1235 3175\\n4445 1860\\n4345 95\\n7364 185\\n6149 7497\\n8848 7912\\n2790 7342\\n3477 1879\\n2597 8167\\n7423 5294\\n6997 4085\\n1642 7180\\n3011 2619\\n1765 4395\\n353 3463\\n6318 7857\\n8605 1093\\n5336 3894\\n5681 8626\\n8520 6264\\n6528 3653\\n9869 8622\\n6993 755\\n6986 757\\n551 4836\\n3586 8078\\n6007 1138\\n1158 8864\\n1086 6579\\n150 9898\\n2301 786\\n7659 7484\\n3412 6796\\n8805 2125\\n7787 8752\\n54 1262\\n3403 1265\\n6840 9993\\n6167 7061\\n4778 6578\\n4527 4996\\n4433 1744\\n1314 4481\\n163 7349\\n3929 6536\\n959 4781\\n4245 7809\\n4355 4640\\n5307 5527\\n4050 687\\n2732 9141\\n3936 7996\\n2328 8819\\n5874 761\\n6077 4356\\n7230 315\\n3190 9559\\n2904 1498\\n4793 8820\\n9025 3979\\n4421 7554\\n9074 4564\\n5627 6094\\n217 9408\\n4866 7310\\n8527 1188\\n9330 8531\\n8548 9279\\n7593 1400\\n6854 5389\\n6658 3480\\n7681 3319\\n8618 193\\n209 4293\\n3931 2394\\n4909 9929\\n8460 4332\\n758 2124\\n9837 3481\\n2053 3166\\n9257 2320\\n5616 1808\\n868 6657\\n3097 6015\\n352 6917\\n1206 385\\n639 565\\n9563 820\\n2663 9547\\n3520 7778\\n1132 2782\\n8741 8042\\n6302 1464\\n6538 890\\n3165 1662\\n8564 440\\n1894 3162\\n6769 7051\\n540 3587\\n8663 9802\\n5411 7953\\n5338 6126\\n6107 2684\\n5547 4782\\n1063 1409\\n5830 4792\\n1447 1637\\n437 6920\\n1597 4371\\n5947 9207\\n9411 5991\\n4361 6381\\n19 6778\\n3861 565\\n6651 3727\\n2329 6121\\n4114 3271\\n2781 2782\\n6591 9998\\n3740 653\\n721 7739\\n6940 2623\\n1923 5332\\n9082 8457\\n1999 3505\\n4255 244\\n733 3265\\n8169 2519\\n3917 8646\\n7252 6950\\n1721 5438\\n1329 6128\\n4419 7031\\n1067 9197\\n8606 302\\n3699 2148\\n3215 7949\\n6213 1974\\n4378 8313\\n6622 12\\n8810 8377\\n5398 5696\\n3242 6578\\n1842 3968\\n6124 656\\n5223 399\\n6019 8941\\n9701 6064\\n7319 2782\\n2514 3024\\n9260 913\\n447 317\\n1632 7675\\n8908 488\\n5553 9079\\n6887 5448\\n3411 9690\\n8979 7862\\n1534 2430\\n9456 3012\\n5135 9066\\n1025 882\\n1861 249\\n1660 1295\\n2277 6863\\n687 2287\\n1796 8094\\n8734 9092\\n6887 204\\n3973 8598\\n5723 9833\\n2057 3434\\n4495 9201\\n9130 3947\\n4314 8968\\n659 9786\\n313 6418\\n6963 3244\\n9174 616\\n935 1830\\n4531 2515\\n359 9238\\n28 4014\\n4574 8124\\n2356 1638\\n1021 6748\\n6338 6354\\n2059 668\\n8078 4419\\n9153 5978\\n7525 7344\\n4459 3247\\n7757 6235\\n1459 5611\\n8498 1726\\n9493 9159\\n426 7296\\n8857 2141\\n8540 5335\\n772 6556\\n1657 7647\\n7167 4815\\n2870 6285\\n887 9773\\n7224 1062\\n3333 6993\\n5426 5928\\n1013 4978\\n355 4959\\n4073 3708\\n180 8744\\n1488 8785\\n6040 227\\n5190 6147\\n2362 6166\\n3485 5940\\n7795 4937\\n6088 888\\n8722 4632\\n2548 7531\\n1030 9360\\n2245 473\\n8990 9268\\n8177 496\\n4558 5199\\n9505 344\\n9678 9172\\n4846 6776\\n1308 8215\\n1969 7312\\n7478 6821\\n5481 1512\\n8980 3202\\n2039 5524\\n8928 1434\\n7754 2544\\n3563 3238\\n9830 6272\\n9153 6379\\n3363 8456\\n5748 9950\\n5288 8097\\n3491 7586\\n7880 1640\\n4936 613\\n1271 1632\\n1806 5343\\n4747 3280\\n6696 4854\\n9658 2751\\n7271 2215\\n9938 2455\\n7561 5022\\n1328 7436\\n3198 6601\\n2264 3837\\n9771 1421\\n3957 6677\\n5959 4510\\n7667 9754\\n6099 8497\\n7186 6265\\n1169 6654\\n4502 5547\\n5883 68\\n6055 9848\\n4637 8137\\n2456 4261\\n4419 5006\\n4029 846\\n9635 968\\n9710 9189\\n6576 84\\n971 9248\\n8742 6209\\n6223 8623\\n1537 6225\\n9798 6652\\n8472 4368\\n7951 401\\n9800 6623\\n1092 8876\\n7079 6022\\n4553 5648\\n5008 5006\\n3191 8896\\n2953 936\\n7728 1444\\n1586 2185\\n1227 7505\\n1008 80\\n3400 8584\\n9875 2782\\n3608 7900\\n4411 4115\\n3069 3246\\n8335 6584\\n6214 6808\\n8929 9733\\n7298 6288\\n2887 8240\\n5838 9577\\n9403 5005\\n7018 1648\\n5275 8932\\n808 8492\\n6029 1606\\n7368 4719\\n4669 962\\n8083 1208\\n2159 2734\\n5632 7392\\n7067 1177\\n3526 290\\n1344 910\\n8425 6025\\n5510 2804\\n8775 8294\\n6152 848\\n3218 4663\\n4567 186\\n4694 5398\\n2881 217\\n3587 4029\\n5477 8666\\n7085 5113\\n2406 1728\\n8636 4685\\n6108 2461\\n6959 5380\\n1205 6821\\n3452 4620\\n8552 1467\\n4848 7867\\n7633 6991\\n6649 9162\\n2778 8373\\n5338 3626\\n2611 3177\\n2425 9420\\n2310 9136\\n2700 2127\\n2939 4010\\n2042 6593\\n3432 9675\\n9989 4416\\n9573 353\\n8491 4219\\n303 7236\\n8214 9537\\n7869 5513\\n6924 9501\\n7839 9121\\n8325 5476\\n4718 3581\\n1374 8649\\n9362 734\\n8479 8668\\n4772 8668\\n8579 2840\\n7336 3870\\n9682 3802\\n5664 6305\\n9650 2070\\n6036 7543\\n2211 3142\\n5348 3641\\n2474 5174\\n3755 7968\\n6944 1663\\n5609 4983\\n4349 3491\\n8796 7583\\n7613 279\\n3900 1356\\n1013 7126\\n5359 8442\\n7814 7130\\n1857 2814\\n2316 2561\\n6478 2970\\n6353 7658\\n2135 7897\\n9838 7290\\n5747 4357\\n974 1804\\n1274 4986\\n6871 4920\\n111 515\\n579 9961\\n1161 2434\\n6346 6303\\n4408 5979\\n7086 5340\\n4878 3127\\n1725 932\\n841 3490\\n6390 6551\\n4111 9254\\n5772 5670\\n3107 3010\\n6115 1679\\n3006 5489\\n9008 6781\\n7598 5849\\n4951 7645\\n2401 1544\\n2594 1405\\n8026 8771\\n6540 9191\\n4352 2425\\n5152 2880\\n6213 4752\\n8983 8517\\n4175 6431\\n6052 859\\n2275 275\\n4135 7514\\n9698 862\\n6440 2115\\n8053 8706\\n370 2486\\n2805 7841\\n8076 6834\\n8456 8856\\n8142 4595\\n96 2147\\n9523 169\\n6205 2086\\n8086 6340\\n1449 7186\\n9938 8976\\n9250 914\\n8783 6756\\n6326 9669\\n1407 8074\\n8211 2562\\n339 5600\\n611 8541\\n2298 1386\\n2790 4742\\n9782 7568\\n9911 1174\\n6581 5345\\n2088 7923\\n7065 442\\n6443 1079\\n4988 6074\\n3916 8598\\n9625 616\\n8528 9630\\n714 124\\n4517 9321\\n7570 8816\\n4268 149\\n2869 26\\n984 193\\n5678 1289\\n9068 9870\\n1849 8707\\n9299 7107\\n4431 3292\\n7232 652\\n5186 5143\\n1316 4000\\n2896 7263\\n6729 9976\\n6204 6608\\n1805 6116\\n8610 9671\\n6848 3244\\n7710 8881\\n1244 4336\\n7279 7037\\n5477 3081\\n4311 8051\\n4743 5414\\n3476 1015\\n1242 6845\\n4241 3560\\n1679 5933\\n2783 7807\\n5151 2773\\n3142 5770\\n206 1518\\n1971 7685\\n3047 3842\\n4166 6528\\n1713 2352\\n8568 3375\\n9208 5362\\n5893 1092\\n1342 4593\\n8183 3817\\n8932 5293\\n2760 3135\\n1695 1345\\n8275 5162\\n7500 5296\\n2258 8122\\n769 797\\n9119 1275\\n1360 6829\\n9107 1954\\n9132 9301\\n5968 4890\\n9716 2400\\n7187 9838\\n3340 3411\\n513 7672\\n6053 9913\\n5317 2365\\n4290 9450\\n5608 184\\n515\\n5043 2195\\n5698 8348\\n6052 5239\\n7705 73\\n1816 9707\\n8289 2409\\n9690 5338\\n8446 2876\\n7001 488\\n4924 75\\n8429 3062\\n9818 1731\\n9427 7044\\n2948 4648\\n7961 4958\\n1792 2966\\n9354 4448\\n3464 1868\\n7967 6819\\n2309 8189\\n11 7234\\n3523 9746\\n6105 9007\\n889 2847\\n6557 7618\\n1864 5073\\n4196 8967\\n4694 711\\n4577 3680\\n3860 1163\\n5065 6675\\n2499 2473\\n2424 9682\\n6733 2425\\n1196 6720\\n5301 5611\\n6894 1055\\n6301 8466\\n7584 24\\n7216 3619\\n1556 6684\\n7523 2142\\n18 144\\n5616 8254\\n1458 7854\\n2940 3910\\n4064 7202\\n733 2002\\n7428 4161\\n2675 6407\\n3013 1233\\n4958 2239\\n2307 8536\\n9987 9230\\n6834 9367\\n6195 5349\\n573 6389\\n3359 6603\\n6793 3209\\n1541 357\\n440 4842\\n3651 4553\\n9140 258\\n5062 5433\\n806 9834\\n5090 1020\\n3855 7903\\n5911 4870\\n118 3518\\n6143 1554\\n6754 5626\\n3554 291\\n1068 1187\\n9997 4066\\n4245 5418\\n6789 5903\\n1286 5590\\n9577 2340\\n2142 6430\\n3798 6701\\n1320 8683\\n9895 4157\\n7657 2979\\n8366 3372\\n7738 3956\\n1908 6959\\n4272 2322\\n6757 508\\n6309 3573\\n7844 9357\\n7379 2605\\n9591 7755\\n9451 4530\\n8293 7338\\n9818 9374\\n156 7661\\n8151 6553\\n739 1844\\n9322 139\\n5569 8451\\n6941 7939\\n8475 6721\\n414 4586\\n4672 4743\\n9488 3321\\n2094 6934\\n6873 9475\\n284 3660\\n4459 7936\\n4061 5015\\n8757 9041\\n5075 1015\\n6246 5373\\n5967 8813\\n2117 8614\\n2642 1863\\n2488 4081\\n4159 4287\\n898 9311\\n122 5587\\n6636 72\\n8751 1624\\n2173 1377\\n8389 703\\n1524 2926\\n1808 370\\n6988 620\\n931 3419\\n2734 4836\\n6138 4343\\n880 220\\n9578 5894\\n7673 8891\\n775 4036\\n7542 4371\\n6359 4061\\n387 6315\\n869 6921\\n6999 993\\n1032 1245\\n2665 6418\\n1198 9064\\n9401 7386\\n173 7260\\n2048 8005\\n9973 6659\\n6937 4964\\n7963 2368\\n1529 4756\\n3853 5280\\n2328 961\\n684 3592\\n3554 7595\\n3662 298\\n626 9334\\n5689 3697\\n5035 6296\\n5668 1799\\n8791 5700\\n4933 2456\\n7675 9939\\n1080 8444\\n6625 4699\\n5507 2394\\n6850 5515\\n362 6884\\n9837 6704\\n6322 9078\\n5198 3125\\n7836 2553\\n4354 7371\\n6995 74\\n5410 5016\\n3145 6381\\n2003 9871\\n9953 9862\\n305 8823\\n57 2476\\n5102 3332\\n4124 4136\\n5885 1092\\n5776 8979\\n8019 2253\\n2306 1610\\n3969 5547\\n7479 2421\\n2530 6787\\n217 856\\n5512 8328\\n4102 1477\\n5062 8584\\n9282 43\\n2836 2937\\n2728 5966\\n6855 2898\\n9354 2578\\n8084 5599\\n6322 7059\\n1960 8140\\n3976 797\\n5094 520\\n5031 748\\n6298 2172\\n9134 5045\\n5680 9500\\n3796 2367\\n8124 751\\n5578 4240\\n2245 334\\n8944 5795\\n2585 7904\\n7622 1166\\n7063 2740\\n233 1869\\n3068 9675\\n7436 6467\\n6992 5060\\n5076 2289\\n1783 1050\\n1677 1002\\n1374 4075\\n4573 528\\n151 1990\\n4742 9938\\n12 518\\n7953 5818\\n6863 6425\\n5415 9338\\n7900 2202\\n7393 3512\\n9114 3773\\n4874 7944\\n8235 8885\\n4128 727\\n867 1738\\n6361 8969\\n4140 3603\\n6986 6750\\n7764 9963\\n480 9238\\n1764 7607\\n3531 1396\\n9469 7288\\n7343 4764\\n8810 374\\n720 4779\\n5719 4113\\n469 7110\\n5579 2179\\n8016 6859\\n7751 7654\\n8707 1414\\n9881 4831\\n7392 9383\\n56 1850\\n1219 3833\\n8106 4586\\n9964 5160\\n5266 1644\\n3020 6178\\n156 8456\\n9835 8117\\n9203 6072\\n737 481\\n5627 6732\\n1410 860\\n4785 1048\\n3490 5129\\n7749 7552\\n834 1909\\n282 1186\\n1352 1616\\n618 8645\\n5155 2084\\n1318 273\\n7636 5943\\n3420 4227\\n2599 7600\\n6706 7886\\n8118 6050\\n3386 6574\\n1223 6199\\n7651 3400\\n7103 5160\\n5680 7098\\n7438 911\\n3430 9754\\n2735 3405\\n3315 8736\\n8455 5683\\n3174 7825\\n9230 2869\\n4622 9723\\n2345 3402\\n8191 2747\\n8690 1397\\n4346 6607\\n8411 5544\\n1350 5189\\n6155 7074\\n2854 606\\n4590 8939\\n1166 4987\\n296 6481\\n7425 1143\\n2527 3690\\n7725 9034\\n1596 7902\\n9005 7879\\n7757 6209\\n7455 8439\\n2828 521\\n6750 846\\n188 5631\\n9176 6063\\n3874 7018\\n8056 8962\\n450 4773\\n2530 3987\\n4291 1071\\n3693 7993\\n6228 9029\\n9022 9779\\n4416 7548\\n3194 658\\n6160 8347\\n2633 4144\\n1719 6486\\n7986 6290\\n9119 7108\\n5364 7805\\n9039 3559\\n1909 5723\\n1358 4165\\n5118 8554\\n7098 7605\\n9055 957\\n2558 5068\\n9973 6297\\n3050 9907\\n1765 8935\\n9943 6719\\n6667 3626\\n813 2740\\n9946 4649\\n3644 5964\\n3332 5874\\n1014 7353\\n5493 4683\\n587 8913\\n5904 7712\\n8999 4875\\n4862 7808\\n209 4229\\n126 8443\\n9004 889\\n9817 3815\\n3369 3098\\n7915 5026\\n1292 2380\\n2851 1911\\n5564 5224\\n8695 2986\\n3009 6193\\n1836 8626\\n545 9646\\n3425 1107\\n6322 5853\\n2356 2595\\n4815 814\\n2150 5685\\n3134 9911\\n6072 4196\\n7720 1825\\n4031 373\\n9845 5123\\n743 4094\\n3542 8218\\n6108 2458\\n3392 1640\\n2807 3957\\n6600 4385\\n9166 3664\\n4052 2301\\n7009 3807\\n7661 9892\\n6618 5565\\n1193 2979\\n2607 3367\\n9834 4161\\n8437 4225\\n2108 9867\\n6004 2531\\n1303 3912\\n3812 2613\\n7448 5538\\n8644 7580\\n1851 3843\\n3770 6276\\n7813 4658\\n9062 567\\n58 9059\\n2326 8486\\n8688 183\\n7764 1130\\n3666 8585\\n1172 1754\\n1007 158\\n2417 5914\\n9786 2907\\n5723 4631\\n4967 39\\n1228 6933\\n1399 3547\\n6897 4071\\n1812 3223\\n1562 3234\\n4947 134\\n8195 5078\\n6260 5079\\n3257 6513\\n9172 3040\\n3525 6891\\n6012 8211\\n2508 8713\\n3897 3137\\n6816 6596\\n1789 5428\\n3426 1824\\n5362 6170\\n2398 3159\\n7849 8850\\n2716 2223\\n8136 8215\\n2330 7960\\n3362 197\\n7644 5927\\n5863 8386\\n8732 7748\\n5961 5516\\n9298 6282\\n9915 2346\\n8811 9351\\n5053 2317\\n9201 4810\\n5091 8708\\n7595 4205\\n2181 496\\n1963 8143\\n6653 1903\\n9365 146\\n8418 3635\\n1185 1427\\n4171 2144\\n2857 8950\\n5549 119\\n367 267\\n887 6036\\n3256 5553\\n2727 8640\\n9097 5330\\n3913 6153\\n759 48\\n9842 3255\\n1893 7258\\n6837 3956\\n3714 9177\\n5533 2955\\n636 2356\\n9502 8752\\n5099 5414\\n6570 7581\\n4148 3915\\n8394 3270\\n3150 8330\\n8686 8733\\n9561 6932\\n3890 3060\\n1337 3490\\n1454 3132\\n2608 8369\\n7227 1397\\n6731 9043\\n4835 4969\\n4702 5273\\n4622 3630\\n2669 2980\\n6898 8530\\n7325 3964\\n2321 4406\\n1740 4219\\n4446 1772\\n7010 6913\\n3240 6818\\n1208 4606\\n6643 8804\\n7830 3355\\n6758 2545\\n1678 8899\\n2745 5130\\n739 9567\\n4258 7618\\n3951 2238\\n1396 4998\\n5028 282\\n7780 7437\\n7256 6123\\n9828 7743\\n5282 2708\\n6752 60\\n6925 1002\\n258 1673\\n2517 6609\\n5535 1058\\n3020 5550\\n160\\n141 3948\\n6146 3595\\n6908 7616\\n3477 7735\\n4914 2931\\n143 1846\\n3667 793\\n5341 2355\\n2313 3062\\n2000 2122\\n3314 7522\\n7907 7319\\n9609 769\\n6873 3952\\n3879 924\\n3692 8267\\n6754 11\\n412 7545\\n809 5595\\n8190 9690\\n9329 6089\\n2282 9577\\n6379 9082\\n1734 8759\\n665 3668\\n8661 5270\\n6378 4683\\n503 1020\\n3326 4030\\n316 5802\\n6324 4194\\n1565 3522\\n9072 9942\\n5721 993\\n5720 3420\\n860 8\\n2501 8653\\n3496 102\\n9910 3502\\n2716 3011\\n6685 9805\\n4550 625\\n7036 8925\\n8363 3558\\n5561 7851\\n3759 8228\\n8777 239\\n8006 1261\\n7883 7314\\n7165 2230\\n9755 750\\n7088 343\\n7260 2730\\n4036 6955\\n5392 5601\\n5461 4295\\n6947 2553\\n3228 6183\\n8556 4809\\n4276 3921\\n336 3350\\n5903 8583\\n427 8538\\n4802 8036\\n9082 2971\\n9260 699\\n1964 2518\\n1164 9385\\n1974 5472\\n449 9270\\n9921 7503\\n5126 2267\\n2249 4204\\n443 8304\\n3165 7263\\n4297 2843\\n1852 8077\\n1328 9479\\n255 954\\n4388 2058\\n2361 9315\\n502 8482\\n914 331\\n6857 5669\\n8819 9490\\n4038 1349\\n9087 4166\\n8554 1364\\n4942 3703\\n9575 8572\\n608 4923\\n2252 4406\\n9702 5049\\n5723 7111\\n4412 9335\\n1028 5367\\n6981 5706\\n2620 4765\\n990 9041\\n7001 3303\\n9549 9318\\n6170 9029\\n9642 4697\\n8975 8694\\n4739 7096\\n750 8265\\n2205 8711\\n9770 6225\\n3454 344\\n2447 1505\\n693 9409\\n3452 181\\n7815 1753\\n9011 7537\\n1037 8714\\n745 4043\\n9599 8052\\n2396 2569\\n1394 5644\\n7209 1781\\n5860 8647\\n5107 9789\\n9697 536\\n1642 242\\n9282 3278\\n1548 3419\\n3758 3943\\n1051 6683\\n7224 3186\\n4687 4480\\n1550 7699\\n8193 2325\\n383 4441\\n2000 3506\\n7534 2078\\n4833 1217\\n7518 3729\\n3273 6883\\n269 3750\\n728 457\\n2602 98\\n901 5780\\n5586 9625\\n3341 829\\n2494 7688\\n2713 1489\\n1638 4663\\n5536 2395\\n7384 2252\\n3111 5928\\n8173 8540\\n7874 3400\\n635 262\\n8118 2926\\n7191 8818\\n4239 1768\\n9914 6369\\n8223 2446\\n1970 7882\\n5913 1847\\n275\\n1022 5886\\n1585 6869\\n3840 2204\\n274 1939\\n1338 4020\\n6496 6944\\n3386 8411\\n6501 4217\\n862 6867\\n5157 9509\\n7616 2967\\n704 1796\\n9486 553\\n4332 231\\n12 8771\\n884 1913\\n3471 712\\n6260 818\\n9734 3748\\n2892 1746\\n7377 1041\\n1573 5559\\n8607 1862\\n50 190\\n8648 1069\\n4578 3914\\n1071 8853\\n5874 3157\\n5929 749\\n606 3072\\n833 9687\\n8720 5728\\n9357 4322\\n8579 6856\\n9842 4587\\n5447 1321\\n2186 1232\\n4561 3995\\n8924 66\\n2018 2916\\n3894 3933\\n1830 6556\\n351 7604\\n9608 9407\\n6751 3473\\n5606 3167\\n6751 9012\\n236 4344\\n9653 8680\\n7070 5163\\n1878 1440\\n7146 3501\\n3045 1233\\n465 3872\\n9308 7948\\n4084 6005\\n5133 2164\\n9256 1870\\n5204 7262\\n3805 7088\\n9040 437\\n9910 2126\\n995 5643\\n1775 4098\\n8290 1924\\n4098 2615\\n129 5652\\n8100 6498\\n698 1298\\n8004 4496\\n7381 4416\\n2576 6749\\n4073 49\\n3467 184\\n6420 16\\n2125 2625\\n5808 7922\\n9423 723\\n2745 9386\\n949 9510\\n9484 8686\\n4038 4145\\n9538 6947\\n7895 4886\\n5849 4219\\n9436 2621\\n8636 8047\\n7223 880\\n1193 7131\\n3809 9553\\n2598 8872\\n8716 341\\n8244 8313\\n8262 2204\\n5841 8320\\n744 5830\\n6370 5947\\n4533 8441\\n2394 8385\\n4103 394\\n9142 1975\\n2828 5906\\n6887 8900\\n4929 9701\\n9177 7287\\n8546 7036\\n2024 4002\\n7566 7507\\n8729 1064\\n18 7391\\n6586 4100\\n4532 1185\\n9474 9006\\n3849 995\\n3584 2524\\n793 409\\n2980 6405\\n2787 1360\\n4357 9844\\n7251 9724\\n2295 3692\\n8806 8626\\n963 587\\n4965 1334\\n3368 9572\\n2055 5468\\n8225 5898\\n7182 378\\n6041 134\\n17 4335\\n5206 2386\\n3886 8499\\n6933 3756\\n925 9337\\n8613 5751\\n8383 4587\\n680 5446\\n5953 6306\\n1824 5654\\n5932 6317\\n2860 5825\\n2459 8247\\n1516 1410\\n3809 8624\\n5814 6546\\n9483 9335\\n5499 7889\\n4247 6104\\n102 7039\\n3571 96\\n3460 8220\\n8170 12\\n980 8114\\n3647 1998\\n6266 4896\\n7595 8898\\n5680 6786\\n8816 6328\\n4781 3552\\n4576 114\\n8219 3753\\n3970 3954\\n3442 4710\\n4507 342\\n1949 5518\\n7690 2459\\n112 9419\\n7594 2144\\n7511 9225\\n2150 3033\\n3772 1055\\n1115 6358\\n2161 6594\\n639 1715\\n5085 5772\\n8711 124\\n1829 77\\n3111 1640\\n2932 234\\n2845 3944\\n5251 6612\\n193 1157\\n6365 1553\\n7895 4677\\n7678 6286\\n4506 7148\\n5094 8909\\n4316 5840\\n7078 2581\\n2266 1582\\n834 3697\\n8141 5358\\n4515 7675\\n3860 2539\\n2201 9977\\n6481 6451\\n8238 4397\\n8639 7932\\n1810 88\\n6696 7012\\n9920 6290\\n5813 7559\\n466 2889\\n7478 936\\n6650 3531\\n4944 286\\n5828 8118\\n9955 2914\\n475 9852\\n6856 8969\\n3034 1268\\n9185 6264\\n7924 2718\\n2780 8296\\n804 4887\\n3050 4000\\n3115 9264\\n4118 54\\n9288 7067\\n1906 6083\\n7485 9541\\n3445 1204\\n5104 9474\\n6715 1799\\n734 7978\\n317 5208\\n1135 1922\\n2326 6191\\n9581 1946\\n3691 9118\\n9396 941\\n6192 7200\\n5145 3757\\n2528 8962\\n4794 3918\\n4127 4252\\n1970 601\\n4037 3191\\n6786 2846\\n4009 9237\\n4852 2844\\n9284 1025\\n4298 8954\\n8551 2087\\n3069 5764\\n6359 6257\\n458 2977\\n4897 1064\\n7108 9329\\n6766 8504\\n957 2215\\n5654 6082\\n338 1239\\n8429 2936\\n9581 2697\\n2441 9048\\n8207 5835\\n5183 5998\\n7972 1942\\n7407 9348\\n3281 8246\\n8035 7024\\n5180 519\\n5635 6550\\n5334 2410\\n4488 3953\\n5720 6333\\n9222 4479\\n5639 4979\\n7212 2624\\n5140 4088\\n2025 1569\\n1479 5617\\n6247 803\\n6423 3385\\n797\\n1610 5654\\n1899 7444\\n8775 9928\\n2275 8406\\n432 5260\\n1341 6234\\n7702 7513\\n2429 2052\\n917 5106\\n9029 2080\\n2325 3637\\n9357 3663\\n985 8257\\n8122 6540\\n2061 6460\\n4532 3090\\n2734 1104\\n3282 7695\\n9385 1605\\n4684 7887\\n5851 3688\\n8813 2827\\n39 9542\\n8917 7564\\n436 2220\\n8687 2283\\n2236 7964\\n6640 5749\\n6837 1899\\n867 7822\\n6118 3008\\n8084 646\\n5426 5799\\n9384 3153\\n9335 5870\\n7392 1947\\n8032 9210\\n5718 2731\\n7460 752\\n5364 1230\\n6442 6332\\n3814 5536\\n1950 218\\n9758 9119\\n341 7351\\n1655 5196\\n3163 3\\n7694 7354\\n9375 2773\\n8117 7025\\n7265 6850\\n6378 3126\\n1701 7988\\n1800 9902\\n7778 3832\\n3488 8433\\n8471 3505\\n7666 2584\\n492 7781\\n9176 8375\\n6733 2847\\n1520 2226\\n1244 8006\\n8199 4357\\n283 8883\\n8439 1407\\n5109 536\\n7082 8778\\n3783 629\\n6254 2325\\n5188 7030\\n7159 2123\\n5392 5192\\n6186 3295\\n5693 568\\n1839 9558\\n9103 7952\\n2697 9536\\n7315 2247\\n4941 1517\\n9979 7133\\n2371 8066\\n5470 4939\\n7436 1968\\n6475 4378\\n9079 3278\\n1950 5883\\n1332 7906\\n8095 5722\\n7137 2278\\n6088 187\\n7984 6804\\n9706 6809\\n7036 5216\\n9673 1366\\n9747 6295\\n6943 5757\\n9338 1069\\n7812 208\\n2639 3392\\n1695 914\\n2280 3409\\n1410 5754\\n1383 5243\\n9159 5783\\n5602 9781\\n5604 3189\\n7438 1479\\n2471 7345\\n7508 9251\\n1950 7757\\n4721 1418\\n9935 2545\\n7898 4228\\n2945 6089\\n9041 9527\\n7624 5120\\n2351 7391\\n6400 5846\\n5280 3088\\n4283 2570\\n412 7186\\n8528 6837\\n9227 862\\n9266 5250\\n8592 8460\\n6456 4833\\n8710 1453\\n7680 4702\\n9645 5356\\n377 4198\\n3882 4346\\n2118 6132\\n6466 3341\\n4369 7956\\n466 2813\\n1356 6509\\n1595 9928\\n2951 6518\\n1436 328\\n2497 7976\\n6019 5596\\n925 1121\\n5448 1506\\n6796 9322\\n3756 4592\\n2421 7139\\n2180 2141\\n539 7744\\n6954 6717\\n2767 7809\\n6906 6960\\n131 8264\\n7495 1356\\n6683 9850\\n8655 8437\\n2376 8794\\n2155 7274\\n3566 1433\\n641 3027\\n1944 4071\\n1494 8670\\n8674 1041\\n5335 8835\\n9935 8777\\n2771 4809\\n8829 9999\\n485 4891\\n601 4582\\n981 815\\n7216 5746\\n6615 9694\\n3287 417\\n6334 1131\\n8738 7261\\n5464 7152\\n6387 1220\\n4917 273\\n8965 2185\\n3639 5865\\n3617 8276\\n299 8606\\n4991 9018\\n2451 7441\\n7183 5778\\n8659 6012\\n3080 1500\\n6607 8758\\n2080 7546\\n6151 4449\\n7939 7268\\n9554 7167\\n2640 5760\\n7397 5287\\n5289 3566\\n683 6893\\n4294 3944\\n2220 3090\\n4223 6443\\n2520 2144\\n2068 7467\\n2472 1370\\n7530 8471\\n2369 5490\\n7959 8933\\n5966 1312\\n4400 6309\\n7169 3991\\n1684 681\\n812 1389\\n2922 7355\\n7623 8300\\n6301 1520\\n2564 8351\\n4025 5455\\n5675 281\\n3662 6707\\n4328 3094\\n3704 3457\\n4816 2508\\n8459 6945\\n3161 4177\\n643 2789\\n9445 1519\\n2747 1910\\n6454 8654\\n4563 3279\\n4784 4629\\n3625 9539\\n5973 2212\\n9899 1741\\n2652 1122\\n7784 4903\\n7433 3449\\n5171 5515\\n7959 3210\\n94 5160\\n6691 4049\\n1083 1214\\n641 1487\\n37 8311\\n8726 481\\n8533 1210\\n899 8736\\n1626 1640\\n2240 9818\\n6756 2419\\n8808 5804\\n2893 3450\\n7209 3688\\n1612 5872\\n3902 93\\n8999 810\\n6097 8359\\n2490 2213\\n494 8336\\n750 1292\\n2095 521\\n9255 7603\\n2113 1139\\n4586 3574\\n7716 6638\\n9820 7691\\n4772 421\\n7903 5209\\n4373 5065\\n3256 3787\\n3023 6322\\n9157 6941\\n1908 6139\\n129 5712\\n1828 1959\\n8098 1108\\n3582 4571\\n2322 1556\\n5180 4493\\n2303 4651\\n2859 3651\\n2218 8417\\n1252 9280\\n266 7979\\n4300 1468\\n4771 7432\\n5384 1141\\n3720 2167\\n2076 2654\\n4615 5850\\n6119 9787\\n2894 2871\\n338 3783\\n4202 2541\\n8031 9469\\n4251 5937\\n7842 6567\\n5313 1556\\n1647 9572\\n6228 8136\\n5492 434\\n4392 8728\\n6849 7312\\n375 512\\n9350 399\\n3643 2017\\n8305 806\\n2007 5823\\n4747 8678\\n5054 1377\\n8100 997\\n8564 7167\\n5644 4075\\n9286 7992\\n8854 7532\\n1423 8166\\n8770 819\\n4755 686\\n8852 4541\\n352 7954\\n5844 1490\\n481 3349\\n1558 6931\\n9643 6995\\n6434 403\\n7425 5367\\n5557 3950\\n9964 8031\\n257 8983\\n1628 9661\\n4911 2038\\n433 1280\\n8127 2219\\n4790 6673\\n6186 1513\\n4549 2693\\n1016 8660\\n3443 1490\\n3668 3698\\n3069 6792\\n1259 1883\\n4692 794\\n4953 9103\\n677 6282\\n8412 5830\\n9624 1411\\n1099 2361\\n4021 3582\\n5895 6638\\n4816 7338\\n4189 2132\\n4349 9444\\n8401 7863\\n7849 6536\\n1621 1490\\n131 3365\\n5685 7456\\n8651 7340\\n5271 6915\\n8138 8249\\n7720 9829\\n5326 7800\\n9153 7772\\n6284 4024\\n4862 2201\\n6029 5050\\n5679 919\\n4454 4494\\n3223 3532\\n9985 8869\\n4481 1712\\n3818 5717\\n4101 3893\\n5804 5406\\n483 9179\\n2394 8209\\n4659 1049\\n972 5743\\n9219 5829\\n5055 2076\\n4188 1158\\n6903 5054\\n2409 5718\\n8820 2677\\n6104 1407\\n3358 8323\\n8700 2230\\n9438 9613\\n3686 9948\\n9400 5729\\n3407 5967\\n73 9933\\n2772 5224\\n712 9315\\n3764 8495\\n8216 9191\\n519 4881\\n4573 3867\\n3701 3764\\n3843 1401\\n857 9549\\n9742 4752\\n665 1357\\n1900 8128\\n7027 9867\\n1549 3717\\n4397 605\\n7646 3640\\n9325 864\\n4392 7127\\n8377 7652\\n6130 3977\\n6315 684\\n5459 4927\\n6250 8843\\n8983 2256\\n2351 3103\\n7236 1002\\n9081 5707\\n8629 6838\\n286 1828\\n5666 4289\\n8811 3021\\n9990 1554\\n6510 8846\\n5598 571\\n2116 9642\\n802 193\\n7895 647\\n2135 1220\\n171 4039\\n8791 5255\\n637 5974\\n9039 6047\\n4838 5470\\n5175 9274\\n8344 6981\\n3370 3560\\n3931 2660\\n7204 1235\\n237 9517\\n4991 2245\\n3504 6012\\n5481 5103\\n7479 1964\\n8989 7158\\n6698 3649\\n2047 8123\\n6778 3299\\n261 3615\\n7143 3795\\n8332 1887\\n9355 5431\\n7360 8156\\n9649 6593\\n4597 8842\\n8266 9375\\n8631 1017\\n5231 9989\\n3090 6187\\n8421 1902\\n1812 510\\n9441 8584\\n5788 7753\\n899 5531\\n2485 1218\\n2221 9358\\n2763 510\\n1850 1505\\n7205 9805\\n1650 3353\\n2451 4991\\n117 4811\\n9671 3344\\n8307 8087\\n936 3647\\n4143 3769\\n338 1136\\n5338 8402\\n6991 2660\\n5577 9746\\n7182 2186\\n8831 3081\\n4996 6711\\n469 4190\\n353 6561\\n5302 8784\\n9200 2234\\n6118 3262\\n112 5535\\n5228 1066\\n2732 373\\n2793 2002\\n5581 4818\\n9312 3988\\n2277 7793\\n6000 4855\\n9124 8891\\n7067 7746\\n5624 7275\\n4770 3668\\n3313 7864\\n6965 8552\\n6053 7903\\n8139 1730\\n405 7427\\n1649 8551\\n3456 3745\\n4602 9808\\n1532 5733\\n9172 8721\\n9732 2253\\n6726 4355\\n4853 7603\\n6743 5294\\n6960 9047\\n6993 7937\\n7579 5383\\n7609 5493\\n8496 3491\\n8808 1256\\n1786 4079\\n5479 244\\n1115 1677\\n9694 1016\\n7161 120\\n549 1700\\n437 4746\\n7171 8441\\n2136 1130\\n8163 6239\\n1516 939\\n4270 515\\n8133 7642\\n6822 5386\\n710 5679\\n196 7827\\n7338 329\\n9780 4304\\n6247 3963\\n2094 4541\\n5624 2961\\n7103 1087\\n3223 6063\\n3251 618\\n4996 5626\\n5382 105\\n6728 6720\\n9491 7439\\n1754 4739\\n6149 2718\\n8719 2323\\n8749 4560\\n3781 349\\n520 8159\\n911 9706\\n840 4952\\n756 5960\\n5031 9764\\n20 6563\\n5957 2754\\n1257 1261\\n2409 414\\n1347 6826\\n46 9550\\n748 122\\n3596 1482\\n4524 4979\\n6643 1420\\n7516 3443\\n7164 9087\\n1675 7650\\n4771 9776\\n3964 3291\\n3129 8929\\n8694 2465\\n9010 8140\\n9132 3969\\n9096 4174\\n2759 7612\\n1178 8315\\n6276 8017\\n4673 6395\\n804 1647\\n1274 8952\\n5552 4774\\n9691 9879\\n9176 4375\\n5704 655\\n4580 9599\\n3554 3395\\n5496 7133\\n2134 9640\\n8731 113\\n1987 3872\\n9323 1173\\n1628 6524\\n3519 7019\\n7803 3182\\n474 5813\\n7360 5699\\n1278 6767\\n4150 6268\\n1275 5790\\n3431 6691\\n4192 3876\\n5337 1508\\n3726 8629\\n8476 7970\\n6136 1207\\n3971 4968\\n8130 624\\n7115 8934\\n9306 2454\\n507 9566\\n1652 8038\\n2853 1087\\n7318 3158\\n902 2152\\n8318 8335\\n7679 6815\\n5451 1229\\n6791 8765\\n8806 43\\n3303 3058\\n4687 4654\\n4281 3737\\n2407 4604\\n4760 7854\\n6091 7040\\n704 6266\\n3557 4646\\n5445 1767\\n2151 4238\\n4564 2690\\n8446 5723\\n8192 3462\\n3732 1387\\n5425 6267\\n4247 6278\\n7116 8230\\n3339 4396\\n1090 8864\\n9720 7247\\n8484 3204\\n590 2902\\n2924 3026\\n5737 1879\\n9090 2973\\n6883 3184\\n5473 4381\\n951 3048\\n9514 2628\\n481 3288\\n3274 7584\\n3530 9860\\n7609 2193\\n7345 1518\\n1433 5201\\n4504 8174\\n1692 504\\n900 7840\\n6487 2008\\n4937 3804\\n2929 8155\\n6179 6524\\n2165 6234\\n8285 2744\\n1112 9906\\n151 5258\\n2953 1134\\n4287 5675\\n5189 3530\\n2744 4876\\n7533 4928\\n3694 5347\\n3458 7811\\n5341 4327\\n4962 8911\\n1137 164\\n5681 7752\\n439 1849\\n4548 1387\\n9373 382\\n3182 3045\\n87 5691\\n3316 8338\\n8566 7649\\n2427 3964\\n3259 1862\\n8732 1027\\n9456 5987\\n3204 5855\\n3483 1481\\n5927 455\\n842 839\\n4547 8527\\n6838 1599\\n7138 226\\n5161 8775\\n8845 1457\\n6393 6276\\n1048 6668\\n3451 9130\\n8771 7753\\n7417 1936\\n6525 840\\n4323 7257\\n3380 9739\\n6877 5688\\n5835 7461\\n4038 3370\\n3593 5437\\n3929 2030\\n7006 2053\\n3632 9048\\n1984 3211\\n5413 8016\\n7534 374\\n878 9241\\n2674 4578\\n1690 758\\n4776 8750\\n9970 4983\\n771 2311\\n2782 9852\\n7038 1223\\n6166 8595\\n5323 9626\\n7203 1704\\n9194 3607\\n7179 8135\\n3467 5807\\n4193 182\\n9204 5171\\n7410 6488\\n8277 6771\\n4734 7021\\n1649 3378\\n16 5748\\n3014 8605\\n4453 8734\\n6698 6477\\n1972 1821\\n8137 3584\\n7461 1878\\n5627 6190\\n3149 9710\\n5833 2644\\n4737 2052\\n4435 9478\\n3703 1640\\n7951 8183\\n9283 4228\\n56 845\\n7585 2270\\n9037 2438\\n8515 4295\\n5034 2893\\n4924 5849\\n7303 6712\\n476 5054\\n2035 367\\n6581 7481\\n3735 6478\\n7620 9792\\n2448 9020\\n6474 2386\\n1827 8529\\n2685 5405\\n8577 2316\\n845 536\\n9098 2050\\n7979 4735\\n490 9183\\n4960 8529\\n260 328\\n4584 3760\\n9132 2524\\n3753 4526\\n7655 5017\\n6201 8920\\n3672 6344\\n6595 4175\\n9345 8959\\n5724 5437\\n4711 7054\\n9648 3028\\n5619 4667\\n487 4138\\n9075 6562\\n9449 1696\\n8430 6512\\n8918 5267\\n5973 6489\\n6090 672\\n9129 3774\\n8864 7020\\n5467 3844\\n4676 7227\\n863\\n1990 9291\\n8248 248\\n3574 1135\\n9727 6434\\n9651 5681\\n1517 5974\\n6864 4940\\n9395 801\\n5983 9441\\n9108 6749\\n203 3127\\n642 9566\\n6293 4460\\n8704 2722\\n4654 9432\\n9898 6572\\n7078 766\\n2690 485\\n1663 4660\\n2666 6226\\n9129 9389\\n8494 3435\\n3678 7723\\n2997 3924\\n872 7929\\n5179 5496\\n1850 414\\n5428 7619\\n9077 2371\\n8214 588\\n8939 4283\\n1709 133\\n6117 8486\\n6697 6927\\n1660 8135\\n3943 9863\\n8759 8852\\n1712 2221\\n1809 5307\\n7104 7375\\n4698 3359\\n6668 4736\\n4556 1944\\n7735 4810\\n8651 8678\\n8999 1368\\n1723 5914\\n605 9514\\n7599 1661\\n7031 603\\n3009 5250\\n7957 4392\\n4315 4991\\n4872 9319\\n4196 2241\\n3214 3947\\n1535 4755\\n7018 6229\\n8487 6400\\n8483 2705\\n8937 4957\\n3346 7\\n8605 8663\\n8564 534\\n5596 1590\\n6633 214\\n6266 8537\\n4878 4375\\n125 1690\\n9904 7983\\n8421 3183\\n4865 5044\\n2648 9611\\n7872 8320\\n1250 7737\\n9147 9242\\n3298 8853\\n6629 4395\\n9966 6554\\n8249 5932\\n8697 3761\\n7422 4047\\n5852 6724\\n7640 1659\\n1860 2052\\n7671 448\\n702 5155\\n9592 3245\\n8436 6128\\n5447 8023\\n7336 2118\\n8831 8659\\n3451 4361\\n4178 1730\\n8515 4004\\n3083 5349\\n986 3474\\n2218 3510\\n1987 1358\\n8700 2306\\n6626 4285\\n4863 2976\\n6800 4425\\n9901 8666\\n7555 3387\\n5918 513\\n1957 940\\n9237 8130\\n1884 1837\\n2982 8428\\n459 8784\\n5532 9227\\n2023 3122\\n4047 4685\\n8074 3366\\n908 4830\\n8419 5909\\n2381 4057\\n1058 7320\\n6658 1983\\n6621 6726\\n1051 1577\\n8704 8513\\n7831 100\\n2892 9590\\n8641 8396\\n8319 6648\\n6709 3036\\n9404 8745\\n3181 2459\\n9570 6478\\n7681 1278\\n5245 8197\\n4124 4447\\n3977 7262\\n6810 1478\\n8615 4962\\n1221 6582\\n5745 1980\\n8631 8942\\n473 180\\n6554 2263\\n9821 3299\\n3482 281\\n591 4048\\n3049 7127\\n5271 1700\\n3512 2348\\n1139 1863\\n8613 8041\\n9278 4026\\n7627 4556\\n8517 3489\\n8468 9381\\n7469 1504\\n5551 4316\\n6590 8552\\n967 3056\\n4477 4660\\n1858 3141\\n9608 6881\\n464 1842\\n8423 6883\\n7678 7167\\n6529 7563\\n4706 1060\\n4198 9133\\n3285 8234\\n1569 4520\\n3458 2141\\n2733 3506\\n4520 6441\\n1198 4739\\n4597 4817\\n3768 7961\\n1311 7666\\n5732 1880\\n4756 6157\\n2978 7011\\n2026 2276\\n3377 6418\\n4006 7276\\n2807 4136\\n5473 4998\\n5799 5284\\n5014 2218\\n585 8813\\n9348 5366\\n6267 7652\\n9647 6583\\n9778 3067\\n6805 9927\\n1821 1643\\n1087 9376\\n8335 8797\\n2464 3240\\n709 6994\\n8806 5867\\n261 2724\\n3843 4902\\n4520 9933\\n4262 1342\\n7614 4502\\n8115 9672\\n8576 8675\\n3129 3215\\n3688 309\\n8796 2925\\n8780 4887\\n7364 4267\\n3262 434\\n1243 9999\\n9216 8857\\n4357 9861\\n402 146\\n9345 627\\n7647 6838\\n8955 183\\n3800 1732\\n3621 8589\\n1748 2008\\n7161 3191\\n6998 6713\\n174 9238\\n4160 7824\\n5416 9003\\n7124 7764\\n8439 9516\\n164 3083\\n1947 5650\\n5434 5506\\n1866 6392\\n12 3006\\n6407 5100\\n3592 5895\\n2609 2094\\n9962 9313\\n2337 9427\\n195 1040\\n6422 322\\n5522 3818\\n8193 3291\\n6173 7161\\n4249 8787\\n2403 4565\\n1800 322\\n5143 9684\\n1425 613\\n4017 4609\\n2779 8674\\n4686 4589\\n865 7252\\n2898 8598\\n2797 4584\\n7934 6952\\n4461 3842\\n6253 2286\\n1276 6044\\n8367 3395\\n1290 2393\\n3652 390\\n9333 8762\\n8148 7838\\n9155 945\\n5377 619\\n6465 8712\\n3406 2598\\n4924 9792\\n7234 5403\\n1305 7915\\n2475 9606\\n6370 7756\\n4503 3222\\n2234 9949\\n2094 3179\\n3775 1743\\n5540 3015\\n596 8261\\n7880 6884\\n2237 1723\\n3571 9506\\n1050 880\\n4612 7849\\n839 6224\\n2240 3519\\n3088 7845\\n3657 4813\\n6269 2879\\n7308 7990\\n8967 8113\\n4577 501\\n6586 5818\\n9187 7938\\n1682 8175\\n6289 2056\\n4217 3152\\n6145 5255\\n3296 9725\\n4142 6858\\n6050 5623\\n8591 2959\\n6268 4363\\n6017 1881\\n8994 1383\\n3875 8075\\n8511 8409\\n7926 2406\\n3309 1551\\n3373 6936\\n9702 4899\\n3048 4753\\n5965 9973\\n2288 146\\n7506 6333\\n6837 5771\\n6044 9512\\n8585 997\\n4358 718\\n2330 8781\\n8681 8920\\n4348 7423\\n7981 1478\\n6950 2545\\n6121 1244\\n7926 1724\\n9756 7570\\n1824 647\\n2938 6068\\n7778 1261\\n9193 1806\\n9788 210\\n739 159\\n6265 4417\\n88 962\\n2125 4646\\n1302 797\\n6340 1312\\n4297 9900\\n1207 3692\\n1513 2396\\n8340 4734\\n9457 7263\\n4726 1683\\n5631 8396\\n5003 9815\\n316 4948\\n6862 3514\\n8305 7573\\n7075 3812\\n5547 4847\\n5750 9006\\n3390 8927\\n779 7537\\n1228 428\\n4218 7462\\n9090 3025\\n337 5891\\n3264 6126\\n654 9165\\n7369 861\\n102 260\\n7833 2706\\n8537 3357\\n8248 6610\\n2049 19\\n8622 3980\\n3134 6002\\n5217 4394\\n9300 5564\\n8707 4450\\n999 2236\\n960 768\\n5481 5256\\n4828 6821\\n6873 6400\\n1860 1834\\n2226 4893\\n9520 6418\\n7061 4040\\n4680 4883\\n5716 3786\\n1780 2356\\n7273 6312\\n8003 565\\n3010 5072\\n9746 1917\\n903 8593\\n816 9734\\n1116 7969\\n8841 8810\\n5410 7102\\n4649 7816\\n7827 8500\\n9860 6702\\n7866 750\\n9057 2590\\n2908 3212\\n9759 1230\\n7756 3830\\n9548 6989\\n120 9141\\n1275 2523\\n274 6653\\n4909 8033\\n6679 7553\\n5273 7868\\n3693 3536\\n9291 3533\\n8344 986\\n2520 7465\\n8625 2093\\n2114 1790\\n1659 1296\\n9477 2304\\n4064 6205\\n3290 2277\\n7889 1445\\n671 7600\\n4169 1203\\n2332 2948\\n1396 1853\\n1468 6396\\n8072 1989\\n3332 30\\n112 1720\\n4740 7373\\n3832 7546\\n8889 5713\\n4438 8664\\n1161 6062\\n9066 9165\\n7345 6655\\n1038 8386\\n4330 9352\\n372 3068\\n4079 6587\\n3640 3449\\n7942 3659\\n6717 9569\\n9616 1263\\n459 391\\n6304 2256\\n4812 5764\\n1283 8643\\n3073 2133\\n3986 6166\\n6371 2592\\n9835 2393\\n7409 7298\\n3270 5002\\n9664 6487\\n4942 5698\\n1274 3451\\n1278 3904\\n7524 7892\\n3635 6225\\n607 2130\\n2113 9991\\n8566 1166\\n7891 3448\\n8513 2694\\n1818 9625\\n3239 1859\\n6372 5319\\n1167 9040\\n4618 1208\\n7314 9579\\n3771 2423\\n6407 390\\n2725 3537\\n5412 9123\\n7864 733\\n3512 1981\\n1614 8231\\n7888 9708\\n8945 7507\\n8958 7730\\n5783 1794\\n3956 8929\\n3365 4359\\n8613 4950\\n5041 4421\\n1225 8845\\n5116 4835\\n657 4027\\n279 8259\\n3086 7088\\n2875 6330\\n9253 215\\n908 9306\\n7928 8409\\n224 9494\\n417 4866\\n5608 9084\\n4584 5830\\n4139 3143\\n9944 3515\\n5858 2398\\n6277 5214\\n8696 4475\\n5016 8113\\n3046 6411\\n4696 5012\\n5213 3328\\n2418 7075\\n5315 1280\\n7190 2240\\n3295 9131\\n9594 3109\\n6974 7270\\n548 3581\\n6769 4928\\n7152 9536\\n433 5236\\n90 863\\n1649 95\\n2428 3097\\n4001 9420\\n3872 2559\\n8773 1969\\n4514 7036\\n124 9380\\n4558 1231\\n4972 173\\n6048 1704\\n3679 7683\\n7988 6835\\n3760 2337\\n3378 755\\n8943 5873\\n7584 4005\\n4701 5525\\n6780 4671\\n6525 7137\\n3259 7765\\n6339 2852\\n6993 4911\\n9389 4377\\n394 6099\\n6076 2617\\n108 6604\\n7428 6236\\n1588 2178\\n966 5690\\n7180 3196\\n3318 2273\\n5929 3937\\n9325 4849\\n4460 1364\\n568 2128\\n5408 4987\\n4192 433\\n1496 299\\n7802 5856\\n3444 5198\\n354 6544\\n4672 6910\\n4091 431\\n4316 500\\n8416 5011\\n3568 3542\\n3715 5812\\n1271 5140\\n401 400\\n5335 2056\\n1616 2079\\n6672 4425\\n7759 5996\\n6644 3744\\n332 8101\\n1331 3772\\n1611 4777\\n7628 7414\\n1835 7487\\n2109 6084\\n125 4212\\n6374 6414\\n1038 403\\n9312 9656\\n4488 4686\\n2147 1043\\n5354 3147\\n1736 8466\\n9904 2456\\n7144 12\\n2694 7875\\n4328 9514\\n1398 5068\\n4389 6691\\n4420 5715\\n5231 1754\\n1727 9341\\n6347 980\\n7527 4987\\n2191 8598\\n5289 9075\\n6432 7675\\n3009 357\\n8651 3062\\n6219 6518\\n2801 471\\n1296 5548\\n6632 7250\\n6881 1386\\n7772 9601\\n26 1689\\n7750 6905\\n4013 2340\\n9231 1906\\n4257 3739\\n903 450\\n2074 2958\\n6124 6783\\n7380 1181\\n5867 3523\\n7499 34\\n42 634\\n8993 4069\\n395 4206\\n4409 5357\\n9432 4577\\n4259 9791\\n397 9076\\n1871 2808\\n4353 6996\\n3410 1329\\n4796 3600\\n9234 6767\\n8300 8077\\n8400 2747\\n5342 6748\\n6613 430\\n2035 1134\\n9476 3266\\n5038 4263\\n1573 1315\\n3861 6680\\n2110 3408\\n1244 6612\\n5002 1122\\n9157 6956\\n4370 7871\\n1063 5068\\n4298 5579\\n7218 3985\\n239 3049\\n8402 3261\\n7594 3256\\n5834 2700\\n481 7996\\n8657 5212\\n7596 8133\\n2110 7329\\n6576 7056\\n3155 4476\\n417 1115\\n7905 542\\n6056 1633\\n6340 5619\\n7312 8306\\n6460 7440\\n4309 236\\n4119 3408\\n7406 3614\\n4249 1788\\n8540 7152\\n3542 7913\\n6241 189\\n8200 1509\\n2446 3594\\n7409 8581\\n6863 822\\n4398 9277\\n9478 2265\\n1036 1275\\n4753 1507\\n5117 3905\\n7811 4921\\n5405 5723\\n5626 1644\\n986 4294\\n9954 1620\\n7306 9504\\n4187 2915\\n2692 7060\\n955 7481\\n8110 3328\\n7057 1325\\n6002 7976\\n2374 4361\\n5993 3196\\n9466 8299\\n2316 4357\\n7535 8147\\n7125 7218\\n5808 6065\\n1196 8893\\n3334 3121\\n2255 2543\\n2418 9815\\n9440 1352\\n2654 8964\\n335 25\\n7077 5550\\n5198 9172\\n5166 1893\\n7653 6169\\n8325 4935\\n6383 4953\\n6658 5556\\n6940 3792\\n2456 9499\\n4422 7586\\n9495 4727\\n7474 2942\\n4841 3327\\n5304 9441\\n2869 687\\n2633 1326\\n3953 2259\\n4596 4758\\n49 7166\\n1814 8344\\n9013 9917\\n6398 4050\\n8774 7048\\n3826 4723\\n3423 169\\n1250 5065\\n6473 171\\n4900 8776\\n2745 9747\\n7234 7580\\n8716 7802\\n4222 9037\\n8689 7867\\n755 3099\\n9043 2368\\n2138 9899\\n4583 5322\\n2249 3640\\n5355 8927\\n7640 3482\\n1333 8500\\n3651 8376\\n1454 4152\\n9240 3549\\n4307 774\\n3165 4668\\n8302 7038\\n5328 9677\\n1881 8416\\n5918 1924\\n9348 4470\\n3387 7583\\n6573 9803\\n4592 9316\\n2637 1214\\n6990 886\\n6473 8617\\n3549 5630\\n9333 613\\n3666 2274\\n6257 5543\\n9272 149\\n8869 7040\\n1940 5636\\n1533 3450\\n1869 8428\\n7106 6487\\n1143 2229\\n238 1240\\n2944 1655\\n8341 491\\n2611 7211\\n9475 5446\\n6776 869\\n810 8278\\n7132 219\\n1915 8224\\n6073 487\\n8596 7023\\n749 4144\\n5937 4109\\n1776 952\\n1516 9953\\n1400 3561\\n5975 8051\\n6980 3904\\n9528 8259\\n8588 3963\\n2559 3772\\n7316 7101\\n5967 3739\\n6758 6111\\n2981 4234\\n8265 57\\n6291 5723\\n2081 6339\\n2169 6351\\n7166 9105\\n6238 7132\\n6612 5190\\n512 273\\n4084 5435\\n1764 7230\\n8437 9400\\n2914 2844\\n7474 3651\\n1936 2747\\n8795 223\\n7198 3621\\n7504 6829\\n8796 8099\\n3526 995\\n1579 8639\\n226 996\\n1632 6058\\n9209 6739\\n8942 5772\\n8714 5264\\n9585 570\\n7109 2251\\n253 5034\\n9497 2038\\n1639 6110\\n2704 5621\\n6528 8624\\n1997 6965\\n2301 6441\\n5104 5086\\n606 7922\\n3840 561\\n4580 2209\\n6268 2020\\n7283 882\\n7707 9773\\n7071 6382\\n7769 671\\n6648 884\\n4491 5667\\n767 7938\\n1439 3750\\n5765 2242\\n2563 4229\\n9498 9498\\n8991 403\\n5348 2674\\n4421 3923\\n8996 567\\n5226 5716\\n267 8784\\n5725 3062\\n232 2251\\n2130 5405\\n8471 1095\\n4028 2907\\n171 9650\\n4226 5812\\n6025 4650\\n1255 4650\\n7865 3142\\n4431 2306\\n231\\n1885 7194\\n9077 356\\n926 6352\\n4855 8901\\n2454 2569\\n9618 8185\\n1135 2609\\n648 279\\n4114 3180\\n4600 9085\\n4197 4252\\n7237 8391\\n7818 9633\\n214 661\\n2923 6227\\n3007 7833\\n7297 6806\\n312 3480\\n8779 1848\\n2917 5496\\n546 8839\\n2475 4614\\n5293 7426\\n9116 6148\\n7115 5634\\n4611 437\\n9673 6747\\n6558 7615\\n7632 3537\\n4317 715\\n5864 3351\\n9794 3212\\n6593 3384\\n9792 1318\\n4177 8232\\n9613 8474\\n5880 511\\n2739 9391\\n8725 275\\n6681 1884\\n7439 8153\\n5179 6322\\n1064 2425\\n9604 7267\\n8582 7931\\n8546 2069\\n4117 1873\\n3672 8188\\n7076 9853\\n8877 2472\\n7466 4496\\n9054 8666\\n3148 9223\\n6397 2217\\n8905 4310\\n5837 7768\\n865 6181\\n2630 6861\\n2168 5645\\n7000 3247\\n8662 2885\\n7267 7417\\n6067 9982\\n4987 6951\\n4288 1442\\n7111 2048\\n8628 2151\\n5059 8514\\n7253 2211\\n2204 681\\n8979 1449\\n8191 5935\\n9837 8872\\n7917 2790\\n9125 6019\\n7027 8230\\n8650 59\\n4123 8621\\n2418 6583\\n3490 3654\\n3609 5289\\n1421 3266\\n701 2187\\n3807 2386\\n6243 3830\\n2165 8315\\n6577 3499\\n7998 5890\\n3739 9400\\n8390 5465\\n6096 2044\\n7472 7639\\n2367 1106\\n6553 167\\n7829 2135\\n8370 701\\n8618 6562\\n3755 4021\\n9285 5942\\n8156 4605\\n7793 2416\\n8108 2184\\n1034 7072\\n1487 7372\\n8836 7235\\n7693 7170\\n2527 6579\\n7475 7426\\n4857 4934\\n9196 4100\\n3981 3085\\n4210 5119\\n1509 2614\\n1054 4398\\n9432 498\\n7371 2572\\n6134 6901\\n8433 6098\\n9236 3378\\n2685 7085\\n3237 3090\\n6832 9476\\n865 8765\\n8556 4217\\n2919 4616\\n2154 8856\\n338 7505\\n9355 332\\n155 1754\\n2889 6211\\n6619 3578\\n5078 7577\\n2476 2928\\n7637 3975\\n4087 3466\\n3289 6249\\n366 4853\\n3305 4584\\n2979 1902\\n6639 6372\\n4632 3183\\n7859 514\\n1881 5169\\n4026 1179\\n8695 5596\\n1548 1494\\n6808 7422\\n1276 5304\\n2836 2087\\n8323 4098\\n2741 5877\\n7537 6969\\n8425 7619\\n288 5342\\n968 2825\\n8969 8693\\n2418 6161\\n164 9672\\n6718 8303\\n6215 5901\\n9454 6615\\n2096 4046\\n2598 6856\\n3071 9581\\n4312 3812\\n5856 4075\\n3046 8049\\n770 9183\\n8339 4230\\n8822 3286\\n8862 7218\\n661 7949\\n4418 6393\\n9040 320\\n9097 7502\\n9044 273\\n776 5824\\n7063 4052\\n4065 7838\\n7605 7195\\n4755 8730\\n6112 4390\\n7342 7816\\n1926 3314\\n2457 35\\n7912 2291\\n1540 6865\\n7806 5007\\n354 569\\n4036 95\\n178 9894\\n6626 3788\\n7227 9659\\n1040 4571\\n9744 268\\n8230 5128\\n3624 7268\\n9306 7563\\n8536 8635\\n4034 9697\\n1205 5249\\n5282 2065\\n5613 7044\\n8090 6462\\n3682 8602\\n8535 9798\\n7192 4366\\n1347 7640\\n266 1471\\n8178 8510\\n218 3253\\n5606 2406\\n4973 3971\\n8582 4355\\n8494 899\\n8600 8661\\n5301 1019\\n5736 6198\\n8519 7773\\n7624 5080\\n1729 9398\\n7915 1639\\n7183 7742\\n2902 9460\\n8101 4614\\n2027 5774\\n2574 2246\\n6166 5047\\n5090 3389\\n3742 6462\\n7105 524\\n792\\n2230 606\\n8541 3730\\n956 8728\\n2941 7404\\n1200 8853\\n6380 4827\\n4769 2201\\n7514 8994\\n3845 8860\\n5033 1151\\n4084 3405\\n2057 7590\\n9649 173\\n7497 2696\\n3058 9792\\n56 3573\\n2690 5608\\n2783 837\\n1947 7020\\n6730 4628\\n2848 2843\\n8854 2816\\n2968 6259\\n1600 708\\n5990 6305\\n1093 6481\\n4935 6630\\n8417 2800\\n2473 7930\\n8989 8402\\n586 9567\\n4482 3292\\n5061 5446\\n9754 9298\\n1369 5772\\n9060 9229\\n5927 9752\\n19 5637\\n5359 1932\\n9353 8393\\n3229 2637\\n4871 1218\\n1665 4621\\n4911 1772\\n826 5469\\n2582 2138\\n8510 441\\n6994 6387\\n8761 6984\\n5018 5273\\n2810 5041\\n9902 886\\n8397 8300\\n4343 927\\n7465 3365\\n1097 9931\\n1856 548\\n8932 5863\\n9022 5154\\n2692 3513\\n79 9142\\n9786 5380\\n7322 8693\\n7107 4570\\n1077 3221\\n9133 1240\\n8305 5221\\n3759 6754\\n1789 4262\\n6798 5266\\n6900 2585\\n9893 1206\\n6630 236\\n7512 2298\\n9538 4739\\n7107 7731\\n7939 9631\\n8556 4651\\n2920 3185\\n1165 1620\\n9384 1034\\n6209 9921\\n2620 6344\\n9548 4940\\n6860 2034\\n1464 2852\\n4215 7039\\n3597 9395\\n5708 9094\\n2440 1762\\n1241 3580\\n6355 8888\\n6254 1094\\n7867 357\\n392 4252\\n7212 3375\\n9887 2968\\n3438 2614\\n1388 1961\\n5008 2538\\n3114 3269\\n1410 9023\\n7976 4465\\n6454 9060\\n8715 9488\\n7378 726\\n3622 8224\\n6667 6269\\n7370 7430\\n8576 6838\\n909 9243\\n8327 8603\\n7419 4104\\n3507 8562\\n1444 2879\\n5727 8573\\n6789 4855\\n4008 312\\n5739 8975\\n2784 4074\\n5146 5908\\n2035 6317\\n1190 9583\\n834 5405\\n6902 5676\\n6359 7859\\n2528 9780\\n1354 2414\\n9800 4441\\n175 7997\\n7769 2185\\n8436 5054\\n554 8589\\n9586 7353\\n9326 4314\\n7644 6040\\n2296 4554\\n8709 7238\\n440 8869\\n6715 8057\\n2171 2572\\n5146 9203\\n5306 7280\\n3690 2173\\n9515 8155\\n3575 8807\\n1424 6653\\n3803 9996\\n6831 5179\\n6177 5252\\n2245 6094\\n1582 791\\n4041 1926\\n5042 142\\n5792 9389\\n6495 4612\\n4697 8637\\n5903 2118\\n1871 2246\\n6711 6566\\n6264 3903\\n4421 7471\\n2412 6733\\n8072 7994\\n6211 293\\n297 4221\\n3434 6154\\n8887 8485\\n8981 1407\\n9779 412\\n2936 4719\\n9926 5864\\n5461 2421\\n4524 6708\\n6382 3425\\n2464 8173\\n296 6829\\n2910 8710\\n595 4187\\n9592 5935\\n6536 9969\\n1436 522\\n7983 8730\\n2714 4929\\n6716 5752\\n1127 4167\\n778 4245\\n1344 510\\n2841 4678\\n3116 8207\\n7157 2171\\n6597 3154\\n3866 9610\\n4790 8132\\n1822 7854\\n5210 3496\\n8594 9008\\n2245 1491\\n9294 3719\\n4523 6752\\n822 3022\\n7113 1316\\n2239 3527\\n8391 9655\\n8905 4244\\n2496 3267\\n2389 5151\\n2778 329\\n2852 4678\\n7920 8752\\n5069 7734\\n6048 9882\\n4156 7352\\n7942 538\\n2257 6474\\n9334 5577\\n7726 9852\\n4775 3555\\n9828 3417\\n6982 8679\\n1542 1837\\n9409 8448\\n9302 9186\\n1786 5813\\n6172 2318\\n8934 2950\\n8602 9141\\n4800 2138\\n9104 7988\\n294 7974\\n8408 864\\n2632 5835\\n3284 7455\\n398 844\\n5663 273\\n6773 1555\\n1958 5806\\n6693 2036\\n2524 6166\\n8654 8963\\n3087 3459\\n6895 5318\\n8998 9920\\n482 9427\\n7041 8460\\n3536 8756\\n6723 5003\\n1591 108\\n312 1824\\n3630 1247\\n766 2029\\n334 8353\\n8074 6577\\n3688 3848\\n1901 7238\\n1279 9500\\n5641 463\\n4600 4917\\n2261 2505\\n4176 3425\\n4419 9880\\n7707 727\\n1058 6446\\n7285 8114\\n1307 3894\\n6404 4826\\n9385 8255\\n5395 5889\\n5465 6926\\n8188 152\\n4233 7846\\n9374 8268\\n8935 3442\\n7068 3748\\n7893 1596\\n5755 4553\\n6030 9927\\n4441 899\\n6057 2030\\n8755 3280\\n8106 1216\\n646 4763\\n514 7262\\n953 9876\\n557 4436\\n2249 5376\\n3144 5864\\n8301 9510\\n464 8590\\n3537 2529\\n1885 6069\\n159 7127\\n2886 3325\\n2062 9639\\n6911 8733\\n7638 2280\\n1485 2818\\n413 6017\\n9342 8385\\n6928 3982\\n4111 1861\\n7223 8260\\n1210 165\\n1953 9160\\n3536 813\\n6797 3187\\n4278 6231\\n2810 176\\n2651 2762\\n2280 1682\\n8099 9873\\n3194 5773\\n9977 7816\\n2677 3375\\n6461 8664\\n7341 9796\\n6310 8532\\n9317 9011\\n2934 8392\\n3837 5680\\n911 7292\\n5239 1909\\n9856 8902\\n7333 5221\\n1903 6784\\n4921 4272\\n2396 3527\\n8369 5775\\n2759 1504\\n3814 4531\\n8067 9859\\n6766 2494\\n6106 4621\\n5471 4224\\n5252 5309\\n5496 5992\\n5536 4174\\n3270 5421\\n568 6057\\n2427 9394\\n8672 1003\\n6569 9279\\n218 5297\\n4087 7444\\n4820 5632\\n5079 6248\\n4500 5059\\n3588 3242\\n1810 2982\\n1166 5898\\n7044 2076\\n2208 5746\\n4814 5280\\n8876 9745\\n5341 4212\\n827 81\\n8419 3228\\n837 8635\\n3549 5709\\n9652 5042\\n1104 6363\\n6910 8300\\n2509 5391\\n6099 1148\\n418 9290\\n7960 3578\\n7657 4991\\n7951 2927\\n4118 7132\\n6260 1120\\n6297 8071\\n833 5422\\n1930 6539\\n2576 4376\\n6342 7811\\n4793 1768\\n618 6721\\n2000 9314\\n3544 7610\\n434 7446\\n4244 5122\\n3347 2702\\n4002 5284\\n7479 9161\\n2334 517\\n9371 4847\\n8043 3605\\n3883 6395\\n8049 9209\\n3968 8618\\n8054 4291\\n8523 4854\\n141 5808\\n11 4033\\n1758 9423\\n4717 5981\\n9878 1116\\n1959 4426\\n5630 592\\n6629 3999\\n2674 5289\\n7072 9620\\n3555 1693\\n3995 3715\\n2561 1034\\n5408 7422\\n676 9114\\n1958 8106\\n5417 7658\\n9848 1421\\n5350 7700\\n9139 4404\\n1244 3922\\n6052 3917\\n7556 1113\\n11 9402\\n7915 1746\\n138 8590\\n5976 5147\\n1541 1560\\n4661 1060\\n5934 5408\\n2826 1077\\n2504 3954\\n1347 7836\\n9101 1836\\n7387 2771\\n430 9270\\n7116 1407\\n7340 5469\\n4975 1326\\n5539 3094\\n1942 4970\\n2276 3210\\n4815 8648\\n1258 961\\n7374 8436\\n9795 5780\\n5695 4682\\n6972 5786\\n8826 3285\\n9516 3493\\n5365 1519\\n8978 8143\\n7941 3402\\n243 9341\\n4875 2690\\n278 4427\\n3956 9688\\n1979 5794\\n1050 1902\\n5731 7460\\n3556 4341\\n5952 70\\n4780 638\\n9227 8404\\n3784 6109\\n30 1683\\n2553 1973\\n7406 480\\n9522 7657\\n8763 6736\\n6534 958\\n6104 155\\n2754 481\\n5548 4650\\n5741 7708\\n5401 7223\\n1512 3927\\n6388 7938\\n9628 3479\\n6757 6750\\n2630 3018\\n3166 8751\\n3226 5767\\n2504 8906\\n5362 7742\\n3259 4045\\n2703 6534\\n9081 7759\\n4067 8569\\n7636 8794\\n7872 5231\\n8856 1783\\n7020 140\\n5191 3778\\n991 7651\\n4040 8290\\n2107 5398\\n3675 1590\\n661 3068\\n3794 8374\\n5998 1702\\n4145 2883\\n6317 6501\\n2360 5224\\n129 2202\\n152 100\\n1682 2279\\n900 9865\\n9315 3429\\n2617 9479\\n6780 9286\\n5750 2870\\n9687 6921\\n6175 9596\\n6723 6596\\n9083 8466\\n957 9954\\n4298 5314\\n2648 199\\n6837 9825\\n1077 9009\\n5232 4964\\n104 1926\\n2242 1009\\n7911 6917\\n5821 7099\\n7164 9433\\n1424 7939\\n6571 408\\n1670 9830\\n2338 7164\\n9994 2869\\n7383 1613\\n4962 9550\\n495 5896\\n4420 9764\\n7729 5936\\n1267 1937\\n721 4657\\n3455 3301\\n6286 8916\\n3267 6918\\n7199 6564\\n6551 4881\\n1720 5942\\n2128 1814\\n8919 3128\\n3192 5728\\n9365 132\\n9434 3672\\n2727 6985\\n222 5837\\n9273 6648\\n2880 7166\\n990 4330\\n8582 7316\\n3033 6368\\n2611 3325\\n1430 8602\\n4242 9395\\n7418 3333\\n4763 191\\n1186 4\\n295 6523\\n3557 2528\\n1819 2594\\n7797 6084\\n8836 224\\n7716 2012\\n9190 252\\n8588 1045\\n8343 3300\\n4895 1008\\n2807 8927\\n3679 848\\n2606 281\\n8038 5569\\n5598 9740\\n4020 1880\\n159 3253\\n671 7997\\n8963 1854\\n6971 2344\\n1490 523\\n7530 8061\\n9518 3256\\n8164 6223\\n3147 7152\\n8492 5529\\n8727 3322\\n575 2317\\n3260 1142\\n190 1416\\n597 7792\\n2911 7997\\n1061 5150\\n4964 7146\\n4933 6878\\n3568 1729\\n5980 5772\\n9790 7323\\n8404 7600\\n5974 742\\n309 3969\\n1557 8254\\n643 1578\\n6614 369\\n5371 6272\\n8439 1634\\n9806 3802\\n5060 5623\\n2424 1496\\n8033 9301\\n6567 2319\\n9891 9169\\n7757 1559\\n474 5589\\n7907 7134\\n1724 2984\\n660 1084\\n5466 669\\n6696 6646\\n7923 5641\\n7981 4235\\n8184 4177\\n3696 1768\\n2185 3084\\n3874 5728\\n3272 3704\\n4166 6592\\n1544 471\\n1833 2519\\n2640 7913\\n7665 3715\\n4131 4022\\n5536 2892\\n3001 2136\\n1198 7690\\n2375 1265\\n6754 2373\\n5197 7344\\n7065 8531\\n8099 1111\\n9816 8517\\n3340 4063\\n4764 3532\\n8444 9718\\n7177 2617\\n1395 7566\\n9570 3107\\n3691 1714\\n7648 2322\\n7378 4978\\n8729 6688\\n7656 2008\\n205 8838\\n4566 8580\\n4548 3793\\n469 6186\\n1530 5159\\n6562 2517\\n7191 1059\\n4465 3977\\n5629 1377\\n3069 7043\\n8390 436\\n622 9838\\n393 673\\n6891 6361\\n6568 1252\\n2089 9370\\n5898 7510\\n9105 4104\\n6268 4004\\n5907 6604\\n1052 3462\\n3939 5207\\n902 1193\\n480 1173\\n5069 702\\n106 7892\\n3528 3446\\n7515 7064\\n2864 2422\\n2787 7766\\n8497 1828\\n1261 3702\\n4974 9731\\n9180 8089\\n484 6718\\n9816 4958\\n7313 8964\\n5723 241\\n2124 5185\\n8524 6078\\n4885 8428\\n2369 8670\\n4365 9035\\n6113 5792\\n4049 2362\\n8116 340\\n9673 6146\\n4471 5260\\n2661 3508\\n7646 1343\\n3890 6451\\n7976 4892\\n1423 4403\\n7814 8346\\n4353 280\\n9569 7322\\n1174 6147\\n9200 1205\\n4968 7094\\n1636 5658\\n374 9931\\n8444 603\\n279 3861\\n4582 3543\\n9072 8754\\n9994 2602\\n6749 315\\n412 5366\\n9167 5463\\n7339 4389\\n6322 6676\\n7292 1532\\n2648 821\\n9115 8738\\n1967 1244\\n687 9376\\n4912 7164\\n3047 2514\\n7380 1962\\n789 1541\\n2249 9076\\n6652 8813\\n9443 1244\\n6939 6343\\n6322 9874\\n4208 4011\\n2847 729\\n9529 5480\\n7123 5999\\n8324 3061\\n7732 3701\\n7617 1134\\n8591 9502\\n5390 157\\n4205 2379\\n9861 7922\\n342 3860\\n7164 906\\n3127 5849\\n3956 12\\n3769 4986\\n4371 6054\\n6498 6293\\n9479 4958\\n6982 9685\\n2360 1946\\n8483 6744\\n463 2531\\n1484 9276\\n6509 1058\\n2129 9590\\n2554 8007\\n4677 2585\\n2386 7507\\n5529 4445\\n6607 27\\n1887 8587\\n9182 877\\n6814 5895\\n3109 2567\\n255 1598\\n3526 8837\\n7860 7108\\n4525 4423\\n1391 7275\\n9011 808\\n5501 306\\n9510 9773\\n4876 6833\\n8938 72\\n2844 3529\\n4127 4467\\n623 3725\\n3875 7825\\n9321 4180\\n3772 8555\\n5996 728\\n6459 4126\\n2067 9556\\n3138 2888\\n5287 2486\\n8397 6488\\n3045 190\\n5907 8259\\n2782 1390\\n498\\n8424 1409\\n9674 9882\\n9943 6283\\n7662 5775\\n6777 4046\\n3873 4262\\n7658 7085\\n4600 7755\\n62 9854\\n9639 4532\\n3428 9382\\n1815 2000\\n2395 2160\\n6546 7346\\n5699 701\\n678 7149\\n3601 9225\\n1335 412\\n5887 114\\n9543 9750\\n7097 3574\\n2097 3664\\n4333 3342\\n6586 4906\\n8814 8645\\n657 9671\\n914 6573\\n9821 1869\\n5262 7388\\n5198 2278\\n7104 178\\n6456 6375\\n4819 8100\\n6609 1235\\n6685 4886\\n5893 9817\\n4280 1706\\n4546 5419\\n56 2681\\n2141 611\\n3015 8716\\n7157 8225\\n3651 5035\\n8656 6155\\n4062 6226\\n4146 185\\n3032 9258\\n1789 6071\\n1243 2839\\n8914 2193\\n7534 1506\\n176 8356\\n2710 5615\\n9414 3939\\n9830 9918\\n7622 726\\n4040 3401\\n4430 5754\\n8972 9436\\n8695 804\\n8894 3634\\n3800 5153\\n1514 4022\\n4789 6758\\n6110 44\\n4381 4269\\n7412 9145\\n594 2779\\n2119 9444\\n3254 1471\\n1859 2460\\n4333 4678\\n1516 641\\n320 7609\\n3432 8471\\n4301 541\\n841 4026\\n9879 4991\\n871 4934\\n3724 1304\\n5675 8603\\n3783 9247\\n5691 2088\\n6061 1272\\n8777 8523\\n7041 2398\\n6661 8223\\n7068 7089\\n6234 4888\\n9531 6319\\n7245 7586\\n126 8359\\n2832 8983\\n4933 8523\\n6662 6552\\n6184 9114\\n7287 5519\\n5975 6823\\n1632 7814\\n1972 7563\\n5449 867\\n2638 7059\\n1358 5201\\n3099 6807\\n1201 4983\\n8345 8553\\n8893 6574\\n6186 5366\\n8632 7426\\n6341 5335\\n2153 7220\\n1851 6253\\n4633 3054\\n1227 4336\\n59 4424\\n5088 8626\\n4147 4516\\n7383 7363\\n9440 1070\\n8018 1651\\n8396 821\\n1368 3698\\n3266 7332\\n585 7872\\n5131 5277\\n8114 855\\n7575 4309\\n1992 75\\n7791 3116\\n6634 7820\\n8542 3238\\n491 9971\\n2877 4739\\n2308 4107\\n5493 239\\n9070 4101\\n5188 7065\\n2330 8698\\n3775 1291\\n8427 2775\\n9129 1757\\n6275 1756\\n6551 2867\\n5102 6410\\n3656 304\\n6751 4073\\n4602 4150\\n2550 9363\\n7259 3102\\n6063 9406\\n385 265\\n4291 7839\\n2727 274\\n6652 6569\\n3630 4613\\n3180 301\\n635 364\\n5097 2859\\n5995 6146\\n5040 9798\\n1894 2252\\n7995 6788\\n6922 6816\\n1382 9016\\n4853 7955\\n5787 9591\\n851 586\\n4798 3329\\n1634 827\\n3227 5734\\n1382 9105\\n9511 8902\\n2733 891\\n7397 1489\\n7384 1562\\n9659 7889\\n6017 947\\n7821 7460\\n3339 2440\\n8958 8708\\n7434 6848\\n6596 7827\\n5659 3356\\n3108 5014\\n8856 17\\n8483 5663\\n7676 7204\\n1720 7001\\n5719 498\\n1098 5042\\n6630 1885\\n1600 280\\n8304 7607\\n1507 7181\\n3215 6413\\n7835 4357\\n7028 2342\\n2306 5773\\n6113 9465\\n1121 3760\\n9893 9062\\n3204 6526\\n4241 1112\\n9537 1685\\n4940 1455\\n7477 3045\\n1571 2331\\n6214 1991\\n6245 7865\\n5287 5767\\n1959 1473\\n5121 7094\\n69 2405\\n8180 753\\n3617 6495\\n3550 6952\\n2380 64\\n23 313\\n7270 1092\\n3538 1807\\n5187 1845\\n4753 8827\\n7126 2095\\n6652 8659\\n4970 3877\\n1112 7863\\n3728 5636\\n8524 5786\\n2778 5633\\n3884 9786\\n5276 4904\\n6677 9271\\n6476 1748\\n1436 464\\n1846 7930\\n1639 6344\\n5431 9885\\n6109 9067\\n1159 5012\\n6258 7372\\n6348 8053\\n479 6715\\n1458 9681\\n3256 3247\\n5013 8740\\n2064 4793\\n6422 4781\\n1947 1613\\n2096 3857\\n2444 3432\\n1885 1951\\n6384 7448\\n2320 9709\\n1662 516\\n7694 7863\\n1731 3315\\n9668 7569\\n2360 3471\\n2445 5310\\n2021 2191\\n3084 5486\\n3283 5731\\n7113 5987\\n9815 8430\\n9610 4159\\n1252 3641\\n8348 74\\n895 6179\\n9557 1066\\n5300 8801\\n6749 1925\\n151 6114\\n1758 1372\\n3577 7027\\n9489 2164\\n3308 4554\\n1363 5355\\n2760 4587\\n3991 5134\\n5568 8327\\n9286 796\\n6108 5604\\n7603 8508\\n1879 6548\\n7238 8531\\n2003 879\\n9847 1494\\n8183 1571\\n6987 5461\\n5437 5833\\n1280 8498\\n6589 6828\\n8791 9612\\n6024 4234\\n143 4879\\n4284 9052\\n394 6524\\n9646 2288\\n5556 6459\\n9286 2895\\n7476 961\\n6644 6107\\n9765 1752\\n6371 7177\\n966 2449\\n7019 6446\\n5834 21\\n978 8445\\n3912 4248\\n112 201\\n3676 4257\\n6745 7164\\n3953 4330\\n5236 6212\\n2658 7034\\n8078 2664\\n5988 2960\\n9952 2903\\n2239 8926\\n9558 4219\\n5768 3941\\n5296 8228\\n9442 438\\n3927 4952\\n808 6860\\n6941 5961\\n4037 2215\\n378 7745\\n2645 9378\\n3202 9899\\n2505 1495\\n5055 489\\n4252 4167\\n6931 2069\\n5961 8274\\n7769 6894\\n8702 155\\n4044 7712\\n1728 8553\\n7315 4870\\n5141 4785\\n9774 8069\\n4722 9628\\n4827 4190\\n7370 9959\\n9121 1844\\n8615 5520\\n6189 2791\\n766 1638\\n6316 5945\\n7715 5419\\n1378 7041\\n9184 7160\\n8175 1258\\n9983 6934\\n1133 6443\\n3418 8235\\n397 6808\\n184 1345\\n8002 6881\\n2113 8992\\n9489 6655\\n8211 4211\\n1692 6820\\n6616 4201\\n6200 4671\\n7832 1937\\n847 5807\\n7350 3466\\n7162 9873\\n8622 7896\\n4291 5416\\n9039 1660\\n6355 9179\\n5144 5170\\n2446 8934\\n2148 5139\\n1353 7464\\n4816 3525\\n9420 2576\\n9698 3033\\n4785 9748\\n3844 150\\n6126 9213\\n3899 6612\\n363 7752\\n6710 2178\\n58 6141\\n6817 9117\\n6132 8208\\n7104 4072\\n4900 7574\\n1363 4697\\n5092 9896\\n1778 3156\\n5062 3766\\n7738 764\\n784 1940\\n2635 9122\\n424 1849\\n8831 8204\\n6696 6501\\n2070 1814\\n3795 2695\\n7220 9267\\n6101 7481\\n2219 4646\\n5746 5903\\n1323 8528\\n9180 6697\\n4269 2704\\n9392 1876\\n7483 8588\\n9525 3550\\n1447 2459\\n3035 7542\\n7798 302\\n2843 7793\\n4296 2323\\n9453 8445\\n588 3685\\n5245 4724\\n2423 6865\\n3833 142\\n3057 1213\\n9619 451\\n9063 2445\\n3030 7418\\n5324 8914\\n2883 3132\\n2632 8168\\n6365 133\\n9716 6976\\n1262 5570\\n3767 3505\\n1678 6105\\n5561 2605\\n7317 35\\n9712 6371\\n5413 786\\n5522 5763\\n8080 9580\\n3977 7591\\n5497 125\\n1778 6120\\n2445 6384\\n6981 184\\n5980 2295\\n9338 6076\\n1277 5056\\n6787 6870\\n8777 4633\\n7816 1628\\n8550 4991\\n7644 4548\\n7558 8171\\n7975 4522\\n5075 3008\\n5761 522\\n2396 1800\\n2975 1231\\n2039 4342\\n2094 2719\\n5117 7936\\n5952 8566\\n8652 2977\\n2147 8824\\n8160 5302\\n9329 7995\\n852 6513\\n5197 3516\\n7599 9930\\n5892 9696\\n5683 7315\\n5426 5391\\n7528 1878\\n2434 3402\\n3019 345\\n9492 4894\\n7040 708\\n3231 4139\\n7890 6834\\n68 5271\\n3433 9701\\n9914 7177\\n9402 2641\\n3246 4002\\n9126 9858\\n805 8115\\n1351 8629\\n8028 7776\\n4166 3834\\n3474 2759\\n8839 5476\\n4441 6408\\n2676 1833\\n7676 4996\\n2464 1854\\n124\\n7066 4409\\n5014 3645\\n6894 778\\n7416 5006\\n7021 9516\\n6031 1065\\n1040 3459\\n9290 9270\\n1116 2173\\n1164 4800\\n2672 9296\\n2504 5235\\n1965 2369\\n5797 5599\\n8025 195\\n3374 9905\\n7317 6094\\n3744 8361\\n1145 8560\\n6819 765\\n4699 5452\\n6463 4577\\n3108 5184\\n4795 2333\\n7411 773\\n5944 6802\\n5555 5595\\n4722 9830\\n8885 2338\\n669 1243\\n8133 2520\\n605 7374\\n3197 1219\\n3457 8039\\n3607 8962\\n3511 1067\\n1555 1023\\n880 5456\\n92 5465\\n2230 6536\\n1657 810\\n2725 1354\\n8903 9720\\n4885 9688\\n9935 7819\\n6219 2881\\n1679 8588\\n7979 7725\\n3504 1265\\n2500 2238\\n6136 6870\\n838 370\\n5625 9986\\n3588 4525\\n2697 1457\\n8464 9551\\n6448 3469\\n5120 1632\\n5543 2196\\n8850 4970\\n8463 6832\\n8943 1946\\n9187 6054\\n743 2579\\n5642 4569\\n3319 8882\\n3940 878\\n660 7287\\n9122 745\\n5151 1270\\n6916 725\\n3424 833\\n9856 9138\\n9771 3278\\n3893 9326\\n5651 4522\\n201 3474\\n3002 5022\\n3633 4501\\n1891 7434\\n818 5513\\n4392 6733\\n7121 9218\\n6687 3370\\n5367 2660\\n7897 9566\\n4891 8747\\n3716 3694\\n1973 7248\\n7077 5432\\n5613 182\\n6806 5839\\n987 8839\\n2786 2055\\n1565 4841\\n5987 6636\\n8369 1434\\n1316 8091\\n1191 9843\\n2880 9936\\n4066 2203\\n3534 6532\\n4373 212\\n9606 9790\\n1652 808\\n6496 5476\\n4172 5903\\n745 6442\\n8931 2432\\n2723 6847\\n7707 6162\\n9885 3682\\n6932 1835\\n3999 9350\\n2682 1382\\n7141 1920\\n7129 2961\\n686 2881\\n4198 9267\\n2137 3260\\n7854 1611\\n8574 5914\\n9094 2912\\n4497 5701\\n204\\n9691 2608\\n2108 2754\\n832 8686\\n2178 7068\\n137 6393\\n642 8534\\n6089 6474\\n5696 8744\\n5610 6754\\n8996 3730\\n1134 698\\n339 5536\\n8689 7092\\n9103 4003\\n1837 3402\\n6284 3893\\n7340 4176\\n4587 3341\\n8248 4655\\n3736 6782\\n6224 5570\\n9449 8664\\n5293 4841\\n4863 1133\\n9739 1735\\n7411 1703\\n6851 4760\\n3709 9406\\n4802 8315\\n1839 1196\\n8473 3445\\n6199 1504\\n508 6205\\n8098 3724\\n8993 911\\n6927 4582\\n7316 9098\\n7518 4251\\n2231 4166\\n7388 9507\\n2070 5649\\n2549 106\\n6057 1954\\n2806 1988\\n2904 2854\\n5675 5555\\n1745 539\\n8128 5065\\n402 8423\\n9248 1384\\n8694 8622\\n4407 3454\\n9835 7588\\n6346 5427\\n8489 8290\\n9761 2552\\n1355 1261\\n3803 6903\\n1345 4625\\n1250 6745\\n2156 8919\\n5256 9397\\n4286 4424\\n2196 2413\\n1789 2934\\n5246 5262\\n8245 3841\\n7426 3332\\n135 5089\\n6001 3068\\n7703 5933\\n1216 217\\n2967 6720\\n9177 8439\\n1637 6126\\n8939 6531\\n4302 7554\\n4425 7728\\n991 2383\\n8150 1527\\n5971 7756\\n9218 7741\\n7237 2417\\n3444 8344\\n2618 381\\n9618 722\\n2492 158\\n7113 9731\\n9371 7080\\n6732 829\\n252 5947\\n5786 4337\\n6659 7187\\n371 5636\\n9723 6495\\n8699 406\\n4186 4163\\n2941 3611\\n2044 1054\\n6606 8325\\n8771 2709\\n774 4584\\n3668 6465\\n4771 7828\\n6412 6000\\n1022 3654\\n8899 9201\\n4712 9796\\n5715 9745\\n978 2730\\n3827 4864\\n6103 6611\\n8877 3387\\n3892 5819\\n6811 4685\\n6471 1019\\n5166 2764\\n3860 7877\\n8853 4853\\n5976 4869\\n2000 9899\\n7247 4855\\n358 8907\\n6602 6684\\n4490 1492\\n8299 2250\\n6158 1630\\n5729 4289\\n5519 707\\n1345 1037\\n132 7281\\n6605 6684\\n3913 1274\\n5479 9822\\n9850 6602\\n5972 6824\\n5389 568\\n9055 3298\\n20 9905\\n2829 2025\\n5441 3604\\n5500 7598\\n4021 3076\\n4103 5363\\n7070 170\\n6209 7546\\n6859 8384\\n4479 3406\\n3164 7139\\n7673 327\\n2715 8915\\n8081 2600\\n4133 2225\\n8468 5928\\n9196 764\\n7688 6327\\n129 6142\\n9610 6865\\n5866 6907\\n9028 9573\\n2095 3709\\n8585 411\\n4625 7490\\n7175 8033\\n2999 7733\\n5215 9244\\n5879 8622\\n9979 1445\\n1057 1436\\n7547 9017\\n1297 9278\\n9991 8652\\n9584 7567\\n3342 3009\\n699 1152\\n5312 8919\\n6081 9852\\n8423 1471\\n7180 3060\\n5686 536\\n3914 8430\\n7804 9358\\n2310 9681\\n4485 6048\\n7972 5285\\n2829 8493\\n2076 6819\\n7338 5144\\n1885 3286\\n7450 981\\n1760 5317\\n3119 3689\\n4857 4174\\n7214 2154\\n1847 6494\\n4746 2866\\n9887 3926\\n959 7468\\n8589 8116\\n5822 1428\\n9552 259\\n5901 3959\\n3799 446\\n1501 6711\\n957\\n2710 6866\\n2972 725\\n5536 5639\\n9820 4516\\n417 2239\\n8235 1916\\n3282 3457\\n8882 4005\\n9864 354\\n7856 1272\\n2338 2\\n3525 4753\\n683 8799\\n3658 7087\\n5931 3969\\n4984 4220\\n4108 8054\\n5039 8641\\n6328 6569\\n2424 7195\\n8530 3081\\n9683 2594\\n9754 9262\\n5011 1525\\n7237 6160\\n7146 7155\\n4338 5487\\n216 9474\\n6359 5000\\n1392 8503\\n4554 4667\\n6665 9421\\n1523 6826\\n2979 1701\\n4588 6496\\n5820 5596\\n9357 3813\\n6969 4713\\n1992 3744\\n7349 8184\\n8388 5730\\n630 8210\\n3722 2581\\n3821 275\\n9067 9974\\n3909 8437\\n1161 7342\\n9622 7563\\n5957 5002\\n137 6168\\n2491 6418\\n3545 5310\\n7240 181\\n1879 1194\\n2151 1735\\n3433 9640\\n2491 8816\\n7057 5084\\n4748 9498\\n6925 1745\\n5300 3739\\n4287 1202\\n7580 5568\\n8083 9850\\n6483 1461\\n7537 958\\n3155 9046\\n7712 6389\\n3618 1840\\n3146 8475\\n176 2067\\n348 3983\\n6079 4089\\n2190 6428\\n933 8877\\n647 2721\\n3319 5735\\n5110 5487\\n8543 9320\\n6907 2624\\n4078 2145\\n2236 5544\\n1832 3390\\n5678 6684\\n4321 9203\\n6003 810\\n4281 6008\\n714 830\\n9440 7045\\n4824 3976\\n7782 1275\\n4957 2434\\n6622 9348\\n7009 5283\\n9236 7450\\n2132 4798\\n6829 3986\\n2100 711\\n4190 8221\\n857 5725\\n1157 8908\\n5165 8689\\n6407 7376\\n5837 2525\\n1157 2917\\n5880 5257\\n4206 7929\\n5481 6479\\n4787 3301\\n5264 2404\\n4143 962\\n5461 3666\\n7841 5481\\n6266 4441\\n2303 4693\\n1286 3596\\n8331 9438\\n4138 7104\\n7823 4482\\n4964 2127\\n7478 4214\\n111 5781\\n4921 4124\\n6421 8650\\n5867 5295\\n3276 9814\\n2772 9017\\n7501 9544\\n2855 5905\\n6720 9701\\n4036 5461\\n4840 8132\\n2407 4468\\n7227 539\\n1296 7120\\n9747 9396\\n5747 8395\\n4388 7049\\n1016 38\\n4739 9539\\n1782 2274\\n6440 7210\\n5081 1772\\n9785 4789\\n1333 5272\\n6899 6816\\n7418 8821\\n9340 1487\\n8676 5203\\n3210 7155\\n3231 4107\\n9996 6129\\n8279 6384\\n7154 4412\\n5201 5233\\n6419 8698\\n1070 8474\\n6064 2776\\n7413 9744\\n2421 463\\n3143 3451\\n8654 6021\\n3827 7346\\n289 3826\\n2415 1331\\n4003 1808\\n9601 1571\\n13 2404\\n314 9809\\n6021 3683\\n9916 1763\\n3389 4661\\n9091 6969\\n4133 8369\\n8344 7436\\n5023 9607\\n2820 9483\\n2375 1943\\n6664 8778\\n8867 6584\\n805 3666\\n567 123\\n4336 7680\\n9492 5500\\n2219 8296\\n1140 1264\\n516 7116\\n1265 2660\\n8672 7303\\n6861 6683\\n6748 8602\\n852 3872\\n5741 7914\\n9634 8708\\n6362 2733\\n4459 8515\\n5348 8798\\n2594 4194\\n1468 4397\\n1802 3492\\n5308 2447\\n2231 7011\\n6013 9925\\n2869 1999\\n7831 9379\\n9092 7767\\n3201 2693\\n5689 8773\\n9911 5540\\n6530 1068\\n1592 9387\\n1168 8857\\n496 5151\\n4705 2603\\n4191 2896\\n6298 9596\\n5266 2387\\n7304 9180\\n9687 4486\\n6907 509\\n777 2681\\n2840 6521\\n5524 3558\\n2656 1837\\n6609 1918\\n2744 7025\\n6247 3494\\n5367 1133\\n4560 5481\\n9546 6589\\n477 714\\n5139 3840\\n3689 4880\\n8107 2576\\n5594 7179\\n5324 3716\\n9508 6538\\n1371 8815\\n9658 7135\\n8407 3829\\n4757 7576\\n5819 2509\\n6109 3284\\n4035 3992\\n999 3794\\n9479 2573\\n1467 5860\\n6785 9026\\n5699 1149\\n8164 8925\\n3378 464\\n3977 5969\\n1066 9175\\n7938 8766\\n1898 8983\\n2584 6162\\n3240 2499\\n3199 866\\n4973 6041\\n7139 12\\n8464 1182\\n7177 5852\\n7296 6943\\n7337 2979\\n6398 5827\\n5944 2922\\n254 598\\n5032 1787\\n6593 1877\\n7918 6879\\n9258 8176\\n9355 9432\\n3720 5159\\n7766 347\\n8624 6325\\n9961 9737\\n6072 8123\\n6748 807\\n8214 9444\\n8834 9971\\n9804 443\\n5954 9290\\n4775 7522\\n8512 4477\\n9905 2407\\n9853 2090\\n2141 7812\\n8760 5819\\n1558 2333\\n6594 2726\\n1592 4448\\n5214 7126\\n5518 5194\\n6162 8026\\n7868 5938\\n1672 1589\\n4354 6299\\n3772 7848\\n8640 8669\\n6592 7368\\n9299 9759\\n2308 1348\\n988 2073\\n3678 4578\\n4056 4856\\n8135 5008\\n2239 6453\\n6995 4379\\n1513 6863\\n1522 1396\\n9702 1907\\n4681 5271\\n3586 2624\\n6997 3108\\n1437 4589\\n1117 4749\\n4942 3586\\n9749 5852\\n2146 4885\\n4887 8536\\n797 3898\\n6325 2972\\n5090 7790\\n8493 4419\\n1032 4556\\n5991 4682\\n8991 5153\\n7235 9500\\n3902 6386\\n1199 2606\\n8453 8163\\n3985 882\\n4028 1579\\n6740 792\\n8409 9007\\n1405 6408\\n8273 2111\\n3264 3409\\n9856 9289\\n7654 6296\\n7745 9766\\n6998 9475\\n620 8786\\n9878 2448\\n3774 6453\\n1233 2338\\n865 6455\\n9932 82\\n7453 9243\\n2137 5668\\n5563 8553\\n8351 4812\\n921 8866\\n8795 2252\\n4466 2924\\n1537 1346\\n9864 3103\\n9615 3825\\n4256 5574\\n6570 3961\\n6357 5796\\n7850 6769\\n6180 4663\\n5578 7637\\n7862 2769\\n5243 8579\\n7172 81\\n1710 9518\\n6069 5334\\n3544 6222\\n9496 4821\\n7336 5958\\n6189 6780\\n3104 559\\n1850 6178\\n6414 7526\\n2915 2875\\n6672 2904\\n6775 3999\\n2260 7423\\n6980 9553\\n9916 543\\n3464 3766\\n5308 3647\\n4628 2118\\n8248 4726\\n4843 8419\\n8261 283\\n6600 9876\\n9326 9952\\n5454 9952\\n8152 6686\\n1535 2409\\n6209 2291\\n9430 73\\n316 1197\\n1734 7730\\n1947 9587\\n4096 4529\\n6083 4498\\n3840 7936\\n9809 8879\\n9694 6378\\n3221 3329\\n3056 2289\\n1 9679\\n4960 997\\n2433 7087\\n5095 9751\\n1789 5762\\n205 149\\n4192 8439\\n8870 1491\\n1074 1558\\n7781 9411\\n9419 5524\\n4786 5015\\n3712 38\\n8616 2222\\n3308 7228\\n4252 5656\\n4626 5207\\n8743 1008\\n9681 6525\\n5597 8136\\n8359 9111\\n4399 1639\\n215 1718\\n5221 4062\\n3929 3566\\n3583 7024\\n5460 8345\\n4116 8745\\n220 998\\n5689 3685\\n9264 9823\\n3391 8097\\n9942 6832\\n3171 4035\\n9740 1446\\n591 8625\\n6248 470\\n3737 8079\\n7458 1226\\n6300 5693\\n7952 4451\\n3447 2764\\n9845 255\\n1216 8327\\n106 352\\n4173 4492\\n9590 6249\\n2436 6637\\n5387 5909\\n5928 5146\\n5564 4568\\n1949 6134\\n2604 9901\\n1769 1050\\n437 7476\\n3814 6181\\n198 7922\\n658 8607\\n1141 2016\\n6420 4870\\n1098 2323\\n3970 2989\\n383 218\\n4641 3211\\n5093 1034\\n1243 8407\\n1756 7391\\n3004 3979\\n3481 9266\\n7353 9364\\n2837 662\\n4066 4563\\n7103 7844\\n4253 3502\\n553 4080\\n1140 475\\n6200 9137\\n4397 5527\\n901 2495\\n9950 8558\\n4008 3789\\n9367 4377\\n804 2260\\n4011 5865\\n1018 8113\\n8266 5660\\n647 6765\\n3804 6558\\n9300 9624\\n7885 3143\\n1077 5884\\n2288 4771\\n726 4757\\n579 3778\\n7638 6592\\n4505 3461\\n9335 8276\\n7245 4981\\n975 9897\\n3116 1012\\n9191 9919\\n9332 9929\\n617 7595\\n7038 1990\\n6136 8462\\n5458 6649\\n8868 5537\\n2252 6991\\n1431 1549\\n5802 1540\\n6952 4419\\n3088 6861\\n3143 3452\\n7191 1945\\n1851 5054\\n4894 4833\\n555 4153\\n1696 7379\\n4863 6255\\n740 503\\n1473 799\\n4882 4447\\n6528 2639\\n9648 1421\\n6368 9892\\n9121 8475\\n391 9246\\n3499 9178\\n9691 8941\\n2580 1441\\n7272 6878\\n9744 2852\\n7645 7080\\n6695 2518\\n7890 9203\\n6876 2750\\n1799 3341\\n6725 6408\\n2169 5059\\n4662 3760\\n8091 4655\\n1957 9599\\n5824 369\\n113 1965\\n894 2036\\n7367 4557\\n8106 4719\\n1292 2406\\n8312 9529\\n4808 6704\\n2589 4014\\n7235 5764\\n260 3978\\n2070 4813\\n3010 638\\n9296 1105\\n9534 9194\\n5880 914\\n3641 4012\\n8530 5471\\n8474 1342\\n2226 8507\\n4936 6755\\n3761 5220\\n8101 6348\\n3019 6189\\n5985 3478\\n3066 4307\\n4538 1239\\n4700 1537\\n1798 8423\\n4547 3122\\n7094 3493\\n4418 8214\\n8010 3520\\n389 643\\n3452 4594\\n9773 2407\\n1878 818\\n630 8211\\n6171 4327\\n4077 8187\\n8082 9163\\n7092 529\\n2228 9675\\n6523 463\\n2992 3983\\n8906 6589\\n4247 7910\\n1386 9425\\n1674 9962\\n8320 6080\\n4109 3604\\n9591 8819\\n8726 4587\\n8610 2452\\n3283 3755\\n4672 9933\\n681 1289\\n816 664\\n9323 7463\\n6103 3909\\n2156 3866\\n1127 9169\\n2614 9006\\n8132 7411\\n3544 819\\n9233 5466\\n6406 6367\\n5569 5798\\n8273 3572\\n3653 1771\\n6840 1276\\n3327 8180\\n4310 474\\n7663 9640\\n2641 4064\\n4695 5074\\n356 3786\\n797 3499\\n2871 2179\\n2308 8303\\n5307 4013\\n4426 1544\\n4976 4169\\n5663 4940\\n8510 1472\\n484 6980\\n4235 9929\\n3171 1591\\n1186 1241\\n8200 9120\\n6791 8747\\n6515 7638\\n1131 3566\\n2720 2370\\n6544 5338\\n3476 6348\\n9542 6279\\n6308 677\\n659 9856\\n2957 1553\\n2350 5340\\n4231 4068\\n6172 8949\\n2769 7336\\n6428 4798\\n2717 853\\n6863 7688\\n9822 4484\\n8594 9071\\n9963 9121\\n9037 7238\\n74 8193\\n8430 3599\\n8879 5045\\n7029 3443\\n8100 9211\\n5089 2456\\n9850 6149\\n227 3668\\n9680 7223\\n1851 7993\\n453 755\\n8686 3411\\n2511 1478\\n2014 7754\\n6245 9502\\n6707 8446\\n5294 9235\\n9636 2776\\n275 2154\\n6515 4496\\n3251 3849\\n6290 9803\\n277 3548\\n5362 767\\n4459 5652\\n9172 1304\\n4175 7850\\n1227 9610\\n9475 2424\\n8425 2941\\n126 7160\\n8342 9661\\n2550 1256\\n7895 3446\\n102 4334\\n2856 9871\\n2197 8131\\n3567 7154\\n9948 4923\\n6368 1030\\n5100 2185\\n923 3150\\n4464 5045\\n1793 2284\\n5309 2099\\n5240 3835\\n2723 8380\\n2422 1810\\n7980 8613\\n3085 1846\\n5001 3077\\n2502 4790\\n5808 4046\\n9144 6593\\n1441 2993\\n3014 5870\\n575 1412\\n5152 191\\n4617 807\\n5656 3963\\n372 4941\\n8613 5309\\n2542 9038\\n2577 5745\\n478 8450\\n7038 2103\\n5559 2207\\n376 356\\n1761 3126\\n3379 7206\\n3336 3700\\n8107 5673\\n3187 9902\\n9998 3108\\n113 5372\\n3191 2817\\n350 2789\\n4732 2002\\n7326 4370\\n1899 5015\\n5536 7516\\n8731 4292\\n9271 3976\\n5485 5453\\n2907 5262\\n3367 966\\n980 8166\\n2765 8599\\n8957 4006\\n9346 4542\\n6016 844\\n7125 5162\\n9546 5122\\n1555 8516\\n729 9942\\n3999 8848\\n5377 1287\\n6371 4423\\n8311 3125\\n9715 4748\\n4578 2029\\n4861 1997\\n4663 6967\\n2871 9494\\n1399 8133\\n4634 7254\\n9770 8550\\n4202 9253\\n9710 3183\\n3808 2953\\n1746 3345\\n7833 8219\\n9292 2640\\n3205 7056\\n6197 5350\\n7992 9847\\n5832 3100\\n6489 9700\\n9498 3342\\n7267 4341\\n9170 5332\\n955 2840\\n3644 6893\\n6340 1713\\n4693 6937\\n2304 4055\\n6368 1535\\n9894 8620\\n4617 8407\\n966 4642\\n390 1342\\n335 5077\\n6733 3544\\n626 4772\\n7343 861\\n8394 2624\\n3016 7725\\n4975 2394\\n8274 385\\n5428 557\\n7984 6843\\n2014 9353\\n1632 5090\\n5263 7075\\n9882 9500\\n5961 9424\\n3015 1527\\n549 1062\\n9548 6102\\n3604 2606\\n5933 189\\n9294 564\\n2536 8693\\n7288 4694\\n10 54\\n3731 7957\\n2976 1627\\n9351 2275\\n4348 7731\\n2388 9750\\n8536 9827\\n3008 8312\\n7626 2576\\n173 1877\\n9649 7906\\n9940 6603\\n8263 6032\\n3908 2072\\n4308 2397\\n1652 4651\\n9875 4423\\n5672 9776\\n1565 9532\\n4762 6678\\n5451 5479\\n6357 8868\\n81 142\\n7994 9655\\n2655 1489\\n9263 1791\\n8521 3028\\n3700 6207\\n8803 5218\\n3474 9962\\n3941 2921\\n3494 6386\\n8587 1398\\n6739 5100\\n9412 8978\\n2321 1390\\n3588 2712\\n7161 7967\\n4680 1332\\n7319 7040\\n6859 8119\\n9485 280\\n9477 1935\\n1797 6526\\n3022 2367\\n4107 1425\\n6992 9006\\n9002 9466\\n2552 3194\\n4949 1599\\n8933 9036\\n3785 4533\\n135 9071\\n9619 9463\\n6242 8130\\n9166 8243\\n5155 5073\\n9868 1704\\n1923 3123\\n4398 4885\\n5996 5119\\n3952 6150\\n6421 7780\\n4531 4936\\n6085 622\\n980 8107\\n7837 4943\\n4801 6697\\n7625 3552\\n5353 7526\\n9683 3707\\n9484 5060\\n1024 67\\n1478 8730\\n6307 1441\\n2421 335\\n9828 1378\\n4609 4947\\n100 9074\\n3500 6431\\n9945 8541\\n3450 1582\\n3816 3591\\n2821 9265\\n1646 4722\\n4211 9590\\n6234 1017\\n6786 7158\\n6770 7759\\n7116 9062\\n7757 6128\\n2774 2676\\n4934 1785\\n844 2208\\n4065 5100\\n4719 8995\\n3969 7433\\n8238 7346\\n4618 6796\\n45 2681\\n142 7131\\n400 8441\\n1537 4811\\n453 6276\\n6215 6819\\n386 7084\\n7444 8260\\n8796 1192\\n2937 9970\\n3904 2980\\n279 3541\\n312 1764\\n2433 5566\\n9945 552\\n455 224\\n3711 9603\\n425 5012\\n5953 5334\\n8765 8254\\n6098 9796\\n7999 1388\\n2558 7140\\n3446 2135\\n781 430\\n6823 47\\n9906 4037\\n9429 2377\\n9704 9122\\n5921 4834\\n8468 5480\\n1874 2040\\n4902 2203\\n60 7584\\n6561 8207\\n1518 205\\n8626 8377\\n3658 3501\\n5652 5755\\n6814 8987\\n6906 3668\\n1573 5766\\n3059 8252\\n6741 6580\\n2973 5524\\n42 1830\\n861\\n529 9210\\n4318 6142\\n4690 7667\\n2476 1631\\n1950 8164\\n800 9127\\n5115 9807\\n9261 7807\\n5272 1367\\n9373 5421\\n6162 5688\\n6750 9413\\n7855 9420\\n3250 7631\\n4685 4783\\n4046 7295\\n3074 3421\\n9638 2329\\n6804 8602\\n1804 7146\\n5344 2734\\n827 8989\\n4981 5457\\n7793 2062\\n8158 4646\\n4482 2037\\n1867 4637\\n1980 9578\\n2436 9657\\n5083 2773\\n4022 220\\n3846 3384\\n8513 8442\\n6416 5900\\n162 7525\\n1754 5351\\n1162 7007\\n7736 9772\\n7323 1265\\n511 8732\\n5781 7431\\n9383 3132\\n9113 2160\\n4562 6094\\n8435 3129\\n7429 7753\\n9833 1659\\n1251 7717\\n4094 805\\n8089 5122\\n2819 8943\\n7084 159\\n5654 392\\n2374 8624\\n3153 8242\\n979 590\\n683 3125\\n1988 748\\n8275 6974\\n248 9660\\n4844 1115\\n922 591\\n8748 7875\\n3877 2844\\n6808 7241\\n8094 4004\\n6850 4125\\n266 3290\\n6753 1538\\n3938 710\\n9990 7234\\n837 9343\\n4810 2134\\n2879 3280\\n6911 4089\\n5011 2890\\n9268 6841\\n1584 1281\\n9359 9791\\n649 8862\\n6295 9040\\n1713 1962\\n2759 2335\\n6594 9220\\n1225 4328\\n284 3673\\n3919 8578\\n4640 2203\\n5450 2681\\n6742 6347\\n476 4757\\n2191 5719\\n3178 7998\\n8690 9416\\n4711 7694\\n4884 5972\\n4889 8307\\n8998 3223\\n8476 3851\\n6959 9919\\n5679 199\\n2899 9888\\n9690 6700\\n9210 2702\\n3611 8937\\n6199 6467\\n4260 8545\\n9088 9839\\n9587 947\\n7499 6495\\n9259 3003\\n4008 4994\\n8864 8538\\n2626 5633\\n5178 6215\\n9883 1069\\n446 1465\\n3448 1332\\n8515 3949\\n9984 2477\\n2347 2454\\n5129 2204\\n3347 9360\\n1924 7137\\n9940 7483\\n8924 3802\\n8137 8803\\n8108 5735\\n5656 6811\\n7242 3880\\n886 3138\\n1681 5527\\n8387 2094\\n9360 7854\\n3960 1066\\n9567 8036\\n6960 6880\\n2883 9921\\n630 9459\\n8227 1223\\n1949 3239\\n6188 4147\\n2689 4488\\n8497 3591\\n3233 4611\\n1947 1724\\n8852 185\\n3761 4857\\n1933 824\\n6813 4075\\n1232 5670\\n7080 7092\\n7557 6992\\n2837 8680\\n3427 1508\\n8928 177\\n4419 2828\\n5536 5064\\n9672 3643\\n6153 188\\n8403 2628\\n184 701\\n9938 7593\\n6510 4265\\n6315 6473\\n9691 2348\\n7297 1768\\n9288 1819\\n8004 1964\\n4703 1575\\n997 1270\\n3344 522\\n5540 3715\\n6531 3954\\n5907 8345\\n2029 2659\\n3468 7148\\n8175 7861\\n6944 4145\\n9890 2153\\n2335 9473\\n3597 899\\n9179 5286\\n351 3182\\n6980 3673\\n144 1922\\n7545 2125\\n5526 3635\\n9507 3165\\n94 3311\\n2251 4345\\n6523 6647\\n4081 2882\\n7476 9804\\n7718 3145\\n2901 2529\\n1816 9363\\n2786 3576\\n8202 8364\\n1285 8545\\n8847 7103\\n9095 3327\\n4374 4040\\n7037 2157\\n9197 209\\n9546 1669\\n7055 9849\\n9723 3641\\n6776 6650\\n7950 7121\\n9350 6245\\n7179 9739\\n9450 607\\n7415 2706\\n4129 2441\\n8911 4199\\n5006 4149\\n1164 4667\\n6571 9979\\n9525 2771\\n4193 5775\\n1938 3036\\n2938 8893\\n1278 7889\\n3299 5151\\n8970 4347\\n4943 8793\\n1856 8132\\n3768 3190\\n1179 6708\\n8059 3321\\n944 8661\\n7921 1209\\n2633 9285\\n713 4640\\n8615 5030\\n1254 435\\n3601 2566\\n2811 3009\\n7649 7332\\n6079 8167\\n496 6490\\n6873 3228\\n208 7606\\n229 861\\n8824 5482\\n252 9514\\n4113 6287\\n2057 3720\\n2507 1332\\n9589 7682\\n1173 3739\\n9046 7049\\n526 9603\\n8082 5194\\n2004 2225\\n646 6647\\n7787 3091\\n5659 270\\n414 8435\\n3829 3657\\n2718 6114\\n8942 3681\\n9487 7169\\n8226 274\\n4077 8494\\n8679 9408\\n5449 9996\\n831 7198\\n4557 5252\\n205 9757\\n7558 359\\n2563 3299\\n2863 6278\\n1363 3644\\n9310 6026\\n6520 1219\\n4653 4033\\n5885 9912\\n8968 504\\n8924 1411\\n4433 5000\\n541 2293\\n720 9550\\n5068 3483\\n3608 1495\\n6506 6237\\n4492 1250\\n7233 9408\\n7756 9363\\n6374 7334\\n1080 3078\\n4043 2076\\n2949 6133\\n6759 5485\\n5229 9059\\n4001 1003\\n7052 2182\\n5617 9213\\n2701 8873\\n2907 6276\\n3984 3653\\n9276 3362\\n322 1534\\n4385 221\\n9503 8624\\n768 8149\\n8287 8357\\n8698 2760\\n7976 8021\\n1021 75\\n4405 9638\\n6859 5513\\n7847 1951\\n6337 132\\n6370 2016\\n5094 8360\\n8588 580\\n6123 9906\\n178 8833\\n9948 2918\\n51 6170\\n3215 566\\n3338 1501\\n5663 4336\\n2588 6293\\n3624 1218\\n6411 574\\n16 4646\\n7965 2022\\n4097 9517\\n3301 5197\\n8017 8702\\n9210 9363\\n8329 8699\\n9418 7305\\n9920 5148\\n3255 4237\\n79 1165\\n9852 9838\\n1424 4192\\n8524 3509\\n9125 4548\\n6969 3538\\n7152 5207\\n1092 8282\\n3218 3443\\n9107 4913\\n4574 7918\\n8842 1811\\n5906 7587\\n3132 127\\n5846 298\\n6670 8572\\n2347 5633\\n3724 4207\\n9990 9105\\n2782 1359\\n5902 2815\\n531 112\\n6262 814\\n8686 2654\\n3921 8794\\n3620 3807\\n8514 6766\\n2013 4872\\n9752 8090\\n262 3488\\n6996 8635\\n3521 7717\\n5022 6459\\n4221 9141\\n2866 2732\\n6146 2580\\n2855 6064\\n2348 4231\\n4733 7686\\n2272 788\\n302 8844\\n1662 7280\\n2202 1803\\n6497 2203\\n4956 8036\\n1323 4981\\n5211 6548\\n2886 5478\\n9282 7312\\n5760 5741\\n9336 5944\\n4936 8354\\n9056 7651\\n9828 9539\\n2700 1282\\n5091 6231\\n1817 1472\\n278 817\\n2924 615\\n703 6529\\n7039 3723\\n5409 2076\\n859 9558\\n1681 8861\\n2191 5810\\n3378 9867\\n2708 2239\\n6896 75\\n7164 8644\\n705 4461\\n4246 1414\\n2484 9077\\n3934 7203\\n1529 3921\\n1341 1314\\n6430 8376\\n3038 8147\\n8634 362\\n2719 211\\n9346 444\\n8608 9865\\n8458 5170\\n7214 1973\\n1010 2925\\n6664 4281\\n534 6205\\n4130 1313\\n8940 1231\\n9352 1391\\n5970 7123\\n4224 9885\\n6050 7643\\n2281 723\\n7792 8625\\n936 2019\\n2357 6183\\n2108 4410\\n6648 3436\\n1395 7637\\n6957 1658\\n7524 2543\\n4801 2876\\n2087 4072\\n1719 7706\\n6234 876\\n6898 9754\\n5402 1253\\n9307 2142\\n4693 6201\\n2631 8569\\n9383 7966\\n7095 2971\\n6532 7243\\n9547 8005\\n719 6360\\n4929 4124\\n6496 7771\\n5636 3795\\n2163 6580\\n2736 3391\\n3191 2665\\n7322 1851\\n5603 1863\\n5042 170\\n8665 8745\\n398 260\\n7299 8956\\n8778 636\\n5709 3295\\n936 5679\\n4177 9632\\n4231 5746\\n6024 7587\\n6290 9138\\n5269 7605\\n29 9112\\n6731 7547\\n5329 768\\n9456 5595\\n5531 4478\\n6838 7050\\n1890 3450\\n2893 4691\\n1029 1604\\n1097 2053\\n6442 341\\n4014 6940\\n278 25\\n7992 8625\\n4116 7856\\n234 45\\n8817 5089\\n6314 55\\n7214 1741\\n745 5297\\n4990 2872\\n1503 8626\\n1898 4614\\n980 4767\\n2926 9218\\n7086 6098\\n3472 9613\\n8000 1037\\n5721 2630\\n4961 9348\\n9016 488\\n6207 5965\\n7837 4186\\n9021 3981\\n4844 6890\\n7172 4653\\n9960 6845\\n9659 1851\\n9685 9976\\n5089 7874\\n5197 9445\\n5529 1855\\n491 291\\n2784 5724\\n4052 1449\\n5971 939\\n9597 5969\\n1845 7969\\n2995 4966\\n2067 6676\\n3178 6372\\n9988 588\\n4841 8673\\n4017 2451\\n4051 9539\\n9151 3393\\n4512 2711\\n1523 566\\n1354 5009\\n2156 3273\\n3121 7089\\n8201 9717\\n5870 2211\\n4670 7212\\n6284 9840\\n774 807\\n1514 3293\\n7996 5517\\n7933 5419\\n5190 317\\n3933 1947\\n3738 8713\\n6325 7892\\n9512 6746\\n835 3045\\n3169 8575\\n6842 8030\\n8750 5824\\n4847 9925\\n4123 3243\\n2124 1570\\n7047 4595\\n2851 2565\\n8119 1739\\n545 5867\\n9153 7833\\n5110 6761\\n6216 713\\n7410 2302\\n5505 1702\\n5388 3941\\n434 3262\\n1517 2683\\n3249 3481\\n6619 3341\\n7513 487\\n9641 1119\\n8377 7624\\n4044 239\\n6686 6224\\n5547 8132\\n9130 5486\\n7683 2636\\n9460 51\\n3180 1965\\n9119 1136\\n4817 1727\\n7061 9281\\n7869 9079\\n479 673\\n1867 50\\n4709 9873\\n3748 9849\\n9951 2657\\n1091 2106\\n2926 3210\\n6966 7038\\n432 1706\\n5049 8765\\n6742 6757\\n1428 4161\\n8858 2226\\n6655 406\\n3524 866\\n9561 660\\n9345 9936\\n4756 2307\\n7546 8196\\n8556 2585\\n2021 3615\\n4141 1677\\n3251 8014\\n9897 1210\\n5953 1461\\n1404 5631\\n8901 2755\\n2308 8467\\n9054 1562\\n3058 723\\n3586 1978\\n3629 1572\\n2684 7385\\n2736 4062\\n3959 7258\\n8647 8277\\n6819 822\\n2190 3244\\n3583 5479\\n6692 7228\\n2176 7783\\n8182 5640\\n8082 2427\\n263 6454\\n2571 5766\\n8034 1785\\n7610 4543\\n645 7674\\n1795 2142\\n6787 5306\\n3804 7408\\n2626 1252\\n8743 1583\\n9973 8903\\n625 6617\\n1005 3571\\n5584 252\\n7690 9062\\n3949 1578\\n6248 1266\\n3652 9367\\n3201 8973\\n7333 3074\\n9911 4408\\n7804 1575\\n1709 8106\\n9856 6064\\n3631 370\\n8086 2662\\n7987 43\\n2198 9391\\n4961 910\\n1663 6075\\n5627 5701\\n2842 8899\\n864 8103\\n1217 8310\\n3726 9243\\n925 8333\\n2601 4786\\n6706 9333\\n2497 3711\\n3465 8300\\n9753 532\\n3084 1686\\n502 4534\\n8848 6266\\n2956 5555\\n6516 7411\\n7282 3514\\n820 8927\\n3501 3926\\n4445 9017\\n6068 8168\\n6256 7904\\n2291 5746\\n4533 9883\\n6487 9196\\n276 8988\\n7151 8783\\n2188 9622\\n6432 9032\\n2456 5434\\n1242 5432\\n2422 8975\\n3994 8718\\n1392 8019\\n8384 4597\\n3167 6598\\n3793 915\\n5866 4886\\n1832 6140\\n3869 2577\\n1329 3984\\n5759 9628\\n8113 6093\\n6700 6249\\n6762 7114\\n8553 5309\\n9474 4999\\n2625 3907\\n2189 4419\\n9444 5635\\n2653 2778\\n8861 6611\\n5518 538\\n6186 7683\\n5921 9825\\n9999 3203\\n3946 2490\\n5543 268\\n6820 9117\\n866 9865\\n8596 7474\\n3007 4530\\n3542 71\\n5033 4639\\n102 9730\\n4792 2660\\n6702 1117\\n8242 4850\\n9658 9501\\n6644 8443\\n6335 3368\\n514 5698\\n6791 9992\\n1217 8437\\n3369 3345\\n2101 3514\\n8954 662\\n8713 3169\\n2599 2906\\n5822 2592\\n8542 7531\\n5759 6723\\n6372 6129\\n5613 4500\\n2416 4305\\n6960 5397\\n3343 2243\\n2521 4231\\n6464 9929\\n4080 3102\\n359 2569\\n5252 8274\\n2023 6991\\n3960 2387\\n736 1605\\n4952 2340\\n4521 3278\\n4181 2703\\n6307 3609\\n9162 5907\\n8599 8868\\n4625 4520\\n5772 5474\\n3553 774\\n1543 73\\n1257 432\\n2277 3471\\n2473 6108\\n2886 9829\\n4763 3881\\n4464 3843\\n5385 7755\\n3945 8379\\n1684 2250\\n4271 2836\\n1276 4271\\n3516 8231\\n2309 6319\\n2501 9513\\n1830 4062\\n4028 3981\\n9369 1993\\n2876 7409\\n49 117\\n1990 1314\\n6994 7482\\n1947 1661\\n2154 6117\\n6528 9238\\n7436 6259\\n5594 6005\\n9907 1344\\n3718 1328\\n558 8564\\n4549 1730\\n7844 9661\\n7264 4660\\n8985 4331\\n6220 2925\\n6177 1314\\n5081 2648\\n9548 3599\\n5441 4105\\n2470 6118\\n4875 7784\\n5653 2378\\n269 8558\\n549 9936\\n3053 5462\\n8050 4726\\n376 1283\\n5245 3889\\n3845 4180\\n7122 6277\\n8376 7296\\n8478 5701\\n9314 1309\\n8878 5719\\n3163 3747\\n518 5354\\n6712 9917\\n3749 1332\\n4170 8798\\n5212 5530\\n3805 3592\\n6735 2711\\n7348 1400\\n447 8907\\n8321 2633\\n4231 3547\\n9219 3741\\n5261 4034\\n2190 1167\\n8600 4617\\n8621 8643\\n2055 8115\\n2407 4696\\n566 5292\\n1602 4460\\n2876 3704\\n6661 5197\\n5392 1869\\n345 4129\\n7734 7679\\n346 5123\\n1450 5058\\n407 4217\\n2838 7215\\n9967 3833\\n1801 9859\\n3526 6499\\n788 3726\\n9475 9274\\n9092 7024\\n8018 8152\\n139 3582\\n2267 9229\\n7935 7255\\n2169 3766\\n4222 7202\\n4390 1287\\n6154 3721\\n5717 8812\\n2968 2467\\n2718 1622\\n6340 5263\\n84\\n1129 7058\\n1665 2214\\n5222 6775\\n5961 4220\\n8370 1568\\n8493 7186\\n2257 7140\\n9688 3017\\n1274 2779\\n9578 252\\n4570 6099\\n3812 4577\\n2987 8953\\n4161 9570\\n4924 2264\\n3267 7014\\n2103 7084\\n8087 2950\\n8963 1742\\n3225 684\\n2122 6577\\n7710 5425\\n564 2348\\n7201 3417\\n5367 3704\\n7574 2761\\n9133 9453\\n5810 9973\\n1898 5627\\n83 3535\\n4091 4320\\n217 2248\\n5562 668\\n6467 7181\\n9007 9585\\n1130 1277\\n8103 195\\n9429 7302\\n3396 3076\\n6940 4184\\n6624 2813\\n4490 748\\n9670 6283\\n2422 3140\\n2781 2918\\n3159 2530\\n3686 1633\\n2852 6912\\n4103 877\\n7827 3984\\n1161 2343\\n6395 3430\\n9985 5876\\n430 318\\n4327 5196\\n7517 4361\\n2519 8370\\n3523 7365\\n5110 8653\\n4114 7469\\n2079 7549\\n347 3149\\n9986 7664\\n1309 6707\\n1380 5893\\n5616 3333\\n8716 8381\\n4741 3012\\n3572 1450\\n1400 974\\n783 1095\\n8226 7423\\n6103 3099\\n9888 9888\\n4988 156\\n1718 2282\\n8416 6603\\n3426 9233\\n4857 9816\\n2627 3268\\n250 7017\\n7684 5651\\n8018 6323\\n1320 863\\n489\\n2450 2451\\n6653 5971\\n9468 1907\\n9661 1646\\n831 2753\\n850 9548\\n3425 3342\\n353 1961\\n9601 4574\\n4657 9078\\n2604 9586\\n1605 8106\\n1727 1475\\n9895 7863\\n8494 4145\\n9343 5566\\n6363 1562\\n5017 6700\\n8940 8235\\n5899 6335\\n650 8744\\n8676 2675\\n1928 5385\\n7756 7463\\n6103 9948\\n4830 1830\\n3016 2072\\n4799 8320\\n7517 948\\n2601 2073\\n7102 6093\\n5208 9211\\n5830 2266\\n1421 5599\\n3110 3694\\n2946 6799\\n5545 4527\\n1174 9502\\n2429 7076\\n6902 3098\\n1573 6211\\n972 1705\\n4608 7536\\n5525 312\\n8549 8807\\n3470 9477\\n6329 8727\\n7601 1008\\n1480 5282\\n4206 3993\\n4443 8206\\n455 4491\\n4265 5823\\n9841 4781\\n2460 1865\\n5173 9694\\n9396 7987\\n1365 4195\\n4475 8601\\n7082 7209\\n5552 2249\\n5108 7167\\n3261 3783\\n9098 9940\\n1298 22\\n4329 4107\\n9296 7963\\n111 3652\\n8887 5147\\n1399 3451\\n2760 2018\\n4469 2343\\n1618 7872\\n8142 7277\\n9405 8692\\n1868 5867\\n9320 1866\\n595 6217\\n1339 6970\\n9442 5275\\n8569 7708\\n7641 2490\\n6706 1357\\n4432 3272\\n867 4068\\n7304 5323\\n103 8670\\n8616 7859\\n1353 4200\\n5541 4586\\n4001 4867\\n2424 8197\\n4235 7839\\n8837 6436\\n9088 3617\\n6606 7686\\n3185 3207\\n112 4618\\n7868 8649\\n4847 518\\n8489 3020\\n8666 8938\\n6056 3205\\n8586 1404\\n4958 1452\\n8519 5218\\n199 9995\\n6371 2528\\n5852 2297\\n1671 6905\\n1008 4664\\n3716 1866\\n1111 2850\\n3517 238\\n1547 6537\\n7877 5639\\n9764 7000\\n6765 5643\\n4627 6165\\n1762 5349\\n7127 3088\\n4072 9759\\n9135 6697\\n724 2471\\n8293 359\\n7014 7710\\n279 7107\\n8689 7985\\n1644 9802\\n8194 2439\\n4886 2681\\n3569 6648\\n3046 5652\\n1990 5643\\n2380 1218\\n530 626\\n3358 5104\\n6643 2433\\n4155 5070\\n1351 4040\\n7079 9083\\n1655 6991\\n1065 4744\\n7719 6970\\n1059 3562\\n2845 8607\\n4392 7207\\n8841 7133\\n3747 5710\\n8080 3679\\n1881 4595\\n8551 2968\\n5480 798\\n6297 7429\\n3190 504\\n7615 7631\\n9791 5473\\n6102 7965\\n341 1451\\n6328 789\\n5099 3112\\n6565 7154\\n7341 7208\\n8288 8921\\n1625 7861\\n6338 1828\\n6760 2075\\n3970 6448\\n6076 9784\\n8275 6065\\n1507 9056\\n5882 405\\n9334 5987\\n7643 1502\\n9619 3063\\n3420 9398\\n7147 1781\\n9782 6014\\n3229 9014\\n8401 1960\\n8573 6994\\n3920 2700\\n1074 8266\\n8624 2337\\n6123 1523\\n2179 2216\\n9763 4168\\n8744 7492\\n8282 4981\\n1873 2176\\n917 9855\\n9206 5217\\n9336 5769\\n5192 8471\\n7244 4512\\n139 942\\n4652 7105\\n8010 3911\\n1740 2773\\n9027 4807\\n9110 967\\n7945 491\\n5566 4493\\n6562 1277\\n714 4328\\n325 4378\\n2715 9102\\n5203 5534\\n2224 6890\\n8206 4987\\n8981 3605\\n1747 8683\\n4535 2515\\n8384 7441\\n3772 793\\n5511 3187\\n5197 5818\\n9277 6818\\n1232 7001\\n3150 1639\\n1656 9377\\n8666 9405\\n1129 4462\\n6041 3818\\n5160 5120\\n6451 4949\\n2925 3246\\n169 5031\\n857 7260\\n278 8108\\n7734 7159\\n1579 8317\\n5301 703\\n5256 9157\\n2500 5818\\n7378 5616\\n7780 9375\\n4797 1776\\n2610 9648\\n247 1072\\n8594 6865\\n5666 378\\n1695 4297\\n6044 1856\\n2040 4739\\n1757 6563\\n2581 8021\\n2501 6408\\n5622 1488\\n921 4425\\n2611 2374\\n7286 2087\\n1936 1706\\n2263 1296\\n2390 2007\\n763 593\\n5421 800\\n2258 5298\\n6081 7035\\n3873 2502\\n5726 2362\\n2071 7101\\n4577 2975\\n7070 8147\\n2137 9749\\n4774 5824\\n312 7361\\n2836 1826\\n6466 3416\\n3136 2620\\n8267 8027\\n9270 8462\\n9760 1429\\n7225 9304\\n6309 2767\\n1115 591\\n7606 319\\n7191 5874\\n1924 102\\n7886 7070\\n4412 4413\\n2463 8550\\n1240 611\\n6282 2838\\n4599 4976\\n9513 4102\\n6175 5544\\n2855 4132\\n4693 3240\\n1364 3743\\n8383 5316\\n6710 7789\\n7319 6236\\n1005 1525\\n2415 6913\\n2798 9815\\n8761 130\\n6121 8632\\n6182 1382\\n1732 6218\\n6722 6583\\n9436 7157\\n7799 1977\\n7457 7373\\n2975 2900\\n4022 4669\\n2821 7790\\n2846 3670\\n6898 9906\\n6467 2352\\n456 6889\\n7605 429\\n8740 1365\\n2786 2882\\n6017 9763\\n9767 7726\\n3132 3911\\n6843 6955\\n9068 24\\n6603 4188\\n1916 6652\\n322 5347\\n8711 5767\\n1721 7418\\n7362 5028\\n4319 1140\\n2795 7558\\n931 1236\\n3439 1530\\n6199 2946\\n4839 1387\\n7230 9982\\n8276 5215\\n1910 3308\\n6239 4340\\n1317 8536\\n6472 5472\\n5133 6842\\n7858 5663\\n3252 7594\\n7957 4217\\n2818 9996\\n6200 868\\n1453 8843\\n151 2150\\n9868 6134\\n6021 1664\\n7474 5041\\n5727 5266\\n1178 8013\\n3311 8775\\n7039 894\\n8454 4729\\n7140 8221\\n2644 6109\\n6400 3743\\n8955 5537\\n2441 8185\\n6369 4360\\n456 2932\\n7581 142\\n2400 5449\\n3562 8951\\n3223 8385\\n8507 2083\\n1533 58\\n7614 3645\\n3960 2545\\n3807 7877\\n2920 5996\\n7937 1191\\n5636 4191\\n7804 5355\\n3775 5997\\n267 1008\\n958 4619\\n4236 3461\\n5032 9078\\n3297 8966\\n1420 246\\n8493 8057\\n8539 4039\\n234 3746\\n9704 7405\\n1787 824\\n8615 6129\\n1061 2857\\n1126 1530\\n1346 2254\\n7733 1451\\n8230 7528\\n9782 9191\\n8099 1870\\n9049 3977\\n7634 3918\\n908 1742\\n6019 697\\n6917 4216\\n6932 9222\\n50 7887\\n1059 5590\\n8175 2979\\n5540 2724\\n432 3923\\n3761 6766\\n1507 2298\\n4991 1622\\n7077 9270\\n5828 5528\\n380 5482\\n6927 7178\\n670 7030\\n2144 6500\\n5980 9961\\n6843 5599\\n6821 8521\\n2338 2971\\n4087 5799\\n2966 1436\\n5193 5275\\n3009 489\\n809 727\\n7306 6005\\n5840 5422\\n9027 4717\\n9219 296\\n379 844\\n3669 9876\\n711 7944\\n8292 8629\\n248 5541\\n6984 7779\\n1991 8367\\n3689 683\\n8858 5217\\n7963 4091\\n5249 2077\\n5573 2066\\n4252 6508\\n1283 166\\n5035 2618\\n8544 37\\n1551 285\\n1443 4316\\n8525 4394\\n1165 8680\\n273 4607\\n8061 1083\\n4741 8406\\n951 4758\\n4960 3900\\n5399 507\\n6859 6581\\n1370 988\\n212 2981\\n2310 6685\\n1633 9679\\n9729 1152\\n4239 3817\\n2146 6789\\n8873 7938\\n9670 9852\\n9220 6169\\n1144 1609\\n3544 7088\\n574 2118\\n7863 981\\n9149 2467\\n2352 4997\\n1382 1721\\n3959 7463\\n4173 3677\\n2088 7613\\n3249 6362\\n4184 8055\\n2166 615\\n6261 6069\\n1543 2337\\n648 1810\\n680 8990\\n4838 6260\\n3636 5690\\n247 6539\\n8223 7973\\n3244 9085\\n7191 548\\n8075 3818\\n3672 8416\\n9583 3772\\n831\\n1150 4761\\n9796 3124\\n1559 8764\\n1456 7702\\n7655 2528\\n6291 38\\n5742 9217\\n9080 4088\\n5307 9789\\n9737 7285\\n2326 1436\\n9925 2779\\n8727 5561\\n3878 6099\\n3184 5954\\n8585 3743\\n9670 835\\n2532 7697\\n2601 1932\\n8169 5296\\n942 18\\n793 7686\\n8468 4945\\n4712 108\\n304 6232\\n2379 5446\\n8299 4916\\n1508 233\\n6974 2908\\n2524 6014\\n8110 9034\\n3839 3017\\n2609 9826\\n2110 9578\\n7717 9880\\n2396 8485\\n7160 6566\\n831 2120\\n4207 5793\\n4893 2339\\n1128 4071\\n8545 1238\\n5468 3674\\n6530 9457\\n3793 6248\\n5508 1911\\n634 1620\\n3888 6490\\n6046 5818\\n8181 3417\\n9053 6783\\n2214 148\\n9455 3319\\n4767 4933\\n6155 9340\\n7131 1454\\n6190 637\\n3569 1352\\n3105 5983\\n9811 9254\\n5731 9778\\n2777 8081\\n8781 5047\\n4595 5470\\n5078 5313\\n7895 616\\n8227 2325\\n6939 2386\\n6766 42\\n7538 4112\\n2577 8217\\n4488 200\\n2140 5751\\n9973 4292\\n4974 6964\\n2066 8659\\n8454 3009\\n6273 5334\\n7561 5874\\n6933 9374\\n5587 4569\\n8520 681\\n3388 7774\\n5931 5384\\n7273 9096\\n5126 967\\n7295 6306\\n1196 1081\\n3510 7445\\n345 45\\n7977 9779\\n4009 3212\\n335 5711\\n9407 2283\\n7265 1520\\n2491 4270\\n8260 3810\\n5536 9895\\n6576 1662\\n5415 2061\\n2408 7042\\n54 653\\n4785 3445\\n2326 3381\\n8191 8468\\n4884 2776\\n994 8275\\n9719 7182\\n6009 9538\\n4837 4446\\n437 1682\\n9600 8106\\n6059 9674\\n3003 62\\n2997 4078\\n4204 1716\\n6092 5548\\n3855 3647\\n6249 4823\\n1749 3382\\n8922 5039\\n7879 9080\\n2961 8150\\n3704 3926\\n1379 9815\\n9411 4016\\n3745 2136\\n6348 415\\n5437 5467\\n6819 5385\\n5016 7972\\n7951 7285\\n6895 7289\\n6917 9512\\n8687 6401\\n8090 7834\\n9426 2734\\n4001 1965\\n684 1378\\n7260 7747\\n780 8876\\n7397 6052\\n7373 4505\\n4792 8338\\n6869 9302\\n1547 2965\\n4106 5772\\n5972 6334\\n7719 7363\\n2230 9670\\n1245 1928\\n4392 2189\\n2021 4272\\n7228 7109\\n3671 7634\\n7491 6393\\n112 1258\\n6093 2903\\n938 426\\n4754 7174\\n6248 7207\\n1558 849\\n4644 5318\\n6961 4290\\n6550 1474\\n8043 3059\\n9293 8326\\n7658 7981\\n6684 5199\\n7122 8395\\n9583 5753\\n9677 9164\\n5654 1555\\n9322 6125\\n3596 1605\\n6445 5335\\n2166 1449\\n6255 5127\\n7270 6806\\n5526 5765\\n714 7865\\n9825 5595\\n9362 5864\\n6615 9062\\n4944 559\\n293 1998\\n218 8539\\n4477 2434\\n661 8270\\n1102 8935\\n941 9713\\n6543 5984\\n8168 7503\\n7117 3685\\n7311 6699\\n7190 9624\\n8047 7424\\n6946 1577\\n6338 185\\n316 5136\\n4616 8428\\n4493 3225\\n360 5162\\n3845 3275\\n9670 55\\n1984 9530\\n9795 4376\\n4012 8399\\n7354 1508\\n7808 5943\\n2461 1192\\n3648 8241\\n6341 182\\n7075 895\\n812 9116\\n5542 312\\n8988 6675\\n9019 741\\n711 277\\n7214 2038\\n7319 6064\\n4221 4025\\n9349 4465\\n4745 7095\\n2808 6957\\n9459 4708\\n9704 1193\\n3214 5319\\n3792 9003\\n9307 4227\\n5481 182\\n9917 8119\\n6700 8961\\n4226 2587\\n2489 7529\\n7364 7871\\n7694 3443\\n6680 8526\\n232 4430\\n1100 2503\\n8165 2973\\n2847 1957\\n8000 2144\\n4935 424\\n3205 6013\\n8051 4840\\n9275 1916\\n2268 2423\\n4032 2318\\n1967 5043\\n9599 3161\\n5875 6066\\n1501 3795\\n6134 3743\\n9440 6727\\n1406 5799\\n7693 6164\\n4857 3702\\n6109 9040\\n4417 491\\n4474 700\\n7252 9407\\n6929 9420\\n1137 1826\\n4892 1427\\n2401 7716\\n5188 2164\\n3999 5591\\n2120 9717\\n2963 2819\\n2871 4691\\n5916 2230\\n7901 8349\\n8062 6703\\n9080 4880\\n1195 6472\\n2533 6076\\n9719 5518\\n3035 6776\\n8815 5943\\n6794 5528\\n6786 9191\\n4335 5919\\n3532 4629\\n6573 1809\\n6888 6495\\n8642 1553\\n8707 6645\\n1045 7487\\n7195 6095\\n226 354\\n5414 2979\\n2079 9009\\n5225 517\\n4004 3058\\n882 9911\\n9150 3633\\n4765 4250\\n6970 4249\\n7657 3181\\n4873 4756\\n3754 1346\\n9381 6441\\n1198 7266\\n2374 3027\\n9001 8177\\n597 8975\\n4996 7514\\n3578 5458\\n6338 589\\n5365 5616\\n2117 8954\\n8665 6173\\n2621 2497\\n9759 4610\\n9711 5951\\n64 9699\\n7257 3928\\n4423 8577\\n6911 357\\n170 7175\\n6717 1662\\n5099 1325\\n389 8379\\n9477 5096\\n3896 7486\\n6693 5712\\n6060 8604\\n1345 5051\\n9118 7622\\n7950 8516\\n3112 4472\\n219 6848\\n1925 9248\\n3148 837\\n1182 5100\\n5876 1057\\n7839 7010\\n5837 4357\\n218 7343\\n3417 6171\\n2748 5474\\n8750 6565\\n3851 8999\\n5643 9216\\n3128 8616\\n1381 4532\\n4744 135\\n1102 6248\\n8348 6300\\n2965 4612\\n4541 7845\\n688 4502\\n9489 7431\\n140 6961\\n8824 942\\n7108 9238\\n7001 4411\\n1786 7578\\n6122 3048\\n5085 5272\\n5164 5031\\n4968 8429\\n8349 3292\\n6797 548\\n6359 3744\\n2966 2057\\n7217 6875\\n1492 6221\\n7036 678\\n9378 1356\\n9297 3845\\n589 3077\\n9014 8478\\n2730 6084\\n9220 1015\\n3136 9135\\n5435 7805\\n8053 7898\\n3707 155\\n631 5253\\n2463 2556\\n430 4230\\n2872 7535\\n1394 952\\n1368 8741\\n8457 8227\\n1849 6691\\n907 7529\\n875 8790\\n1307 7178\\n3196 9508\\n328 2215\\n372 5789\\n8247 7303\\n3741 7247\\n1992 2409\\n1834 3244\\n8441 4926\\n4468 2319\\n483 1071\\n32 4039\\n3371 5347\\n7777 9951\\n3631 9757\\n340 4925\\n2755 9491\\n4388 8054\\n3209 9945\\n8241 7311\\n1484 5399\\n7264 3306\\n6427 1884\\n5163 4864\\n1015 3003\\n1942 8210\\n7187 4582\\n5164 7748\\n2983 6343\\n4893 7157\\n9735 3180\\n104 7201\\n8507 2368\\n8592 9547\\n7741 4646\\n2322 7116\\n6150 3461\\n4989 7279\\n2173 2896\\n2658 3509\\n2348 1309\\n6521 7842\\n1386 5129\\n3503 2660\\n7480 1460\\n8661 6227\\n6480 3678\\n2431 8697\\n1508 236\\n4894 3016\\n1449 940\\n9307 2664\\n5445 6366\\n7008 5910\\n2994 7202\\n5976 1375\\n154 5670\\n7589 7746\\n6368 5137\\n7538 847\\n9891 1433\\n4663 6936\\n2090 463\\n9547 9566\\n8049 5760\\n7105 3557\\n8452 3933\\n8543 3509\\n3921 5838\\n256 2429\\n7224 560\\n1379 9411\\n7904 4107\\n2843 6571\\n8243 7968\\n1604 1769\\n3267 4117\\n2523 1453\\n433 4744\\n176 7967\\n8882 7895\\n8086 1136\\n2343 9447\\n7286 9530\\n1317 6281\\n358 7746\\n9830 9041\\n896 1686\\n6924 4726\\n2125 1674\\n6712 6672\\n5036 2317\\n5762 1567\\n174 6067\\n6004 4372\\n3219 5973\\n8021 7111\\n5816 3194\\n2166 5547\\n656 5214\\n8078 3490\\n6640 1745\\n574 9158\\n2887 5480\\n5093 6049\\n5534 3379\\n7305 4093\\n4903 764\\n261 8317\\n3343 2451\\n679 3465\\n6906 7493\\n5821 3489\\n4099 8808\\n6162 3144\\n3116 3430\\n3895 9101\\n8126 9705\\n442 5051\\n6204 7851\\n3543 4889\\n1743 1922\\n8273 3832\\n4435 5232\\n9786 8653\\n3696 8143\\n1577 7226\\n4166 9036\\n5177 1962\\n1855 5603\\n7526 2724\\n5068 9065\\n230 6397\\n5258 641\\n5840 2330\\n7223 4936\\n3104 4725\\n4268 3020\\n4841 7948\\n7536 9642\\n2586 2504\\n3878 2403\\n2566 8389\\n4937 4668\\n621 7322\\n2482 6154\\n1111 9093\\n3721 3717\\n4102 2103\\n2532 7946\\n9604 3063\\n9211 2758\\n4264 8482\\n3386 3565\\n5950 5480\\n670 9000\\n2212 696\\n1193 7166\\n4057 8633\\n8040 1002\\n4524 332\\n1548 8279\\n3898 8639\\n2307 3537\\n6964 4951\\n8194 8293\\n5471 1806\\n8497 5890\\n921 2143\\n4375 9608\\n5315 8030\\n4474 6553\\n1076 4195\\n4922 4424\\n6109 7142\\n6199 437\\n8194 6401\\n2682 68\\n2293 9138\\n4253 7756\\n2660 7614\\n9354 260\\n243 5815\\n9986 2014\\n5505 2885\\n6130 1016\\n3936 9717\\n5942 8916\\n9492 7334\\n9373 1835\\n7047 6046\\n2061 2270\\n8528 5986\\n2620 7870\\n4650 6323\\n3904 7388\\n483 3063\\n9932 7027\\n6704 9464\\n9993 2239\\n2034 3252\\n8463 3700\\n31 9065\\n4028 5068\\n8655 5798\\n4046 227\\n9968 3640\\n7920 627\\n1295 7480\\n1030 2220\\n7293 9616\\n8113 3290\\n2953 5482\\n5658 9761\\n4056 6187\\n5640 7164\\n8350 9981\\n7313 8665\\n9168 7215\\n4039 8976\\n5322 2624\\n59 8383\\n3713 810\\n7030 7532\\n3222 3749\\n7039 799\\n49 2876\\n7277 7039\\n8282 2661\\n8028 7671\\n1568 7283\\n3433 3320\\n7337 3649\\n5073 6731\\n4612 21\\n5251 6338\\n2197 4622\\n595 8887\\n8752 5927\\n8662 3134\\n7363 1897\\n9655 2967\\n2610 8154\\n3284 8530\\n4465 8140\\n4329 9575\\n4977 8714\\n7962 3866\\n7574 583\\n3991 1066\\n5687 6112\\n5834 9598\\n1070 8132\\n7501 6949\\n9267 9783\\n5647 5147\\n1168 9519\\n6789 2627\\n7351 564\\n6019 7819\\n6630 7209\\n579 8574\\n5480 9479\\n843 6779\\n1610 5627\\n6530 1288\\n6734 3730\\n1333 9229\\n594 7764\\n6734 2925\\n1277 3291\\n6847 9068\\n9617 3564\\n5314 4893\\n9083 5252\\n4896 1073\\n5877 1235\\n8793 2535\\n854 9895\\n4178 6187\\n9307 3807\\n4538 7173\\n8557 6777\\n3149 5557\\n4127 4217\\n1778 5714\\n4817 3542\\n3653 8708\\n323 6663\\n9320 2245\\n9467 5950\\n9502 3004\\n8923 1383\\n3464 1898\\n1114 7946\\n4479 1183\\n3709 7301\\n9359 5974\\n4642 9477\\n2705 9821\\n188 9577\\n5973 7482\\n7191 7542\\n3441 3569\\n4086 1063\\n9076 9405\\n3677 1217\\n9800 4286\\n9800 9296\\n8972 8460\\n7898 7900\\n9000 1829\\n7248 6224\\n5454 1433\\n3892 1952\\n4425 4208\\n8238 2583\\n915 3514\\n2858 7778\\n8515 6327\\n3865 6648\\n2132 6654\\n806 1767\\n243 9682\\n3147 4195\\n8574 5105\\n3049 8566\\n7282 711\\n2336 8008\\n6553 8409\\n6911 55\\n4453 7718\\n9145 8247\\n9488 1962\\n9749 8452\\n7707 1187\\n1967 3825\\n6558 9223\\n785 6471\\n5596 485\\n7379 9431\\n9637 7508\\n3010 7387\\n655 832\\n1329 5549\\n2537 5226\\n2202 3234\\n4170 2582\\n6108 3664\\n7974 8527\\n1173 3086\\n8093 136\\n8086 8488\\n9677 3959\\n1758 8643\\n2507 1165\\n9513 9740\\n8205 7902\\n3873 3142\\n3890 2479\\n5075 6114\\n4908 2299\\n6868 6884\\n9279 9474\\n9052 6970\\n9521 8460\\n3459 1049\\n5829 1214\\n2829 5090\\n5096 7664\\n4126 5667\\n5455 9707\\n3666 2767\\n7005 6570\\n318 6075\\n523 8353\\n604 822\\n9463 4290\\n1199 4208\\n6237 603\\n9116 1341\\n8399 3255\\n5233 4776\\n5387 7737\\n5768 1493\\n2795 1050\\n5241 1369\\n2576 1416\\n3319 9090\\n1405 3695\\n2931 3474\\n8222 9642\\n4693 6819\\n9237 9061\\n173 2829\\n9872 5327\\n8196 6932\\n5914 2342\\n6460 5723\\n1080 1433\\n5626 9717\\n2629 465\\n1392 5910\\n6647 7812\\n3195 7453\\n1469 1075\\n1431 334\\n5349 110\\n5369 4301\\n1958 4281\\n1963 2294\\n8727 8103\\n7823 1792\\n9421 5202\\n6259 1675\\n7763 3031\\n2654 5875\\n4055 2462\\n7681 8388\\n6568 7585\\n4419 5502\\n9314 5825\\n6329 9694\\n1848 6715\\n2234 2198\\n9887 2194\\n3311 7023\\n4994 69\\n8337 5758\\n6745 3386\\n1613 2770\\n4173 5262\\n8563 3393\\n9882 3568\\n9238 9901\\n7822 9667\\n2057 288\\n5307 9841\\n6969 6522\\n6904 8804\\n9120 2121\\n278\\n3640 5595\\n5241 1628\\n2889 4357\\n8030 9749\\n2735 9068\\n8300 8690\\n62 864\\n115 7902\\n9251 2512\\n2013 465\\n567 178\\n8878 6310\\n3306 2073\\n9405 2933\\n455 9964\\n6504 9508\\n8987 8878\\n5084 4111\\n5731 5663\\n3580 2655\\n2523 921\\n7812 1429\\n9509 487\\n406 7433\\n5971 1258\\n4613 113\\n7138 9026\\n4926 1964\\n8668 8692\\n6965 9383\\n4131 9441\\n2510 487\\n2233 3521\\n1640 4654\\n2500 8123\\n4032 9155\\n278 6564\\n4226 3584\\n7879 5899\\n604 6446\\n8746 159\\n5472 2454\\n4745 8616\\n2146 406\\n9956 6407\\n1152 3448\\n5151 286\\n5663 4662\\n8129 649\\n2412 2337\\n6096 5674\\n6810 1872\\n498 282\\n3505 8720\\n5098 5505\\n7188 207\\n5611 4214\\n6911 6558\\n623 4977\\n6486 4465\\n178 3267\\n1287 5667\\n2567 8340\\n8718 4256\\n1791 7770\\n6343 3195\\n4060 4934\\n9166 8030\\n6886 8743\\n3679 4157\\n5444 7828\\n7365 933\\n1753 382\\n372 4448\\n1113 3371\\n9701 9307\\n8378 3444\\n2218 178\\n6118 2086\\n3560 490\\n1884 4876\\n7806 9239\\n8866 9300\\n9899 5084\\n6747 4156\\n7721 9870\\n5563 2684\\n5250 1432\\n5535 1729\\n2243 8845\\n4628 2537\\n6690 8613\\n1042 5704\\n5449 4437\\n4960 4289\\n960 7793\\n7240 7705\\n7898 2500\\n1940 2013\\n9692 8237\\n4978 223\\n2921 9282\\n2200 2678\\n2789 1597\\n9033 845\\n7206 5694\\n2980 3997\\n1315 4470\\n3708 6715\\n1253 210\\n8990 8972\\n6452 6609\\n9717 768\\n7345 6799\\n6254 8430\\n6001 8473\\n3878 5141\\n5607 1169\\n9202 5538\\n9217 9632\\n5611 3069\\n165 1705\\n9248 1446\\n195 7874\\n8915 9908\\n7357 5737\\n8186 2228\\n3604 7670\\n2381 6612\\n5482 3429\\n1981 8043\\n8186 9251\\n8842 747\\n4579 1836\\n7614 165\\n5991 1139\\n4733 372\\n6472 8112\\n7719 5616\\n7263 1042\\n7173 8007\\n9842 7440\\n7000 5225\\n7376 6569\\n3113 8565\\n9714 6508\\n5657 3481\\n7307 4751\\n4532 435\\n3856 1169\\n5896 4631\\n1633 5773\\n5906 8871\\n4550 2749\\n8572 6082\\n9940 8209\\n1981 8709\\n3547 9592\\n7512 5519\\n2474 9664\\n3760 8722\\n9587 2482\\n1204 7190\\n7441 1201\\n5442 3254\\n2047 726\\n7784 5711\\n3537 8275\\n4858 3466\\n9006 6364\\n6912 2128\\n2076 5330\\n1916 5216\\n2435 2998\\n8107 5965\\n3006 2305\\n9593 6702\\n9462 6627\\n2742 9508\\n7636 4838\\n8988 466\\n5103 8111\\n4881 1917\\n5717 7773\\n9989 4533\\n9681 5698\\n4007 5269\\n8703 905\\n4030 1108\\n4554 507\\n1249 4863\\n5684 3653\\n5390 2837\\n7553 4150\\n2852 2382\\n5003 4343\\n5783 9362\\n9996 7372\\n4905 8303\\n255 1062\\n1712 7063\\n4570 9571\\n7677 8813\\n2152 2600\\n9528 8578\\n4976 7400\\n2188 8489\\n7605 2858\\n6624 4241\\n1547 5225\\n9945 9625\\n8444 5359\\n6950 5354\\n5869 5277\\n1004 9688\\n3953 2372\\n1588 9990\\n6809 248\\n3082 3883\\n4574 3163\\n4476 6925\\n6663 8527\\n7172 9234\\n8889 6762\\n6294 8390\\n4057 6267\\n8621 5951\\n5550 6657\\n839 6466\\n6355 1967\\n2591 2306\\n2150 9501\\n7919 3298\\n6326 8381\\n2485 172\\n4739 5076\\n3971 8019\\n7246 23\\n6968 8434\\n8082 3938\\n5955 4668\\n5136 7922\\n9024 6734\\n9162 7796\\n9447 1915\\n1682 4797\\n9073 1144\\n9884 7867\\n5741 1730\\n1686 8587\\n8943 5659\\n2339 7277\\n8040 9814\\n3817 1599\\n609 9854\\n6039 1681\\n6446 2668\\n4163 4007\\n1261 7092\\n9391 5355\\n434 3053\\n8435 3483\\n2293 1521\\n8898 3668\\n5696 4506\\n1893 9968\\n7010 2044\\n456 1040\\n9558 3185\\n3401 3834\\n8190 5636\\n8317 6133\\n299 8477\\n4434 1204\\n1259 6513\\n9710 3719\\n3106 469\\n941 3101\\n785\\n2932 8546\\n6068 2657\\n560 8856\\n4573 3142\\n7205 5344\\n6698 527\\n3573 3341\\n9878 5341\\n4620 7132\\n6758 4387\\n6772 2083\\n8668 9915\\n9934 5196\\n130 4017\\n7516 6361\\n6719 8806\\n994 4702\\n2963 6547\\n9901 6939\\n3177 6389\\n9013 9391\\n6060 9616\\n2621 4876\\n6836 256\\n5608 450\\n322 1114\\n3909 3528\\n3305 2966\\n2423 306\\n565 3267\\n505 8312\\n8133 4075\\n6661 4402\\n373 5488\\n676 1521\\n315 8238\\n6478 405\\n375 5910\\n1488 4814\\n1530 203\\n3152 584\\n6935 1749\\n1648 1381\\n9117 7882\\n1674 6435\\n4026 6238\\n3520 8992\\n5316 808\\n9311 2536\\n4104 3682\\n3446 509\\n4703 1292\\n7403 8412\\n6008 4935\\n7828 5624\\n2485 4592\\n2789 9034\\n6159 2151\\n8242 284\\n9272 1323\\n1742 292\\n2095 8274\\n4106 6038\\n2178 4158\\n1256 1174\\n3204 6096\\n4618 7440\\n2113 6625\\n702 968\\n9194 835\\n7544 7470\\n3215 5278\\n2735 5182\\n3149 1409\\n8164 3306\\n2021 9117\\n5497 9663\\n1403 7640\\n3794 7663\\n5179 1043\\n6966 4586\\n4414 9127\\n8672 6850\\n7994 894\\n7959 7657\\n787 5490\\n7709 8188\\n8392 9315\\n8734 6412\\n3405 9270\\n8499 9091\\n2657 486\\n6230 1101\\n1771 6891\\n1798 8555\\n6941 6381\\n9655 7490\\n4381 1137\\n4181 8108\\n7538 6787\\n995 5422\\n9194 7412\\n8295 5645\\n7475 9882\\n9352 4825\\n5992 138\\n3690 7029\\n7561 7047\\n6581 4263\\n5311 6121\\n9023 7386\\n488 4215\\n4077 3196\\n254 5316\\n3722 1504\\n7596 195\\n458 8225\\n9051 9386\\n4408 9767\\n7072 1625\\n8380 8882\\n5823 278\\n1826 6677\\n4796 6722\\n3195 1351\\n6262 2738\\n8834 1654\\n17 7651\\n5135 3415\\n1731 8946\\n5123 9539\\n9509 3585\\n8265 4686\\n1933 1691\\n1112 8524\\n6943 4500\\n6178 9202\\n2792 8053\\n8956 5332\\n8929 5810\\n1335 802\\n204 94\\n1789 1506\\n1713 3357\\n6278 6248\\n4305 1680\\n7123 2774\\n2814 4659\\n921 9861\\n2339 6598\\n4246 6383\\n8241 8910\\n4747 5354\\n9505 9817\\n4826 6518\\n7466 956\\n500 9127\\n8062 9893\\n9901 4134\\n5799 745\\n4892 5740\\n1759 8030\\n1640 4052\\n6072 725\\n519 5981\\n6026 3103\\n4697 4307\\n2175 9874\\n3446 7796\\n8949 2449\\n2103 9235\\n3501 9958\\n3152 9198\\n6270 2072\\n2281 3904\\n9371 3012\\n505 9357\\n7020 7231\\n1994 1618\\n7787 7142\\n4777 6553\\n2773 2922\\n9675 5203\\n3581 7561\\n4667 6790\\n7080 5039\\n7320 6908\\n3524 9186\\n2062 9254\\n4410 8146\\n2000 8349\\n4694 9677\\n382 6781\\n2853 5465\\n4698 2495\\n7626 5703\\n8043 8713\\n4811 4060\\n6843 2969\\n9865 6642\\n9028 5568\\n7371 1955\\n4019 1618\\n2979 6738\\n2447 894\\n9636 197\\n4329 6515\\n1845 4492\\n3293 8398\\n1575 8188\\n3629 520\\n1190 8377\\n8271 6611\\n4866 5114\\n9549 8529\\n5649 3936\\n8078 5361\\n5392 7978\\n2189 25\\n3048 2337\\n2773 2008\\n6444 9591\\n9944 9953\\n268 1094\\n3165 6931\\n1868 6384\\n3636 2945\\n4770 4701\\n170 8121\\n2429 755\\n2213 294\\n7606 1222\\n3098 3273\\n4473 6514\\n8520 2627\\n6556 9797\\n5035 9438\\n7808 3055\\n7378 9094\\n7820 6597\\n4277 5990\\n4961 1467\\n357 2529\\n1664 1065\\n6564 2398\\n7388 5481\\n7391 9383\\n8978 5741\\n6804 5182\\n4072 9872\\n3776 2606\\n1633 1324\\n7862 422\\n9999 9255\\n9468 6866\\n9682 1034\\n5504 1873\\n7359 6789\\n809 1845\\n5306 5214\\n9993 5817\\n6315 4639\\n1015 4451\\n4584 2302\\n5479 8109\\n772 1154\\n6965 5604\\n5465 3226\\n6850 371\\n238 5752\\n3660 1030\\n2265 8151\\n4720 2662\\n8875 7257\\n6338 3808\\n610 5152\\n3514 8079\\n6376 9759\\n5447 5748\\n9116 6255\\n3984 9576\\n3620 7990\\n372 4811\\n6652 9473\\n8756 6337\\n2532 2576\\n943 2538\\n7584 3572\\n5866 7832\\n6759 1804\\n322 2450\\n9709 564\\n6190 4632\\n87 3291\\n477 2487\\n6181 28\\n687 3270\\n8138 1602\\n8083 3289\\n9583 7595\\n1238 8695\\n943 665\\n6508 5319\\n9916 4840\\n6958 9395\\n3257 6062\\n6761 8231\\n8046 9926\\n4327 567\\n4385 1872\\n9161 6880\\n2861 9280\\n9872 4202\\n4032 2596\\n9227 1606\\n3543 7986\\n5748 475\\n220 9133\\n3338 5490\\n5724 711\\n8797 3567\\n9964 4205\\n2383 9504\\n9454 8641\\n6746 9430\\n7994 1420\\n7457 9561\\n9624 7277\\n6632 8643\\n8277 5625\\n944 9161\\n7080 2511\\n5477 6952\\n5141 2734\\n6961 9681\\n744 7655\\n8853 353\\n5045 8683\\n7134 1599\\n4345 6415\\n4544 3351\\n6815 2611\\n9179 5230\\n8865 672\\n4657 9603\\n2478 8812\\n4047 9938\\n668 7524\\n7094 4539\\n3359 2868\\n1728 4081\\n2570 4596\\n5810 3783\\n1067 6208\\n3653 8551\\n231 5999\\n9393 4293\\n7385 4399\\n1730 6261\\n5770 9723\\n1740 7151\\n893 6788\\n4504 6997\\n6213 1522\\n5903 1115\\n9877 6533\\n9224 2389\\n7260 1622\\n9544 2286\\n7176 7829\\n6247 9126\\n4126 262\\n4794 5819\\n9147 6468\\n8181 1036\\n4651 4647\\n8526 4078\\n9447 6529\\n4673 9170\\n9795 642\\n5419 1043\\n1497 1821\\n2813 964\\n9404 8481\\n8175 4228\\n4987 852\\n3307 3672\\n3204 4837\\n4508 4580\\n1163 2134\\n1184 9190\\n6595 2649\\n6628 7336\\n8019 8994\\n3276 4089\\n8954 2356\\n2806 3562\\n315 6373\\n9521 7503\\n7011 899\\n192 7653\\n2386 4016\\n6808 8503\\n6851 6441\\n9660 1413\\n6927 4162\\n6455 8282\\n3399 48\\n7559 9673\\n9472 7175\\n8555 7757\\n6948 518\\n9519 736\\n2922 9099\\n4072 9703\\n262 895\\n3104 9454\\n6448 3369\\n7303 6856\\n3681 793\\n3282 7984\\n6758 9675\\n8347 7730\\n4999 8328\\n582 3462\\n8915 4994\\n1713 3178\\n4529 2750\\n7794 1956\\n8337 5804\\n2484 9930\\n1446 1954\\n4858 1369\\n8192 1102\\n8725 8577\\n8752 2721\\n7041 6827\\n813 1088\\n1909 7433\\n534 6474\\n4092 1220\\n5090 3501\\n3967 9092\\n7895 4788\\n3505 5528\\n6627 8545\\n398 6267\\n2910 5510\\n1293 3075\\n4996 9956\\n6753 185\\n4821 494\\n2510 7677\\n3112 8417\\n4003 6459\\n6879 7670\\n5088 8438\\n4457 2682\\n2802 7477\\n391 5106\\n6452 5386\\n4087 1287\\n1595 3483\\n9369 559\\n9214 5587\\n4200 2357\\n2127 4736\\n1081 7514\\n6969 5860\\n9648 5737\\n4227 4535\\n7616 8124\\n6931 1921\\n6937 4228\\n9909 4023\\n3980 8435\\n3517 328\\n3439 286\\n1708 4047\\n1404 203\\n4260 2109\\n9067 8159\\n6591 1799\\n494 9264\\n6663 6852\\n5194 1006\\n1949 7532\\n9662 5848\\n2581 9723\\n6845 6482\\n148 6372\\n1194 9685\\n2258 4407\\n2430 9752\\n7081 2020\\n900 8549\\n1738 6748\\n6107 6822\\n5353 9522\\n6692 3265\\n5262 2458\\n50 5969\\n101 1902\\n748 3687\\n4301 7713\\n6118 9701\\n6172 6895\\n964 6565\\n2365 1571\\n6792 6276\\n3546 4666\\n3310 1009\\n9531 1585\\n5095 1736\\n6363 1315\\n9933 6251\\n1526 9951\\n4517 5378\\n825 3325\\n9261 466\\n6475 8890\\n164 3952\\n6637 4456\\n3313 678\\n2143 8137\\n3478 2906\\n5569 6280\\n9543 566\\n6553 2400\\n8839 780\\n5337 7844\\n7780 7791\\n8225 781\\n2778 2429\\n7448 6393\\n7349 2701\\n3214 5623\\n1514 8886\\n2989 1335\\n9704 1374\\n579 6200\\n7333 8311\\n7513 341\\n9281 6540\\n9112 640\\n8759 8047\\n1305 3126\\n3354 8776\\n8406 1128\\n89 6655\\n5011 4985\\n4424 3563\\n2786 4001\\n9661 1399\\n274 5850\\n296 6927\\n854 413\\n9738 3251\\n5135 7426\\n3613 8067\\n1634 4346\\n1220 8288\\n9634 4315\\n2331 4565\\n4656 453\\n2938 9420\\n9546 2092\\n4023 7409\\n9340 5449\\n6364 7005\\n2363 5979\\n2338 1471\\n106 388\\n7484 6516\\n6168 5892\\n2090 8475\\n8743 2925\\n8494 6430\\n7026 7735\\n2526 9412\\n3936 8674\\n543 1424\\n3889 3240\\n9797 7267\\n6410 6220\\n121 4118\\n6013 5751\\n1849 1488\\n7597 2091\\n6283 5943\\n8998 6500\\n1832 2085\\n9459 8971\\n7723 267\\n8341 7268\\n2669 9648\\n6907 9021\\n4200 2737\\n2194 5736\\n9348 9049\\n6780 4469\\n1347 4759\\n9985 2156\\n5677 7511\\n7653 6465\\n5040 6773\\n1473 9808\\n4219 6748\\n2492 5342\\n5583 1911\\n8215 936\\n8158 6392\\n7523 4409\\n4681 3085\\n2237 2268\\n8966 8873\\n5757 3995\\n7927 1285\\n5172 9710\\n6917 9856\\n2792 4290\\n4756 5891\\n8551 2924\\n4039 3825\\n7802 5260\\n1864 5636\\n6856 7634\\n3517 4796\\n433 3093\\n6023 1677\\n8868 4828\\n4816 2137\\n5746 7118\\n2071 7232\\n5715 9646\\n9475 7796\\n1108 8428\\n5208 1359\\n9399 2135\\n8331 6315\\n2286 6497\\n2988 4385\\n6005 2757\\n5747 9374\\n2740 2391\\n1683 618\\n8056 9280\\n7418 4026\\n4208 1126\\n1500 6759\\n7789 2751\\n2682 7031\\n9321 8726\\n104 3791\\n7046 6409\\n3168 6752\\n8741 6942\\n8450 4295\\n8873 8880\\n5227 4865\\n7418 6065\\n2760 3974\\n6096 1210\\n6551 9020\\n7438 823\\n2195 1348\\n8734 7503\\n4562 9027\\n6034 2328\\n6471 8520\\n7082 4083\\n1539 9382\\n2907 6550\\n1898 6046\\n8301 821\\n2341 1486\\n3671 8495\\n6197 5952\\n5790 7703\\n6436 3616\\n7002 609\\n3372 6015\\n2188 4478\\n1987 6192\\n9264 1575\\n8664 4259\\n4264 7355\\n8778 2463\\n9378 9436\\n4297 6960\\n559 6251\\n5282 318\\n8802 5258\\n6940 5555\\n3595 2416\\n7470 5551\\n1487 7169\\n6214 4639\\n6267 9681\\n5389 3224\\n6487 3845\\n4045 8547\\n4385 7821\\n9344 2678\\n5329 9043\\n4857 45\\n4486 7112\\n7130 2565\\n9069 8937\\n8761 6056\\n9902 380\\n6273 4997\\n5245 3716\\n804 7520\\n2527 2805\\n4182 8780\\n1053 1547\\n7083 2612\\n1179 513\\n1454 9531\\n2384 5007\\n5564 3418\\n5079 81\\n8593 9186\\n5965 8232\\n541 2275\\n7141 8833\\n6272 9574\\n7884 3388\\n9547 2760\\n7195 968\\n116 9209\\n9837 6324\\n2206 5677\\n5429 6099\\n5134 8527\\n8574 1451\\n3474 6365\\n8716 7854\\n3495 6138\\n2833 6304\\n436 3440\\n7625 7067\\n285 6312\\n3969 7529\\n8986 2696\\n2549 4923\\n5529 2872\\n9977 6728\\n1733 6613\\n9580 1206\\n3689 6267\\n178 8415\\n1631 8996\\n2030 8927\\n6699 3869\\n2820 7149\\n2332 8990\\n8619 400\\n7195 8774\\n8921 5232\\n3784 7393\\n3452 1307\\n9240 537\\n26 4320\\n2843 9324\\n1851 4268\\n4655 2923\\n4472 6329\\n8322 2079\\n6473 4056\\n201 5136\\n7788 2074\\n9925 9644\\n2773 726\\n6868 4505\\n2532 1388\\n5868 970\\n4606 9031\\n338 3389\\n7642 2991\\n9540 9471\\n3402 3820\\n5778 8144\\n5724 1445\\n650\\n3603 5122\\n3224 810\\n8343 3834\\n3449 2886\\n3097 8621\\n7769 3677\\n5173 7653\\n1601 4377\\n7180 8837\\n4933 589\\n8201 7663\\n4972 2448\\n7275 5903\\n7347 4467\\n5863 6733\\n1796 1133\\n7165 3202\\n9008 8684\\n3269 6213\\n960 3548\\n7264 5535\\n9495 2846\\n9325 994\\n7097 8149\\n4187 6769\\n3772 2970\\n2091 2851\\n9692 5119\\n8429 8412\\n9263 2532\\n5076 9266\\n2853 3281\\n3282 4271\\n7973 5819\\n2510 1184\\n3944 5319\\n2601 2119\\n3026 6081\\n3067 8108\\n8980 7465\\n5672 2331\\n3196 1572\\n9704 7622\\n2300 407\\n8980 8513\\n1374 1087\\n740 7734\\n1304 2712\\n5501 5199\\n1299 3059\\n9085 1256\\n5527 3306\\n5142 8923\\n5402 537\\n2110 5934\\n8343 2529\\n395 4703\\n9055 3800\\n2985 7158\\n6651 7651\\n2703 7167\\n131 8343\\n4853 5830\\n548 516\\n8170 8304\\n5149 3464\\n6249 9029\\n6421 4250\\n3818 5379\\n3431 5326\\n1463 1295\\n6255 5121\\n4985 7356\\n5546 3327\\n3552 5844\\n6711 8656\\n2359 7273\\n738 9290\\n465 844\\n3844 5189\\n5886 6510\\n6878 7247\\n6464 3041\\n2824 8860\\n4274 6637\\n1487 5055\\n4685 475\\n2393 6972\\n9081 7933\\n4364 2096\\n5111 6187\\n6751 8634\\n7428 3034\\n6402 5391\\n3690 1043\\n8911 8014\\n105 9707\\n9753 1727\\n3124 7773\\n5584 3215\\n2020 5945\\n6382 6876\\n4448 2729\\n7700 6879\\n4987 4344\\n9211 5262\\n1898 3322\\n2937 6181\\n6168 6498\\n4016 3725\\n691 5261\\n1960 9999\\n8006 9211\\n3414 7798\\n6686 2297\\n3549 1310\\n3833 4054\\n4482 7014\\n6234 1659\\n5473 5691\\n6310 3202\\n8147 711\\n7435 4386\\n7466 6501\\n9618 3488\\n8927 1363\\n7392 2863\\n1796 7766\\n7872 544\\n9847 5084\\n2700 6025\\n584 9608\\n9198 6551\\n8472 1105\\n755 9479\\n7992 6425\\n869 6753\\n4704 4922\\n8444 7824\\n5337 2594\\n427 2607\\n4132 499\\n795 4413\\n259 6853\\n8259 9475\\n9680 6979\\n1945 6248\\n8982 9936\\n8562 8123\\n1915 9631\\n4796 2713\\n6742 2984\\n7300 3373\\n2810 2301\\n6909 4510\\n90 7786\\n193 865\\n951 9423\\n447 7942\\n5681 8822\\n8324 6703\\n1828 1408\\n8906 747\\n4442 1152\\n5381 1853\\n7699 6988\\n2769 3800\\n2072 7240\\n5846 2074\\n7119 4191\\n6861 6381\\n8139 7888\\n5334 527\\n7028 8355\\n627 8742\\n8715 2079\\n7798 3394\\n7967 8261\\n5271 125\\n7955 1042\\n503 5011\\n8291 1802\\n7830 8009\\n2017 3420\\n7892 4165\\n7520 3886\\n2396 9656\\n6591 1940\\n3959 1721\\n1805 685\\n9907 6416\\n100 895\\n8054 7180\\n75 2557\\n7447 1338\\n9422 7189\\n4307 6358\\n8064 6210\\n2390 4961\\n4671 4040\\n7438 2172\\n157 9879\\n5583 5176\\n8739 2509\\n1468 702\\n9315 6721\\n1127 9376\\n1985 4140\\n8730 5010\\n5684 7677\\n5562 9654\\n7952 4609\\n6836 4824\\n4923 4116\\n8345 4936\\n9801 4716\\n9714 2422\\n8787 1178\\n184 7901\\n2160 8930\\n9387 861\\n3453 4739\\n3594 3581\\n5676 3025\\n1243 6380\\n5487 7870\\n7628 9192\\n4542 8074\\n9985 6815\\n4398 8378\\n8830 5036\\n7626 1572\\n4634 1783\\n9068 7481\\n4896 8512\\n223 8050\\n2496 8760\\n6697 9329\\n5540 3598\\n9205 2871\\n4132 1861\\n9603 3912\\n5937 8344\\n7824 5825\\n5650 3339\\n8011 6938\\n6035 1416\\n4241 5573\\n9149 3614\\n228 3652\\n6190 7045\\n5889 7446\\n3400 5426\\n6343 2736\\n3024 6150\\n182 5789\\n1621 6726\\n5825 5407\\n4062 7123\\n9699 2081\\n3723 3534\\n560 8138\\n7424 8223\\n7120 7845\\n4228 8666\\n2911 961\\n4318 127\\n4661 9584\\n5696 4672\\n305 5790\\n1117 3855\\n6762 5225\\n181 7095\\n8763 9083\\n8432 2087\\n9496 1408\\n6700 3436\\n2817 2905\\n1705 8910\\n4777 5347\\n5662 465\\n8345 4571\\n3182 5788\\n1821 9145\\n9958 4866\\n7959 7831\\n4289 6339\\n1075 3193\\n5622 579\\n7 6091\\n3427 9403\\n145 10\\n4880 6059\\n225 3849\\n7176 3841\\n3390 1915\\n3273 5249\\n2308 5519\\n6811 1329\\n9454 6347\\n4341 9558\\n745 7609\\n9080 1163\\n2431 690\\n1859 7553\\n9115 2128\\n6606 9375\\n3825 8867\\n8886 5862\\n5923 1268\\n356 5920\\n8493 2327\\n155 5796\\n3032 4915\\n6058 9015\\n4270 3412\\n3937 6131\\n4690 8679\\n8518 6081\\n5061 2845\\n3606 573\\n3952 3065\\n1545 7694\\n6041 6146\\n7837 7719\\n3135 5599\\n1174 5100\\n488 4992\\n4911 5827\\n4310 4663\\n7933 7477\\n9486 773\\n7607 2395\\n7410 1863\\n5236 5753\\n6823 5277\\n2415 7022\\n1807 25\\n5479 7611\\n5784 8816\\n4109 7703\\n7355 6054\\n2452 3039\\n760 25\\n6435 4424\\n5783 6387\\n7414 3592\\n172 5656\\n8342 8850\\n1535 8949\\n4755 4193\\n6902 1077\\n731 8670\\n47 5065\\n3564 6887\\n8170 1234\\n7868 2033\\n8241 9361\\n8009 1129\\n3010 1959\\n8726 5768\\n6967 7223\\n4540 1086\\n806 6413\\n5094 331\\n527 7980\\n687 5354\\n5986 4492\\n8095 1817\\n9407 1665\\n9199 6945\\n214 6667\\n647 8987\\n6790 9519\\n8711 8137\\n3887 6008\\n4647 3200\\n5276 6854\\n3992 2589\\n4865 1161\\n2187 4058\\n6080 8113\\n9107 756\\n7194 3497\\n9389 4790\\n1294 3096\\n6463 1190\\n8097 5528\\n7320 2864\\n3755 9995\\n9719 5496\\n7682 1671\\n4930 8470\\n2720 6177\\n3812 7675\\n8076 3642\\n2819 3609\\n3606 3486\\n8689 5029\\n3528 6955\\n7938 2475\\n1231 2099\\n9313 3237\\n1168 247\\n8388 6476\\n8930 9918\\n3598 2553\\n1399 9632\\n6623 5258\\n8094 1787\\n6178 5666\\n8089 796\\n7652 5141\\n8377 6947\\n5595 1264\\n4220 1679\\n1518 8158\\n5424 4211\\n8129 1146\\n8402 336\\n1075 1459\\n1351 4047\\n3157 1417\\n575 7716\\n2189 3426\\n8149 69\\n9488 7847\\n8941 3358\\n421 5755\\n9155 2784\\n1838 2054\\n3585 6717\\n2730 5699\\n4275 8346\\n6133 9293\\n1942 6194\\n2115 2402\\n4978 9142\\n1027 9934\\n7910 5039\\n5561 1852\\n7874 4568\\n3995 2\\n7546 8437\\n4867 3921\\n1238 8389\\n7343 8562\\n2790 2609\\n9905 6540\\n8201 8660\\n511 7452\\n3815 408\\n117 7858\\n3162 7459\\n6979 3439\\n8678 6948\\n6825 4932\\n4318 4888\\n6415 9929\\n3850 6353\\n3228 2138\\n8513 7365\\n5625 9056\\n6512 147\\n192 4748\\n695 3209\\n6626 854\\n1360 2827\\n3371 5002\\n2563 4565\\n1206 7676\\n811 7579\\n3796 2866\\n3630 8141\\n2062 8272\\n8073 116\\n2865 9813\\n799 6990\\n9978 3360\\n5118 4682\\n7832 2351\\n1539 6735\\n8042 1841\\n5016 9514\\n1155 4510\\n53 823\\n9399 798\\n4885 1601\\n275 5796\\n5274 7749\\n9568 1088\\n3695 2563\\n1433 3746\\n9949 1793\\n3134 6388\\n8935 1257\\n9144 6453\\n65 633\\n3469 5738\\n2516 7155\\n416 4479\\n7446 5680\\n5380 4583\\n1675 2838\\n414 4340\\n1189 5779\\n5707 6590\\n5189 1511\\n4651 609\\n1582 4209\\n7156 5954\\n1819 144\\n784 1909\\n373 2043\\n6200 551\\n2247 6501\\n4347 3618\\n3387 3047\\n9319 9121\\n6482 9459\\n5687 1147\\n6158 953\\n2638 8067\\n9408 1389\\n4448 5065\\n439 924\\n5706 2581\\n216 7582\\n478 5836\\n3396 2734\\n3449 408\\n7146 7353\\n5356 3212\\n4555 9772\\n3900 2464\\n6982 4153\\n3708 6383\\n7775 4251\\n8797 6717\\n7145 2320\\n736 7814\\n1710 386\\n4450 8761\\n6323 8131\\n4891 8357\\n1667 8874\\n5250 2187\\n7231 511\\n3505 9922\\n4189 3723\\n5381 5877\\n388 8114\\n5910 6265\\n2166 4553\\n8262 4102\\n7968 5662\\n4301 886\\n8942 8481\\n2087 1884\\n8989 912\\n8218 585\\n2632 5037\\n3769 3951\\n7306 7247\\n4162 4334\\n3369 6857\\n7990 7949\\n5612 5535\\n6959 7912\\n9757 6085\\n9595 4712\\n8025 4304\\n5752 7821\\n1109 737\\n3521 7832\\n7684 3019\\n3467 6065\\n4584 7748\\n4658 6667\\n6085 535\\n1964 3868\\n130 2054\\n9200 118\\n349 1177\\n178 9862\\n8132 7203\\n4210 6965\\n7376 1488\\n5591 1609\\n4629 8727\\n7467 8487\\n5042 7025\\n5298 186\\n657 1950\\n5142 1002\\n8966 3664\\n1208 970\\n807 3478\\n215 5093\\n4470 5287\\n6346 6247\\n7816 3414\\n113 4487\\n1227 9610\\n5415 6890\\n7386 5963\\n5444 4074\\n9251 3335\\n3711 8966\\n5513 5789\\n6395 8311\\n4061 5231\\n9758 7192\\n7639 6611\\n7880 3648\\n2141 8856\\n5378 8847\\n1074 9210\\n6407 809\\n4697 3709\\n3016 5742\\n8083 542\\n1196 6261\\n3144 2245\\n578 7710\\n1983 3155\\n9223 1693\\n2806 6066\\n4975 1776\\n9843 398\\n916 2936\\n8148 3439\\n614 1503\\n9045 4159\\n3384 96\\n1227 4697\\n1169 6735\\n4110 3427\\n5681 3868\\n328 1614\\n1046 5066\\n1225 2260\\n9265 9694\\n8601 5446\\n1645 3950\\n1807 9922\\n722 8603\\n1302 2826\\n1959 1693\\n8040 199\\n208\\n5487 337\\n688 2499\\n4303 8551\\n9241 6503\\n7021 1587\\n9418 368\\n4487 5639\\n7858 9702\\n6435 9130\\n7541 6714\\n4526 143\\n1971 563\\n97 9695\\n8472 4711\\n761 439\\n4185 7062\\n4679 1916\\n5815 4476\\n3835 3876\\n1306 8734\\n3080 7990\\n7318 1948\\n6458 2692\\n3055 8956\\n2095 9868\\n9714 3322\\n5038 2578\\n1962 8708\\n2094 9756\\n659 7482\\n2841 975\\n358 5614\\n7798 4513\\n5028 973\\n8297 9947\\n9972 2304\\n6761 781\\n8040 4617\\n2272 3032\\n6689 4958\\n8927 2671\\n3041 676\\n5682 3446\\n9653 8070\\n6907 652\\n7464 3121\\n1491 3082\\n2995 4990\\n4174 5347\\n9701 4552\\n1176 385\\n3702 5839\\n9152 7465\\n1005 9984\\n3771 2518\\n4091 4508\\n7620 8199\\n6298 8827\\n2531 5137\\n3718 2225\\n2525 7711\\n5844 3598\\n246 8109\\n3562 6687\\n8917 5149\\n6048 4102\\n9746 7106\\n5037 2648\\n166 6660\\n4924 4468\\n2770 724\\n3766 4417\\n7450 6862\\n8917 5562\\n8349 7719\\n8764 9978\\n3382 4158\\n806 7926\\n8022 3026\\n38 8733\\n2977 7453\\n4654 1672\\n8275 6294\\n4524 5026\\n9156 686\\n8770 3204\\n4070 9479\\n5261 4752\\n3870 1230\\n3452 1238\\n3294 5062\\n8881 1490\\n9488 9793\\n2886 7321\\n2822 7244\\n1295 5115\\n8944 3917\\n5274 9312\\n9696 7041\\n402 5361\\n7575 6957\\n7614 97\\n4100 6825\\n5934 437\\n6060 872\\n9168 2831\\n9161 9244\\n49 3934\\n1827 6936\\n1897 8193\\n746 5857\\n433 7813\\n2517 6755\\n4129 2117\\n4396 2682\\n4293 1741\\n7209 6842\\n6295 8450\\n2292 5419\\n7751 2455\\n9087 1492\\n1321 8667\\n3196 1207\\n3572 3263\\n992 6091\\n2124 2131\\n1716 1964\\n152 9162\\n5978 8844\\n1040 5880\\n2662 9049\\n4154 9464\\n1584 479\\n3955 6094\\n6096 9711\\n7265 96\\n7266 3700\\n1055 2907\\n1530 4292\\n8310 2051\\n6574 1534\\n2798 230\\n7911 1565\\n7874 9443\\n4512 9913\\n4091 4020\\n6511 4428\\n212 2212\\n697 4134\\n9956 1094\\n9304 6707\\n8659 7883\\n9444 4360\\n1311 5366\\n632 3006\\n3956 8224\\n2113 5463\\n1106 8395\\n3987 6161\\n8787 5203\\n1795 6689\\n286 5762\\n9180 8347\\n4253 9042\\n7927 5233\\n3290 6801\\n4155 7697\\n2039 3459\\n940 524\\n2907 7964\\n8953 9770\\n6658 2556\\n9164 5587\\n2481 5008\\n1241 9214\\n9315 7019\\n9447 6160\\n1286 2580\\n2407 2401\\n8311 650\\n4487 2932\\n3288 8016\\n4359 5354\\n1962 8888\\n6997 9008\\n4487 2294\\n7267 4523\\n1575 6294\\n7026 1227\\n5918 7098\\n4094 9954\\n4767 3898\\n44 5360\\n5196 4795\\n1276 6292\\n8111 2600\\n1971 6562\\n6049 5299\\n9194 6815\\n2868 4965\\n391 7218\\n1449 637\\n4022 9391\\n742 6792\\n2226 853\\n7998 4124\\n2293 3929\\n5932 3925\\n433\\n4824 4000\\n9336 1978\\n3340 1040\\n6470 8453\\n461 547\\n1512 2974\\n2034 4677\\n7644 8655\\n3269 7096\\n9691 1414\\n7086 8843\\n1950 2230\\n6264 6997\\n2482 1171\\n167 6810\\n6277 7773\\n6597 5133\\n5573 1312\\n9063 9184\\n1339 3037\\n4895 147\\n7510 438\\n3470 8660\\n3914 7590\\n668 138\\n1300 1629\\n6801 6058\\n7585 3808\\n2594 9803\\n3693 8790\\n5352 1856\\n4679 7711\\n1450 1171\\n3264 5133\\n1203 354\\n1596 2083\\n8966 414\\n8569 4824\\n6704 2103\\n7915 5474\\n7567 7933\\n1735 8945\\n991 1905\\n8670 5045\\n5943 4438\\n3983 7550\\n6640 5566\\n7975 7031\\n1309 272\\n6432 3971\\n5212 9049\\n2161 4263\\n2561 4112\\n9652 9844\\n7687 6766\\n5237 3220\\n3214 987\\n5102 4074\\n4488 6882\\n8468 6825\\n6244 3485\\n8279 7614\\n1724 4023\\n5115 3614\\n3566 7646\\n382 3995\\n898 9119\\n1163 19\\n926 2070\\n7087 2081\\n3767 702\\n9676 6764\\n2322 4905\\n368 6097\\n1551 7337\\n5493 1802\\n6013 2672\\n3791 8003\\n4563 895\\n7305 2111\\n5724 9709\\n4106 6556\\n443 9950\\n8018 7246\\n6585 1159\\n5454 9164\\n3345 2627\\n5440 6619\\n6772 1744\\n4960 7165\\n7248 4213\\n8657 3792\\n8506 8974\\n7808 1642\\n8538 6795\\n167 4810\\n2272 5161\\n6897 6628\\n7314 3333\\n850 1283\\n130 7621\\n4032 2877\\n6044 7074\\n474 6747\\n2577 3310\\n8161 8450\\n7250 1094\\n4311 3460\\n6524 9406\\n1692 7021\\n430 7641\\n8424 1984\\n8562 5177\\n9689 7334\\n7011 7183\\n2425 5212\\n8903 557\\n5762 9429\\n6248 7803\\n922 6959\\n4880 6834\\n3193 5247\\n5445 5552\\n3379 9543\\n2581 7340\\n5811 4560\\n3707 4862\\n9812 2921\\n2828 8691\\n3290 7074\\n142 2883\\n8120 4636\\n2318 8609\\n6137 8232\\n1077 2301\\n5919 1067\\n7139 9111\\n3111 3288\\n7302 3306\\n9628 4344\\n8229 7351\\n1999 4533\\n1120 5981\\n8542 8965\\n3439 3278\\n4514 421\\n1504 8011\\n1178 761\\n17 1505\\n1110 9129\\n290 7449\\n5413 2842\\n3400 5921\\n7859 3856\\n7066 7538\\n5628 2715\\n5159 6828\\n1807 9675\\n7688 2246\\n478 7344\\n6233 6045\\n6765 4453\\n2291 922\\n2315 866\\n4029 4631\\n6865 8375\\n5607 7426\\n8808 425\\n3259 8722\\n8426 9792\\n1575 1745\\n6105 7911\\n3256 7160\\n7246 8186\\n2863 4490\\n1917 6414\\n9572 7357\\n6065 2621\\n8100 8050\\n6182 9543\\n3402 6007\\n1160 899\\n8310 802\\n5203 829\\n8795 732\\n8689 8547\\n8157 2139\\n1157 9860\\n820 9606\\n5747 2531\\n7475 8329\\n3295 5211\\n3495 4623\\n2032 449\\n4121 6972\\n7058 3571\\n7042 7493\\n4513 5462\\n8560 9974\\n9118 2028\\n1961 5513\\n260 3387\\n296 9542\\n2101 2554\\n5862 1891\\n8533 6105\\n2738 4604\\n4671 7008\\n3338 6053\\n4651 6591\\n9246 2981\\n7440 1096\\n979 5346\\n1322 3313\\n5762 1938\\n8876 3770\\n5404 8394\\n8468 9332\\n3977 9225\\n818 8475\\n2455 4300\\n8845 798\\n4296 5187\\n5838 3596\\n284 3568\\n1777 6439\\n6102 6460\\n1620 8053\\n4590 9312\\n7369 2380\\n4428 8972\\n7990 5624\\n900 9486\\n2817 971\\n4746 8424\\n2934 3726\\n7413 1426\\n4979 5612\\n6629 1991\\n2 7669\\n3787 3458\\n9742 9368\\n1801 571\\n3225 1875\\n9332 8589\\n295 3353\\n7025 3398\\n1883 6842\\n6836 9762\\n4578 1969\\n4320 6861\\n9490 3922\\n5690 1071\\n4488 897\\n5283 8715\\n7806 7706\\n7946 5325\\n7074 9629\\n7037 6581\\n9310 5917\\n9539 8479\\n2720 182\\n9390 7853\\n3320 4057\\n7523 5634\\n1145 1024\\n8682 9242\\n2468 3114\\n8155 8221\\n823 6350\\n6665 7573\\n7000 7910\\n5571 5080\\n7593 3574\\n2878 5654\\n6606 6992\\n4528 2378\\n1309 1769\\n8048 4240\\n8653 9752\\n8257 644\\n4273 7593\\n6204 4413\\n3022 884\\n1773 1386\\n9522 2139\\n1189 7542\\n4308 4994\\n3040 924\\n4128 4063\\n796 45\\n8937 7273\\n2441 475\\n7815 8705\\n9701 714\\n9816 2468\\n1495 2701\\n1170 728\\n5097 6183\\n9082 481\\n6031 6334\\n7101 4557\\n5769 2895\\n5875 6139\\n8504 1233\\n3841 9743\\n573 6745\\n4802 3923\\n6514 1154\\n4500 8567\\n4694 6618\\n1642 7519\\n2268 7832\\n7190 4230\\n659 3354\\n8644 9828\\n7569 3527\\n1492 7844\\n5960 2093\\n7331 8402\\n294 657\\n9333 2918\\n2772 1097\\n3755 8461\\n2174 318\\n5024 4738\\n3717 5289\\n9354 8414\\n6067 767\\n6771 8449\\n9829 9320\\n8113 4623\\n7937 793\\n781 8884\\n1816 2818\\n5600 7987\\n9243 592\\n3036 9457\\n5352 247\\n3725 463\\n4670 5257\\n2904 8921\\n5878 1384\\n7483 2498\\n9224 2085\\n3675 129\\n7786 2268\\n3334 3708\\n689 12\\n7575 2634\\n5440 8131\\n7888 8302\\n4522 9703\\n3715 3948\\n305 575\\n298 7231\\n8473 1154\\n1761 9537\\n8090 3037\\n8525 8042\\n8882 9173\\n1990 3951\\n6752 6848\\n9275 2098\\n411 1638\\n7369 4995\\n3234 7224\\n6056 5506\\n9751 9953\\n8945 2871\\n4537 342\\n16 5412\\n7688 4775\\n9763 292\\n3996 7717\\n1535 6144\\n5790 4578\\n7092 9516\\n2938 1858\\n8434 2786\\n4933 1301\\n6160 1576\\n2315 6424\\n4408 1253\\n8145 5502\\n5074 9812\\n2031 7941\\n7070 5195\\n5835 1643\\n5495 6899\\n1836 2632\\n3457 8728\\n7604 9701\\n8877 3682\\n4173 8862\\n8680 7196\\n6434 1448\\n9921 5462\\n5678 8441\\n609 3632\\n11 2192\\n4075 5377\\n9241 9138\\n2131 6556\\n2124 3260\\n3503 812\\n5911 8870\\n3782 9303\\n8104 4291\\n1082 8916\\n5999 9493\\n8602 525\\n9293 7563\\n288 9915\\n2278 541\\n9623 1756\\n5551 5365\\n6067 6696\\n3444 811\\n9104 3224\\n1656 6873\\n9197 5845\\n7839 9591\\n3582 1298\\n1430 8482\\n1812 5172\\n5567 8036\\n224 1117\\n8552 1908\\n3881 6385\\n4928 1068\\n576 3521\\n1216 9347\\n469\\n17 5600\\n9097 7788\\n263 7510\\n9294 5373\\n3318 8405\\n9474 5053\\n3931 6143\\n6360 450\\n3422 7204\\n610 9553\\n8073 4291\\n7862 2893\\n9329 159\\n6312 9301\\n3998 4450\\n3690 8012\\n8693 8528\\n203 2630\\n3206 791\\n5466 9264\\n6050 7589\\n2357 269\\n7478 6379\\n3333 2688\\n809 5992\\n3752 8057\\n5437 4386\\n6528 5242\\n6781 4521\\n6251 6800\\n2437 605\\n1026 8654\\n5726 4982\\n4510 7639\\n2808 8129\\n6095 9487\\n9649 5276\\n7275 5162\\n3965 606\\n4709 9890\\n9441 4467\\n2350 1413\\n6130 5241\\n3250 9126\\n4302 8136\\n5381 4849\\n3790 2335\\n1357 8066\\n5800 9331\\n6878 1651\\n4779 9010\\n1148 152\\n473 2592\\n1644 9035\\n92 3601\\n4596 9787\\n6712 2084\\n1121 5135\\n4950 6099\\n2382 2836\\n6661 981\\n8708 8776\\n2241 8649\\n3428 5048\\n666 145\\n991 6354\\n8852 5483\\n5122 7090\\n656 2118\\n2961 5200\\n6151 3621\\n2588 569\\n2952 5704\\n9729 7487\\n3000 5837\\n8804 5010\\n6760 5291\\n6343 9790\\n4591 920\\n7337 3968\\n4980 4792\\n7755 4836\\n1813 5826\\n8692 3458\\n9718 1304\\n8494 4087\\n3263 213\\n7456 7174\\n6518 86\\n5248 3816\\n7018 5157\\n7435 9261\\n2306 2747\\n1840 1756\\n674 6281\\n563 2410\\n5653 8097\\n2199 9423\\n5351 8639\\n2923 8962\\n677 5328\\n9928 1918\\n7390 3308\\n4254 2576\\n9348 6537\\n1493 2169\\n5642 136\\n5420 7419\\n9325 4544\\n8738 4620\\n6003 3454\\n176 9140\\n8276 8227\\n4451 2081\\n7193 3152\\n4449 8427\\n107 7490\\n2975 3700\\n3473 2795\\n406 4190\\n8910 6548\\n5480 1567\\n3725 1516\\n1650 4348\\n2409 834\\n3424 680\\n3613 4247\\n2244 1901\\n9964 1400\\n7469 2275\\n9959 93\\n7064 2866\\n6613 9486\\n2724 3434\\n7183 9945\\n7345 7983\\n9934 5147\\n2454 7630\\n4490 8854\\n749 2385\\n1853 2403\\n6236 2287\\n9732 2721\\n1649 5753\\n1267 1344\\n2663 4445\\n3677 9799\\n9251 3610\\n7703 593\\n4006 1933\\n36 4030\\n6317 6250\\n3455 9648\\n4727 5311\\n6010 8878\\n4952 9945\\n7466 5180\\n4087 7843\\n4060 7097\\n7422 6196\\n4747 4024\\n8621 5067\\n6873 3682\\n2129 1343\\n3283 8392\\n8430 8654\\n8979 1472\\n1401 6407\\n4559 816\\n9077 778\\n6550 1698\\n8544 9755\\n972 6535\\n6720 7599\\n2773 2606\\n8972 8294\\n9312 6365\\n9479 1651\\n4255 718\\n311 3355\\n5108 9013\\n9968 6506\\n8267 6051\\n8308 107\\n9217 4632\\n7938 6515\\n2654 8547\\n7211 8019\\n8556 9010\\n5378 3094\\n198 7916\\n8567 5540\\n5915 5396\\n9961 3614\\n4433 7053\\n2619 1628\\n3420 8202\\n3371 2356\\n9502 4355\\n6000 3273\\n5649 3745\\n1843 504\\n8862 2839\\n9913 9905\\n8433 6716\\n7779 8008\\n7531 6801\\n311 7477\\n579 3361\\n755 7381\\n1807 859\\n1973 6773\\n7643 3100\\n9721 9805\\n3231 2951\\n7300 7184\\n8806 1095\\n2691 9156\\n9766 5442\\n3047 9996\\n608 6046\\n4248 5936\\n201 5236\\n5647 2999\\n7685 6189\\n6031 7079\\n8172 5790\\n3884 4348\\n2207 3520\\n2654 196\\n6686 2264\\n6250 3119\\n5753 3356\\n2909 2570\\n686 7877\\n4132 2503\\n7435 3982\\n7660 9103\\n6791 3403\\n5306 9289\\n2267 3136\\n504 8460\\n5024 7943\\n9041 8390\\n7187 7800\\n7904 8939\\n9529 4016\\n8177 2638\\n5707 1343\\n1374 6957\\n3266 8603\\n798 3389\\n1081 80\\n5463 7477\\n9452 6478\\n4891 9020\\n2842 8968\\n7087 9783\\n2283 5014\\n2327 2471\\n6473 2287\\n6907 5107\\n8394 9450\\n6053 6192\\n824 997\\n1439 5428\\n8747 358\\n7276 8892\\n6440 7486\\n3302 7871\\n1661 6114\\n3593 671\\n3679 9533\\n1954 5385\\n7059 7483\\n3110 7807\\n6965 3310\\n1671 8992\\n6047 8150\\n154 44\\n993 5158\\n3648 405\\n398 6151\\n4426 3327\\n9730 2188\\n918 1971\\n8865 8977\\n7964 6482\\n5757 9333\\n1462 325\\n2225 9336\\n8777 4697\\n3589 553\\n1386 1822\\n6150 3143\\n8025 6989\\n7109 8583\\n7635 7989\\n8068 1232\\n9289 4406\\n7892 883\\n9904 1230\\n6564 5717\\n4528 642\\n2671 7538\\n5194 4440\\n2939 1745\\n98 1511\\n5471 5857\\n5721 1186\\n7519 1562\\n294 1386\\n1118 5200\\n4882 7578\\n488 84\\n200 4168\\n5245 261\\n1396 5116\\n57 6392\\n9403 2290\\n7839 6557\\n5895 2149\\n7022 8479\\n1148 1545\\n8184 9278\\n5720 5238\\n5262 6600\\n7223 4394\\n903 4332\\n3516 6422\\n1963 4086\\n787 3406\\n1322 8290\\n3232 1186\\n493 4761\\n3163 6370\\n6186 587\\n9458 4057\\n8065 4413\\n6642 9539\\n4922 7825\\n3381 2114\\n6266 7984\\n8959 1140\\n9501 643\\n6621 226\\n6855 1906\\n7286 3304\\n2167 7420\\n9084 9971\\n8214 7363\\n8524 5398\\n4223 3792\\n5914 3502\\n6612 9186\\n1153 2644\\n5641 8392\\n7447 8796\\n4705 2374\\n1247 585\\n8048 7816\\n5447 7570\\n5269 9872\\n5081 7320\\n3381 4786\\n505 9619\\n6514 7636\\n5016 6570\\n4922 5242\\n2929 1371\\n4585 7370\\n9217 8612\\n9870 5252\\n2966 5050\\n7422 6429\\n4555 6500\\n9898 2976\\n2722 6825\\n1038 5315\\n334 9851\\n7416 5514\\n4138 2543\\n5096 9170\\n867 6223\\n1848 9659\\n6158 2858\\n2949 9899\\n2474 3710\\n9148 3275\\n9508 3517\\n6410 9814\\n3760 9771\\n1920 7556\\n9527 2542\\n8272 8945\\n5565 6626\\n1087 3181\\n7074 3152\\n7739 7161\\n6881 4231\\n719 8214\\n5617 4790\\n2492 2089\\n4912 9442\\n4930 9403\\n6420 3831\\n1325 7341\\n51 7122\\n2143 6765\\n3823 2964\\n6200 9208\\n3383 1470\\n7916 9940\\n8149 2761\\n4899 2589\\n6039 3206\\n5720 3121\\n4358 3052\\n6666 1085\\n1736 7007\\n1245 895\\n8867 7292\\n3981 912\\n5654 2291\\n8428 6051\\n1112 6478\\n9939 6628\\n6996 7298\\n6686 8984\\n7931 1574\\n9703 3768\\n7664 5552\\n2192 8668\\n9004 7439\\n1456 893\\n4563 2770\\n2725 448\\n1669 3004\\n679 9313\\n8419 5066\\n320 4055\\n4311 7722\\n9851 5019\\n4548 4030\\n4958 3061\\n1496 6392\\n6607 4475\\n6292 2853\\n8539 9887\\n7163 2370\\n8278 1888\\n6540 7858\\n8608 2181\\n2655 3732\\n3897 6932\\n9083 2119\\n2127 6053\\n5415 6017\\n226 8257\\n4712 3258\\n8301 9205\\n8711 1129\\n5543 6472\\n1322 6020\\n413 2355\\n1612 27\\n5200 7975\\n3962 3349\\n7109 9969\\n196\\n5019 3003\\n2722 5734\\n9823 2459\\n834 7560\\n4360 7610\\n6791 195\\n7210 3662\\n3851 6165\\n5932 1582\\n7683 9179\\n2295 1680\\n5344 147\\n3785 829\\n9188 2652\\n8594 3366\\n4595 7160\\n2834 3534\\n8710 2900\\n9551 6706\\n3137 7766\\n9394 5578\\n4011 7506\\n5589 8838\\n2175 2841\\n7717 5441\\n5815 2099\\n5517 9870\\n276 4859\\n4148 8743\\n3259 4583\\n2131 914\\n5280 2742\\n8959 1609\\n1749 7134\\n6179 3104\\n3425 3075\\n2830 5499\\n700 9482\\n2722 7350\\n2403 569\\n2087 9220\\n815 6063\\n5235 3797\\n8305 4832\\n4782 4455\\n9926 914\\n1947 5934\\n2760 6646\\n4029 9761\\n9423 7606\\n6069 8192\\n3125 6954\\n6413 4221\\n8421 886\\n9790 5260\\n6461 9474\\n7768 3171\\n2823 6996\\n3957 3519\\n8021 2898\\n1647 2912\\n238 2017\\n1557 879\\n350 9761\\n1990 4793\\n2344 324\\n3090 1580\\n1636 7964\\n6745 485\\n9550 1572\\n3229 7932\\n6755 2910\\n2471 3104\\n3382 7360\\n5409 393\\n4469 550\\n9651 8645\\n70 8640\\n5476 872\\n6860 4658\\n8485 4547\\n2662 5971\\n4393 6871\\n8662 6989\\n3755 1771\\n9300 5547\\n9891 1832\\n738 3469\\n8105 5622\\n2832 2120\\n6005 7316\\n2482 8132\\n5689 4460\\n1556 2578\\n487 9623\\n9077 8264\\n9938 2366\\n743 9122\\n7268 2764\\n6689 5305\\n9720 6385\\n3439 8008\\n2167 3052\\n687 2653\\n8032 7045\\n2279 6514\\n8377 8584\\n5040 260\\n9119 9419\\n8880 3915\\n3948 8750\\n7461 8906\\n2789 6941\\n75 1037\\n2891 9492\\n6922 7718\\n9152 9770\\n6325 3584\\n2268 705\\n7501 4708\\n5142 2075\\n1174 9491\\n2106 2925\\n6815 6130\\n9371 1997\\n6943 1275\\n1292 1741\\n5530 9523\\n4458 3321\\n574 9785\\n6732 3417\\n7234 2201\\n666 9742\\n5658 4243\\n6480 4058\\n436 71\\n3451 3420\\n821 530\\n2756 784\\n9649 7244\\n6824 7159\\n6662 8142\\n2853 8326\\n6306 7507\\n9482 6344\\n8797 2772\\n684 2796\\n5645 9224\\n2212 5960\\n2431 9916\\n3779 1850\\n5030 5565\\n6227 7803\\n2409 548\\n2021 145\\n2828 6678\\n406 7601\\n5228 2264\\n6437 2435\\n1535 1904\\n671 7123\\n8696 2979\\n5031 3821\\n2183 7370\\n2595 8904\\n2527 9293\\n8187 9589\\n7205 6558\\n3326 1199\\n794 4076\\n6481 7035\\n2872 6603\\n2999 1509\\n2576 7715\\n6413 6745\\n6272 5466\\n2596 6473\\n8498 1027\\n5152 4408\\n934 3596\\n6565 2795\\n3738 2928\\n9330 2432\\n1541 4805\\n7145 2814\\n588 9602\\n5983 1070\\n6089 4242\\n9203 8606\\n7675 6010\\n6339 9043\\n5566 8176\\n478 4647\\n3188 3225\\n3512 6430\\n9755 841\\n829\\n8108 9346\\n2999 6267\\n7641 6552\\n9366 1005\\n4151 389\\n541 3673\\n8278 2732\\n310 5112\\n7953 7799\\n5658 327\\n4173 3653\\n7056 7820\\n5522 9964\\n4749 7661\\n3543 440\\n8519 4708\\n4283 6337\\n358 3524\\n2796 1727\\n7811 1026\\n1157 4254\\n1444 3017\\n701 4289\\n6940 1492\\n2100 5060\\n2559 1825\\n8405 1147\\n9405 6717\\n6784 3227\\n774 2734\\n5959 6503\\n2973 7071\\n8715 5354\\n1652 2320\\n8972 4240\\n8148 8379\\n5544 1875\\n3634 8206\\n3915 6960\\n5560 9426\\n1937 5033\\n4459 1651\\n8935 5192\\n472 2530\\n5515 4023\\n1443 5309\\n3176 3730\\n3531 2847\\n7804 7733\\n1155 9906\\n9616 2539\\n5714 4579\\n2785 203\\n8296 3183\\n3718 7129\\n9956 6629\\n380 5952\\n9819 6249\\n2479 580\\n5008 7873\\n153 1511\\n6071 6226\\n1203 7141\\n2525 3397\\n7227 648\\n3133 3794\\n7018 27\\n6892 1614\\n9781 3666\\n4436 8339\\n9211 368\\n2288 118\\n5546 1272\\n1036 4533\\n695 3553\\n7859 3862\\n9404 218\\n4582 2604\\n2884 7667\\n2767 9934\\n9268 2391\\n5586 4761\\n5971 2265\\n6721 1203\\n4225 3521\\n3617 3807\\n8991 3193\\n5179 2170\\n1096 5429\\n5733 9984\\n2868 7426\\n9367 7584\\n6696 9789\\n7015 2074\\n779 9922\\n5691 9400\\n7912 3081\\n554 4947\\n1510 6742\\n9207 1501\\n780 7420\\n1464 5201\\n2035 3681\\n7064 2940\\n5686 9686\\n2584 6101\\n8332 2624\\n3869 1531\\n8049 4138\\n4213 6770\\n9503 4752\\n7616 6914\\n4375 4541\\n4941 8622\\n7069 6344\\n9364 171\\n1253 1055\\n6599 4029\\n9847 6641\\n5271 7169\\n6967 628\\n3720 1571\\n1228 2509\\n5826 8668\\n8139 435\\n3939 7848\\n8534 768\\n395 1649\\n6720 5604\\n3107 2301\\n5628 2713\\n110 7520\\n8516 6690\\n477 6255\\n8265 6217\\n3684 7816\\n5773 8648\\n7648 9881\\n1934 4316\\n2391 6886\\n4292 2482\\n6295 3777\\n2763 9171\\n6994 8577\\n1095 7743\\n6446 7928\\n8221 9698\\n2184 8793\\n6185 7131\\n3541 5786\\n1635 8406\\n2324 9133\\n6592 6991\\n6094 5934\\n7328 1993\\n5642 9533\\n4005 822\\n5850 8897\\n4884 1873\\n1736 5706\\n146 1678\\n4505 1443\\n2534 4135\\n8069 67\\n552 9324\\n2674 646\\n986 3219\\n1876 6807\\n1054 7677\\n163 1063\\n8958 4408\\n3085 3531\\n9790 2367\\n8277 2900\\n3394 5013\\n9022 5082\\n4621 3051\\n2319 3103\\n3989 9036\\n5675 5373\\n2082 2288\\n7655 3579\\n2684 9656\\n8952 3159\\n174 7287\\n7703 4223\\n9952 3276\\n8998 2659\\n356 5806\\n8994 7060\\n9790 3381\\n6884 4320\\n2736 7104\\n7514 6638\\n1411 8763\\n7860 7849\\n6412 9506\\n4282 139\\n9858 5892\\n9583 3203\\n4770 1501\\n2892 2751\\n5231 1461\\n8785 7515\\n188 7320\\n8070 8500\\n5387 994\\n6346 2194\\n480 7493\\n4811 2894\\n204 6923\\n1598 6706\\n8923 1909\\n2430 1095\\n8203 5859\\n1419 7289\\n5408 8689\\n4025 739\\n1957 3342\\n9349 2134\\n5233 9185\\n117 7355\\n8698 8714\\n1373 9559\\n7221 2737\\n8100 5335\\n1675 3134\\n7022 3743\\n4126 9178\\n1396 429\\n6021 5229\\n6900 5002\\n199 9886\\n204 1922\\n5337 1923\\n1704 2240\\n8223 3654\\n2510 485\\n6412 2326\\n1448 5189\\n2568 2065\\n5363 8302\\n4026 3553\\n5286 1697\\n8234 7340\\n590 4893\\n9315 7035\\n6622 9779\\n5461 5651\\n4752 6367\\n4474 2988\\n1459 6160\\n2169 758\\n6560 8216\\n9387 5716\\n4132 788\\n6712 8090\\n5348 2754\\n2275 8395\\n3360 8941\\n9154 6141\\n1232 1442\\n5547 730\\n8839 440\\n3146 4158\\n8119 311\\n8487 852\\n8957 6315\\n6494 1971\\n948 4360\\n85 3415\\n5090 195\\n471 2402\\n5581 9774\\n5744 449\\n9606 2032\\n6756 4024\\n7867 5782\\n6819 4567\\n2632 5519\\n676 6873\\n9010 683\\n1608 9312\\n943 2094\\n8369 3255\\n6366 756\\n1073 2650\\n5198 4811\\n5053 5687\\n7261 7395\\n568 2083\\n6264 8524\\n4680 6635\\n6170 1213\\n2392 5034\\n421 3993\\n8868 6535\\n3962 5953\\n4736 5660\\n3265 3974\\n2035 3110\\n8603 9392\\n5633 3409\\n262 157\\n1708 9714\\n2243 1449\\n7679 5132\\n5883 4233\\n7911 8161\\n5849 1313\\n222 9257\\n9896 3051\\n536 7003\\n8494 5142\\n4261 8714\\n636 7162\\n4692 9761\\n7777 7230\\n526 5124\\n3525 5578\\n7074 8159\\n9487 1126\\n7453 1477\\n1783 5864\\n2979 3204\\n2025 6088\\n184 4407\\n7875 9272\\n1200 6937\\n5764 6742\\n614 3525\\n3415 4569\\n1134 4827\\n6090 7764\\n3075 4489\\n8934 7594\\n35 5045\\n7865 1645\\n7102 3853\\n3286 4178\\n3973 310\\n21 8056\\n7080 4913\\n9147 2146\\n5052 591\\n1856 2595\\n4516 466\\n9860 6621\\n1693 9788\\n4878 4036\\n556 3996\\n2338 1250\\n213 8188\\n5753 8932\\n2100 9038\\n2024 1821\\n8172 4342\\n758 8642\\n1242 8249\\n5232 5403\\n4260 3319\\n6958 3971\\n4478 7709\\n2008 2992\\n6607 6352\\n5908 3711\\n9653 1918\\n8478 1825\\n6051 46\\n3943 8122\\n1869 7168\\n1429 2309\\n4934 9260\\n4097 9035\\n7449 5701\\n5280 7758\\n2983 4803\\n1421 6848\\n1119 7449\\n8510 4736\\n8962 2287\\n9563 1874\\n2435 1684\\n8739 2446\\n5669 3094\\n2630 7448\\n8952 5610\\n63 9408\\n2029 9295\\n1790 483\\n7879 2256\\n6132 5595\\n9649 7275\\n9218 81\\n9810 7714\\n8992 3075\\n4744 1127\\n6856 8555\\n8426 5988\\n3264 7628\\n9380 3633\\n9238 8885\\n439 2669\\n6096 2421\\n5963 3948\\n4481 1136\\n421 7543\\n1756 6761\\n3517 7947\\n9980 8192\\n3591 378\\n5725 5537\\n3928 6414\\n6474 6409\\n7313 3035\\n9852 4139\\n3394 3617\\n9450 2507\\n1529 5570\\n6655 4734\\n1447 5890\\n669 6700\\n7119 916\\n5947 9826\\n24 1899\\n1690 7577\\n4308 53\\n9505 9117\\n9945 1976\\n7981 9747\\n7553 2772\\n2055 170\\n4995 9601\\n1049 1443\\n4202 7834\\n6121 6405\\n2827 3083\\n1543 9522\\n7910 9357\\n2671 4960\\n4462 2077\\n4687 2140\\n583 3777\\n3274 1782\\n1356 2628\\n4116 3158\\n8110 1110\\n136 9691\\n6550 1014\\n9088 2415\\n5697 3541\\n6574 2562\\n9170 8544\\n5464 1754\\n2587 1066\\n8099 989\\n7807 9620\\n5242 1927\\n8979 1176\\n5223 9451\\n7525 1227\\n2264 5559\\n3085 781\\n672 5283\\n2109 3762\\n3781 8874\\n3245 6634\\n484 9170\\n8630 327\\n9506 9310\\n7275 9405\\n9893 403\\n4236 2331\\n579 5460\\n7373 7006\\n5182 4975\\n1374 9340\\n7313 2093\\n5964 9665\\n3340 4182\\n4739 5067\\n9281 3415\\n4186 4701\\n2054 4874\\n6545 452\\n5513 5578\\n7113 5781\\n5473 1438\\n7857 6928\\n8699 8015\\n2847 4801\\n2650 7313\\n7329 179\\n2362 9086\\n1738 1464\\n8534 2280\\n6745 1487\\n6013 9937\\n8904 5043\\n1008 8658\\n8466 2756\\n5812 706\\n5087 2877\\n4584 3319\\n3195 4097\\n9176 2727\\n4752 5753\\n4194 8604\\n8898 8253\\n6393 6211\\n3873 28\\n8520 972\\n251 1355\\n681 334\\n1908 9393\\n7468 5866\\n9838 2370\\n386 1726\\n4499 503\\n4038 1814\\n4917 1778\\n7032 4869\\n9252 5258\\n6281 9630\\n8385 613\\n8371 2260\\n560 6441\\n5219 1097\\n713 7395\\n2866 614\\n4287 7464\\n7937 6899\\n997 9050\\n9129 2151\\n225 8515\\n6685 8051\\n4958 3045\\n9908 7481\\n340 2229\\n7015 5391\\n487 5044\\n1339 3792\\n6483 2690\\n2321 9719\\n7435 199\\n5827 8699\\n1513 4357\\n8125 8437\\n7873 6621\\n3464 9756\\n946 832\\n5148 5206\\n5433 4638\\n9480 6993\\n8095 9968\\n2937 2123\\n5282 5636\\n6996 1251\\n4507 2204\\n8194 5414\\n6966 676\\n6785 5456\\n139 3666\\n3582 4474\\n3818 7845\\n3455 7108\\n1250 1962\\n8218 6639\\n629 7972\\n2463 129\\n9311 8982\\n6196 7160\\n1404 224\\n2097 3056\\n1785 4113\\n5643 2520\\n5891 1773\\n711 7950\\n8262 9230\\n892 1445\\n7874 8445\\n4786 383\\n4955 9033\\n1199 8215\\n7309 9232\\n139 2161\\n2749 7387\\n5552 9811\\n5463 1840\\n5676 234\\n8995 5178\\n1516 4854\\n3222 5886\\n9967 7383\\n1590 5178\\n9761 2320\\n7125 8114\\n1038 4212\\n5115 4410\\n4964 1232\\n6096 42\\n9443 928\\n9735 5\\n4875 5424\\n2775 2971\\n2161 1909\\n2096 2132\\n8187 8634\\n7255 2772\\n7082 2284\\n7018 4594\\n1303 9357\\n6963 8600\\n174 9970\\n1900 6272\\n9013 9213\\n1456 5778\\n7998 9305\\n6166 6222\\n1105 1878\\n2967 2948\\n9984 3676\\n3226 8945\\n4297 685\\n5453 784\\n8834 6956\\n1180 1016\\n9650 694\\n4859 210\\n9037 7225\\n3738 6902\\n1182 4133\\n9178 3762\\n3324 4894\\n5855 8915\\n7999 9800\\n3955 291\\n6257 8323\\n9209 8622\\n5364 8253\\n3172 2227\\n780 4180\\n3665 5342\\n3586 6912\\n1094 1207\\n7137 9781\\n2681 3117\\n8787 8800\\n8146 3924\\n602 7875\\n4693 9269\\n1484 7555\\n7183 3747\\n4551 8123\\n3008 8300\\n8077 988\\n6352 8466\\n5083 8231\\n185 2370\\n8747 9642\\n1118 4043\\n5152 1609\\n6522 5405\\n7233 8748\\n611 1195\\n4671 6978\\n4833 3276\\n5776 7988\\n2894 992\\n3154 7354\\n9795 4763\\n3109 6156\\n5185 863\\n6469 2\\n3574 1661\\n2268 1658\\n4723 2563\\n2122 5094\\n4443 3069\\n1550 7996\\n7767 8003\\n2192 5002\\n9879 337\\n6425 4574\\n2229 3306\\n8473 5853\\n2503 3801\\n4989 8823\\n309 8720\\n1557 5556\\n3560 3257\\n8726 9443\\n8313 1224\\n2362 2619\\n1615 107\\n5124 2837\\n373 1176\\n4762 8139\\n7599 4697\\n6994 2486\\n2380 603\\n1918 7068\\n6450 3475\\n3570 5521\\n7114 5992\\n6922 56\\n5463 8791\\n9430 4002\\n5606 9440\\n8020 1974\\n7527 7869\\n4825 8628\\n4906 3606\\n7347 1532\\n2428 391\\n926 8510\\n5830 3982\\n2566 7745\\n6594 6552\\n5356 2464\\n4193 5699\\n8803 896\\n4657 9096\\n6704 238\\n6311 4345\\n8642 9805\\n6528 4937\\n4337 2540\\n7841 7765\\n467 1415\\n743 8964\\n7690 5421\\n5160 9699\\n5881 2069\\n1718 1019\\n2143 9937\\n8526 3789\\n6297 923\\n9675 3438\\n9799 9338\\n8542 6471\\n2734 2066\\n384 434\\n3618 4832\\n7021 3059\\n158 9689\\n9725 3978\\n3205 8767\\n7744 2904\\n6658 9559\\n7973 9854\\n5214 597\\n7487 6521\\n6386 8108\\n7489 8694\\n2313 5837\\n6520 4340\\n3859 1868\\n8663 5687\\n3156 7392\\n4584 8133\\n7724 2217\\n1983 3951\\n647 3244\\n8513 2976\\n6377 6867\\n6163 5901\\n8250 3971\\n4024 8083\\n6200 1616\\n4361 8455\\n9533 958\\n821 6792\\n9563 3846\\n6037 8239\\n7178 7110\\n3727 2667\\n998 2092\\n8169 2395\\n6292 164\\n3517 1151\\n2650 3742\\n3457 9095\\n8499 7583\\n5725 1612\\n5147 579\\n817 9905\\n7332 1454\\n5577 488\\n4876 9954\\n2671 9311\\n2613 9316\\n9399 3058\\n9035 4149\\n102 5776\\n4177 365\\n6211 9861\\n9200 296\\n348 3465\\n3480 1484\\n1401 8819\\n3217 4271\\n9323 8121\\n1537 8226\\n1312 5098\\n6577 8747\\n9622 8696\\n1279 8187\\n8055 3790\\n2754 1703\\n4517 2720\\n8513 4800\\n439 8480\\n1384 7349\\n8867 4848\\n3234 8780\\n772 2556\\n7502 6587\\n7258 7890\\n1452 306\\n1737 8463\\n5073 9545\\n1658 2267\\n4253 1694\\n1389 5730\\n5086 4623\\n30 9343\\n5107 5508\\n2009 9722\\n297\\n96 2682\\n2916 9052\\n2489 7899\\n3792 2597\\n1912 1876\\n1344 6661\\n9883 4402\\n512 565\\n8282 9231\\n5594 7140\\n2897 9830\\n8812 3560\\n7970 4658\\n691 8475\\n6035 8929\\n365 8544\\n1735 343\\n2626 4579\\n4046 7392\\n7574 7963\\n3137 5453\\n7083 4235\\n5946 6879\\n3468 3928\\n7179 9330\\n3342 2947\\n1621 1821\\n284 8\\n4616 6413\\n6941 4683\\n2178 2184\\n1324 5702\\n1542 1945\\n3453 195\\n9209 7327\\n1335 4693\\n9414 5963\\n4216 5976\\n8442 4462\\n4788 838\\n3035 3182\\n5085 6389\\n7244 7006\\n9027 735\\n833 4923\\n8674 1028\\n9730 3751\\n5861 6956\\n8339 8922\\n8694 8061\\n5519 5946\\n386 9685\\n2700 5991\\n4105 4075\\n1435 2090\\n6716 1208\\n252 8484\\n2536 4692\\n678 1627\\n2162 1453\\n9153 6105\\n9923 8989\\n7738 176\\n2158 6836\\n8554 5859\\n2312 5049\\n8168 6440\\n9037 7259\\n7236 8084\\n4942 7913\\n6802 4721\\n6700 8309\\n6767 745\\n3760 624\\n7964 1993\\n8705 220\\n1702 4678\\n4507 4414\\n1935 9694\\n559 1468\\n5410 5036\\n4602 5448\\n5111 8668\\n2873 9983\\n6902 628\\n915 7555\\n4516 2224\\n2279 4931\\n9081 2251\\n3509 8305\\n9411 8956\\n6737 8519\\n2720 6981\\n4586 6884\\n1008 4886\\n2272 8492\\n2970 2784\\n7152 8505\\n7571 477\\n3042 9197\\n6809 6845\\n3756 5433\\n6651 8725\\n6966 8668\\n5060 2624\\n3396 8507\\n7313 3949\\n8644 5644\\n3690 8745\\n8722 3020\\n9471 8625\\n4725 8614\\n7780 1405\\n8536 602\\n3852 5202\\n7012 4708\\n4716 2613\\n7350 1782\\n8829 1496\\n5611 195\\n2749 7239\\n4989 1307\\n997 6818\\n9804 3297\\n2835 9109\\n709 1482\\n1033 4217\\n7742 810\\n3992 4097\\n445 527\\n4925 2476\\n8851 2819\\n4299 7227\\n8920 3957\\n2390 7350\\n5216 586\\n1298 5292\\n3016 1926\\n8030 6922\\n2735 428\\n5006 1937\\n7106 1847\\n2191 2887\\n6895 268\\n3851 7197\\n7599 8813\\n7165 2188\\n1466 4599\\n5408 6830\\n6465 195\\n3635 7893\\n7831 3383\\n5650 2474\\n6284 6268\\n7492 7373\\n1324 1891\\n9578 2057\\n4778 8533\\n9335 9658\\n1941 6251\\n8742 4956\\n7590 828\\n8156 2744\\n9122 3552\\n5568 6785\\n2652 4300\\n372 1698\\n3509 7229\\n9284 7417\\n1965 2007\\n311 5337\\n6568 7138\\n8050 756\\n227 8485\\n3040 33\\n7890 7493\\n4829 2287\\n7506 611\\n353 8154\\n6087 7176\\n4318 7818\\n1372 6111\\n4774 6626\\n1422 677\\n8758 5928\\n7962 3720\\n6749 3208\\n2194 6983\\n7076 9229\\n2057 6551\\n2467 1906\\n4686 268\\n7903 2051\\n4356 8667\\n1939 6190\\n1405 5143\\n4518 8891\\n4836 5934\\n2334 7354\\n5202 2168\\n947 8828\\n1462 878\\n7220 8942\\n2555 5571\\n4433 2941\\n3789 854\\n7156 6883\\n3599 7545\\n9155 1878\\n2726 5372\\n3503 8408\\n3003 9379\\n1206 6434\\n3229 7496\\n3391 4042\\n1807 5374\\n524 4672\\n322 2110\\n5700 5378\\n1659 5138\\n2225 6331\\n4577 3886\\n4436 4771\\n73 8666\\n4539 7047\\n3063 6085\\n1250 2176\\n7347 9819\\n6163 9154\\n4403 6612\\n1949 6265\\n214 4508\\n9970 68\\n7806 2039\\n278 9023\\n9623 1759\\n8456 6141\\n3955 5843\\n6615 9939\\n9772 2202\\n3052 7788\\n2838 4472\\n7792 6618\\n5035 7584\\n4900 3254\\n1523 5727\\n6203 9599\\n1634 962\\n9211 6305\\n7191 1092\\n7785 290\\n468 7042\\n4728 1367\\n2669 5031\\n2587 9633\\n8990 7182\\n6120 9677\\n4251 9989\\n2876 5895\\n1095 5406\\n9380 2301\\n9636 8452\\n1544 6646\\n2384 4432\\n509 495\\n7056 9382\\n1064 105\\n9649 5717\\n8360 5366\\n4385 9359\\n934 208\\n7064 4095\\n7916 238\\n3340 4053\\n746 295\\n9858 9\\n2153 3812\\n439 1773\\n4011 3952\\n2812 622\\n3680 567\\n3655 9547\\n1553 108\\n7010 4185\\n6105 9428\\n3259 210\\n371 4692\\n5254 5350\\n3913 7008\\n4612 9193\\n9457 7380\\n7511 1070\\n1693 4529\\n8755 2830\\n972 1973\\n1610 8150\\n8973 5998\\n223\\n6901 8949\\n2326 6266\\n4445 5768\\n426 2104\\n5468 2377\\n2270 5354\\n20 262\\n7475 4833\\n7445 4420\\n5566 591\\n8171 8510\\n2357 9645\\n8660 783\\n4077 900\\n5159 4757\\n1287 9470\\n5477 2147\\n7675 5263\\n9291 4919\\n4555 8707\\n6364 2179\\n554 2754\\n5443 5222\\n5499 1647\\n7155 2656\\n9652 8921\\n845 4325\\n6959 1253\\n6713 1424\\n4154 5387\\n1872 3183\\n3408 1726\\n656 4989\\n1230 8949\\n9276 8055\\n1046 4929\\n7786 991\\n1428 6767\\n1562 3669\\n9366 1606\\n2737 6913\\n8621 9881\\n9024 4207\\n6719 8537\\n81 2703\\n6714 2758\\n7389 8307\\n8438 931\\n436 7880\\n9081 8175\\n6586 9787\\n177 4122\\n9872 2665\\n9222 7149\\n531 3489\\n9343 5462\\n6375 8942\\n9818 7095\\n5471 8190\\n9207 3632\\n8840 6405\\n1867 9790\\n1740 8433\\n7695 705\\n2793 1025\\n8729 8728\\n7260 5415\\n1400 2990\\n1869 4385\\n487 4354\\n3914 4909\\n7915 6199\\n7986 360\\n3807 796\\n4708 8622\\n5095 9931\\n9919 9948\\n5554 6175\\n769 7954\\n7640 4856\\n9803 8617\\n9106 955\\n3684 3186\\n9527 4883\\n9954 613\\n7938 8608\\n8950 1317\\n187 442\\n5262 7266\\n6311 8253\\n375 1809\\n7679 5414\\n8057 9480\\n6541 7989\\n6806 3579\\n265 7473\\n429 7444\\n555 5059\\n1001 7452\\n3512 3661\\n2677 4858\\n7142 6555\\n9147 1837\\n5393 8304\\n3469 726\\n9754 6708\\n7330 8240\\n3660 5427\\n114 7400\\n4449 7545\\n5414 1958\\n5982 1038\\n8629 3242\\n4317 5274\\n9194 725\\n780 9456\\n5413 2482\\n3434 9567\\n7343 1836\\n2931 4558\\n7871 9400\\n4862 6252\\n3509 6811\\n7303 8336\\n1397 5833\\n1866 1778\\n5246 5358\\n1053 8899\\n2770 2531\\n5018 2275\\n9644 6086\\n1737 8517\\n305 586\\n4240 5123\\n6428 4082\\n9558 8383\\n6311 9290\\n60 6790\\n7390 8854\\n2364 962\\n852 2095\\n4128 8171\\n3009 8134\\n1170 6434\\n1251 8476\\n144 9011\\n6923 7591\\n862 965\\n813 9072\\n943 955\\n1086 1482\\n5935 6582\\n7906 4503\\n8396 8612\\n916 3922\\n8927 2323\\n1719 177\\n956 9326\\n109 9260\\n9241 9493\\n3949 6601\\n3678 9219\\n7747 8936\\n8945 3914\\n8842 6472\\n5558 8899\\n3586 801\\n1621 5053\\n5526 5076\\n3249 3543\\n1721 5034\\n9926 928\\n8920 5292\\n933 7990\\n1227 5325\\n779 7759\\n3613 8606\\n7492 6702\\n5847 751\\n5230 9743\\n3680 5045\\n5950 3087\\n7970 369\\n9371 1639\\n7787 8433\\n6160 7647\\n5240 6894\\n8431 7229\\n8356 8268\\n7373 1123\\n191 5252\\n3241 3756\\n6239 7901\\n1715 9116\\n3311 8545\\n8976 7282\\n7641 3782\\n542 4221\\n85 5479\\n6582 2273\\n7604 6934\\n1728 7174\\n6720 8406\\n2813 4236\\n4291 8367\\n8838 9853\\n4465 5499\\n7322 7619\\n1992 5296\\n4421 1581\\n9164 270\\n5026 672\\n8046 4678\\n9217 1622\\n5619 2756\\n7124 9831\\n4229 9620\\n6996 5795\\n3040 9742\\n8208 9371\\n9132 764\\n9107 1310\\n9626 8242\\n625\\n8756 5567\\n9275 8078\\n1319 760\\n8990 9962\\n2390 5193\\n2984 5239\\n1464 47\\n3212 8888\\n9176 2320\\n5156 3974\\n7210 4272\\n6209 5195\\n3458 7041\\n9404 8933\\n2215 4842\\n6019 5128\\n5405 2834\\n5543 3526\\n6863 5467\\n7058 3988\\n2679 2939\\n5939 7976\\n9437 3179\\n7498 7712\\n761 236\\n7272 2513\\n6623 7909\\n245 3173\\n9344 8460\\n4336 7897\\n1312 5312\\n2674 4509\\n1544 29\\n9678 9328\\n8104 9540\\n9141 1110\\n1884 3222\\n8784 5715\\n3730 7524\\n6713 3494\\n7779 6239\\n2536 2132\\n1433 1451\\n3663 3943\\n5698 6205\\n3708 9061\\n158 7637\\n7637 658\\n7085 8653\\n1386 7476\\n9647 5288\\n1960 4002\\n802 8126\\n8597 6672\\n9364 2721\\n554 4530\\n7755 1153\\n5967 6822\\n4134 8652\\n5128 8163\\n8892 9298\\n1854 1771\\n4508 238\\n1844 4609\\n3677 5275\\n7845 2954\\n2920 5632\\n2866 7631\\n9162 665\\n9740 2162\\n2489 6089\\n6569 3201\\n3411 9730\\n2504 4690\\n7678 2474\\n2010 84\\n5856 5039\\n5861 9647\\n8815 3088\\n6169 3212\\n7142 6522\\n1820 3337\\n5744 3035\\n7106 5083\\n8513 1005\\n9520 3435\\n9249 5679\\n512 4969\\n3122 1888\\n2931 4369\\n4885 9980\\n4059 293\\n1013 6935\\n3535 3861\\n5420 8272\\n1477 7950\\n1923 5851\\n3193 6256\\n2786 3685\\n8713 7403\\n9096 2222\\n5150 7275\\n1507 5510\\n8775 3352\\n2953 9944\\n3354 7262\\n8546 9733\\n6994 1347\\n6647 8898\\n9167 186\\n6735 5468\\n9309 4191\\n3368 2559\\n4934 5043\\n1880 1515\\n9208 5329\\n1486 1769\\n6172 6397\\n4343 961\\n2409 8869\\n6579 2155\\n8240 9340\\n8600 132\\n9265 4496\\n9055 7777\\n9105 7313\\n8583 7477\\n8852 355\\n9404 9585\\n3419 3582\\n3651 566\\n1737 93\\n5857 3249\\n4346 2777\\n9217 9875\\n2574 3580\\n8433 9662\\n1057 4353\\n1474 212\\n3859 4125\\n8043 177\\n3942 4741\\n5538 3956\\n4444 3078\\n7000 7643\\n9289 6402\\n5190 6447\\n5011 4402\\n7053 4982\\n7716 1762\\n1699 7385\\n7662 2546\\n7291 2293\\n4453 9357\\n3596 2062\\n4427 6792\\n3186 7230\\n8892 4331\\n2961 3390\\n5367 7732\\n6248 9157\\n9930 2735\\n7889 5298\\n6326 8819\\n6255 8521\\n4497 9702\\n647 2957\\n4417 6590\\n8266 131\\n6946 8379\\n7108 7358\\n785 9564\\n8320 4664\\n7356 3259\\n7515 4713\\n5652 8603\\n1478 2342\\n8075 8127\\n8956 6307\\n5270 3913\\n2151 3231\\n2683 7975\\n3040 4281\\n7828 723\\n7598 5409\\n9452 2954\\n1068 80\\n6327 9243\\n1659 3088\\n2182 9348\\n9764 564\\n4226 2363\\n8319 398\\n3519 6\\n7476 6462\\n8904 5624\\n4133 761\\n5070 4609\\n4238 5207\\n6107 2965\\n8165 7692\\n209 9453\\n9650 7389\\n2125 3381\\n5192 3403\\n3403 9203\\n3592 8178\\n5993 611\\n1277 9895\\n8806 1097\\n4701 6369\\n8148 762\\n3517 4638\\n5753 8010\\n2659 4409\\n9809 4957\\n3993 3394\\n361 5535\\n8986 5363\\n1727 6770\\n9395 9883\\n2337 1060\\n6893 8996\\n6566 1720\\n1391 7789\\n5638 6038\\n6389 8559\\n7520 4880\\n715 5742\\n8716 3071\\n5117 5303\\n7723 4242\\n4690 8368\\n5341 1615\\n8818 3790\\n8995 2583\\n1868 6864\\n9723 7581\\n3018 6184\\n4238 6288\\n2868 6304\\n1055 5756\\n1542 6884\\n7264 4918\\n1270 7963\\n9284 7833\\n8119 2113\\n4266 8131\\n8681 3133\\n6110 7295\\n1208 7303\\n3879 8811\\n1770 2627\\n351 2376\\n5710 5535\\n2007 8861\\n3791 5700\\n9362 6772\\n5679 1100\\n3751 234\\n1739 4780\\n7271 3377\\n3493 521\\n3136 4107\\n2737 4586\\n7448 3957\\n4135 3099\\n2444 6162\\n8853 78\\n5982 3627\\n7628 7441\\n5674 415\\n9310 2627\\n300 6611\\n1072 4535\\n964 1303\\n7749 3623\\n9845 183\\n4463 4802\\n4204 8556\\n6344 4089\\n4474 105\\n9384 9897\\n643 768\\n3824 6059\\n1598 6758\\n76 44\\n2423 9487\\n6657 7748\\n4161 7256\\n9929 7560\\n6291 7848\\n7604 8298\\n6512 1096\\n6156 9872\\n7018 3083\\n6564 4618\\n8441 2195\\n7030 8915\\n1698 6678\\n6571 7881\\n6599 509\\n1725 9648\\n5956 572\\n3356 5976\\n741 6862\\n2901 3742\\n803 7395\\n3532 2481\\n8853 1040\\n7842 4371\\n349 7105\\n2270 5338\\n6759 3487\\n8924 2164\\n9818 9338\\n4860 7290\\n3196 4515\\n9687 1087\\n4085 3745\\n2663 3338\\n2202 737\\n3961 5384\\n4092 842\\n4298 8341\\n423 9586\\n3021 2295\\n87 6350\\n6711 8228\\n7273 6234\\n1293 2340\\n9024 6349\\n8817 5036\\n9545 7943\\n2639 617\\n462 7340\\n5826 8072\\n9024 6634\\n435 9239\\n9956 3650\\n7314 7537\\n8679 7238\\n3383 5345\\n5131 4096\\n2790 3471\\n6347 7224\\n8487 5857\\n2396 257\\n493 235\\n6017 3733\\n3699 7506\\n5744 6360\\n7724 3032\\n7628 1121\\n1493 4266\\n4498 9318\\n348 8401\\n3480 3993\\n8283 3551\\n2612 4240\\n979 622\\n2637 3108\\n6262 4815\\n9413 9486\\n2246 2805\\n8900 6093\\n7710 4930\\n3334 7102\\n308 963\\n27 7248\\n6249 112\\n9562 5094\\n7445 7877\\n2682 2266\\n5551 7423\\n1725 6977\\n4024 6315\\n5474 9574\\n3233 6893\\n3825 9288\\n4506 5605\\n1006 6058\\n8192 3698\\n4070 7096\\n7016 3271\\n3069 860\\n6403 1066\\n8952 1431\\n3130 7622\\n6221 9499\\n9725 9353\\n7594 3981\\n523 6802\\n388 8661\\n6872 3367\\n498 9344\\n9776 3899\\n6835 5979\\n3923 8822\\n1914 5022\\n7899 7578\\n7062 7618\\n1407 2397\\n2555 4816\\n7601 3719\\n3805 9951\\n2159 9391\\n1208 1362\\n7432 7731\\n4431 3290\\n8823 3553\\n2589 3013\\n3332 9534\\n8732 9353\\n7159 1304\\n9190 3664\\n2456 2954\\n8642 4960\\n436 5896\\n7841 5225\\n8095 8247\\n2025 6931\\n4519 4961\\n8911 6906\\n7520 8826\\n6542 8737\\n6240 3166\\n7173 3718\\n7660 7605\\n7436 4199\\n3879 713\\n9000 7949\\n3214 3255\\n5504 6546\\n892 5603\\n4736 2176\\n6428 3164\\n6861 2472\\n1517 9773\\n7972 8697\\n608 3547\\n9193 6676\\n7034 8180\\n3021 1575\\n3604 1381\\n1146 4375\\n5171 679\\n2431 655\\n4951 5678\\n7495 579\\n8813 9961\\n859 6453\\n1072 9458\\n7580 6956\\n9227 1310\\n583 3829\\n8298 5365\\n923 5768\\n7486 3901\\n2121 3916\\n4247 5826\\n1401 5548\\n8588 2079\\n1523 43\\n732 8009\\n4325 5500\\n6584 5776\\n4801 5558\\n8149 5954\\n2279 2932\\n1979 8914\\n8779 2751\\n6820 627\\n8159 2783\\n6978 1306\\n3106 7798\\n6688 193\\n2457 428\\n9435 1699\\n2626 3562\\n6571 498\\n9223 5238\\n6887 2629\\n1865 2949\\n2800 3178\\n6896 207\\n6886 6955\\n1186 6096\\n9770 3270\\n2792 3722\\n9201 5064\\n2754 344\\n1080 7703\\n5223 1962\\n1337 7237\\n3615 9372\\n4564 2807\\n6311 5791\\n3453 8450\\n3738 9943\\n4424 5864\\n1536 9287\\n6833 292\\n1459 9833\\n7902 5540\\n8735 7035\\n8341 6029\\n9991 2727\\n2138 1829\\n2014 6778\\n4247 3927\\n2902 434\\n3872 7360\\n6548 3274\\n7550 5344\\n1685 1404\\n5114 1133\\n7939 3050\\n9854 270\\n8361 4566\\n2563 99\\n3272 6838\\n7219 3544\\n5727 549\\n4845 4454\\n6427 8457\\n7069 2087\\n734 3950\\n9169 7734\\n963 4728\\n724 6223\\n9574 4867\\n7975 569\\n5221 5352\\n7904 4863\\n2558 7144\\n4788 7385\\n4356 501\\n3841 1164\\n5187 4218\\n7766 5630\\n4275 3460\\n7290 430\\n6715 57\\n2742 2751\\n1518 5039\\n3676 9014\\n7324 8766\\n8500 1129\\n3187 8923\\n5878 8235\\n7387 4884\\n1215 1920\\n3188 735\\n3917 984\\n2904 7873\\n7502 8797\\n3009 3377\\n5203 7015\\n6417 6411\\n4807 8928\\n3103 6456\\n3105 9226\\n8623 415\\n1467 8570\\n4133 8780\\n4681 7549\\n7473 9112\\n1678 995\\n634 6679\\n9345 1102\\n4311 2196\\n2136 5233\\n2467 12\\n8830 4719\\n6829 7357\\n4175 4446\\n2536 4066\\n9053 4251\\n7612 1674\\n1051 9074\\n5324 9781\\n9277 1472\\n6314 9453\\n1195 1552\\n8399 2574\\n6929 8369\\n1280 2704\\n3124 7715\\n1918 6624\\n2158 6013\\n4701 9589\\n5033 8675\\n5136 7059\\n7834 3706\\n5786 8759\\n8472 229\\n7100 8735\\n3822 1003\\n9127 7068\\n7353 3728\\n5522 320\\n7266 6156\\n4713 4152\\n7154 5878\\n4909 1533\\n6726 5138\\n650 2890\\n7585 6397\\n2494 4503\\n5832 6803\\n7294 1414\\n2139 3166\\n4747 7969\\n1767 8569\\n8695 7195\\n1140 2379\\n5806 9061\\n3776 7150\\n7442 9775\\n5239 6057\\n9435 3499\\n5387 4489\\n6777 1730\\n1195 915\\n923\\n6301 6500\\n3903 6300\\n2444 5340\\n9625 7698\\n6681 2179\\n3743 9226\\n3491 1840\\n8052 7138\\n9436 9626\\n7323 3377\\n3352 8641\\n2046 8254\\n9432 1140\\n8928 9219\\n9947 1475\\n8615 8804\\n7950 9737\\n2305 5715\\n5969 3754\\n1487 4252\\n2418 4487\\n414 1014\\n3971 9161\\n5916 2202\\n1345 5556\\n9280 9526\\n8732 48\\n3116 8552\\n8003 1484\\n8570 9430\\n1501 6560\\n9021 5134\\n2582 8104\\n1940 6008\\n5777 8618\\n9964 9774\\n4155 4695\\n6241 5003\\n8614 6319\\n9106 5679\\n7872 3339\\n1020 9687\\n2446 6710\\n2120 7959\\n85 8669\\n7030 4060\\n5850 2248\\n4721 7099\\n2924 7738\\n1190 8059\\n2491 3389\\n3919 4622\\n1567 2057\\n3411 6472\\n1459 344\\n333 3781\\n3442 1610\\n9020 5021\\n8078 5880\\n2239 8571\\n9630 7071\\n7489 7926\\n1377 7962\\n3292 3778\\n7791 5165\\n622 4182\\n1142 2198\\n5339 9906\\n1243 3983\\n8031 4994\\n4788 6806\\n9285 3897\\n3877 2276\\n2406 2752\\n8403 9996\\n8318 6433\\n4871 6113\\n6391 4054\\n9609 192\\n3652 3645\\n3462 2366\\n1274 4427\\n5613 5617\\n3125 6106\\n588 9969\\n4258 2500\\n9037 4890\\n5628 2887\\n4122 1875\\n2392 4651\\n1232 7671\\n6984 4941\\n6480 2042\\n9758 1800\\n2726 6713\\n9639 6719\\n499 9255\\n8485 2730\\n7879 4931\\n5332 2955\\n9571 548\\n2251 197\\n525 5274\\n8948 4981\\n2694 1018\\n4385 6909\\n6093 370\\n9466 2825\\n3739 6069\\n7375 428\\n9428 5465\\n7597 8936\\n8814 966\\n9427 9911\\n2575 7822\\n933 3470\\n3033 149\\n8132 1636\\n45 4065\\n9560 4245\\n6658 8412\\n3638 5254\\n8552 8785\\n5478 3833\\n4511 7826\\n3167 3711\\n2611 8151\\n5086 6406\\n3373 8516\\n1095 5613\\n9165 5515\\n1738 1321\\n1464 280\\n5162 5907\\n685 1011\\n1594 9391\\n2419 1410\\n7024 6662\\n831 6176\\n402 5757\\n6845 9536\\n146 742\\n3492 3882\\n459 7499\\n8078 612\\n3789 8032\\n5702 5045\\n5290 6548\\n7034 3984\\n6459 1709\\n9043 1498\\n1763 2606\\n1647 4670\\n734 7859\\n3900 2254\\n7687 921\\n7972 6313\\n3718 5891\\n5808 4142\\n7180 8800\\n3466 3902\\n9662 7401\\n420 8672\\n2446 8674\\n1912 2102\\n1856 3244\\n3009 5150\\n2041 569\\n3322 7608\\n4699 9819\\n2485 6456\\n2356 9078\\n9864 9255\\n6227 286\\n9564 4610\\n3073 7738\\n7001 2000\\n9118 3724\\n8911 402\\n8779 374\\n9620 1841\\n2095 9232\\n479 4006\\n8169 7825\\n6370 9648\\n5622 1114\\n4335 1544\\n610 1354\\n3460 9377\\n8513 3734\\n6132 3575\\n4980 8136\\n9631 851\\n3942 2545\\n7734 9960\\n9069 296\\n8757 2415\\n592 8179\\n146 9777\\n5334 6097\\n3153 4081\\n6714 7624\\n26 9600\\n6266 9409\\n1701 6243\\n7673 9721\\n3302 4510\\n7436 5364\\n5603 5265\\n1287 9967\\n5579 9540\\n727 9470\\n1729 3591\\n7897 1019\\n4539 5280\\n7679 9397\\n5110 6679\\n4893 4805\\n6324 2833\\n3902 2948\\n3196 3180\\n9603 5722\\n8320 2642\\n3129 8635\\n3734 7534\\n456 9413\\n1461 5737\\n9407 435\\n780 3339\\n6798 5278\\n7053 9591\\n8761 7112\\n283 9621\\n9559 6681\\n6046 1550\\n4719 9523\\n8470 2857\\n9436 8132\\n7732 377\\n1284 1212\\n5553 4285\\n1193 7242\\n1983 7648\\n5729 6530\\n9930 7961\\n6440 5094\\n3087 5376\\n3438 848\\n8136 6931\\n3814 633\\n7776 9131\\n2368 4417\\n6761 6982\\n9540 2434\\n5079 3111\\n8518 4754\\n6713 9950\\n1361 5444\\n4994 5298\\n1319 9584\\n756 9860\\n3482 757\\n2644 7997\\n2512 7822\\n9480 4837\\n2045 522\\n3775 5972\\n7573 4951\\n5263 8571\\n4225 1910\\n2539 6698\\n5710 609\\n8070 3200\\n7340 7599\\n1750 9967\\n9728 8299\\n9698 724\\n5919 8489\\n768 3751\\n8710 6941\\n2434 2523\\n7937 9065\\n7635 4487\\n3117 3647\\n6604 4719\\n2958 9266\\n9370 8722\\n8160 4603\\n1685 6420\\n7830 706\\n287 5396\\n3139 6127\\n134 5499\\n2700 9872\\n8497 3323\\n367 1008\\n5764 8467\\n1314 5731\\n4410 1060\\n9249 1192\\n8040 7160\\n3583 6135\\n4173 5365\\n5230 3799\\n2531 6004\\n2031 470\\n5052 8696\\n608 2859\\n3066 9475\\n5149 9983\\n3660 4187\\n7410 5022\\n2998 5911\\n4774 289\\n9185 6293\\n9779 9404\\n6513 8499\\n8366 1207\\n1961 9400\\n1061 7922\\n2823 8440\\n6858 509\\n7215 431\\n1856 4433\\n3053 3695\\n5674 8205\\n2122 8148\\n9215 8816\\n784 654\\n5887 7164\\n5573 3235\\n3217 7495\\n3017 5445\\n4242 2932\\n4390 5431\\n956 7870\\n9292 2924\\n4474 3190\\n5239 6460\\n2965 9238\\n2604 496\\n393 4859\\n6995 1457\\n1966 7658\\n1877 2713\\n4819 9512\\n3952 3523\\n8419 7998\\n7424 3335\\n6554 1877\\n416 887\\n1535 975\\n7346 3111\\n9988 5255\\n863 2992\\n1130 7970\\n2930 569\\n6973 3528\\n7241 6679\\n3133 475\\n6486 7528\\n1813 2017\\n4175 4556\\n9360 1488\\n2428 9940\\n7097 3721\\n697 4816\\n3341 3878\\n6182 8734\\n6831 2495\\n1592 4058\\n3948 6027\\n8150 6509\\n7669 5720\\n345 257\\n468 4007\\n8806 8859\\n1884 5365\\n6501 1996\\n1686 8233\\n3749 9757\\n7224 8775\\n8375 4863\\n9381 7151\\n5572 8010\\n9446 5798\\n34 4157\\n4972 6640\\n630 5729\\n4212 904\\n6965 9489\\n1814 3119\\n5587 8092\\n7553 5268\\n1431 4107\\n5559 583\\n599 4670\\n4929 6877\\n5346 6461\\n1566 393\\n4365 7632\\n95 5757\\n8067 7848\\n1852 1363\\n5680 2422\\n1027 706\\n6792 6152\\n5076 6197\\n3598 4991\\n1843 6156\\n282 5075\\n4695 3999\\n7947 5394\\n8670 9452\\n7683 9265\\n2900 2092\\n113 1987\\n3491 9552\\n515 1869\\n5552 3268\\n1690 3258\\n3565 2186\\n5744 7817\\n42 2348\\n5043 3449\\n5185 4441\\n9040 4391\\n3734 4936\\n4423 5600\\n9583 6060\\n5407 1641\\n6876 1566\\n6945 3983\\n3238 9036\\n8253 9114\\n970 8408\\n4682 9515\\n4107 6810\\n7653 4461\\n1883 1946\\n2139 5708\\n1865 6892\\n9309 1734\\n7926 1876\\n3120 8582\\n1636 3521\\n1880 2636\\n8834 530\\n7866 3737\\n1542 6315\\n1984 7442\\n6519 7550\\n6447 8629\\n9145 9431\\n4077 3261\\n6788 2589\\n5280 321\\n9460 1689\\n58 1152\\n1243 6695\\n3539 8306\\n1759 5464\\n285 9338\\n2225 3124\\n3298 2731\\n4232 5008\\n3530 8745\\n8026 2075\\n2427 5384\\n8926 7054\\n3065 4586\\n5640 865\\n2878 5418\\n6901 3541\\n6749 4001\\n1260 8934\\n8971 6843\\n3174 9957\\n3031 3474\\n9567 558\\n1899 8043\\n8358 4666\\n7428 5368\\n9343 6002\\n9289 5910\\n7942 8755\\n7853 8712\\n6350 5251\\n866 6832\\n3509 3399\\n1280 9114\\n9645 3733\\n696 5667\\n1298 2559\\n5000 4293\\n6141 9178\\n4781 6015\\n1816 2175\\n2765 6229\\n4944 5755\\n876 5252\\n1614 1942\\n3200 5819\\n9755 5613\\n8695 9736\\n9369 7725\\n4731 4601\\n7223 5772\\n5625 292\\n2562 4576\\n9653 2224\\n8948 5375\\n3473 7825\\n2065 8898\\n8264 2429\\n5256 2530\\n6110 1391\\n9544 4445\\n9063 7676\\n5408 6024\\n86 1650\\n8542 1945\\n6442 8532\\n8049 8961\\n8888 6246\\n8851 1496\\n5763 6059\\n3991 2207\\n3239 273\\n7645 6202\\n8862 7229\\n4011 6232\\n4203 290\\n7683 4223\\n4818 3290\\n1158 9297\\n4375 8997\\n4986 3904\\n4845 8519\\n479 4354\\n2693 3949\\n2785 9878\\n9949 8615\\n5540 6298\\n1973 6513\\n5844 714\\n4680 6521\\n9987 3253\\n5954 6304\\n8079 1617\\n1178 6275\\n1711 2662\\n3006 3896\\n6658 3262\\n8266 7288\\n7738 6705\\n5387 1964\\n4607 8956\\n9923 3480\\n1 9042\\n5256 2093\\n1054 560\\n2938 5090\\n3281 3768\\n1507 7453\\n6173 7803\\n1642 3021\\n2064 2349\\n8238 3854\\n8396 9668\\n7298 8527\\n1226 1583\\n6799 4776\\n5096 7615\\n7812 1775\\n139 9900\\n3982 180\\n2949 3348\\n7096 2678\\n7814 6940\\n8076 7815\\n4720 5373\\n8109 406\\n5321 3991\\n7822 5703\\n7948 5855\\n1583 3407\\n3559 1601\\n8628 4200\\n7177 2769\\n3032 5411\\n8963 7743\\n9413 1354\\n4922 5325\\n5011 3610\\n3238 9090\\n2 4170\\n390 86\\n1354 9013\\n4232 2550\\n5384 8621\\n5011 2193\\n9947 6615\\n1119 3131\\n9503 4102\\n862 8549\\n955 3958\\n2506 5167\\n7814 1018\\n8870 4441\\n3735 735\\n1210 2648\\n3921 8488\\n9913 8328\\n7454 4310\\n179 9954\\n8847 2181\\n214 7962\\n5757 4567\\n9328 9100\\n195 4885\\n3624 9016\\n3352 6729\\n6959 2153\\n3993 4458\\n5409 84\\n1107 9581\\n544 2016\\n7080 2092\\n6315 4588\\n271 7553\\n8021 1138\\n1911 6297\\n9349 86\\n9665 9416\\n5460 5555\\n1546 130\\n7707 5096\\n1681 8457\\n1857 6821\\n6684 1413\\n3911 7871\\n4442 1033\\n1050 7209\\n7572 7117\\n5097 6828\\n4691 5279\\n3578 6710\\n6745 8719\\n9129 8446\\n3038 4900\\n6961 8111\\n2372 5251\\n324 9013\\n4660 2787\\n1111 4307\\n869 481\\n9956 1228\\n3905 7113\\n217 7439\\n3756 711\\n4598 67\\n8663 1180\\n5969 5212\\n5457 3534\\n4932 3721\\n7360 2783\\n2010 9822\\n7664 2063\\n4483 2112\\n4929 561\\n4759 6887\\n5240 59\\n3545 4629\\n6626 3168\\n2001 6270\\n131 2825\\n859 4816\\n9041 3379\\n1119 1710\\n3381 8791\\n2066 8257\\n9637 6193\\n292 5385\\n5675 5938\\n5658 3474\\n3435 4973\\n8358 4567\\n5173 6513\\n9221 5969\\n895 3789\\n6343 7760\\n6542 1011\\n7124 8336\\n6505 2390\\n8686 2363\\n6843 4047\\n1393 9866\\n9925 8738\\n2960 5379\\n8542 9476\\n9513 9327\\n2393 7821\\n4833 6602\\n7483 1757\\n9441 8749\\n7496 1073\\n6696 6877\\n4847 1571\\n8523 3367\\n3414 6366\\n4341 1848\\n1746 7353\\n454 5895\\n9242 2640\\n6691 7524\\n8753 6248\\n4193 9978\\n5935 4544\\n802 3287\\n76 5633\\n1531 3955\\n8780 8981\\n4255 5631\\n2626 8637\\n8516 4923\\n4336 1076\\n5483 1194\\n597 4785\\n9384 7715\\n9387 4471\\n7407 2496\\n79 8320\\n2249 4170\\n7224 7257\\n223 4990\\n4445 4341\\n1960 7012\\n308 1684\\n7558 5653\\n3504 2200\\n1639 7011\\n7133 4052\\n7007 6360\\n7774 1211\\n9258 640\\n3336 3046\\n3374 2074\\n9875 8257\\n9273 1407\\n507 9967\\n3567 9799\\n1477 6329\\n3746 2448\\n5121 9942\\n9289 7979\\n703 3426\\n8015 5305\\n1832 1074\\n1410 4149\\n5040 7467\\n4316 1946\\n6904 3265\\n9774 3156\\n2088 6006\\n3834 3890\\n6486 3614\\n218 4016\\n3334 7571\\n7664 8089\\n3827 4814\\n1262 1121\\n6553 1105\\n3556 9586\\n1937 4944\\n4389 1173\\n2776 3961\\n4435 310\\n7595 4396\\n3852 7821\\n1351 6362\\n9534 5050\\n9103 997\\n3264 5653\\n5380 1597\\n8731 6561\\n198 2591\\n8868 8625\\n4916 3035\\n2083 7267\\n2624 1883\\n6050 297\\n8945 5233\\n5129 9876\\n4646 9919\\n8309 7610\\n3723 7898\\n2273 9852\\n7543 910\\n7984 7047\\n7125 5800\\n7989 9177\\n2066 5744\\n9803 8902\\n3043 2570\\n6257 5276\\n9437 113\\n7335 3653\\n5417 697\\n7065 713\\n8714 180\\n1448 381\\n7194 710\\n5158 2578\\n6997 2193\\n1165 8264\\n4521 2454\\n384 1718\\n3930 9563\\n4697 5291\\n2571 1552\\n9185 5548\\n4987 719\\n7531 2484\\n781 3555\\n5463 9058\\n7858 2096\\n3172 4567\\n905 3500\\n5986 5561\\n959 6545\\n5328 6738\\n5091 213\\n383 1862\\n5760 7780\\n3544 438\\n8628 1747\\n8383 2917\\n5473 118\\n6970 1882\\n7060 5433\\n3738 8366\\n2327 2044\\n3543 1385\\n9052 8819\\n289 1494\\n4398 8851\\n5271 6946\\n9906 2909\\n8699 4463\\n7288 9006\\n751 7600\\n3853 4787\\n5733 5578\\n8761 9991\\n9290 3125\\n7550 6371\\n9303 6551\\n2572 1270\\n9705 9907\\n623 2616\\n5478 7659\\n9703 9616\\n5524 2066\\n8874 9279\\n4397 1270\\n4270 7142\\n3434 171\\n3050 2369\\n8052 255\\n2824 7863\\n6494 9613\\n7423 8077\\n6845 7338\\n2267 8146\\n8063 2522\\n7362 1729\\n2176 2170\\n8646 6894\\n8797 6926\\n3182 8876\\n603 8772\\n5654 5240\\n8323 1707\\n8807 8967\\n7404 5751\\n1092 9653\\n2528 9237\\n8702 3088\\n3887 8025\\n4578 2111\\n8702 6864\\n7703 7488\\n5896 2705\\n7462 7545\\n4147 7990\\n6680 7559\\n2316 3833\\n4334 8573\\n9947 1891\\n1180 8523\\n9575 3632\\n8335 8374\\n2089 5834\\n8644 7817\\n9874 6424\\n2020 2786\\n4857 4287\\n4533 1543\\n7009 6689\\n4514 6209\\n5822 164\\n1423 8251\\n548 1303\\n5846 1019\\n2650 1242\\n1759 5544\\n9571 2370\\n7797 782\\n3510 6764\\n1614 420\\n652 7361\\n6928 106\\n89\\n4096 3304\\n3121 7170\\n2755 9265\\n7692 8264\\n9726 6364\\n1263 3658\\n6968 7216\\n5634 4038\\n8078 9743\\n498 9325\\n89 6751\\n3 1683\\n909 491\\n217 8267\\n1849 2628\\n9000 8622\\n4701 308\\n7344 515\\n7126 5356\\n3391 3787\\n710 6894\\n2624 9712\\n7767 926\\n2200 8068\\n4340 4902\\n6422 3725\\n9107 3836\\n4268 2959\\n4510 9\\n1090 6989\\n2371 2425\\n7204 1832\\n6756 809\\n8113 5103\\n5709 3665\\n6151 3730\\n9640 5835\\n7214 8480\\n1890 4569\\n2540 3393\\n9097 3399\\n4492 2888\\n4180 7748\\n3771 8908\\n7261 9462\\n1023 115\\n3184 1048\\n4796 7256\\n8477 411\\n9009 7959\\n3128 2887\\n4805 4057\\n2277 7028\\n3477 7668\\n1637 7807\\n9438 9609\\n969 9945\\n2074 7643\\n195 4563\\n1396 6037\\n8350 4972\\n7729 3937\\n4731 1075\\n4210 9367\\n2515 7750\\n2676 3799\\n7472 1138\\n9473 1656\\n4160 7284\\n1212 4087\\n3292 5954\\n7090 9077\\n7055 9352\\n4456 3327\\n9043 7935\\n8973 5623\\n4656 930\\n4518 6349\\n6358 9759\\n842 9032\\n873 6748\\n2752 9730\\n8102 6328\\n9543 9159\\n5626 5765\\n300 1954\\n4634 2604\\n9303 1909\\n5015 7452\\n290\\n1145 3009\\n577 9436\\n7039 1530\\n1305 2747\\n9511 7721\\n6446 4208\\n4460 808\\n6918 2235\\n7185 4557\\n3137 47\\n8872 3058\\n9099 4795\\n4662 9899\\n839 8839\\n1293 1957\\n6190 275\\n6408 3270\\n4243 6311\\n83 5645\\n2610 9633\\n7328 3100\\n4816 3770\\n2739 3997\\n3768 5111\\n8804 7794\\n2699 4473\\n5866 1357\\n9752 8266\\n2891 668\\n5521 7921\\n5265 6128\\n6110 7712\\n2097 5951\\n6716 3269\\n963 4762\\n8270 6095\\n1363 992\\n1082 8971\\n8599 6146\\n1512 5499\\n7945 2091\\n3367 1257\\n175 4975\\n143 2228\\n2804 7229\\n4561 8226\\n2666 826\\n2296 7240\\n689 6267\\n8358 1221\\n6329 432\\n3087 9706\\n8641 122\\n6639 8837\\n3395 6895\\n107 4992\\n1558 4498\\n3068 2335\\n6706 5600\\n3286 3159\\n1358 4592\\n3566 8600\\n9519 3666\\n241 7855\\n886 5437\\n1172 2553\\n7472 7883\\n9141 5802\\n4383 7605\\n8385 9471\\n2607 7267\\n9298 4612\\n49 3554\\n4198 8654\\n2733 4206\\n519 3686\\n7458 1147\\n968 7656\\n5306 1989\\n1782 3156\\n9510 4172\\n3586 1756\\n6918 4396\\n1093 2317\\n9639 4361\\n9314 1318\\n8958 2044\\n4767 5855\\n4214 3986\\n5867 5869\\n6357 4506\\n586 8872\\n9239 7405\\n7087 1534\\n6650 6131\\n1682 6450\\n3820 4816\\n925 5755\\n3119 3446\\n8241 4097\\n7162 7340\\n9469 8784\\n9480 3496\\n7451 3579\\n7897 496\\n7988 181\\n6397 6715\\n4341 5752\\n3012 7811\\n9373 6308\\n7675 245\\n6532 1484\\n3329 2411\\n7731 4541\\n8138 8660\\n8450 9968\\n9619 1333\\n664 5236\\n9081 3381\\n3202 2073\\n802 7717\\n6226 2940\\n1720 4921\\n6561 6942\\n6836 4433\\n9768 5894\\n1127 6100\\n6325 2849\\n3315 5808\\n6459 4607\\n5098 294\\n7357 3742\\n2368 842\\n1218 7755\\n4717 2252\\n773 3353\\n534 8024\\n731 7826\\n9924 2614\\n1311 630\\n4052 207\\n8883 3318\\n4217 7538\\n1177 5821\\n3196 3441\\n5224 7004\\n2549 4030\\n6267 5116\\n6797 4025\\n7202 3300\\n2168 532\\n6967 7458\\n1698 7855\\n3875 6915\\n1931 802\\n3833 5162\\n7763 7827\\n1190 7669\\n4907 6083\\n2808 2740\\n7776 3662\\n2384 8053\\n382 3155\\n7105 8129\\n4430 5909\\n3545 1461\\n1375 5414\\n8352 8196\\n3120 3045\\n1124 1010\\n4471 8780\\n2137 9471\\n3555 5425\\n8929 3445\\n3298 3467\\n7701 2302\\n4905 1709\\n8718 7158\\n3405 911\\n2818 4300\\n6049 956\\n6959 4081\\n6593 9983\\n4068 4116\\n2680 7167\\n7568 1711\\n1038 1068\\n7868 1875\\n509 3797\\n673 3364\\n9698 3610\\n9680 8929\\n6286 4414\\n7708 1782\\n3355 5217\\n7048 3447\\n3107 3987\\n598 2937\\n2251 9788\\n8164 4622\\n9790 1711\\n5472 4938\\n9238 7637\\n5329 8868\\n2532 7388\\n3053 5896\\n7373 1376\\n2410 2601\\n2624 9193\\n7139 3109\\n786 3164\\n5423 2207\\n471 6834\\n8425 3769\\n9629 2764\\n445 4066\\n9510 1331\\n389 7654\\n3956 3121\\n9443 7473\\n7160 2423\\n7738 1431\\n1260 9800\\n1661 3041\\n2104 188\\n6232 3782\\n4511 1356\\n601 3044\\n2477 662\\n367 2294\\n1021 9886\\n6229 7027\\n7585 4578\\n2395 3163\\n5046 6088\\n3283 8532\\n7331 7951\\n3878 8530\\n1665 1439\\n2629 2298\\n9350 2948\\n2675 7402\\n6834 7732\\n3302 3148\\n8003 3180\\n6905 4649\\n2219 1156\\n5893 8200\\n7122 4478\\n3691 1439\\n4050 9225\\n7746 6398\\n8862 7428\\n9851 4198\\n4840 1388\\n5207 6295\\n9628 5434\\n528 6652\\n4236 6538\\n3596 4634\\n9719 9541\\n5121 1349\\n6923 2991\\n8514 8890\\n9594 7630\\n3525 6454\\n3265 9304\\n9995 1925\\n5444 5849\\n1424 275\\n3224 1305\\n1911 9101\\n2432 2283\\n2924 8581\\n7611 2454\\n5220 9633\\n6478 2098\\n7784 1841\\n7096 1118\\n8097 658\\n5986 7748\\n9323 5866\\n9 5452\\n5876 9515\\n6086 3833\\n2748 5468\\n9149 8978\\n2892 4776\\n5785 4025\\n7288 6821\\n41\\n3055 4250\\n2473 9885\\n2806 2116\\n6548 3043\\n6139 8148\\n7853 8752\\n5226 2572\\n1547 7008\\n7719 880\\n8055 2268\\n866 196\\n4247 7150\\n7 1465\\n822 5574\\n814 1433\\n6754 9744\\n3652 5561\\n792 5558\\n7308 3954\\n675 1052\\n6087 3487\\n35 5791\\n3158 7554\\n9347 3734\\n7133 392\\n4648 7596\\n3151 9810\\n7437 7783\\n8289 4171\\n8921 1718\\n4788 7168\\n8479 1306\\n2511 3519\\n6576 8501\\n4366 4447\\n6930 6335\\n340 7874\\n8550 6134\\n2013 4959\\n8310 6955\\n2251 2309\\n194\\n8693 4912\\n5369 8299\\n5801 8404\\n260 7937\\n9451 8208\\n2571 367\\n6361 4295\\n6731 9167\\n2341 3391\\n7312 7874\\n1196 8518\\n5628 9548\\n2097 8054\\n9929 2575\\n6168 4555\\n7268 5644\\n3608 2324\\n946 9477\\n3813 7676\\n3406 6805\\n6934 6581\\n6585 3079\\n3295 431\\n1889 6480\\n2534 1734\\n9279 6555\\n2550 8453\\n194 4738\\n2814 7763\\n3843 1141\\n5064 787\\n8495 8602\\n2223 5888\\n4699 6981\\n6728 490\\n6508 4947\\n4275 3927\\n1568 8539\\n5435 2344\\n6323 3661\\n6073 6594\\n9686 9986\\n8998 6429\\n9543 6169\\n3089 6143\\n9866 8455\\n564 6912\\n3459 7904\\n9923 9645\\n4052 2155\\n5108 6739\\n1609 154\\n2585 4433\\n7978 6830\\n5052 5497\\n320 2781\\n7827 3188\\n8615 7567\\n5962 529\\n7190 8629\\n1917 6164\\n4440 8929\\n1575 1690\\n9570 5309\\n8291 5953\\n5248 2343\\n2029 5211\\n8868 9343\\n3205 6961\\n7767 4813\\n9918 5714\\n7510 1492\\n9051 3259\\n3582 5066\\n2998 272\\n5420 6075\\n6185 5683\\n8826 9951\\n8785 7134\\n6940 520\\n540 9098\\n2223 2653\\n8023 4437\\n9896 9154\\n202 1608\\n4465 2809\\n4267 5068\\n4657 9318\\n4208 3488\\n9487 9197\\n779 2968\\n7788 7115\\n4456 3092\\n9909 23\\n8123 7639\\n3391 3684\\n6142 5858\\n3499 161\\n8744 2578\\n604 348\\n9639 8516\\n7168 9580\\n1703 8229\\n1816 6642\\n4535 6181\\n8758 478\\n2692 1515\\n7206 7948\\n3400 4214\\n4515 6400\\n5541 227\\n7369 7388\\n2083 6572\\n8841 3031\\n8589 9669\\n4656 9591\\n4045 1077\\n10 53\\n4748 6911\\n9342 2456\\n7701 6651\\n6963 1448\\n2156 6159\\n8222 7235\\n833 2584\\n9885 837\\n518 2899\\n1959 6649\\n4179 9092\\n3212 775\\n7435 7807\\n8903 9370\\n6971 3954\\n9918 9954\\n9527 2342\\n9606 3887\\n8359 5742\\n6786 8114\\n3925 2664\\n124 6600\\n3345 4994\\n4595 5288\\n4918 5578\\n5210 9979\\n7382 2614\\n3403 7830\\n3699 2434\\n2593 8350\\n2163 7200\\n7170 5910\\n2858 9975\\n7849 9615\\n8736 508\\n7442 8947\\n7646 7302\\n3892 6536\\n1275 9883\\n5599 8001\\n3583 325\\n2853 9002\\n8895 464\\n1333 1175\\n5663 4326\\n6082 6461\\n5568 4496\\n5363 1845\\n5949 5095\\n598 2310\\n6878 2105\\n1397 8575\\n6065 924\\n1916 5732\\n2125 2399\\n1388 9738\\n1720 4047\\n7513 8943\\n5055 8364\\n6049 5513\\n7116 3737\\n5170 9061\\n368 5813\\n7101 9379\\n6977 765\\n4545 3939\\n5339 6618\\n5294 7761\\n3581 9840\\n4036 1659\\n55 7161\\n7889 5831\\n131 5456\\n1008 3987\\n5547 3612\\n3745 4969\\n445\\n9089 7808\\n3856 6113\\n3113 7358\\n3760 8624\\n3290 9231\\n3320 5191\\n6027 8362\\n4153 7604\\n3405 9677\\n8246 9847\\n9613 9779\\n9365 7405\\n3596 2616\\n6724 3041\\n36 6756\\n2677 862\\n3448 6855\\n2760 6549\\n4007 1880\\n7086 751\\n5623 4230\\n6362 2950\\n6847 3804\\n1856 4758\\n2745 3207\\n1292 193\\n1143 1957\\n4297 1641\\n2706 3134\\n8721 9764\\n6079 5691\\n2602 6861\\n1958 1649\\n8526 1780\\n127 8107\\n7739 6116\\n5650 6296\\n9582 1348\\n385 9678\\n5653 9958\\n3513 1435\\n1187 3423\\n3841 9821\\n6353 1878\\n5462 8929\\n1731 6278\\n8027 4182\\n2655 5041\\n2457 2751\\n5465 5009\\n9935 6563\\n7388 9483\\n2464 178\\n867 9965\\n5239 8088\\n819 3371\\n3797 7478\\n8086 8175\\n3618 8623\\n1788 8020\\n6313 193\\n2052 6251\\n9289 7548\\n6593 4902\\n6231 1699\\n8989 4098\\n8327 9374\\n4776 1880\\n8293 2438\\n9063 4673\\n4742 9417\\n6333 6082\\n7499 917\\n789 3627\\n4626 1628\\n1330 4808\\n3408 4767\\n9220 1613\\n4961 5130\\n3049 7810\\n7748 1231\\n9852 5565\\n7999 2671\\n7500 7332\\n72 2490\\n5594 7279\\n4531 4606\\n5961 5145\\n4211 3797\\n9657 5177\\n5811 5684\\n5913 761\\n6891 8479\\n5658 4130\\n1250 5945\\n1674 7320\\n8705 7347\\n424 9908\\n7257 3214\\n4384 7945\\n906 1078\\n7026 5126\\n4627 5827\\n5179 926\\n5184 3257\\n6442 6801\\n3364 2687\\n4653 2276\\n620 3315\\n2754 9101\\n5560 6987\\n5126 8370\\n841 515\\n9424 1088\\n556 8743\\n1121 5315\\n3614 5055\\n3784 6768\\n13 7464\\n9722 6833\\n3268 6532\\n1992 8785\\n9747 5394\\n3970 4712\\n4443 1774\\n3784 8426\\n5656 9749\\n6786 5730\\n5585 3182\\n5079 1903\\n8934 4169\\n9356 5715\\n8156 9446\\n3566 2589\\n9988 7632\\n2504 1441\\n4259 2040\\n3618 7769\\n1206 9890\\n4066 8869\\n2023 2817\\n7354 9873\\n434 6883\\n4145 3475\\n4178 310\\n1748 5383\\n1309 3094\\n5918 672\\n7142 4668\\n899 6943\\n7208 907\\n3662 4310\\n1854 6989\\n4111 110\\n6568 1233\\n19 2702\\n7643 1669\\n8286 3051\\n5340 9503\\n1839 756\\n6099 5554\\n7540 7552\\n5538 8309\\n4773 2753\\n761 6529\\n7947 4058\\n2040 9492\\n3641 7444\\n5887 1562\\n2707 8297\\n4047 7071\\n4769 7796\\n4788 274\\n867 2022\\n5660 2896\\n6335 6593\\n5536 6326\\n3813 3812\\n106 8376\\n484 1100\\n5762 362\\n3275 4974\\n8828 4966\\n3942 4322\\n5029 4242\\n3993 4556\\n3198 4833\\n8502 5823\\n4733 6843\\n1203 5189\\n5554 77\\n7941 9731\\n2208 5378\\n2470 4132\\n7892 2891\\n9379 8146\\n2320 3801\\n5282 7043\\n6254 1304\\n9154 8524\\n5442 4491\\n2113 2318\\n3157 698\\n6953 7369\\n9191 1466\\n2659 1195\\n8170 1216\\n4364 7062\\n5231 8556\\n2455 6577\\n3005 6315\\n8950 9285\\n103 6841\\n1976 3205\\n7746 9569\\n4236 2784\\n7711 2640\\n9011 7767\\n8721 6619\\n515 4743\\n2117 6256\\n9208 5705\\n9055 5068\\n9393 6273\\n9824 4796\\n2598 560\\n7237 9808\\n8356 8084\\n8268 9561\\n9391 454\\n2438 3547\\n8151 8904\\n4295 8620\\n4391 1365\\n194 2723\\n3629 642\\n6664 9769\\n4287 5823\\n4858 3734\\n7023 6480\\n6886 9623\\n8297 6064\\n9140 3261\\n8822 2463\\n3388 9585\\n865 1155\\n5252 2182\\n5436 1318\\n1080 1936\\n9351 3424\\n2736 7803\\n6709 999\\n2511 3111\\n4813 4251\\n9569 9902\\n2287 2469\\n7685 5760\\n9149 2777\\n4807 4771\\n7201 2767\\n7377 438\\n357 5353\\n2719 5281\\n9681 1035\\n9468 8744\\n4138 156\\n137 3633\\n9764 824\\n3760 2628\\n5193 1190\\n6696 7532\\n2841 8449\\n408 1106\\n167 1594\\n3517 134\\n4532 1808\\n4231 4006\\n9498 2149\\n2639 4652\\n4357 1541\\n598 8778\\n3791 5533\\n2168 42\\n695 2547\\n3058 7410\\n1323 6397\\n3626 2747\\n2228 8756\\n1372 3913\\n8066 9254\\n1244 5468\\n3583 1024\\n9238 9801\\n2228 4942\\n3581 3427\\n3901 3782\\n596 3542\\n68 2523\\n9672 1979\\n1505 6512\\n2573 1585\\n4726 4149\\n964 3814\\n311 9460\\n4844 1998\\n9828 5698\\n9319 5187\\n3522 8348\\n7181 1006\\n299 5415\\n2570 4355\\n5417 1053\\n3389 1303\\n660 9346\\n5370 916\\n203 6285\\n7169 9618\\n25 1110\\n4621 8388\\n9383 8294\\n6884 6215\\n2592 945\\n1016 8365\\n3251 6594\\n1791 4134\\n93 6674\\n2207 4409\\n5342 3209\\n1020 9507\\n1861 3272\\n1329 4047\\n4216 611\\n1112 3816\\n457 7826\\n9368 1450\\n9404 8435\\n7571 4845\\n5297 2131\\n9183 6677\\n4715 1912\\n4188 6713\\n9559 2613\\n7352 4838\\n1841 5586\\n2776 7668\\n9973 6345\\n1125 7469\\n3086 8387\\n7441 8283\\n7593 4262\\n6067 9956\\n1711 2687\\n2384 3786\\n6683 2701\\n1006 4414\\n9796 8152\\n5691 2942\\n9539 5607\\n5464 7049\\n5388 6612\\n5539 5401\\n5696 2851\\n6528 7509\\n4703 840\\n4113 5114\\n1477 3511\\n5860 3917\\n1457 9994\\n7079 2622\\n7466 6114\\n1209 7887\\n7419 4891\\n7766 993\\n4105 9890\\n3336 1404\\n7376 7984\\n8402 7043\\n5243 8122\\n8232 5689\\n8380 1492\\n4152 7767\\n8880 3666\\n7259 4579\\n660 2618\\n1845 8126\\n2444 6359\\n7500 4384\\n5647 1522\\n4974 1998\\n9504 6956\\n3583 6089\\n6976 3456\\n5869 8628\\n503 7694\\n5116 2452\\n4852 4079\\n3898 976\\n661 7426\\n2387 4241\\n5312 6429\\n9635 8622\\n1461 7399\\n614 5745\\n9048 6578\\n4625 5537\\n999 1694\\n1628 6271\\n3457 3212\\n6011 2105\\n8795 2182\\n7641 1481\\n6057 2757\\n2049 938\\n4967 5227\\n9236 3489\\n8545 6144\\n4181 1428\\n9865 7165\\n7421 5780\\n7726 5224\\n7279 3399\\n7203 728\\n34 862\\n2845 3627\\n4141 507\\n8661 5827\\n1439 7401\\n2514 8095\\n7180 3460\\n4835 2171\\n1339 9365\\n9370 3012\\n3607 6795\\n6628 1660\\n1979 5691\\n705 9924\\n6826 4290\\n8693 178\\n4088 186\\n7289 4082\\n1594 9712\\n5983 1043\\n1771 9365\\n3551 2500\\n8972 3567\\n845\\n9216 4945\\n1765 1957\\n1975 95\\n1575 3676\\n9153 8791\\n3486 9693\\n4013 9933\\n2719 3140\\n2688 2483\\n2198 8796\\n2306 7170\\n3917 5345\\n6023 2236\\n4773 3229\\n2004 3487\\n5762 2450\\n9023 9908\\n5562 1312\\n7097 5805\\n8729 3811\\n8603 6394\\n2255 5286\\n7412 8792\\n3034 5619\\n3996 4027\\n5166 2355\\n9696 9812\\n7825 3812\\n2307 673\\n755 2594\\n3523 808\\n2000 9340\\n2784 3340\\n221 5121\\n8639 8334\\n2308 9524\\n4306 7879\\n4531 402\\n3471 8939\\n9694 1522\\n8137 7539\\n368 2274\\n4626 983\\n5964 3110\\n2773 7501\\n2844 528\\n2327 6500\\n1641 615\\n8904 9964\\n7439 3232\\n9004 331\\n2434 4673\\n7725 7242\\n2744 4655\\n5528 5332\\n9228 7833\\n7243 9975\\n4134 3482\\n1857 2247\\n7236 8300\\n1543 7566\\n2044 5263\\n439 4946\\n5941 4446\\n4294 6697\\n8682 1374\\n1702 9698\\n1235 5966\\n1335 5074\\n9934 2096\\n5826 4384\\n6562 63\\n5763 8424\\n566 8674\\n733 4020\\n1722 2174\\n5401 5986\\n63 8653\\n9324 4093\\n6123 5648\\n531 8809\\n8267 4902\\n2117 9945\\n969 1037\\n6564 3059\\n6062 8098\\n3523 5486\\n4187 2801\\n3392 4535\\n988 1234\\n2117 9163\\n332 9401\\n4299 8591\\n6150 6049\\n6893 2341\\n6870 1277\\n5723 4539\\n4019 4786\\n5481 7891\\n8117 5979\\n5434 7439\\n1588 626\\n6347 5307\\n1336 5859\\n4733 1083\\n827 3682\\n36 872\\n284 8446\\n3846 8806\\n2993 8662\\n1176 7478\\n7966 5109\\n7264 8734\\n350 493\\n4847 4402\\n5537 4214\\n369 9672\\n2000 6313\\n5925 9421\\n768 3229\\n851 4960\\n6554 8683\\n9456 4720\\n6357 7970\\n2075 3350\\n9876 6041\\n688 3192\\n7052 8047\\n520 7067\\n8910 6711\\n7883 427\\n7551 1636\\n2429 8106\\n1430 2799\\n6736 1487\\n5145 6539\\n1793 5019\\n3735 9296\\n9913 3504\\n7734 5209\\n7524 324\\n9243 2874\\n817 9429\\n5475 226\\n1840 8273\\n6827 1904\\n6232 9147\\n5237 7340\\n7687 399\\n3471 5899\\n8411 7332\\n6634 1242\\n9467 7956\\n4896 5028\\n5532 6897\\n7945 1914\\n4593 9835\\n3854 3702\\n4690 2856\\n3785 6393\\n7520 666\\n7477 9573\\n999 4529\\n860 6041\\n5125 9975\\n6719 7863\\n8865 7146\\n8092 4464\\n4237 7724\\n9408 646\\n2843 234\\n4995 5200\\n200 6035\\n5659 6070\\n2099 6454\\n2147 4096\\n2736 9894\\n1944 4683\\n2385 779\\n1959 3222\\n6262 2170\\n1266 3329\\n6983 4256\\n8597 8812\\n8982 4442\\n3040 1714\\n557 9780\\n6258 9206\\n2726 2472\\n6739 9103\\n8167 1084\\n1481 9346\\n5198 5054\\n7346 3553\\n8855 3453\\n982 3962\\n8764 5928\\n3593 3959\\n7622 4356\\n2182 3236\\n790 4185\\n8510 9864\\n254 8869\\n3116 9560\\n1620 9303\\n3965 666\\n6896 2414\\n8523 9404\\n4377 5540\\n4714 9742\\n9786 6106\\n7387 7146\\n4553 1234\\n1594 822\\n447 9885\\n9621 4538\\n4088 2437\\n7830 2433\\n2118 8900\\n8070 5225\\n5131 3848\\n602 6428\\n2537 1030\\n3998 1587\\n329 3956\\n9731 2439\\n1826 8372\\n4587 3180\\n7769 410\\n1813 681\\n3835 4084\\n5956 9664\\n4435 5723\\n6607 4447\\n1956 8284\\n5215 7718\\n2088 7525\\n7905 8836\\n9613 9052\\n9528 7485\\n4914 922\\n7006 2529\\n74 8672\\n4437 7680\\n152 1695\\n2342 1881\\n2748 737\\n9540 1067\\n5407 3487\\n4587 4380\\n3594 2437\\n3079 7289\\n2052 1093\\n9362 1457\\n4543 6583\\n528 258\\n5948 3064\\n4663 7821\\n2821 1008\\n2354 6642\\n7829 5761\\n3564 2022\\n2380 6309\\n7535 6982\\n5358 1119\\n7215 8559\\n3589 6567\\n906 6937\\n9731 9886\\n4956 5042\\n2987 6172\\n1604 6448\\n954 6415\\n2735 3918\\n6786 9989\\n1496 9613\\n6102 7841\\n3033 8993\\n6231 7475\\n1751 8787\\n9334 5117\\n6690 8510\\n1625 9844\\n1548 2899\\n749 5994\\n6574 1691\\n3279 6759\\n1815 9182\\n2862 1247\\n9327 7979\\n5483 3589\\n1410 6647\\n2173 5262\\n4885 1059\\n9719 4044\\n4242 2332\\n4948 8251\\n1355 5001\\n4996 9047\\n9963 8233\\n8595 3541\\n1580 650\\n2470 8590\\n7782 3062\\n4047 1282\\n1052 6715\\n9322 2647\\n76 4034\\n8230 9228\\n9979 1471\\n8306 885\\n2168 9131\\n6002 6934\\n6117 2280\\n6419 4870\\n7573 7276\\n6120 8830\\n3761 628\\n5685 8566\\n9412 5326\\n340 5182\\n4406 7991\\n5483 7440\\n9544 5621\\n3051 7854\\n8336 1779\\n1180 6740\\n9048 6008\\n6230 2412\\n7757 1708\\n690 1230\\n1195 83\\n1158 4341\\n6819 7037\\n6601 4366\\n5833 1658\\n830 4976\\n5239 2038\\n677 3170\\n2594 7728\\n2871 5497\\n9543 8983\\n5182 298\\n2753 193\\n2379 4150\\n3863 5212\\n2414 8201\\n9935 1709\\n5866 4521\\n4186 9474\\n1191 5873\\n8184 5667\\n2272 4426\\n4328 187\\n3359 9800\\n2064 1277\\n4503 8053\\n5582 255\\n2882 9303\\n7649 8446\\n6072 896\\n4937 4907\\n4702 7942\\n304 2537\\n8388 6198\\n8149 8968\\n284 1737\\n1917 9473\\n4549 4651\\n4671 7274\\n6738 9854\\n5433 4978\\n413 8957\\n6192 5218\\n6491 9715\\n5365 1669\\n5706 3515\\n6733 7751\\n6763 5048\\n2499 6712\\n1200 4139\\n8695 2333\\n3108 8083\\n7939 3924\\n6403 5420\\n4424 2429\\n8597 933\\n5161 3544\\n2092 7299\\n3755 1142\\n4585 3407\\n2124 6365\\n7473 4031\\n5454 4307\\n3744 2776\\n6088 1519\\n6979 4202\\n1201 492\\n442 453\\n9807 2601\\n1404 758\\n1218 4577\\n2197 4853\\n7986 6458\\n7500 2557\\n9763 1807\\n6892 872\\n6499 5830\\n4109 7213\\n398 6996\\n4546 8865\\n5862 4805\\n3042 2629\\n7821 357\\n6138 4505\\n897 3693\\n7084 2911\\n5668 3960\\n2420 6903\\n6711 164\\n770 5051\\n6600 2038\\n9127 8524\\n9115 4364\\n4340 5969\\n3815 4736\\n320 4271\\n1365 9369\\n2939 6382\\n6967 3289\\n3526 7736\\n3255 9417\\n4243 5229\\n7294 4351\\n9653 8306\\n5348 9056\\n3504 1009\\n3813 8350\\n2133 4703\\n3857 8636\\n5782 2502\\n4692 3597\\n9640 731\\n5425 135\\n670 3059\\n5678 7845\\n1678 7550\\n3673 6794\\n3393 8131\\n8420 7692\\n9432 224\\n197 3916\\n4504 4821\\n102 6975\\n1058 1757\\n5009 4294\\n6201 9626\\n4288 5442\\n1318 2288\\n4713 6450\\n7590 2726\\n1870 9189\\n4326 2525\\n2049 7892\\n4487 1262\\n9451 5097\\n6017 5377\\n1202 6592\\n2835 3792\\n308 3779\\n2089 5744\\n9570 5445\\n224 3611\\n9713 9706\\n1328 5736\\n391 4984\\n9691 5844\\n2731 8161\\n5341 2302\\n2975 5057\\n1689 1070\\n7006 5089\\n9510 6082\\n7531 1892\\n8700 8156\\n4889 740\\n6444 3894\\n2490 7039\\n2423 9885\\n8159 1611\\n5743 7696\\n4292 4491\\n9292 3595\\n1337 7523\\n2919 3800\\n7671 9994\\n6127 6343\\n8673 632\\n676 5917\\n1949 2043\\n6944 3519\\n4758 8248\\n4040 5462\\n7690 8660\\n9129 6256\\n2027 9529\\n2761 4882\\n5052 7999\\n9593 8697\\n4077 763\\n3124 441\\n8090 2535\\n2908 9830\\n26 3641\\n9812 6568\\n9453 7868\\n7976 173\\n4481 4807\\n6128 5742\\n3673 2793\\n6069 9140\\n2507 9659\\n2519 3931\\n4444 9795\\n759 4414\\n7486 6345\\n3528 8571\\n616 1636\\n3643 8411\\n6501 1063\\n8475 1227\\n1391 2871\\n2397 1751\\n7899 2549\\n3293 9408\\n7869 6268\\n1263 2262\\n7361 9008\\n1889 5247\\n8106 3672\\n1340 9243\\n642 6091\\n5276 2578\\n9746 5404\\n1906 6980\\n588 7291\\n8989 5536\\n8905 9351\\n5771 8069\\n9785 1795\\n5679 9163\\n7183 5915\\n8919 5266\\n6581 2686\\n6806 2675\\n5148 3253\\n4218 9964\\n1311 930\\n3513 1975\\n3122 3267\\n9243 9402\\n7726 5677\\n4521 8854\\n7242 2183\\n6371 568\\n2781 3183\\n4232 6231\\n7879 913\\n4354 7373\\n7709 8022\\n7968 7644\\n2139 5145\\n7982 3653\\n8961 8311\\n3276 8085\\n2791 6039\\n6111 4226\\n7952 1445\\n8310 9393\\n729 925\\n3716 2242\\n1045 6383\\n7982 673\\n3943 814\\n6387 7321\\n1270 2576\\n4935 1340\\n7046 9500\\n9264 7313\\n2496 743\\n2134 7844\\n4492 9033\\n2622 6821\\n7990 2758\\n7471 1559\\n9350 4984\\n7757 9235\\n6533 5202\\n3478 2799\\n8773 830\\n6132 9057\\n8670 7041\\n9667 1956\\n7893 9275\\n9477 8687\\n8507 7529\\n3405 9547\\n1187 7469\\n1319 9180\\n7240 4550\\n5629 2091\\n8477 7613\\n2483 3557\\n3472 7986\\n3326 2955\\n477 7330\\n2252 606\\n5331 9287\\n7269 4202\\n1677 3348\\n7848 8110\\n3865 8491\\n4600 164\\n543 4832\\n5206 9779\\n7868 8544\\n9945 7841\\n6405 1765\\n215 9109\\n7147 7001\\n5308 6587\\n3989 1325\\n5622 1205\\n9639 9527\\n6719 1785\\n2870 8310\\n3776 9030\\n2710 4371\\n2156 9204\\n8682 8528\\n7809 6056\\n6770 2400\\n1274 1575\\n9759 5070\\n6885 2555\\n4117 7523\\n4474 2237\\n9243 6239\\n7639 3169\\n5700 2405\\n1160 9688\\n5392 4909\\n9157 4613\\n1855 9139\\n3947 952\\n339 7605\\n2082 613\\n9194 8398\\n488 4131\\n6620 2355\\n4324 9100\\n112 1207\\n6647 3376\\n500 3021\\n9171 2579\\n1752 6578\\n8921 8737\\n63 2199\\n9637 4697\\n172 6571\\n4947 3864\\n3050 2414\\n555 9508\\n9414 1736\\n2678 9857\\n6385 2302\\n374 621\\n8449 6696\\n7058 1522\\n2889 6636\\n6753 3404\\n9050 8314\\n9323 2543\\n2854 5686\\n6933 6878\\n5711 1173\\n9868 9376\\n6936 5940\\n7865 6660\\n1354 9181\\n564 1645\\n6020 5161\\n5123 1403\\n9333 3995\\n462 9513\\n6604 5761\\n504 9652\\n7997 6543\\n9022 1984\\n5787 6441\\n4264 1127\\n7681 2251\\n8805 574\\n9264 7989\\n6226 6623\\n4601 4212\\n7668 6956\\n6621 4395\\n6568 270\\n5794 3239\\n1957 4805\\n9297 637\\n4203 3004\\n8787 8443\\n3638 5385\\n7393 4101\\n5660 7343\\n6876 5177\\n622 8977\\n3340 7291\\n6494 2042\\n8094 6569\\n4763 891\\n3560 8436\\n7727 695\\n7899 8372\\n3101 1069\\n821 7833\\n9647 1752\\n4326 8811\\n5453 2108\\n5124 689\\n8689 1777\\n8001 3814\\n7780 5611\\n5121 3403\\n4758 3425\\n3130 240\\n5494 4430\\n5543 4586\\n2462 1820\\n7783 767\\n6776 7429\\n8699 4018\\n22 5261\\n5344 8691\\n3801 1223\\n3184 1153\\n1066 2320\\n7114 7016\\n2425 7349\\n5323 9005\\n3051 1499\\n922 2390\\n3232 5078\\n3236 6908\\n572 2498\\n1084 8135\\n286 1439\\n3711 2029\\n1566 4035\\n7009 9624\\n3378 252\\n1535 52\\n3180 5215\\n3603 7310\\n9731 8579\\n9327 8795\\n200 7146\\n8057 2603\\n6034 4737\\n7595 778\\n1296 9874\\n1089 596\\n779 191\\n9681 5211\\n6726 4053\\n5925 6377\\n1252 8662\\n327 7261\\n2072 2592\\n6014 831\\n9184 8714\\n8091 587\\n1224 9870\\n7032 8231\\n9930 5052\\n6250 540\\n7436 2403\\n6111 891\\n4364 7336\\n965 9713\\n6565 9468\\n8995 6381\\n933 3404\\n5774 3585\\n8778 1600\\n3589 5400\\n2148 118\\n7550 2798\\n6124 7623\\n6379 5469\\n2309 2714\\n3199 9716\\n5300 1594\\n8522 5599\\n4737 9088\\n1642 9036\\n4418 5982\\n4525 1188\\n7317 5879\\n6388 7309\\n3337 549\\n1764 4749\\n4685 4061\\n2382 9831\\n2708 5050\\n9980 2284\\n1772 6777\\n3093 2142\\n7814 8093\\n6071 5889\\n9040 3016\\n1472 2346\\n604 9131\\n8312 8275\\n5021 2349\\n2743 4877\\n1171 5568\\n4080 8318\\n4291 3667\\n9572 9783\\n3033 9288\\n8106 7510\\n2907 5853\\n3091 9378\\n9554 582\\n9755 7241\\n6142 9208\\n3846 9504\\n671 7871\\n1793 3763\\n7013 8543\\n2250 3493\\n3692 3894\\n815\\n5083 4605\\n5287 120\\n1711 6822\\n6530 852\\n3254 6249\\n7548 2579\\n5153 2022\\n8974 1860\\n4565 2755\\n9999 6490\\n638 5109\\n5065 491\\n2593 7435\\n2206 64\\n7479 5160\\n3603 3851\\n5687 4072\\n5309 6648\\n3022 636\\n5664 2914\\n9012 1868\\n7365 9089\\n7537 9193\\n5483 528\\n8879 3851\\n1423 1662\\n112 846\\n4917 7712\\n4578 2273\\n6861 3711\\n7895 7247\\n1863 6965\\n6983 6425\\n4793 2133\\n921 8043\\n7394 6132\\n7932 3938\\n6217 823\\n1243 2384\\n2843 114\\n5337 8537\\n4076 6117\\n4566 1691\\n5638 9909\\n2311 933\\n6694 5752\\n4912 4230\\n115 1409\\n5310 6858\\n2681 6092\\n3334 3593\\n9403 7152\\n9482 626\\n7467 8724\\n2176 1089\\n4797 2714\\n5101 8397\\n1670 8925\\n3815 8165\\n1751 2626\\n7600 2068\\n296 3485\\n9014 7345\\n2326 6726\\n6439 2943\\n8585 5569\\n8970 4598\\n1582 3441\\n8593 4289\\n7653 3193\\n28 39\\n2471 9183\\n1326 512\\n2098 7153\\n783 3085\\n2702 5378\\n1872 541\\n4651 3183\\n5729 2346\\n9034 2765\\n9636 3969\\n5354 456\\n9826 893\\n6870 3461\\n9080 2336\\n3289 3467\\n5763 7397\\n4660 2473\\n8051 6958\\n3133 3114\\n6132 4869\\n5991 215\\n2184 4702\\n9516 6330\\n7832 9813\\n3558 1455\\n7851 7614\\n3288 4502\\n2804 8007\\n4429 4455\\n9494 632\\n7842 4052\\n3579 2469\\n1230 6704\\n4508 6311\\n6870 6024\\n8767 2830\\n9399 8082\\n9097 2306\\n2668 9491\\n2691 5568\\n2351 3571\\n8640 4294\\n5932 7409\\n2843 713\\n165 1112\\n6560 7295\\n381 3921\\n8084 6231\\n6986 6622\\n7886 2694\\n1573 6095\\n6565 7275\\n3799 9190\\n3328 9589\\n3211 4508\\n5534 5796\\n6198 4601\\n1331 4829\\n4524 8423\\n5233 631\\n8347 3502\\n7105 411\\n3405 345\\n3951 4930\\n18 8998\\n6755 2926\\n8754 2385\\n233 101\\n4577 202\\n3914 4366\\n3206 2489\\n654 1603\\n5871 4481\\n603 2479\\n3923 7796\\n4263 8766\\n3617 2444\\n8956 7198\\n886 8484\\n7408 6467\\n7187 3815\\n9989 3840\\n3241 5173\\n4555 8232\\n3523 7674\\n9948 2501\\n2573 7457\\n362 8199\\n4635 8350\\n5303 9318\\n8664 6256\\n3902 6585\\n2662 5191\\n9424 5222\\n6289 4852\\n2514 7015\\n5662 7678\\n6488 6666\\n6577 2395\\n4038 5897\\n2441 4057\\n7712 3485\\n1275 2520\\n3448 438\\n70 6871\\n4346 3919\\n3127 4463\\n4329 411\\n406 3399\\n6474 9730\\n1721 1711\\n2848 1937\\n3055 8250\\n2302 6711\\n1055 9657\\n7893 8411\\n6932 3546\\n9719 6886\\n7528 3024\\n5320 3403\\n3188 3670\\n1537 4101\\n4641 1678\\n4031 3201\\n487 2170\\n1580 4600\\n6949 7697\\n8117 6703\\n532 3552\\n4102 1069\\n269 5128\\n5440 3994\\n6118 9805\\n3133 7093\\n2965 3122\\n1532 5856\\n4955 7880\\n9298 9738\\n4536 1214\\n1917 7135\\n8024 4030\\n7908 3905\\n4222 5443\\n2804 6803\\n3022 2883\\n6568 2439\\n8592 6746\\n6158 7409\\n3298 7243\\n221 3241\\n5062 9859\\n5543 7529\\n3842 2671\\n557 423\\n6838 8898\\n4341 8854\\n2211 4887\\n9468 5634\\n5009 8420\\n5097 1778\\n5298 4426\\n7187 4264\\n266 4239\\n4865 3468\\n5427 5311\\n3776 5900\\n9495 4243\\n744 7895\\n1034 1638\\n4806 588\\n4786 5440\\n9977 3328\\n4585 7584\\n5520 7511\\n3198 1456\\n5105 9631\\n6606 8351\\n8754 2825\\n8057 7399\\n8788 2885\\n8982 4362\\n6514 3327\\n3111 212\\n119 9995\\n6359 3817\\n807 7144\\n6603 6663\\n1807 5068\\n2234 3138\\n3147 1660\\n6021 3125\\n3137 7177\\n5922 9056\\n3463 6027\\n5833 2304\\n3515 3408\\n4410 3507\\n1530 6651\\n1082 5143\\n222 8430\\n4588 267\\n4130 932\\n4242 8031\\n1015 6895\\n412 9786\\n3413 1619\\n2194 376\\n7581 794\\n6242 3062\\n5419 6275\\n117 2845\\n9448 905\\n7982 6069\\n3076 2650\\n9758 1807\\n9087 2328\\n4874 2292\\n750 5381\\n7406 6105\\n845 4324\\n2129 9860\\n4171 4375\\n2777 5100\\n4986 5558\\n1644 4447\\n2495 3277\\n1548 6714\\n5888 9700\\n5751 1463\\n6571 3140\\n2788 1868\\n8189 8348\\n8293 3389\\n6012 3013\\n1735 6776\\n188 128\\n7498 1827\\n7006 6162\\n5224 8979\\n9157 6735\\n3076 319\\n2144 8294\\n3754 8965\\n1992 5562\\n8016 6877\\n7330 2315\\n2440 7286\\n4711 8229\\n7590 7711\\n3277 6834\\n9729 4231\\n3374 3035\\n7681 8706\\n5480 7674\\n4635 3229\\n3503 4175\\n6426 8332\\n6849 3057\\n337 6766\\n37 3023\\n9915 8049\\n2471 1986\\n32 8472\\n2726 9939\\n3559 496\\n7264 4534\\n7862 8188\\n8981 4121\\n9750 9439\\n8426 3276\\n8657 6207\\n6738 7697\\n3265 9478\\n9362 3390\\n997 2331\\n8597 3803\\n9098 2424\\n960 8596\\n732 3377\\n3983 7764\\n8405 6\\n5462 4837\\n1638 8690\\n7469 8523\\n1803 2910\\n9801 5915\\n1990 6535\\n1822 5602\\n907 9764\\n5825 6133\\n9995 5868\\n72 8357\\n4315 9857\\n6963 1495\\n4865 6538\\n3544 9973\\n7687 2502\\n6654 1366\\n4891 3907\\n944 9150\\n2494 945\\n439 7828\\n4221 1715\\n5258 7464\\n4492 6953\\n5756 3518\\n5770 2054\\n2998 3688\\n423 1941\\n7668 8488\\n799 8757\\n3030 5237\\n9009 6809\\n3521 1875\\n9518 6329\\n2075 8278\\n4538 1347\\n9215 5695\\n9801 6705\\n5067 9766\\n4322 82\\n1649 8106\\n8511 3566\\n2472 3914\\n7969 7455\\n4539 9717\\n7842 6635\\n4470 6240\\n666 5017\\n1583 955\\n2356 5292\\n52 7269\\n9338 4046\\n9571 9906\\n386 1338\\n7360 170\\n3236 2102\\n2670 9965\\n4891 2881\\n5405 396\\n8247 9936\\n9221 1547\\n8785 2526\\n1113 1663\\n6686 1040\\n7510 9013\\n7119 8715\\n2934 7255\\n2983 3930\\n8038 9171\\n1326 7592\\n9312 8579\\n2518 8717\\n6901 7750\\n5699 8743\\n8321 5248\\n6922 1600\\n7792 3820\\n6648 9103\\n4876 499\\n7285 5557\\n5256 6547\\n831 2563\\n2038 6083\\n4258 397\\n1200 8964\\n7788 9288\\n1286 6545\\n2739 9635\\n7040 8052\\n9145 3230\\n8670 4552\\n4496 5817\\n2634 6406\\n9176 7232\\n5619 3583\\n9303 1150\\n9047 2632\\n2617 2794\\n3294 1552\\n8444 3463\\n2190 2585\\n8599 9124\\n2742 547\\n6290 8206\\n9231 55\\n2105 4440\\n2548 8130\\n1457 8559\\n991 5098\\n7611 2921\\n5138 5167\\n1883 4692\\n183 1181\\n1285 2302\\n9318 2483\\n5478 2779\\n878 3857\\n325 4598\\n9095 1750\\n9238 7976\\n4848 4308\\n334 4532\\n1333 1316\\n2282 1249\\n1516 9895\\n1080 6949\\n1034 9725\\n922 7882\\n6738 3364\\n877 5486\\n3620 9608\\n3355 872\\n3151 3088\\n2023 300\\n7488 2439\\n8943 3780\\n7278 5324\\n3749 1738\\n7268 7195\\n5837 5742\\n5139 5151\\n485 8071\\n7662 7356\\n6230 3535\\n8493 3708\\n8209 3869\\n6350 3959\\n2649 2899\\n1021 396\\n3402 2356\\n3665 7901\\n543 7261\\n6453 7487\\n9241 3861\\n3468 3975\\n8612 6727\\n7393 2093\\n5970 4988\\n4471 4031\\n1045 461\\n4696 6615\\n4515 9942\\n7037 1002\\n4190 5737\\n7366 2482\\n7223 2839\\n8553 2908\\n2239 8992\\n8736 7315\\n6262 3824\\n5898 8785\\n6783 2899\\n2686 8500\\n8719 8489\\n3460 1935\\n6468 3905\\n3191 1628\\n9104 7225\\n6266 4546\\n663 570\\n4646 5734\\n9382 2360\\n7691 1938\\n9742 4499\\n7634 8124\\n6708 5697\\n5756 2089\\n8016 5893\\n4515 5848\\n4257 4368\\n6011 7768\\n2929 1105\\n3262 6732\\n4693 4662\\n5392 8185\\n2965 6818\\n981 5224\\n9386 9356\\n7917 7237\\n8932 9328\\n3733 8752\\n5733 3239\\n1335 6749\\n9945 4513\\n1630 2787\\n9734 5652\\n4664 7406\\n8320 9273\\n7332 213\\n5562 8175\\n9428 4114\\n529 9068\\n3931 8194\\n2461 8173\\n6273 2122\\n856 1645\\n2478 1799\\n622 3220\\n2432 1952\\n1586 4147\\n8162 1998\\n9557 8404\\n7958 2534\\n4910 2465\\n1079 6124\\n5998 4601\\n429 790\\n7612 6026\\n1175 8022\\n9231 1493\\n7931 5892\\n9939 4482\\n2601 7336\\n5770 9277\\n5336 8019\\n2344 2244\\n8531 590\\n5729 4097\\n7967 9743\\n7231 9922\\n8128 4339\\n1933 860\\n3707 6648\\n6657 5018\\n4205 8856\\n5305 6712\\n4901 9127\\n3939 3585\\n4826 679\\n3031 7148\\n4995 2148\\n5446 1349\\n9125 4775\\n3784 3707\\n5352 743\\n2888 9754\\n210 2237\\n9384 9093\\n7688 6234\\n7986 4658\\n6588 7015\\n5200 6130\\n8863 653\\n6790 2029\\n7907 4434\\n5083 8586\\n2193 5267\\n6369 6654\\n8725 2764\\n4841 1441\\n2678 9601\\n838 4995\\n7804 8252\\n3733 4856\\n4818 5049\\n269 3427\\n7014 3330\\n9213 9959\\n8901 7144\\n5388 4632\\n2663 6602\\n8004 9485\\n7915 501\\n2623 7874\\n4872 8564\\n3781 5919\\n1766 9181\\n7153 2788\\n986 6215\\n2309 1196\\n2936 9030\\n1045 358\\n4224 6211\\n5026 7319\\n6178 1524\\n1179 3617\\n3429 1795\\n843 2448\\n5805 8755\\n5021 4187\\n8073 187\\n4433 8741\\n8698 326\\n4360 8937\\n234 2426\\n1781 9019\\n9299 9077\\n4179 5127\\n1753 3082\\n8867 8054\\n8384 7275\\n9591 8949\\n1272 2533\\n145 4222\\n8840 8507\\n7174 7991\\n1653 9095\\n7956 1483\\n6436 1662\\n1488 3425\\n2029 9061\\n4742 143\\n3747 6794\\n2812 7333\\n9334 6826\\n1399 3891\\n9824 5688\\n923 9611\\n8240 1894\\n9861 1523\\n5961 4325\\n9571 604\\n3473 4417\\n3023 1133\\n3548 7631\\n8502 4493\\n9186 3947\\n6087 3505\\n1957 5945\\n3168 8371\\n741 1809\\n8039 9576\\n5221 9060\\n70 3237\\n1562 1511\\n8631 9622\\n4845 7799\\n5834 1614\\n5233 8853\\n6787 6273\\n9743 9972\\n4271 115\\n5953 3081\\n1252 6441\\n6758 9124\\n2683 2461\\n661 8881\\n8752 5468\\n2252 8785\\n8708 3449\\n7509 331\\n91 343\\n8221 9304\\n3465 8364\\n1234 6038\\n9991 6563\\n5817 6057\\n9473 4752\\n58 9926\\n829 7252\\n2088 7458\\n8583 1942\\n1641 7406\\n3499 24\\n4210 5296\\n2676 9940\\n340 6709\\n4546 3630\\n2772 3053\\n694 1725\\n9960 5815\\n699 8978\\n5375 2820\\n5502 9332\\n8957 4894\\n4024 1935\\n4109 6189\\n9175 7799\\n7896 7046\\n1850 2464\\n9259 7918\\n2432 8577\\n5550 3329\\n3690 7941\\n7508 7097\\n2107 2746\\n7824 5289\\n7905 4368\\n8944 5395\\n4981 1261\\n9234 6810\\n6853 3120\\n7188 3257\\n4620 5107\\n8164 7829\\n2067 900\\n4773 6499\\n2810 7377\\n172 974\\n4839 4117\\n7939 3918\\n151 9755\\n8590 2264\\n6316 7935\\n3726 2217\\n8661 6339\\n5124 2438\\n7743 5515\\n326 8455\\n3948 7878\\n6916 115\\n9957 636\\n4299 4405\\n8420 6414\\n3617 1018\\n3104 7258\\n5132 6076\\n9688 1186\\n5996 1558\\n9947 6131\\n6315 9076\\n7748 6230\\n8021 1594\\n1279 2408\\n7011 7741\\n4779 8079\\n2590 3985\\n81 1888\\n1556 7368\\n5791 2995\\n4782 6194\\n3475 1975\\n9130 169\\n4104 9828\\n9635 6536\\n3066 7450\\n7260 3605\\n8295 7456\\n8503 9107\\n2109 5482\\n4004 5145\\n4798 1341\\n7907 4186\\n9660 2588\\n1321 9483\\n7850 4810\\n3001 6782\\n9460 9916\\n9841 7526\\n2559 693\\n2794 7438\\n286 4093\\n672 8018\\n923\\n1127 2822\\n9373 3393\\n663 6907\\n817 7879\\n4583 9629\\n5036 7686\\n711 2004\\n4066 4489\\n2470 9915\\n342 3475\\n9692 6349\\n1900 3333\\n6927 1688\\n634 9963\\n7422 4104\\n7445 1240\\n7745 8711\\n8794 5405\\n1468 8314\\n942 3866\\n6637 9404\\n5467 8064\\n1570 461\\n1836 7933\\n4061 6061\\n3768 2492\\n1274 3280\\n5560 2188\\n3792 2719\\n1497 5523\\n2490 2566\\n3059 8686\\n5977 4379\\n1353 1996\\n365 6375\\n5783 3923\\n7830 176\\n8438 4663\\n4143 3058\\n9339 5137\\n6638 7948\\n9993 5691\\n4203 3169\\n7522 3651\\n9650 4805\\n2005 678\\n3030 9353\\n3025 9082\\n208 7452\\n6293 9096\\n9277 1609\\n381 6356\\n2244 6967\\n7564 3699\\n1831 6864\\n3380 6627\\n2821 436\\n3575 9370\\n2354 2421\\n3263 1348\\n6588 8002\\n6038 3292\\n8990 5039\\n6024 9340\\n7351 8353\\n3865 5168\\n3687 3840\\n8289 1310\\n2610 7127\\n7341 3149\\n4838 9601\\n3476 7922\\n9348 5055\\n167 8177\\n1482 1489\\n8776 4889\\n7230 3428\\n9563 4754\\n2899 1495\\n1337 2351\\n5843 5621\\n8459 6248\\n1605 4541\\n2421 5545\\n4113 444\\n5257 3532\\n667 4331\\n3331 1103\\n1328 7262\\n9237 2773\\n2714 1462\\n9357 212\\n1425 6544\\n4061 3592\\n4786 9990\\n1538 3776\\n2514 5185\\n402 6370\\n6112 5337\\n6730 7341\\n1142 207\\n8827 3294\\n6565 3250\\n1170 2978\\n6015 555\\n3862 1258\\n3800 744\\n2333 3169\\n4529 451\\n4006 4434\\n3309 9792\\n5806 1753\\n2376 5902\\n3171 1732\\n6352 4029\\n4519 2037\\n1188 346\\n4575 2024\\n6331 2913\\n2428 4513\\n6877 4223\\n8101 5509\\n1354 4849\\n5178 4495\\n8784 1296\\n7521 8761\\n9793 6630\\n9166 2079\\n1789 860\\n4096 3348\\n5971 170\\n1024 4913\\n1436 884\\n1126 9992\\n7305 1100\\n2131 2214\\n7044 9793\\n5387 9206\\n1246 5879\\n9614 8993\\n5016 7618\\n9771 9084\\n5844 9670\\n2136 4256\\n5419 2943\\n891 1193\\n5689 9513\\n9773 4043\\n5295 8714\\n1942 4100\\n4452 7129\\n8395 2174\\n5489 2553\\n5862 1036\\n9230 1690\\n8048 1468\\n9228 1738\\n4874 211\\n5709 675\\n4922 3658\\n6601 8944\\n1912 7284\\n3505 7292\\n3940 905\\n3834 6233\\n6755 9481\\n5832 7043\\n7894 7017\\n4103 3270\\n3126 2585\\n4152 8280\\n1748 6380\\n5233 1499\\n5120 9041\\n4357 5445\\n3715 659\\n2783 1868\\n1514 7653\\n4791 4796\\n2941 7528\\n3691 9521\\n7403 4701\\n1911 4924\\n9768 6227\\n2877 5645\\n3282 7213\\n2656 8072\\n4795 4720\\n5722 161\\n2330 6227\\n8809 4627\\n9053 275\\n7806 1068\\n2327 9240\\n4297 717\\n8682 7332\\n6696 436\\n1242 5110\\n8640 3201\\n1156 1684\\n5094 1778\\n1947 4576\\n7740 2995\\n6814 4483\\n3239 281\\n8936 4700\\n8919 9666\\n3331 6263\\n9588 7158\\n8771 3723\\n1499 9266\\n2326 571\\n2459 2214\\n9388 1377\\n5905 9624\\n2978 8865\\n7679 7778\\n1157 973\\n5475 7471\\n1254 8785\\n7297 1958\\n2917 9519\\n3574 5773\\n2341 409\\n4136 2532\\n205 1409\\n4694 8303\\n642 4794\\n2427 2910\\n7918 3523\\n6639 755\\n3889 7181\\n4941 2737\\n6546 2326\\n3378 148\\n6802 5250\\n6865 7133\\n3605 2571\\n7734 5900\\n5973 3639\\n4370 5898\\n4496 1420\\n4308 9894\\n8924 1602\\n6681 7110\\n5486 5849\\n3164 2407\\n5772 6287\\n2717 9851\\n590 2859\\n5937 8290\\n9582 7705\\n6362 7423\\n5478 9248\\n1032 2732\\n3714 6446\\n9195 1167\\n1401 457\\n7373 4875\\n4855 5620\\n8824 9863\\n4534 47\\n2470 7851\\n7638 9183\\n8236 6488\\n1103 7370\\n6169 6554\\n5470 213\\n106 8145\\n544 1482\\n1532 5459\\n8435 9604\\n3564 4538\\n7014 6686\\n1357 3692\\n4270 6339\\n8129 3515\\n7433 990\\n6350 8781\\n358 5202\\n9786 7646\\n859 1243\\n9340 3055\\n4681 5825\\n2133 8149\\n4441 6147\\n6374 3851\\n6520 4492\\n9807 7225\\n4003 842\\n8533 9502\\n8679 8287\\n1048 335\\n3528 2133\\n507 9258\\n5985 9090\\n3704 3141\\n7501 3344\\n1314 1834\\n9509 2269\\n808 4836\\n9235 8950\\n9654 7226\\n3477 7933\\n6164 6487\\n7420 1960\\n2994 5694\\n8906 8948\\n6900 8602\\n1927 5089\\n9693 2509\\n4836 3345\\n1589 765\\n5545 4375\\n2699 6807\\n7357 9580\\n1792 5263\\n9993 2506\\n7985 2131\\n1802 8470\\n8916 9308\\n1134 4201\\n3652 6862\\n9986 1714\\n2234 6769\\n2758 1323\\n4369 5968\\n5939 9469\\n6565 2105\\n2290 851\\n6898 4365\\n2576 1078\\n6105 1242\\n3463 9159\\n9266 8809\\n9444 7922\\n3264 4705\\n108 7236\\n9243 1115\\n2828 560\\n9441 7094\\n2721 653\\n852 70\\n1363 1\\n5986 2247\\n420 3016\\n2868 6519\\n1261 8402\\n3922 3052\\n6227 8611\\n2952 8170\\n1048 8175\\n4174 3100\\n4944 7650\\n859 1593\\n1464 8032\\n4911 5658\\n3524 5938\\n5663 3523\\n7649 9053\\n9432 1150\\n7871 3281\\n1404 1616\\n9615 6324\\n5503 1762\\n4671 79\\n6626 4071\\n8179 1711\\n8948 3117\\n2448 484\\n9196 7569\\n8549 968\\n4383 6385\\n1555 1913\\n4803 6719\\n8867 6842\\n5099 8585\\n1826 960\\n7165 1550\\n3735 6187\\n1513 9349\\n5485 5502\\n2203 8276\\n8115 8051\\n7894 4794\\n7661 3364\\n9744 1047\\n5803 8244\\n4612 7776\\n5694 9884\\n7848 661\\n6834 3352\\n9374 9541\\n8195 1532\\n3957 8414\\n7367 9816\\n7121 2941\\n3152 6332\\n8240 9020\\n4842 4870\\n1151 292\\n1895 5364\\n6356 1536\\n5345 8039\\n6418 1286\\n2987 3817\\n5804 1471\\n1374 680\\n2244 4297\\n5051 7630\\n1577 9352\\n6773 4422\\n2601 3877\\n9382 7713\\n2588 1981\\n7596 7810\\n2799 6128\\n9772 5193\\n9203 2411\\n6167 8776\\n8343 1773\\n5726 8377\\n7767 8826\\n3 5532\\n6227 4029\\n1698 1102\\n6905 7064\\n8089 9782\\n5588 3774\\n9651 8018\\n5654 3998\\n59 5035\\n67 2415\\n8731 4129\\n4082 1238\\n7318 7189\\n3704 9028\\n4187 5905\\n2318 1625\\n1525 7803\\n1125 5958\\n6152 8866\\n5382 9960\\n3392 8967\\n3435 3560\\n7849 5070\\n5047 4238\\n2346 1260\\n9205 1300\\n26 300\\n531 1536\\n4018 7756\\n8072 9669\\n7646 9780\\n9080 539\\n5581 8306\\n7987 8868\\n7146 2677\\n6127 577\\n465 7327\\n5223 1008\\n3238 603\\n1072 9236\\n376 7564\\n1737 9941\\n5975 9092\\n25 2882\\n4134 6506\\n5530 2241\\n3706 5040\\n1174 6115\\n9722 9121\\n5784 2497\\n4287 3901\\n4661 4373\\n135 3655\\n9960 8483\\n1913 5424\\n9009 9803\\n3778 3454\\n3396 8502\\n5963 6570\\n1827 1344\\n8893 8891\\n1728 1732\\n9039 5299\\n8974 7260\\n9943 9425\\n6283 4075\\n5635 2341\\n7454 6526\\n587 56\\n3571 4979\\n1797 9888\\n1583 7328\\n8782 4439\\n3851 2614\\n8838 3835\\n7230 7\\n7575 5737\\n589 5009\\n966 7162\\n8778 591\\n9380 4947\\n6266 6143\\n2162 805\\n6439 8686\\n8448 2054\\n3195 9144\\n6889 8588\\n7433 4038\\n9198 5274\\n58 7399\\n6350 9849\\n2374 9025\\n3032 829\\n7121 567\\n1108 6390\\n5107 4886\\n4320 2982\\n8121 2239\\n5941 4633\\n5999 6730\\n6532 4319\\n3922 4797\\n9219 1599\\n724 3894\\n9955 5307\\n6712 8698\\n6240 9021\\n1953 2042\\n8998 1879\\n7132 6315\\n9864 6570\\n3362 3244\\n2224 1015\\n9230 6173\\n2187 3622\\n8804 7750\\n3973 4275\\n9260 6095\\n6714 1912\\n902 7424\\n6389 8404\\n6362 9627\\n9525 8472\\n6704 5568\\n8243 382\\n6844 7796\\n5111 8699\\n6623 7021\\n7706 6604\\n6418 1052\\n2755 6776\\n3202 6362\\n9960 1070\\n5953 7498\\n2155 3936\\n3876 4240\\n7543 4845\\n8198 4424\\n4868 3738\\n1453 2124\\n9253 6623\\n6509 9817\\n102 1242\\n3772 4590\\n3833 1987\\n5697 9308\\n7037 7515\\n257 3857\\n9964 3674\\n521 133\\n9761 8311\\n6184 3868\\n32 8440\\n5734 3399\\n9355 7555\\n3615 7969\\n6450 9219\\n5892 4273\\n7224 3077\\n8456 890\\n1799 9177\\n3480 4026\\n3911 3089\\n5306 5028\\n8312 5641\\n6847 5318\\n2607 6293\\n7974 5780\\n1447 1866\\n71 639\\n2074 8713\\n5550 1980\\n583 740\\n6297 9919\\n520 451\\n2415 5083\\n8969 1941\\n1853 7328\\n6137 7093\\n3551 7076\\n4090 4989\\n4907 7763\\n6343 8149\\n6525 5359\\n8189 9949\\n5557 5482\\n7835 1500\\n2213 4285\\n9673 3748\\n4713 945\\n2625 2910\\n8923 3259\\n9037 6726\\n2119 4576\\n2495 4015\\n4916 2192\\n6712 9800\\n4213 5740\\n4085 7995\\n8853 1763\\n9149 8351\\n1381 1215\\n9620 524\\n1869 7563\\n4463 818\\n8967 1837\\n3140 4921\\n7465 2220\\n4114 1306\\n452 9669\\n8999 3101\\n2556 8551\\n7750 2861\\n2247 4118\\n7827 5918\\n4219 8078\\n4508 6351\\n7849 1197\\n738 5276\\n1177 1887\\n7231 254\\n3927 9147\\n2034 560\\n945 3288\\n5127 7574\\n7758 5155\\n9978 3147\\n34 5436\\n1694 8525\\n3300 8139\\n8764 4812\\n1779 5962\\n3800 9938\\n7550 981\\n4573 426\\n9687 2506\\n8092 7951\\n4714 5463\\n4796 3682\\n8633 6966\\n9035 9499\\n4899 761\\n1478 260\\n4756 5382\\n1113 7566\\n790 6341\\n9200 5029\\n9642 1040\\n6263 7165\\n8857 2195\\n1818 3245\\n3233 3252\\n4102 4435\\n4179 6431\\n9215 1567\\n5119 4348\\n5787 2970\\n6799 1844\\n6730 527\\n2204 3952\\n1188 7939\\n1541 6390\\n1408 4583\\n3886 2446\\n2956 7539\\n8941 77\\n3758 5955\\n8378 1191\\n9320 4935\\n9108 523\\n2080 733\\n6191 1676\\n850 3391\\n3477 2379\\n9925 1273\\n5895 7074\\n4393 4272\\n7970 8807\\n8649 6270\\n3350 7396\\n4787 1509\\n5182 6616\\n6987 4499\\n633 7978\\n1751 2698\\n7471 2748\\n2801 5619\\n7437 3599\\n3401 1883\\n9972 9140\\n7300 5962\\n655 5279\\n8344 1694\\n1295 544\\n6231 2669\\n3505 6724\\n4594 7366\\n486 6609\\n8097 1095\\n6574 6226\\n1429 2579\\n6863 7088\\n4961 5219\\n3923 7237\\n6378 1680\\n4558 8667\\n8098 5724\\n1779 2230\\n7308 7736\\n7315 783\\n9641 1704\\n3381 1711\\n824 537\\n146 5617\\n930 2164\\n3818 8921\\n7481 8267\\n9994 5730\\n5642 7933\\n6243 3712\\n2057 584\\n8362 9834\\n4177 8452\\n7537 7461\\n5012 9966\\n1476 2911\\n4397 7607\\n251 4851\\n6695 7252\\n224 3767\\n5675 2234\\n4010 2212\\n2803 6235\\n9355 9461\\n4132 8385\\n9789 8955\\n1574 346\\n297 8168\\n3929 9413\\n8264 2392\\n201 3158\\n690 3012\\n3968 7378\\n5819 7370\\n520 8587\\n3867 3398\\n7759 1190\\n6117 7058\\n725 6144\\n9775 717\\n8262 1488\\n4835 4683\\n2236 9520\\n5877 4459\\n4229 7163\\n3019 4429\\n707 5561\\n7993 2634\\n3210 1962\\n124 3586\\n4000 7439\\n8020 8628\\n3518 3780\\n2184 6956\\n9233 1023\\n2916 1749\\n3902 9224\\n7628 5015\\n842 5327\\n2237 4881\\n8434 6802\\n244 4272\\n9584 2977\\n1602 256\\n7476 4870\\n3834 7297\\n1757 5149\\n7773 6455\\n1177 8368\\n4430 5706\\n6289 568\\n8629 6227\\n5116 5920\\n6822 8597\\n9772 5755\\n965 7546\\n5723 972\\n5775 7355\\n5983 9139\\n3438 5132\\n2408 9588\\n100 9925\\n9995 1337\\n271 915\\n4566 3625\\n9169 6013\\n8449 6957\\n9438 4749\\n3214 5010\\n4354 7383\\n9741 9995\\n7803 8526\\n3462 6810\\n790 3447\\n9382 4696\\n6306 303\\n1503 5764\\n4785 9416\\n2959 2565\\n5461 4599\\n6830 8999\\n7804 3899\\n6001 9979\\n9096 5962\\n419 1187\\n7597 9699\\n4968 7679\\n7871 3343\\n4265 1332\\n2508 6747\\n4520 3051\\n1599 4355\\n4787 2335\\n7196 8837\\n8342 4762\\n1365 4611\\n6295 4321\\n9196 2878\\n5496 1394\\n8162 7070\\n8857 3302\\n3557 8683\\n1286 4609\\n5739 7829\\n1553 3890\\n9226 2627\\n2097 1532\\n8372 6365\\n6935 6407\\n4355 7967\\n376 731\\n1514 5883\\n4755 8383\\n7127 8383\\n2612 6176\\n774 7633\\n816 5772\\n6794 6441\\n5411 275\\n9617 6797\\n848 1300\\n909 2670\\n8800 6807\\n4394 1122\\n1366 1308\\n3167 3331\\n4080 3343\\n2342 6595\\n4467 3073\\n4508 4336\\n2481 9548\\n3511 4639\\n1484 7925\\n1511 1740\\n5278 3192\\n8892 3153\\n8780 5542\\n483 5802\\n5371 465\\n249 3124\\n5734 1544\\n2979 3832\\n4039 5739\\n4932 1675\\n7684 1368\\n6234 949\\n876 747\\n5538 6215\\n2654 4959\\n3194 3498\\n6587 1392\\n8671 7508\\n5719 9293\\n4570 351\\n8677 2638\\n8649 1986\\n5134 9199\\n31 7578\\n7697 6144\\n291 9040\\n1124 3277\\n5055 2239\\n560 8423\\n6893 7269\\n3779 8406\\n6918 8464\\n1284 8278\\n9292 5015\\n7237 7332\\n2665 935\\n272\\n9075 5166\\n3683 274\\n9392 2061\\n6712 9206\\n3439 3257\\n2554 2800\\n9866 5515\\n9622 3676\\n4792 7307\\n1152 7937\\n172 4306\\n963 9385\\n2118 9803\\n9384 5164\\n5503 9357\\n3522 7086\\n4741 8575\\n4292 5037\\n7650 4082\\n1409 747\\n3574 6421\\n5325 999\\n4845 8668\\n3782 8886\\n2361 5467\\n2081 9956\\n9408 9203\\n8058 4102\\n6867 5111\\n8902 1724\\n5385 7941\\n9392 7868\\n4374 8266\\n9397 6295\\n8000 6961\\n8173 3418\\n1038 2203\\n3329 540\\n9275 5270\\n7497 1471\\n9647 2291\\n390 1160\\n7196 7625\\n3792 4433\\n4766 1903\\n7473 3247\\n2733 48\\n5046 9687\\n2275 6663\\n5073 9753\\n9903 2903\\n1076 305\\n8193 2295\\n4259 5103\\n3972 8038\\n9222 8314\\n6071 5642\\n7318 9960\\n6541 8205\\n8617 6605\\n5684 3179\\n915 4683\\n3966 3938\\n3536 3939\\n1848 8157\\n4378 5216\\n8709 5762\\n1692 2020\\n3686 6813\\n6887 4719\\n6292 6956\\n8089 3708\\n3033 3024\\n5018 3733\\n6948 4252\\n879 9344\\n1104 2921\\n890 2453\\n8543 4043\\n5725 9783\\n3427 8830\\n7100 2681\\n1967 6888\\n7624 2594\\n8240 3583\\n8098 111\\n3937 3845\\n2308 188\\n2530 5138\\n6466 408\\n7700 5150\\n37 1736\\n348 7943\\n8870 845\\n2004 1794\\n7046 7458\\n4803 1141\\n7479 4045\\n7726 4443\\n5429 2544\\n1528 7619\\n9361 8941\\n3471 9513\\n4042 2658\\n8778 7764\\n9061 1932\\n3921 9346\\n188 6342\\n513 956\\n6794 2192\\n4668 1274\\n4850 3451\\n8968 5069\\n2802 535\\n4581 3253\\n6099 8601\\n9005 41\\n435 1871\\n3888 7471\\n1163 5230\\n675 4223\\n4540 3095\\n970 1095\\n428 8273\\n6116 3154\\n6017 1252\\n2011 1343\\n7128 352\\n9257 7360\\n6926 9751\\n7486 6683\\n7106 2239\\n7557 48\\n5852 5980\\n1268 26\\n1431 3761\\n5759 9794\\n6457 1366\\n3207 6104\\n9895 4376\\n3142 7530\\n6558 3076\\n8077 5488\\n1293 467\\n8734 9580\\n4416 9745\\n7688 644\\n3764 4851\\n8524 5765\\n7250 1814\\n337 8230\\n7637 4201\\n7832 4333\\n6289 2628\\n2825 8868\\n4274 5610\\n6301 7120\\n2239 8954\\n672 9994\\n7514 273\\n2048 4995\\n1313 2286\\n1309 7527\\n2836 418\\n6593 4159\\n6293 2870\\n7869 8715\\n6722 9666\\n6445 1211\\n7696 3524\\n5374 300\\n6760 710\\n3781 6176\\n8749 2259\\n6014 4772\\n8611 6417\\n5074 9011\\n6221 2914\\n237 5668\\n9209 6978\\n7741 7260\\n1849 1827\\n3988 3203\\n163 3626\\n3810 7883\\n1310 6031\\n1606 5560\\n1830 3102\\n5493 7275\\n276 6741\\n3525 4631\\n8771 3092\\n4451 5891\\n2128 9481\\n7040 7385\\n3956 9821\\n1741 6650\\n5468 2861\\n9002 5595\\n1274 6237\\n9360 9034\\n7520 2942\\n7886 5191\\n1729 1712\\n2351 3929\\n1145 5829\\n3048 8773\\n5273 5874\\n4581 3204\\n592 8250\\n9913 2710\\n4092 1741\\n4634 119\\n6651 8756\\n2780 3513\\n9660 7916\\n544 4492\\n4270 8311\\n6650 5019\\n4176 5781\\n4333 1056\\n8972 5526\\n1476 5331\\n1285 1167\\n9810 432\\n6756 3259\\n7946 8342\\n323 6291\\n3080 4889\\n5521 1913\\n1006 4509\\n9446 3706\\n9452 6811\\n7396 579\\n858 4548\\n8287 6490\\n8845 2116\\n5786 3624\\n9266 6643\\n5049 7485\\n2751 1751\\n2951 2063\\n2478 3357\\n4283 7334\\n5591 3887\\n2581 1076\\n822 217\\n3487 9597\\n783 4531\\n5882 7514\\n8379 8166\\n5044 854\\n4151 2060\\n1642 7315\\n7204 6413\\n3312 8826\\n5796 7868\\n9050 7067\\n8357 3813\\n110 5656\\n4572 7594\\n2079 3474\\n9526 6215\\n2682 9903\\n3823 1899\\n9680 4817\\n4261 5529\\n1542 6047\\n2610 6078\\n7204 8899\\n4379 1311\\n6877 6143\\n997\\n5311 9941\\n1379 1768\\n9566 297\\n5763 582\\n8865 7842\\n5645 1201\\n805 6646\\n3244 332\\n9041 8466\\n2604 3501\\n7614 7632\\n3077 8398\\n6901 4824\\n3954 9232\\n9794 1685\\n4368 442\\n8439 3452\\n6072 3868\\n6975 3482\\n3197 5721\\n2756 2113\\n3648 2109\\n5928 7045\\n6754 1542\\n9982 5209\\n9565 6396\\n3709 2503\\n7652 906\\n6707 6804\\n9703 5280\\n1342 6653\\n6882 5948\\n6280 2624\\n5146 9088\\n5780 1626\\n8718 9248\\n5847 2063\\n9947 3471\\n9071 8603\\n9285 5798\\n1977 654\\n2931 6765\\n9249 7594\\n8753 7788\\n2385 415\\n5032 4715\\n1240 5501\\n5295 1050\\n2859 8030\\n149 9938\\n3502 5348\\n9926 1412\\n4524 7942\\n6450 3088\\n928 3590\\n287 2133\\n97 621\\n5962 7174\\n4412 2162\\n4470 5144\\n1503 3807\\n128 7468\\n2666 2193\\n9007 1092\\n1643 9424\\n8969 285\\n9534 7103\\n774 4864\\n8672 6609\\n1881 9662\\n7665 3827\\n4647 6940\\n5161 4482\\n6228 9488\\n1590 3295\\n7061 7563\\n3781 7115\\n4190 7353\\n8530 2771\\n2291 3327\\n9360 135\\n3702 269\\n2150 5515\\n1267 1470\\n9193 7516\\n6043 4971\\n8460 7353\\n248 5943\\n3072 6237\\n6499 6954\\n1402 3778\\n8172 6101\\n7319 4028\\n6868 4274\\n2682 5389\\n5548 4268\\n8688 4191\\n1328 618\\n5975 5344\\n1722 5023\\n1192 4334\\n4688 6067\\n707 6500\\n7982 6297\\n1419 5572\\n4187 5314\\n9476 3690\\n8644 5299\\n5760 8292\\n196 5937\\n7060 5960\\n4418 301\\n8137 7701\\n3355 9826\\n5036 6165\\n325 3095\\n9748 1934\\n7384 7188\\n6229 346\\n3165 5094\\n1760 7236\\n5343 8056\\n4188 1408\\n4519 1482\\n6918 1132\\n1748 4393\\n8571 8746\\n8032 7047\\n9359 8275\\n2690 5185\\n1035 4163\\n3224 8661\\n8258 9038\\n5911 5640\\n6865 3017\\n1025 6002\\n8041 4371\\n6829 2585\\n4595 4835\\n9671 7818\\n5746 7472\\n8845 9568\\n865 5187\\n4871 9594\\n61 8149\\n6370 5494\\n616 1349\\n2557 9996\\n949 7657\\n4347 6441\\n5329 9761\\n3010 1418\\n4955 4782\\n9938 8537\\n2012 1542\\n8008 2750\\n3317 4403\\n6911 1743\\n5317 6685\\n8722 6783\\n696 2019\\n1640 3116\\n2059 7265\\n7887 7498\\n7273 3516\\n7487 3235\\n9441 6293\\n9237 4578\\n488 3381\\n4764 6492\\n3868 4001\\n885 4930\\n1760 9749\\n9987 1632\\n3375 9447\\n8507 4518\\n2874 3351\\n9445 3614\\n3094 4060\\n5374 6152\\n2058 3845\\n1389 9669\\n7201 2998\\n668 6448\\n5843 9464\\n3456 347\\n2081 6453\\n2228 8328\\n7716 7244\\n751 5027\\n5320 3298\\n1077 9338\\n7066 1784\\n4034 431\\n7154 2444\\n5702 8921\\n2963 4378\\n4667 2389\\n6567 9376\\n2010 4385\\n8596 4278\\n6940 3665\\n8108 7778\\n9031 7725\\n5885 5495\\n6798 527\\n1610 251\\n2925 5295\\n5123 3822\\n7092 819\\n2579 2379\\n7712 7983\\n4923 562\\n3885 1356\\n8779 8883\\n3773 9426\\n8089 1394\\n8511 8778\\n1643 2088\\n3823 2546\\n2921 8294\\n1764 303\\n3617 9987\\n9631 3301\\n3324 8650\\n2084 6379\\n9313 1736\\n2007 7415\\n2148 7018\\n8854 6719\\n7969 5462\\n2338 5285\\n4652 4861\\n4372 6501\\n9807 3501\\n6697 607\\n1083 498\\n8469 1397\\n3304 7791\\n5015 25\\n9299 5237\\n5070 7880\\n4558 7842\\n818 6548\\n4436 7682\\n7642 5426\\n9541 174\\n7663 8051\\n763 4591\\n7323 725\\n8305 2740\\n8644 7379\\n7603 1634\\n9739 7797\\n4392 745\\n9985 519\\n6223 6595\\n5065 4678\\n8360 7456\\n3436 7290\\n8204 5406\\n2527 9485\\n3139 7492\\n9006 3043\\n5452 7931\\n8771 507\\n1478 1475\\n1538 3323\\n5516 5086\\n1239 9424\\n3494 2712\\n6838 4889\\n8261 4384\\n2393 8513\\n3540 7824\\n8331 142\\n8452 1174\\n8912 3958\\n3159 6301\\n4303 1119\\n1996 9791\\n2286 3415\\n6963 7788\\n2313 3489\\n7171 3205\\n42 8692\\n507 9930\\n5296 9866\\n1231 2830\\n4770 1196\\n459 1063\\n3435 7213\\n9869 2903\\n8271 1065\\n6873 2243\\n7256 6777\\n3130 4636\\n8150 673\\n8564 6931\\n5188 6282\\n6222 6992\\n4128 1834\\n5176 6158\\n9615 4920\\n1270 8360\\n9119 520\\n7663 5890\\n7730 567\\n1610 9397\\n4247 4560\\n3042 9637\\n2988 2817\\n859 4076\\n2260 8660\\n3390 572\\n1203 2417\\n1139 9848\\n5655 7810\\n7639 7105\\n9345 8373\\n706 6515\\n217 1807\\n5741 3293\\n7405 450\\n3327 9303\\n175 261\\n9799 5700\\n5649 7152\\n6611 4058\\n8974 7971\\n498 9640\\n3348 3319\\n3809 8575\\n8547 8226\\n8087 1064\\n5072 7267\\n2990 6878\\n4725 9914\\n4895 8213\\n2461 8583\\n7145 3302\\n7301 8757\\n7109 8615\\n4945 4550\\n9034 8844\\n8334 9689\\n2342 7650\\n7942 1852\\n5883 5620\\n4491 4428\\n5119 9149\\n8615 1539\\n2184 7809\\n1444 295\\n7803 7389\\n923 8958\\n440 2698\\n6121 8893\\n7235 3826\\n4103 6657\\n9731 8845\\n3911 2945\\n7289 2598\\n2242 4805\\n3451 5870\\n189 8957\\n643 7014\\n6630 4866\\n1157 1079\\n8636 4060\\n3563 3290\\n4847 2700\\n8547 164\\n4526 8817\\n3486 5456\\n3929 2517\\n4735 3562\\n4983 1895\\n1276 4194\\n2603 5825\\n6031 4095\\n2400 3892\\n9764 9719\\n8431 9301\\n8846 1681\\n2943 7033\\n4728 3151\\n6101 9041\\n8622 1469\\n8231 6373\\n7764 1565\\n3690 1610\\n9203 7399\\n8134 6524\\n8838 7352\\n7365 3525\\n8208 1053\\n792 2132\\n8138 4356\\n1323 6971\\n4059 9149\\n8971 4734\\n4818 6286\\n280 9148\\n7482 470\\n9412 2519\\n329 5287\\n8904 1654\\n6766 2383\\n5665 968\\n1177 8900\\n6608 7579\\n5329 1198\\n8381 6479\\n1287 8129\\n1764 7393\\n3346 484\\n3484 9077\\n6421 3435\\n8325 3579\\n1315 4283\\n2586 3970\\n8663 766\\n1026 1901\\n7568 4990\\n1416 634\\n2537 4105\\n4054 4876\\n8439 8656\\n1721 3030\\n1703 5596\\n8836 5999\\n281 733\\n8437 2681\\n7124 9610\\n6518 9969\\n7324 2175\\n6575 909\\n9437 7754\\n3407 2927\\n6448 9462\\n126 309\\n1994 4151\\n683 8516\\n8694 2620\\n9521 5212\\n2612 496\\n927 5751\\n4593 8661\\n6714 2715\\n4984 8777\\n426 2385\\n5255 6008\\n8128 6277\\n7111 710\\n3655 3901\\n9456 8754\\n9644 3252\\n7303 8422\\n744 5779\\n3454 3865\\n595 7632\\n3459 4694\\n3230 5505\\n2675 7029\\n982 3589\\n3064 3202\\n8008 2235\\n3385 9178\\n3050 8519\\n2473 7120\\n9801 3806\\n1279 5611\\n2070 7848\\n9439 5411\\n7137 5902\\n4870 4789\\n9795 6890\\n4123 9081\\n7868 7558\\n6550 4516\\n3988 8277\\n1193 4980\\n8896 7582\\n7575 6013\\n5758 3378\\n6984 5845\\n4310 7625\\n6695 6172\\n624 9926\\n6340 248\\n5977 5120\\n1677 1113\\n6343 6209\\n2154 4879\\n2914 1036\\n1587 1078\\n3075 7071\\n2086 5794\\n7479 9637\\n9114 7835\\n2859 7484\\n9269 3611\\n6425 9848\\n9872 7843\\n4397 6642\\n8180 9447\\n8251 9803\\n3582 337\\n8970 317\\n8314 8664\\n7694 9584\\n9603 9534\\n1820 2580\\n4769 4642\\n3391 6792\\n6892 2691\\n9983 9326\\n6318 5918\\n1212 8783\\n8771 2921\\n9425 2823\\n6427 9021\\n354 4157\\n6288 8966\\n5432 1257\\n6844 6867\\n401 4495\\n4788 2355\\n6851 6430\\n5481 6525\\n7697 3664\\n2731 704\\n8121 3899\\n7735 9956\\n4767 2740\\n743 8127\\n7194 2023\\n6332 2005\\n8229 5113\\n6793 4279\\n8042 9944\\n904 9642\\n9057 8718\\n6583 215\\n8509 3783\\n2920 5982\\n6711 2768\\n7728 2748\\n7918 1079\\n4731 1374\\n5679 5906\\n6226 7486\\n1533 8716\\n7277 7252\\n9890 683\\n2320 6332\\n3233 2116\\n9720 6668\\n203 6299\\n2930 8721\\n1642 7094\\n2801 938\\n5102 885\\n7900 1166\\n3595 8232\\n794 5197\\n4696 6123\\n5882 8693\\n7121 338\\n1063 9196\\n4503 349\\n5471 9392\\n2071 7681\\n4492 5264\\n9895 4388\\n2036 8344\\n938 2711\\n824 922\\n2749 1518\\n7975 7116\\n3339 1407\\n6213 9899\\n1080 3644\\n7404 8691\\n7479 8891\\n6959 8174\\n3640 4905\\n9992 6412\\n5665 2153\\n6780 6463\\n4385 2678\\n5629 1394\\n6453 9608\\n8838 3865\\n5970 2485\\n9805 7563\\n2117 4040\\n6656 264\\n8356 4882\\n4904 3187\\n8810 9850\\n242 5958\\n853 8309\\n9642 5715\\n2143 545\\n7849 2030\\n34 2771\\n4612 2935\\n8167 3017\\n1283 3061\\n3875 6855\\n8099 6223\\n7540 7583\\n4732 8775\\n4265 9592\\n5127 1063\\n3909 8762\\n6187 9970\\n5663 4855\\n1841 9329\\n5477 7720\\n1705 9080\\n9926 33\\n8555 3725\\n2819 259\\n1747 3997\\n8019 3206\\n7625 3327\\n8062 5827\\n46 6930\\n8307 5819\\n5137 1038\\n8496 2769\\n3989 864\\n670 2136\\n4923 5174\\n7404 1118\\n1176 1072\\n83 1047\\n1058 4099\\n4237 41\\n6024 9140\\n3197 5376\\n2323 2440\\n3399 507\\n7289 3017\\n5771 5337\\n5308 8265\\n3363 8036\\n798 9684\\n5071 5929\\n4335 7857\\n4180 3549\\n6604 5324\\n8710 994\\n2095 8994\\n1108 7649\\n7525 5619\\n7289 778\\n2726 3070\\n1422 9932\\n7156 2070\\n9264 1008\\n5556 2394\\n3118 3478\\n2730 1449\\n3195 3271\\n8014 6318\\n6930 6282\\n1641 5068\\n8679 4731\\n6146 969\\n5528 2882\\n1143 5623\\n9514 1131\\n6090 8368\\n2720 8327\\n3311 2220\\n1029 1890\\n4475 5551\\n6326 225\\n6372 9424\\n2065 3757\\n1173 379\\n7149 5313\\n1320 4675\\n5757 5227\\n1853 3762\\n3490 7048\\n3549 8299\\n6940 34\\n75 7344\\n2624 9701\\n6380 7258\\n5563 3172\\n128 6333\\n8879 7372\\n3205 2638\\n9513 7889\\n7087 6687\\n3220 1898\\n3069 3293\\n5706 8209\\n6205 3402\\n5706 408\\n4471 1859\\n6995 2601\\n779 8954\\n1194 8786\\n5758 6392\\n9724 6275\\n5427 6603\\n352 8243\\n109 9644\\n7227 4322\\n3898 4139\\n1604 6237\\n9400 5541\\n9551 1296\\n7111 8074\\n5075 9829\\n1637 3809\\n9121 8837\\n3352 8561\\n484 1696\\n9438 6613\\n9223 3989\\n729 3417\\n3475 2736\\n5375 3757\\n3351 8942\\n7249 308\\n6350 8582\\n2959 6679\\n1245 191\\n7170 6885\\n993 5096\\n2213 1845\\n6311 84\\n4097 2396\\n1359 3581\\n1969 2965\\n4722 1600\\n4420 7677\\n5039 5174\\n9350 3911\\n6212 1123\\n300 528\\n9771 6901\\n6228 707\\n4955 568\\n9281 8474\\n830 6026\\n7953 8277\\n6886 5386\\n8933 5255\\n9636 4760\\n12 4968\\n7256 6348\\n2799 9450\\n6999 6738\\n2242 3314\\n2660 2372\\n3608 6453\\n5288 8014\\n1381 556\\n2154 4095\\n8435 2572\\n1861 4067\\n2317 967\\n9402 2487\\n984 6171\\n8776 5502\\n2204 7392\\n7026 1539\\n420 8557\\n8610 8948\\n4177 1044\\n6345 8036\\n8351 758\\n9899 8850\\n8705 2044\\n4703 4633\\n8000 2416\\n3849 4332\\n8296 404\\n3487 3359\\n8760 2947\\n8547 4479\\n9775 9633\\n5320 7574\\n5219 1260\\n9676 7510\\n2128 8037\\n165 7858\\n4138 324\\n241 4469\\n3945 373\\n3373 6822\\n2062 8228\\n5539 5986\\n985 6501\\n6630 7980\\n5339 9403\\n8285 9390\\n5101 2581\\n8525 2826\\n9992 1268\\n3639 8197\\n5630 4038\\n437 6929\\n1305 1949\\n7286 9424\\n9419 8935\\n5610 1068\\n4248 3533\\n8129 4493\\n1821 5091\\n9424 1062\\n6836 7560\\n5767 3274\\n2724 7923\\n8305 9317\\n9773 7393\\n8458 8617\\n3046 272\\n1183 6810\\n9925 8135\\n4994 6824\\n2130 2956\\n4808 2542\\n957 637\\n2857 9662\\n331 4834\\n6518 8991\\n1718 7245\\n2691 2819\\n6622 9362\\n7324 1861\\n567 58\\n3356 3451\\n9650 5977\\n3389 594\\n7618 7776\\n5688 6579\\n9197 3280\\n5871 6404\\n1345 9448\\n5498 7911\\n7751 5766\\n1256 1437\\n292 4848\\n2931 1549\\n2137 4796\\n2075 7792\\n9492 8416\\n5505 4364\\n1846 1102\\n1107 1516\\n2187 5519\\n4655 7108\\n8186 2381\\n7151 8605\\n2775 3226\\n2026 1690\\n1230 4044\\n9201 4642\\n287 1187\\n9220 2316\\n8148 5231\\n6077 6442\\n8502 6207\\n2396 4641\\n1408 61\\n2989 2414\\n9502 2947\\n4339 483\\n5665 5638\\n7409 529\\n3943 1821\\n5590 2856\\n1521 9558\\n8642 4757\\n2820 6264\\n7630 8060\\n8553 6883\\n2812 5947\\n925 7571\\n5148 9386\\n6327 755\\n4003 7361\\n3827 512\\n598 3539\\n4147 4506\\n138 8227\\n1284 646\\n9397 8166\\n604 1175\\n5762 8253\\n4239 2665\\n2750 7323\\n3080 1835\\n4411 6961\\n9707 4256\\n2907 5299\\n3055 9308\\n38 8298\\n7455 4800\\n1830 6825\\n2533 7667\\n4457 414\\n1499 5032\\n9136 3288\\n7812 4452\\n8977 8187\\n1161 4968\\n9476 8454\\n8834 9399\\n7349 7357\\n7176 8372\\n2485 1492\\n5132 9999\\n3404 1269\\n5569 6163\\n953 5639\\n4992 8037\\n7185 7897\\n7873 3468\\n2537 3860\\n6190 1056\\n7306 8404\\n4010 8005\\n7074 4245\\n3872 3750\\n2855 3921\\n4448 1097\\n9225 1860\\n8610 335\\n7344 1851\\n9993 6087\\n5422 3750\\n6645 3975\\n195 4601\\n5195 2837\\n3413 8478\\n2225 6935\\n4266 8537\\n8511 3767\\n521 5807\\n3638 990\\n2713 7396\\n8854 6918\\n8065 3888\\n5650 8972\\n4253 809\\n4863 6123\\n8638 5554\\n2624 6528\\n5257 6127\\n5872 9449\\n9951 2826\\n8573 5585\\n5834 862\\n3527 9014\\n3156 76\\n7494 9988\\n1940 2047\\n1640 1584\\n6061 2060\\n614 3336\\n1915 1796\\n9436 5872\\n9624 6456\\n5438 6381\\n830 7285\\n8858 4557\\n1790 6577\\n9827 6066\\n170 5842\\n4151 5452\\n5694 2711\\n8824 1527\\n8559 3418\\n7945 8581\\n5003 6294\\n5278 5820\\n191 1407\\n7551 22\\n8552 387\\n4581 2978\\n3203 388\\n8268 2647\\n5298 8301\\n3718 2671\\n6367 5340\\n521 7854\\n328\\n7274 9355\\n1168 3860\\n2557 3476\\n9908 1485\\n9067 8122\\n1648 1635\\n8408 6539\\n4952 8752\\n1214 9357\\n2317 778\\n6233 9965\\n1832 4586\\n1188 4321\\n2767 6615\\n8493 558\\n3879 5974\\n1978 9689\\n3390 4272\\n5513 2323\\n299 7205\\n5967 3892\\n4488 3360\\n8278 3490\\n2452 6247\\n1693 9447\\n2897 1381\\n2743 1599\\n5297 2667\\n7075 6469\\n1400 3454\\n4834 787\\n7282 4648\\n8232 1824\\n5021 9990\\n441 7762\\n4362 4481\\n3846 781\\n8193 3783\\n2134 4121\\n5976 7633\\n5227 6587\\n6875 6990\\n7405 4011\\n3346 9570\\n7095 5099\\n9283 6760\\n1046 5466\\n5481 3979\\n6471 8486\\n8241 8378\\n4290 5534\\n6881 2243\\n5647 7245\\n2913 5581\\n1688 8840\\n3733 4068\\n1354 7340\\n7895 5810\\n2186 1060\\n9948 5003\\n5767 1927\\n8473 2907\\n8757 6364\\n2671 1554\\n163 9044\\n7833 2697\\n6745 2265\\n7922 862\\n6146 3183\\n8817 951\\n431 1335\\n2859 4277\\n8381 8238\\n8118 670\\n7161 8734\\n5632 9986\\n8963 202\\n8470 1189\\n7586 9682\\n4057 5287\\n1635 4462\\n3998 283\\n1320 898\\n5953 4467\\n3542 5505\\n2042 7131\\n1704 7015\\n9236 851\\n7586 799\\n8415 7744\\n454 6823\\n3024 2030\\n9431 8490\\n9514 3323\\n4374 131\\n8095 6904\\n7228 4841\\n2473 8008\\n1882 4405\\n9456 2215\\n3317 9993\\n1737 4285\\n2008 5213\\n6309 834\\n2059 7415\\n7171 1773\\n7246 6120\\n5536 6799\\n4413 2500\\n9904 6453\\n4627 8111\\n7301 2434\\n3058 8197\\n1779 3403\\n6579 1622\\n6697 687\\n3062 4466\\n4489 478\\n116 6152\\n4405 6727\\n1063 2218\\n9847 9124\\n9601 3072\\n2658 5978\\n409 3651\\n5079 6753\\n466 5298\\n3217 8830\\n6911 4481\\n9585 7423\\n4107 6296\\n9996 3261\\n5809 9251\\n9038 2110\\n2156 7499\\n6723 3008\\n6341 8713\\n2124 9220\\n2726 1650\\n8009 5088\\n8609 9132\\n8602 4630\\n5891 3412\\n4863 1957\\n5766 4201\\n4931 1278\\n6523 6757\\n4188 4804\\n6943 8637\\n8932 3505\\n9910 7649\\n6499 1187\\n4351 1754\\n9182 3188\\n2222 8942\\n723 4623\\n2002 1486\\n1204 5519\\n773 5190\\n9869 3089\\n4456 5401\\n5954 2652\\n5883 8771\\n8206 2313\\n7819 9048\\n5369 5898\\n3651 3484\\n2387 3880\\n5820 1229\\n9461 2460\\n133 9257\\n1597 4553\\n6226 3630\\n8046 1976\\n4785 4569\\n6394 653\\n2657 366\\n5677 9335\\n3273 4462\\n8861 1689\\n3425 8424\\n7070 4580\\n150 4230\\n5912 2962\\n3927 7854\\n6924 9443\\n314 5283\\n3014 3658\\n1933 9072\\n7346 4840\\n357 5449\\n4067 1257\\n6003 2547\\n3943 4656\\n2450 8441\\n8062 7298\\n4654 4635\\n7418 5266\\n7016 6622\\n2447 5261\\n6600 3390\\n6651 654\\n4312 531\\n4690 2153\\n2151 5572\\n9789 9304\\n8285 304\\n6578 9091\\n9641 3319\\n9743 3134\\n2339 1390\\n1277 6900\\n5202 9393\\n3763 1915\\n2192 9563\\n3439 2773\\n2447 1163\\n1196 8429\\n5763 3996\\n4865 1114\\n2514 4187\\n9221 9383\\n8606 6786\\n2299 7504\\n1327 3793\\n3443 343\\n779 8826\\n1275 3436\\n3295 9053\\n7265 565\\n1733 3029\\n5402 4427\\n751 5853\\n3112 3935\\n5027 9396\\n7613 5973\\n9420 611\\n9871 9353\\n6225 6442\\n9751 8488\\n4678 2389\\n2897 3209\\n7182 6057\\n6753 1983\\n9479 256\\n5005 9718\\n5082 1430\\n1065 4741\\n4798 4375\\n3180 2021\\n7460 1208\\n5153 2080\\n7175 1967\\n6423 5356\\n1781 3269\\n2110 948\\n7740 485\\n9343 6233\\n7773 1353\\n8106 6658\\n6101 564\\n9822 8640\\n1955 3299\\n680 1108\\n9750 1736\\n6652 7726\\n6216 9931\\n8516 1474\\n2481 3562\\n1660 2883\\n9923 4399\\n4456 1995\\n5150 3878\\n4480 9335\\n5680 4926\\n3565 2582\\n2716 1294\\n260 2219\\n7571 7370\\n4313 6152\\n8770 7016\\n3465 8981\\n9065 8460\\n2407 1922\\n9280 4062\\n1944 8734\\n4382 7164\\n8494 9225\\n6977 6858\\n6327 3768\\n2801 8347\\n378 4127\\n5700 3096\\n1190 7421\\n8896 9448\\n9850 5426\\n3686 9666\\n3405 5006\\n9418 7511\\n9831 2161\\n8072 5329\\n7331 188\\n3420 7405\\n9358 8611\\n2728 9015\\n5114 843\\n1677 2440\\n2024 9121\\n3695 9389\\n6648 5074\\n6034 849\\n8147 7308\\n5037 2225\\n9279 1797\\n8482 49\\n5477 6522\\n6354 12\\n6461 1433\\n1615 208\\n3466 7429\\n804 3857\\n8814 4301\\n8476 5837\\n4650 6496\\n1422 1539\\n8360 1010\\n9530 2094\\n5125 8374\\n382\\n8797 3897\\n8552 3705\\n910 7645\\n7091 9308\\n4257 2790\\n4442 5665\\n90 4608\\n9504 4152\\n5300 9090\\n3489 6984\\n3501 3770\\n1784 5462\\n9161 471\\n3927 9644\\n5219 2781\\n4055 1299\\n1213 1815\\n9398 6367\\n2009 1385\\n9840 6\\n1217 6029\\n5278 2935\\n9127 7312\\n4010 4831\\n7154 7058\\n3963 3505\\n4522 8448\\n5576 8818\\n5637 5536\\n2526 6680\\n7222 547\\n1349 4885\\n6854 3484\\n6123 8409\\n8997 540\\n2212 5782\\n4931 8005\\n8083 3160\\n6025 5189\\n7278 9688\\n9440 3357\\n2234 2027\\n3441 9863\\n3963 2061\\n3774 5152\\n6487 4805\\n3290 6592\\n1064 526\\n2805 1812\\n6780 6185\\n1380 8032\\n5167 1624\\n947 5964\\n2701 5580\\n2052 3082\\n8388 2012\\n7199 5000\\n9141 5700\\n2711 1145\\n5777 2644\\n2590 77\\n2929 2846\\n8649 3992\\n593 4374\\n604 7851\\n5239 3099\\n8461 1077\\n9473 474\\n3029 2717\\n9404 1462\\n7726 8110\\n9524 3696\\n1182 5644\\n9449 6446\\n6948 8691\\n706 6171\\n626 4899\\n185 3812\\n3544 5528\\n1230 5220\\n2532 2296\\n8939 7400\\n6513 3959\\n3713 6783\\n8277 4384\\n6397 4695\\n3735 9824\\n6741 50\\n5517 700\\n7184 7896\\n1636 4645\\n6399 432\\n4113 3479\\n320 2542\\n9800 4992\\n361 8034\\n747 8116\\n6111 6154\\n9654 4654\\n2271 7693\\n9068 8746\\n2647 3631\\n2473 574\\n1729 9055\\n4570 916\\n613 353\\n3170 1084\\n8686 7678\\n5909 2695\\n4774 4598\\n2917 9776\\n5385 512\\n1278 5562\\n5203 4522\\n7725 2857\\n3162 9607\\n6275 1823\\n375 5047\\n3394 6928\\n536 2101\\n2785 6322\\n4036 4075\\n7047 2917\\n4701 2420\\n5717 9311\\n8312 1434\\n9219 7375\\n7793 11\\n9770 6026\\n4196 7464\\n2055 448\\n8599 9513\\n8659 9510\\n1982 2733\\n3650 5801\\n9380 5739\\n1738 2107\\n3016 8579\\n1468 9284\\n9200 4189\\n1420 3623\\n4579 9071\\n2098 2028\\n6646 8375\\n2880 1024\\n7242 7395\\n4794 9709\\n8858 4050\\n951 7377\\n9660 9405\\n4416 2071\\n8221 7211\\n7967 6064\\n9065 1111\\n3280 9415\\n4200 8317\\n5271 9670\\n1202 6887\\n8065 7451\\n3160 3334\\n9040 2986\\n4586 2947\\n9177 5792\\n4271 7361\\n4817 5452\\n443 9004\\n1646 5684\\n8548 5242\\n2359 2741\\n2134 8823\\n8091 9611\\n9909 8698\\n5103 2266\\n9780 5545\\n1728 4678\\n9485 597\\n9272 3482\\n8983 6841\\n5513 8705\\n5257 903\\n2821 2090\\n1952 8258\\n3983 7331\\n1565 3076\\n7625 7561\\n9642 2081\\n3570 9727\\n9251 4942\\n4080 2281\\n9562 7940\\n8342 2880\\n9267 1654\\n3869 8429\\n6376 3605\\n7707 7846\\n3048 7962\\n6737 9450\\n9068 6012\\n799 2919\\n5852 7879\\n1476 7252\\n6920 8581\\n9148 8145\\n6876 1159\\n4073 6632\\n6406 4077\\n5366 7708\\n821 9854\\n2142 1955\\n8222 8947\\n2902 8377\\n1933 771\\n6081 2101\\n8188 3550\\n1671 2718\\n7633 8213\\n2893 5106\\n6572 5754\\n690 3821\\n5807 7019\\n3895 6416\\n4330 9850\\n8825 3918\\n1652 5356\\n8101 11\\n9905 283\\n3062 1124\\n3374 6188\\n1149 1027\\n8880 7001\\n4151 1933\\n2170 9976\\n824 9052\\n7296 513\\n4540 3972\\n6945 602\\n966 8943\\n50 6357\\n5156 5286\\n1951 6590\\n1949 3644\\n5035 8567\\n4211 2855\\n6341 7420\\n2695 5226\\n8417 505\\n3595 7327\\n9691 1151\\n740 6899\\n6084 7857\\n3966 204\\n3364 5105\\n8883 893\\n640 3985\\n638 7580\\n9994 6340\\n3838 6849\\n5570 6050\\n2784 5150\\n2182 9643\\n7375 5679\\n857 8941\\n7548 2672\\n7272 3499\\n8951 3787\\n3113 8545\\n4929 3306\\n8022 9401\\n1953 6033\\n4851 6598\\n8751 6977\\n471 5408\\n3335 8015\\n8489 2192\\n8330 6288\\n5352 5474\\n1271 8339\\n5966 3888\\n5802 637\\n2839 8573\\n6344 1604\\n4117 3329\\n7782 7174\\n6474 7978\\n8634 2297\\n9501 8422\\n9584 999\\n2576 5367\\n5180 8331\\n9331 6755\\n8969 9716\\n733 311\\n1898 5056\\n1478 5284\\n2510 5807\\n6955 9572\\n7161 6433\\n8879 8523\\n1055 8855\\n2025 7822\\n9753 9287\\n5240 2297\\n5057 4816\\n8248 1469\\n7074 2825\\n4538 905\\n4492 3971\\n4060 4835\\n4271 8823\\n2079 3610\\n8647 2201\\n2446 3351\\n579 1554\\n1985 9349\\n1367 8812\\n9203 9504\\n337 6237\\n6420 2824\\n261 8715\\n4918 7417\\n8052 3824\\n4517 408\\n933 7196\\n8933 3748\\n2268 4781\\n7101 5854\\n9577 1621\\n5846 7862\\n8167 8112\\n1461 3499\\n8176 8728\\n2678 2236\\n8840 148\\n7928 9234\\n2579 6289\\n6471 5287\\n1976 9711\\n2681 9035\\n7968 8493\\n5748 6209\\n9429 8542\\n2489 8680\\n8704 656\\n3579 1917\\n1822 8450\\n4784 5365\\n3188 6321\\n8100 7609\\n1287 9341\\n8823 3099\\n215 4918\\n5206 7464\\n9789 6492\\n9885 1257\\n6412 5333\\n3956 1840\\n7300 4767\\n2619 1499\\n1775 4981\\n5184 1274\\n992 9579\\n3927 3817\\n3169 7953\\n2938 5787\\n5203 3633\\n3075 5518\\n6503 9\\n5156 5701\\n9652 4175\\n9588 1857\\n4175 7551\\n2632 4000\\n1028 349\\n8541 5387\\n1486 8030\\n4670 9389\\n5694 9113\\n5406 6596\\n1643 7244\\n6747 9042\\n920 3812\\n9612 6913\\n491\\n5975 2459\\n144 8575\\n5792 7890\\n5851 4506\\n4216 246\\n3807 3490\\n4947 2810\\n6490 3836\\n2644 1160\\n9055 2869\\n6019 8378\\n9078 967\\n2220 7786\\n4348 1163\\n1133 4187\\n2757 6844\\n9272 4851\\n9584 5733\\n9551 858\\n3795 4156\\n8543 7569\\n478 1887\\n4359 9496\\n725 8019\\n938 8465\\n9124 9111\\n295 5123\\n3102 1837\\n8871 5958\\n4270 8577\\n2277 3982\\n2904 5415\\n9303 2861\\n326 9104\\n7014 993\\n7768 4792\\n6231 947\\n7439 855\\n2744 1875\\n6950 3804\\n1657 8300\\n5933 2130\\n9322 5101\\n3856 2376\\n8356 7601\\n2786 6388\\n2165 7821\\n4076 1689\\n7986 3230\\n7943 8368\\n9970 6769\\n823 5177\\n1013 6000\\n8479 5897\\n4080 6603\\n6596 1308\\n7407 7345\\n789 5153\\n3083 3460\\n3897 3387\\n3810 8988\\n477 6250\\n495 6520\\n6531 5996\\n7133 7479\\n8905 1670\\n6846 9390\\n280 6415\\n8965 6357\\n3599 3030\\n5259 7391\\n8657 8352\\n3813 9784\\n672 503\\n5023 6308\\n6457 2286\\n6115 1416\\n6434 2188\\n2376 1852\\n8107 8723\\n6643 515\\n1492 5009\\n253 9910\\n2561 8494\\n7810 6407\\n4766 871\\n2716 7249\\n818 4774\\n1797 4781\\n6712 4890\\n875 7132\\n977 9339\\n3891 7285\\n7771 5536\\n9607 3818\\n3350 5520\\n1316 9385\\n8706 4114\\n182 9007\\n161 7512\\n5062 7354\\n2708 1212\\n6651 8219\\n2870 4730\\n508 6211\\n4042 3868\\n1440 1108\\n5650 6617\\n6110 1346\\n7528 4717\\n1808 1216\\n2853 3815\\n9116 5664\\n8940 6693\\n6079 4992\\n2778 9512\\n7031 7518\\n7657 1998\\n8431 7074\\n3642 1909\\n2239 9175\\n7256 8331\\n504 9110\\n5509 2742\\n5382 9283\\n3402 5119\\n8552 622\\n3082 2146\\n8379 210\\n8300 7356\\n1854 7108\\n2995 5814\\n8786 1185\\n5957 9446\\n2669 7579\\n6413 5045\\n5711 1003\\n2677 2517\\n7540 9124\\n444 261\\n1858 1513\\n1548 5473\\n7530 1749\\n8304 7448\\n1299 3\\n3414 73\\n8153 6244\\n6517 1868\\n1337 4970\\n4882 4144\\n2655 3735\\n6007 5586\\n5210 7401\\n3568 2981\\n6984 7395\\n7989 9793\\n1038 8870\\n9189 8681\\n2406 1314\\n8459 7674\\n4613 296\\n6796 5285\\n6284 8380\\n1451 4671\\n4375 1444\\n6631 3927\\n3924 6476\\n4590 5807\\n3514 9708\\n995 1891\\n2267 2162\\n6004 1037\\n4042 6152\\n6498 750\\n7655 4499\\n4005 6267\\n9487 321\\n9455 9863\\n3336 9084\\n3489 8065\\n8678 2499\\n2953 1139\\n9061 6131\\n9239 5111\\n2283 6134\\n6351 961\\n8987 3059\\n3894 1377\\n9373 484\\n9232 4883\\n4259 1723\\n7596 4535\\n9396 7168\\n9465 4921\\n4648 2537\\n7184 2015\\n7304 1007\\n7056 3952\\n873 200\\n7278 5835\\n2661 197\\n3385 8991\\n7171 283\\n2877 963\\n7764 111\\n2796 9328\\n1252 257\\n1167 1292\\n4482 9888\\n5493 3354\\n5271 7264\\n2496 7976\\n545 1170\\n6286 6620\\n7284 2644\\n8420 9775\\n4455 6437\\n420 4927\\n8963 7130\\n6372 2066\\n4101 3170\\n9869 8993\\n2650 7754\\n9782 6546\\n872 7805\\n6927 5413\\n865 14\\n9435 3639\\n6107 7613\\n1631 2688\\n3804 1027\\n6673 4606\\n311 2439\\n3342 6469\\n8903 6005\\n3333 6924\\n1768 3194\\n3862 3476\\n1693 6164\\n1196 9449\\n5361 954\\n1892 8115\\n4697 8882\\n7692 767\\n9417 1776\\n9988 4641\\n2783 9508\\n8643 8520\\n5542 4481\\n6286 3238\\n7416 9174\\n7727 9851\\n3862 1340\\n3921 9950\\n8132 9973\\n2094 3447\\n6564 1584\\n3383 1370\\n5979 3841\\n1302 809\\n448 1758\\n7288 1643\\n235 6023\\n5293 9349\\n1263 3639\\n9762 7202\\n6079 298\\n9987 4878\\n5688 4847\\n372 2700\\n3676 8573\\n7511 1911\\n1414 7126\\n6969 83\\n3607 2117\\n8700 9164\\n418 4459\\n5860 4530\\n6422 7398\\n3563 1440\\n9726 6559\\n2567 9578\\n256 659\\n2814 6889\\n9407 85\\n6161 7654\\n1560 4464\\n194 1380\\n4897 5992\\n1699 6231\\n8319 687\\n7967 5275\\n2016 8418\\n6511 4986\\n976 4712\\n841 3581\\n3990 4768\\n7460 1611\\n5643 2693\\n4644 8109\\n1799 4027\\n185 2082\\n4151 299\\n6864 465\\n8684 5503\\n1385 3643\\n4807 6018\\n5868 7038\\n4226 6425\\n897 994\\n7254 5258\\n8339 4700\\n206 7734\\n9137 3325\\n6182 7093\\n7567 128\\n1214 8081\\n3459 6030\\n4349 7178\\n1656 2371\\n4738 6071\\n5169 8668\\n6734 5559\\n3143 3536\\n4131 1868\\n1435 2284\\n6245 8917\\n7995 603\\n7558 6565\\n7983 8566\\n2522 7281\\n948 982\\n6378 1464\\n5781 6136\\n1833 3002\\n5292 4123\\n3005 1281\\n8184 8676\\n7993 1241\\n4382 3683\\n8896 781\\n5364 1755\\n31 850\\n424 9955\\n1731 905\\n8469 7081\\n7689 4528\\n3485 7125\\n6359 3292\\n5896 723\\n1259 2918\\n4782 6862\\n5171 2673\\n8754 3159\\n7020 7128\\n6154 5817\\n5650 7847\\n4970 3368\\n1383 8534\\n7142 583\\n4686 2024\\n7279 2327\\n4351 409\\n6831 9189\\n4601 7835\\n9576 6257\\n386 1517\\n8074 1199\\n8942 6228\\n7634 6849\\n2926 6452\\n1335 1830\\n8722 8906\\n480 3215\\n81 2306\\n324 8507\\n7610 9214\\n4709 9007\\n9828 58\\n3379 2739\\n6 7925\\n9297 2473\\n3994 3707\\n8738 550\\n2999 8636\\n5001 2163\\n5244 2317\\n8225 2382\\n7300 3575\\n1285 4729\\n7083 2708\\n2278 4137\\n8003 6570\\n6656 7977\\n8231 42\\n4672 7520\\n9769 8105\\n1259 3263\\n3915 4234\\n1041 5137\\n606 7731\\n1269 699\\n8495 8420\\n1458 9581\\n8176 7865\\n9150 3180\\n3681 8918\\n8251 8439\\n5938 4036\\n6422 3781\\n5725 6468\\n3302 2363\\n78 2715\\n4956 8661\\n6155 694\\n5954 3507\\n891 7980\\n5325 4468\\n6383 9114\\n5350 3653\\n5716 2710\\n8290 1660\\n2035 7621\\n8558 7833\\n3413 3250\\n9538 8550\\n2009 8970\\n9823 9279\\n7954 9441\\n8218 7060\\n5713 3403\\n9737 9504\\n1545 3404\\n4538 3665\\n7827 8216\\n8630 8486\\n7649 8659\\n72 2314\\n2804 4260\\n9952 9212\\n6463 7965\\n2987 6428\\n1204 2004\\n9103 2664\\n6701 713\\n9446 4621\\n4802 8224\\n3063 8232\\n7086 1843\\n6716 6756\\n6574 7837\\n5660 1474\\n8805 4128\\n8275 8870\\n5101 3538\\n503 3354\\n6905 5667\\n3345 4644\\n9218 6781\\n883 6550\\n7163 7769\\n2442 3480\\n5763 537\\n5884 944\\n7564 9288\\n3694 4577\\n57 1721\\n4873 8059\\n125 9315\\n6714 9816\\n3526 104\\n6794 7970\\n4760 8766\\n6561 5921\\n900 5028\\n6650 9564\\n7758 3926\\n8387 5339\\n9313 3598\\n7817 8842\\n5993 9278\\n4947 3561\\n3434 1787\\n9982 5768\\n9527 2695\\n3114 7433\\n6935 3209\\n8746 7112\\n1759 5787\\n2540 1015\\n5025 8276\\n90\\n3120 9586\\n9963 1410\\n4395 9555\\n6489 5544\\n4090 4788\\n6442 7533\\n2752 7751\\n2326 4504\\n8229 7214\\n3683 2056\\n591 2121\\n6561 900\\n3337 4540\\n8346 300\\n4807 2385\\n3893 4682\\n5966 3464\\n3637 5194\\n6656 2780\\n5811 7953\\n8482 7780\\n2263 3967\\n464 8076\\n3305 5021\\n2178 8739\\n2680 2223\\n1574 3257\\n7717 461\\n6488 1775\\n9078 398\\n6716 9031\\n1372 3115\\n2722 9465\\n3427 8479\\n5444 2730\\n27 7026\\n8756 8850\\n9037 3467\\n5242 1301\\n2981 9668\\n3478 3718\\n933 3677\\n5103 1837\\n4911 9864\\n6731 1893\\n2812 9172\\n3227 9243\\n4546 9572\\n652 9559\\n5945 1833\\n635 3111\\n6205 5162\\n9996 7915\\n9585 2030\\n8433 1745\\n2464 8686\\n5945 54\\n4489 507\\n6483 9923\\n8443 8379\\n6175 6002\\n7826 8301\\n9565 6195\\n4994 6497\\n9957 8260\\n3987 8613\\n3945 9370\\n7046 4336\\n5583 344\\n2241 500\\n4981 2405\\n160 8095\\n9504 4588\\n5771 7693\\n5762 4956\\n2997 2056\\n5879 9421\\n7186 6060\\n2948 2945\\n5185 6647\\n4588 5927\\n950 2210\\n2083 7098\\n1719 9109\\n1719 4087\\n7512 4936\\n4398 8939\\n6590 7674\\n281 7313\\n3514 4172\\n124\\n8150 9396\\n1290 7963\\n7157 8465\\n7224 2415\\n4186 5718\\n2909 5881\\n8801 1641\\n4439 4476\\n782 1948\\n5624 5526\\n7553 2047\\n3410 5713\\n8413 7637\\n3568 7960\\n8263 9821\\n2938 2113\\n2732 1531\\n1776 8940\\n5275 7673\\n328 3993\\n6895 4789\\n3741 1340\\n5505 1721\\n6217 1422\\n7721 7103\\n6199 5967\\n600 5118\\n2481 1095\\n7688 7259\\n521 8994\\n9263 956\\n2783 6571\\n4449 4790\\n9664 9994\\n2509 5457\\n5872 2227\\n5906 4950\\n94 7527\\n6494 9943\\n4518 3607\\n3501 1688\\n2725 2532\\n7994 6593\\n5689 6882\\n7437 8065\\n108 3225\\n7278 7210\\n2507 5877\\n1192 482\\n1506 5334\\n5222 5523\\n4958 1901\\n9318 5433\\n8906 7973\\n1049 3463\\n9324 2005\\n946 5278\\n9824 1844\\n9031 3149\\n2236 410\\n5620 3264\\n2617 7961\\n196 6527\\n7113 2954\\n7902 6964\\n3389 7006\\n1255 1037\\n6948 7559\\n928 7285\\n7863 233\\n1541 2260\\n9403 5431\\n9216 9589\\n8434 5275\\n1331 8269\\n9995 8651\\n2231 78\\n7251 8461\\n4026 7201\\n504 4438\\n636 9525\\n2052 7773\\n4531 9750\\n3356 1442\\n785 1998\\n3896 1045\\n6180 2267\\n7883 9544\\n1907 5755\\n1056 5943\\n3927 4098\\n6341 7009\\n5130 5040\\n8220 7497\\n5451 8803\\n7829 7778\\n3489 5808\\n3346 13\\n1786 5254\\n5341 4219\\n8930 3054\\n5431 1302\\n1766 7020\\n9591 4318\\n2888 4555\\n2778 9826\\n666 8181\\n8322 7253\\n5631 2032\\n9046 4739\\n4853 2663\\n2349 7398\\n7411 9497\\n2062 2880\\n9359 3898\\n1814 1154\\n7061 5790\\n4322 4354\\n1623 7670\\n8788 2844\\n5449 6346\\n3043 6887\\n6442 259\\n1511 8523\\n331\\n8890 3843\\n7845 5152\\n4409 358\\n199 6275\\n1654 1639\\n843 8884\\n3934 6080\\n956 9558\\n4439 5990\\n7721 1271\\n2538 1817\\n5684 6453\\n7848 7207\\n7494 4355\\n924 4929\\n823 2773\\n9069 9480\\n6378 4915\\n5731 1565\\n3739 6491\\n5112 1821\\n677 3589\\n7537 6844\\n3303 120\\n5400 8854\\n5788 8607\\n9016 4525\\n3549 5701\\n1984 3084\\n3288 8944\\n2401 4129\\n1695 1398\\n1875 6072\\n7063 3779\\n6776 814\\n289 3805\\n9113 8548\\n8300 8156\\n5731 3606\\n11 5968\\n8421 4479\\n5892 1075\\n3266 9628\\n1733 8721\\n3956 5474\\n8349 8838\\n6581 1028\\n1756 792\\n2845 8278\\n643 4159\\n440 2559\\n8092 9884\\n5455 5956\\n871 2398\\n212 5652\\n6651 1494\\n8372 6310\\n2771 1890\\n5994 6112\\n7637 4655\\n6623 6406\\n7691 5805\\n118 3\\n2955 5383\\n8534 2452\\n8670 9996\\n2360 9654\\n4402 3269\\n1494 7791\\n3858 191\\n5620 8701\\n9107 5994\\n7660 7535\\n6967 3624\\n9315 2912\\n5765 2693\\n3356 5177\\n1033 9775\\n2329 8916\\n2334 7119\\n8246 3521\\n2440 9967\\n2216 5635\\n5696 5970\\n6798 778\\n5419 7271\\n4403 9506\\n5094 8302\\n484 3825\\n6398 5063\\n9448 3854\\n9895 1159\\n952 9493\\n5042 6788\\n5088 28\\n8372 1250\\n6239 3532\\n5597 6213\\n7126 5601\\n1666 4623\\n9382 1582\\n8272 5764\\n9169 5811\\n5570 7438\\n9697 6385\\n2320 7849\\n4671 8750\\n982 2470\\n830 8910\\n9880 7419\\n6751 112\\n3896 1034\\n1736 8842\\n5138 530\\n6278 9065\\n3996 8006\\n4952 1829\\n3355 205\\n6856 5527\\n748 3305\\n2989 4826\\n119 9875\\n9570 4084\\n6698 5706\\n9292 5951\\n4400 1826\\n3879 9763\\n9008 3074\\n1623 1703\\n360 291\\n4302 4706\\n3550 5062\\n935 2026\\n3113 885\\n3357 4938\\n6247 1761\\n6035 881\\n1708 6446\\n6797 4815\\n9753 2720\\n6108 7199\\n184 7338\\n3779 9238\\n585 1599\\n2035 2921\\n1125 3176\\n2436 316\\n8213 1265\\n4986 2383\\n4035 1465\\n2834 8024\\n1444 3175\\n9403 2130\\n3237 2285\\n4696 2259\\n9317 1513\\n2725 8726\\n1492 9359\\n2793 6225\\n4119 357\\n775 5114\\n4324 635\\n375 1280\\n9847 3853\\n3862 1778\\n4967 7856\\n1753 3900\\n6846 2450\\n2564 1440\\n1457 6377\\n2600 4474\\n6602 6395\\n534 3197\\n8916 3219\\n9124 1964\\n9152 4292\\n113 8539\\n7704 8932\\n1756 8696\\n7427 4645\\n2478 1788\\n9604 4506\\n6348 2612\\n5828 6194\\n61 3818\\n591 6729\\n799 6459\\n4148 8069\\n4994 6316\\n4101 948\\n2797 3461\\n1794 8869\\n9700 2145\\n450 6931\\n6931 9894\\n5384 1474\\n6464 1610\\n2400 6477\\n5561 6955\\n6557 9537\\n6116 9601\\n8303 5208\\n3081 7549\\n8639 2023\\n5884 6326\\n5362 556\\n41 5106\\n5709 5794\\n8920 923\\n9697 3413\\n3727 266\\n5333 3198\\n5728 5204\\n8827 6257\\n7071 6707\\n4562 7849\\n4100 5257\\n4582 6349\\n4079 6778\\n299 4036\\n3831 88\\n8913 5210\\n2104 2023\\n9947 3583\\n145 1578\\n5383 4911\\n3443 5981\\n8189 9931\\n4997 764\\n6507 5611\\n9244 6608\\n4204 6394\\n8179 8211\\n1949 1965\\n2031 9646\\n4288 4713\\n9287 9266\\n3853 928\\n7001 4842\\n1141 1364\\n8642 2104\\n5573 7467\\n2932 7223\\n3688 7658\\n6705 2079\\n3627 8351\\n7240 928\\n749 5462\\n4788 3858\\n5970 6021\\n4448 9654\\n1664 7181\\n3485 4701\\n2943 8932\\n5295 9794\\n9392 8041\\n9450 5904\\n11 2836\\n2521 359\\n8731 2815\\n7686 4322\\n8823 9885\\n3028 3451\\n1450 2913\\n2042 6798\\n3654 9456\\n464 9741\\n7721 8388\\n6740 4320\\n3923 8597\\n4424 5354\\n1452 404\\n2719 2815\\n3233 2559\\n642 1303\\n4138 9139\\n9495 5789\\n8115 2511\\n2846 7352\\n1572 6752\\n6651 5323\\n4246 2578\\n3279 7149\\n9505 787\\n5817 341\\n8705 8314\\n9688 5656\\n7532 8084\\n8086 7309\\n3164 4122\\n6184 5657\\n2649 1648\\n1049 1214\\n6314 6741\\n2662 5454\\n7001 7519\\n2894 2382\\n9927 2692\\n7522 3497\\n3579 6751\\n9115 6255\\n2427 1333\\n5993 9838\\n8144 4778\\n796 1432\\n6943 7670\\n4742 3760\\n2702 873\\n4319 4029\\n3756 3803\\n8045 7204\\n5590 37\\n5004 5838\\n5617 6276\\n2343 2032\\n3741 9027\\n9612 6484\\n6647 8061\\n4111 5843\\n8345 8123\\n2344 8370\\n6202 1366\\n8210 561\\n6016 6375\\n588 8293\\n4349 4864\\n6176 2802\\n728 846\\n9847 766\\n2566 1301\\n2986 3381\\n532\\n9131 1659\\n3386 5373\\n2088 2989\\n4548 8431\\n2612 5984\\n467 8923\\n5179 694\\n3881 1108\\n3499 3304\\n5081 1532\\n4632 5377\\n6846 92\\n1555 3483\\n6163 5713\\n597 7246\\n6606 940\\n6560 1025\\n180 8024\\n2842 8223\\n3014 2967\\n4343 4544\\n2793 773\\n9577 6864\\n8446 4186\\n5208 3222\\n5958 898\\n2930 6943\\n7350 8141\\n867 9428\\n5036 7434\\n6730 8610\\n4804 3352\\n9373 6123\\n3554 8653\\n1146 6305\\n2572 9835\\n9864 2670\\n2810 5944\\n5320 1939\\n1874 1537\\n5491 4410\\n5742 4319\\n9548 7814\\n1410 4648\\n1490 3721\\n8779 8141\\n4545 4040\\n1229 4392\\n2588 241\\n9434 5653\\n5721 3258\\n8610 9949\\n6615 7078\\n3931 4102\\n5439 8029\\n5349 704\\n8140 3197\\n5427 2830\\n2763 6830\\n1140 9367\\n596 3593\\n7738 9791\\n8912 1110\\n2454 9629\\n8530 8321\\n574 8775\\n9919 5314\\n7295 936\\n765 135\\n3288 3919\\n1686 767\\n2255 5897\\n5530 98\\n6433 7953\\n9940 1139\\n1969 9099\\n4982 5821\\n9442 8280\\n5564 7750\\n6116 467\\n2603 7136\\n3175 3753\\n4122 6236\\n6295 2140\\n1678 869\\n6785 9899\\n1675 7884\\n218 957\\n7671 5993\\n5534 9242\\n3125 7225\\n3875 4929\\n2259 2105\\n1422 1498\\n5372 9300\\n3711 1201\\n6639 1584\\n8733 701\\n2183 8464\\n6148 2185\\n3061 400\\n9839 3770\\n2876 963\\n7682 6411\\n4173 5261\\n761 8961\\n9567 8188\\n5059 8602\\n1381 6621\\n2673 2973\\n1681 7522\\n355 250\\n1582 2108\\n1628 9850\\n8328 8989\\n3861 3204\\n5561 6965\\n4369 7707\\n3341 8844\\n6687 1001\\n7963 5394\\n2716 5405\\n1942 5492\\n6775 7603\\n5007 4130\\n1778 9896\\n9616 5450\\n6508 9340\\n8139 6062\\n4989 5485\\n1316 9997\\n3318 6549\\n1894 9227\\n9881 8027\\n2319 4960\\n7616 9197\\n9391 5787\\n3194 7509\\n2621 6686\\n4873 9675\\n320 3987\\n3213 2447\\n6283 6778\\n3922 9789\\n6800 9545\\n9928 4647\\n603 382\\n5307 5844\\n3617 1592\\n5242 4663\\n3232 2819\\n8709 529\\n8071 1491\\n4116 982\\n678 4707\\n1945 4604\\n1948 2030\\n863 3298\\n7164 974\\n785 961\\n6648 9703\\n9957 2489\\n9147 8460\\n3833 9530\\n5177 3573\\n2556 3649\\n5475 1766\\n4143 4877\\n4965 1344\\n4729 2154\\n3643 5126\\n6659 3790\\n6223 6378\\n1553 2996\\n3901 2535\\n2281 3072\\n1457 5338\\n2765 9944\\n4154 5375\\n8160 7740\\n796 63\\n3768 5311\\n8345 8316\\n742 3806\\n4467 5697\\n3059 333\\n6259 5797\\n3705 6998\\n5483 3032\\n163 1397\\n1748 1424\\n4132 3546\\n8351 4172\\n3506 1915\\n3697 7912\\n8468 4041\\n8086 3214\\n7302 771\\n3933 2472\\n8299 3979\\n6343 4541\\n9471 2143\\n7150 7576\\n208 5250\\n3001 8760\\n4472 7759\\n1756 9989\\n6263 9191\\n2080 675\\n120 697\\n2943 1156\\n5327 8710\\n6557 3794\\n7434 4694\\n9041 604\\n5845 344\\n9755 8610\\n6728 9861\\n953 7058\\n6699 4337\\n6194 9336\\n4377 8511\\n551 1951\\n1580 6263\\n5069 6632\\n7221 2895\\n1067 426\\n7563 3978\\n4873 9519\\n3681 9339\\n9526 456\\n7337 7249\\n8452 3800\\n9267 7617\\n8835 5239\\n2828 9270\\n8468 146\\n4482 9799\\n1510 4658\\n4685 2557\\n8910 1739\\n6109 9349\\n7942 355\\n8731 8904\\n8504 2763\\n7431 5157\\n3514 9429\\n196 5317\\n3266 502\\n9122 7015\\n1390 1814\\n137 9309\\n7148 9670\\n5290 9018\\n6765 1393\\n8935 4587\\n4102 5355\\n4218 4955\\n264 3735\\n8884 2489\\n4892 4536\\n6126 3731\\n3415 2936\\n7678 7859\\n3577 6916\\n5731 7831\\n4672 4665\\n6584 7070\\n1520 2592\\n9749 7717\\n301 3482\\n1606 4688\\n5272 9734\\n1564 4407\\n9952 8073\\n9432 877\\n9520 7930\\n1324 8011\\n1001 3729\\n4429 9542\\n9708 798\\n5102 3502\\n3429 1752\\n1924 2780\\n1381 4943\\n6221 7178\\n1793 4370\\n1537 4511\\n9919 3070\\n1575 4462\\n7482 6933\\n8911 7570\\n743 6417\\n2522 4508\\n2216 9144\\n3064 9868\\n1473 1295\\n9270 254\\n8924 8939\\n8217 6184\\n1867 3628\\n9144 450\\n6272 3909\\n1421 4637\\n1749 5287\\n4149 9781\\n6381 2372\\n1567 7134\\n3017 6187\\n3134 5479\\n8292 1356\\n6952 7335\\n9906 3040\\n9037 6215\\n7498 5875\\n7405 5846\\n8986 7187\\n1716 5921\\n1175 8927\\n4584 370\\n3627 7956\\n2447 6035\\n3180 8104\\n7749 5180\\n7237 8757\\n3982 6404\\n6109 6896\\n5907 2231\\n8977 3197\\n8979 7166\\n6883 2441\\n1104 3884\\n3266 5196\\n6798 1585\\n6986 4876\\n5258 3875\\n1342 7367\\n8403 7820\\n4134 8969\\n2159 429\\n6946 9384\\n219 8595\\n7396 6677\\n4377 8607\\n7601 7563\\n1730 3980\\n344 4641\\n5793 5578\\n2399 4004\\n5491 4042\\n9920 31\\n9899 6402\\n7875 5875\\n8906 2032\\n4050 1136\\n8140 7909\\n7958 179\\n2750 1783\\n1846 4917\\n1982 415\\n2733 3255\\n5424 2626\\n2374 5556\\n8077 2120\\n519 165\\n3126 5658\\n1917 3622\\n3402 3779\\n5537 7872\\n5967 5768\\n4816 4189\\n3522 5645\\n4897 4116\\n8582 467\\n5195 6666\\n1962 8342\\n1784 8750\\n2237 4224\\n7846 269\\n8258 6681\\n250 7661\\n4140 9176\\n8348 2530\\n1665 726\\n7148 6888\\n603 7412\\n7409 2328\\n7719 8084\\n3184 4979\\n8960 9093\\n2896 8490\\n8303 4800\\n7409 2777\\n4 3614\\n342 3700\\n8491 6528\\n7628 8458\\n8305 5139\\n3528 8207\\n5992 8059\\n6170 2413\\n7160 882\\n8872 6553\\n1616 5725\\n605 1844\\n1584 3457\\n6386 6713\\n2717 4197\\n4414 3601\\n3099 714\\n6221 6502\\n8176 1001\\n5411 7984\\n414 156\\n4026 172\\n7870 8087\\n8830 1538\\n1113 7289\\n7444 5827\\n1568 1209\\n9915 9072\\n8149 9403\\n6564 8270\\n3724 7152\\n4229 6615\\n5856 8720\\n3013 4382\\n1054 4530\\n5074 1251\\n5198 7319\\n8386 946\\n1324 6196\\n9644 6513\\n5042 1313\\n1683 9023\\n2706 6695\\n3683 3317\\n5699 8053\\n1545 8635\\n1595 9494\\n345 2033\\n1476 4933\\n8505 5272\\n4219 9780\\n6008 3055\\n1685 9522\\n7297 7311\\n5746 7339\\n1592 8329\\n8182 5761\\n6726 2102\\n9562 5391\\n2516 9627\\n4437 2514\\n5631 7721\\n1176 219\\n5946 529\\n1894 7286\\n3783 6589\\n3846 5505\\n2985 3180\\n2984 2849\\n1361 9284\\n6746 4828\\n7621 2179\\n6245 64\\n7806 6501\\n6587 3885\\n3340 9806\\n321 4803\\n67 5642\\n4603 3819\\n9133 5620\\n6169 1306\\n4918 8813\\n2866 8725\\n7024 5939\\n9548 9138\\n631 6494\\n6998 978\\n5475 7654\\n335 9109\\n2369 8648\\n4308 9728\\n9898 2850\\n1852 630\\n1128 7619\\n2325 8442\\n2838 2976\\n7497 5725\\n8736 3520\\n2701 1636\\n6605 9845\\n7897 5631\\n6537 2669\\n9902 657\\n6772 9779\\n8851 5142\\n4541 4555\\n1913 3630\\n5900 9859\\n6213 1792\\n2883 6925\\n6184 2465\\n6367 6983\\n6450 2408\\n7724 9976\\n9337 8419\\n7944 6853\\n1483 8783\\n6257 1548\\n4531 8855\\n7746 8520\\n7891 3516\\n2853 880\\n4981 2724\\n4300 2326\\n361 9638\\n8168 2077\\n9156 1398\\n5489 4794\\n7181 6838\\n6538 4548\\n3801 4890\\n5895 3748\\n7291 5764\\n2197 4583\\n5923 490\\n1737 6932\\n8127 1296\\n1339 3703\\n1957 2044\\n790\\n8607 5541\\n1658 288\\n4852 7794\\n937 2810\\n6216 7650\\n5942 9576\\n8555 5849\\n1017 5736\\n9926 5711\\n2561 8485\\n2627 4343\\n4906 7341\\n1952 3884\\n3107 3279\\n5143 1811\\n3758 7099\\n4205 323\\n9926 7103\\n5185 5557\\n4207 6993\\n7532 8019\\n5279 536\\n9460 4620\\n54 2734\\n9610 352\\n7891 3300\\n1762 8161\\n1928 1889\\n9050 3102\\n4673 1577\\n2494 8772\\n7450 5902\\n6152 2322\\n2293 7070\\n6150 8614\\n9700 7822\\n7271 5305\\n7643 7737\\n9375 5803\\n9017 3627\\n9921 3959\\n921 1011\\n2115 5741\\n3507 203\\n1492 9503\\n3372 8073\\n9112 1750\\n7503 6946\\n5976 3536\\n6914 611\\n2277 1520\\n1895 4708\\n95 2786\\n9474 5581\\n848 295\\n9296 2921\\n4094 9325\\n5496 5777\\n9881 1345\\n9948 5799\\n9331 329\\n2857 9934\\n4187 4795\\n7406 2005\\n2863 4708\\n5346 9560\\n4674 5347\\n7825 6870\\n5198 268\\n4659 2855\\n1629 3781\\n8351 5263\\n4766 8345\\n1007 9173\\n432 5628\\n6531 8733\\n1857 9131\\n3184 9677\\n2278 7000\\n304 7811\\n1756 3509\\n7356 2446\\n8352 3575\\n100 6074\\n242 577\\n9031 9673\\n4828 3371\\n7168 6853\\n4357 6966\\n1526 2688\\n2131 8017\\n9347 2598\\n9494 85\\n7542 9629\\n1593 2035\\n6316 5287\\n8843 8919\\n8195 9081\\n6499 4051\\n6672 3026\\n7058 8190\\n5148 8204\\n2588 4517\\n1620 8911\\n4815 9292\\n7032 9711\\n5672 5953\\n6529 4329\\n6431 5290\\n436 9586\\n803 795\\n6881 1371\\n6945 2688\\n2721 6222\\n4236 6830\\n8941 9517\\n6049 7198\\n7548 7645\\n8405 661\\n8717 3310\\n9047 8134\\n3902 8600\\n2159 89\\n4248 7188\\n5040 3707\\n5077 3628\\n2836 731\\n7440 2015\\n6698 6190\\n8854 668\\n3243 860\\n1119 8245\\n6521 5947\\n9884 9765\\n4776 2471\\n4930 5957\\n1704 2307\\n8819 2481\\n1903 4447\\n8779 2098\\n2237 272\\n4745 5152\\n3251 8863\\n5841 6850\\n7672 6171\\n1196 1481\\n8369 7347\\n1409 6626\\n3041 9714\\n1933 6840\\n4469 870\\n4247 7453\\n6506 8932\\n6762 7010\\n4649 6445\\n6563 8429\\n8671 8248\\n8690 425\\n4514 7720\\n1390 5888\\n6286 333\\n3775 1359\\n6221 9113\\n1870 6835\\n3885 4893\\n9740 88\\n3617 2520\\n7986 7360\\n6489 9078\\n4844 2296\\n2052 6454\\n4470 8630\\n7618 9342\\n8503 3977\\n9384 9651\\n7447 9898\\n7910 589\\n7706 3144\\n6463 5965\\n8355 8712\\n4642 8814\\n6697 8330\\n5132 2141\\n4902 1070\\n8223 4722\\n5614 2079\\n4003 8942\\n913 7487\\n1307 6383\\n1080 3287\\n8219 7892\\n1797 6927\\n4755 4577\\n4892 5176\\n9033 7429\\n9918 2157\\n3571 2645\\n9361 7102\\n7063 2806\\n7948 2172\\n8956 1393\\n8854 8159\\n527 7449\\n8492 1155\\n9493 7281\\n7379 1012\\n4679 6654\\n7112 3096\\n1268 2568\\n4888 6045\\n6766 5714\\n6822 7393\\n1900 9514\\n5916 2863\\n2038 669\\n541 1783\\n5328 6417\\n9233 2695\\n5268 1203\\n9893 7654\\n920 1277\\n4360 2555\\n9709 4169\\n4194 9188\\n7811 2177\\n9096 6789\\n5433 7186\\n3461 1544\\n3859 5259\\n413 1041\\n7269 2442\\n6436 2069\\n4879 8829\\n1192 4348\\n9575 6883\\n9357 1863\\n6784 6716\\n4518 7732\\n6196 3648\\n5098 1172\\n2679 75\\n2740 6716\\n9656 2218\\n683 5524\\n5422 2444\\n4253 9846\\n8606 1084\\n8548 3110\\n6272 9211\\n9450 2674\\n4150 922\\n9159 7219\\n7374 4795\\n3265 6075\\n9343 438\\n5992 5954\\n9180 7089\\n2928 7476\\n4866 7291\\n7866 125\\n1133 419\\n3759 5847\\n2584 2697\\n9018 5120\\n8658 3665\\n1209 7328\\n8280 5961\\n8261 3331\\n3076 8296\\n7722 8447\\n5080 7835\\n7835 3673\\n9527 3945\\n8429 6452\\n9164 9568\\n2080 6391\\n925 9887\\n1656 4840\\n6594 5845\\n4983 4913\\n2940 2399\\n387 3534\\n1711 8404\\n5316 5649\\n701 3159\\n1130 5082\\n6865 2472\\n1704 8011\\n9742 3451\\n8971 679\\n4954 3140\\n9028 5177\\n5841 8084\\n9357 2523\\n626 3522\\n8618 544\\n2594 2583\\n540 7555\\n5358 2133\\n9831 6791\\n8802 3882\\n3663 9004\\n3664 3892\\n2542 9271\\n5909 582\\n1717 1705\\n7285 4058\\n2739 7452\\n5283 6109\\n5002 4837\\n310 690\\n6388 3160\\n2840 6478\\n4729 2603\\n4669 9039\\n3980 6185\\n2768 4197\\n1457 5774\\n4634 9589\\n9221 2094\\n8656 1316\\n4587 9854\\n4480 276\\n7767 7853\\n4830 9372\\n6778 3208\\n5726 5615\\n576 8252\\n3779 5663\\n7566 7783\\n8637 1298\\n6015 8674\\n4525 5920\\n2516 893\\n6642 1485\\n464 2131\\n1161 9395\\n6060 9042\\n6813 3030\\n8211 4900\\n7528 9352\\n7508 2227\\n446 2533\\n1617 498\\n8687 5061\\n8632 613\\n8407 3486\\n9332 1196\\n2116 2158\\n1308 2038\\n5374 3895\\n1323 2961\\n4780 8831\\n1015 1034\\n6397 3292\\n476 295\\n7889 6130\\n1927 2294\\n6277 5736\\n609 306\\n8609 3645\\n8952 8759\\n3269 655\\n1070 5947\\n1724 1299\\n8478 5038\\n9680 695\\n6270 9493\\n2686 8572\\n8367 6463\\n8240 1564\\n6404 4720\\n9989 6462\\n8909 4937\\n2869 2629\\n7505 7862\\n9036 5545\\n2931 3560\\n7435 3813\\n4254 7708\\n4222 240\\n4557 770\\n7240 8076\\n7338 2376\\n333 4798\\n7485 4648\\n8364 4924\\n2861 9594\\n8828 7828\\n6728 4801\\n8803 7723\\n2839 5513\\n5787 316\\n914 7062\\n2615 312\\n4612 6794\\n789 4211\\n2889 8910\\n863 6683\\n9553 6898\\n9488 8001\\n9020 5001\\n6605 7311\\n8978 7053\\n4221 7864\\n7453 3388\\n4377 1582\\n9497 8733\\n5055 4620\\n2421 333\\n4111 2461\\n3179 837\\n8911 3158\\n4666 974\\n8159 3819\\n1802 4817\\n8968 588\\n1038 5158\\n8703 1579\\n1509 1242\\n4507 4958\\n1922 5684\\n8878 7268\\n4661 3779\\n1572 5614\\n6397 9550\\n971 1399\\n5123 3371\\n3479 9561\\n3878 936\\n2764 6874\\n7024 773\\n3822 3025\\n162 7947\\n517 5597\\n2081 109\\n5100 9488\\n9347 6498\\n7952 1008\\n6935 6683\\n36 4585\\n5220 584\\n9688 2159\\n117 4423\\n166 3118\\n8749 213\\n9368 849\\n4457 3228\\n2607 3567\\n5302 9772\\n1430 393\\n9940 6229\\n3862 3423\\n8789 9699\\n5168 7681\\n2450 828\\n7820 4864\\n6507 86\\n1053 4715\\n7489 658\\n7005 9202\\n3964 1774\\n6922 9513\\n3478 1050\\n5877 1300\\n2609 2064\\n3179 2835\\n27 4915\\n3594 5349\\n4445 6382\\n7640 9330\\n8496 6937\\n5431 6032\\n2136 7886\\n3763 7195\\n4374 1223\\n8142 8165\\n2963 1464\\n499 8144\\n6525 6028\\n6879 9798\\n1885 8942\\n8341 4932\\n2703 5172\\n7279 186\\n3348 3536\\n8857 8177\\n6045 5574\\n6025 8600\\n6780 803\\n6071 8306\\n1214 2767\\n626 2780\\n5073 2481\\n7065 1745\\n8649 5168\\n7095 2403\\n8257 4547\\n6090 2398\\n7038 8917\\n5625 3652\\n2608 582\\n3159 4515\\n5002 2421\\n1525 7618\\n1281 422\\n8857 6657\\n3872 4874\\n1304 8522\\n5154 189\\n2182 6240\\n1910 5841\\n3722 1547\\n2729 9664\\n9721 9115\\n7490 1617\\n8076 2998\\n9725 9006\\n1146 9115\\n5564 2423\\n8210 4936\\n2656 650\\n6640 1967\\n685 5559\\n733 3781\\n5309 6974\\n1513 2673\\n98 2675\\n9950 7756\\n7643 2079\\n2199 8451\\n8196 5412\\n3491 4412\\n721 7694\\n8170 6433\\n1841 1984\\n720 9221\\n3448 1427\\n9810 5929\\n4349 8600\\n6442 5594\\n7982 5889\\n5061 6478\\n5300 3740\\n323 5511\\n5422 6466\\n4687 7327\\n9779 3079\\n9927 6055\\n1791 2706\\n8463 7330\\n3135 8130\\n5899 3563\\n2312 7167\\n9877 3223\\n4560 5568\\n8502 118\\n463 6207\\n5692 8042\\n7560 3204\\n6820 5580\\n8762 9049\\n8974 7445\\n7517 9740\\n4985 41\\n3430 2959\\n3378 7680\\n1878 2758\\n694 1000\\n3230 6098\\n7874 4419\\n9823 2119\\n4402 3611\\n1992 8570\\n6132 173\\n2581 2015\\n3016 9991\\n9870 9490\\n4020 1431\\n7054 1062\\n3994 4292\\n9411 9350\\n2486 1698\\n6126 3777\\n1700 8786\\n1906 5143\\n6490 8077\\n9371 3434\\n7372 3954\\n8045 4874\\n3084 6242\\n7978 2385\\n2871 6034\\n3212 4450\\n9468 7118\\n9311 9867\\n5642 1617\\n9686 9062\\n9537 1147\\n5858 729\\n8774 3668\\n2361 4348\\n4419 8560\\n4532 5082\\n7006 5157\\n4545 3515\\n1039 1872\\n7998 8398\\n9905 5659\\n1171 9348\\n8582 6479\\n8241 6761\\n8079 1771\\n229 8830\\n4972 8736\\n5778 1676\\n8736 973\\n6553 732\\n2927 2516\\n4674 4231\\n2975 4672\\n3651 7674\\n9 4657\\n9749 1435\\n1715 4530\\n1820 9371\\n2506 1123\\n6257 1010\\n8063 1435\\n475 3848\\n427 2583\\n3998 5196\\n4137 661\\n227 8334\\n7761 6760\\n1729 1111\\n5576 2839\\n1517 6177\\n4407 1839\\n9572 1152\\n4151 305\\n4261 3660\\n2320 5326\\n2385 3564\\n6187 4324\\n2167 5582\\n1215 9772\\n9717 7948\\n6685 2512\\n2568 9521\\n3886 1069\\n7539 3698\\n3173 8787\\n3205 8457\\n7735 8503\\n1192 5518\\n4928 8099\\n3948 3692\\n2470 4596\\n3101 3840\\n3684 5015\\n2769 3656\\n3475 2596\\n2726 5919\\n5487 8635\\n2203 9411\\n8399 1312\\n312 5076\\n978 7490\\n3967 5492\\n3194 3690\\n795 2409\\n9765 8940\\n6292 640\\n2686 331\\n5594 6554\\n5388 671\\n153 4230\\n304 8412\\n6603 7554\\n8295 155\\n8845 1375\\n2798 287\\n8625 6163\\n9908 3428\\n5246 5248\\n4385 3799\\n3212 6279\\n9823 1484\\n8379 4009\\n3943 6225\\n6412 7833\\n5970 8641\\n9930 8240\\n1221 1333\\n2045 8993\\n7533 783\\n2468 2862\\n6193 6506\\n8247 9737\\n689 6147\\n6483 1997\\n5994 5862\\n9486 360\\n2163 1458\\n6447 8110\\n2013 2008\\n6287 5641\\n8729 9519\\n3616 1921\\n5694 272\\n4955 96\\n1572 5604\\n9641 1883\\n4272 9316\\n7574 5079\\n8856 191\\n4643 7366\\n8486 4611\\n6530 6906\\n3047 3169\\n3722 448\\n9109 2954\\n3813 6466\\n8251 8825\\n787 4677\\n9147 9881\\n1278 4588\\n9978 4072\\n6150 9075\\n5473 4823\\n9117 9072\\n3827 1612\\n3349 1835\\n4853 5689\\n585 1186\\n7686 4960\\n3075 8206\\n7890 6417\\n5148 3763\\n4914 4249\\n8250 8542\\n6409 1806\\n8694 6875\\n2209 3779\\n2308 4212\\n6737 863\\n3048 6767\\n4382 2540\\n6886 1128\\n9399 6305\\n7096 1315\\n3475 2410\\n7711 1695\\n7656 7686\\n1889 4894\\n6049 5723\\n9625 9403\\n6001 1728\\n2562 2279\\n3694 5735\\n9622 585\\n5710 9985\\n6178 8859\\n1856 6530\\n6825 3509\\n5355 7438\\n85 6\\n6559 6150\\n3244 3876\\n4358 7867\\n1012 5043\\n2079 5228\\n8411 6380\\n9326 7900\\n222 3245\\n5017 1431\\n8306 7962\\n9414 3246\\n7844 1616\\n7729 5665\\n9589 1037\\n4212 1097\\n3178 4055\\n723 7720\\n1430 3343\\n8573 6554\\n5812 847\\n15 8147\\n658 7418\\n\"], \"outputs\": [\"3\\n\", \"10\\n5\\n5\\n7\\n8\\n2\\n4\\n6\\n7\\n4\\n\", \"1\\n2\\n6\\n\", \"7\\n8\\n8\\n7\\n6\\n7\\n7\\n3\\n9\\n3\\n2\\n2\\n8\\n8\\n6\\n7\\n10\\n7\\n7\\n6\\n9\\n9\\n8\\n2\\n7\\n8\\n7\\n3\\n6\\n4\\n5\\n8\\n5\\n3\\n6\\n9\\n7\\n5\\n6\\n6\\n2\\n7\\n7\\n4\\n2\\n8\\n9\\n6\\n9\\n3\\n6\\n2\\n9\\n7\\n6\\n7\\n2\\n7\\n8\\n7\\n7\\n8\\n7\\n9\\n7\\n4\\n9\\n7\\n9\\n9\\n5\\n2\\n2\\n4\\n4\\n5\\n2\\n3\\n7\\n10\\n6\\n8\\n8\\n4\\n7\\n5\\n9\\n6\\n10\\n4\\n2\\n9\\n6\\n6\\n4\\n9\\n8\\n7\\n7\\n9\\n\", \"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n4\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n8\\n10\\n10\\n3\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n5\\n10\\n10\\n10\\n10\\n8\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n5\\n10\\n10\\n10\\n10\\n8\\n10\\n8\\n10\\n10\\n10\\n4\\n10\\n10\\n2\\n10\\n8\\n\", \"4\\n4\\n\", \"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n\", \"1104\\n248\\n1131\\n204\\n390\\n1632\\n1566\\n84\\n1549\\n1347\\n20\\n1052\\n1244\\n1060\\n1562\\n1007\\n1049\\n1532\\n503\\n1781\\n1378\\n706\\n1279\\n1393\\n73\\n775\\n880\\n980\\n1270\\n613\\n1721\\n1343\\n1377\\n1674\\n730\\n1514\\n870\\n1120\\n1292\\n638\\n1134\\n141\\n1451\\n707\\n1458\\n1669\\n861\\n140\\n877\\n607\\n1643\\n1156\\n1520\\n1141\\n1041\\n986\\n316\\n535\\n1479\\n1577\\n452\\n1471\\n959\\n246\\n399\\n1727\\n1605\\n166\\n932\\n1536\\n533\\n1470\\n1228\\n406\\n829\\n893\\n385\\n1530\\n581\\n434\\n1185\\n1689\\n178\\n559\\n82\\n385\\n844\\n1551\\n1520\\n1680\\n530\\n1816\\n638\\n736\\n954\\n176\\n246\\n634\\n1009\\n1450\\n\", \"4\\n3\\n6\\n2\\n1\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['Ad-Hoc', 'GraphTheory']",
    "name": "monk-in-the-real-estate",
    "source": "hackerearth",
    "tags": "['Graph algorithms', 'Ad-hoc']",
    "skill_types": "[]",
    "url": null,
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": null,
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.\nExample 1:\nInput:\nN = 9, K = 3\narr[] = 1 2 3 1 4 5 2 3 6\nOutput: \n3 3 4 5 5 5 6 \nExplanation: \n1st contiguous subarray = {1 2 3} Max = 3\n2nd contiguous subarray = {2 3 1} Max = 3\n3rd contiguous subarray = {3 1 4} Max = 4\n4th contiguous subarray = {1 4 5} Max = 5\n5th contiguous subarray = {4 5 2} Max = 5\n6th contiguous subarray = {5 2 3} Max = 5\n7th contiguous subarray = {2 3 6} Max = 6\nExample 2:\nInput:\nN = 10, K = 4\narr[] = 8 5 10 7 9 4 15 12 90 13\nOutput: \n10 10 10 15 15 90 90\nExplanation: \n1st contiguous subarray = {8 5 10 7}, Max = 10\n2nd contiguous subarray = {5 10 7 9}, Max = 10\n3rd contiguous subarray = {10 7 9 4}, Max = 10\n4th contiguous subarray = {7 9 4 15}, Max = 15\n5th contiguous subarray = {9 4 15 12}, \nMax = 15\n6th contiguous subarray = {4 15 12 90},\nMax = 90\n7th contiguous subarray = {15 12 90 13}, \nMax = 90\nYour Task:  \nYou dont need to read input or print anything. Complete the function max_of_subarrays() which takes the array, N and K as input parameters and returns a list of integers denoting the maximum of every contiguous subarray of size K.\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(k)\nConstraints:\n1 ≤ N ≤ 10^{5}\n1 ≤ K ≤ N\n0 ≤ arr[i] ≤ 10^{7}",
    "solutions": "[\"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tans = []\\n\\t\\tQ = deque([])\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif Q and Q[0] <= i - k:\\n\\t\\t\\t\\tQ.popleft()\\n\\t\\t\\twhile Q and arr[Q[-1]] <= arr[i]:\\n\\t\\t\\t\\tQ.pop()\\n\\t\\t\\tQ.append(i)\\n\\t\\t\\tif i >= k - 1:\\n\\t\\t\\t\\tans.append(arr[Q[0]])\\n\\t\\treturn ans\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tresult = []\\n\\t\\twindow = deque()\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile window and arr[i] >= arr[window[-1]]:\\n\\t\\t\\t\\twindow.pop()\\n\\t\\t\\twindow.append(i)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tresult.append(arr[window[0]])\\n\\t\\t\\twhile window and window[0] <= i - k:\\n\\t\\t\\t\\twindow.popleft()\\n\\t\\t\\twhile window and arr[i] >= arr[window[-1]]:\\n\\t\\t\\t\\twindow.pop()\\n\\t\\t\\twindow.append(i)\\n\\t\\tresult.append(arr[window[0]])\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tqueue = []\\n\\t\\tmaxi = 0\\n\\t\\tfor i in range(k):\\n\\t\\t\\tqueue.append(arr[i])\\n\\t\\t\\tmaxi = max(maxi, arr[i])\\n\\t\\tres = []\\n\\t\\tres.append(maxi)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\ta = queue.pop(0)\\n\\t\\t\\tqueue.append(arr[i])\\n\\t\\t\\tif a == maxi:\\n\\t\\t\\t\\tmaxi = max(queue)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmaxi = max(maxi, arr[i])\\n\\t\\t\\tres.append(maxi)\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tresult = []\\n\\t\\twindow = []\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile window and arr[i] > arr[window[-1]]:\\n\\t\\t\\t\\twindow.pop()\\n\\t\\t\\twindow.append(i)\\n\\t\\tresult.append(arr[window[0]])\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\twhile window and window[0] <= i - k:\\n\\t\\t\\t\\twindow.pop(0)\\n\\t\\t\\twhile window and arr[i] > arr[window[-1]]:\\n\\t\\t\\t\\twindow.pop()\\n\\t\\t\\twindow.append(i)\\n\\t\\t\\tresult.append(arr[window[0]])\\n\\t\\treturn result\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, N, K):\\n\\t\\tresult = []\\n\\t\\tdq = deque()\\n\\t\\tfor i in range(N):\\n\\t\\t\\twhile dq and arr[dq[-1]] < arr[i]:\\n\\t\\t\\t\\tdq.pop()\\n\\t\\t\\tdq.append(i)\\n\\t\\t\\tif dq[0] <= i - K:\\n\\t\\t\\t\\tdq.popleft()\\n\\t\\t\\tif i >= K - 1:\\n\\t\\t\\t\\tresult.append(arr[dq[0]])\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tdq = deque()\\n\\t\\tres = []\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif dq and dq[0] == i - k:\\n\\t\\t\\t\\tdq.popleft()\\n\\t\\t\\twhile dq and arr[dq[-1]] < arr[i]:\\n\\t\\t\\t\\tdq.pop()\\n\\t\\t\\tdq.append(i)\\n\\t\\t\\tif i >= k - 1:\\n\\t\\t\\t\\tres.append(arr[dq[0]])\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\ti = 0\\n\\t\\tj = 0\\n\\t\\tmaxi = []\\n\\t\\tans = []\\n\\t\\twhile j < len(arr):\\n\\t\\t\\twhile len(maxi) != 0 and maxi[-1] < arr[j]:\\n\\t\\t\\t\\tmaxi.pop()\\n\\t\\t\\tmaxi.append(arr[j])\\n\\t\\t\\tif j - i + 1 < k:\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\telif j - i + 1 == k:\\n\\t\\t\\t\\tans.append(maxi[0])\\n\\t\\t\\t\\tif arr[i] == maxi[0]:\\n\\t\\t\\t\\t\\tmaxi.pop(0)\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tj += 1\\n\\t\\treturn ans\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tans = []\\n\\t\\tqueue = deque()\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile len(queue) > 0 and arr[queue[-1]] <= arr[i]:\\n\\t\\t\\t\\tqueue.pop()\\n\\t\\t\\tqueue.append(i)\\n\\t\\tans.append(arr[queue[0]])\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\twhile len(queue) > 0 and queue[0] <= i - k:\\n\\t\\t\\t\\tqueue.popleft()\\n\\t\\t\\twhile len(queue) > 0 and arr[queue[-1]] <= arr[i]:\\n\\t\\t\\t\\tqueue.pop()\\n\\t\\t\\tqueue.append(i)\\n\\t\\t\\tans.append(arr[queue[0]])\\n\\t\\treturn ans\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tq = deque()\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile q and arr[i] > arr[q[-1]]:\\n\\t\\t\\t\\tq.pop()\\n\\t\\t\\tq.append(i)\\n\\t\\tansw = []\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tansw.append(arr[q[0]])\\n\\t\\t\\tif q and i - k >= q[0]:\\n\\t\\t\\t\\tq.popleft()\\n\\t\\t\\twhile q and arr[i] >= arr[q[-1]]:\\n\\t\\t\\t\\tq.pop()\\n\\t\\t\\tq.append(i)\\n\\t\\treturn answ + [arr[q[0]]]\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tres = []\\n\\t\\ta = arr[:k]\\n\\t\\tm = max(a)\\n\\t\\tres.append(m)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tif arr[i] > m:\\n\\t\\t\\t\\ta.pop(0)\\n\\t\\t\\t\\tm = arr[i]\\n\\t\\t\\t\\ta.append(m)\\n\\t\\t\\t\\tres.append(m)\\n\\t\\t\\telif a[0] == m:\\n\\t\\t\\t\\ta.pop(0)\\n\\t\\t\\t\\ta.append(arr[i])\\n\\t\\t\\t\\tm = max(a)\\n\\t\\t\\t\\tres.append(m)\\n\\t\\t\\telse:\\n\\t\\t\\t\\ta.pop(0)\\n\\t\\t\\t\\ta.append(arr[i])\\n\\t\\t\\t\\tres.append(m)\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tcurr = max(arr[:k])\\n\\t\\tres = [curr]\\n\\t\\tfor i in range(1, n - k + 1):\\n\\t\\t\\tif arr[i + k - 1] >= curr:\\n\\t\\t\\t\\tcurr = arr[i + k - 1]\\n\\t\\t\\telif arr[i - 1] == curr:\\n\\t\\t\\t\\tcurr = max(arr[i:i + k])\\n\\t\\t\\tres.append(curr)\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, K):\\n\\t\\tq = deque()\\n\\t\\tresult = []\\n\\t\\tfor i in range(K):\\n\\t\\t\\twhile q and arr[i] >= arr[q[-1]]:\\n\\t\\t\\t\\tq.pop()\\n\\t\\t\\tq.append(i)\\n\\t\\tfor i in range(K, len(arr)):\\n\\t\\t\\tresult.append(arr[q[0]])\\n\\t\\t\\twhile q and q[0] <= i - K:\\n\\t\\t\\t\\tq.popleft()\\n\\t\\t\\twhile q and arr[i] >= arr[q[-1]]:\\n\\t\\t\\t\\tq.pop()\\n\\t\\t\\tq.append(i)\\n\\t\\tresult.append(arr[q[0]])\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, N, K):\\n\\t\\tans = []\\n\\t\\td = deque()\\n\\t\\tfor x in range(N):\\n\\t\\t\\twhile d and arr[d[-1]] <= arr[x]:\\n\\t\\t\\t\\td.pop()\\n\\t\\t\\td.append(x)\\n\\t\\t\\tif d[0] == x - K:\\n\\t\\t\\t\\td.popleft()\\n\\t\\t\\tif x >= K - 1:\\n\\t\\t\\t\\tans.append(arr[d[0]])\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, N, K):\\n\\t\\tresult = []\\n\\t\\twindow = deque()\\n\\t\\tfor i in range(N):\\n\\t\\t\\twhile window and window[0] <= i - K:\\n\\t\\t\\t\\twindow.popleft()\\n\\t\\t\\twhile window and arr[i] >= arr[window[-1]]:\\n\\t\\t\\t\\twindow.pop()\\n\\t\\t\\twindow.append(i)\\n\\t\\t\\tif i >= K - 1:\\n\\t\\t\\t\\tresult.append(arr[window[0]])\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tstack = []\\n\\t\\tans = []\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile len(stack) != 0 and arr[stack[-1]] < arr[i]:\\n\\t\\t\\t\\tstack.pop()\\n\\t\\t\\tstack.append(i)\\n\\t\\tans.append(arr[stack[0]])\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tif i - k >= stack[0]:\\n\\t\\t\\t\\tstack.pop(0)\\n\\t\\t\\twhile len(stack) != 0 and arr[stack[-1]] < arr[i]:\\n\\t\\t\\t\\tstack.pop()\\n\\t\\t\\tstack.append(i)\\n\\t\\t\\tans.append(arr[stack[0]])\\n\\t\\treturn ans\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tarr1 = []\\n\\t\\tmax_val = max(arr[:k])\\n\\t\\tarr1.append(max_val)\\n\\t\\tfor i in range(1, n - k + 1):\\n\\t\\t\\tif arr[i - 1] == max_val:\\n\\t\\t\\t\\tmax_val = max(arr[i:i + k])\\n\\t\\t\\telif arr[i + k - 1] > max_val:\\n\\t\\t\\t\\tmax_val = arr[i + k - 1]\\n\\t\\t\\tarr1.append(max_val)\\n\\t\\treturn arr1\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tb = []\\n\\t\\tl = []\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile len(l) != 0 and arr[i] >= arr[l[-1]]:\\n\\t\\t\\t\\tl.pop()\\n\\t\\t\\tl.append(i)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tb.append(arr[l[0]])\\n\\t\\t\\tif l and l[0] <= i - k:\\n\\t\\t\\t\\tl.pop(0)\\n\\t\\t\\twhile len(l) != 0 and arr[i] >= arr[l[-1]]:\\n\\t\\t\\t\\tl.pop()\\n\\t\\t\\tl.append(i)\\n\\t\\tb.append(arr[l[0]])\\n\\t\\treturn b\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tm = []\\n\\t\\tmax_val = float('-inf')\\n\\t\\tfor i in range(k):\\n\\t\\t\\tmax_val = max(max_val, arr[i])\\n\\t\\tm.append(max_val)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tif arr[i] > max_val:\\n\\t\\t\\t\\tmax_val = arr[i]\\n\\t\\t\\telif arr[i - k] == max_val:\\n\\t\\t\\t\\tmax_val = max(arr[i - k + 1:i + 1])\\n\\t\\t\\tm.append(max_val)\\n\\t\\treturn m\\n\", \"import collections\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tdq = collections.deque()\\n\\t\\tsolution = [0] * (n - k + 1)\\n\\t\\tl = r = j = 0\\n\\t\\twhile r < k:\\n\\t\\t\\twhile len(dq) > 0 and dq[-1] < arr[r]:\\n\\t\\t\\t\\tdq.pop()\\n\\t\\t\\tdq.append(arr[r])\\n\\t\\t\\tr += 1\\n\\t\\tsolution[j] = dq[0]\\n\\t\\tl += 1\\n\\t\\tj += 1\\n\\t\\twhile r < n:\\n\\t\\t\\twhile len(dq) > 0 and dq[-1] < arr[r]:\\n\\t\\t\\t\\tdq.pop()\\n\\t\\t\\tdq.append(arr[r])\\n\\t\\t\\tif dq[0] == arr[l - 1]:\\n\\t\\t\\t\\tdq.popleft()\\n\\t\\t\\tsolution[j] = dq[0]\\n\\t\\t\\tr += 1\\n\\t\\t\\tl += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn solution\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tqueue = []\\n\\t\\tresult = []\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif len(queue) == 0 or queue[len(queue) - 1] >= arr[i]:\\n\\t\\t\\t\\tqueue.append(arr[i])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tj = len(queue) - 1\\n\\t\\t\\t\\twhile j >= 0 and queue[j] < arr[i]:\\n\\t\\t\\t\\t\\tj -= 1\\n\\t\\t\\t\\t\\tqueue.pop()\\n\\t\\t\\t\\tqueue.append(arr[i])\\n\\t\\t\\tif i >= k - 1:\\n\\t\\t\\t\\tresult.append(queue[0])\\n\\t\\t\\t\\tif queue[0] == arr[i - k + 1]:\\n\\t\\t\\t\\t\\tqueue.pop(0)\\n\\t\\treturn result\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\t(dq, res) = (deque(), [])\\n\\t\\tfor i in range(n):\\n\\t\\t\\twhile len(dq) > 0 and arr[dq[0]] < arr[i]:\\n\\t\\t\\t\\tdq.popleft()\\n\\t\\t\\tdq.appendleft(i)\\n\\t\\t\\twhile dq[-1] <= i - k:\\n\\t\\t\\t\\tdq.pop()\\n\\t\\t\\tif i >= k - 1:\\n\\t\\t\\t\\tres.append(arr[dq[-1]])\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tdeq = deque()\\n\\t\\tmax = []\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile deq and arr[i] > arr[deq[-1]]:\\n\\t\\t\\t\\tdeq.pop()\\n\\t\\t\\tdeq.append(i)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tmax.append(arr[deq[0]])\\n\\t\\t\\twhile deq and deq[0] <= i - k:\\n\\t\\t\\t\\tdeq.popleft()\\n\\t\\t\\twhile deq and arr[i] > arr[deq[-1]]:\\n\\t\\t\\t\\tdeq.pop()\\n\\t\\t\\tdeq.append(i)\\n\\t\\tmax.append(arr[deq[0]])\\n\\t\\treturn max\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tres = []\\n\\t\\td = deque()\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile len(d) and arr[i] >= arr[d[-1]]:\\n\\t\\t\\t\\td.pop()\\n\\t\\t\\td.append(i)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tres.append(arr[d[0]])\\n\\t\\t\\twhile len(d) and d[0] <= i - k:\\n\\t\\t\\t\\td.popleft()\\n\\t\\t\\twhile len(d) and arr[i] >= arr[d[-1]]:\\n\\t\\t\\t\\td.pop()\\n\\t\\t\\td.append(i)\\n\\t\\tres.append(arr[d[0]])\\n\\t\\td.popleft()\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, a, n, k):\\n\\t\\ts = []\\n\\t\\to = []\\n\\t\\tfor i in range(k):\\n\\t\\t\\twhile len(s) != 0 and a[s[-1]] < a[i]:\\n\\t\\t\\t\\ts.pop()\\n\\t\\t\\ts.append(i)\\n\\t\\to.append(a[s[0]])\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tif i - k >= s[0]:\\n\\t\\t\\t\\ts.pop(0)\\n\\t\\t\\twhile len(s) != 0 and a[s[-1]] < a[i]:\\n\\t\\t\\t\\ts.pop()\\n\\t\\t\\ts.append(i)\\n\\t\\t\\to.append(a[s[0]])\\n\\t\\treturn o\\n\", \"from collections import deque\\n\\nclass Solution:\\n\\n\\tdef max_of_subarrays(self, nums, n, k):\\n\\t\\ti = 0\\n\\t\\tj = 0\\n\\t\\td = deque()\\n\\t\\tres = []\\n\\t\\twhile j < len(nums):\\n\\t\\t\\twhile len(d) > 0 and d[-1] < nums[j]:\\n\\t\\t\\t\\td.pop()\\n\\t\\t\\td.append(nums[j])\\n\\t\\t\\tif j - i + 1 < k:\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\telif j - i + 1 == k:\\n\\t\\t\\t\\tres.append(d[0])\\n\\t\\t\\t\\tif d[0] == nums[i]:\\n\\t\\t\\t\\t\\td.popleft()\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tj += 1\\n\\t\\treturn res\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tmx_v = []\\n\\t\\tr = []\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif mx_v and mx_v[0] == i - k:\\n\\t\\t\\t\\tmx_v.pop(0)\\n\\t\\t\\twhile mx_v and arr[mx_v[-1]] < arr[i]:\\n\\t\\t\\t\\tmx_v.pop()\\n\\t\\t\\tmx_v.append(i)\\n\\t\\t\\tif i >= k - 1:\\n\\t\\t\\t\\tr.append(arr[mx_v[0]])\\n\\t\\treturn r\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tresult = []\\n\\t\\tmax_element = max(arr[:k])\\n\\t\\tresult.append(max_element)\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tif arr[i - k] == max_element:\\n\\t\\t\\t\\tmax_element = max(arr[i - k + 1:i + 1])\\n\\t\\t\\telif arr[i] > max_element:\\n\\t\\t\\t\\tmax_element = arr[i]\\n\\t\\t\\tresult.append(max_element)\\n\\t\\treturn result\\n\", \"class Solution:\\n\\n\\tdef max_of_subarrays(self, arr, n, k):\\n\\t\\tr = []\\n\\t\\tr.append(max(arr[:k]))\\n\\t\\tj = 0\\n\\t\\tfor i in range(k, n):\\n\\t\\t\\tif arr[j] == r[-1]:\\n\\t\\t\\t\\tr.append(max(arr[j + 1:i + 1]))\\n\\t\\t\\telif arr[i] > r[-1]:\\n\\t\\t\\t\\tr.append(arr[i])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tr.append(r[-1])\\n\\t\\t\\tj += 1\\n\\t\\treturn r\\n\"]",
    "starter_code": "#User function Template for python3\n\n\n\nclass Solution:\n\n    \n\n    #Function to find maximum of each subarray of size k.\n\n    def max_of_subarrays(self,arr,n,k):\n\n        \n\n        #code here",
    "input_output": "{\"inputs\": [\"N = 9, K = 3\\r\\narr[] = 1 2 3 1 4 5 2 3 6\", \"N = 10, K = 4\\r\\narr[] = 8 5 10 7 9 4 15 12 90 13\"], \"outputs\": [\"3 3 4 5 5 5 6\", \"10 10 10 15 15 90 90\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['Algorithms', 'sliding-window', 'Queue', 'Data Structures', 'Arrays']",
    "name": null,
    "source": "geeksforgeeks",
    "tags": "['Data structures', 'Amortized analysis']",
    "skill_types": "['Amortized analysis', 'Data structures']",
    "url": "https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1",
    "Expected Auxiliary Space": "O(k)",
    "time_limit": null,
    "date": null,
    "picture_num": "0",
    "memory_limit": null,
    "Expected Time Complexity": "O(N)"
  },
  {
    "question": "Alex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it.\n\nGiven a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it ak) and delete it, at that all elements equal to ak + 1 and ak - 1 also must be deleted from the sequence. That step brings ak points to the player. \n\nAlex is a perfectionist, so he decided to get as many points as possible. Help him.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 105) that shows how many numbers are in Alex's sequence. \n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105).\n\nOutput\n\nPrint a single integer — the maximum number of points that Alex can earn.\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\n2\n\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n4\n\n\nInput\n\n9\n1 2 1 3 2 2 2 2 3\n\n\nOutput\n\n10\n\nNote\n\nConsider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.",
    "solutions": "[\"s = 0\\nn = int(input())\\ndp = [0] * (10 ** 5 + 1)\\nsec = [int(x) for x in input().split()]\\nls = [0] * (10 ** 5 + 1)\\nfor x in sec:\\n\\tls[x] += 1\\ndp[1] = ls[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + ls[i] * i)\\nprint(dp[10 ** 5])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nt = [0] * (max(a) + 1)\\nfor (i, v) in enumerate(a):\\n\\tt[v] += v\\nfor i in range(3, len(t)):\\n\\tt[i] += max(t[i - 2], t[i - 3])\\nprint(max(t))\\n\", \"import sys\\nk = [0] * 100001\\nn = int(sys.stdin.readline())\\nst = [int(x) for x in sys.stdin.readline().split()]\\nfor i in st:\\n\\tk[i] += 1\\nx = 0\\ny = 0\\nj = 100000\\nwhile j > 0:\\n\\tif j % 2 != 0:\\n\\t\\tx = max(x + k[j] * j, y)\\n\\telse:\\n\\t\\ty = max(y + k[j] * j, x)\\n\\tj -= 1\\nprint(max(x, y))\\n\", \"from sys import stdin\\n\\ndef get_freq(arr):\\n\\tfreq = [0] * (10 ** 5 + 1)\\n\\tfor i in arr:\\n\\t\\tfreq[i] += 1\\n\\treturn freq\\nn = int(stdin.readline().strip())\\narr = list(map(int, stdin.readline().split()))\\nfreq = get_freq(arr)\\ndp = [0] * (10 ** 5 + 1)\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * freq[i])\\nprint(dp[-1])\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\nlimit = max(lis)\\nfreq = [0 for i in range(limit + 1)]\\nfor i in lis:\\n\\tfreq[i] += 1\\ndp = [0 for i in range(limit + 1)]\\nfor i in range(limit + 1):\\n\\tif i == 1:\\n\\t\\tdp[i] = freq[1]\\n\\telif i == 0:\\n\\t\\tdp[i] = 0\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\nprint(dp[-1])\\n\", \"n = int(input())\\nd = [0] * (10 ** 5 + 1)\\nl = list(map(int, input().split()))\\nfor i in range(n):\\n\\td[l[i]] += l[i]\\ndp = [0] * (10 ** 5 + 1)\\ndp[1] = d[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i])\\nprint(dp[-1])\\n\", \"def main():\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tmax_n = max(a)\\n\\tcount = [0 for i in range(max_n + 1)]\\n\\tfor i in a:\\n\\t\\tcount[i] += 1\\n\\tdp = [0 for i in range(max_n + 1)]\\n\\tdp[1] = count[1]\\n\\tfor i in range(2, max_n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], i * count[i] + dp[i - 2])\\n\\tprint(dp[max_n])\\nmain()\\n\", \"def boredom(nums):\\n\\tif not nums:\\n\\t\\treturn 0\\n\\tfreq = [0] * (max(nums) + 1)\\n\\tfor n in nums:\\n\\t\\tfreq[n] += n\\n\\tdp = [0] * len(freq)\\n\\tdp[1] = freq[1]\\n\\tfor i in range(2, len(freq)):\\n\\t\\tdp[i] = max(freq[i] + dp[i - 2], dp[i - 1])\\n\\treturn dp[len(freq) - 1]\\nn = input()\\narr = list(map(int, input().split()))\\nprint(boredom(arr))\\n\", \"import sys\\nm = 100001\\nn = input()\\na = list(map(int, input().split()))\\ncnt = [0] * m\\nfor x in a:\\n\\tcnt[x] += 1\\ndp = [[0 for i in range(2)] for j in range(m)]\\nfor i in range(m - 1):\\n\\tdp[i + 1][0] = max(dp[i][0], dp[i][1])\\n\\tdp[i + 1][1] = dp[i][0] + (i + 1) * cnt[i + 1]\\nprint(max(dp[-1][0], dp[-1][1]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n(l, d) = ([0] * 100001, [])\\ntemp_a = sorted(set(a))\\nfor i in a:\\n\\tl[i] += 1\\nd.append(0)\\nd.append(temp_a[0] * l[temp_a[0]])\\nlast = temp_a[0]\\nfor i in temp_a[1:]:\\n\\tif last == i - 1:\\n\\t\\td.append(max(d[len(d) - 1], d[len(d) - 2] + i * l[i]))\\n\\telse:\\n\\t\\td.append(d[len(d) - 1] + l[i] * i)\\n\\tlast = i\\nprint(d[len(d) - 1])\\n\", \"from sys import stdin, stdout\\nPi = lambda x: stdout.write(str(x) + '\\\\n')\\nPs = lambda x: stdout.write(str(x))\\nS = lambda x: x * (x + 1) // 2\\nI = lambda x: 1 + 2 * x\\nR = lambda : stdin.readline()\\nRi = lambda x: map(int, x.split())\\nRs = lambda x: map(str, x.split())\\nRf = lambda x: map(float, x.split())\\n\\ndef main():\\n\\tfor x in stdin:\\n\\t\\tn = int(x)\\n\\t\\tA = list(Ri(R()))\\n\\t\\tdp = [0] * 100010\\n\\t\\tfor x in A:\\n\\t\\t\\tdp[x] += x\\n\\t\\tfor i in range(3, 100010):\\n\\t\\t\\tdp[i] += max(dp[i - 2], dp[i - 3])\\n\\t\\tPi(dp[100009])\\nmain()\\n\", \"import sys\\nsys.setrecursionlimit(50000)\\nn = int(input())\\nnums = [int(x) for x in input().split()]\\nlargest = max(nums)\\narr = [0] * 100001\\ndp = [None] * 100001\\nfor i in nums:\\n\\tarr[i] += 1\\ndp[0] = 0\\ndp[1] = 1 * arr[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], i * arr[i] + dp[i - 2])\\nprint(max(dp))\\n\", \"import math, os, sys\\nimport string, re\\nfrom itertools import *\\nfrom collections import Counter\\nfrom operator import mul\\n\\ndef inputint():\\n\\treturn int(input())\\n\\ndef inputarray(func=int):\\n\\treturn map(func, input().split())\\nn = inputint()\\nA = sorted(Counter(inputarray()).items())\\nidx = A[0][0]\\nres = [0, idx * A[0][1]]\\nfor x in islice(A, 1, None):\\n\\tif x[0] - idx == 1:\\n\\t\\tres.append(max(res[-1], res[-2] + x[0] * x[1]))\\n\\telse:\\n\\t\\tres.append(res[-1] + x[0] * x[1])\\n\\tidx = x[0]\\nprint(res[-1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncnt = list()\\nfor i in range(100001):\\n\\tcnt.append(0)\\nfor i in range(n):\\n\\tcnt[a[i]] += 1\\ndp = list()\\ndp.append(0)\\ndp.append(cnt[1])\\nfor i in range(2, 100001, 1):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + cnt[i] * i))\\nprint(dp[100000])\\n\", \"input()\\nd = [0] * 100001\\nfor x in map(int, input().split()):\\n\\td[x] += x\\na = b = 0\\nfor i in d:\\n\\ttemp = a\\n\\ta = max(a, i + b)\\n\\tb = temp\\nprint(a)\\n\", \"n = int(input())\\ncount = [0 for x in range(100001)]\\ndp = [0 for x in range(100001)]\\nfor i in input().split():\\n\\tcount[int(i)] += int(i)\\nfor (index, i) in enumerate(count):\\n\\tif index > 1:\\n\\t\\tdp[index] = max(dp[index - 2] + i, dp[index - 1])\\n\\telse:\\n\\t\\tdp[index] = i\\nprint(dp[-1])\\n\", \"n = int(input())\\nnums = input()\\nnums = [int(i) for i in nums.split()]\\ncount = [0 for i in range(100001)]\\nmaxNum = 0\\nfor j in nums:\\n\\tcount[j] += 1\\n\\tif j > maxNum:\\n\\t\\tmaxNum = j\\ndp = [0 for i in range(maxNum + 1)]\\ndp[0] = 0\\ndp[1] = 1 * count[1]\\nfor i in range(2, maxNum + 1):\\n\\taa = dp[i - 1]\\n\\tbb = dp[i - 2] + i * count[i]\\n\\tdp[i] = max(aa, bb)\\nprint(dp[maxNum])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nma = max(a)\\ndp = [0] * (ma + 4)\\nfor i in a:\\n\\tdp[i] += i\\nfor i in range(ma, 0, -1):\\n\\tdp[i] = dp[i] + max(dp[i + 2], dp[i + 3])\\nprint(max(dp[1], dp[2]))\\n\", \"def solve(a):\\n\\tbuckets = [0 for x in range(max(a) + 1)]\\n\\tfor item in a:\\n\\t\\tbuckets[item] += 1\\n\\tdp = [0 for x in range(len(buckets) + 1)]\\n\\tdp[1] = buckets[1]\\n\\tfor i in range(2, len(buckets) + 1):\\n\\t\\tto_add = buckets[i] * i if i < len(buckets) else 0\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + to_add)\\n\\treturn dp[len(buckets)]\\nn = int(input())\\na = [int(x) for x in input().split()]\\nprint(solve(a))\\n\", \"input()\\na = [0] * 10 ** 5\\nfor ai in map(int, input().split()):\\n\\ta[ai - 1] += ai\\nsi = sj = 0\\nfor ai in a:\\n\\t(si, sj) = (max(si, sj + ai), si)\\nprint(si)\\n\", \"n = int(input())\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\nmaxElement = max(a)\\ncount = {}\\nfor ai in a:\\n\\tcount[ai] = count[ai] + 1 if ai in count else 1\\n\\ndef getCount(ai):\\n\\treturn count[ai] if ai in count else 0\\ndp = [0] * (maxElement + 1)\\ndp[1] = 1 * getCount(1)\\nfor i in range(2, maxElement + 1):\\n\\tdp[i] = max(dp[i - 2] + i * getCount(i), dp[i - 1])\\nprint(dp[maxElement])\\n\", \"n = int(input())\\nMAXN = 101101\\na = [0] * MAXN\\nb = [0] * MAXN\\na = list(map(int, input().split()))\\nfor i in range(n):\\n\\tb[a[i]] += 1\\nfor i in range(MAXN):\\n\\tb[i] = b[i] * i\\nfor i in range(MAXN - 3, 0, -1):\\n\\tb[i] = max(b[i + 1], b[i] + b[i + 2])\\nprint(b[1])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\ndp = [[0, 0].copy() for x in range(n)]\\ndp[0][0] = 0\\ndp[0][1] = arr[0]\\nfor idx in range(1, len(arr)):\\n\\tcurr = arr[idx]\\n\\tprev = arr[idx - 1]\\n\\tif curr - prev > 1:\\n\\t\\tdp[idx][0] = max(dp[idx - 1])\\n\\t\\tdp[idx][1] = max(dp[idx - 1]) + curr\\n\\tif curr - prev == 1:\\n\\t\\tdp[idx][0] = max(dp[idx - 1])\\n\\t\\tdp[idx][1] = dp[idx - 1][0] + curr\\n\\tif curr == prev:\\n\\t\\tdp[idx][0] = dp[idx - 1][0]\\n\\t\\tdp[idx][1] = dp[idx - 1][1] + curr\\nprint(max(dp[-1]))\\n\", \"def main():\\n\\tinput()\\n\\taa = list(map(int, input().split()))\\n\\tn = max(aa) + 1\\n\\tcnt = [0] * n\\n\\tfor x in aa:\\n\\t\\tcnt[x] += x\\n\\ta = b = 0\\n\\tfor x in cnt:\\n\\t\\t(a, b) = (b, max(b, a + x))\\n\\tprint(b)\\nmain()\\n\", \"n = input()\\nv = [0] * 100002\\nfor i in input().split():\\n\\tv[int(i)] += 1\\nfor i in range(1, 100002):\\n\\tv[i] = max(v[i] * i + v[i - 2], v[i - 1])\\nprint(v[-1])\\n\", \"n = input()\\nn = int(n)\\na = list(map(int, input().split()))\\ndp = [0] * 100007\\nfor i in a:\\n\\tdp[i] += i\\nfor i in range(2, len(dp)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + dp[i])\\nprint(max(dp))\\n\", \"BIG = 100005\\ninput()\\nnums = [int(x) for x in input().split()]\\nsums = [0 for _ in range(BIG)]\\nfor x in nums:\\n\\tsums[x] += x\\ndp = [0 for _ in range(BIG)]\\ndp[0] = (sums[0], 0)\\nfor x in range(1, BIG):\\n\\tdp[x] = (sums[x] + dp[x - 1][1], max(dp[x - 1]))\\nprint(max(dp[-1]))\\n\", \"input()\\narr = [0] * 100001\\nfor i in map(int, input().split()):\\n\\tarr[i] += i\\na = b = 0\\nfor j in arr:\\n\\t(a, b) = (max(a, j + b), a)\\nprint(a)\\n\", \"def main():\\n\\ttamanho = 10 ** 5 + 1\\n\\tentrada_tanto_faz = int(input())\\n\\tcontagem = {x: 0 for x in range(tamanho)}\\n\\tfor x in map(int, input().split()):\\n\\t\\tcontagem[x] += 1\\n\\tguardados = {0: 0, 1: contagem[1]}\\n\\tfor i in range(2, tamanho):\\n\\t\\tguardados[i] = max(guardados[i - 1], guardados[i - 2] + contagem[i] * i)\\n\\tprint(guardados[tamanho - 1])\\nmain()\\n\", \"n = int(input())\\nA = [int(0)] * 100001\\nfor x in input().split():\\n\\tA[int(x)] += 1\\nDp = [None] * 100001\\nDp[0] = 0\\nDp[1] = A[1]\\nfor i in range(2, 100001):\\n\\tDp[i] = max(Dp[i - 1], Dp[i - 2] + A[i] * i)\\nprint(Dp[100000])\\n\", \"n = input()\\ns = [0] * 1000001\\nfor i in map(int, input().split()):\\n\\ts[i] += i\\na = b = 0\\nfor d in s:\\n\\t(a, b) = (max(a, b), a + d)\\nprint(a)\\n\", \"input()\\ninList = input().split()\\naList = []\\nfor a in inList:\\n\\taList.append(int(a))\\naList.sort()\\naDict = {}\\nfor a in aList:\\n\\tif a in aDict:\\n\\t\\taDict[a] += a\\n\\telse:\\n\\t\\taDict[a] = a\\n\\ndef func(x):\\n\\tif x in aDict:\\n\\t\\treturn aDict[x]\\n\\telse:\\n\\t\\treturn 0\\nresDict = {0: 0, 1: func(1)}\\nfor i in range(2, aList[-1] + 1):\\n\\tresDict[i] = max(resDict[i - 1], resDict[i - 2] + func(i))\\nprint(resDict[aList[-1]])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nb = max(a)\\nc = (b + 1) * [0]\\nfor i in range(n):\\n\\tc[a[i]] += 1\\nf = (b + 1) * [0]\\nf[0] = 0\\nf[1] = c[1]\\nfor i in range(2, b + 1):\\n\\tif f[i - 1] > f[i - 2] + c[i] * i:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + c[i] * i\\nprint(f[b])\\n\", \"from collections import defaultdict\\n\\ndef main():\\n\\toccurences_by_a = defaultdict(int)\\n\\tn = int(input())\\n\\tass = map(int, input().split())\\n\\tmax_n = 0\\n\\tfor ai in ass:\\n\\t\\tif ai > max_n:\\n\\t\\t\\tmax_n = ai\\n\\t\\toccurences_by_a[ai] += 1\\n\\tcount = [occurences_by_a[i] for i in range(max_n + 1)]\\n\\tdp = [0, count[1]]\\n\\tfor i in range(2, max_n + 1):\\n\\t\\tdp.append(max(dp[i - 1], dp[i - 2] + i * count[i]))\\n\\tmax_score = dp[max_n]\\n\\tprint(max_score)\\nmain()\\n\", \"n = int(input())\\ns = [0] * 100002\\nfor i in map(int, input().split()):\\n\\ts[i] += i\\na = b = 0\\nfor k in s:\\n\\t(a, b) = (max(a, b), a + k)\\nprint(a)\\n\", \"import sys\\nimport collections\\nimport math\\nimport functools\\nimport itertools\\nimport bisect\\nimport operator\\nimport heapq\\nimport random\\ntrue = True\\nfalse = False\\nnull = None\\ntcid = 0\\ntcmax = 99999999\\n\\ndef seq(lo, hi, step=1):\\n\\treturn range(lo, hi + 1, step)\\n\\ndef sround(val, nd):\\n\\treturn f'{val:.{nd}f}'\\n\\ndef ceil(a, b):\\n\\tans = a // b\\n\\tif a % b != 0:\\n\\t\\tans += 1\\n\\treturn ans\\n\\ndef perr(*args, **kwargs):\\n\\tprint(*args, file=sys.stderr, **kwargs)\\n\\ndef line():\\n\\tln = sys.stdin.readline().strip()\\n\\tif ln == '':\\n\\t\\tsys.exit()\\n\\treturn ln\\n\\ndef lines(n):\\n\\treturn [line() for i in range(n)]\\n\\ndef split(ln=None):\\n\\treturn (ln or line()).split()\\n\\ndef nums(o=None):\\n\\tif o is not None:\\n\\t\\tif isinstance(o, int):\\n\\t\\t\\to = lines(o)\\n\\t\\telif isinstance(o, str):\\n\\t\\t\\to = split(o)\\n\\treturn list(map(eval, o or split()))\\n\\ndef num():\\n\\treturn eval(line())\\n\\ndef mainloop(tcid=1):\\n\\tn = num()\\n\\ta = nums()\\n\\taa = [0] * 111111\\n\\tfor val in a:\\n\\t\\taa[val] += val\\n\\tbb = list(aa)\\n\\tfor ii in range(max(a)):\\n\\t\\tbb[ii + 2] = max(bb[ii + 2], bb[ii] + aa[ii + 2])\\n\\t\\tbb[ii + 3] = max(bb[ii + 3], bb[ii] + aa[ii + 3])\\n\\tprint(max(bb))\\nwhile tcid < tcmax:\\n\\ttcid += 1\\n\\tmainloop(tcid)\\n\", \"input()\\na = b = 0\\ncnt = [0] * 100001\\nfor i in input().split():\\n\\ti = int(i)\\n\\tcnt[i] += i\\nfor i in cnt:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nf = {}\\nfor i in a:\\n\\tf[i] = f.get(i, 0) + 1\\nn = max(a)\\ndp = [0 for _ in range(n + 1)]\\ndp[1] = f.get(1, 0)\\nfor i in range(2, n + 1):\\n\\tdp[i] = max(dp[i - 1], f.get(i, 0) * i + dp[i - 2])\\nprint(max(dp))\\n\", \"MAX_N = int(1000000.0) + 1\\ndp = [0 for i in range(MAX_N)]\\ncounts = [0 for i in range(MAX_N)]\\nn = int(input())\\nin_list = map(int, input().split())\\nfor num in in_list:\\n\\tcounts[num] += 1\\ndp[0] = 0\\ndp[1] = counts[1]\\nfor i in range(2, MAX_N):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * counts[i])\\nprint(dp[MAX_N - 1])\\n\", \"def solve(inp):\\n\\tc = {}\\n\\tn = max(inp) + 1\\n\\tm = min(inp)\\n\\tfor i in inp:\\n\\t\\tif i in c:\\n\\t\\t\\tc[i] += 1\\n\\t\\telse:\\n\\t\\t\\tc[i] = 1\\n\\tD = [0] * n\\n\\tD[m] = c[m]\\n\\tfor i in range(m, n):\\n\\t\\tif i in c:\\n\\t\\t\\tD[i] = max(D[i - 1], D[i - 2] + i * c[i])\\n\\t\\telse:\\n\\t\\t\\tD[i] = D[i - 1]\\n\\treturn D[n - 1]\\nn = input()\\nlst = list(map(int, input().split()))\\nprint(solve(lst))\\n\", \"n = input()\\nar = [0] * 100002\\nfor i in map(int, input().split()):\\n\\tar[i] += i\\na = b = 0\\nfor d in ar:\\n\\t(a, b) = (max(a, b), a + d)\\nprint(a)\\n\", \"a = int(input())\\nb = input()\\nc = b.split()\\ns = [0] * 100002\\nfor i in map(int, c):\\n\\ts[i] += i\\nx = y = 0\\nfor i in s:\\n\\t(x, y) = (max(x, y), x + i)\\nprint(x)\\n\", \"n = int(input())\\na = list(map(int, input().strip().split()))\\nt = [0] * 100001\\nfor el in a:\\n\\tt[el] += el\\nb = [0] * 100001\\nb[1] = t[1]\\nb[2] = max(t[1], t[2])\\nfor i in range(3, 100001):\\n\\tb[i] = max(b[i - 1], b[i - 2] + t[i])\\nprint(b[100000])\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\nR = [0] * 100001\\nfor i in L:\\n\\tR[i] += i\\nfor i in range(2, 100001):\\n\\tR[i] = max(R[i - 1], R[i - 2] + R[i])\\nprint(R[100000])\\n\", \"n = int(input())\\nline = str(input()).split()\\nline = [int(it) for it in line]\\nline.sort()\\nlink = dict()\\ncount = 1\\npp = line[0]\\nfor i in range(1, 100000 + 1):\\n\\tlink.update({i: 0})\\nfor i in range(1, n):\\n\\tif pp == line[i]:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tlink.update({pp: count})\\n\\t\\tpp = line[i]\\n\\t\\tcount = 1\\nlink.update({pp: count})\\ndp = [0] * (100000 + 1)\\ndp[1] = link[1]\\nfor i in range(2, 100000 + 1):\\n\\tdp[i] = max(dp[i - 2] + i * link[i], dp[i - 1])\\nprint(dp[100000])\\n\", \"n = int(input())\\na = [0] * 1000000\\nx = t = 0\\nfor i in map(int, input().split()):\\n\\ta[i] += i\\nfor j in a:\\n\\t(x, t) = (max(x, j + t), x)\\nprint(x)\\n\", \"import math\\nfrom collections import defaultdict\\nt = 1\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tcount = defaultdict(lambda : 0)\\n\\tdp = defaultdict(lambda : 0)\\n\\tfor i in a:\\n\\t\\tcount[i] += 1\\n\\tdp[1] = count[1]\\n\\tans = 0\\n\\tfor i in range(2, 100001):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\n\\tprint(dp[100000])\\n\", \"nStr = input()\\nn = int(nStr)\\naStr = input()\\naS = aStr.split()\\nsumList = [0] * (10 ** 5 + 1)\\nfor i in range(n):\\n\\ta = int(aS[i])\\n\\tsumList[a] = sumList[a] + a\\nsumDP = [0] * (10 ** 5 + 1)\\ni = 2\\nsumDP[1] = sumList[1]\\nwhile i <= 10 ** 5:\\n\\tsumDP[i] = max(sumDP[i - 1], sumDP[i - 2] + sumList[i])\\n\\ti = i + 1\\nprint(sumDP[10 ** 5])\\n\", \"input()\\nz = [0] * 100001\\nfor i in map(int, input().split()):\\n\\tz[i] += i\\na = 0\\nb = 0\\nfor i in z:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"N = 100000\\nn = int(input())\\na = list(map(int, input().split()))\\nc = [0] * (N + 1)\\nfor i in range(n):\\n\\tc[a[i]] += 1\\ndp = [0] * (N + 1)\\ndp[0] = 0\\ndp[1] = c[1]\\nfor i in range(2, N + 1):\\n\\tdp[i] = max(dp[i - 1], c[i] * i + dp[i - 2])\\nprint(dp[N])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ndp = [0] * (10 ** 5 + 1 + 3)\\nfor i in range(n):\\n\\tdp[a[i]] += a[i]\\ndp2 = [0] * (10 ** 5 + 3)\\ndp2[0] = 0\\ndp2[1] = dp[1]\\ndp2[2] = dp[2]\\nfor i in range(3, 10 ** 5 + 3):\\n\\tdp[i] = max(dp[i - 2], dp[i - 3]) + dp[i]\\nprint(dp[10 ** 5 + 2])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncnt = [0] * 100001\\nfor i in a:\\n\\tcnt[i - 1] += 1\\nf = [0, cnt[0]]\\nfor i in range(2, len(cnt)):\\n\\tf.append(max(f[-1], f[-2] + cnt[i - 1] * i))\\nprint(f[-1])\\n\", \"n = int(input())\\ndp = [0] * 100005\\nl = list(map(int, input().split()))\\nfor i in range(n):\\n\\tdp[l[i]] += l[i]\\nans = ans1 = 0\\nfor i in dp:\\n\\t(ans, ans1) = (max(ans, ans1), ans + i)\\nprint(ans)\\n\", \"from collections import Counter\\nN = int(input())\\nList = [int(x) for x in input().split()]\\nDict = Counter(List)\\nAns = 0\\ndp = [0] * 100005\\ndp[1] = Dict[1]\\nMax = max(List)\\nfor i in range(1, 100005):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + Dict[i] * i)\\nprint(dp[Max])\\n\", \"from collections import Counter\\nn = int(input())\\nc = Counter(list(map(int, input().split())))\\nm = max(c)\\ndp = [0 for _ in range(m + 1)]\\nfor i in range(1, m + 1):\\n\\tif i == 1:\\n\\t\\tdp[i] = c[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\nprint(dp[-1])\\n\", \"n = int(input())\\ndata = 100001 * [0]\\nans = 100001 * [0]\\nfor i in list(map(int, input().split())):\\n\\tdata[i] += 1\\nans[1] = data[1]\\nfor i in range(100001):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * data[i])\\nprint(ans[100000])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ncount = {}\\nfor x in range(1, 100001):\\n\\tcount[x] = 0\\nfor y in range(len(a)):\\n\\tcount[a[y]] += 1\\ndp = []\\ndp.append(0)\\ndp.append(count[1])\\nfor k in range(2, 100001):\\n\\tdp.append(max(dp[k - 1], dp[k - 2] + k * count[k]))\\nprint(dp[k])\\n\", \"n = int(input())\\na = map(int, input().split())\\nd = {}\\nunique_l = set()\\nfor i in a:\\n\\td[i] = d.get(i, 0) + 1\\n\\tif d[i] == 1:\\n\\t\\tunique_l.add(i)\\nans = 0\\ndp = {1: d.get(1, 0)}\\nfor i in range(2, max(unique_l) + 1):\\n\\tdp[i] = max(dp.get(i - 1, 0), dp.get(i - 2, 0) + i * d.get(i, 0))\\n\\tans = dp.get(i, 0)\\nprint(ans)\\n\", \"t = 1\\nwhile t > 0:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ta = [0] * 100005\\n\\tans = [0] * 100005\\n\\tfor i in l:\\n\\t\\ta[i] += 1\\n\\tans[0] = 0\\n\\tans[1] = a[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tans[i] = max(ans[i - 1], ans[i - 2] + i * a[i])\\n\\tprint(ans[100000])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nm = max(a)\\noccs = [0] * (m + 1)\\nfor i in a:\\n\\toccs[i] += 1\\nf0 = [0] * (m + 1)\\nf1 = [0] * (m + 1)\\nfor i in range(1, len(occs)):\\n\\tif i >= 2:\\n\\t\\tf0[i] = max(f1[i - 1], f1[i - 2])\\n\\telse:\\n\\t\\tf0[i] = f1[i - 1]\\n\\tf1[i] = f0[i - 1] + i * occs[i]\\nprint(max(f0[m], f1[m]))\\n\", \"n = int(input())\\nnos = list(map(int, input().split()))\\nnos.sort()\\nuni = [0 for i in range(100002)]\\nfor i in nos:\\n\\tuni[i] += 1\\nmagic_dp = [[0] * 2 for i in range(100002)]\\nfor i in range(1, 100002):\\n\\tif uni[i] == 0:\\n\\t\\tmagic_dp[i][0] = magic_dp[i][1] = max(magic_dp[i - 1][0], magic_dp[i - 1][1])\\n\\telse:\\n\\t\\tmagic_dp[i][0] = max(magic_dp[i - 1][0], magic_dp[i - 1][1])\\n\\t\\tmagic_dp[i][1] = magic_dp[i - 1][0] + i * uni[i]\\nprint(max(magic_dp[100001][0], magic_dp[100001][1]))\\n\", \"n = int(input())\\narr = [int(x) for x in input().strip().split()]\\ndp = [0 for x in range(100000 + 2)]\\nmyd = {}\\nfor i in arr:\\n\\tif i in myd:\\n\\t\\tmyd[i] += 1\\n\\telse:\\n\\t\\tmyd[i] = 1\\nif 1 in myd:\\n\\tdp[1] = myd[1]\\nfor i in range(2, 100001):\\n\\tif i in myd:\\n\\t\\tx = max(dp[i - 1], dp[i - 2] + i * myd[i])\\n\\telse:\\n\\t\\tx = max(dp[i - 1], dp[i - 2])\\n\\tdp[i] = x\\nprint(dp[100000])\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\nl1 = [0] * 100001\\nfor i in l:\\n\\tl1[i] += i\\n(a, b) = (0, 0)\\nfor i in l1:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = int(input())\\npt = [0] * 100002\\nfor i in map(int, input().split()):\\n\\tpt[i] += i\\na = pt[1]\\nb = 0\\nfor p in pt[2:]:\\n\\t(a, b) = (max(b + p, a), a)\\nprint(a)\\n\", \"maxlen = 100005\\nn = int(input())\\narr = [int(x) for x in input().split()]\\ncnt = [0 for x in range(maxlen)]\\ndp = [0 for x in range(maxlen)]\\nfor x in arr:\\n\\tcnt[x] += 1\\ndp[1] = cnt[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[100000])\\n\", \"n = int(input())\\nnums = list(map(int, input().split()))\\npoints = 0\\na = [0 for i in range(1, pow(10, 5) + 5)]\\ndp = dict.fromkeys(list(range(1, pow(10, 5) + 5)), 0)\\nfor num in nums:\\n\\ta[num] += 1\\ndp[0] = 0\\ndp[1] = a[1]\\ni = 2\\nlimit = pow(10, 5)\\nwhile i <= limit:\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * a[i])\\n\\ti += 1\\nprint(dp[int(pow(10, 5))])\\n\", \"N = int(100000.0) + 100\\nn = int(input())\\na = list(map(int, input().split()))\\ns = [0] * N\\nfor x in a:\\n\\ts[x] += x\\nfor i in range(2, N):\\n\\ts[i] = max(s[i - 1], s[i - 2] + s[i])\\nprint(s[N - 1])\\n\", \"from collections import Counter\\nn = int(input().strip())\\narr = [int(__) for __ in input().strip().split()]\\nma = max(arr)\\ndp = [0 for i in range(ma + 1)]\\ncnt = Counter(arr)\\nfor i in range(1, ma + 1):\\n\\tprev = 0 if i == 1 else dp[i - 2]\\n\\tdp[i] = max(i * cnt[i] + prev, dp[i - 1])\\nprint(max(dp))\\n\", \"n = int(input())\\nseq = input().split(' ')\\nc = [0] * 100001\\ndp = [0] * 100001\\nfor i in range(n):\\n\\taux = int(seq[i])\\n\\tc[aux] += 1\\ndp[1] = c[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\nprint(dp[100000])\\n\", \"import re\\nfrom collections import Counter\\nn = int(input())\\nr = [int(q) for q in input().split()]\\nl = Counter(r)\\nt = max(l)\\nm = []\\nfor i in range(t + 1):\\n\\tm.append(l[i] * i)\\ndp = [0] * len(m)\\ndp[1] = m[1]\\ndp[0] = m[0]\\nfor i in range(2, len(m)):\\n\\tdp[i] = max(dp[i - 2] + m[i], dp[i - 1])\\nprint(dp[-1])\\n\", \"n = int(input())\\narr = [int(i) for i in input().split()]\\nmx = max(arr) + 1\\nsums = [0] * mx\\nfor a in arr:\\n\\tsums[a] += a\\nfor i in range(mx):\\n\\tif 1 < i:\\n\\t\\tif 2 < i:\\n\\t\\t\\tsums[i] += max(sums[i - 2], sums[i - 3])\\n\\t\\telse:\\n\\t\\t\\tsums[i] += sums[i - 2]\\nprint(max(sums[-1], sums[-2]))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nc = [0] * (10 ** 5 + 1)\\nl.sort()\\ni = 0\\nwhile i < n:\\n\\tt = l[i]\\n\\tC = 0\\n\\twhile t == l[i]:\\n\\t\\tC += 1\\n\\t\\ti += 1\\n\\t\\tif i == n:\\n\\t\\t\\tbreak\\n\\tc[t] = C\\nt = [0] + list(set(l))\\nt.sort()\\ndp = [0] * len(t)\\nfor i in range(1, len(t)):\\n\\tif not c[t[i] - 1]:\\n\\t\\tdp[i] = dp[i - 1] + c[t[i]] * t[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + c[t[i]] * t[i])\\nprint(dp[-1])\\n\", \"n = int(input())\\nl = 100002\\nnums = [int(i) for i in input().split()]\\nsums = [0 for i in range(l)]\\nres = [0 for i in range(l)]\\nfor e in nums:\\n\\tsums[e] += e\\nres[1] = sums[1]\\nres[2] = sums[2]\\nif res[2] < res[1]:\\n\\tres[2] = res[1]\\nfor i in range(3, l):\\n\\tres[i] = sums[i] + res[i - 2]\\n\\tif res[i] < res[i - 1]:\\n\\t\\tres[i] = res[i - 1]\\nprint(max(res))\\n\", \"s = [0] * 100002\\ninput()\\nfor i in map(int, input().split()):\\n\\ts[i] += i\\nfor i in range(2, 100002):\\n\\ts[i] = max(s[i] + s[i - 2], s[i - 1])\\nprint(s[100001])\\n\", \"n = int(input())\\ns = input()\\ns1 = s.split()\\nl = [int(i) for i in s1]\\nd = {}\\nfor i in l:\\n\\tif i not in d:\\n\\t\\td[i] = 1\\n\\telse:\\n\\t\\td[i] = d[i] + 1\\nnew = []\\nfor i in d:\\n\\tnew.append([i, d[i]])\\nnew.sort()\\nif len(new) == 1:\\n\\tprint(new[0][0] * new[0][1])\\nelse:\\n\\tdp = [0 for i in range(len(new))]\\n\\tdp[0] = new[0][0] * new[0][1]\\n\\tif new[1][0] - new[0][0] == 1:\\n\\t\\tdp[1] = max(dp[0], new[1][0] * new[1][1])\\n\\telse:\\n\\t\\tdp[1] = dp[0] + new[1][0] * new[1][1]\\n\\tfor i in range(2, len(new)):\\n\\t\\tif new[i][0] - new[i - 1][0] == 1:\\n\\t\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + new[i][0] * new[i][1])\\n\\t\\telse:\\n\\t\\t\\tdp[i] = dp[i - 1] + new[i][0] * new[i][1]\\n\\tprint(dp[len(new) - 1])\\n\", \"MAX = 100005\\nn = int(input())\\ncnt = [0] * MAX\\nnumbers = list(map(int, input().split()))\\nfor x in numbers:\\n\\tcnt[x] += 1\\ndp = [0] * MAX\\ndp[1] = cnt[1]\\nfor i in range(2, MAX):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[MAX - 1])\\n\", \"n = int(input())\\nd = [0] * 100001\\nfor x in map(int, input().split()):\\n\\td[x] += x\\nc = [0] * 100001\\nc[0] = d[0]\\nc[1] = max(d[0], d[1])\\nc[2] = max(d[1], d[0] + d[2])\\nfor i in range(3, len(c)):\\n\\tc[i] = max(d[i] + c[i - 2], d[i - 1] + c[i - 3])\\nprint(c[-1])\\n\", \"n = int(input())\\nsequence = [int(i) for i in input().split()]\\narr = [0 for i in range(100001)]\\nfor i in sequence:\\n\\tarr[i] = arr[i] + 1\\ndp_arr = [0 for i in range(100001)]\\ndp_arr[0] = 0\\ndp_arr[1] = arr[1]\\nfor i in range(2, 100001):\\n\\tdp_arr[i] = max(dp_arr[i - 1], dp_arr[i - 2] + arr[i] * i)\\nprint(dp_arr[100000])\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\ncnt = Counter(a)\\ndp = [0] * 100001\\ndp[0] = 0\\ndp[1] = cnt[1] * 1\\nM = max(a) + 1\\nfor i in range(2, M):\\n\\tyy = cnt[i] * i + dp[i - 2]\\n\\ttt = dp[i - 1]\\n\\tdp[i] = max(yy, tt)\\nprint(dp[M - 1])\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nN = pow(10, 5) + 1\\nval = [0] * N\\nfor i in arr:\\n\\tval[i] += 1\\ndp = [[0] * 2 for _ in range(N)]\\ndp[1] = [val[1], 0]\\nfor i in range(2, N):\\n\\tfor j in range(2):\\n\\t\\tif j == 1:\\n\\t\\t\\tdp[i][j] = val[i] * i + max(dp[i - 2][0], dp[i - 2][1])\\n\\t\\telse:\\n\\t\\t\\tdp[i][j] = max(dp[i - 1][0], dp[i - 1][1])\\nprint(max(dp[N - 1][0], dp[N - 1][1]))\\n\", \"n = int(input())\\nentrada_a = input().split()\\narr_a = [int(a) for a in entrada_a]\\naa = [0] * 100007\\ndpto = [0] * 100007\\nfor i in range(0, n):\\n\\taa[arr_a[i]] += 1\\ndpto[0] = 0\\ndpto[1] = aa[1]\\ni = 2\\nwhile i <= 100000:\\n\\tdpto[i] = max(dpto[i - 1], dpto[i - 2] + i * aa[i])\\n\\ti += 1\\nprint(dpto[100000])\\n\", \"n = int(input())\\ncrd = list(map(int, input().split()))\\nans = 1000001 * [0]\\nnum = 1000001 * [0]\\nfor i in crd:\\n\\tnum[i] += 1\\nans[1] = num[1]\\nfor i in range(1, 100001):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * num[i])\\nprint(ans[100000])\\n\", \"n = int(input())\\ns = [0] * 100001\\nfor x in map(int, input().split()):\\n\\ts[x] += x\\na = b = 0\\nfor i in s:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = int(input())\\nif n == 0:\\n\\tprint(0)\\n\\tpass\\nitems = [int(s) for s in input().split()]\\ncounts = dict()\\nmax_item = 0\\nfor item in items:\\n\\tcounts[item] = counts.get(item, 0) + 1\\n\\tif item > max_item:\\n\\t\\tmax_item = item\\ndp = [0] * (max_item + 1)\\ndp[1] = counts.get(1, 0)\\nfor i in range(2, max_item + 1):\\n\\tdp[i] = max(counts.get(i, 0) * i + dp[i - 2], dp[i - 1])\\nprint(dp[max_item])\\n\", \"n = int(input())\\nl2 = []\\nfor i in range(100010):\\n\\tl2.append(0)\\na = input().split()\\nl = []\\nl3 = []\\nsum1 = 0\\nsum2 = 0\\nfor i in range(n):\\n\\tl.append(int(a[i]))\\nfor i in range(n):\\n\\tl2[int(a[i])] += int(a[i])\\nif len(l2) == 1:\\n\\tprint(l2[0])\\nelif len(l2) == 2:\\n\\tprint(l2[1])\\nelse:\\n\\tl3.append(0)\\n\\tl3.append(l2[0])\\n\\tfor i in range(2, len(l2) + 1):\\n\\t\\tif l3[i - 2] + l2[i - 1] >= l3[i - 1]:\\n\\t\\t\\tl3.append(l3[i - 2] + l2[i - 1])\\n\\t\\telse:\\n\\t\\t\\tl3.append(l3[i - 1])\\n\\tprint(l3[len(l2)])\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\ncount = [0] * (max(a) + 1)\\nfor el in a:\\n\\tcount[el] += 1\\nn = len(count)\\ndp = [0] * n\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, n):\\n\\tdp[i] = max(dp[i - 2] + count[i] * i, dp[i - 1])\\nprint(dp[-1])\\n\", \"n = int(input())\\na = []\\nfor i in range(1000001):\\n\\ta.append(0)\\nmaxi = 0\\nb = [int(x) for x in input().split()]\\nfor i in range(n):\\n\\ta[b[i]] += 1\\n\\tmaxi = max(maxi, b[i])\\ntemp1 = a[1]\\ntemp2 = max(a[1], 2 * a[2])\\nfor i in range(3, maxi + 1):\\n\\tzz = max(temp1 + i * a[i], temp2)\\n\\ttemp1 = temp2\\n\\ttemp2 = zz\\nprint(temp2)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nc = {}\\nfor x in a:\\n\\tc.setdefault(x, 0)\\n\\tc[x] += 1\\nd = [0]\\nfor (x, n) in sorted(c.items()):\\n\\tif x - 1 in c:\\n\\t\\td.append(max(d[-1], d[-2] + x * n))\\n\\telse:\\n\\t\\td.append(d[-1] + x * n)\\nprint(d[-1])\\n\", \"a = int(input())\\nb = input().split()\\nc = []\\nfor i in range(100001):\\n\\tc.append(0)\\nfor i in range(len(b)):\\n\\tc[int(b[i])] += int(b[i])\\nfor i in range(3, 100001):\\n\\tc[i] = max(c[i - 2], c[i - 3]) + c[i]\\nprint(max(c[100000], c[99999]))\\n\", \"n = int(input())\\nA = [int(i) for i in input().split()]\\nm = max(A)\\nB = 100000 * [0]\\nfor i in range(n):\\n\\tk = A[i]\\n\\tB[k - 1] += k\\nif m == 1:\\n\\tprint(B[0])\\nelse:\\n\\tc = 0\\n\\td = B[0]\\n\\tfor i in range(m - 1):\\n\\t\\te = c\\n\\t\\tc = max(c, d)\\n\\t\\td = e + B[i + 1]\\n\\tprint(max(c, d))\\n\", \"from sys import stdin, stdout\\ninput = stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\ncnt = [0] * 10 ** 5\\nfor i in a:\\n\\tcnt[i - 1] += i\\ndp = [0] * (10 ** 5 + 1)\\ndp[1] = cnt[0]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i - 1])\\nstdout.write(str(dp[10 ** 5]))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nm = 10 ** 5 + 2\\nfreq = [0] * m\\nfor i in l:\\n\\tfreq[i] += 1\\ndp = [0] * m\\ndp[1] = freq[1]\\ndp[2] = freq[2] * 2\\nfor i in range(3, m):\\n\\tdp[i] = max(dp[i - 3], dp[i - 2]) + freq[i] * i\\nprint(max(dp))\\n\", \"MAXN = 100001\\nn = int(input())\\nnums = [int(x) for x in input().split()]\\ncnt = [0] * MAXN\\nfor x in nums:\\n\\tcnt[x] += 1\\ndp = [0] * MAXN\\ndp[1] = cnt[1]\\nans = 0\\nfor i in range(2, MAXN):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\tans = max(dp[i], ans)\\nprint(ans)\\n\", \"from collections import Counter\\n\\ndef f(cnt, fs, i):\\n\\tif i == 0:\\n\\t\\tx = 0\\n\\telif i == 1:\\n\\t\\tx = cnt[1]\\n\\telse:\\n\\t\\tx = max(fs[i - 1], fs[i - 2] + cnt[i] * i)\\n\\treturn x\\nn = int(input())\\nns = [int(x) for x in input().split(' ')]\\nm = max(ns)\\ncounter = Counter(ns)\\ncnt = [counter[i] if i in counter else 0 for i in range(m + 1)]\\nfs = list(range(m + 1))\\nfor i in range(m + 1):\\n\\tfs[i] = f(cnt, fs, i)\\nprint(fs[m])\\n\", \"n = int(input())\\narray = list(map(int, input().split()))\\narray.sort()\\ndistincts = 1\\nfor i in range(1, n):\\n\\tif array[i] != array[i - 1]:\\n\\t\\tdistincts += 1\\ndis = [0] * distincts\\ndisSum = [0] * distincts\\ndis[0] = array[0]\\ndisSum[0] = 1\\nj = 0\\nfor i in range(1, n):\\n\\tif array[i] != array[i - 1]:\\n\\t\\tj += 1\\n\\t\\tdis[j] = array[i]\\n\\t\\tdisSum[j] = 1\\n\\telse:\\n\\t\\tdisSum[j] += 1\\ninclude = [0] * distincts\\nexclude = [0] * distincts\\nprev = dis[0]\\ninclude[0] = dis[0] * disSum[0]\\nfor i in range(1, distincts):\\n\\tcurr = dis[i]\\n\\tif curr - 1 == prev:\\n\\t\\tinclude[i] = exclude[i - 1] + dis[i] * disSum[i]\\n\\t\\texclude[i] = max(include[i - 1], exclude[i - 1])\\n\\telse:\\n\\t\\tinclude[i] = max(include[i - 1], exclude[i - 1]) + dis[i] * disSum[i]\\n\\t\\texclude[i] = max(include[i - 1], exclude[i - 1])\\n\\tprev = curr\\nprint(max(include[distincts - 1], exclude[distincts - 1]))\\n\", \"n = int(input())\\nl = [int(k) for k in input().split()]\\ncnt = []\\ndp = []\\nm = max(l)\\nfor i in range(m + 1):\\n\\tcnt.append(0)\\n\\tdp.append(0)\\nfor i in l:\\n\\tcnt[int(i)] += 1\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor i in range(2, m + 1):\\n\\tdp[i] = max(dp[i - 2] + i * cnt[i], dp[i - 1])\\nprint(max(dp))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ndp = [0] * 100001\\nco = [0] * 100001\\nfor i in a:\\n\\tco[i] += 1\\ndp[1] = co[1]\\nr = dp[1]\\nfor i in range(2, 100001):\\n\\tif co[i] > 0:\\n\\t\\tr = max(dp[i - 1], dp[i - 2] + i * co[i])\\n\\tdp[i] = r\\nprint(r)\\n\", \"x = int(input())\\na = [int(a) for a in input().split()]\\nmodes = [0] * 100001\\ndp = [0] * 100001\\nfor numb in a:\\n\\tmodes[numb] += 1\\ndp[1] = modes[1]\\nfor numb in range(2, max(a) + 1):\\n\\tdp[numb] = max(dp[numb - 1], dp[numb - 2] + modes[numb] * numb)\\nprint(dp[max(a)])\\n\", \"n = int(input())\\nline = input().split()\\nline = [int(i) for i in line]\\nd = {}\\na = max(line)\\nfor i in range(a + 1):\\n\\td[str(i)] = 0\\nfor i in line:\\n\\td[str(i)] += 1\\nf = [0] * (a + 1)\\nf[1] = d[str(1)]\\nfor i in range(2, a + 1):\\n\\tf[i] = max(f[i - 2] + d[str(i)] * i, f[i - 1])\\nprint(f[a])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nd = [0] * 100001\\nfor num in a:\\n\\td[num] += num\\nx = y = 0\\nfor num in d:\\n\\t(x, y) = (max(x, num + y), x)\\nprint(x)\\n\", \"from collections import Counter\\ninp = input\\nn = inp()\\na = [int(k) for k in inp().split()]\\ncnt = Counter()\\nfor i in a:\\n\\tcnt[i] += 1\\nMAX = 10 ** 5 + 1\\ndp = [0] * MAX\\ndp[1] = cnt[1]\\ndp[2] = cnt[2]\\nfor i in range(2, MAX):\\n\\tdp[i] = max(dp[i - 2], dp[i - 3]) + i * cnt[i]\\nprint(max(dp[-1], dp[-2]))\\n\", \"n = int(input())\\nd = [0] * (10 ** 5 + 1)\\nfor x in map(int, input().split()):\\n\\td[x] += x\\nfor i in range(2, len(d)):\\n\\td[i] = max(d[i - 1], d[i] + d[i - 2])\\nprint(max(d))\\n\", \"MAX_VALUE = 100000\\nn = int(input())\\na = list(map(int, input().split(' ')))\\nfrequency = [0] * (1 + MAX_VALUE)\\nfor i in range(len(a)):\\n\\tfrequency[a[i]] += 1\\nmaximumScore = [0] * (1 + MAX_VALUE)\\nmaximumScore[1] = 1 * frequency[1]\\nmaximumScore[2] = 2 * frequency[2]\\nfor value in range(3, len(frequency)):\\n\\tmaximumScore[value] = value * frequency[value] + max(maximumScore[value - 2], maximumScore[value - 3])\\nanswer = max(maximumScore[MAX_VALUE], maximumScore[MAX_VALUE - 1])\\nprint(answer)\\n\", \"import sys, io, os, time\\nfrom collections import defaultdict\\nfrom collections import OrderedDict\\nfrom collections import deque\\nfrom itertools import combinations\\nfrom itertools import permutations\\nimport bisect, math, heapq\\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\\ninput = sys.stdin.readline\\nn = int(input())\\narr = list(map(int, input().split()))\\ncount = defaultdict(int)\\nfor i in arr:\\n\\tcount[i] += 1\\ndp = [0] * (10 ** 5 + 11)\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, 10 ** 5 + 11):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(max(dp))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = [0 for i in range(10 ** 5 + 1)]\\nfor i in a:\\n\\tb[i] += 1\\nr = 0\\nfor i in range(2, len(b)):\\n\\tb[i] = max(b[i - 1], b[i - 2] + b[i] * i)\\nprint(b[len(b) - 1])\\n\", \"MAXN = 100005\\nn = int(input())\\nseq = list(map(int, input().split()))\\ncount = [0] * MAXN\\ncurr = 0\\npast = 0\\nfor i in range(n):\\n\\tcount[seq[i]] += seq[i]\\nfor j in range(MAXN):\\n\\t(curr, past) = (max(curr, past + count[j]), curr * 1)\\nprint(curr)\\n\", \"import sys\\nimport string\\nfrom heapq import *\\nfrom bisect import *\\nfrom collections import Counter, defaultdict\\nfrom math import fsum, sqrt, gcd, ceil, factorial\\nfrom operator import *\\nfrom itertools import accumulate\\ninf = float('inf')\\nflush = lambda : sys.stdout.flush\\ncomb = lambda x, y: factorial(x) // factorial(y) // factorial(x - y)\\nen = lambda x: list(enumerate(x))\\nip = lambda : input()\\nii = lambda : int(input())\\nr = lambda : map(int, input().split())\\nrr = lambda : list(r())\\nn = ii()\\narr = rr()\\nbrr = Counter(arr)\\ndp = [0] * (10 ** 5 + 1)\\ndp[1] = brr[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * brr[i])\\nprint(dp[-1])\\n\", \"from collections import Counter, OrderedDict\\nlenght = input()\\na = [int(x) for x in input().split()]\\nn = 100001\\ncount = {key: val for (key, val) in zip(range(n), [0] * n)}\\nfor num in a:\\n\\tcount[num] += 1\\ndp = [0] * n\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, n):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[n - 1])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nfreq = [0 for i in range(max(a) + 1)]\\nfor i in a:\\n\\tfreq[i] += 1\\ndp = [freq[0], freq[1]]\\nfor i in range(2, len(freq)):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + freq[i] * i))\\nprint(dp[-1])\\n\", \"MAXA = 100000\\nn = int(input())\\na = map(int, input().split())\\ncnt = []\\nfor i in range(0, MAXA + 1):\\n\\tcnt.append(0)\\nfor ai in a:\\n\\tcnt[ai] += 1\\nlim = MAXA\\nf = [0, cnt[1]]\\nfor i in range(2, lim + 1):\\n\\tf.append(max(f[i - 1], f[i - 2] + i * cnt[i]))\\nprint(f[lim])\\n\", \"from collections import Counter\\nn = int(input())\\na = [int(x) for x in input().split()]\\na.sort()\\nz = Counter(a)\\nf = 0\\np = max(a)\\ndp = [0] * (p + 1)\\ndp[0] = 0\\ndp[1] = z[1]\\nm = dp[0]\\nx = dp[1]\\nfor i in range(2, p + 1):\\n\\tdp[i] = m + z[i] * i\\n\\tm = max(x, m)\\n\\tx = dp[i]\\nprint(max(dp))\\n\", \"import math\\nt = 1\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tm = list(map(int, input().split()))\\n\\tl = []\\n\\tfor i in range(100002):\\n\\t\\tl.append(0)\\n\\tfor i in m:\\n\\t\\tl[i] += 1\\n\\tans = []\\n\\tfor i in range(100002):\\n\\t\\tans.append(0)\\n\\tans[1] = l[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tans[i] = max(ans[i - 1], ans[i - 2] + l[i] * i)\\n\\tprint(ans[100000])\\n\", \"import sys\\nfrom functools import lru_cache, cmp_to_key\\nfrom heapq import merge, heapify, heappop, heappush\\nfrom collections import defaultdict as dd, deque, Counter as C\\nfrom itertools import combinations as comb, permutations as perm\\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\\nfrom time import perf_counter\\nfrom fractions import Fraction\\nimport copy\\nimport time\\nstarttime = time.time()\\nmod = int(pow(10, 9) + 7)\\nmod2 = 998244353\\n\\ndef data():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef out(*var, end='\\\\n'):\\n\\tsys.stdout.write(' '.join(map(str, var)) + end)\\n\\ndef L():\\n\\treturn list(sp())\\n\\ndef sl():\\n\\treturn list(ssp())\\n\\ndef sp():\\n\\treturn map(int, data().split())\\n\\ndef ssp():\\n\\treturn map(str, data().split())\\n\\ndef l1d(n, val=0):\\n\\treturn [val for i in range(n)]\\n\\ndef l2d(n, m, val=0):\\n\\treturn [l1d(n, val) for j in range(m)]\\ntry:\\n\\tsys.stdin = open('input.txt', 'r')\\nexcept:\\n\\tpass\\nn = L()\\nA = L()\\nx = max(A)\\np = [0 for i in range(x + 1)]\\nfor ele in A:\\n\\tp[ele] += 1\\ndp = [[0, 0, 0] for i in range(x + 1)]\\nfor i in range(1, x + 1):\\n\\tdp[i][0] = dp[i - 1][1] + p[i] * i\\n\\tdp[i][1] = max(dp[i - 1][0], dp[i - 2][0])\\nprint(max(dp[-1]))\\nendtime = time.time()\\n\", \"n = int(input())\\nstring = input().split()\\ncount = [0] * 1000000\\ndiv = [0] * 1000000\\nfor i in range(n):\\n\\tcount[int(string[i])] += 1\\ndiv[1] = count[1]\\nfor i in range(2, 1000000):\\n\\tdiv[i] = max(div[i - 1], div[i - 2] + count[i] * i)\\nprint(div[1000000 - 1])\\n\", \"n = int(input())\\nnums = sorted(map(int, input().split()))\\nprepared = [[nums[0], 1]]\\nfor num in nums[1:]:\\n\\tif num == prepared[-1][0]:\\n\\t\\tprepared[-1][1] += 1\\n\\telse:\\n\\t\\tprepared.append([num, 1])\\ndp = [0, prepared[0][1] * prepared[0][0]]\\nfor i in range(1, len(prepared)):\\n\\tif prepared[i][0] - prepared[i - 1][0] == 1:\\n\\t\\tdp.append(max(dp[i - 2 + 1] + prepared[i][1] * prepared[i][0], dp[i - 1 + 1]))\\n\\telse:\\n\\t\\tdp.append(dp[i - 1 + 1] + prepared[i][1] * prepared[i][0])\\nprint(dp[-1])\\n\", \"from collections import Counter\\nn = int(input())\\ndata = list(map(list, Counter(list(map(int, input().split()))).items()))\\ndata.sort(key=lambda x: x[0])\\ndp = [[0, 0] for _ in range(n)]\\ndp[0][0] = 0\\ndp[0][1] = data[0][0] * data[0][1]\\nfor i in range(1, len(data)):\\n\\tif data[i][0] - 1 == data[i - 1][0]:\\n\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\tdp[i][1] = dp[i - 1][0] + data[i][0] * data[i][1]\\n\\telse:\\n\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\tdp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) + data[i][0] * data[i][1]\\nprint(max(dp[len(data) - 1]))\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\n(even, odd, dp, N) = (0, 0, list(), 10 ** 5 + 5)\\ndp = [0] * N\\nfor i in arr:\\n\\tdp[i] += i\\ni = 2\\nwhile i < N:\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + dp[i])\\n\\ti += 1\\nprint(dp[N - 1])\\n\", \"from collections import Counter\\nn = int(input())\\na = [int(v) for v in input().split()]\\nd = Counter(a)\\np = list(d.keys())\\np.sort()\\ndp = [0, d[p[0]] * p[0]]\\nm = d[p[0]] * p[0]\\nfor j in range(1, len(p)):\\n\\tif p[j] - 1 in d:\\n\\t\\tdp.append(max(dp[-1], d[p[j]] * p[j] + dp[-2]))\\n\\telse:\\n\\t\\tdp.append(m + d[p[j]] * p[j])\\n\\tm = max(dp[-1], m)\\nprint(m)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\ncnt = [0] * 100001\\nmaxi = [0] * 100001\\nfor i in a:\\n\\tcnt[i] = cnt[i] + 1\\nmaxi[1] = cnt[1]\\nfor i in range(2, 100001):\\n\\tmaxi[i] = max(maxi[i - 1], maxi[i - 2] + cnt[i] * i)\\nprint(max(maxi))\\n\", \"import sys\\nn = int(input())\\nalist = map(int, sys.stdin.readline().split())\\nN = 10 ** 5 + 2\\ncounters = [0] * N\\nfor k in alist:\\n\\tcounters[k] += k\\n(s1, s2) = (0, 0)\\nfor i in range(N - 1):\\n\\t(s1, s2) = (max(s1, s2), s1 + counters[i + 1])\\nprint(s1)\\n\", \"n = int(input())\\na = [int(j) for j in input().split(' ')]\\nm = pow(10, 5) + 1\\ns = [0] * m\\nfor i in a:\\n\\ts[i] += 1\\nprev2 = 0\\nprev1 = s[1]\\nfor i in range(2, m):\\n\\taux = prev1\\n\\tprev1 = max(prev2 + s[i] * i, prev1)\\n\\tprev2 = aux\\nprint(prev1)\\n\", \"from collections import Counter\\ninput()\\nc = Counter(map(int, input().split()))\\nmax_ = max(c)\\nmax_points = {1: c[1], 2: max(c[1], 2 * c[2])}\\nfor i in range(3, max_ + 1):\\n\\tmax_points[i] = max(max_points[i - 2] + i * c[i], max_points[i - 1])\\nprint(max_points[max_])\\n\", \"input()\\nsp = list(map(int, input().split()))\\nn = max(sp) + 1\\nch = [0] * n\\nfor i in sp:\\n\\tch[i] += 1\\n(s1, s2) = (0, ch[1])\\nfor i in range(2, n):\\n\\t(s1, s2) = (s2, max(s2, s1 + ch[i] * i))\\nprint(s2)\\n\", \"input()\\na = list(map(int, input().split()))\\nsum = [0] * (10 ** 5 + 2)\\nfor i in a:\\n\\tsum[i] = sum[i] + i\\nfor i in range(2, len(sum)):\\n\\tsum[i] = max(sum[i - 1], sum[i - 2] + sum[i])\\nprint(sum[-1])\\n\", \"n = int(input())\\nls1 = [int(i) for i in input().split()]\\nls2 = list(set(ls1))\\nls2.sort()\\ndict = {}\\nfor i in range(max(ls2) + 3):\\n\\tdict[i] = 0\\nfor j in ls1:\\n\\tdict[j] += 1\\nif max(ls2) == 1:\\n\\tprint(dict[i] * i)\\nf0 = 0\\nf1 = dict[1]\\nfor i in range(2, max(ls2) + 1, 2):\\n\\tf0 = max(f0 + dict[i] * i, f1)\\n\\tf1 = max(f0, f1 + dict[i + 1] * (i + 1))\\nprint(max(f1, f0))\\n\", \"import sys\\nsys.setrecursionlimit(100000)\\nn = int(input())\\na = list(map(lambda x: int(x), input().split()))\\nhashmap = {}\\nfor i in a:\\n\\tif i not in hashmap:\\n\\t\\thashmap[i] = 0\\n\\thashmap[i] += 1\\ndp = [0 for i in range(0, max(a) + 1)]\\nfor i in range(1, max(a) + 1):\\n\\tif i in hashmap:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + hashmap[i] * i)\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2])\\nprint(dp[max(a)])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nl = list((0 for i in range(max(a) + 1)))\\nfor i in a:\\n\\tl[i] += i\\nf = list((0 for i in range(max(a) + 1)))\\nf[1] = l[1]\\nfor i in range(2, len(f)):\\n\\tf[i] = max(f[i - 1], f[i - 2] + l[i])\\nprint(f[-1])\\n\", \"n = int(input())\\na = map(int, input().split())\\ndp = [0 for x in range(100001)]\\ncounter = [0 for x in range(100001)]\\nfor x in a:\\n\\tcounter[x] += 1\\ndp[1] = counter[1]\\nfor x in range(2, 100001):\\n\\tdp[x] = max(dp[x - 2] + counter[x] * x, dp[x - 1])\\nprint(dp[100000])\\n\", \"n = int(input())\\narr = [int(v) for v in input().strip().split()]\\nmem = [0 for i in range(100001)]\\nfreq = [0 for i in range(100001)]\\nfor i in range(n):\\n\\tfreq[arr[i]] += 1\\nmem[1] = freq[1]\\nfor i in range(2, 100001):\\n\\tmem[i] = max(mem[i - 1], mem[i - 2] + i * freq[i])\\nprint(mem[100000])\\n\", \"def max_points(n, points):\\n\\tcount = [0 for i in range(100001)]\\n\\tsolutions = [0 for i in range(100001)]\\n\\tfor i in range(n):\\n\\t\\tcount[points[i]] += 1\\n\\tsolutions[1] = count[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tsolutions[i] = max(solutions[i - 1], solutions[i - 2] + i * count[i])\\n\\tprint(solutions[100000])\\nn = int(input())\\npoints = input().split(' ')\\nfor i in range(len(points)):\\n\\tpoints[i] = int(points[i])\\nmax_points(n, points)\\n\", \"__author__ = 'myduomilia'\\nn = int(input())\\narr = list(map(int, input().split()))\\na = [0 for i in range(100001)]\\nb = [0 for i in range(100001)]\\nfor val in arr:\\n\\ta[val] += 1\\n(b[0], b[1]) = (a[0], a[1])\\nfor i in range(2, 100001):\\n\\tb[i] = max(b[i - 1], b[i - 2] + a[i] * i)\\nprint(b[100000])\\n\", \"a = input()\\nb = str(input()).split()\\nb = list(map(int, b))\\nb.sort()\\nm = {}\\nfor el in b:\\n\\tif el in m:\\n\\t\\tm[el] = m[el] + 1\\n\\telse:\\n\\t\\tm[el] = 1\\nx = 0\\nresults = {}\\nresults[-1] = 0\\nresults[0] = 0\\nprev = 0\\nfor i in m:\\n\\tx = x + 1\\n\\tif prev + 1 == i:\\n\\t\\tresults[x] = max(results[x - 1], results[x - 2] + m[i] * i)\\n\\telse:\\n\\t\\tresults[x] = results[x - 1] + m[i] * i\\n\\tprev = i\\nprint(results[x])\\n\", \"def dpSolve(sequence):\\n\\tfreqArray = [0] * 100001\\n\\tdp = [0] * 100001\\n\\tfor num in sequence:\\n\\t\\tfreqArray[num] += 1\\n\\tdp[1] = freqArray[1]\\n\\tfor i in range(2, len(dp)):\\n\\t\\tdp[i] = max(dp[i - 1], i * freqArray[i] + dp[i - 2])\\n\\treturn dp[len(dp) - 1]\\nnumInts = int(input().strip())\\nsequence = [int(n) for n in input().strip().split()]\\nprint(dpSolve(sequence))\\n\", \"maxn = 100001\\nn = int(input())\\nnum = [int(x) for x in input().split()]\\ncnt = [0] * maxn\\nfor x in num:\\n\\tcnt[x] += 1\\ndp = [0] * maxn\\ndp[1] = cnt[1]\\nans = 0\\nfor i in range(2, maxn):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\tans = max(dp[i], ans)\\nprint(ans)\\n\", \"input()\\na = [0] * 100001\\nfor i in map(int, input().split()):\\n\\tx = int(i)\\n\\ta[x] += x\\nm = n = 0\\nfor i in a:\\n\\t(m, n) = (n, max(i + m, n))\\nprint(n)\\n\", \"MX = 100005\\nT = [0] * MX\\ndp = [0] * MX\\nA = int(input())\\nB = input().split()\\nfor x in B:\\n\\tT[int(x)] += int(x)\\ndp[1] = T[1]\\nfor x in range(2, MX):\\n\\tdp[x] = max(dp[x - 2] + T[x], dp[x - 1])\\nprint(dp[MX - 1])\\n\", \"def F_iter(arr):\\n\\tdp = {}\\n\\tdp[len(arr)] = 0\\n\\tdp[len(arr) - 1] = arr[-1][0] * arr[-1][1]\\n\\tfor i in range(len(arr) - 2, -1, -1):\\n\\t\\t(val, rep) = arr[i]\\n\\t\\tif i + 1 < len(arr) and val + 1 != arr[i + 1][0]:\\n\\t\\t\\tdp[i] = dp[i + 1] + val * rep\\n\\t\\telse:\\n\\t\\t\\tdp[i] = max(dp[i + 2] + val * rep, dp[i + 1])\\n\\treturn dp[0]\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = sorted(map(int, input().split()))\\n\\tpairs = [[arr[0], 1]]\\n\\t(val, k) = (arr[0], 0)\\n\\tfor i in range(1, n):\\n\\t\\tif val == arr[i]:\\n\\t\\t\\tpairs[k][1] += 1\\n\\t\\telse:\\n\\t\\t\\tval = arr[i]\\n\\t\\t\\tpairs.append([val, 1])\\n\\t\\t\\tk += 1\\n\\tprint(F_iter(pairs))\\nsolve()\\n\", \"counter = [0 for i in range(10 ** 5 + 1)]\\nn = int(input())\\na = list(map(int, input().split()))\\nfor i in a:\\n\\tcounter[i] += 1\\ndin_array = [0, counter[1]]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdin_array.append(max(din_array[i - 1], din_array[i - 2] + i * counter[i]))\\nprint(din_array[10 ** 5])\\n\", \"from sys import stdin\\n\\ndef points(arr):\\n\\td = {}\\n\\tfor v in arr:\\n\\t\\td[v] = d.get(v, 0) + v\\n\\tele = sorted(d.keys())\\n\\tdp = [0] * len(ele)\\n\\tmax1 = max2 = 0\\n\\tfor (i, v) in enumerate(ele):\\n\\t\\tif v - 1 == ele[i - 1]:\\n\\t\\t\\tdp[i] = d[v] + max2\\n\\t\\t\\tmax2 = max1\\n\\t\\t\\tmax1 = max(max1, dp[i])\\n\\t\\telse:\\n\\t\\t\\tdp[i] = d[v] + max1\\n\\t\\t\\tmax2 = max1\\n\\t\\t\\tmax1 = max(dp[i], max1)\\n\\tprint(max1)\\n\\ndef solution():\\n\\tinput = stdin.readline\\n\\tint(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tpoints(arr)\\nsolution()\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nres = [0] * (max(l) + 1)\\nfor j in range(n):\\n\\tres[l[j]] += 1\\nfor j in range(2, len(res)):\\n\\tres[j] = max(res[j] * j + res[j - 2], res[j - 1])\\nprint(max(res))\\n\", \"import sys\\ninput()\\nd = [0] * 100001\\nn = map(int, input().split())\\nfor x in n:\\n\\td[x] += x\\na = b = 0\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"from collections import Counter\\ninput()\\nn = [int(x) for x in input().split(' ')]\\nfreq = Counter(n)\\nm = max(n)\\ndp = [0] * (m + 1)\\ndp[1] = freq[1]\\nfor i in range(2, m + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\nprint(dp[m])\\n\", \"def main():\\n\\tL = [0 for i in range(100001)]\\n\\tc = L\\n\\tn = int(input())\\n\\tMax = 0\\n\\ts = input().split()\\n\\tinp = []\\n\\tfor i in range(n):\\n\\t\\tinp.append(int(s[i]))\\n\\t\\tc[inp[i]] += 1\\n\\t\\tMax = max(inp[i], Max)\\n\\tL[1] = inp.count(1)\\n\\tfor i in range(2, Max + 1):\\n\\t\\tL[i] = max(L[i - 1], L[i - 2] + c[i] * i)\\n\\tprint(L[Max])\\nmain()\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nB = [0] * (10 ** 5 + 1)\\nfor i in A:\\n\\tB[i] += 1\\ndp = [0] * (10 ** 5 + 1)\\nif B[1] > 0:\\n\\tdp[1] = B[1]\\ndp[2] = max(dp[1], 2 * B[2])\\nfor i in range(3, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i], B[i - 1] * (i - 1) + dp[i - 3], B[i] * i + dp[i - 2], dp[i - 1])\\nprint(dp[-1])\\n\", \"n = int(input())\\na = [0] * 100001\\ndp = [0] * 100001\\nfor i in input().split():\\n\\ta[int(i)] += 1\\nfor i in range(100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i] * i)\\nprint(dp[100000])\\n\", \"from collections import Counter\\nn = int(input())\\nnum = [int(i) for i in input().split()]\\ncounter = Counter(num)\\nsorted_unique = sorted(set(num))\\ndp = [0 for i in range(max(sorted_unique) + 1)]\\nfor i in range(1, max(sorted_unique) + 1):\\n\\tif i not in counter:\\n\\t\\tdp[i] = dp[i - 1]\\n\\t\\tcontinue\\n\\tcur = i * counter[i]\\n\\tif i == 1:\\n\\t\\tdp[i] = cur\\n\\t\\tcontinue\\n\\tdp[i] = max(cur + dp[i - 2], dp[i - 1])\\nprint(max(dp))\\n\", \"def find_max_sum(arr):\\n\\tincl = 0\\n\\texcl = 0\\n\\tfor i in range(1, 100005):\\n\\t\\tnew_excl = excl if excl > incl else incl\\n\\t\\tincl = excl + i * arr[i]\\n\\t\\texcl = new_excl\\n\\treturn excl if excl > incl else incl\\nN = int(input())\\nL = list(map(int, input().split()))\\narr = [0] * 100005\\nfor i in L:\\n\\tarr[i] += 1\\nprint(find_max_sum(arr))\\n\", \"import collections\\n\\ndef solve(sequence):\\n\\tmax_n = max(sequence)\\n\\td = collections.defaultdict(int)\\n\\tfor n in sequence:\\n\\t\\td[n] += 1\\n\\tdp = [[0, 0] for _ in range(max_n + 1)]\\n\\tdp[0][0] = dp[0][1] = 0\\n\\tfor i in range(1, max_n + 1):\\n\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\tdp[i][1] = i * d[i] + dp[i - 1][0]\\n\\treturn max(dp[max_n][0], dp[max_n][1])\\n\\ndef main():\\n\\t_ = input()\\n\\tsequence = [int(x) for x in input().strip().split()]\\n\\tresult = solve(sequence)\\n\\tprint(result)\\nmain()\\n\", \"import itertools\\nn = int(input())\\narr = [int(x) for x in input().strip().split()]\\ndp = list(itertools.repeat(0, 10 ** 5 + 2))\\nmyd = {}\\nfor i in arr:\\n\\tif i in myd:\\n\\t\\tmyd[i] += 1\\n\\telse:\\n\\t\\tmyd[i] = 1\\nif 1 in myd:\\n\\tdp[1] = myd[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tif i in myd:\\n\\t\\tx = max(dp[i - 1], dp[i - 2] + i * myd[i])\\n\\telse:\\n\\t\\tx = max(dp[i - 1], dp[i - 2])\\n\\tdp[i] = x\\nprint(dp[10 ** 5])\\n\", \"n = int(input())\\nl = input().split()\\nfor i in range(n):\\n\\tl[i] = int(l[i])\\na = sorted(l)\\ntlist = [0]\\nmlist = [0]\\ncnt = [0]\\nfor k in range(100000):\\n\\tcnt.append(0)\\nfor q in range(n):\\n\\tcnt[a[q]] += 1\\nfor j in range(1, a[n - 1] + 1):\\n\\ttlist.append(cnt[j] * j)\\n\\tif j == 1:\\n\\t\\tmlist.append(tlist[1])\\n\\telse:\\n\\t\\tmlist.append(max(mlist[j - 1], tlist[j] + mlist[j - 2]))\\nprint(mlist[a[n - 1]])\\n\", \"n = int(input())\\nlist = [int(i) for i in input().split()]\\nd = [0] * 100002\\nfor i in list:\\n\\td[i] = d[i] + i\\na = b = 0\\nfor i in d:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"n = int(input())\\ndata = [int(j) for j in input().split()]\\ndata.sort()\\nD = [0] * (data[-1] + 1)\\ncnt = dict(zip(data, data))\\nfor k in range(n - 1):\\n\\tif data[k] == data[k + 1]:\\n\\t\\tcnt[data[k]] = cnt[data[k]] + data[k]\\nD[0] = 0\\nfor i in range(1, data[-1] + 1):\\n\\tif (i in cnt.keys()) == True:\\n\\t\\tD[i] = max(D[i - 1], D[i - 2] + cnt[i])\\n\\telif (i in cnt.keys()) == False:\\n\\t\\tD[i] = D[i - 1]\\nprint(D[-1])\\n\", \"n = int(input())\\nd = [0] * (10 ** 5 + 1)\\narr = list(map(int, input().split()))\\nfor i in arr:\\n\\td[i] += 1\\ndpp = [0] * (10 ** 5 + 1)\\ndpp[0] = 0\\ndpp[1] = d[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdpp[i] = max(dpp[i - 2] + d[i] * i, dpp[i - 1])\\nm = 10 ** 5\\nprint(dpp[m])\\n\", \"n = int(input())\\nnlist = [int(i) for i in input().split()]\\nbig = max(nlist)\\nalist = []\\nblist = []\\nfor i in range(1, big + 1):\\n\\talist.append(i)\\n\\tblist.append(0)\\nzidian = dict(zip(alist, blist))\\nfor i in nlist:\\n\\tzidian[i] += i\\np = 0\\nq = zidian[1]\\nfor i in range(2, big + 1):\\n\\ttmp = p + zidian[i]\\n\\tp = max(p, q)\\n\\tq = tmp\\nprint(max(p, q))\\n\", \"s = [0] * (int(1000000.0) + 1)\\na = b = 0\\ninput()\\nfor i in map(int, input().split()):\\n\\ts[i] += i\\nfor i in s:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nf = [0] * (max(arr) + 1)\\nfor i in arr:\\n\\tf[i] += 1\\nl = ['4' * 3]\\ndp = [[0, 0] for x in range(max(arr) + 1)]\\nfor i in range(1, max(arr) + 1):\\n\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\tdp[i][1] = f[i] * i + dp[i - 1][0]\\nprint(max(dp[max(arr)][0], dp[max(arr)][1]))\\n\", \"n = int(input())\\na = [0] * 100001\\ndp = [0] * 100001\\nfor i in input().split():\\n\\ta[int(i)] += int(i)\\nfor i in range(len(a)):\\n\\tif i == 0 or i == 1:\\n\\t\\tdp[i] = a[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i])\\nprint(dp[100000])\\n\", \"n = int(input())\\ncount = [0 for i in range(10 ** 5 + 1)]\\ndp = [0 for i in range(10 ** 5 + 1)]\\na = list(map(int, input().split()))\\nfor i in a:\\n\\tcount[i] += 1\\ndp[1] = count[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[10 ** 5])\\n\", \"n = int(input())\\nmaxi = 100001\\nseq = [0] * maxi\\ntake = [0] * maxi\\nnotake = [0] * maxi\\nvalue = [int(x) for x in input().split()]\\nfor i in range(n):\\n\\tseq[value[i]] += 1\\nfor i in range(1, maxi):\\n\\tif seq[i] > 0:\\n\\t\\tif seq[i - 1] > 0:\\n\\t\\t\\ttake[i] = seq[i] * i + notake[i - 1]\\n\\t\\telse:\\n\\t\\t\\ttake[i] = seq[i] * i + max(take[i - 1], notake[i - 1])\\n\\t\\tnotake[i] = max(take[i - 1], notake[i - 1])\\n\\telse:\\n\\t\\ttake[i] = take[i - 1]\\n\\t\\tnotake[i] = notake[i - 1]\\nprint(max(take[maxi - 1], notake[maxi - 1]))\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nfrom collections import Counter\\n\\ndef solution(arr, n):\\n\\tN = int(100000.0 + 1)\\n\\tcnt = Counter(arr)\\n\\tdp = [0] * N\\n\\tdp[0] = 0\\n\\tdp[1] = cnt[1]\\n\\tfor i in range(2, N):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\twrite(dp[-1])\\n\\ndef main():\\n\\tn = r_int()\\n\\tarr = r_array()\\n\\tsolution(arr, n)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\n\\ndef input():\\n\\treturn sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef write(*args, end='\\\\n'):\\n\\tfor x in args[:-1]:\\n\\t\\tsys.stdout.write(str(x) + ' ')\\n\\tsys.stdout.write(str(args[-1]))\\n\\tsys.stdout.write(end)\\n\\ndef r_array():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef r_int():\\n\\treturn int(input())\\nmain()\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\nset_lis = set(lis)\\nx = [0] * (max(set_lis) + 2)\\nfor i in lis:\\n\\tx[i] = x[i] + i\\n(a, b) = (0, 0)\\nfor i in x:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"import sys\\nn = int(sys.stdin.readline())\\na = list(map(int, sys.stdin.readline().split(' ')))\\nM = max(a)\\nc = [0] * (M + 1)\\nfor x in a:\\n\\tc[x] += 1\\n\\ndef solve():\\n\\ts = [0, c[1]]\\n\\tfor i in range(2, M + 1):\\n\\t\\ts.append(max(s[i - 1], s[i - 2] + c[i] * i))\\n\\treturn s[-1]\\nprint(solve())\\n\", \"n = int(input())\\na = [0 for i in range(10 ** 5 + 1)]\\nl = list(map(int, input().split()))\\nfor i in l:\\n\\ta[i] += 1\\nso = 0\\nse = 0\\ndp = [0 for i in range(10 ** 5 + 1)]\\ndp[1] = a[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i] * i)\\nprint(dp[10 ** 5])\\n\", \"from math import inf as inf\\nfrom math import *\\nfrom collections import *\\nimport sys\\ninput = sys.stdin.readline\\nt = 1\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tf = [0 for i in range(100001)]\\n\\ta = list(map(int, input().split()))\\n\\tfor i in a:\\n\\t\\tf[i] += i\\n\\t(x, y) = (0, 0)\\n\\tfor i in f:\\n\\t\\t(x, y) = (max(x, i + y), x)\\n\\tprint(x)\\n\", \"n = int(input())\\na = [0] * 100001\\ndp = [0] * 100001\\nfor num in list(map(int, input().split())):\\n\\ta[num] += num\\ndp[0] = a[0]\\ndp[1] = a[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 2] + a[i], dp[i - 1])\\nprint(dp[-1])\\n\", \"N = 100001\\nn = int(input())\\nf = [0] * N\\nfor i in map(int, input().split()):\\n\\tf[i] += 1\\nres = 0\\nfor i in range(2, N):\\n\\tf[i] = max(i * f[i] + f[i - 2], f[i - 1])\\nprint(f[-1])\\n\", \"import sys\\n\\ndef main():\\n\\tn = int(sys.stdin.readline())\\n\\tk = 100003\\n\\td = [0 for i in range(k)]\\n\\tcnt = [0 for i in range(k)]\\n\\tm = -1\\n\\ta = [int(i) for i in sys.stdin.readline().split()]\\n\\tfor elem in a:\\n\\t\\tcnt[elem] += 1\\n\\tfor i in range(k - 3, 0, -1):\\n\\t\\td[i] = max(d[i + 2] + cnt[i] * i, d[i + 1])\\n\\tsys.stdout.write('%d' % d[1])\\nmain()\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nm = max(l)\\ncount = [0 for i in range(m + 1)]\\nfor x in l:\\n\\tcount[x] += 1\\ndp = [0 for i in range(m + 1)]\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, m + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\nprint(dp[m])\\n\", \"MAX_N = 100001\\ndp = [0 for i in range(MAX_N)]\\nc = [0 for i in range(MAX_N)]\\nn = int(input())\\n(*arr,) = map(int, input().split())\\nx = m = 0\\nfor a in arr:\\n\\tc[a] += 1\\ndp[1] = c[1]\\nfor i in range(2, MAX_N):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\nprint(dp[MAX_N - 1])\\n\", \"n = int(input())\\nI = lambda : list(map(int, input().split(' ')))\\nlst = I()\\ndct = {}\\nfor ele in lst:\\n\\tif ele in dct:\\n\\t\\tdct[ele] += ele\\n\\telse:\\n\\t\\tdct[ele] = ele\\ndp = [None] * (10 ** 5 + 1)\\n\\ndef pts(i):\\n\\tif i in dct:\\n\\t\\treturn dct[i]\\n\\telse:\\n\\t\\treturn 0\\ndp[0] = pts(0)\\ndp[1] = max(pts(1), pts(0))\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + (dct[i] if i in dct else 0))\\nprint(dp[-1])\\n\", \"import sys\\nfrom math import sqrt, gcd, ceil, log, floor\\nfrom collections import defaultdict, Counter, deque\\nfrom heapq import heapify, heappush, heappop\\ninput = sys.stdin.readline\\nread = lambda : list(map(int, input().strip().split()))\\n\\ndef main():\\n\\tn = int(input())\\n\\tarr = read()\\n\\tdic = Counter(arr)\\n\\tdp = defaultdict(int)\\n\\tfor i in range(1, 10 ** 5 + 1):\\n\\t\\tdp[i] = max(dic[i] * i + dp[i - 2], dp[i - 1])\\n\\tprint(max(dp.values()))\\nmain()\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nk = max(arr)\\nalpha = []\\nfor _ in range(k + 1):\\n\\talpha.append(0)\\nfor elem in arr:\\n\\talpha[elem] += 1\\nhalua_results = []\\nfor _ in range(k + 1):\\n\\thalua_results.append(-1)\\n\\ndef halua(i):\\n\\tif i in range(2):\\n\\t\\tvalue = alpha[i]\\n\\telif halua_results[i] > -1:\\n\\t\\tvalue = halua_results[i]\\n\\telse:\\n\\t\\tvalue = max(alpha[i] * i + halua(i - 2), halua(i - 1))\\n\\treturn value\\nfor j in range(k + 1):\\n\\thalua_results[j] = halua(j)\\nans = halua_results[k]\\nprint(ans)\\n\", \"import math\\nl1 = int(input())\\nl2 = input().split()\\nl2 = [int(i) for i in l2]\\nmaxi = 100001\\nc = []\\nd = []\\nfor i in range(maxi):\\n\\tc.append(0)\\n\\td.append(0)\\nfor j in l2:\\n\\tc[j] += 1\\nd[0] = 0\\nd[1] = c[1]\\nfor x in range(2, maxi):\\n\\td[x] = max(d[x - 1], d[x - 2] + x * c[x])\\nprint(d[maxi - 1])\\n\", \"n = int(input())\\nc = list(map(int, input().split()))\\na = [0] * (10 ** 5 + 1)\\nfor i in range(n):\\n\\ta[c[i]] += 1\\n(x, y) = (0, 0)\\nfor i in range(1, 10 ** 5 + 1):\\n\\t(x, y) = (y, max(y, x + a[i] * i))\\nprint(y)\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\ncalc = [0] * 100005\\nfor i in lis:\\n\\tcalc[i] += i\\ncalc = calc[0:max(lis) + 1]\\ndp = [-1] * len(calc)\\ndp[0] = 0\\ndp[1] = calc[1]\\nfor i in range(2, len(calc)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + calc[i])\\nprint(dp[len(calc) - 1])\\n\", \"from collections import OrderedDict\\nn = int(input())\\na = OrderedDict()\\nfor e in sorted(map(int, input().split())):\\n\\ta[e] = 1 if e not in a else a[e] + 1\\nA = [0] + [(e, a[e]) for e in a]\\nm = len(A)\\nv = [0 for i in range(m)]\\nv[1] = A[1][0] * A[1][1]\\nfor i in range(2, m):\\n\\tv[i] = max(A[i][0] * A[i][1] + v[i - 2 if A[i - 1][0] == A[i][0] - 1 else i - 1], v[i - 1])\\nprint(v[-1])\\n\", \"n = map(int, input())\\nnum_list = list(map(int, input().split(' ')))\\nN = 100001\\nmax_num = max(num_list)\\n\\ndef calculate_freq(num_list):\\n\\tfreq = [0] * N\\n\\tfor num in num_list:\\n\\t\\tfreq[num] += 1\\n\\treturn freq\\n\\ndef solve(num_list):\\n\\tfreq = calculate_freq(num_list)\\n\\tdp = [0, freq[1]]\\n\\tfor i in range(2, max_num + 1):\\n\\t\\tdp.append(max(dp[i - 1], dp[i - 2] + i * freq[i]))\\n\\treturn dp[max_num]\\nprint(solve(num_list))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nmx = 10 ** 5\\ncnt = [0 for i in range(mx + 1)]\\nfor x in a:\\n\\tcnt[x] += 1\\nf = [0, cnt[1]]\\nfor i in range(2, mx + 1):\\n\\ty = max(f[i - 1], f[i - 2] + i * cnt[i])\\n\\tf.append(y)\\nprint(f[-1])\\n\", \"input()\\nb = [0] * 100001\\nfor i in input().split():\\n\\tb[int(i)] += int(i)\\nh = s = 0\\nfor j in b:\\n\\t(h, s) = (max(s + j, h), h)\\nprint(h)\\n\", \"MAXN = 200005\\nn = int(input())\\na = list(map(int, input().split()))\\nval = [0] * MAXN\\ndp = [0] * MAXN\\nans = 0\\nfor i in range(n):\\n\\tval[a[i]] = val[a[i]] + a[i]\\nfor i in range(100001):\\n\\tdp[i] = 0 if i == 0 else dp[i - 1]\\n\\tdp[i] = max(dp[i], dp[i - 2] + val[i])\\n\\tans = max(ans, dp[i])\\nprint(ans)\\n\", \"def f(A):\\n\\tA.sort()\\n\\tB = []\\n\\t(prev, prevtotal) = (None, 0)\\n\\t(cur, curtotal) = (None, 0)\\n\\tfor i in range(len(A) + 1):\\n\\t\\ta = A[i] if i < len(A) else None\\n\\t\\tif a == cur:\\n\\t\\t\\tcurtotal += a\\n\\t\\telse:\\n\\t\\t\\tif prev != cur:\\n\\t\\t\\t\\tB.append((cur, curtotal))\\n\\t\\t\\t(prev, prevtotal) = (cur, curtotal)\\n\\t\\t\\t(cur, curtotal) = (a, a)\\n\\t(i1, p1) = (float('-inf'), 0)\\n\\t(i2, p2) = (float('-inf'), 0)\\n\\tfor (x, x_total) in B:\\n\\t\\t(c, cval) = (x, x_total)\\n\\t\\tif i1 + 1 < x:\\n\\t\\t\\tcval = p1 + x_total\\n\\t\\tif i2 + 1 < x:\\n\\t\\t\\tcval = p2 + x_total\\n\\t\\tif cval > p2:\\n\\t\\t\\tif p2 > p1:\\n\\t\\t\\t\\t(i1, p1) = (i2, p2)\\n\\t\\t\\t(i2, p2) = (c, cval)\\n\\treturn max(p1, p2)\\nassert f([4, 2, 3, 2, 5]) == 9\\nassert f([1, 1, 1, 1, 1, 1, 2, 3, 3, 3]) == 15\\nassert f([1, 2, 3]) == 4\\nassert f([1, 2]) == 2\\nassert f([1, 2, 1, 3, 2, 2, 2, 2, 3]) == 10\\nassert f([2, 3, 2]) == 4\\nassert f([2, 3, 2, 4]) == 8\\nassert f([3, 4, 5]) == 8\\nn = input()\\nA = [*map(int, input().split())]\\nans = f(A)\\nprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nfrom collections import Counter\\nd = Counter(a)\\nm = [0] * 100001\\nm[1] = d[1]\\nfor i in range(2, 100001):\\n\\tm[i] = max(m[i - 1], m[i - 2] + d[i] * i)\\nprint(m[100000])\\n\", \"input()\\na = map(int, input().split())\\nb = [0] * 10 ** 5\\nfor el in a:\\n\\tb[el - 1] += el\\nres = [0] * (10 ** 5 + 3)\\nfor (idx, el) in enumerate(b):\\n\\tres[idx + 3] = max(res[idx] + el, res[idx + 1] + el, res[idx + 2])\\nprint(res[-1])\\n\", \"import collections\\nn = int(input())\\nnums = [int(x) for x in input().split()]\\nnumcount = collections.Counter(nums)\\nstorage = [0] * 100001\\nnumset = list(numcount.keys())\\nmaxnum = max(numset)\\nif 1 in numset:\\n\\tstorage[1] = numcount[1]\\nfor i in range(1, maxnum + 1):\\n\\tstorage[i] = max(storage[i - 1], storage[i - 2] + i * numcount[i])\\nprint(storage[maxnum])\\n\", \"MAXN = 100000\\nn = int(input())\\nnumbers = input().split()\\narray = MAXN * [0]\\nfor i in range(n):\\n\\tarray[int(numbers[i]) - 1] += int(numbers[i])\\nmaxscore = MAXN * [0]\\nmaxscore[0] = array[0]\\nmaxscore[1] = array[1]\\nmaxscore[2] = max(array[0] + array[2], array[1])\\nfor i in range(3, MAXN):\\n\\tmaxscore[i] = max(array[i] + max(maxscore[i - 2], maxscore[i - 3]), maxscore[i - 1])\\nprint(maxscore[MAXN - 1])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nmaxi = 1\\nnumbs = [0] * (10 ** 5 + 1)\\nfor k in l:\\n\\tmaxi = max(maxi, k)\\n\\tnumbs[k] += 1\\nnumbs = numbs[1:maxi + 1]\\nN = len(numbs)\\nresults = [-1] * (N + 2)\\nfor i in range(N + 2, 0, -1):\\n\\tif i >= N + 1:\\n\\t\\tresults[i - 1] = 0\\n\\telif i == N:\\n\\t\\tresults[i - 1] = N * numbs[N - 1]\\n\\telif i == N - 1:\\n\\t\\tresults[i - 1] = max(N * numbs[N - 1], (N - 1) * numbs[N - 2])\\n\\telse:\\n\\t\\tresults[i - 1] = max(results[i + 1] + i * numbs[i - 1], results[i + 2] + (i + 1) * numbs[i])\\nprint(results[0])\\n\", \"def read_line():\\n\\treturn [int(x) for x in input().split()]\\n\\ndef read_int():\\n\\treturn int(input())\\n\\ndef solve():\\n\\t_ = read_int()\\n\\ta = read_line()\\n\\tN = int(100000.0)\\n\\tfreq = [0 for _ in range(N + 1)]\\n\\tfor x in a:\\n\\t\\tfreq[x] += 1\\n\\tdp = [0 for _ in range(N + 1)]\\n\\tdp[0] = 0\\n\\tdp[1] = freq[1]\\n\\tfor i in range(2, N + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\n\\tprint(dp[N])\\nt = 1\\nwhile t > 0:\\n\\tsolve()\\n\\tt -= 1\\n\", \"from sys import stdin, stdout\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import defaultdict\\nimport math\\ncin = stdin.readline\\n\\ndef cout(x):\\n\\tstdout.write(str(x) + '\\\\n')\\n\\ndef nexint():\\n\\treturn int(stdin.readline())\\n\\ndef readline():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef readlist():\\n\\treturn list(map(int, stdin.readline().split()))\\n\\ndef sorted_indexes(arr):\\n\\treturn sorted(range(len(arr)), key=arr.__getitem__)\\n\\ndef printr(arr):\\n\\t[stdout.write(str(x) + ' ') for x in arr]\\n\\tcout('')\\n\\ndef find_lt(a, x):\\n\\ti = bisect_left(a, x)\\n\\tif i:\\n\\t\\treturn a[i - 1]\\n\\traise ValueError\\n\\ndef find_gt(a, x):\\n\\ti = bisect_right(a, x)\\n\\tif i != len(a):\\n\\t\\treturn a[i]\\n\\traise ValueError\\n\\ndef dist(x, y):\\n\\treturn math.sqrt(x * x + y * y)\\nn = int(input())\\narr = list(map(int, input().split()))\\nmax_val = 0\\nfor el in arr:\\n\\tmax_val = max(max_val, el)\\ncnt = [0] * (max_val + 1)\\nfor el in arr:\\n\\tcnt[el] += 1\\n(fa, fb) = (0, 0)\\nfa = cnt[0]\\nfb = cnt[1]\\nfc = 0\\nfor i in range(2, max_val + 1):\\n\\tfc = max(fa + i * cnt[i], fb)\\n\\t(fb, fa) = (fc, fb)\\nprint(fc)\\n\", \"n = int(input())\\nq = [0] * (10 ** 5 + 1)\\nz = list(map(int, input().split()))\\nc = max(z)\\nfor i in z:\\n\\tq[i] += i\\ndp = [q[0]] + [q[1]] + (c - 1) * [0]\\nfor i in range(2, c + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + q[i])\\nprint(dp[-1])\\n\", \"import os\\nimport sys\\nfrom math import *\\nfrom collections import *\\nfrom bisect import *\\nfrom io import BytesIO, IOBase\\n\\ndef vsInput():\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef value():\\n\\treturn tuple(map(int, input().split()))\\n\\ndef array():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef Int():\\n\\treturn int(input())\\n\\ndef Str():\\n\\treturn input()\\n\\ndef arrayS():\\n\\treturn [i for i in input().split()]\\n\\ndef fun(a):\\n\\tif a[1] < b[1]:\\n\\t\\treturn a[1]\\n\\telif a[1] > b[1]:\\n\\t\\treturn b[1]\\n\\telif a[0] > b[0]:\\n\\t\\treturn b[1]\\n\\telse:\\n\\t\\treturn b[1]\\nn = Int()\\na = array()\\nd = Counter(a)\\nans = defaultdict(int)\\nans[0] = 0\\nans[1] = d[1]\\nres = 0\\nn = max(a)\\nfor i in range(2, n + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * d[i])\\nprint(ans[n])\\n\", \"import math\\nimport copy\\nfrom collections import Counter\\na = input()\\nb = [int(q) for q in input().split()]\\nc = Counter(b)\\nm = max(c)\\ndp = list(range(m + 1))\\ndp[1] = c[1]\\ndp[0] = 0\\nfor i in range(2, m + 1):\\n\\tdp[i] = max(dp[i - 2] + c[i] * i, dp[i - 1])\\nprint(dp[-1])\\n\", \"n = int(input())\\ndata = [int(i) for i in input().split()]\\ncard = [0] * (max(data) + 1)\\nfor i in range(n):\\n\\tcard[data[i]] += 1\\n\\ndef cal(x):\\n\\tt = [0, card[1]]\\n\\tfor j in range(2, max(data) + 1):\\n\\t\\tt.append(max(t[j - 1], t[j - 2] + card[j] * j))\\n\\treturn t[j]\\nprint(cal(max(data)))\\n\", \"from collections import Counter\\nn = int(input())\\nal = list(map(int, input().split()))\\ncnt = Counter(al)\\ndp = [float('-inf')] * (max(cnt) + 1)\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor i in range(2, max(cnt) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[max(cnt)])\\n\", \"l = 10 ** 5 + 2\\nn = int(input())\\na = map(int, input().split())\\na = list(a)\\ncnt = [0] * l\\nfor x in a:\\n\\tcnt[x] += x\\nm = [0] * l\\nm[1] = cnt[1]\\nfor x in range(2, l):\\n\\tm[x] = max(m[x - 1], m[x - 2] + cnt[x])\\nprint(m[l - 1])\\n\", \"n = int(input())\\na = 100001 * [0]\\ns = 100001 * [0]\\nfor i in list(map(int, input().split())):\\n\\ta[i] += 1\\n\\ts[1] = a[1]\\nfor i in range(2, 100001):\\n\\ts[i] = max(s[i - 1], s[i - 2] + a[i] * i)\\nprint(s[100000])\\n\", \"def find(l):\\n\\tdp = [0] * (max(a) + 2)\\n\\tfor i in range(2, max(a) + 2):\\n\\t\\tdp[i] = max(l[i - 1] * (i - 1) + dp[i - 2], dp[i - 1])\\n\\treturn dp[i]\\nn = int(input())\\na = [int(i) for i in input().split()]\\nl = [0] * (10 ** 5 + 5)\\nfor i in a:\\n\\tl[i] += 1\\nprint(find(l))\\n\", \"from sys import stdin, stdout\\nfrom math import gcd, sqrt, factorial\\nfrom collections import deque, defaultdict\\ninput = stdin.readline\\nR = lambda : map(int, input().split())\\nI = lambda : int(input())\\nS = lambda : input().rstrip('\\\\n')\\nL = lambda : list(R())\\nP = lambda x: stdout.write(x)\\nlcm = lambda x, y: x * y // gcd(x, y)\\nhg = lambda x, y: (y + x - 1) // x * x\\npw = lambda x: 0 if x == 1 else 1 + pw(x // 2)\\nchk = lambda x: chk(x // 2) if not x % 2 else True if x == 1 else False\\nsm = lambda x: (x ** 2 + x) // 2\\nN = 10 ** 9 + 7\\nn = I()\\na = [0] * (10 ** 5 + 100)\\nmx = 0\\nfor i in R():\\n\\ta[i] += i\\n\\tmx = max(mx, i)\\nans = 0\\nv = [0] * (mx + 1)\\nv[1] = a[1]\\nfor i in range(2, mx + 1):\\n\\tv[i] = max(a[i] + v[i - 2], v[i - 1])\\nprint(v[mx])\\n\", \"def fun(i):\\n\\tif i == 0:\\n\\t\\treturn 0\\n\\telif i == 1:\\n\\t\\treturn l.count(1)\\n\\telse:\\n\\t\\treturn max(l1[i - 1], l1[i - 2] + i * c[i])\\n\\ndef count():\\n\\tfor i in l:\\n\\t\\tc[i] = c[i] + 1\\nn = int(input())\\nl = input().split()\\nl = list(map(int, l))\\nc = [0] * (max(l) + 1)\\nl1 = []\\ncount()\\nfor i in range(max(l) + 1):\\n\\td = fun(i)\\n\\tl1.append(d)\\nprint(d)\\n\", \"import collections\\n\\ndef deleteAndEarn(nums):\\n\\tif not nums:\\n\\t\\treturn 0\\n\\tmapping = collections.Counter(nums)\\n\\tn = max(nums)\\n\\t(prev, curr) = (0, mapping[1])\\n\\tfor i in range(2, n + 1):\\n\\t\\t(prev, curr) = (curr, max(curr, prev + mapping[i] * i))\\n\\treturn curr\\nn = int(input())\\na = list(map(int, input().split()))\\nprint(deleteAndEarn(a))\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nbrr = [0] * 100007\\nfor i in arr:\\n\\tbrr[i] = brr[i] + i\\nn = len(brr)\\nfor i in range(1, n - 2):\\n\\tbrr[i] = max(brr[i] + brr[i - 2], brr[i - 1])\\nprint(brr[len(brr) - 3])\\n\", \"read = lambda : map(int, input().split())\\nn = int(input())\\na = list(read())\\nm = max(a) + 1\\nc = [0] * m\\nfor i in a:\\n\\tc[i] += 1\\np = [i * c[i] for i in range(m)]\\ndp = [0] * m\\n(dp[0], dp[1]) = (0, p[1])\\nfor i in range(2, m):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + p[i])\\nans = dp[m - 1]\\nprint(ans)\\n\", \"from collections import Counter\\nn = int(input())\\narr = list(map(int, input().split()))\\nc = Counter(arr)\\narr = list(set(arr))\\nans = 0\\ndp = [0] * (max(arr) + 1)\\nfor i in range(1, max(arr) + 1):\\n\\tif i in c:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + c[i] * i)\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1]\\nprint(dp[-1])\\n\", \"input()\\nd = [0] * 1000001\\nfor x in map(int, input().split()):\\n\\td[x] += x\\na = b = 0\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"from collections import Counter\\nn = input()\\n_input = list(map(int, input().split()))\\ncounter = Counter(_input)\\nkeys = counter.keys()\\nvalues = counter.values()\\n_list = [0] * (max(keys) + 1)\\nd = []\\nfor j in range(len(_list)):\\n\\td += [[0, 0]]\\nfor (key, value) in counter.items():\\n\\t_list[key] = value\\nd[1][0] = 0\\nd[1][1] = _list[1]\\ni = 2\\nwhile i < len(_list):\\n\\td[i][0] = max(d[i - 1][0], d[i - 1][1])\\n\\td[i][1] = d[i - 1][0] + _list[i] * i\\n\\ti += 1\\nprint(max((d[len(_list) - 1][0], d[len(_list) - 1][1])))\\n\", \"def main():\\n\\tfrom sys import stdin\\n\\tfrom collections import Counter\\n\\ttokens = map(int, stdin.read().split())\\n\\tN = next(tokens)\\n\\tcounter = Counter(tokens)\\n\\tbiggest_element = max(counter.keys()) + 1\\n\\tdp = [0] * biggest_element\\n\\tdp[1] = counter[1]\\n\\tfor i in range(2, biggest_element):\\n\\t\\tdp[i] = max(dp[i - 1], i * counter[i] + dp[i - 2])\\n\\tprint(dp[biggest_element - 1])\\nmain()\\n\", \"from collections import Counter, defaultdict\\nn = int(input())\\nls = list(map(int, input().split()))\\ndp = [0] * (10 ** 5 + 1)\\nfor x in ls:\\n\\tdp[x] += x\\nlast = cur = 0\\nfor i in range(2, len(dp)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + dp[i])\\nprint(dp[-1])\\n\", \"N = 100005\\nx = [0] * N\\ninput()\\nfor i in map(int, input().split(' ')):\\n\\tx[i] += 1\\nfor i in range(2, N):\\n\\tx[i] = max(x[i - 1], x[i] * i + x[i - 2])\\nprint(x[N - 1])\\n\", \"input()\\nlist_ = [0] * (1 * 10 ** 5 + 1)\\nfor x in map(int, input().split()):\\n\\tlist_[x] += x\\na = b = 0\\nfor i in list_:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nm = max(a)\\nnum = [[0, 0, 0] for i in range(m)]\\nfor i in range(0, n):\\n\\tnum[a[i] - 1][0] += 1\\nnum[0][2] = num[0][0]\\nnum[0][1] = 0\\nfor q in range(1, m):\\n\\tnum[q][1] = max(num[q - 1][1], num[q - 1][2])\\n\\tnum[q][2] = num[q - 1][1] + num[q][0] * (q + 1)\\nscore = max(num[m - 1][1], num[m - 1][2])\\nprint(score)\\n\", \"from collections import Counter\\nn = input()\\na = list(map(int, input().split(' ')))\\nf = Counter(a)\\nfi = {0: 0, 1: f[1]}\\nj = max(a)\\nfor i in range(2, j + 1):\\n\\tfi[i] = max(fi[i - 1], fi[i - 2] + f[i] * i)\\nprint(fi[j])\\n\", \"import bisect\\nimport os, sys, atexit\\nfrom io import BytesIO, StringIO\\ndp = [-1] * 100001\\n\\ndef calculate(i):\\n\\tif dp[i] != -1:\\n\\t\\treturn dp[i]\\n\\tif i < 0:\\n\\t\\treturn 0\\n\\tif i == 0:\\n\\t\\tdp[i] = arr[i]\\n\\telse:\\n\\t\\tleftindex = bisect.bisect_left(arr, arr[i])\\n\\t\\tif leftindex == 0 or arr[leftindex - 1] != arr[i] - 1:\\n\\t\\t\\tdp[i] = arr[i] * (i - leftindex + 1) + calculate(leftindex - 1)\\n\\t\\telse:\\n\\t\\t\\tleftestIndex = bisect.bisect_left(arr, arr[leftindex - 1])\\n\\t\\t\\tdp[i] = max(arr[i] * (i - leftindex + 1) + calculate(leftestIndex - 1), calculate(leftindex - 1))\\n\\treturn dp[i]\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tarr.sort()\\n\\tarr.append(1000000)\\n\\t(dp[1], dp[0]) = (arr[0], 0)\\n\\tfor i in range(1, n):\\n\\t\\tif arr[i] != arr[i + 1]:\\n\\t\\t\\tleftindex = bisect.bisect_left(arr, arr[i])\\n\\t\\t\\tif arr[leftindex - 1] != arr[i] - 1:\\n\\t\\t\\t\\tdp[i + 1] = arr[i] * (i - leftindex + 1) + dp[leftindex]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tleftestIndex = bisect.bisect_left(arr, arr[leftindex - 1])\\n\\t\\t\\t\\tdp[i + 1] = max(arr[i] * (i - leftindex + 1) + dp[leftestIndex], dp[leftindex])\\n\\tprint(dp[n])\\ntry:\\n\\tsolve()\\nexcept Exception as e:\\n\\tprint(e)\\n\", \"def Main():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tarr.sort()\\n\\tpp = dict()\\n\\tfor i in range(n):\\n\\t\\tval = pp.get(arr[i], 0)\\n\\t\\tpp[arr[i]] = val + 1\\n\\tans = 0\\n\\ta = [0] * (arr[n - 1] + 1)\\n\\tfor key in range(1, len(a)):\\n\\t\\tval = pp.get(key, 0)\\n\\t\\ta[key] = a[key - 2] + key * val\\n\\t\\tif a[key] < a[key - 1]:\\n\\t\\t\\ta[key] = a[key - 1]\\n\\t\\tif a[key] > ans:\\n\\t\\t\\tans = a[key]\\n\\tprint(ans)\\nMain()\\n\", \"input()\\na = list(map(int, input().strip().split()))\\nd = dict()\\nfor i in range(len(a)):\\n\\tif d.get(a[i]):\\n\\t\\td[a[i]] += 1\\n\\telse:\\n\\t\\td[a[i]] = 1\\nd2 = dict()\\nd2[0] = 0\\nd2[1] = d.get(1, 0)\\nspius = 100001\\nfor i in range(2, spius):\\n\\td2[i] = max(d2.get(i - 1, 0), d2.get(i - 2, 0) + i * d.get(i, 0))\\nprint(d2[spius - 1])\\n\", \"from collections import Counter\\nn = int(input())\\na = [int(i) for i in input().split()]\\nst = set(a)\\nd = Counter(a)\\nval = []\\nfor i in d:\\n\\tval.append([i, d[i] * i])\\nval.sort()\\nstore = [[]]\\nfor i in range(len(val)):\\n\\tstore[-1].append(val[i])\\n\\tif i + 1 < len(val) and val[i + 1][0] != val[i][0] + 1:\\n\\t\\tstore.append([])\\ndp = []\\nans = 0\\nfor i in store:\\n\\tdp.append([0, 0])\\n\\tfor j in i:\\n\\t\\tdp[-1].append(max(dp[-1][-1], j[1] + dp[-1][-2]))\\nfor i in dp:\\n\\tans += max(i)\\nprint(ans)\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\nm = max(L)\\nlim = m - 1\\nT = [0 for _ in range(m + 1)]\\nfor k in range(n):\\n\\tT[L[k]] += 1\\nR = [0 for _ in range(m + 1)]\\nP = [0 for _ in range(m)]\\nR[m] = T[m] * m\\nR[m - 1] = T[m - 1] * (m - 1)\\nfor k in range(m - 2, 0, -1):\\n\\tif P[k + 1]:\\n\\t\\tR[k] = max(R[k + 1:lim + 2]) + T[k] * k\\n\\t\\tlim = k\\n\\telse:\\n\\t\\ttemp = max(R[k + 2:lim + 2]) + T[k] * k\\n\\t\\tif temp >= R[k + 1]:\\n\\t\\t\\tR[k] = temp\\n\\t\\t\\tlim = k + 1\\n\\t\\telse:\\n\\t\\t\\tP[k] = 1\\n\\t\\t\\tR[k] = R[k + 1]\\nprint(max(R))\\n\", \"import math\\nn = int(input())\\nss = input()\\nlist1 = []\\nlist3 = []\\nm = 0\\nlist1.extend([int(i) for i in ss.split()])\\nmax1 = max(list1)\\nchart = [0] * max1\\nfor i in range(n):\\n\\tchart[list1[i] - 1] += 1\\nfor i in range(max1):\\n\\tlist3.append((i + 1) * chart[i])\\ndifficult = [0] * max1\\ndifficult[0] = list3[0]\\ndifficult[1] = max(list3[0], list3[1])\\nfor i in range(2, max1):\\n\\tdifficult[i] = max(difficult[i - 1], difficult[i - 2] + list3[i])\\nprint(difficult[max1 - 1])\\n\", \"num = int(input())\\nexample = [int(i) for i in input().split()]\\nmid = max(example)\\nsoc = (mid + 1) * [0]\\nfor i in range(num):\\n\\tsoc[example[i]] += 1\\nf = (mid + 1) * [0]\\nf[0] = 0\\nf[1] = soc[1]\\nfor i in range(2, mid + 1):\\n\\tif f[i - 1] > f[i - 2] + soc[i] * i:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + soc[i] * i\\nprint(f[mid])\\n\", \"a = int(input())\\nb = list(map(int, input().split()))\\nc = [0] * 100015\\nfor i in range(a):\\n\\tc[b[i]] += b[i]\\nd = 0\\ne = 0\\nf = 0\\ni = 1\\ng = 0\\nwhile i < 100005:\\n\\tif not g:\\n\\t\\te += c[i]\\n\\t\\tf += c[i + 1]\\n\\t\\tif e >= f:\\n\\t\\t\\td += e\\n\\t\\t\\te = 0\\n\\t\\t\\tf = 0\\n\\t\\t\\ti += 2\\n\\t\\telse:\\n\\t\\t\\te += c[i + 2]\\n\\t\\t\\tif f >= e:\\n\\t\\t\\t\\td += f\\n\\t\\t\\t\\te = 0\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\t\\ti += 3\\n\\t\\t\\t\\tg = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tf += c[i + 3]\\n\\t\\t\\t\\tif e >= f:\\n\\t\\t\\t\\t\\td += e\\n\\t\\t\\t\\t\\te = 0\\n\\t\\t\\t\\t\\tf = 0\\n\\t\\t\\t\\t\\tg = 0\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tg = 1\\n\\t\\t\\t\\ti += 4\\n\\telse:\\n\\t\\te += c[i]\\n\\t\\tif f >= e:\\n\\t\\t\\td += f\\n\\t\\t\\te = 0\\n\\t\\t\\tf = 0\\n\\t\\t\\ti += 1\\n\\t\\t\\tg = 0\\n\\t\\telse:\\n\\t\\t\\tf += c[i + 1]\\n\\t\\t\\tif e >= f:\\n\\t\\t\\t\\td += e\\n\\t\\t\\t\\te = 0\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\t\\tg = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tg = 1\\n\\t\\t\\ti += 2\\nprint(d + max(e, f))\\n\", \"n = int(input())\\nl = input().split()\\nli = [int(i) for i in l]\\narr = [0 for i in range(10 ** 5)]\\nfor i in li:\\n\\tarr[i - 1] += 1\\ndp = [0 for i in range(10 ** 5 + 1)]\\ndp[0] = 0\\ndp[1] = arr[0]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 2] + arr[i - 1] * i, dp[i - 1])\\nprint(dp[10 ** 5])\\n\", \"from collections import Counter\\ninput()\\nnums = Counter((int(x) for x in input().split()))\\npoints = {n: n * nums[n] for n in nums}\\na = b = 0\\nfor n in range(max(points) + 1):\\n\\t(a, b) = (max(a, b + points.get(n, 0)), a)\\nprint(a)\\n\", \"n = int(input())\\nlist1 = [int(x) for x in input().split()]\\nl = max(list1)\\nf = [0] * (l + 1)\\ng = []\\nfor i in list1:\\n\\tf[i] += i\\nfor i in range(0, l + 1):\\n\\tg.append([0] * 2)\\ng[l][1] = f[l]\\ng[l][0] = 0\\nfor i in range(l - 1, 0, -1):\\n\\tg[i][0] = max(g[i + 1][1], g[i + 1][0])\\n\\tg[i][1] = g[i + 1][0] + f[i]\\nprint(max(g[1][1], g[1][0]))\\n\", \"q = input()\\nn = [int(i) for i in input().split()]\\nn.sort()\\nl = []\\np = [0]\\na = n[0]\\nb = n[-1]\\ns = 0\\nfor i in n:\\n\\tif i == a:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tl.append(s)\\n\\t\\ts = 1\\n\\t\\twhile i > a + 1:\\n\\t\\t\\tl.append(0)\\n\\t\\t\\ta += 1\\n\\t\\ta += 1\\nl += [s, 0]\\nl.reverse()\\np.append(b * l[1])\\nif len(l) > 2:\\n\\tfor i in range(b - n[0]):\\n\\t\\tp.append(max(p[i] + (b - i - 1) * l[i + 2], p[i + 1]))\\n\\tprint(p[-1])\\nelse:\\n\\tprint(b * l[-1])\\n\", \"n = input()\\nn = int(n)\\n_ = input()\\na = _.split()\\na = [int(_) for _ in a]\\ncounter = dict()\\nfor i in a:\\n\\tif i in counter:\\n\\t\\tcounter[i] = counter[i] + 1\\n\\telse:\\n\\t\\tcounter[i] = 1\\nnum_list = [(num, num * value) for (num, value) in counter.items()]\\nnum_list = sorted(num_list, key=lambda num: num[0], reverse=False)\\nvalue_list = [i[0] for i in num_list]\\nsum_list = [i[1] for i in num_list]\\n\\ndef boredom(start, end):\\n\\tleng = end - start\\n\\tif leng < 0:\\n\\t\\treturn 0\\n\\telif leng == 0:\\n\\t\\treturn sum_list[start]\\n\\telif leng == 1:\\n\\t\\treturn sum_list[start] if sum_list[start] > sum_list[end] else sum_list[end]\\n\\telse:\\n\\t\\thalf = (start + end) // 2\\n\\t\\tone = sum_list[half] + boredom(start, half - 2) + boredom(half + 2, end)\\n\\t\\ttwo = boredom(start, half - 1) + boredom(half + 1, end)\\n\\t\\treturn one if one > two else two\\nparse = 0\\nanswer = 0\\nnum_len = len(num_list)\\nwhile parse < num_len:\\n\\tprimer = value_list[parse] - 1\\n\\t_start = parse\\n\\t_end = parse - 1\\n\\tfor i in range(parse, num_len):\\n\\t\\tif value_list[i] == primer + 1:\\n\\t\\t\\tprimer = primer + 1\\n\\t\\t\\t_end = _end + 1\\n\\t\\t\\tparse = parse + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif _start == _end:\\n\\t\\tanswer = answer + sum_list[_start]\\n\\telif _start + 1 == _end:\\n\\t\\tanswer = answer + max(sum_list[_start], sum_list[_end])\\n\\telse:\\n\\t\\tn_1 = sum_list[_start]\\n\\t\\tn_2 = max(sum_list[_start], sum_list[_start + 1])\\n\\t\\ttemp = 0\\n\\t\\tfor i in range(_start + 2, _end + 1):\\n\\t\\t\\ttemp = max(n_1 + sum_list[i], n_2)\\n\\t\\t\\tn_1 = n_2\\n\\t\\t\\tn_2 = temp\\n\\t\\tanswer = answer + temp\\nprint(answer)\\n\", \"import sys\\nimport math\\nimport operator as op\\nfrom functools import reduce\\n\\ndef read_line():\\n\\treturn sys.stdin.readline()[:-1]\\n\\ndef read_int():\\n\\treturn int(sys.stdin.readline())\\n\\ndef read_int_line():\\n\\treturn [int(v) for v in sys.stdin.readline().split()]\\n\\ndef read_float_line():\\n\\treturn [float(v) for v in sys.stdin.readline().split()]\\n\\ndef ncr(n, r):\\n\\tr = min(r, n - r)\\n\\tnumer = reduce(op.mul, range(n, n - r, -1), 1)\\n\\tdenom = reduce(op.mul, range(1, r + 1), 1)\\n\\treturn numer / denom\\nt = 1\\nfor i in range(t):\\n\\tn = read_int()\\n\\ta = read_int_line()\\n\\tl = {}\\n\\tfor i in range(n):\\n\\t\\tif a[i] in l:\\n\\t\\t\\tl[a[i]] += 1\\n\\t\\telse:\\n\\t\\t\\tl[a[i]] = 1\\n\\tb = []\\n\\tfor i in l:\\n\\t\\tb.append([i, l[i]])\\n\\tb = sorted(b, key=lambda x: x[0])\\n\\tn = len(b)\\n\\tdp = [0] * n\\n\\tdp[0] = b[0][0] * b[0][1]\\n\\tfor i in range(1, n):\\n\\t\\tif b[i][0] == b[i - 1][0] + 1:\\n\\t\\t\\tif i > 1:\\n\\t\\t\\t\\tdp[i] = max(b[i][0] * b[i][1] + dp[i - 2], dp[i - 1])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp[i] = max(b[i][0] * b[i][1], dp[i - 1])\\n\\t\\telse:\\n\\t\\t\\tdp[i] = b[i][0] * b[i][1] + dp[i - 1]\\n\\tans = dp[n - 1]\\n\\tprint(ans)\\n\", \"n = int(input())\\nlst = list(map(int, input().split()))\\n(d, a, length) = ({}, [], 0)\\nfor (i, x) in enumerate(lst):\\n\\tif d.get(x) == None:\\n\\t\\td[x] = 0\\n\\t\\ta.append(x)\\n\\t\\tlength += 1\\n\\td[x] += 1\\na.sort()\\n(res, k) = ([a[0] * d[a[0]]], 1)\\nresult = 0\\nfor i in range(1, length):\\n\\tx = a[i] * d[a[i]]\\n\\tif a[i] - a[i - 1] == 1:\\n\\t\\tif k == 1:\\n\\t\\t\\tres.append(x)\\n\\t\\telif k == 2:\\n\\t\\t\\tres.append(res[0] + x)\\n\\t\\telse:\\n\\t\\t\\tres.append(max(res[k - 2], res[k - 3]) + x)\\n\\telse:\\n\\t\\tif k == 1:\\n\\t\\t\\tresult += res[0]\\n\\t\\telse:\\n\\t\\t\\tresult += max(res[k - 1], res[k - 2])\\n\\t\\t(res, k) = ([x], 0)\\n\\tk += 1\\nif k == 1:\\n\\tresult += res[0]\\nelse:\\n\\tresult += max(res[k - 1], res[k - 2])\\nprint(result)\\n\", \"import collections\\nn = input()\\nl = map(int, input().split())\\nd = dict()\\nfor i in l:\\n\\tif i not in d:\\n\\t\\td[i] = 0\\n\\td[i] += i\\nod = collections.OrderedDict(sorted(d.items()))\\nsum_new = 0\\nsum_old = 0\\nfirst = True\\nfor (k, v) in od.items():\\n\\tif first:\\n\\t\\tsum_new = v\\n\\t\\tfirst = False\\n\\t\\tcontinue\\n\\tif k - 1 in od:\\n\\t\\tif sum_old + v > sum_new:\\n\\t\\t\\ttmp = sum_new\\n\\t\\t\\tsum_new = sum_old + v\\n\\t\\t\\tsum_old = tmp\\n\\t\\telse:\\n\\t\\t\\tsum_old = sum_new\\n\\telse:\\n\\t\\tmx = max(sum_old, sum_new)\\n\\t\\tsum_old = mx\\n\\t\\tsum_new = mx\\n\\t\\tsum_new += v\\nprint(sum_new)\\n\", \"n = int(input())\\ns = input().split(' ')\\na = [0] * 100005\\nmx = 1\\nfor i in range(n):\\n\\tk = int(s[i])\\n\\tif k > mx:\\n\\t\\tmx = k\\n\\ta[k] += 1\\ndp = [0] * 100005\\ndp[1] = a[1]\\nj = 2\\nwhile j <= mx:\\n\\tif a[j] == 0:\\n\\t\\tdp[j] = dp[j - 1]\\n\\telif a[j - 1] == 0:\\n\\t\\tdp[j] = j * a[j] + dp[j - 2]\\n\\telse:\\n\\t\\tdp[j] = max(dp[j - 1], j * a[j] + dp[j - 2])\\n\\tj += 1\\nprint(dp[mx])\\n\", \"a = input()\\nb = [int(i) for i in input().split()]\\nline = [0] * 100000\\nfor i in b:\\n\\tline[i - 1] = line[i - 1] + 1\\ndp = [0] * 100000\\ndp[0] = line[0]\\ndp[1] = max(line[1] * 2, dp[0])\\nfor i in range(2, 100000):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + line[i] * (i + 1))\\nprint(max(dp))\\n\", \"from collections import Counter\\n\\ndef main():\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tm = max(A)\\n\\tc = Counter(A)\\n\\tdp = [0] * (m + 1)\\n\\tdp[1] = c[1]\\n\\tfor i in range(2, m + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\n\\tprint(dp[m])\\nmain()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncnt = [0] * (10 ** 5 + 1)\\nfor i in range(n):\\n\\tcnt[a[i]] += 1\\nf = [0] * (10 ** 5 + 1)\\nf[0] = 0\\nf[1] = cnt[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + cnt[i] * i)\\nprint(f[10 ** 5])\\n\", \"import sys\\nimport math as mt\\ninput = sys.stdin.buffer.readline\\nt = 1\\nfor __ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmaxi = max(l[:])\\n\\tl1 = [0] * (maxi + 1)\\n\\tfor i in l:\\n\\t\\tl1[i] += i\\n\\tfor i in range(maxi - 2, -1, -1):\\n\\t\\tif i == maxi - 2:\\n\\t\\t\\tl1[i] += l1[i + 2]\\n\\t\\telse:\\n\\t\\t\\tl1[i] += max(l1[i + 2], l1[i + 3])\\n\\tprint(max(l1[:]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nN = 100001\\nb = [0] * (n + 3)\\nc = [0] * (n + 3)\\nl = 2\\ni = 0\\nwhile i < n:\\n\\td = 0\\n\\tj = i\\n\\twhile j < n and a[i] == a[j]:\\n\\t\\td += a[j]\\n\\t\\tj += 1\\n\\tb[l] = a[i]\\n\\tif abs(b[l] - b[l - 1]) > 1:\\n\\t\\tc[l] = d + c[l - 1]\\n\\telse:\\n\\t\\tc[l] = max(c[l - 1], c[l - 2] + d)\\n\\tl += 1\\n\\ti = j\\nprint(c[l - 1])\\n\", \"dp = {}\\n\\ndef remove(r):\\n\\tif r is None:\\n\\t\\treturn 0\\n\\treturn r[0] * r[1]\\n\\ndef DP(a, n):\\n\\tglobal dp\\n\\tdp[0] = remove(a[0])\\n\\tfor i in range(1, n + 1):\\n\\t\\tif i == 1:\\n\\t\\t\\tdp[i] = max(dp[i - 1], remove(a[i]))\\n\\t\\telse:\\n\\t\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + remove(a[i]))\\n\\treturn dp[n]\\n\\ndef parse(a):\\n\\ta.sort()\\n\\ta = list(a)\\n\\tsequences_list = []\\n\\tsequence = []\\n\\tfor i in range(len(a)):\\n\\t\\tif i == 0:\\n\\t\\t\\tsequence.append(a[i])\\n\\t\\telif a[i - 1][0] + 1 == a[i][0]:\\n\\t\\t\\tsequence.append(a[i])\\n\\t\\telse:\\n\\t\\t\\tif len(sequence) > 0:\\n\\t\\t\\t\\tsequences_list.append(sequence)\\n\\t\\t\\tsequence = [a[i]]\\n\\tif len(sequence) > 0:\\n\\t\\tsequences_list.append(sequence)\\n\\treturn sequences_list\\n\\ndef main():\\n\\ta = {}\\n\\tn = input()\\n\\tdata = list(map(int, input().split()))\\n\\tfor i in data:\\n\\t\\tif i in a:\\n\\t\\t\\ta[i] += 1\\n\\t\\telse:\\n\\t\\t\\ta[i] = 1\\n\\ta = list(a.items())\\n\\tsequences_list = parse(a)\\n\\ttotal_value = 0\\n\\tfor i in sequences_list:\\n\\t\\ttotal_value += DP(i, len(i) - 1)\\n\\tprint(total_value)\\nmain()\\n\", \"from sys import stdin, stdout\\ninints = lambda : [int(x) for x in stdin.readline().split()]\\nfastwrite = lambda s: stdout.write(str(s) + '\\\\n')\\nirange = lambda x, y: range(x, y + 1)\\n(n,) = inints()\\ncnt = [0] * 1000001\\nm = 0\\nfor a in inints():\\n\\tcnt[a] += 1\\n\\tm = max(m, a)\\nf = [0] * (m + 1)\\nf[0] = 0\\nf[1] = cnt[1]\\nq = 0\\nfor i in irange(2, m):\\n\\tq = max(f[i - 1], f[i - 2] + cnt[i] * i)\\n\\tf[i] = q\\nfastwrite(q)\\n\", \"n = int(input())\\nnumbers = input().split()\\nnumbers = [int(i) for i in numbers]\\ndic = {}\\nfor i in range(1, 100001):\\n\\tdic[i] = 0\\nfor number in numbers:\\n\\tdic[number] += number\\ndic[3] += dic[1]\\nfor i in range(3, 100000):\\n\\tdic[i + 1] += max(dic[i - 2], dic[i - 1])\\nprint(max(dic[99999], dic[100000]))\\n\", \"n = int(input())\\nlis = list(map(int, input().split()))\\nhas = [0] * 100100\\nfor i in lis:\\n\\thas[i] += 1\\ndp = [0] * 100100\\nc = 0\\ndp[1] = has[1]\\nfor i in range(2, 100002):\\n\\tdp[i] = max(dp[i - 2] + has[i] * i, dp[i - 1])\\nprint(max(dp))\\n\", \"import sys\\nn = int(input())\\ns = input()\\ns = s.split()\\nma = 0\\nfor i in s:\\n\\tt = int(i)\\n\\tif t > ma:\\n\\t\\tma = t\\na = [0] * (ma + 1)\\nfor i in s:\\n\\tt = int(i)\\n\\ta[t] += t\\na[2] = max(a[1], a[2])\\nans = a[2]\\nfor i in range(3, ma + 1):\\n\\ta[i] = max(a[i - 2] + a[i], a[i - 1])\\n\\tif a[i] > ans:\\n\\t\\tans = a[i]\\nprint(ans)\\n\", \"y = input()\\nx = [int(x) for x in input().split()]\\ncnt = [0] * 1000002\\nmaxNum = 0\\nans = 0\\nfor i in x:\\n\\tcnt[i] += i\\n\\tif i > maxNum:\\n\\t\\tmaxNum = i\\nfor i in range(2, maxNum + 1):\\n\\tv1 = cnt[i - 1]\\n\\tv2 = cnt[i - 2] + cnt[i]\\n\\tcnt[i] = max(v1, v2)\\n\\tans = max(ans, cnt[i])\\nprint(ans)\\n\", \"en = list(map(int, input().split()))\\nen2 = list(map(int, input().split()))\\nn = en[0]\\ndic = {}\\nmaxv = 0\\nfor i in en2:\\n\\tif i > maxv:\\n\\t\\tmaxv = i\\n\\tif i not in dic:\\n\\t\\tdic[i] = 1\\n\\telse:\\n\\t\\tdic[i] += 1\\ndp = [0] * (maxv + 1)\\ndp[0] = 0\\nfor j in range(0, maxv + 1):\\n\\tif j not in dic:\\n\\t\\tres = max(dp[j - 1], dp[j - 2])\\n\\telse:\\n\\t\\tres = max(dp[j - 1], dic[j] * j + dp[j - 2])\\n\\tdp[j] = res\\nprint(dp[maxv])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nocur = [0] * 100002\\nfor x in a:\\n\\tocur[x] += 1\\nlis = [0, ocur[1]]\\nfor i in range(2, 100001):\\n\\tlis.append(max(lis[-1], lis[-2] + ocur[i] * i))\\nprint(lis[-1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nd = [0 for i in range(100010)]\\nfor _ in a:\\n\\td[_] += _\\ndp = [0 for i in range(100010)]\\ndp[1] = d[1]\\nfor i in range(2, 100010):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i])\\nprint(dp[-1])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\na = [0] * 100002\\nfor i in l:\\n\\ta[i] += i\\nj = a[1]\\nk = a[2]\\nfor i in range(3, 100002):\\n\\tx = max(k - a[i - 1] + a[i], j + a[i])\\n\\tj = k\\n\\tk = x\\nprint(max(j, k))\\n\", \"n = int(input())\\nstr1 = [int(k) for k in input().split()]\\nlist = [0] * 100001\\nfor k in str1:\\n\\tlist[k] += k\\nt = 0\\nb = 0\\no = 0\\nfor k in list:\\n\\tb = max(o, t + k)\\n\\tt = o\\n\\to = b\\nprint(b)\\n\", \"import sys, threading\\nsys.setrecursionlimit(3 * 10 ** 6)\\nthreading.stack_size(2 ** 27)\\nn = int(input())\\na = list(map(int, input().split()))\\nN = 10 ** 5 + 1\\ncount = [0] * N\\nfor i in range(n):\\n\\tcount[a[i]] += 1\\ndp = [0] * N\\ndp[1] = count[1]\\nfor i in range(2, N):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(max(dp))\\n\", \"input()\\nv = [0] * 2 ** 17\\nfor i in input().split():\\n\\tv[int(i)] += 1\\nfor i in range(2, 2 ** 17):\\n\\tv[i] = max(v[i - 1], v[i - 2] + v[i] * i)\\nprint(v[-1])\\n\", \"from bisect import bisect_left as bl, bisect_right as br, insort\\nimport sys\\nimport heapq\\nfrom math import *\\nfrom collections import defaultdict as dd, deque\\n\\ndef data():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mdata():\\n\\treturn map(int, data().split())\\nsys.setrecursionlimit(100000)\\n(n,) = mdata()\\nA = list(mdata())\\nd = dd(int)\\nfor i in A:\\n\\td[i] += i\\ndp = [0] * 100005\\ndp[1] = d[1]\\nfor i in range(2, 100005):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i])\\nprint(dp[-1])\\n\", \"from collections import Counter\\nimport itertools\\nfrom functools import lru_cache\\nimport sys\\nimport math\\n\\ndef helper():\\n\\tpass\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split(' ')))\\n\\tarr.sort()\\n\\tcount = Counter(arr)\\n\\tnums = sorted(count.keys())\\n\\t(prev, curr) = (0, nums[0] * count[nums[0]])\\n\\tfor i in range(1, len(nums)):\\n\\t\\tif nums[i] - nums[i - 1] != 1:\\n\\t\\t\\t(prev, curr) = (curr, curr + nums[i] * count[nums[i]])\\n\\t\\telse:\\n\\t\\t\\t(prev, curr) = (curr, max(curr, prev + nums[i] * count[nums[i]]))\\n\\tprint(curr)\\nt = 1\\nfor _ in range(t):\\n\\tsolve()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncnt = [0] * (10 ** 5 + 1)\\nfor i in a:\\n\\tcnt[i] += 1\\n\\ndef solve(n):\\n\\tfor i in range(2, 10 ** 5 + 1):\\n\\t\\tcnt[i] = max(cnt[i - 1], cnt[i - 2] + i * cnt[i])\\n\\treturn cnt[-1]\\nprint(solve(n))\\n\", \"def maxx(a, b):\\n\\tif a > b:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn b\\nn = int(input())\\nlalala = input().split()\\nl = []\\nfor i in range(n):\\n\\tl.append(int(lalala[i]))\\nl.sort()\\nmax = l[-1]\\nwork = []\\ndp = []\\nfor i in range(max + 2):\\n\\twork.append(0)\\nfor i in range(n):\\n\\twork[l[i]] += 1\\ndp.append([0, 0])\\ndp.append([0, work[1]])\\nfor i in range(2, max + 2):\\n\\tdp.append([])\\n\\tdp[i].append(maxx(dp[i - 1][0], dp[i - 1][1]))\\n\\tdp[i].append(dp[i - 1][0] + work[i] * i)\\nprint(maxx(dp[max + 1][0], dp[max + 1][1]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ndp = [0] * (max(a) + 1)\\nb = {}\\nfor i in a:\\n\\tif i in b:\\n\\t\\tb[i] += 1\\n\\telse:\\n\\t\\tb[i] = 1\\nfor i in range(1, max(a) + 1):\\n\\tif i == 1:\\n\\t\\tif i in b:\\n\\t\\t\\tdp[i] = i * b[i]\\n\\telif i in b:\\n\\t\\tdp[i] = max(dp[i - 2] + i * b[i], dp[i - 1])\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1]\\nprint(dp[max(a)])\\n\", \"n = int(input())\\nseq = [int(x) for x in input().split()]\\nfreq = [0] * (10 ** 5 + 1)\\nfor num in seq:\\n\\tfreq[num] += 1\\nscore = [0] * (10 ** 5 + 1)\\nscore[1] = freq[1]\\nfor i in range(2, len(freq)):\\n\\tscore[i] = max(score[i - 1], score[i - 2] + freq[i] * i)\\nprint(score[-1])\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nval1 = pow(10, 5) + 1\\nval2 = [0] * val1\\nfor i in arr:\\n\\tval2[i] += 1\\ntmp = [[0] * 2 for _ in range(val1)]\\ntmp[1] = [val2[1], 0]\\nfor i in range(2, val1):\\n\\tfor j in range(2):\\n\\t\\tif j == 1:\\n\\t\\t\\ttmp[i][j] = val2[i] * i + max(tmp[i - 2][0], tmp[i - 2][1])\\n\\t\\telse:\\n\\t\\t\\ttmp[i][j] = max(tmp[i - 1][0], tmp[i - 1][1])\\nprint(max(tmp[val1 - 1][0], tmp[val1 - 1][1]))\\n\", \"n = int(input())\\nl = [int(y) for y in input().split()]\\nc = [0] * (max(l) + 1)\\nfor i in range(n):\\n\\tc[l[i]] += 1\\nll = []\\nfor i in range(len(c)):\\n\\tll.append([i, c[i]])\\nincl = ll[0][0] * ll[0][1]\\nexcl = 0\\nexclnew = 0\\ni = 0\\nfor i in range(1, len(ll)):\\n\\texclnew = max(incl, excl)\\n\\tincl = excl + ll[i][0] * ll[i][1]\\n\\texcl = exclnew\\nprint(max(incl, excl))\\n\", \"c = [0] * 100001\\nnumOfIntegers = int(input())\\nMAX = 0\\ninputString = input().split()\\nfor i in inputString:\\n\\tidx = int(i)\\n\\tc[idx] += 1\\n\\tif idx > MAX:\\n\\t\\tMAX = idx\\nMAX += 1\\nscore = 0\\ndp = [0] * MAX\\ndp[0] = 0\\ndp[1] = c[1]\\nfor i in range(2, MAX):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\nscore = dp[MAX - 1]\\nprint(score)\\n\", \"def main():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tn = 10 ** 5 + 1\\n\\tdp = [0] * n\\n\\tfor i in arr:\\n\\t\\tdp[i] += 1\\n\\tfor i in range(n):\\n\\t\\tdp[i] = dp[i] * i\\n\\tfor i in range(2, n):\\n\\t\\tdp[i] += dp[i - 2]\\n\\t\\tdp[i] = max(dp[i], dp[i - 1])\\n\\tprint(dp[-1])\\nmain()\\n\", \"from sys import stdin\\nn = int(input())\\nl = list(map(int, input().split()))\\nvals = [0 for i in range(100009)]\\ndp = [0 for i in range(100009)]\\nfor i in range(n):\\n\\tvals[l[i]] += 1\\ndp[1] = vals[1]\\nfor i in range(2, 100009):\\n\\tdp[i] = max(dp[i - 1], i * vals[i] + dp[i - 2])\\nprint(dp[-1])\\n\", \"n = int(input())\\nx = list(map(int, input().split()))\\ny = [0] * 100005\\nfor i in x:\\n\\ty[i] += 1\\ndp = [0] * 100005\\ndp[1] = x.count(1)\\nfor i in range(2, len(dp)):\\n\\ta = dp[i - 2] + i * y[i]\\n\\tb = dp[i - 1]\\n\\tdp[i] = max(a, b)\\nprint(dp[-1])\\n\", \"num = int(input())\\nint_list = [int(string) for string in input().split()]\\nint_list.sort()\\n\\ndef max_points():\\n\\tfrom collections import Counter\\n\\tcounter = Counter(int_list)\\n\\tunique_ints = list(counter.keys())\\n\\tunique_ints.sort()\\n\\tscore_list = [0 for _ in range(len(unique_ints))]\\n\\tscore_list[0] = unique_ints[0] * counter[unique_ints[0]]\\n\\tfor i in range(1, len(unique_ints)):\\n\\t\\tif unique_ints[i] - unique_ints[i - 1] == 1:\\n\\t\\t\\tprev_dp = score_list[i - 2] if i > 1 else 0\\n\\t\\t\\tscore_list[i] = max(score_list[i - 1], prev_dp + counter[unique_ints[i]] * unique_ints[i])\\n\\t\\telse:\\n\\t\\t\\tscore_list[i] = score_list[i - 1] + counter[unique_ints[i]] * unique_ints[i]\\n\\treturn score_list[-1]\\nprint(max_points())\\n\", \"n = int(input())\\nnumeros = list(map(int, input().split()))\\nnMax = 100001\\ncount = [0] * nMax\\ndp = [0] * nMax\\nfor e in numeros:\\n\\tcount[e] += 1\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, nMax):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\nprint(dp[nMax - 1])\\n\", \"input()\\nd = [0] * 100001\\nimax = 0\\nfor x in map(int, input().split()):\\n\\td[x] += x\\n\\timax = max(imax, x)\\na = b = 0\\nfor i in range(imax + 1):\\n\\t(a, b) = (max(a, d[i] + b), a)\\nprint(a)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nhsh = [0] * 100005\\ndp = [0] * 100005\\na.sort()\\nfor i in a:\\n\\thsh[i] += 1\\nmx = a[-1]\\ndp[mx] = mx * hsh[mx]\\nif hsh[mx - 1] > 0:\\n\\tdp[mx - 1] = max((mx - 1) * hsh[mx - 1], dp[mx])\\nelse:\\n\\tdp[mx - 1] = dp[mx]\\nfor i in range(mx - 2, -1, -1):\\n\\tdp[i] = max(i * hsh[i] + dp[i + 2], dp[i + 1])\\nprint(dp[0])\\n\", \"a = int(input())\\nz = list(map(int, input().split()))\\nc = []\\nd = {}\\nb = [0 for i in range(100001)]\\nfor i in z:\\n\\tb[i] += i\\nfor i in range(len(b)):\\n\\tif i < 2:\\n\\t\\tc.append(b[i])\\n\\telif i == 2:\\n\\t\\tc.append(c[0] + b[i])\\n\\telse:\\n\\t\\tc.append(b[i] + max(c[i - 2], c[i - 3]))\\nif len(c) == 1:\\n\\tprint(c[0])\\nelse:\\n\\tprint(max(c[-1], c[-2]))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na1 = [0] * 100001\\nfor i in a:\\n\\ta1[i] += i\\nq = w = 0\\nfor i in a1:\\n\\t(q, w) = (max(q, i + w), q)\\nprint(q)\\n\", \"from collections import Counter\\n\\ndef fun(ls):\\n\\tdct = Counter(ls)\\n\\tmx = max(dct.keys())\\n\\tfor i in range(mx + 1):\\n\\t\\tif dct.get(i) == None:\\n\\t\\t\\tdct[i] = 0\\n\\tdp = []\\n\\tdp.append(0)\\n\\tdp.append(dct[1])\\n\\tfor i in range(2, mx + 1):\\n\\t\\tdp.append(max(dct[i] * i + dp[i - 2], dp[i - 1]))\\n\\tprint(dp[-1])\\nt = input()\\nls = list(map(int, input().split()))\\nfun(ls)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nc = dict()\\ns = 0\\nfor i in a:\\n\\tc[i] = c.get(i, 0) + i\\nfor i in range(2, max(a) + 1):\\n\\tc[i] = max(c.get(i - 1, 0), c.get(i - 2, 0) + c.get(i, 0))\\nprint(c[max(a)])\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nmx = max(a)\\nc = [0] * (mx + 1)\\nfor i in a:\\n\\tc[i] += 1\\nfor i in range(2, mx + 1):\\n\\tc[i] = max(c[i - 1], c[i - 2] + c[i] * i)\\nprint(c[mx])\\n\", \"n = int(input())\\nk = [int(i) for i in input().split()]\\nmaxi = max(k)\\ncount = (maxi + 1) * [0]\\nfor j in range(n):\\n\\tcount[k[j]] += 1\\nf = (maxi + 1) * [0]\\nf[0] = 0\\nf[1] = count[1] * 1\\nfor p in range(2, maxi + 1):\\n\\tif f[p - 1] > p * count[p] + f[p - 2]:\\n\\t\\tf[p] = f[p - 1]\\n\\telse:\\n\\t\\tf[p] = p * count[p] + f[p - 2]\\nprint(f[maxi])\\n\", \"n_elements = int(input())\\narray = input().split()\\nnumbers = [0] * 100001\\nfor number in array:\\n\\tnumber = int(number)\\n\\tnumbers[number] += 1\\nfirst = numbers[1]\\nsecond = 0\\nswitch = 0\\nvalue_controller = 0\\nfor number in range(2, 100001):\\n\\tif switch == 0:\\n\\t\\tif first > second + numbers[number] * number:\\n\\t\\t\\tsecond = first\\n\\t\\telse:\\n\\t\\t\\tsecond += numbers[number] * number\\n\\t\\tswitch = 1\\n\\telse:\\n\\t\\tif second > first + numbers[number] * number:\\n\\t\\t\\tfirst = second\\n\\t\\telse:\\n\\t\\t\\tfirst += numbers[number] * number\\n\\t\\tswitch = 0\\nprint(max(first, second))\\n\", \"MX = 100008\\nn = int(input(''))\\narr = list(map(int, input().split()))\\ndp = [0] * MX\\ncnt = [0] * MX\\nfor i in arr:\\n\\tcnt[i] += 1\\ndp[1] = cnt[1]\\nfor i in range(2, MX):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[MX - 1])\\n\", \"n = int(input())\\na = list(map(int, input().split(' ')))\\na = sorted(a)\\nd = dict()\\n\\ndef solve(index):\\n\\tif index >= n:\\n\\t\\treturn 0\\n\\tif a[index] == a[n - 1]:\\n\\t\\treturn (n - index) * a[index]\\n\\telse:\\n\\t\\tcount = index\\n\\t\\twhile a[count] == a[index]:\\n\\t\\t\\tcount += 1\\n\\t\\tif count in d:\\n\\t\\t\\ta1 = d[count]\\n\\t\\telse:\\n\\t\\t\\ta1 = solve(count)\\n\\t\\t\\td[count] = a1\\n\\t\\tcount2 = count\\n\\t\\twhile count2 < n and a[count2] <= a[index] + 1:\\n\\t\\t\\tcount2 += 1\\n\\t\\tif count2 in d:\\n\\t\\t\\ta2 = (count - index) * a[index] + d[count2]\\n\\t\\telif count2 <= n - 1:\\n\\t\\t\\tb = solve(count2)\\n\\t\\t\\td[count2] = b\\n\\t\\t\\ta2 = (count - index) * a[index] + b\\n\\t\\telse:\\n\\t\\t\\ta2 = (count - index) * a[index]\\n\\t\\td[index] = max(a1, a2)\\n\\t\\treturn d[index]\\nfor i in range(n):\\n\\tanswer = solve(n - 1 - i)\\nprint(answer)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nfreq = {}\\nunique = []\\nfor i in range(n):\\n\\tx = a[i]\\n\\tif x in freq:\\n\\t\\tfreq[x] += 1\\n\\telse:\\n\\t\\tfreq[x] = 1\\n\\t\\tunique.append(x)\\nn = len(unique)\\nunique.sort()\\ndp = [[0 for i in range(2)] for j in range(n)]\\ndp[0][0] = 0\\ndp[0][1] = unique[0] * freq[unique[0]]\\nfor i in range(1, n):\\n\\tx = unique[i]\\n\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\tif x == unique[i - 1] + 1:\\n\\t\\tdp[i][1] = x * freq[x] + dp[i - 1][0]\\n\\telse:\\n\\t\\tdp[i][1] = x * freq[x] + max(dp[i - 1][0], dp[i - 1][1])\\nprint(max(dp[n - 1][0], dp[n - 1][1]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nmassiv = [0] * 10 ** 5\\nfor i in range(n):\\n\\tmassiv[a[i] - 1] += 1\\ndp = [0] * 10 ** 5\\ndp[0] = massiv[0]\\ndp[1] = massiv[1] * 2\\nmaxx = dp[0]\\nfor i in range(2, len(dp)):\\n\\tdp[i] = massiv[i] * (i + 1) + maxx\\n\\tif dp[i - 1] > maxx:\\n\\t\\tmaxx = dp[i - 1]\\nprint(max(dp))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nmax_value = max(a)\\ncnt = (max_value + 1) * [0]\\nfor i in range(n):\\n\\tcnt[a[i]] += 1\\nf = (max_value + 1) * [0]\\nf[0] = 0\\nf[1] = cnt[1]\\nfor i in range(2, max_value + 1):\\n\\tif f[i - 1] > f[i - 2] + cnt[i] * i:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + cnt[i] * i\\nprint(f[max_value])\\n\", \"n = int(input())\\ns = input().split()\\ncount = {}\\nfor i in range(n):\\n\\telement = int(s[i])\\n\\tcount[element] = count.get(element, 0) + 1\\nfor a in count.keys():\\n\\tcount[a] = a * count[a]\\nf_l = 0\\nf_c = 0\\nlast = 0\\nfor (key, value) in sorted(count.items()):\\n\\tif f_c == 0:\\n\\t\\tf_c = value\\n\\telse:\\n\\t\\ts = f_c\\n\\t\\tif key - last == 1:\\n\\t\\t\\tf_c = max(f_c, f_l + value)\\n\\t\\telse:\\n\\t\\t\\tf_c = f_c + value\\n\\t\\tf_l = s\\n\\tlast = key\\nprint(f_c)\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nCNT = [0] * (10 ** 5 + 1)\\nfor a in A:\\n\\tCNT[a] += 1\\nDP = [0] * (10 ** 5 + 1)\\nDP[0] = 0\\nDP[1] = CNT[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tDP[i] = max(DP[i - 1], DP[i - 2] + CNT[i] * i)\\nprint(DP[10 ** 5])\\n\", \"n = int(input())\\na = input().split(' ')\\ncounted = [0] * (10 ** 5 + 2)\\nflag = a[0]\\nflag2 = 0\\nfor i in range(0, n):\\n\\tcounted[int(a[i])] += 1\\n\\tif flag != a[i]:\\n\\t\\tflag2 = 1\\nif flag2 == 1:\\n\\tans = [0] * (10 ** 5 + 1)\\n\\tans[0] = 0\\n\\tans[1] = counted[1]\\n\\tfor i in range(1, 10 ** 5 + 1):\\n\\t\\tif i != 1:\\n\\t\\t\\tans[i] = max(ans[i - 1], ans[i - 2] + counted[i] * i)\\n\\tprint(ans[n])\\nelse:\\n\\tprint(n * int(a[0]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = max(a)\\nhas = [0] * (x + 2)\\nfor i in a:\\n\\thas[i] += 1\\nprev = 0\\ncur = has[1]\\nfor i in range(2, len(has)):\\n\\tres = i * has[i] + prev\\n\\tnext = max(res, cur)\\n\\tprev = cur\\n\\tcur = next\\nprint(cur)\\n\", \"import os\\nimport sys\\nimport math\\nfrom io import BytesIO, IOBase\\nfrom fractions import Fraction\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nN = int(100000.0 + 3)\\nn = int(input())\\narr = list(map(int, input().split()))\\ncnt = [0] * N\\nfor i in arr:\\n\\tcnt[i] += 1\\nmemo = [0] * N\\nfor i in range(N - 3, -1, -1):\\n\\tmemo[i] = max(cnt[i] * i + memo[i + 2], memo[i + 1])\\nprint(memo[0])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ncont = [0] * (max(a) + 1)\\nfor i in a:\\n\\tcont[i] += 1\\ndp = [0] * (max(a) + 1)\\ndp[1] = cont[1]\\nfor i in range(2, max(a) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cont[i])\\nprint(dp[-1])\\n\", \"n = int(input())\\nd = {}\\nl = [int(i) for i in input().split()]\\nl.sort()\\na = l[-1]\\nb = 0\\nfor i in range(a + 1):\\n\\td[str(i)] = 0\\nfor i in l:\\n\\td[str(i)] += 1\\nk = list(range(a + 1))\\nc = d['1']\\nfor i in k:\\n\\tif i > 1:\\n\\t\\tif b + i * d[str(i)] < c:\\n\\t\\t\\tb = c\\n\\t\\telse:\\n\\t\\t\\te = c\\n\\t\\t\\tc = b + i * d[str(i)]\\n\\t\\t\\tb = e\\nprint(c)\\n\", \"from collections import Counter, defaultdict\\nfrom heapq import heappop, heappush\\nfrom itertools import accumulate\\nfrom sys import stdout\\nR = lambda : map(int, input().split())\\ninput()\\narr = list(R())\\ncnt = Counter(arr)\\narr = sorted(set(arr))\\nn = len(arr)\\ndp = [[0, 0] for i in range(n)]\\ndp[0][1] = arr[0] * cnt[arr[0]]\\nfor i in range(1, n):\\n\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\tdp[i][1] = max(dp[i - 1][0] + arr[i] * cnt[arr[i]], dp[i - 1][1] + (arr[i] * cnt[arr[i]] if arr[i] > arr[i - 1] + 1 else 0))\\nprint(max(dp[-1]))\\n\", \"from collections import defaultdict\\nn = int(input())\\na = list(map(int, input().split()))\\nd = defaultdict(int)\\nfor i in a:\\n\\td[i] += 1\\ns = list(set(a))\\np = [0] * 100003\\nfor i in range(100000, 0, -1):\\n\\tp[i] = max(d[i] * i + p[i + 2], p[i + 1])\\nprint(p[1])\\n\", \"num = eval(input())\\ndata = [eval(i) for i in input().split()]\\ntime = [0] * (10 ** 5 + 1)\\nans = [0] * (10 ** 5 + 1)\\nfor i in range(num):\\n\\ttime[data[i]] += 1\\ndata = sorted(data)\\nans[0] = 0\\nans[1] = time[1] * 1\\nm = max(data)\\nfor i in range(2, m + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + time[i] * i)\\nprint(ans[m])\\n\", \"def main():\\n\\tinput()\\n\\ta = list(map(int, input().split()))\\n\\tmx = max(a)\\n\\tb = [0] * (mx + 1)\\n\\tfor x in a:\\n\\t\\tb[x] += x\\n\\tc = [0] * len(b)\\n\\tc[1] = b[1]\\n\\tfor i in range(2, len(b)):\\n\\t\\tc[i] = max(c[i - 1], b[i] + c[i - 2])\\n\\tprint(c[-1])\\n\\tpass\\nmain()\\n\", \"import math\\nimport itertools\\ngh = lambda : map(int, input().split())\\nN = 2 * 100000.0 + 5\\nN = int(N)\\n\\ndef main():\\n\\tinput()\\n\\td = [0] * N\\n\\tfor i in gh():\\n\\t\\td[i] += i\\n\\ta = b = 0\\n\\tfor i in d:\\n\\t\\t(a, b) = (max(a, i + b), a)\\n\\tprint(a)\\nmain()\\n\", \"from sys import stdin\\n\\ndef points(arr, n):\\n\\tk = 100000 + 1\\n\\td = [0] * k\\n\\tfor v in arr:\\n\\t\\td[v] = d[v] + v\\n\\tmax1 = max2 = 0\\n\\tfor i in range(k):\\n\\t\\tif d[i] and d[i - 1]:\\n\\t\\t\\tt = d[i] + max2\\n\\t\\t\\tmax2 = max1\\n\\t\\t\\tmax1 = max(max1, t)\\n\\t\\telif d[i]:\\n\\t\\t\\tt = d[i] + max1\\n\\t\\t\\tmax2 = max1\\n\\t\\t\\tmax1 = max(t, max1)\\n\\tprint(max1)\\n\\ndef solution():\\n\\tinput = stdin.readline\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tpoints(arr, n)\\nsolution()\\n\", \"n = int(input())\\nf = [0] * 100001\\nfor i in map(int, input().split()):\\n\\tf[i] += i\\ndp = [0] * 100002\\ndp[1] = f[1]\\nfor i in range(100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + f[i])\\nprint(dp[100000])\\n\", \"n = int(input())\\nstore = list(map(int, input().split()))\\nmLen = 10 ** 5 + 2\\nfreq = [0] * mLen\\nfor i in store:\\n\\tfreq[i] += 1\\ndp = [0] * mLen\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, mLen):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * freq[i])\\nprint(dp[mLen - 1])\\n\", \"n = int(input())\\ntab = list(map(int, input().split()))\\nc = [0] * 100001\\nfor i in tab:\\n\\tc[i] += 1\\ndp = [0, c[1], c[2] * 2]\\nmaxi = max(dp[1], dp[2])\\nfor i in range(3, 100001):\\n\\tdp.append(max(dp[i - 1], max(dp[i - 2], dp[i - 1] - c[i - 1] * (i - 1)) + c[i] * i))\\n\\tmaxi = max(maxi, dp[i])\\nprint(maxi)\\n\", \"from sys import stdin\\nfrom collections import defaultdict\\n\\ndef solve(c):\\n\\tn = len(c)\\n\\tnums = defaultdict(int)\\n\\tmaxval = float('-inf')\\n\\tfor i in c:\\n\\t\\tmaxval = max(maxval, i)\\n\\t\\tnums[i] += i\\n\\tdp = defaultdict(int)\\n\\tdp[1] = nums[1]\\n\\tfor i in range(2, maxval + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\\n\\treturn dp[maxval]\\nn = int(stdin.readline())\\narr = list(map(int, stdin.readline().split(' ')))\\nprint(solve(arr))\\n\", \"input()\\nd = {}\\nfor a in map(int, input().split()):\\n\\tif a not in d:\\n\\t\\td[a] = 1\\n\\telse:\\n\\t\\td[a] = d[a] + 1\\na = 0\\nb = 0\\nif 1 in d:\\n\\tb = d[1]\\nfor i in range(2, 100001):\\n\\tc = b\\n\\tif i in d:\\n\\t\\tc = max(b, a + i * d[i])\\n\\ta = b\\n\\tb = c\\nprint(max(a, b))\\n\", \"array = [0 for i in range(100050)]\\ndp = [0 for i in range(100050)]\\nhead = 100000\\ntail = 0\\nnums = int(input())\\nfor i in list(map(int, input().split())):\\n\\tarray[i] = array[i] + 1\\n\\thead = min(i, head)\\n\\ttail = max(i, tail)\\nres = 0\\nfor i in range(head, tail + 1):\\n\\tif i == head:\\n\\t\\tdp[i] = array[i] * i\\n\\t\\tres = max(dp[i], res)\\n\\telif i == head + 1:\\n\\t\\tdp[i] = array[i] * i\\n\\t\\tres = max(dp[i], res)\\n\\telif i == head + 2:\\n\\t\\tdp[i] = array[i] * i + dp[i - 2]\\n\\t\\tres = max(dp[i], res)\\n\\telse:\\n\\t\\tdp[i] = array[i] * i + max(dp[i - 2], dp[i - 3])\\n\\t\\tres = max(dp[i], res)\\nprint(res)\\n\", \"import bisect\\nimport os, sys, atexit\\nfrom io import BytesIO, StringIO\\ninput = BytesIO(os.read(0, os.fstat(0).st_size)).readline\\n_OUTPUT_BUFFER = StringIO()\\nsys.stdout = _OUTPUT_BUFFER\\n\\n@atexit.register\\ndef write():\\n\\tsys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\\ndp = [-1] * 100001\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tarr.sort()\\n\\tarr.append(1000000)\\n\\t(dp[1], dp[0]) = (arr[0], 0)\\n\\tfor i in range(1, n):\\n\\t\\tif arr[i] != arr[i + 1]:\\n\\t\\t\\tleftindex = bisect.bisect_left(arr, arr[i])\\n\\t\\t\\tif arr[leftindex - 1] != arr[i] - 1:\\n\\t\\t\\t\\tdp[i + 1] = arr[i] * (i - leftindex + 1) + dp[leftindex]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tleftestIndex = bisect.bisect_left(arr, arr[leftindex - 1])\\n\\t\\t\\t\\tdp[i + 1] = max(arr[i] * (i - leftindex + 1) + dp[leftestIndex], dp[leftindex])\\n\\tprint(dp[n])\\ntry:\\n\\tsolve()\\nexcept Exception as e:\\n\\tprint(e)\\n\", \"l = int(input())\\na = [int(i) for i in input().split()]\\namin = min(a)\\namax = max(a)\\ns = [0] * (amax - amin + 2)\\nfor i in range(l):\\n\\ts[a[i] - amin] += 1\\nfor i in range(amax - amin + 1):\\n\\ts[i] = s[i] * (i + amin)\\na = [s[0], max(s[0], s[1])]\\nfor i in range(amax - amin - 1):\\n\\ta.append(max(a[-1], a[-2] + s[len(a)]))\\nprint(a[-1])\\n\", \"n = int(input())\\nctr = [0] * 100002\\nmaxVal = 0\\nfor i in [int(x) for x in input().split()]:\\n\\tctr[i] += 1\\n\\tif i > maxVal:\\n\\t\\tmaxVal = i\\nchecker = [0] * (maxVal + 1)\\nchecker[1] = ctr[1]\\nfor i in range(2, maxVal + 1):\\n\\tchecker[i] = max(i * ctr[i] + checker[i - 2], checker[i - 1])\\nprint(checker[maxVal])\\n\", \"from collections import defaultdict\\nimport sys\\nn = int(input())\\na = list(map(int, input().split()))\\nd = defaultdict(lambda : 0, {})\\nfor x in a:\\n\\td[x] += 1\\nma = max(a)\\na = set(a)\\ndp = [0] * (ma + 1)\\ndp[1] = d[1]\\nfor i in range(2, ma + 1):\\n\\tif i > 1:\\n\\t\\tdp[i] = max(dp[i - 2] + i * d[i], dp[i - 1])\\nprint(dp[ma])\\n\", \"input()\\nl = list(map(int, input().split()))\\nn = max(l) + 1\\ncnt = [0] * n\\nfor i in l:\\n\\tcnt[i] += 1\\ndp = [0] * n\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor i in range(2, n):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[-1])\\n\", \"n = int(input())\\nm = [int(x) for x in input().split(' ')]\\nm.sort()\\ns = len(m)\\na = []\\na.append(m[0])\\ncount = 0\\nx = 0\\nb = []\\nwhile x < s:\\n\\tfor i in range(x, s):\\n\\t\\tif m[i] == m[x]:\\n\\t\\t\\tcount += 1\\n\\t\\telse:\\n\\t\\t\\ta.append(m[i])\\n\\t\\t\\tbreak\\n\\tb.append(count)\\n\\tx += count\\n\\tcount = 0\\nk = len(a)\\nc = k * [0]\\nc[0] = a[0] * b[0]\\nfor i in range(1, k):\\n\\tif a[i] - a[i - 1] != 1:\\n\\t\\tc[i] = c[i - 1] + a[i] * b[i]\\n\\telse:\\n\\t\\tc[i] = max(c[i - 1], c[i - 2] + a[i] * b[i])\\nprint(c[k - 1])\\n\", \"import sys\\nn = int(sys.stdin.readline())\\nline = sys.stdin.readline().split()\\nnums = list(map(int, line))\\nmaxi = max(nums)\\nfreq = [0] * maxi\\nfor i in range(n):\\n\\tfreq[nums[i] - 1] += 1\\nadded = [0] * maxi\\nadded[0] = freq[0] * 1\\nadded[1] = max(freq[1] * 2, added[0])\\nfor i in range(2, maxi):\\n\\tadded[i] = max(freq[i] * (i + 1) + added[i - 2], added[i - 1])\\nprint(added[-1])\\n\", \"from collections import Counter\\nn = int(input())\\nls = list(map(int, input().split()))\\nco = Counter(ls)\\nary = [0] * (max(ls) + 1)\\nary[1] = co[1]\\nfor i in range(2, len(ary)):\\n\\tary[i] = max(ary[i - 1], ary[i - 2] + i * co[i])\\nprint(ary[-1])\\n\", \"bluff = int(input())\\ns = [0] * 100002\\nf = [0] * 100002\\nx = 0\\nd = map(int, input().split())\\nfor i in d:\\n\\ts[i] += i\\nf[0] = 0\\nfor j in range(1, 100001):\\n\\tf[j] = max(f[j - 1], f[j - 2] + s[j])\\nprint(f[100000])\\n\", \"n = int(input())\\nw = list(map(int, input().split()))\\nw.sort()\\nu = []\\ny = []\\nk = 1\\nfor i in range(1, n):\\n\\tif w[i] != w[i - 1]:\\n\\t\\tu.append(w[i - 1])\\n\\t\\ty.append(k)\\n\\t\\tk = 1\\n\\telse:\\n\\t\\tk += 1\\nu.append(w[-1])\\ny.append(k)\\nd = [0] * len(u)\\nd[0] = u[0] * y[0]\\nif len(u) == 1:\\n\\tprint(d[0])\\n\\texit()\\nif u[1] - u[0] > 1:\\n\\td[1] = d[0] + u[1] * y[1]\\nelse:\\n\\td[1] = max(d[0], u[1] * y[1])\\nfor i in range(2, len(u)):\\n\\tif u[i] - u[i - 1] > 1:\\n\\t\\td[i] = d[i - 1] + u[i] * y[i]\\n\\telse:\\n\\t\\td[i] = max(d[i - 1], d[i - 2] + u[i] * y[i])\\nprint(d[-1])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\ndp = [0] * 100001\\nfor d in arr:\\n\\tdp[d] += d\\na = 0\\nb = 0\\nfor i in dp:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"import sys\\ninput = sys.stdin.readline\\nins = lambda : input().rstrip()\\nini = lambda : int(input().rstrip())\\ninm = lambda : map(int, input().rstrip().split())\\ninl = lambda : list(map(int, input().split()))\\nout = lambda x, s='\\\\n': print(s.join(map(str, x)))\\nn = ini()\\na = inl()\\nm = max(a) + 1\\ncount = [0] * m\\nfor i in a:\\n\\tcount[i] += i\\nans = [0] * m\\nfor i in range(1, m):\\n\\tans[i] = count[i]\\n\\tif i - 2 >= 0:\\n\\t\\tans[i] += ans[i - 2]\\n\\tans[i] = max(ans[i], ans[i - 1])\\nprint(ans[m - 1])\\n\", \"cnt = [0] * (10 ** 5 + 1)\\ndp = [0] * (10 ** 5 + 1)\\nn = int(input())\\nli = list(map(int, input().split()))\\nfor i in li:\\n\\tcnt[i] += 1\\ndp[1] = cnt[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[10 ** 5])\\n\", \"import sys, re, math\\nfrom collections import deque, defaultdict, Counter, OrderedDict\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom heapq import heappush, heappop, heapify, nlargest, nsmallest\\n\\ndef STR():\\n\\treturn list(input())\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST():\\n\\treturn list(map(int, input().split()))\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef sortListWithIndex(listOfTuples, idx):\\n\\treturn sorted(listOfTuples, key=lambda x: x[idx])\\n\\ndef sortDictWithVal(passedDic):\\n\\ttemp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))[::-1]\\n\\ttoret = {}\\n\\tfor tup in temp:\\n\\t\\ttoret[tup[0]] = tup[1]\\n\\treturn toret\\n\\ndef sortDictWithKey(passedDic):\\n\\treturn dict(OrderedDict(sorted(passedDic.items())))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\nn = INT()\\na = LIST()\\nans = 0\\nocc = defaultdict(int)\\nfor el in a:\\n\\tocc[el] += 1\\ndp = [0] * (10 ** 5 + 1)\\ndp[1] = occ[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * occ[i])\\nif n == 1:\\n\\tprint(a[0])\\nelif n == 2:\\n\\tif abs(a[0] - a[1]) != 1:\\n\\t\\tprint(a[0] + a[1])\\n\\telse:\\n\\t\\tprint(max(a))\\nelse:\\n\\tprint(dp[10 ** 5])\\n\", \"g = int(input())\\nb = list(map(int, input().split()))\\nfreq = {}\\ng = max(b)\\nfor a in b:\\n\\tif a in freq.keys():\\n\\t\\tfreq[a] += 1\\n\\telse:\\n\\t\\tfreq[a] = 1\\nfor a in range(1, g + 1):\\n\\tif a not in freq.keys():\\n\\t\\tfreq[a] = 0\\na = 0\\nb = freq[1]\\nfor i in range(2, g + 1):\\n\\t(a, b) = (b, max(b, a + freq[i] * i))\\nprint(b)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = max(a)\\nans = {}\\na.sort()\\na.append(0)\\nfor i in range(1, b + 1):\\n\\tans[i] = 0\\nk = 1\\nfor i in range(0, n):\\n\\tif a[i + 1] == a[i]:\\n\\t\\tk += 1\\n\\telse:\\n\\t\\tans[a[i]] = k * a[i]\\n\\t\\tk = 1\\n(p, q) = (0, 0)\\nfor i in range(1, b + 1):\\n\\t(p, q) = (max(p, q + ans[i]), p)\\nprint(p)\\n\", \"n = int(input())\\nA = [int(x) for x in input().strip().split()]\\nL = [0] * (10 ** 5 + 1)\\nfor i in A:\\n\\tL[i] += i\\nfor i in range(2, 10 ** 5 + 1):\\n\\tL[i] = max([L[i - 1], L[i - 2] + L[i]])\\nprint(L[-1])\\n\", \"n = int(input())\\nm = 10 ** 5 + 1\\na = list(map(int, input().split()))\\ncnt = [0 for i in range(m)]\\nfor i in range(n):\\n\\tcnt[a[i]] += 1\\ndp = [i * cnt[i] for i in range(m)]\\nfor i in range(m):\\n\\tfor j in range(i + 2, min(m, i + 5)):\\n\\t\\tdp[j] = max(dp[j], dp[i] + j * cnt[j])\\nprint(max(dp))\\n\", \"a = int(input())\\nb = [i for i in range(a)]\\nc = input().split()\\nfor i in range(a):\\n\\tb[i] = int(c[i])\\ns = [0] * (max(b) + 4)\\nsu = 0\\nr = 0\\nt = []\\nfor i in range(a):\\n\\ts[b[i]] += b[i]\\nfor i in range(max(b) + 2):\\n\\tif s[i] == 0:\\n\\t\\tif r > 1:\\n\\t\\t\\tt = [0]\\n\\t\\t\\tt.extend(s[i - r:i])\\n\\t\\t\\tf = [i for i in range(len(t) + 1)]\\n\\t\\t\\tf[0] = 0\\n\\t\\t\\tf[1] = t[1]\\n\\t\\t\\tfor j in range(2, len(t)):\\n\\t\\t\\t\\tf[j] = max(f[j - 1], f[j - 2] + t[j])\\n\\t\\t\\tsu += f[len(t) - 1]\\n\\t\\t\\tr = 0\\n\\telif s[i] != 0 and s[i + 1] == 0 and (r == 0):\\n\\t\\tsu += s[i]\\n\\telse:\\n\\t\\tr += 1\\nprint(su)\\n\", \"def main():\\n\\tn = int(input())\\n\\ta = sorted([int(i) for i in input().split()])\\n\\tcnt = [0 for _ in range(100001)]\\n\\tmaxi = a[-1]\\n\\tfor i in range(n):\\n\\t\\tcnt[a[i]] += 1\\n\\tdp = [0 for _ in range(n + 1)]\\n\\tdp[1] = cnt[maxi] * maxi\\n\\tfor i in range(2, n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + (maxi - i + 1) * cnt[maxi - i + 1])\\n\\tprint(dp[n])\\nmain()\\n\", \"import sys\\nfrom math import *\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn map(int, minp().split())\\nn = mint()\\na = [0] * 100001\\nd = [0] * 100001\\nfor i in mints():\\n\\ta[i] += 1\\nd[1] = a[1]\\nfor i in range(2, 100001):\\n\\td[i] = max(d[i - 1], d[i - 2] + a[i] * i)\\nprint(d[100000])\\n\", \"from collections import Counter\\nn = int(input())\\nnums = list(map(int, input().split()))\\nnum_counter = Counter(nums)\\ntab = [0, num_counter[1]]\\nfor a in range(2, 100001):\\n\\ttab.append(max(tab[-1], tab[-2] + num_counter[a] * a))\\nprint(tab[100000])\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\nfrom collections import Counter\\nsys.setrecursionlimit(1000000)\\n\\ndef I():\\n\\treturn list(map(int, input().split()))\\n\\ndef sieve(n):\\n\\ta = [1] * n\\n\\tfor i in range(2, n):\\n\\t\\tif a[i]:\\n\\t\\t\\tfor j in range(i * i, n, i):\\n\\t\\t\\t\\ta[j] = 0\\n\\treturn a\\n\\ndef rec(i):\\n\\tif i < 0:\\n\\t\\treturn 0\\n\\tif dp[i] != -1:\\n\\t\\treturn dp[i]\\n\\tif i == 0:\\n\\t\\tdp[i] = arr[i] * c[arr[i]]\\n\\tif arr[i - 1] == arr[i] - 1:\\n\\t\\tdp[i] = max(rec(i - 2) + arr[i] * c[arr[i]], rec(i - 1))\\n\\telse:\\n\\t\\tdp[i] = arr[i] * c[arr[i]] + rec(i - 1)\\n\\treturn dp[i]\\nn = int(input())\\narr = I()\\nc = Counter(arr)\\narr = sorted(list(set(arr)))\\nn = len(arr)\\ndp = [-1] * n\\nfor i in range(1, n):\\n\\trec(i)\\nprint(rec(n - 1))\\n\", \"import sys\\nimport math\\nfrom collections import Counter\\nfrom functools import reduce\\nimport bisect\\n\\ndef getN():\\n\\treturn int(input())\\n\\ndef getNM():\\n\\treturn map(int, input().split())\\n\\ndef getList():\\n\\treturn list(map(int, input().split()))\\n\\ndef input():\\n\\treturn sys.stdin.readline().rstrip()\\n\\ndef index(a, x):\\n\\ti = bisect.bisect_left(a, x)\\n\\tif i != len(a) and a[i] == x:\\n\\t\\treturn i\\n\\treturn False\\nn = getN()\\narr = sorted(getList())\\nC = Counter(arr)\\n(m1, m2) = (0, 0)\\nfor i in range(1, max(arr) + 1):\\n\\t(m1, m2) = (max(m1, m2 + C[i] * i), m1)\\nprint(m1)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nmx = max(arr)\\ndp = [0] * (mx + 1)\\nfrom collections import Counter\\ncnt = Counter(arr)\\ndp[1] = cnt[1]\\nfor i in range(2, mx + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[mx])\\n\", \"def solve(a, n):\\n\\tlimit = max(a)\\n\\tcnt = [0] * (limit + 1)\\n\\tf = [0] * (limit + 1)\\n\\tfor i in a:\\n\\t\\tcnt[i] += 1\\n\\tf[1] = cnt[1]\\n\\tfor i in range(2, limit + 1):\\n\\t\\tf[i] = max(f[i - 1], f[i - 2] + i * cnt[i])\\n\\treturn f[limit]\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tprint(solve(a, n))\\nmain()\\n\", \"from typing import List, Tuple\\n\\ndef parse_input() -> Tuple[int, List[int]]:\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\treturn (n, arr)\\n\\ndef solve(n: int, arr: List[int]) -> int:\\n\\tm = max(arr)\\n\\tcountArr: List[int] = [0] * (m + 1)\\n\\tfor elem in arr:\\n\\t\\tcountArr[elem] += 1\\n\\tdp: List[int] = [0, countArr[1]]\\n\\tfor i in range(2, m + 1):\\n\\t\\tdp.append(max(dp[i - 1], dp[i - 2] + countArr[i] * i))\\n\\treturn dp[-1]\\n(n, arr) = parse_input()\\nprint(solve(n, arr))\\n\", \"input()\\nmaxN = int(100000.0) + 2\\ncnt = [0] * maxN\\nfor i in map(int, input().split()):\\n\\tcnt[i] += i\\na = b = 0\\nfor i in cnt:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"import typing\\nimport array\\n\\ndef ri(*args) -> typing.Iterator:\\n\\t(func, funcs) = (int, (int, float, str))\\n\\tsep = ' '\\n\\tfor a in args:\\n\\t\\tif a in funcs:\\n\\t\\t\\tfunc = a\\n\\t\\telif isinstance(a, str):\\n\\t\\t\\tsep = a\\n\\treturn map(func, input().strip().split(sep))\\n\\ndef main():\\n\\tN_MAX = 10 ** 5\\n\\t_ = input()\\n\\tns = ri()\\n\\tarr = array.array('q', (0 for _ in range(N_MAX + 1)))\\n\\tfor n in ns:\\n\\t\\tarr[n] += 1\\n\\tfor n in range(2, N_MAX + 1):\\n\\t\\tarr[n] = max(arr[n - 1], arr[n - 2] + n * arr[n])\\n\\tprint(arr[N_MAX])\\nmain()\\n\", \"import sys\\nfrom random import choice, randint\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef MI():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef LLI():\\n\\treturn [list(map(int, l.split())) for l in sys.stdin.readlines().strip()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().strip().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().strip().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().strip().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline().strip())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline().strip())\\n\\ndef S():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef pe(s):\\n\\treturn print(str(s), file=sys.stderr)\\n\\ndef JA(a, sep):\\n\\treturn sep.join(map(str, a))\\n\\ndef JAA(a, s, t):\\n\\treturn s.join((t.join(map(str, b)) for b in a))\\ninp = sys.stdin.readline\\nout = sys.stdout.write\\n\\ndef main():\\n\\tn = I()\\n\\ta = LI()\\n\\td = [0] * 100002\\n\\tfor i in a:\\n\\t\\td[i] += i\\n\\t(x, y) = (0, 0)\\n\\tfor i in d:\\n\\t\\t(x, y) = (max(x, y + i), x)\\n\\tpf(x)\\nmain()\\n\", \"n = int(input())\\nq = list(map(int, input().split()))\\ndp = [0] * 100001\\nfor i in q:\\n\\tdp[i] += i\\na = b = 0\\nfor i in dp:\\n\\t(a, b) = (max(a, b + i), a)\\nprint(a)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nfr = {}\\nfor i in range(1, 10 ** 5 + 2):\\n\\tfr[i] = 0\\nfor i in range(n):\\n\\tfr[a[i]] += 1\\n\\ndef f(c, k):\\n\\tdp = [0 for j in range(k + 1)]\\n\\tdp[1] = c * fr[c]\\n\\tfor j in range(2, k + 1):\\n\\t\\tdp[j] = max(fr[c + j - 1] * (c + j - 1) + dp[j - 2], dp[j - 1])\\n\\treturn dp[k]\\nans = 0\\nc = 1\\nk = 1\\nwhile fr[c] == 0:\\n\\tc += 1\\nwhile c + k - 1 < 10 ** 5 + 1:\\n\\tif fr[c + k] == 0:\\n\\t\\tans += f(c, k)\\n\\t\\tc = c + k\\n\\t\\tk = 1\\n\\t\\twhile fr[c] == 0 and c < 10 ** 5 + 1:\\n\\t\\t\\tc += 1\\n\\telse:\\n\\t\\tk += 1\\nprint(ans)\\n\", \"input()\\ne = [0] * 100001\\nfor x in map(int, input().split()):\\n\\te[x] += x\\na = b = 0\\nfor i in e:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ntedad = [0] * 100200\\nmx = max(a)\\nmn = min(a)\\nfor t in a:\\n\\ttedad[t] += 1\\ndp = [0] * 100200\\ndp[mn] = mn * tedad[mn]\\ndp[mn + 1] = (mn + 1) * tedad[mn + 1]\\ndp[mn + 2] = dp[mn] + (mn + 2) * tedad[mn + 2]\\nfor i in range(mn + 3, mx + 1):\\n\\tdp[i] = max(dp[i - 2], dp[i - 3]) + i * tedad[i]\\nprint(max(dp[mx - 1], dp[mx]))\\n\", \"from sys import stdin\\n\\ndef main():\\n\\tn = int(stdin.readline())\\n\\tar = list(map(int, stdin.readline().split()))\\n\\tmax_value = 10 ** 5\\n\\tcount = [0] * (max_value + 1)\\n\\tfor elm in ar:\\n\\t\\tcount[elm] += 1\\n\\tdp = [0] * (max_value + 1)\\n\\tif count[1] > 0:\\n\\t\\tdp[1] = count[1]\\n\\tfor i in range(2, max_value + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\n\\tprint(max(dp))\\nmain()\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nMax = max(a)\\nN = [0] * (Max + 1)\\nfor i in range(n):\\n\\tN[a[i]] += 1\\nf = [0] * (Max + 1)\\nf[1] = N[1]\\nfor i in range(2, Max + 1):\\n\\tf[i] = f[i - 1] if f[i - 1] > f[i - 2] + N[i] * i else f[i - 2] + N[i] * i\\nprint(f[Max])\\n\", \"n = input()\\ns = input()\\na = [int(x) for x in s.split()]\\nmin = 100001\\nmax = -1\\nfor x in a:\\n\\tif x > max:\\n\\t\\tmax = x\\n\\tif x < min:\\n\\t\\tmin = x\\nb = []\\nfor x in range(max + 1):\\n\\tb.append(0)\\nc = b\\nfor x in a:\\n\\tc[x] += 1\\nb[min] = c[min] * min\\nfor x in range(min + 1, max + 1):\\n\\tif b[x - 1] >= b[x - 2] + c[x] * x:\\n\\t\\tb[x] = b[x - 1]\\n\\telse:\\n\\t\\tb[x] = b[x - 2] + c[x] * x\\nprint(b[max])\\n\", \"N = int(100000.0 + 3)\\nn = int(input())\\narr = list(map(int, input().split()))\\ncnt = [0] * N\\nfor i in arr:\\n\\tcnt[i] += 1\\nmemo = [0] * N\\nfor i in range(N - 3, -1, -1):\\n\\tmemo[i] = max(cnt[i] * i + memo[i + 2], memo[i + 1])\\nprint(memo[0])\\n\", \"import math\\nfrom collections import defaultdict, Counter, deque\\nINF = float('inf')\\n\\ndef gcd(a, b):\\n\\twhile b:\\n\\t\\t(a, b) = (b, a % b)\\n\\treturn a\\n\\ndef isPrime(n):\\n\\tif n <= 1:\\n\\t\\treturn False\\n\\ti = 2\\n\\twhile i ** 2 <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\treturn False\\n\\t\\ti += 1\\n\\treturn True\\n\\ndef primeFactor(n):\\n\\tif n % 2 == 0:\\n\\t\\treturn 2\\n\\ti = 3\\n\\twhile i ** 2 <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\treturn i\\n\\t\\ti += 1\\n\\treturn n\\n\\ndef vars():\\n\\treturn map(int, input().split())\\n\\ndef array():\\n\\treturn list(map(int, input().split()))\\n\\ndef main():\\n\\tn = int(input())\\n\\tarr = array()\\n\\tm = defaultdict(int)\\n\\tfor i in range(n):\\n\\t\\tm[arr[i]] += 1\\n\\tdp = [0 for i in range(max(arr) + 1)]\\n\\tdp[1] = m[1]\\n\\tfor k in range(2, max(arr) + 1):\\n\\t\\tdp[k] = max(dp[k - 1], dp[k - 2] + m[k] * k)\\n\\tprint(dp[max(arr)])\\nt = 1\\nfor _ in range(t):\\n\\tmain()\\n\", \"from collections import Counter\\nn = int(input())\\nl = list(map(int, input().split()))\\nl1 = Counter(l)\\nj = []\\nfor i in l1:\\n\\tj += [[int(i), int(i) * l1[i]]]\\nle = len(j)\\nj.sort()\\nif le < 2:\\n\\tprint(j[0][1])\\n\\texit()\\ns = [0] * le\\ns[0] = j[0][1]\\nif abs(j[0][0] - j[1][0]) == 1:\\n\\ts[1] = j[1][1]\\nelse:\\n\\ts[1] = j[0][1] + j[1][1]\\ns[1] = max(s[0], s[1])\\nfor i in range(2, le):\\n\\tif abs(j[i][0] - j[i - 1][0]) == 1:\\n\\t\\ts[i] = max(s[i - 2] + j[i][1], s[i - 1])\\n\\telse:\\n\\t\\ts[i] = max(s[i - 2] + j[i][1], s[i - 1] + j[i][1])\\nprint(max(s))\\n\", \"import math\\ninput_s = int(input())\\ninput_l = [int(x) for x in input().split()]\\nscore_list = [0] * 100000\\nresult_list = [0] * 100000\\nmax_index = 0\\nfor i in input_l:\\n\\tscore_list[i - 1] += i\\n\\tmax_index = max(max_index, i)\\nresult_list[0] = score_list[0]\\nresult_list[1] = score_list[1]\\nresult_list[2] = score_list[0] + score_list[2]\\nif max_index <= 3:\\n\\tprint(max(result_list[0], result_list[1], result_list[2]))\\nelse:\\n\\tfor i in range(3, max_index):\\n\\t\\tresult_list[i] = max(result_list[i - 1], result_list[i - 2] + score_list[i], result_list[i - 3] + score_list[i])\\n\\tprint(result_list[max_index - 1])\\n\", \"import logging\\nfrom collections import Counter\\nfrom functools import reduce\\nimport sys\\nnivel_log = logging.ERROR\\nlogger_cagada = None\\n\\ndef shit_core(numeros):\\n\\tnumeros_tam = len(numeros)\\n\\tocurrencias = Counter(numeros)\\n\\tllaves_ord = sorted(ocurrencias.keys())\\n\\tvalores_llaves = {}\\n\\ttoma = []\\n\\tno_toma = []\\n\\tvalores_llaves = reduce(lambda valores, llave: valores.update({llave: llave * ocurrencias[llave]}) or valores, llaves_ord, {})\\n\\tlogger_cagada.debug('los valores de cada llave {}'.format(valores_llaves))\\n\\tno_toma.append(0)\\n\\ttoma.append(valores_llaves[llaves_ord[0]])\\n\\tfor (idx, llave) in enumerate(llaves_ord[1:], 1):\\n\\t\\tllave_ant = llaves_ord[idx - 1]\\n\\t\\tpuede_tomar_ant = 0\\n\\t\\tvalor_no_toma = max(no_toma[idx - 1], toma[idx - 1])\\n\\t\\tno_toma.append(valor_no_toma)\\n\\t\\tvalor_toma = valores_llaves[llave]\\n\\t\\tpuede_tomar_ant = llave - llave_ant > 1\\n\\t\\tif puede_tomar_ant:\\n\\t\\t\\tvalor_toma += max(no_toma[idx - 1], toma[idx - 1])\\n\\t\\telse:\\n\\t\\t\\tvalor_toma += no_toma[idx - 1]\\n\\t\\ttoma.append(valor_toma)\\n\\tlogger_cagada.debug('valores no toma {}'.format(no_toma))\\n\\tlogger_cagada.debug('valores toma {}'.format(toma))\\n\\tmaxima_caca = max(no_toma[-1], toma[-1])\\n\\treturn maxima_caca\\n\\ndef shit_main():\\n\\tlineas = list(sys.stdin)\\n\\tnumeros = [int(x) for x in lineas[1].strip().split(' ')]\\n\\tcaca = shit_core(numeros)\\n\\tprint(caca)\\nFORMAT = '[%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s'\\nlogging.basicConfig(level=nivel_log, format=FORMAT)\\nlogger_cagada = logging.getLogger('asa')\\nlogger_cagada.setLevel(nivel_log)\\nshit_main()\\n\", \"n = int(input())\\na = sorted([int(x) for x in input().split(' ')])\\n\\ndef dp(s):\\n\\tmemo = [-1] * len(s)\\n\\tfor i in reversed(range(len(s))):\\n\\t\\tif i == len(s) - 1:\\n\\t\\t\\tresult = s[i][1]\\n\\t\\telif s[i][0] + 1 == s[i + 1][0]:\\n\\t\\t\\tresult = max((0 if i + 2 >= len(s) else memo[i + 2]) + s[i][1], memo[i + 1])\\n\\t\\telse:\\n\\t\\t\\tresult = s[i][1] + memo[i + 1]\\n\\t\\tmemo[i] = result\\n\\treturn result\\ntable = []\\ncurrentNum = a[0]\\ncurrentAcc = 0\\nfor i in range(n):\\n\\tif a[i] != currentNum:\\n\\t\\ttable.append([currentNum, currentAcc])\\n\\t\\tcurrentNum = a[i]\\n\\t\\tcurrentAcc = currentNum\\n\\telse:\\n\\t\\tcurrentAcc += currentNum\\n\\tif i == n - 1:\\n\\t\\ttable.append([currentNum, currentAcc])\\nprint(dp(table))\\n\", \"n = int(input())\\nnm = [int(i) for i in input().split()]\\na = [0 for i in range(100002)]\\nfor i in nm:\\n\\ta[i] = a[i] + i\\nx = y = 0\\nfor i in range(100002):\\n\\t(x, y) = (max(x, y), x + a[i])\\nprint(x)\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\nd = {}\\nfor x in a:\\n\\td[x] = d.get(x, 0) + x\\ndp = [0] * 100001\\nfor i in range(1, 100001):\\n\\tif i >= 2:\\n\\t\\tdp[i] = max(dp[i - 2] + d.get(i, 0), dp[i - 1])\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], d.get(i, 0))\\nprint(max(dp))\\n\", \"__author__ = 'Bian'\\nn = int(input())\\norig = [int(x) for x in input().split()]\\nsta = [0] * (max(orig) + 1)\\nfor i in range(len(orig)):\\n\\tsta[orig[i]] += 1\\nf = [0] * len(sta)\\nf[1] = sta[1]\\nfor i in range(2, len(sta)):\\n\\ta = f[i - 1]\\n\\tb = f[i - 2] + i * sta[i]\\n\\tf[i] = max(a, b)\\nprint(f[len(sta) - 1])\\n\", \"N = int(input())\\nlist1 = [int(k) for k in input().split()]\\nti = [0] * 100002\\nfor k in list1:\\n\\tti[k] = ti[k] + k\\na = 0\\nb = 0\\nfor k in ti:\\n\\t(a, b) = (max(a, b), a + k)\\nprint(a)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nd = {}\\nfor i in a:\\n\\tif i not in d:\\n\\t\\td[i] = 1\\n\\telse:\\n\\t\\td[i] += 1\\nb = list(sorted(d.keys()))\\ndp = []\\nfor i in range(len(b) + 1):\\n\\tdp.append([0, 0])\\nfor i in range(1, len(b) + 1):\\n\\tdp[i][0] = max(dp[i - 1])\\n\\tdp[i][1] = dp[i - 1][0]\\n\\tif i > 1 and b[i - 1] - b[i - 2] > 1:\\n\\t\\tdp[i][1] = max(dp[i][1], dp[i - 1][1])\\n\\tdp[i][1] += d[b[i - 1]] * b[i - 1]\\nprint(max(dp[len(b)]))\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\nD = {}\\nfor el in L:\\n\\tif el in D:\\n\\t\\tD[el] += 1\\n\\telse:\\n\\t\\tD[el] = 1\\nL = list(set(L))\\nL.sort()\\ndp = [0, L[0] * D[L[0]]]\\nfor i in range(1, len(L)):\\n\\tif L[i] == L[i - 1] + 1:\\n\\t\\tdp.append(max(dp[-1], dp[-2] + L[i] * D[L[i]]))\\n\\telse:\\n\\t\\tdp.append(dp[-1] + L[i] * D[L[i]])\\nprint(dp[-1])\\n\", \"n = int(input())\\nraw = [int(x) for x in input().split()]\\nnum = [0] * (100000 + 1)\\nfor item in raw:\\n\\tnum[item] += item\\nans = [0] * (100000 + 1)\\nans[1] = num[1]\\nfor i in range(2, 100000 + 1):\\n\\tans[i] = max(num[i] + ans[i - 2], ans[i - 1])\\nprint(ans[100000])\\n\", \"n = int(input())\\na = [0] * 100001\\ndp = [0] * 100001\\nfor i in list(map(int, input().split())):\\n\\ta[i] += i\\nfor i in range(100001):\\n\\tif i == 0 or i == 1:\\n\\t\\tdp[i] = a[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i])\\nprint(dp[-1])\\n\", \"from collections import Counter\\nanswer = {0: 0}\\nn = int(input())\\ncount = Counter(list(map(int, input().split())))\\nfor i in range(1, 100001):\\n\\tif not count.get(i):\\n\\t\\tcount[i] = 0\\n\\tanswer[i] = 0\\nanswer[1] = count[1]\\nfor (k, v) in sorted(list(count.items()))[1:]:\\n\\tanswer[k] = max([answer[k - 1], answer[k - 2] + k * v])\\nprint(answer[100000])\\n\", \"def count():\\n\\ti = 1000000\\n\\twhile i > 0:\\n\\t\\tyield 0\\n\\t\\ti -= 1\\nn = int(input())\\ndata = [int(el) for el in input().split()]\\ncnt = []\\nfor i in count():\\n\\tcnt.append(i)\\nfor x in data:\\n\\tcnt[x] += 1\\ng = []\\ng.append(0)\\ng.append(cnt[1])\\nfor i in range(2, n + 1):\\n\\tg.append(max(g[i - 1], g[i - 2] + cnt[i] * i))\\nif g[n] == 0:\\n\\tprint(data[0] * n)\\nelse:\\n\\tprint(g[n])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nmax_a = max(a)\\nfreq = [0] * (max_a + 1)\\nfor i in a:\\n\\tfreq[i] += 1\\nsumaMax = [0, freq[1]]\\nfor i in range(2, max_a + 1):\\n\\tsumaMax.append(max(sumaMax[i - 1], freq[i] * i + sumaMax[i - 2]))\\nprint(sumaMax[max_a])\\n\", \"n = int(input())\\na = list(map(int, input().split(' ')))\\nf = []\\ndp = []\\ni = 0\\nwhile i < 100010:\\n\\tf.append(0)\\n\\tdp.append(0)\\n\\ti = i + 1\\ni = 0\\nwhile i < n:\\n\\tf[a[i]] = f[a[i]] + a[i]\\n\\ti = i + 1\\ni = 1\\nres = 0\\ni = 100000\\nwhile i > 0:\\n\\tdp[i] = f[i] + max(dp[i + 2], dp[i + 3])\\n\\tres = max(dp[i], res)\\n\\ti = i - 1\\nprint(res)\\n\", \"MAX = 10 ** 5 + 5\\n(DEL, NOT_DEL) = (1, 0)\\ninput()\\na = list(map(int, input().split()))\\ncount = [0] * MAX\\nfor val in a:\\n\\tcount[val] += 1\\na = sorted(set(a))\\nn = len(a)\\ndp = [[0 for _ in range(n)] for _ in range(2)]\\ndp[DEL][0] = a[0] * count[a[0]]\\nfor i in range(1, n):\\n\\tdp[NOT_DEL][i] = max(dp[NOT_DEL][i - 1], dp[DEL][i - 1])\\n\\tdp[DEL][i] = a[i] * count[a[i]] + dp[NOT_DEL][i - 1]\\n\\tif a[i - 1] + 1 != a[i]:\\n\\t\\tdp[DEL][i] = max(dp[DEL][i], a[i] * count[a[i]] + dp[DEL][i - 1])\\nprint(max(dp[DEL][n - 1], dp[NOT_DEL][n - 1]))\\n\", \"n = int(input())\\nm = 10 ** 5 + 7\\nli = [0] * m\\nmali = [0] * m\\nfor nu in input().split():\\n\\tx = int(nu)\\n\\tli[x] += x\\nmali[0] = li[0]\\nmali[1] = li[1]\\nfor i in range(2, m):\\n\\tmali[i] = max(li[i] + mali[i - 2], mali[i - 1])\\nprint(mali[-1])\\n\", \"input()\\ns = list(map(int, input().split()))\\ncnt = [0] * 100005\\ndp = [0] * 100005\\nfor i in s:\\n\\tcnt[i] += 1\\ndp[1] = cnt[1]\\nfor i in range(2, 100002):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[100001])\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\ncount = [0] * 100001\\nfor x in a:\\n\\tcount[x] += 1\\nans = [0] * 100001\\nans[0] = 0\\nans[1] = count[1]\\nfor x in range(2, 100001):\\n\\tans[x] = max(ans[x - 1], ans[x - 2] + count[x] * x)\\nprint(ans[100000])\\n\", \"import sys\\nimport math\\nimport collections\\nimport bisect\\nfrom collections import deque as queue\\n\\ndef get_ints():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef get_list():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef get_string():\\n\\treturn sys.stdin.readline().strip()\\nfor t in range(1):\\n\\tn = int(input())\\n\\tarr = get_list()\\n\\tcounter = collections.Counter(arr)\\n\\tans = [0]\\n\\tif 1 in counter:\\n\\t\\tans.append(counter[1])\\n\\telse:\\n\\t\\tans.append(0)\\n\\tfor i in range(2, 10 ** 5 + 1):\\n\\t\\tval = 0\\n\\t\\tif i in counter:\\n\\t\\t\\tval = i * counter[i]\\n\\t\\tto_ap = max(ans[i - 1], ans[i - 2] + val)\\n\\t\\tans.append(to_ap)\\n\\tprint(ans[-1])\\n\", \"from collections import Counter\\nn = int(input())\\nx = 0\\na = []\\nfor i in map(int, input().split()):\\n\\tif i > x:\\n\\t\\tx = i\\n\\ta.append(i)\\ndp = [0] * (x + 1)\\na = Counter(a)\\ndp[1] = a[1]\\nfor i in range(2, x + 1):\\n\\tdp[i] = max(dp[i - 1], i * a[i] + dp[i - 2])\\nprint(dp[x])\\n\", \"n = int(input())\\nf = [0] * 100002\\nt = list(map(int, input().split()))\\nfor i in t:\\n\\tf[i] += i\\na = 0\\nb = 0\\nfor i in f:\\n\\ttmp = a\\n\\ta = max(a, b)\\n\\tb = tmp + i\\nprint(a)\\n\", \"n = int(input())\\nlt = [0] * 100009\\nfor i in map(int, input().split()):\\n\\tlt[i] += i\\na = b = 0\\nfor i in lt:\\n\\tc = i + b\\n\\tb = a\\n\\ta = max(a, c)\\nprint(a)\\n\", \"from sys import stdin\\nn = int(input())\\ndp = [0] * 100001\\nfor i in map(int, stdin.readline().split()):\\n\\tdp[i] += i\\na = 0\\nb = 0\\nfor i in dp:\\n\\t(a, b) = (max(a, b + i), a)\\nprint(a)\\n\", \"from collections import Counter\\nnum = int(input())\\ndata = [int(i) for i in input().split()]\\ncnt = Counter(data)\\ndp = [0] * (max(data) + 1)\\ndp[1] = cnt[1]\\nfor i in range(2, max(data) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[max(data)])\\n\", \"length = int(input())\\nnumbers = [int(g) for g in input().split()]\\nfreq = [0] * (max(numbers) + 1)\\nfor j in numbers:\\n\\tfreq[j] += 1\\ndp = [0] * len(freq)\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, len(freq)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\nprint(dp[-1])\\n\", \"maximum = 100007\\ncount = [0 for i in range(maximum)]\\ndp = [0 for i in range(maximum)]\\nn = int(input())\\nA = list(map(int, input().split()))\\nfor i in A:\\n\\tcount[i] += 1\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, maximum):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[maximum - 1])\\n\", \"n = int(input())\\nd = [0] * 100001\\nm = map(int, input().split())\\nfor i in m:\\n\\td[i] += i\\n(a, b) = (0, 0)\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = input().split()\\na = [int(i) for i in input().split()]\\nmaxnumber = max((number for number in a))\\ncount = [0]\\nfor number in range(maxnumber):\\n\\tcount.append(0)\\nfor i in range(len(a)):\\n\\tcount[a[i]] = count[a[i]] + 1\\ndp = [0, count[1]]\\nfor i in range(2, maxnumber + 1):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + i * count[i]))\\nprint(dp[maxnumber])\\n\", \"n = int(input())\\nnumber = list(map(int, input().split()))\\noption = {}\\nfor j in number:\\n\\tif j in option:\\n\\t\\toption[j] += j\\n\\telse:\\n\\t\\toption[j] = j\\ndp = [0] * (max(number) + 1)\\ndp[0] = 0\\ndp[1] = option[1] if 1 in option else 0\\nfor i in range(2, max(number) + 1):\\n\\tif i in option:\\n\\t\\tdp[i] = max(dp[i - 2] + option[i], dp[i - 1])\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1]\\nprint(max(dp))\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\ndp = [0] * 100001\\nfor x in L:\\n\\tdp[x] += x\\n(a, b) = (0, 0)\\nfor y in dp:\\n\\t(a, b) = (max(a, y + b), a)\\nprint(a)\\n\", \"n = int(input())\\npoints = list(map(int, input().split()))\\nmaxNum = max(points)\\ncount = [0 for x in range(maxNum + 1)]\\ndp = [0 for x in range(maxNum + 1)]\\nscore = 0\\nfor i in range(n):\\n\\tcount[points[i]] += 1\\nfor i in range(1, maxNum + 1):\\n\\tdp[i] = max(count[i] * i + dp[i - 2], dp[i - 1])\\nprint(max(dp))\\n\", \"N = int(input())\\na = list(map(int, input().strip().split()))\\ndiff = 1\\nmaxi = 0\\nmaxElt = max(a)\\narr = [0 for i in range(maxElt + 1)]\\nfor i in a:\\n\\tarr[i] += i\\ndp = [0 for i in range(maxElt + 1)]\\nfor i in range(diff + 1):\\n\\tdp[i] = arr[i]\\nmaxi = dp[1]\\nfor i in range(diff + 1, maxElt + 1):\\n\\tcurr = arr[i] + dp[i - diff - 1]\\n\\tif curr > maxi:\\n\\t\\tmaxi = curr\\n\\tdp[i] = maxi\\nprint(max(dp))\\n\", \"n = int(input())\\nls = [0] * 100010\\nmax_n = 0\\ntot = 0\\nfor i in input().split():\\n\\tx = int(i)\\n\\tls[x] += x\\n\\tmax_n = max(max_n, x)\\nfor i in range(2, max_n + 1):\\n\\tls[i] = max(ls[i - 1], ls[i - 2] + ls[i])\\nprint(ls[max_n])\\n\", \"n = int(input())\\nlist_number = [int(i) for i in input().split(' ')]\\nmaxi = 0\\nfor i in list_number:\\n\\tif i > maxi:\\n\\t\\tmaxi = i\\ncount = {}\\nfor i in range(1, maxi + 1):\\n\\tcount[i] = 0\\nfor i in list_number:\\n\\tcount[i] += 1\\nmax_score = []\\nfor i in range(1, maxi + 1):\\n\\tif i == 1:\\n\\t\\tscore = count[i] * i\\n\\telif i == 2:\\n\\t\\tscore = max(max_score[0], count[i] * i)\\n\\telif i == 3:\\n\\t\\tscore = max(max_score[0] + count[i] * i, count[i - 1] * (i - 1))\\n\\telif count[i] == 0:\\n\\t\\tscore = max_score[-1]\\n\\telse:\\n\\t\\tscore = max(max_score[i - 3] + count[i] * i, max_score[i - 4] + count[i - 1] * (i - 1))\\n\\tmax_score.append(score)\\nprint(max_score[-1])\\n\", \"import sys\\n\\ndef readInts():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef readInt():\\n\\treturn int(sys.stdin.readline())\\n\\ndef print(x):\\n\\tsys.stdout.write(str(x) + '\\\\n')\\n\\ndef solve():\\n\\tMAX_N = int(100000.0 + 1)\\n\\tn = readInt()\\n\\ta = readInts()\\n\\tcount = [0] * (MAX_N + 1)\\n\\tfor x in a:\\n\\t\\tcount[x] += 1\\n\\tdp = [0] * (MAX_N + 1)\\n\\tdp[1] = count[1]\\n\\tfor last in range(2, MAX_N + 1):\\n\\t\\tdp[last] = max(dp[last - 1], dp[last - 2] + last * count[last])\\n\\tprint(dp[MAX_N])\\n\\ndef main():\\n\\tt = 1\\n\\tfor _ in range(t):\\n\\t\\tsolve()\\nmain()\\n\", \"import sys\\nimport math\\nimport itertools\\nimport functools\\nimport collections\\nimport operator\\nimport fileinput\\nimport copy\\nORDA = 97\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef lcm(a, b):\\n\\treturn abs(a * b) // math.gcd(a, b)\\n\\ndef revn(n):\\n\\treturn str(n)[::-1]\\n\\ndef dd():\\n\\treturn collections.defaultdict(int)\\n\\ndef ddl():\\n\\treturn collections.defaultdict(list)\\n\\ndef sieve(n):\\n\\tif n < 2:\\n\\t\\treturn list()\\n\\tprime = [True for _ in range(n + 1)]\\n\\tp = 3\\n\\twhile p * p <= n:\\n\\t\\tif prime[p]:\\n\\t\\t\\tfor i in range(p * 2, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 2\\n\\tr = [2]\\n\\tfor p in range(3, n + 1, 2):\\n\\t\\tif prime[p]:\\n\\t\\t\\tr.append(p)\\n\\treturn r\\n\\ndef divs(n, start=1):\\n\\tr = []\\n\\tfor i in range(start, int(math.sqrt(n) + 1)):\\n\\t\\tif n % i == 0:\\n\\t\\t\\tif n / i == i:\\n\\t\\t\\t\\tr.append(i)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tr.extend([i, n // i])\\n\\treturn r\\n\\ndef divn(n, primes):\\n\\tdivs_number = 1\\n\\tfor i in primes:\\n\\t\\tif n == 1:\\n\\t\\t\\treturn divs_number\\n\\t\\tt = 1\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tt += 1\\n\\t\\t\\tn //= i\\n\\t\\tdivs_number *= t\\n\\ndef prime(n):\\n\\tif n == 2:\\n\\t\\treturn True\\n\\tif n % 2 == 0 or n <= 1:\\n\\t\\treturn False\\n\\tsqr = int(math.sqrt(n)) + 1\\n\\tfor d in range(3, sqr, 2):\\n\\t\\tif n % d == 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef convn(number, base):\\n\\tnewnumber = 0\\n\\twhile number > 0:\\n\\t\\tnewnumber += number % base\\n\\t\\tnumber //= base\\n\\treturn newnumber\\n\\ndef cdiv(n, k):\\n\\treturn n // k + (n % k != 0)\\nmax_ = 10 ** 5 + 1\\nn = ii()\\narr = li()\\nbrr = [0] * max_\\nfor i in range(n):\\n\\tbrr[arr[i]] += 1\\nf1 = brr[0]\\nf2 = brr[1]\\nans = 0\\nfor i in range(2, max_):\\n\\tans = max(f2, f1 + brr[i] * i)\\n\\t(f1, f2) = (f2, ans)\\nprint(ans)\\n\", \"n = int(input())\\nd = [0] * 100001\\nfor c in map(int, input().rstrip().split()):\\n\\td[c] += c\\na = b = 0\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"n = 100500\\na = [0] * n\\ninput()\\nfor i in map(int, input().split()):\\n\\ta[i] += i\\ndp = [0] * n\\nfor i in range(1, n):\\n\\tif i == 1:\\n\\t\\tdp[i] = a[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i])\\nprint(dp[n - 1])\\n\", \"re = [0] * 100001\\nd = [0] * 100001\\nans = 0\\nn = input()\\nfor i in map(int, input().split()):\\n\\tre[i] += i\\nfor i in range(100000):\\n\\tans = max(re[i], re[i + 1] + d[i - 1], ans)\\n\\td[i + 1] = ans\\nprint(ans)\\n\", \"n = int(input())\\nls = list(map(int, input().split()))\\nmem = {}\\nfor i in ls:\\n\\tif i not in mem:\\n\\t\\tmem[i] = 1\\n\\telse:\\n\\t\\tmem[i] += 1\\nvalues = {}\\nlst = sorted(list(mem.keys()))\\nl = len(lst)\\nfor i in lst:\\n\\tvalues[i] = i * mem[i]\\ndp = [[0, 0] for _ in range(l)]\\ndp[0] = [values[lst[0]], 0]\\nprev = lst[0]\\nfor i in range(1, l):\\n\\tif lst[i] == prev + 1:\\n\\t\\tdp[i] = [values[lst[i]] + dp[i - 1][1], max(dp[i - 1])]\\n\\telse:\\n\\t\\tdp[i] = [values[lst[i]] + max(dp[i - 1]), max(dp[i - 1])]\\n\\tprev = lst[i]\\nprint(max(dp[l - 1]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncount = [0] * 100005\\nfor i in range(n):\\n\\tcount[a[i]] += 1\\ndp = [0] * 100005\\ndp[1] = count[1]\\nfor i in range(2, 100005):\\n\\tdp[i] = max(dp[i - 2] + count[i] * i, dp[i - 1])\\nprint(dp[100004])\\n\", \"input()\\nL = [0] * 100001\\nfor val in map(int, input().split()):\\n\\tL[val] += val\\na = 0\\nb = 0\\nfor elem in L:\\n\\t(a, b) = (max(a, elem + b), a)\\nprint(a)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nn = max(a) + 1\\ng = [0] * n\\nfor i in a:\\n\\tg[i] += i\\nif n == 1:\\n\\tprint(g[0])\\nelif n == 2:\\n\\tprint(max(g))\\nelif n == 3:\\n\\tprint(max(g[2] + g[0], g[1]))\\nelse:\\n\\tg[2] += g[0]\\n\\tfor i in range(3, n):\\n\\t\\tg[i] += max(g[i - 2], g[i - 3])\\n\\tprint(max(g))\\n\", \"input()\\ncnt = {}\\nfor x in input().split():\\n\\tx = int(x)\\n\\tif x in cnt:\\n\\t\\tcnt[x] += 1\\n\\telse:\\n\\t\\tcnt[x] = 1\\nstate = [0, 0]\\nfor x in range(1, 10 ** 5 + 1):\\n\\tcurr = x * cnt[x] if x in cnt else 0\\n\\tacc = max(curr + state[0], state[1])\\n\\tstate = [state[1], acc]\\nprint(state[1])\\n\", \"n = int(input())\\nl = list(map(int, input().split(' ')))\\nfrom collections import Counter\\ncount = Counter(l)\\nlim = max(l)\\narr = [0] * (lim + 1)\\narr[1] = count[1] * 1\\nfor i in range(2, lim + 1):\\n\\tarr[i] = max(arr[i - 1], arr[i - 2] + count[i] * i)\\nprint(arr[lim])\\n\", \"def ans(L):\\n\\tif len(L) == 1:\\n\\t\\treturn L[0]\\n\\tif len(L) == 2:\\n\\t\\treturn max(L[0], L[1])\\n\\telse:\\n\\t\\tA = [0] * len(L)\\n\\t\\tA[0] = L[0]\\n\\t\\tA[1] = max(L[0], L[1])\\n\\t\\tA[2] = max(L[0] + L[2], L[1])\\n\\t\\tfor i in range(3, len(L)):\\n\\t\\t\\tA[i] = max(A[i - 2] + L[i], A[i - 3] + L[i - 1])\\n\\t\\treturn max(A)\\nn = int(input())\\nL = input().split()\\nL = [int(i) for i in L]\\nm = max(L)\\nvalue = [0] * m\\nfor i in range(0, m):\\n\\tvalue[i] = i + 1\\ncount = [0] * m\\nfor i in L:\\n\\tcount[i - 1] += 1\\ntotal = [0] * m\\nfor i in range(0, m):\\n\\ttotal[i] = count[i] * value[i]\\nprint(ans(total))\\n\", \"n = int(input())\\nnums = [int(x) for x in input().split()]\\nmaxnum = max(nums)\\ntable = [0] * (maxnum + 1)\\nfor x in nums:\\n\\ttable[x] += x\\na = b = 0\\nfor i in range(1, maxnum + 1):\\n\\t(a, b) = (b, max(a + table[i], b))\\nprint(b)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nMAX = int(100000.0) + 1\\nc = [0] * MAX\\nfor i in a:\\n\\tc[i] += 1\\nf = [0] * MAX\\nf[1] = c[1]\\nfor i in range(2, MAX):\\n\\tf[i] = max(f[i - 1], f[i - 2] + c[i] * i)\\nprint(f[-1])\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\nm = max(l)\\ncount = [0] * (m + 1)\\nfor i in range(n):\\n\\tcount[l[i]] += 1\\nf = [0] * (m + 1)\\nf[1] = count[1]\\nfor i in range(2, m + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * count[i])\\nprint(f[m])\\n\", \"MAX = int(100023)\\ndp = [0] * MAX\\nfreq = [0] * MAX\\nn = int(input())\\ntmp = list(map(int, input().split()))\\nfor i in tmp:\\n\\tif i != ' ':\\n\\t\\tfreq[int(i)] = freq[int(i)] + 1\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, MAX):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * freq[i])\\nprint(dp[100000])\\n\", \"vetor_1 = [0] * (10 ** 5 + 1)\\nvetor_2 = [0] * (10 ** 5 + 1)\\nn = int(input())\\nentrada = input()\\nentrada_str = list(entrada.split(' '))\\nentrada_int = list(map(int, entrada_str))\\nfor i in range(n):\\n\\tnum = entrada_int[i]\\n\\tvetor_1[num] += 1\\nfor i in range(1, 10 ** 5 + 1):\\n\\tnum = 0\\n\\tif i - 2 >= 0:\\n\\t\\tnum = vetor_2[i - 2]\\n\\tif i - 3 >= 0:\\n\\t\\tnum = max(num, vetor_2[i - 3])\\n\\tvetor_2[i] = vetor_1[i] * i + num\\nprint(max(vetor_2[-1], vetor_2[-2]))\\n\", \"N = int(input())\\nl = list(map(int, input().split()))\\nn = max(l)\\nm = [[0, 0, 0] for i in range(n)]\\nfor i in range(len(l)):\\n\\tm[l[i] - 1][0] += 1\\nm[0][1] = m[0][0]\\nfor i in range(1, n):\\n\\tm[i][1] = m[i - 1][2] + m[i][0] * (i + 1)\\n\\tm[i][2] = max(m[i - 1][1], m[i - 1][2])\\nprint(max(m[n - 1][1], m[n - 1][2]))\\n\", \"from collections import defaultdict\\nimport sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\nd = [0] * 100007\\nm = defaultdict(lambda : 0)\\nmx = 0\\nfor i in range(0, n):\\n\\tm[a[i]] += 1\\n\\tmx = max(mx, a[i])\\nd[0] = 0\\nd[1] = m[1]\\nfor i in range(2, mx + 1):\\n\\td[i] = max(m[i] * i + d[i - 2], d[i - 1])\\nprint(d[mx])\\n\", \"n = int(input())\\nx = [int(i) for i in input().split()]\\nbiggest = max(x)\\np = 0\\nnum = [0] * (biggest + 1)\\ndp0 = 0\\nfor i in x:\\n\\tnum[i] += 1\\ndp1 = num[1]\\nfor i in range(2, biggest + 1):\\n\\ttemp = dp1\\n\\tdp1 = max(dp0 + num[i] * i, dp1)\\n\\tdp0 = temp\\nprint(dp1)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nl = max(a)\\nf = [0] * (l + 2)\\nco = [0] * (l + 1)\\nf[0] = 0\\nc = 0\\ni = 0\\nj = 0\\nwhile j < n:\\n\\tif a[i] == a[j]:\\n\\t\\ty = a[i]\\n\\t\\tc = c + 1\\n\\t\\tj = j + 1\\n\\telse:\\n\\t\\tco[y] = c\\n\\t\\tc = 0\\n\\t\\ti = j\\nco[y] = c\\nf[1] = co[1]\\ni = 2\\nwhile i <= l:\\n\\tf[i] = max(f[i - 1], f[i - 2] + co[i] * i)\\n\\ti = i + 1\\nprint(max(f))\\n\", \"from sys import stdin, stdout\\n\\ndef INI():\\n\\treturn int(stdin.readline())\\n\\ndef INL():\\n\\treturn [int(_) for _ in stdin.readline().split()]\\n\\ndef INS():\\n\\treturn stdin.readline()\\n\\ndef MOD():\\n\\treturn pow(10, 9) + 7\\n\\ndef OPS(ans):\\n\\tstdout.write(str(ans) + '\\\\n')\\n\\ndef OPL(ans):\\n\\t[stdout.write(str(_) + ' ') for _ in ans]\\n\\tstdout.write('\\\\n')\\nn = INI()\\nX = INL()\\nD = [0] * (pow(10, 5) + 1)\\nfor _ in X:\\n\\tD[_] += _\\nans = max(D[0], D[1])\\nfor _ in range(2, pow(10, 5) + 1):\\n\\tans = max(D[_ - 1], D[_] + D[_ - 2])\\n\\tD[_] = max(D[_] + D[_ - 2], D[_ - 1])\\nOPS(ans)\\n\", \"import sys\\n\\ndef findmax2(nums, n):\\n\\tinter = {}\\n\\tinter[0] = 0\\n\\tinter[1] = nums.get(1, 0)\\n\\tfor i in range(2, n + 1):\\n\\t\\tinter[i] = max(inter[i - 2] + nums.get(i, 0), inter[i - 1])\\n\\treturn inter[n]\\ncount = int(sys.stdin.readline())\\nnums = list(map(int, sys.stdin.readline().split()))\\npnums = {}\\nfor n in nums:\\n\\tpnums[n] = pnums.get(n, 0) + n\\nprint(findmax2(pnums, max(nums)))\\n\", \"input()\\ngemy = [0] * 10 ** 6\\ngemy2 = [0] * 10 ** 6\\nfor a in map(int, input().split()):\\n\\tgemy[a] += 1\\ngemy2[1] = gemy[1]\\nfor i in range(2, 10 ** 6):\\n\\tgemy2[i] = max(gemy2[i - 1], gemy2[i - 2] + i * gemy[i])\\nprint(gemy2[-1])\\n\", \"n = int(input())\\nlst = [int(k) for k in input().split()]\\nti = [0] * 100002\\nfor k in lst:\\n\\tti[k] += k\\na = 0\\nb = 0\\nfor k in ti:\\n\\t(a, b) = (max(a, b), a + k)\\nprint(a)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\ncount = [0] * 100001\\nfor i in arr:\\n\\tcount[i] += 1\\ndp = [0] * 100001\\ndp[1] = count[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(max(dp))\\n\", \"from collections import Counter\\nn = int(input())\\nsequence = list(map(int, input().split()))\\nnumset = list(set(sequence))\\nk = len(numset)\\nnumset.sort()\\ncnt = Counter(sequence)\\nf = [0] * (k + 1)\\nf[1] = cnt[numset[0]] * numset[0]\\nf[0] = 0\\nfor i in range(2, k + 1):\\n\\tif numset[i - 1] - numset[i - 2] == 1:\\n\\t\\tf[i] = max(f[i - 1], f[i - 2] + cnt[numset[i - 1]] * numset[i - 1])\\n\\telse:\\n\\t\\tf[i] = numset[i - 1] * cnt[numset[i - 1]] + f[i - 1]\\nprint(f[k])\\n\", \"from collections import Counter\\n\\ndef f(i_count, fi1, fi2, i):\\n\\treturn max(fi1, fi2 + i_count * i)\\nn = int(input())\\ninput_data = []\\ninput_data = [int(value) for value in input().split()]\\ncount = Counter(input_data)\\nf_i_2 = 0\\nf_i_1 = count[1]\\nfor i in range(2, max(input_data) + 1):\\n\\ttemp = f_i_1\\n\\tf_i_1 = f(count[i], f_i_1, f_i_2, i)\\n\\tf_i_2 = temp\\nprint(f_i_1)\\n\", \"from __future__ import print_function\\nimport sys\\nfrom collections import *\\nfrom heapq import *\\ntry:\\n\\tinput = raw_input\\nexcept:\\n\\tpass\\n\\ndef read_int_line():\\n\\treturn [int(x) for x in input().split(' ')]\\n\\ndef read_int():\\n\\treturn int(input())\\n\\nclass TreeNode(object):\\n\\n\\tdef __init__(self, x):\\n\\t\\tself.val = x\\n\\t\\tself.left = None\\n\\t\\tself.right = None\\n\\n\\tdef __str__(self):\\n\\t\\tq = deque()\\n\\t\\tans = []\\n\\t\\tq.append(self)\\n\\t\\tans.append(self.val)\\n\\t\\twhile q:\\n\\t\\t\\tcur = q.popleft()\\n\\t\\t\\tans.append(cur.left.val if cur.left else 'null')\\n\\t\\t\\tans.append(cur.right.val if cur.right else 'null')\\n\\t\\t\\tif cur.left:\\n\\t\\t\\t\\tq.append(cur.left)\\n\\t\\t\\tif cur.right:\\n\\t\\t\\t\\tq.append(cur.right)\\n\\t\\twhile ans and ans[-1] == 'null':\\n\\t\\t\\tans.pop()\\n\\t\\treturn str(ans).replace(\\\"'null'\\\", 'null')\\n\\ndef toTreeNode(s):\\n\\tl = eval(s.replace('null', 'None'))\\n\\tn = len(l)\\n\\tif not n:\\n\\t\\treturn None\\n\\troot = TreeNode(l[0])\\n\\tq = deque()\\n\\tq.append(root)\\n\\ti = 1\\n\\twhile q and i < n:\\n\\t\\tcur = q.popleft()\\n\\t\\tif l[i] != None:\\n\\t\\t\\tcur.left = TreeNode(l[i])\\n\\t\\t\\tq.append(cur.left)\\n\\t\\ti += 1\\n\\t\\tif i >= n:\\n\\t\\t\\tbreak\\n\\t\\tif l[i] != None:\\n\\t\\t\\tcur.right = TreeNode(l[i])\\n\\t\\t\\tq.append(cur.right)\\n\\t\\ti += 1\\n\\treturn root\\n\\nclass Djs:\\n\\n\\tdef __init__(self, n):\\n\\t\\tself.w = [1] * n\\n\\t\\tself.p = [-1] * n\\n\\n\\tdef find(self, x):\\n\\t\\tp = self.p[x]\\n\\t\\tif p == -1:\\n\\t\\t\\treturn x\\n\\t\\telse:\\n\\t\\t\\tself.p[x] = self.find(p)\\n\\t\\t\\treturn self.p[x]\\n\\n\\tdef union(self, x, y):\\n\\t\\t(x, y) = (self.find(x), self.find(y))\\n\\t\\tif x == y:\\n\\t\\t\\treturn\\n\\t\\tif self.w[x] > self.w[y]:\\n\\t\\t\\t(x, y) = (y, x)\\n\\t\\tself.p[x] = y\\n\\t\\tself.w[y] += self.w[x]\\n\\n\\tdef roots(self):\\n\\t\\treturn [x for (x, y) in enumerate(self.p) if y == -1]\\n\\ndef doit():\\n\\tn = read_int()\\n\\tarr = read_int_line()\\n\\tans = 0\\n\\tcnt = Counter(arr)\\n\\tkvs = [(k, v) for (k, v) in cnt.items()]\\n\\tkvs.sort()\\n\\tmaxEndWithMe = [0] * (len(kvs) + 1)\\n\\tmaxSoFar = [0] * (len(kvs) + 1)\\n\\tfor (i, (k, v)) in enumerate(kvs):\\n\\t\\tif i == 0:\\n\\t\\t\\tmaxEndWithMe[i + 1] = k * v\\n\\t\\t\\tmaxSoFar[i + 1] = k * v\\n\\t\\telse:\\n\\t\\t\\tif kvs[i - 1][0] + 1 == k:\\n\\t\\t\\t\\tmaxEndWithMe[i + 1] = maxSoFar[i - 1] + k * v\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmaxEndWithMe[i + 1] = maxSoFar[i] + k * v\\n\\t\\t\\tmaxSoFar[i + 1] = max(maxSoFar[i], maxEndWithMe[i + 1])\\n\\tprint('%d' % maxSoFar[-1])\\ntry:\\n\\twhile True:\\n\\t\\tdoit()\\nexcept EOFError:\\n\\tpass\\n\", \"input()\\nseq = list(map(int, input().split()))\\nmn = min(seq)\\nmx = max(seq)\\nl = [0] * (mx + 2)\\nfor i in seq:\\n\\tl[i] += 1\\ndp = [0] * (mx + 2)\\ndp[1] = l[1]\\nans = 0\\nfor i in range(max(mn, 2), mx + 1):\\n\\tdp[i] = max(l[i] * i + dp[i - 2], dp[i - 1])\\nans = dp[mx]\\nprint(ans)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nbig = max(a) + 1\\nb = [0 for i in range(big)]\\ndp = [[0 for i in range(2)] for i in range(big)]\\nfor i in range(n):\\n\\tb[a[i]] += 1\\nfor i in range(1, big):\\n\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\tdp[i][1] = dp[i - 1][0] + b[i] * i\\nprint(max(dp[big - 1][0], dp[big - 1][1]))\\n\", \"n = int(input())\\nl = [int(k) for k in input().split()]\\nt = [0] * 100002\\nfor k in l:\\n\\tt[k] += k\\na = 0\\nb = 0\\nfor k in t:\\n\\t(a, b) = (max(a, b), a + k)\\nprint(a)\\n\", \"from sys import stdin\\na = [[int(y) for y in x.rstrip().split()] for x in stdin.readlines()][1]\\ns = [0] * 100002\\nfor i in a:\\n\\ts[i] += i\\na = b = 0\\nfor i in s:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\nnum = [0] * 100010\\nMax = 0\\nfor i in range(n):\\n\\tnum[L[i]] += 1\\n\\tif L[i] > Max:\\n\\t\\tMax = L[i]\\ndp = [0] * (Max + 1)\\ndp[1] = num[1]\\nfor i in range(2, Max + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + num[i] * i)\\nprint(dp[Max])\\n\", \"def Boredom(n, a):\\n\\tcnt = CaculateCount(n, a)\\n\\tresult = [-1] * (max(a) + 1)\\n\\tresult[0] = 0\\n\\tif max(a) >= 1:\\n\\t\\tresult[1] = cnt[1]\\n\\ti = 2\\n\\tmaxA = max(a)\\n\\twhile i <= maxA:\\n\\t\\tif result[i] == -1:\\n\\t\\t\\tresult[i] = max(result[i - 1], result[i - 2] + cnt[i])\\n\\t\\ti += 1\\n\\tprint(result[maxA])\\n\\ndef CaculateCount(n, a):\\n\\ti = 0\\n\\tcnt = [0] * (max(a) + 1)\\n\\twhile i < n:\\n\\t\\tcnt[a[i]] += a[i]\\n\\t\\ti += 1\\n\\treturn cnt\\nn = int(input())\\na = [int(x) for x in input().split()]\\nBoredom(n, a)\\n\", \"n = int(input())\\nnumbers = [int(x) for x in input().split()]\\ncounts = {}\\nfor number in numbers:\\n\\tif number in counts:\\n\\t\\tcounts[number] += 1\\n\\telse:\\n\\t\\tcounts[number] = 1\\nord_numbers = sorted(counts.keys())\\nresult = [0] * (len(ord_numbers) + 1)\\nresult[1] = ord_numbers[0] * counts[ord_numbers[0]]\\nfor i in range(1, len(ord_numbers)):\\n\\tif ord_numbers[i] - 1 == ord_numbers[i - 1]:\\n\\t\\tresult[i + 1] = max(result[i], ord_numbers[i] * counts[ord_numbers[i]] + result[i - 1])\\n\\telse:\\n\\t\\tresult[i + 1] = ord_numbers[i] * counts[ord_numbers[i]] + result[i]\\nprint(result[-1])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ndp = [0 for i in range(100005)]\\nfor i in range(len(a)):\\n\\tdp[a[i]] += 1\\nf = 0\\nfor i in range(len(dp)):\\n\\tif dp[i] != 0 or f != 0:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + dp[i] * i)\\n\\t\\tf = 1\\nprint(dp[len(dp) - 1])\\n\", \"import sys\\nimport collections\\nno = int(sys.stdin.readline())\\ntest = [int(x) for x in sys.stdin.readline()[:-1].split(' ')]\\ndic = collections.defaultdict(int)\\nfor i in test:\\n\\tdic[i] += 1\\nlength = max(dic.keys()) + 1\\ndp = [0] * length\\nfor i in range(1, length):\\n\\tif i == 1:\\n\\t\\tdp[i] = dic[1]\\n\\telse:\\n\\t\\tdp[i] = max(i * dic[i] + dp[i - 2], dp[i - 1])\\nprint(dp[-1])\\n\", \"def boredom(n, arr):\\n\\tH = {}\\n\\tfor c in arr:\\n\\t\\tH[c] = H.get(c, 0) + 1\\n\\ttemp = [c for c in H]\\n\\ttemp.sort()\\n\\tdp = {}\\n\\tfor i in range(len(temp)):\\n\\t\\tdp[i] = {0: 0, 1: 0}\\n\\t\\tif i == 0:\\n\\t\\t\\tdp[i][1] = temp[i] * H[temp[i]]\\n\\t\\telif temp[i] != temp[i - 1] + 1:\\n\\t\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\t\\tdp[i][1] = H[temp[i]] * temp[i] + dp[i][0]\\n\\t\\telse:\\n\\t\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\t\\tdp[i][1] = H[temp[i]] * temp[i] + dp[i - 1][0]\\n\\treturn max(dp[len(temp) - 1][0], dp[len(temp) - 1][1])\\nn = int(input())\\narr = list(map(int, input().split()))\\nprint(boredom(n, arr))\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\ncount = [0] * 100001\\nresp = [0] * 100001\\nfor i in range(n):\\n\\tcount[arr[i]] += 1\\nresp[1] = count[1]\\nfor i in range(2, 100001):\\n\\tresp[i] = max(resp[i - 1], resp[i - 2] + i * count[i])\\nprint(resp[100000])\\n\", \"n = int(input())\\nlist1 = input().split()\\nlist2 = [int(i) for i in list1]\\nlist3 = [0 for i in range(max(list2))]\\nfor i in range(n):\\n\\tlist3[list2[i] - 1] += list2[i]\\nans = [0 for i in range(len(list3))]\\nans[0] = list3[0]\\nans[1] = max(list3[0], list3[1])\\nfor i in range(1, len(list3) - 1):\\n\\tans[i + 1] = max(ans[i], ans[i - 1] + list3[i + 1])\\nprint(ans[-1])\\n\", \"from collections import defaultdict\\nn = int(input())\\nd = defaultdict(int)\\nfor i in map(int, input().split()):\\n\\td[i] += 1\\nl = max(d.keys()) + 1\\ndp = [0] * l\\ndp[1] = d[1]\\nfor i in range(2, l):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i] * i)\\nprint(dp[l - 1])\\n\", \"from collections import *\\n\\ndef dp():\\n\\tfor i in range(100001):\\n\\t\\tmem[i] += coun[i] * i + max(mem[i - 2], mem[i - 3])\\n\\treturn max(mem[100000], mem[99999])\\n(n, a) = (int(input()), list(map(int, input().split())))\\n(coun, a, mem) = (defaultdict(int, Counter(a)), sorted(set(a)), defaultdict(int))\\nprint(dp())\\n\", \"n = int(input())\\na = [int(_) for _ in input().split()]\\nscore = [0] * (max(a) + 1)\\nfor x in a:\\n\\tscore[x] += x\\ndp = [0] * len(score)\\ndp[0] = score[0]\\ndp[1] = max(score[0], score[1])\\nfor i in range(2, len(dp)):\\n\\tdp[i] = max(dp[i - 1], score[i] + dp[i - 2])\\nprint(dp[-1])\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nl = [0] * (10 ** 5 + 1)\\nma = 0\\nfor i in a:\\n\\tl[i] += 1\\n\\tma = max(ma, i)\\nf = [0] * (ma + 1)\\nf[0] = 0\\nf[1] = l[1]\\nfor i in range(2, ma + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + l[i] * i)\\nprint(f[ma])\\n\", \"mem = {}\\n\\ndef value(board, n):\\n\\tif board == []:\\n\\t\\treturn 0\\n\\tif len(board) == 1:\\n\\t\\treturn board[0][0] * board[0][1]\\n\\tif n in mem:\\n\\t\\treturn mem[n]\\n\\tskip = value(board[1:], n + 1)\\n\\tuse = board[0][0] * board[0][1]\\n\\tif board[0][0] == board[1][0] - 1:\\n\\t\\tuse += value(board[2:], n + 2)\\n\\telse:\\n\\t\\tuse += value(board[1:], n + 1)\\n\\tout = max(skip, use)\\n\\tmem[n] = out\\n\\treturn out\\nn = int(input())\\nl = input()\\nl = list(map(int, l.split()))\\nboard = {}\\nfor i in l:\\n\\tif i in board:\\n\\t\\tboard[i] += 1\\n\\telse:\\n\\t\\tboard[i] = 1\\nboard = list(board.items())\\nboard.sort()\\nboard.reverse()\\nmem = {}\\nmem[-1] = 0\\nmem[0] = board[0][0] * board[0][1]\\nfor i in range(1, len(board)):\\n\\tuse = board[i][0] * board[i][1]\\n\\tif board[i][0] == board[i - 1][0] - 1:\\n\\t\\tuse += mem[i - 2]\\n\\telse:\\n\\t\\tuse += mem[i - 1]\\n\\tskip = mem[i - 1]\\n\\tmem[i] = max(skip, use)\\nprint(mem[len(board) - 1])\\n\", \"from sys import stdin as si\\nfrom collections import Counter as C\\n\\nclass Solution(object):\\n\\n\\tdef toing(self, M):\\n\\t\\tM = sorted(M)\\n\\t\\tD = C(M)\\n\\t\\tA = []\\n\\t\\tfor (k, v) in D.items():\\n\\t\\t\\tst = bool(k - 1 in D)\\n\\t\\t\\tA.append((k, st, v * k))\\n\\t\\tdel D\\n\\t\\tself.d = {}\\n\\t\\treturn self.bazinga(0, len(A), A)[1]\\n\\n\\tdef get_i(self, y, D):\\n\\t\\tif D[1]:\\n\\t\\t\\treturn y - 2\\n\\t\\telse:\\n\\t\\t\\treturn y - 1\\n\\n\\tdef bazinga(self, i, x, A):\\n\\t\\tif i == x:\\n\\t\\t\\treturn (i - 1, 0)\\n\\t\\tout = None\\n\\t\\tif i == x - 1:\\n\\t\\t\\tif A[i][2] >= A[i - 1][2]:\\n\\t\\t\\t\\tout = (self.get_i(i, A[i]), A[i][2])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tout = (self.get_i(i, A[i]) - 1, A[i - 1][2])\\n\\t\\t\\tself.d[i] = out\\n\\t\\telse:\\n\\t\\t\\t(itm, current_max) = self.bazinga(i + 1, x, A)\\n\\t\\t\\tif itm in self.d:\\n\\t\\t\\t\\treturn self.d[itm]\\n\\t\\t\\tif itm < 0:\\n\\t\\t\\t\\tout = (itm, current_max)\\n\\t\\t\\telif itm == 0:\\n\\t\\t\\t\\tout = (0, A[0][2] + current_max)\\n\\t\\t\\telif A[itm][2] >= A[itm - 1][2]:\\n\\t\\t\\t\\tout = (self.get_i(itm, A[itm]), A[itm][2] + current_max)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tout = (self.get_i(itm, A[itm]) - 1, A[itm - 1][2] + current_max)\\n\\t\\t\\tself.d[itm] = out\\n\\t\\t\\ti = itm\\n\\t\\treturn self.d[i]\\n\\n\\tdef toing1(self, A):\\n\\t\\td = [0] * 100001\\n\\t\\tfor x in A:\\n\\t\\t\\td[x] += x\\n\\t\\ta = b = 0\\n\\t\\tfor i in d:\\n\\t\\t\\t(a, b) = (max(a, i + b), a)\\n\\t\\treturn a\\nx = si.readline().strip()\\ny = map(int, si.readline().strip().split())\\nS = Solution()\\nprint(S.toing1(y))\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\n\\ndef prog():\\n\\tn = map(int, input().strip())\\n\\tintegers = map(int, input().split())\\n\\tamounts = [0 for i in range(10 ** 5 + 1)]\\n\\tfor integer in integers:\\n\\t\\tamounts[integer] += integer\\n\\tpoints = 0\\n\\ti = 1\\n\\twhile i < 10 ** 5 + 1:\\n\\t\\tif amounts[i] != 0:\\n\\t\\t\\tdp = [0, amounts[i]]\\n\\t\\t\\ti += 1\\n\\t\\t\\twhile i < 10 ** 5 + 1 and amounts[i] != 0:\\n\\t\\t\\t\\tdp.append(max(dp[-1], dp[-2] + amounts[i]))\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\tpoints += dp[-1]\\n\\t\\telse:\\n\\t\\t\\ti += 1\\n\\tprint(points)\\nprog()\\n\", \"int(input())\\na = list(map(int, input().split()))\\nn = max(a)\\ncount = [0] * (n + 1)\\nfor i in a:\\n\\tcount[i] += i\\nx = 0\\ny = count[1]\\nfor i in range(2, n + 1):\\n\\t(y, x) = (max(y, x + count[i]), y)\\nprint(y)\\n\", \"import collections, math, bisect, re, heapq, queue\\nlocal = False\\nif local:\\n\\tfile = open('input.txt', 'r')\\n\\timport time\\n\\ndef inp():\\n\\tif local:\\n\\t\\treturn file.readline().rstrip()\\n\\telse:\\n\\t\\treturn input().rstrip()\\n\\ndef ints():\\n\\treturn [int(_) for _ in inp().split()]\\nif local:\\n\\tstart = time.time()\\nn = int(inp())\\na = ints()\\ncnt = collections.defaultdict(int)\\n(smallest, biggest) = (10 ** 6, 0)\\nfor n in a:\\n\\tcnt[n] += 1\\n\\tsmallest = min(smallest, n)\\n\\tbiggest = max(biggest, n)\\ndp = [0] * (biggest + 1)\\ndp[1] = cnt[smallest] if smallest == 1 else 0\\nfor i in range(max(smallest, 2), biggest + 1):\\n\\tif i in cnt:\\n\\t\\tdp[i] = max(cnt[i] * i + dp[i - 2], dp[i - 1])\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1]\\nprint(dp[biggest])\\nif local:\\n\\tfin = (time.time() - start) * 1000\\n\\tprint('{:.2f}'.format(fin) + 'ms')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nf = [0] * 100001\\nx = y = 0\\nfor i in range(n):\\n\\tf[a[i]] += a[i]\\nfor i in range(100001):\\n\\t(x, y) = (max(x, f[i] + y), x)\\nprint(x)\\n\", \"n = int(input())\\ndata = list(map(int, input().split()))\\nM = max(data)\\ncount = [0] * (M + 1)\\nfor i in data:\\n\\tcount[i] += 1\\ndp = [0] * (M + 1)\\ndp[1] = count[1]\\nfor i in range(2, M + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[M])\\n\", \"n = int(input())\\nline = input()\\ntemp = line.split()\\nmini = int(temp[0])\\nmaxi = 0\\na = [0 for i in range(n)]\\nnum = [0 for i in range(1000000)]\\nfor i in range(n):\\n\\ta[i] = int(temp[i])\\n\\tif a[i] > maxi:\\n\\t\\tmaxi = a[i]\\n\\tif a[i] < mini:\\n\\t\\tmini = a[i]\\n\\tnum[a[i]] += 1\\ndp = [[0 for i in range(2)] for i in range(maxi + 1)]\\nfor i in range(mini, maxi + 1):\\n\\tdp[i][1] = dp[i - 1][0] + num[i] * i\\n\\tdp[i][0] = max(dp[i - 1][1], dp[i - 1][0])\\nprint(max(dp[maxi][0], dp[maxi][1]))\\n\", \"n = int(input())\\nl = [int(x) for x in input().split()]\\n(a, b) = (0, 0)\\nd = [0] * 100005\\nfor i in l:\\n\\td[i] += i\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"from collections import Counter\\nn = int(input().strip())\\na = list(map(int, input().strip().split()))\\na = Counter(a)\\na = list(a.items())\\na.sort(key=lambda x: x[0])\\ndp = [0] * len(a)\\ndp[0] = a[0][0] * a[0][1]\\nfor i in range(1, len(dp)):\\n\\ta1 = 0\\n\\ta2 = 0\\n\\tif a[i][0] - 1 == a[i - 1][0]:\\n\\t\\tif i == 1:\\n\\t\\t\\ta1 = a[i][0] * a[i][1]\\n\\t\\telse:\\n\\t\\t\\ta1 = dp[i - 2] + a[i][0] * a[i][1]\\n\\telse:\\n\\t\\ta1 = dp[i - 1] + a[i][0] * a[i][1]\\n\\ta2 = dp[i - 1]\\n\\tdp[i] = max(a1, a2)\\nprint(dp[len(dp) - 1])\\n\", \"from collections import Counter\\n\\ndef dp(arr):\\n\\tmat = [0] * (max(arr) + 1)\\n\\tdic = Counter(arr)\\n\\tif 1 in dic:\\n\\t\\tmat[1] = dic[1]\\n\\tfor i in range(2, len(mat)):\\n\\t\\tk = 0\\n\\t\\tif i in dic:\\n\\t\\t\\tk = dic[i]\\n\\t\\tmat[i] = max(mat[i - 2] + i * k, mat[i - 1])\\n\\treturn mat[-1]\\nn = int(input())\\narr = list(map(int, input().split()))\\nprint(dp(arr))\\n\", \"m = int(input())\\ns = input()\\nA = list(map(int, s.split()))\\nmaximo = [0]\\nnumero = [0]\\nsuma = [0]\\nA.insert(0, 0)\\nA.sort()\\nfor i in range(1, m + 1, 1):\\n\\tif A[i] != A[i - 1]:\\n\\t\\tnumero.append(1)\\n\\t\\tif A[i] - A[i - 1] >= 2:\\n\\t\\t\\tsuma.append(A[i] + max(suma[i - 1 - numero[i - 1]], suma[i - 1]))\\n\\t\\telse:\\n\\t\\t\\tsuma.append(A[i] + max(suma[i - 1 - numero[i - 1]], suma[i - 1 - numero[i - 1] - numero[i - 1 - numero[i - 1]]]))\\n\\telse:\\n\\t\\tnumero.append(numero[i - 1] + 1)\\n\\t\\tsuma.append(suma[i - 1] + A[i])\\n\\tif suma[i] > maximo[i - 1]:\\n\\t\\tmaximo.append(suma[i])\\n\\telse:\\n\\t\\tmaximo.append(maximo[i - 1])\\nprint(maximo[-1])\\n\", \"n = int(input())\\nnumbers = input().split()\\ncounters = {0: 0}\\nfor n in numbers:\\n\\tnumber = int(n)\\n\\tif number in counters:\\n\\t\\tcounters[number] += 1\\n\\telse:\\n\\t\\tcounters[number] = 1\\nkeys = sorted(counters)\\nvalues = [0, counters[keys[1]] * keys[1]]\\nfor i in range(2, len(keys)):\\n\\tc_key = keys[i]\\n\\tc_value = counters[c_key] * c_key\\n\\tp_key = keys[i - 1]\\n\\tp_value = values[i - 1]\\n\\tif c_key - p_key > 1:\\n\\t\\tres = c_value + p_value\\n\\telse:\\n\\t\\tc_value += values[i - 2]\\n\\t\\tres = max(c_value, p_value)\\n\\tvalues.append(res)\\nprint(values[len(values) - 1])\\n\", \"n = int(input())\\nli = list(map(int, input().split(' ', n)[:n]))\\nli.sort()\\nhs = [0] * 100001\\nfor i in range(n):\\n\\ths[li[i]] += 1\\ndp = [0] * 100001\\ndp[0] = 0\\nif hs[1] != 0:\\n\\tdp[1] = hs[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * hs[i])\\nprint(dp[max(li)])\\n\", \"a = int(input())\\nb = [int(x) for x in input().split()]\\nn = pow(10, 5) + 1\\nanzahl = [0] * n\\nfor i in b:\\n\\tanzahl[i] += 1\\ndp = [[0] * 2 for _ in range(n)]\\ndp[1] = [anzahl[1], 0]\\nfor i in range(2, n):\\n\\tfor j in range(2):\\n\\t\\tif j == 1:\\n\\t\\t\\tdp[i][j] = anzahl[i] * i + max(dp[i - 2][0], dp[i - 2][1])\\n\\t\\telse:\\n\\t\\t\\tdp[i][j] = max(dp[i - 1][0], dp[i - 1][1])\\nprint(max(dp[n - 1][0], dp[n - 1][1]))\\n\", \"from itertools import groupby\\ninput()\\nline = sorted([int(n) for n in input().split(' ')])\\nsums = {k: sum(list(g)) for (k, g) in groupby(line)}\\ndp = [0] * (len(sums) + 2)\\nfor (i, num) in enumerate(sorted(sums.keys())):\\n\\tprev = dp[i] if sums.get(num - 1) is not None else dp[i + 1]\\n\\tdp[i + 2] = max(dp[i + 1], prev + sums[num])\\nprint(dp[len(sums) + 1])\\n\", \"(_, a) = (input(), list(map(int, input().split())))\\nb = [0] * 100001\\nfor i in a:\\n\\tb[i] += i\\nh = s = 0\\nfor j in b:\\n\\t(h, s) = (max(s + j, h), h)\\nprint(h)\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nmaxi = max(arr)\\nn = maxi\\ndp = [0] * (n + 1)\\ncnt = [0] * (n + 1)\\nfor i in arr:\\n\\tcnt[i] += 1\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor i in range(2, n + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[n])\\n\", \"n = int(input())\\nli = [0] * 100005\\nfor i in input().split():\\n\\ti = int(i)\\n\\tli[i] += i\\ndp_a = 0\\ndp_b = li[1]\\nfor i in range(2, 100005):\\n\\t(dp_a, dp_b) = (dp_b, max(dp_a + li[i], dp_b))\\nprint(dp_b)\\n\", \"n = int(input())\\ntemparr = input()\\ntemparr = temparr.split()\\narr = []\\nfor i in temparr:\\n\\tarr.append(int(i))\\narr = sorted(arr)\\nmaxelem = arr[-1]\\ndp = [0] * (maxelem + 1)\\ncurelem = 0\\ntotal = 0\\nfor i in arr:\\n\\tif i != curelem:\\n\\t\\tdp[curelem] = total\\n\\t\\ttotal = i\\n\\t\\tcurelem = i\\n\\telse:\\n\\t\\ttotal += i\\ndp[curelem] = total\\nsecondmaxelem = maxelem - 1\\nthirdmaxelem = maxelem - 2\\nfor i in range(maxelem, -1, -1):\\n\\tif i == maxelem:\\n\\t\\tcontinue\\n\\telif i == secondmaxelem:\\n\\t\\tdp[i] = max(dp[i], dp[i + 1])\\n\\t\\tcontinue\\n\\telif i == thirdmaxelem:\\n\\t\\tdp[thirdmaxelem] = max(dp[thirdmaxelem] + dp[maxelem], dp[i + 1])\\n\\telse:\\n\\t\\tdp[i] = max(dp[i] + dp[i + 2], dp[i + 1], dp[i] + dp[i + 3])\\nprint(dp[0])\\n\", \"maximum = 100005\\nn = int(input())\\na = [int(a) for a in input().split()]\\nvalue = [0] * maximum\\nfor i in range(n):\\n\\tvalue[a[i]] += a[i]\\ndp0 = [0] * maximum\\ndp1 = [0] * maximum\\nfor i in range(maximum):\\n\\tdp0[i] = max(dp0[i - 1], dp1[i - 1])\\n\\tdp1[i] = value[i] + dp0[i - 1]\\nres = max(dp0[maximum - 1], dp1[maximum - 1])\\nprint(res)\\n\", \"tot_numbers = int(input())\\nnumbers = [int(x) for x in input().split()]\\nfrequency = [0 for x in range(100002)]\\nfor i in range(tot_numbers):\\n\\tfrequency[numbers[i]] += 1\\ndyn_sum = [0, 1 * frequency[1]]\\nfor i in range(2, 100001):\\n\\ttemp = max(dyn_sum[-1], dyn_sum[-2] + i * frequency[i])\\n\\tdyn_sum.append(temp)\\nprint(dyn_sum[-1])\\n\", \"def func(n, count, a):\\n\\tmemo = [0] * (a + 1)\\n\\tfor i in range(a + 1):\\n\\t\\tif i == 0:\\n\\t\\t\\tmemo[i] = 0\\n\\t\\telif i == 1:\\n\\t\\t\\tmemo[i] = 1 * count[1]\\n\\t\\telse:\\n\\t\\t\\tmemo[i] = max(memo[i - 1], memo[i - 2] + count[i] * i)\\n\\treturn max(memo)\\nn = int(input())\\na = [int(i) for i in input().split()]\\nb = [0] * (max(a) + 1)\\nfor i in a:\\n\\tb[i] += 1\\nprint(func(n, b, max(a)))\\n\", \"from collections import defaultdict\\n\\ndef max_sum(n, arr):\\n\\tsums = defaultdict(int)\\n\\tfor a in arr:\\n\\t\\tsums[a] += a\\n\\tdim = max(sums.keys()) + 1\\n\\td = {}\\n\\tfor i in (1, 2):\\n\\t\\tif i in sums:\\n\\t\\t\\td[i] = sums[i]\\n\\tfor j in range(max(3, min(sums.keys())), dim):\\n\\t\\td[j] = max(d.get(j - 2, 0), d.get(j - 3, 0)) + sums.get(j, 0)\\n\\treturn max(d.values())\\nn = int(input())\\narr = [int(x) for x in input().split()]\\nprint(max_sum(n, arr))\\n\", \"n = int(input())\\na = [int(x) for x in input().strip().split(' ')]\\nn = max(a)\\ndp = [0] * (n + 1)\\nfreq = {i: 0 for i in range(n + 1)}\\nfor i in a:\\n\\tfreq[i] += 1\\ndp[1] = freq[1]\\nfor i in range(2, n + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\nprint(dp[n])\\n\", \"n = int(input())\\nlst = list(map(int, input().split()))\\ncount = [0] * 100001\\nmaxm = 0\\nfor num in lst:\\n\\tcount[num] += 1\\n\\tmaxm = max(maxm, num)\\nanswer = [0] * (maxm + 1)\\nanswer[1] = count[1]\\nfor x in range(2, maxm + 1):\\n\\tanswer[x] = max(answer[x - 1], answer[x - 2] + count[x] * x)\\nprint(answer[-1])\\n\", \"n = int(input())\\ndigits = input().split()\\nnums = [int(i) for i in digits]\\nm = max(nums)\\nsums = [0 for i in range(m)]\\nfor i in nums:\\n\\tsums[i - 1] = sums[i - 1] + i\\nsome = [0 for i in range(m)]\\n\\ndef f(x, sums):\\n\\tglobal some\\n\\tif x >= 2:\\n\\t\\tsome[x] = max(some[x - 1], some[x - 2] + sums[x])\\n\\telif x == 1:\\n\\t\\tsome[x] = max(sums[0], sums[1])\\n\\telif x == 0:\\n\\t\\tsome[x] = sums[0]\\nfor i in range(m):\\n\\tf(i, sums)\\nprint(some[m - 1])\\n\", \"import sys\\nimport os\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nimport math\\nimport random\\nimport re\\nimport heapq\\ncnt = [0] * 100001\\nn = int(input())\\nfor a in map(int, input().split()):\\n\\tcnt[a] += 1\\na = 0\\nb = cnt[1]\\nfor i in range(2, 100001):\\n\\tc = max(b, a + cnt[i] * i)\\n\\ta = b\\n\\tb = c\\nprint(b)\\n\", \"def main():\\n\\tn = int(input())\\n\\ts = [0] * 100005\\n\\tfor i in map(int, input().split()):\\n\\t\\ts[i] += i\\n\\t(t1, t2) = (0, 0)\\n\\tfor i in s:\\n\\t\\t(t1, t2) = (max(t1, t2), t1 + i)\\n\\tprint(t1)\\nmain()\\n\", \"n = int(input())\\narray = list(map(int, input().split()))\\nlist_a = [0] * 100002\\nfor i in array:\\n\\tlist_a[i] += i\\na = 0\\nb = 0\\nfor i in list_a:\\n\\ta_copy = a\\n\\ta = max(a, b + i)\\n\\tb = a_copy\\nprint(a)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nb = [0] * 100001\\nc = b\\nfor val in a:\\n\\tb[val] += val\\nc[1] = b[1]\\nfor i in range(2, len(b)):\\n\\tc[i] = max(c[i - 1], c[i - 2] + b[i])\\nprint(max(c))\\n\", \"n = int(input())\\nfq = (10 ** 5 + 1) * [0]\\nx = 0\\ny = 0\\na = [int(i) for i in input().split()]\\nfor i in range(n):\\n\\tfq[a[i]] += 1\\ndp = (10 ** 5 + 1) * [0]\\ndp[1] = fq[1]\\nfor i in range(2, max(a) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + fq[i] * i)\\nprint(dp[max(a)])\\n\", \"input()\\nn = 0\\ncntDig = [0] * 100001\\nfor i in map(int, input().split()):\\n\\tn = max(i, n)\\n\\tcntDig[i] += i\\nn += 1\\n(a, b) = (0, cntDig[1])\\nfor i in range(2, n):\\n\\t(a, b) = (b, max(b, a + cntDig[i]))\\nprint(b)\\n\", \"import collections\\nimport logging\\nfmt = '%(levelname)s - %(name)s (line:%(lineno)s) - %(message)s'\\nformatter = logging.Formatter(fmt)\\nch = logging.StreamHandler()\\nch.setLevel(logging.ERROR)\\nch.setFormatter(formatter)\\nlogger = logging.getLogger('boredom')\\nlogger.setLevel(logging.ERROR)\\nlogger.addHandler(ch)\\n\\ndef solve(seq):\\n\\tmax_n = max(seq)\\n\\td = collections.defaultdict(int)\\n\\tfor i in range(len(seq)):\\n\\t\\td[seq[i]] += 1\\n\\tdp = [[0, 0] for _ in range(max_n + 1)]\\n\\tdp[0][0] = dp[0][1] = 0\\n\\tfor i in range(1, max_n + 1):\\n\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\tdp[i][1] = i * d[i] + dp[i - 1][0]\\n\\treturn max(dp[max_n][0], dp[max_n][1])\\n\\ndef main():\\n\\t_ = int(input().strip())\\n\\tseq = [int(x) for x in input().strip().split()]\\n\\tresult = solve(seq)\\n\\tprint(result)\\nmain()\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\ndic = {}\\nlim = 100000\\ntable = [0 for i in range(lim + 1)]\\nfor i in range(lim + 1):\\n\\tdic[i] = 0\\nfor i in range(n):\\n\\tdic[arr[i]] += 1\\ntable[0] = 0\\ntable[1] = dic[1]\\nfor i in range(2, lim + 1):\\n\\ttable[i] = max(table[i - 1], table[i - 2] + i * dic[i])\\nprint(table[lim])\\n\", \"(z, zz) = (input, lambda : list(map(int, z().split())))\\nzzz = lambda : [int(i) for i in stdin.readline().split()]\\n(szz, graph, mod, szzz) = (lambda : sorted(zz()), {}, 10 ** 9 + 7, lambda : sorted(zzz()))\\nfrom string import *\\nfrom re import *\\nfrom collections import *\\nfrom queue import *\\nfrom sys import *\\nfrom collections import *\\nfrom math import *\\nfrom heapq import *\\nfrom itertools import *\\nfrom bisect import *\\nfrom collections import Counter as cc\\nfrom math import factorial as f\\nfrom bisect import bisect as bs\\nfrom bisect import bisect_left as bsl\\nfrom itertools import accumulate as ac\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\n\\ndef prime(x):\\n\\tp = ceil(x ** 0.5) + 1\\n\\tfor i in range(2, p):\\n\\t\\tif x % i == 0 and x != 2 or x == 0:\\n\\t\\t\\treturn 0\\n\\treturn 1\\n\\ndef dfs(u, visit, graph):\\n\\tvisit[u] = True\\n\\tfor i in graph[u]:\\n\\t\\tif not visit[i]:\\n\\t\\t\\tdfs(i, visit, graph)\\nn = int(z())\\nl = [0] * (10 ** 5 + 1)\\nfor i in zzz():\\n\\tl[i] += i\\n(mx, pre) = (0, 0)\\nfor i in l:\\n\\t(mx, pre) = (max(mx, i + pre), mx)\\nprint(mx)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nm = max(a)\\nfp = (m + 1) * [0]\\nfor i in range(n):\\n\\tfp[a[i]] += 1\\ny = (m + 1) * [0]\\ny[1] = fp[1]\\nfor i in range(2, m + 1):\\n\\tif y[i - 1] > y[i - 2] + fp[i] * i:\\n\\t\\ty[i] = y[i - 1]\\n\\telse:\\n\\t\\ty[i] = y[i - 2] + fp[i] * i\\nprint(y[m])\\n\", \"import sys\\n\\ndef answer(n, a):\\n\\tcnt = [0 for i in range(10 ** 5 + 1)]\\n\\tfor e in a:\\n\\t\\tcnt[e] += 1\\n\\tdp = [[0 for j in range(2)] for i in range(10 ** 5 + 1)]\\n\\tfor i in range(1, 10 ** 5 + 1):\\n\\t\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\t\\tdp[i][1] = dp[i - 1][0] + cnt[i] * i\\n\\treturn max(dp[10 ** 5][0], dp[10 ** 5][1])\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = tuple(map(int, sys.stdin.readline().split()))\\n\\tprint(answer(n, a))\\n\\treturn\\nmain()\\n\", \"n = int(input())\\ncnt = {}\\nmx = 0\\nfor x in input().split():\\n\\ta = int(x)\\n\\tmx = max(a, mx)\\n\\tif a in cnt.keys():\\n\\t\\tcnt[a] += 1\\n\\telse:\\n\\t\\tcnt[a] = 1\\nfor i in range(1, mx + 1):\\n\\tif i in cnt.keys():\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tcnt[i] = 0\\ndp = [0] * (mx + 1)\\ndp[1] = cnt[1]\\nfor i in range(2, mx + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[mx])\\n\", \"from sys import stdin, stdout\\nfrom math import ceil, floor, sqrt\\nfrom collections import deque, Counter\\ninp = stdin.readline\\nout = stdout.write\\nn = int(inp())\\nd = [0] * 100001\\nl = map(int, input().split())\\nfor i in l:\\n\\td[i] += i\\n(a, b) = (0, 0)\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nout(str(a))\\n\", \"import collections\\nn = int(input())\\nls = [int(x) for x in input().split()]\\nsize = max(ls)\\narr = [0] * size\\nfor num in ls:\\n\\tarr[num - 1] += num\\nif size == 1:\\n\\tprint(arr[0])\\nelif size == 2:\\n\\tprint(max(arr[0], arr[1]))\\nelse:\\n\\tcumulative = [0] * size\\n\\tcumulative[0] = arr[0]\\n\\tcumulative[1] = arr[1]\\n\\tcumulative[2] = arr[2] + arr[0]\\n\\tfor i in range(3, size):\\n\\t\\tcumulative[i] = arr[i] + max(cumulative[i - 3], cumulative[i - 2])\\n\\tprint(max(cumulative[-1], cumulative[-2]))\\n\", \"import collections\\nn = int(input())\\na = [int(c) for c in input().split()]\\nd = {}\\nfor number in a:\\n\\tif number in d:\\n\\t\\td[number] += 1\\n\\telse:\\n\\t\\td[number] = 1\\nd = sorted(d.items())\\nt1 = 0\\nk1 = -1\\nt2 = 0\\nfor (i, item) in enumerate(d):\\n\\tk = item[0]\\n\\tv = item[1]\\n\\tif i == 0:\\n\\t\\tt1 = k * v\\n\\telif t2 > t1:\\n\\t\\tt1 = t2 + k * v\\n\\telif k != k1 + 1:\\n\\t\\t(t2, t1) = (t1, t1 + k * v)\\n\\telse:\\n\\t\\t(t2, t1) = (t1, t2 + k * v)\\n\\tk1 = k\\nprint(max(t1, t2))\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nm = max(arr)\\ncnt_arr = [0] * (m + 1)\\nfor num in arr:\\n\\tcnt_arr[num] += 1\\ndp = [0] * (m + 1)\\ndp[1] = cnt_arr[1]\\ndp[2] = max(dp[1], 2 * cnt_arr[2])\\nfor i in range(3, m + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt_arr[i])\\nprint(max(dp))\\n\", \"def boredom(l):\\n\\tdp = [0] * 100001\\n\\tfor i in l:\\n\\t\\tdp[i] += i\\n\\t(a, b) = (0, 0)\\n\\tfor i in dp:\\n\\t\\t(a, b) = (max(a, i + b), a)\\n\\treturn a\\nn = int(input())\\nl = list(map(int, input().rstrip().split()))\\nprint(boredom(l))\\n\", \"N = int(input())\\narr = list(map(int, input().split()))\\nchisla = [0] * (max(arr) + 1)\\ndp = [0] * (max(arr) + 1)\\nfor i in range(N):\\n\\tchisla[arr[i]] += 1\\ndp[0] = 0\\ndp[1] = chisla[1]\\nfor i in range(2, max(arr) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + chisla[i] * i)\\nprint(dp[max(arr)])\\n\", \"import math\\na = [0] * 100005\\ndp = [0] * 100005\\nx = int(input(''))\\ny = input('').split(' ')\\ny = [int(z) for z in y]\\nfor g in range(len(y)):\\n\\ta[y[g]] += 1\\nfor g in range(100000, 0, -1):\\n\\tif dp[g + 1] > dp[g + 2] + g * a[g]:\\n\\t\\tdp[g] = dp[g + 1]\\n\\telse:\\n\\t\\tdp[g] = dp[g + 2] + g * a[g]\\nprint(dp[1])\\n\", \"n = int(input())\\nS = list(map(int, input().split()))\\nsums = [0] * 100001\\nfor i in S:\\n\\tsums[i] += i\\ndp = [0] * 100001\\ndp[0] = sums[0]\\nfor j in range(1, 100001):\\n\\tdp[j] = max(sums[j] + dp[j - 2], dp[j - 1])\\nprint(dp[-1])\\n\", \"N = int(100000.0) + 1\\nn = int(input().strip())\\narr = list(map(int, input().strip().split()))\\n(cnt, dp) = ([0] * (N + 1), [0] * (N + 1))\\nfor i in range(n):\\n\\tcnt[arr[i]] += 1\\n(dp[0], dp[1]) = (0, cnt[1])\\nfor i in range(2, N + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[N])\\n\", \"input()\\nnums = [0] * 100001\\nfor x in map(int, input().split()):\\n\\tnums[x] += 1\\nlastp = 0\\nlastlastp = 0\\nfor x in range(1, 100001):\\n\\tnewp = max(lastp, lastlastp + x * nums[x])\\n\\tlastlastp = lastp\\n\\tlastp = newp\\nprint(newp)\\n\", \"from sys import stdin\\nfrom collections import defaultdict\\nn = int(stdin.readline())\\nnums = list(map(int, stdin.readline().split()))\\n\\ndef dp(n, nums):\\n\\tnums.sort()\\n\\tdp = [0] * (nums[-1] + 1)\\n\\tfreq = defaultdict(int)\\n\\tfor i in nums:\\n\\t\\tfreq[i] += 1\\n\\tdp[0] = 0\\n\\tdp[1] = freq[1]\\n\\tfor i in range(2, nums[-1] + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\n\\treturn dp[-1]\\nprint(dp(n, nums))\\n\", \"from collections import Counter\\nin_n = input()\\nin_nums = input()\\nn = int(in_n)\\nnums_counter = Counter([int(x) for x in in_nums.split()])\\n\\ndef getMaxScore(keys):\\n\\tsaved = [0]\\n\\tcur_key_chain = []\\n\\tlast_num = None\\n\\tfor key in keys:\\n\\t\\tcur_key_chain.append(key)\\n\\t\\tif last_num is not None and last_num + 1 == key:\\n\\t\\t\\tsaved.append(max(key * nums_counter[key] + saved[len(saved) - 2], saved[len(saved) - 1]))\\n\\t\\telse:\\n\\t\\t\\tsaved.append(key * nums_counter[key] + saved[len(saved) - 1])\\n\\t\\tlast_num = key\\n\\treturn saved[len(saved) - 1]\\nprint(getMaxScore(sorted(list(nums_counter.keys()))))\\n\", \"def fun(a):\\n\\ts = [0] * (max(a) + 1)\\n\\tfor i in a:\\n\\t\\ts[i] = s[i] + 1\\n\\tfor i in range(2, max(a) + 1):\\n\\t\\ts[i] = max(s[i] * i + s[i - 2], s[i - 1])\\n\\treturn s[-1]\\nn = int(input())\\na = list(map(int, input().split(' ')))\\nprint(fun(a))\\n\", \"n = int(input())\\nl = [0] * (10 ** 5 + 1)\\nd = {}\\nfor i in map(int, input().split()):\\n\\tl[i] += i\\nd[0] = 0\\nd[1] = l[1]\\nfor i in range(2, len(l)):\\n\\tif l[i - 1] == 0:\\n\\t\\td[i] = l[i] + d[i - 2]\\n\\t\\tcontinue\\n\\td[i] = max(l[i] + d[i - 2], d[i - 1])\\nprint(d[i])\\n\", \"n = int(input())\\nt = list(map(int, input().split()))\\nu = [0] * (max(t) + 1)\\nfor j in t:\\n\\tu[j] += 1\\nf = [0] * len(u)\\nf[0] = 0\\nf[1] = u[1]\\nfor k in range(2, len(f)):\\n\\tf[k] = max(f[k - 2] + u[k] * k, f[k - 1])\\nprint(f[-1])\\n\", \"input()\\nL = [0] * 100001\\nfor k in input().split(' '):\\n\\tL[int(k)] += int(k)\\na = b = 0\\nfor i in L:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"def main():\\n\\tinput()\\n\\td = [0] * 100001\\n\\tfor x in map(int, input().split()):\\n\\t\\td[x] += x\\n\\ta = b = 0\\n\\tfor i in d:\\n\\t\\t(a, b) = (max(a, i + b), a)\\n\\tprint(a)\\nmain()\\n\", \"import collections\\nn = int(input())\\nnum = map(int, input().split())\\nk = collections.defaultdict(int)\\nfor i in num:\\n\\tk[i] += 1\\npre = float('inf')\\nout = 0\\ndp = [0 for i in range(len(k))]\\nkey = sorted(k.keys())\\nfor i in range(len(key) - 1, -1, -1):\\n\\tdp[i] += k[key[i]] * key[i]\\n\\tif key[i] + 1 == pre:\\n\\t\\tif i + 2 < len(key):\\n\\t\\t\\tval = dp[i + 2]\\n\\t\\t\\tif i + 3 < len(dp):\\n\\t\\t\\t\\tval = max(val, dp[i + 3])\\n\\t\\t\\tdp[i] += val\\n\\telse:\\n\\t\\tval = 0\\n\\t\\tif i + 1 < len(dp):\\n\\t\\t\\tval = max(val, dp[i + 1])\\n\\t\\tif i + 2 < len(dp):\\n\\t\\t\\tval = max(val, dp[i + 2])\\n\\t\\tdp[i] += val\\n\\tpre = key[i]\\n\\tout = max(out, dp[i])\\nprint(out)\\n\", \"import sys\\nimport math\\nimport collections\\nimport heapq\\ninput = sys.stdin.readline\\nn = int(input())\\nl = [int(i) for i in input().split()]\\nl1 = [0] * 100001\\nfor i in l:\\n\\tl1[i] += i\\n(a, b) = (0, 0)\\nfor i in l1:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"import math\\nfrom decimal import Decimal\\nimport heapq\\n\\ndef na():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\treturn (n, b)\\n\\ndef nab():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\tc = [int(x) for x in input().split()]\\n\\treturn (n, b, c)\\n\\ndef dv():\\n\\t(n, m) = map(int, input().split())\\n\\treturn (n, m)\\n\\ndef dva():\\n\\t(n, m) = map(int, input().split())\\n\\ta = [int(x) for x in input().split()]\\n\\tb = [int(x) for x in input().split()]\\n\\treturn (n, m, b)\\n\\ndef eratosthenes(n):\\n\\tsieve = list(range(n + 1))\\n\\tfor i in sieve:\\n\\t\\tif i > 1:\\n\\t\\t\\tfor j in range(i + i, len(sieve), i):\\n\\t\\t\\t\\tsieve[j] = 0\\n\\treturn sorted(set(sieve))\\n\\ndef nm():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\tm = int(input())\\n\\tc = [int(x) for x in input().split()]\\n\\treturn (n, b, m, c)\\n\\ndef dvs():\\n\\tn = int(input())\\n\\tm = int(input())\\n\\treturn (n, m)\\n(n, a) = na()\\nif n < max(a):\\n\\td = max(a)\\nelse:\\n\\td = n\\ncnt = [0] * (d + 1)\\nfor i in a:\\n\\tcnt[i] += 1\\ndp = [0] * (d + 1)\\ndp[1] = cnt[1]\\nfor i in range(1, d + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[d])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nmini = 1000000\\nmaxi = 0\\nfor i in arr:\\n\\tif i < mini:\\n\\t\\tmini = i\\n\\tif i > maxi:\\n\\t\\tmaxi = i\\nd = {i: 0 for i in range(100001)}\\nfor i in arr:\\n\\td[i] += 1\\nfor i in range(mini, maxi + 1):\\n\\td[i] = d[i] * i\\nl = [0 for i in range(100001)]\\nfor i in range(mini, maxi + 1):\\n\\tif i < 2:\\n\\t\\tl[i] = max(d[i], l[i - 1])\\n\\telse:\\n\\t\\tl[i] = max(l[i - 1], d[i] + l[i - 2])\\nprint(l[maxi])\\n\", \"n = int(input())\\ns = [0] * 100002\\nlst = list(map(int, input().split()))\\nfor i in lst:\\n\\ts[i] += i\\na = b = 0\\nfor i in s:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"dic = {}\\nlis = []\\nn = int(input())\\nst = input()\\nl = st.split(' ')\\nfor i in range(len(l)):\\n\\tlis.append(int(l[i]))\\nfor i in range(max(n, max(lis)) + 1):\\n\\tdic[i] = 0\\nfor i in lis:\\n\\tdic[i] += 1\\ndp = []\\nfor i in range(max(n, max(lis)) + 1):\\n\\tdp.append(0)\\ndp[0] = 0\\ndp[1] = dic[1]\\nfor i in range(2, max(n, max(lis)) + 1):\\n\\tif dp[i - 2] + dic[i] * i > dp[i - 1]:\\n\\t\\tdp[i] = dp[i - 2] + dic[i] * i\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1]\\nprint(dp[max(n, max(lis))])\\n\", \"import collections\\nn = int(input())\\nA = list(map(int, input().split()))\\ncnt = collections.Counter(A)\\ndp = [0] * 100001\\nm = 0\\nfor i in range(len(dp)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\n\\tm = max(m, dp[i])\\nprint(m)\\n\", \"input()\\na = [0] * 100001\\nfor x in map(int, input().split()):\\n\\ta[x] += x\\nc = d = 0\\nfor i in a:\\n\\t(c, d) = (max(c, i + d), c)\\nprint(c)\\n\", \"n = int(input())\\ndata = [int(x) for x in input().split()]\\nmaxi = max(data)\\norig = [0] * (maxi + 1)\\nfor i in data:\\n\\torig[i] += 1\\np = 0\\nq = 0\\nfor i in range(1, maxi + 1):\\n\\ttemp = q + i * orig[i]\\n\\tq = max(p, q)\\n\\tp = temp\\nprint(max(p, q))\\n\", \"from collections import Counter\\n_ = int(input())\\na = Counter(map(int, input().split()))\\ndp = [0, a[1]]\\nfor i in range(2, 100001):\\n\\tdp.append(max(dp[-1], dp[-2] + a[i] * i))\\nprint(dp[100000])\\n\", \"from collections import Counter\\n\\ndef solve(n, a):\\n\\tc = Counter(a)\\n\\tmax_n = max(a)\\n\\tdp = [0 for _ in range(max_n + 2)]\\n\\tdp[0:1] = (0, c[1])\\n\\tfor i in range(2, max_n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + c[i] * i)\\n\\treturn dp[max_n]\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tprint(solve(n, a))\\nmain()\\n\", \"from collections import defaultdict\\nn = int(input())\\na = [int(z) for z in input().split()]\\nmaximum = max(a)\\nfreq = {}\\nfreq = defaultdict(lambda : 0, freq)\\nfor ele in a:\\n\\tfreq[ele] += 1\\ndp = [0] * (maximum + 1)\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, maximum + 1):\\n\\tdp[i] = max(dp[i - 1], freq[i] * i + dp[i - 2])\\nprint(dp[maximum])\\n\", \"input()\\ns = [0] * 100002\\nfor i in map(int, input().split()):\\n\\ts[i] += i\\na = b = 0\\nfor d in s:\\n\\t(a, b) = (max(a, b), a + d)\\nprint(a)\\n\", \"from functools import lru_cache\\nfrom sys import stdin, stdout\\nimport sys\\nfrom math import *\\nn = int(input())\\nar = list(map(int, input().split()))\\nar.sort()\\ndp = [0] * 100001\\nfor i in range(n):\\n\\tdp[ar[i]] += 1\\ndp[2] = dp[2] * 2\\nfor i in range(3, len(dp)):\\n\\tif i - 2 == 1:\\n\\t\\tdp[i] = dp[i - 2] + i * dp[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 2], dp[i - 3]) + dp[i] * i\\nprint(max(dp))\\n\", \"_ = input()\\nlist_in = [int(x) for x in input().strip().split()]\\nset_in = sorted(list(set(list_in)))\\nlist_cnt = {}\\nfor x in list_in:\\n\\tif x in list_cnt:\\n\\t\\tlist_cnt[x] += 1\\n\\telse:\\n\\t\\tlist_cnt[x] = 1\\nlist_target = []\\nfor x in range(len(set_in)):\\n\\ty = x - 1 if set_in[x] - set_in[x - 1] > 1 else x - 2\\n\\tz = 0 if x - 3 <= 0 else x - 3\\n\\ttmp_max = list_target[z:y + 1]\\n\\tlist_target.append((0 if len(tmp_max) == 0 else max(tmp_max)) + list_cnt[set_in[x]] * set_in[x])\\nprint(list_target[-1] if len(list_target) == 1 else max(list_target[-1], list_target[-2]))\\n\", \"def maxss(arr1):\\n\\tarr = [0] * (max(arr1) + 1)\\n\\tfor i in arr1:\\n\\t\\tarr[i] += i\\n\\tincl = arr[0]\\n\\texcl = 0\\n\\tfor i in range(1, len(arr)):\\n\\t\\tinclu = arr[i] + excl\\n\\t\\texcl = max(incl, excl)\\n\\t\\tincl = inclu\\n\\treturn max(incl, excl)\\nlength = int(input())\\narr1 = list(map(int, input().split()))\\nprint(maxss(arr1))\\n\", \"from collections import Counter\\nl = int(input())\\nc = Counter(map(int, input().split()))\\ns = max(c) + 1\\nf = [0] * s\\nf[1] = c[1]\\nfor i in range(2, s):\\n\\tf[i] = max(f[i - 1], f[i - 2] + c[i] * i)\\nprint(f[-1])\\n\", \"def main():\\n\\tn = int(input())\\n\\ta = input().split()\\n\\ta = [int(x) for x in a]\\n\\tmaxi = max(a) + 1\\n\\tv = []\\n\\tfor i in range(maxi):\\n\\t\\tv.append(0)\\n\\tfor num in a:\\n\\t\\tv[num] += num\\n\\tanterior = v[0]\\n\\tatual = v[1]\\n\\tfor i in range(2, maxi):\\n\\t\\tsoma = max(anterior + v[i], atual)\\n\\t\\tanterior = atual\\n\\t\\tatual = soma\\n\\tprint(soma)\\n\\treturn\\nmain()\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\n\\ndef boredom():\\n\\tworths = {}\\n\\tfor a in A:\\n\\t\\tif a not in worths:\\n\\t\\t\\tworths[a] = a\\n\\t\\telse:\\n\\t\\t\\tworths[a] += a\\n\\tvalues = [(val, worths[val]) for val in worths]\\n\\tvalues.sort(key=lambda val: val[0])\\n\\tB = [0 for _ in range(len(values))]\\n\\tB[0] = values[0][1]\\n\\tfor i in range(1, len(values)):\\n\\t\\tif values[i][0] > values[i - 1][0] + 1:\\n\\t\\t\\tB[i] = values[i][1] + B[i - 1]\\n\\t\\telse:\\n\\t\\t\\tB[i] = max(B[i - 1], values[i][1] + B[i - 2])\\n\\tprint(B[len(values) - 1])\\nboredom()\\n\", \"n = int(input())\\nb = [0] * 100010\\nc = [0] * 100010\\na = [int(x) for x in input().split()]\\na.sort()\\ntmp = 1\\nb[a[0]] = 1\\nfor i in range(1, n):\\n\\tif a[i] != a[i - 1]:\\n\\t\\tb[a[i - 1]] = tmp\\n\\t\\ttmp = 1\\n\\telse:\\n\\t\\ttmp += 1\\n\\tif i == n - 1:\\n\\t\\tb[a[i]] = tmp\\nc[1] = b[1] * 1\\nfor i in range(2, 100002):\\n\\tc[i] = max(c[i - 2] + b[i] * i, c[i - 1])\\nprint(c[100001])\\n\", \"n = int(input())\\na = input().strip().split()\\nmax_num = 0\\nfor (index, item) in enumerate(a):\\n\\ta[index] = int(item)\\nnum = [0 for i in range(max(a) + 1)]\\ndp = [0 for i in range(max(a) + 1)]\\nfor item in a:\\n\\tnum[item] += 1\\ndp[0] = 0\\ndp[1] = num[1]\\nfor i in range(2, max(a) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + num[i] * i)\\nprint(dp[max(a)])\\n\", \"leng = int(input())\\nlst = list(map(int, input().split()))\\nc = [0] * 100001\\nMax = lst[0]\\nfor i in range(leng):\\n\\tc[lst[i]] += 1\\n\\tif lst[i] > Max:\\n\\t\\tMax = lst[i]\\ndp = [0] * (Max + 1)\\ndp[1] = c[1]\\nfor i in range(2, Max + 1):\\n\\tdp[i] = max(i * c[i] + dp[i - 2], dp[i - 1])\\nprint(dp[Max])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nma = max(a)\\nmi = min(a)\\nb = (ma - mi + 1) * [0]\\nfor i in range(0, n):\\n\\tb[a[i] - mi] += 1\\nfor i in range(0, ma - mi + 1):\\n\\tb[i] = (i + mi) * b[i]\\nb = [0] + b\\ns = (ma - mi + 2) * [0]\\ns[1] = b[1]\\nfor i in range(2, ma - mi + 2):\\n\\ts[i] = max(s[i - 1], s[i - 2] + b[i])\\nprint(s[ma - mi + 1])\\n\", \"n = int(input())\\nw = list(map(int, input().split()))\\nz = [0] * 100001\\nfor i in range(n):\\n\\tz[w[i]] += 1\\nfor i in range(100001):\\n\\tz[i] *= i\\nm = [0] * 100001\\nm[0] = 0\\nm[1] = z[1]\\nm[2] = max(z[1], z[2])\\nfor i in range(3, 100001):\\n\\tm[i] = max(m[i - 1], m[i - 2] + z[i])\\nprint(m[100000])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nmaxa = max(a)\\nc = [0] * (maxa + 1)\\nfor ai in a:\\n\\tc[ai] += 1\\nf = [0] * (maxa + 1)\\nf[1] = c[1]\\nfor i in range(2, maxa + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * c[i])\\nprint(f[maxa])\\n\", \"from collections import Counter\\nn = int(input())\\na = map(int, input().split())\\ncnt = Counter(a)\\nm = max(cnt.keys())\\nF = [0] * (m + 1)\\nF[1] = cnt[1]\\nfor i in range(2, m + 1):\\n\\tF[i] = max(F[i - 1], F[i - 2] + cnt[i] * i)\\nprint(F[m])\\n\", \"n = int(input())\\ninputlist = list(map(int, input().split()))\\nls = [0] * 100000\\nfor j in inputlist:\\n\\tls[j - 1] += j\\na = ls[0]\\nb = max(ls[0], ls[1])\\nfor j in range(2, 100000):\\n\\tc = max(b, a + ls[j])\\n\\ta = b\\n\\tb = c\\nprint(c)\\n\", \"from collections import Counter\\nn = int(input())\\nA_cnt = Counter(map(int, input().split()))\\nupper_bound = max(A_cnt)\\nf = [0] * (upper_bound + 1)\\n(f[0], f[1]) = (0, A_cnt.get(1, 0))\\nfor i in range(2, upper_bound + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + A_cnt.get(i, 0) * i)\\nprint(f[upper_bound])\\n\", \"length = int(input())\\narray = list(map(int, input().split()))\\ncounts = [0] * 100001\\nfor num in array:\\n\\tcounts[num] += 1\\nfor i in range(2, len(counts)):\\n\\tcounts[i] = max(counts[i - 1], counts[i - 2] + counts[i] * i)\\nprint(counts[-1])\\n\", \"from functools import lru_cache\\nimport sys\\nsys.setrecursionlimit(110000)\\nn = int(input())\\nls = list(map(int, input().split()))\\ncount = [0 for _ in range(100000 + 1)]\\nfor s in ls:\\n\\tcount[s] += 1\\nsol = [0, count[1]]\\nfor i in range(2, 100001):\\n\\tsol.append(max(sol[i - 1], sol[i - 2] + i * count[i]))\\nprint(sol[100000])\\n\", \"n = int(input())\\ns = [int(x) for x in input().split()]\\np = [0] * 100001\\nfor x in s:\\n\\tp[x] += x\\na = b = 0\\nfor y in p:\\n\\t(a, b) = (max(a, b + y), a)\\nprint(a)\\n\", \"for u in range(1):\\n\\tn = int(input())\\n\\tx = [int(w) for w in input().split()]\\n\\tcount = [0] * (max(x) + 1)\\n\\tfor i in range(n):\\n\\t\\tcount[x[i]] += 1\\n\\tans = [0] * (max(x) + 1)\\n\\tans[0] = 0\\n\\tif count[1]:\\n\\t\\tans[1] = count[1]\\n\\tfor i in range(2, len(ans)):\\n\\t\\tans[i] = max(ans[i - 1], ans[i - 2] + count[i] * i)\\n\\tprint(ans[-1])\\n\", \"import math\\nfrom collections import Counter\\n\\ndef get(f):\\n\\treturn map(f, input().split())\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = list(get(int))\\n\\tcounter = Counter()\\n\\tfor i in a:\\n\\t\\tcounter[i] += 1\\n\\tUPPER = 100003\\n\\tcnts = [i * counter[i] for i in range(UPPER)]\\n\\td = [0 for i in range(UPPER)]\\n\\td[0] = 0\\n\\td[1] = cnts[1]\\n\\tfor i in range(2, UPPER):\\n\\t\\td[i] = max(d[i - 1], d[i - 2] + cnts[i])\\n\\tprint(d[-1])\\nmain()\\n\", \"x = [0] * 100010\\nm = int(input())\\nl = list(map(int, input().split()))\\nfor i in l:\\n\\tx[i] += i\\nfor i in range(2, 100010):\\n\\tx[i] = max(x[i - 1], x[i] + x[i - 2])\\nprint(x[-1])\\n\", \"n = int(input())\\nline = input().split(' ')\\ncnt = [0] * 100001\\nfor i in line:\\n\\tcnt[int(i)] += 1\\nf = [0] * 100001\\nf[1] = cnt[1]\\nfor i in range(2, 100001):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * cnt[i])\\nprint(f[100000])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\n\\ndef main(n, l):\\n\\tif n == 2:\\n\\t\\treturn max(l)\\n\\tif n == 1:\\n\\t\\treturn l[0]\\n\\tt = max(max(l), n)\\n\\tscores = [0] * (t + 1)\\n\\tdp = [0] * (t + 1)\\n\\tfor i in range(n):\\n\\t\\tdp[l[i]] += 1\\n\\tscores[1] = dp[1]\\n\\tscores[2] = max(dp[2] * 2, scores[1])\\n\\tfor i in range(3, t + 1):\\n\\t\\tscore = dp[i] * i + scores[i - 2]\\n\\t\\tscores[i] = max(scores[i - 1], score)\\n\\treturn scores[-1]\\nprint(main(n, l))\\n\", \"n = int(input())\\np = [int(i) for i in input().split()]\\np.sort()\\np.append(0)\\nw = []\\ns = 1\\nfor i in range(n):\\n\\tif p[i + 1] == p[i]:\\n\\t\\ts += 1\\n\\telse:\\n\\t\\tw.append([p[i], s * p[i]])\\n\\t\\ts = 1\\nw.append([0, 0])\\nc = [w[0]]\\nnum = 0\\nfor i in range(len(w) - 1):\\n\\tif w[i + 1][0] == w[i][0] + 1:\\n\\t\\tc.append(w[i + 1])\\n\\telse:\\n\\t\\tl = len(c)\\n\\t\\tif l > 3:\\n\\t\\t\\tc[2][1] += c[0][1]\\n\\t\\t\\tfor j in range(3, l):\\n\\t\\t\\t\\tc[j][1] = c[j][1] + max(c[j - 2][1], c[j - 3][1])\\n\\t\\t\\tnum += max(c[l - 2][1], c[l - 1][1])\\n\\t\\telif l == 1:\\n\\t\\t\\tnum += c[0][1]\\n\\t\\telif l == 2:\\n\\t\\t\\tnum += max(c[0][1], c[1][1])\\n\\t\\telif l == 3:\\n\\t\\t\\tnum += max(c[0][1] + c[2][1], c[1][1])\\n\\t\\tc = [w[i + 1]]\\nprint(num)\\n\", \"n = int(input())\\nL = [int(x) for x in input().split()]\\nL.sort()\\nl = [0] * 100001\\nfor x in L:\\n\\tl[x] += 1\\nans = [0] * 100001\\nans[1] = l[1]\\nfor i in range(100001):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * l[i])\\nprint(ans[100000])\\n\", \"from collections import *\\nfrom itertools import *\\nfrom string import *\\nfrom bisect import *\\nfrom queue import *\\nfrom heapq import *\\nfrom math import *\\nfrom sys import *\\nfrom re import *\\n\\ndef fast():\\n\\treturn stdin.readline().strip()\\n\\ndef zzz():\\n\\treturn [int(i) for i in fast().split()]\\n(z, zz) = (input, lambda : list(map(int, z().split())))\\n(szz, graph, mod, szzz) = (lambda : sorted(zz()), {}, 10 ** 9 + 7, lambda : sorted(zzz()))\\n\\ndef lcd(xnum1, xnum2):\\n\\treturn xnum1 * xnum2 // gcd(xnum1, xnum2)\\n\\ndef output(answer):\\n\\tstdout.write(str(answer))\\ndx = [-1, 1, 0, 0, 1, -1, 1, -1]\\ndy = [0, 0, 1, -1, 1, -1, -1, 1]\\nn = int(z())\\narr = zzz()\\ncnt = [0] * (10 ** 5 + 1)\\nfor i in arr:\\n\\tcnt[i] += i\\ndp = [0] * (10 ** 5 + 1)\\ndp[0] = cnt[0]\\ndp[1] = cnt[1]\\nfor i in range(10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], cnt[i] + dp[i - 2])\\nprint(max(dp))\\n\", \"from collections import Counter, defaultdict, deque\\nfrom math import *\\nimport sys\\ninput = sys.stdin.readline\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tc = Counter(arr)\\n\\tbest = 0\\n\\tnolast = 0\\n\\tfor i in range(10 ** 5 + 3):\\n\\t\\tif c[i] != 0:\\n\\t\\t\\tcur = c[i] * i\\n\\t\\t\\tsave = best\\n\\t\\t\\tbest = max(nolast + cur, best)\\n\\t\\t\\tnolast = save\\n\\t\\telse:\\n\\t\\t\\tnolast = best\\n\\tprint(best)\\ntt = 1\\nfor test in range(tt):\\n\\tsolve()\\n\", \"m = 100005\\narr = [0] * m\\nsol = [0] * m\\nn = int(input())\\nnums = [int(i) for i in input().split(' ')]\\nfor i in range(n):\\n\\tx = nums[i]\\n\\tif arr[x] == 0:\\n\\t\\tarr[x] = x\\n\\telse:\\n\\t\\tarr[x] += x\\nsol[1] = arr[1]\\nfor i in range(2, m):\\n\\tsol[i] = max(sol[i - 2] + arr[i], sol[i - 1])\\nprint(sol[m - 2])\\n\", \"n = int(input())\\nline = input()\\na = line.split()\\nnum = []\\nans = []\\nfor i in range(10 ** 5 + 1):\\n\\tnum.append(0)\\n\\tans.append(0)\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\n\\tnum[a[i]] += 1\\na.sort()\\nm = a[n - 1]\\nans[1] = num[1]\\nfor i in range(2, m + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + num[i] * i)\\nprint(ans[m])\\n\", \"numbers = input()\\nd = [0] * 100001\\nfor i in map(int, input().split()):\\n\\td[i] += i\\ndp = [0] * 100001\\ndp[0] = 0\\ndp[1] = d[1]\\nfor i in range(2, len(d)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i])\\nprint(dp[100000])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nm = max(a)\\nnum = [0] * (m + 1)\\nfen = [0] * (m + 1)\\nfor i in a:\\n\\tnum[i] += 1\\nfen[1] = num[1]\\nfor i in range(2, m + 1):\\n\\tfen[i] = max(fen[i - 1], fen[i - 2] + num[i] * i)\\nprint(fen[m])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nm = max(a)\\nl = (m + 1) * [0]\\nfor i in range(n):\\n\\tl[a[i]] += 1\\ntotal = sum(a)\\nf = [0, l[1]]\\nfor i in range(2, m + 1):\\n\\tf.append(max(f[i - 1], f[i - 2] + l[i] * i))\\nprint(f[m])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nm = {}\\nfor temp in a:\\n\\tif temp in m.keys():\\n\\t\\tm[temp] += temp\\n\\telse:\\n\\t\\tm[temp] = temp\\nl = sorted(m.items())\\nttt = []\\ncnt = -1\\nfor (first, second) in l:\\n\\tif cnt == first - 1:\\n\\t\\tttt[-1].append(second)\\n\\telse:\\n\\t\\tttt.append([second])\\n\\tcnt = first\\nans = 0\\nfor act in ttt:\\n\\tarr = [[0, 0] for i in range(len(act))]\\n\\tarr[0] = [act[0], 0]\\n\\tfor i in range(len(act)):\\n\\t\\tarr[i] = [arr[i - 1][1] + act[i], max(arr[i - 1][0], arr[i - 1][1])]\\n\\tans += max(arr[-1][0], arr[-1][1])\\nprint(ans)\\n\", \"def generate_items_map(items):\\n\\titems_map = [0] * 100001\\n\\tfor e in items:\\n\\t\\titems_map[e] += 1\\n\\treturn items_map\\n\\ndef get_max_points(items):\\n\\titems_map = generate_items_map(items)\\n\\tdp = [0, items_map[1]]\\n\\tfor idx in range(2, len(items_map)):\\n\\t\\tnum = items_map[idx]\\n\\t\\tant = dp[idx - 1]\\n\\t\\tact = idx * num + dp[idx - 2]\\n\\t\\tdp.append(max(ant, act))\\n\\treturn dp[-1]\\nn = int(input())\\nitems = list(map(int, input().split()))\\nprint(get_max_points(items))\\n\", \"from sys import stdin\\nfrom math import ceil, gcd\\nn = int(stdin.readline())\\narr = list(map(int, stdin.readline().split()))\\nd = {}\\nfor ele in arr:\\n\\td[ele] = d.get(ele, 0) + 1\\ndp = [0] * (max(arr) + 1)\\nif 1 in d:\\n\\tdp[1] = d[1]\\nfor i in range(2, max(arr) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d.get(i, 0) * i)\\nprint(dp[-1])\\n\", \"valores_unicos = set([])\\ndiccionario = {}\\nn = int(input())\\nfor numero in input().split():\\n\\tif int(numero) in diccionario.keys():\\n\\t\\tdiccionario[int(numero)] += 1\\n\\telse:\\n\\t\\tdiccionario[int(numero)] = 1\\n\\tvalores_unicos |= set([int(numero)])\\narreglo = list(valores_unicos)\\narreglo.sort()\\nDp = [[0, 0] for i in range(len(arreglo))]\\nDp[0][0] = diccionario[arreglo[0]] * arreglo[0]\\npuntos = Dp[0][0]\\nfor i in range(1, len(arreglo)):\\n\\tDp[i][1] = max(Dp[i - 1][0], Dp[i - 1][1])\\n\\tif arreglo[i] - 1 == arreglo[i - 1]:\\n\\t\\tDp[i][0] = diccionario[arreglo[i]] * arreglo[i] + Dp[i - 1][1]\\n\\telse:\\n\\t\\tDp[i][0] = diccionario[arreglo[i]] * arreglo[i] + Dp[i][1]\\n\\tif puntos < Dp[i][0]:\\n\\t\\tpuntos = Dp[i][0]\\nprint(puntos)\\n\", \"def calc(mark):\\n\\td[mark] = max(dp[mark] + calc(mark + 2), calc(mark + 1))\\n\\treturn d[mark]\\nn = int(input())\\nlst = list(map(int, input().split()))\\nn = max(lst)\\nd = [0] * (n + 1)\\ndp = [0] * (n + 1)\\nfor item in lst:\\n\\tdp[item] += item\\nd[1] = dp[1]\\nfor i in range(2, n + 1):\\n\\td[i] = max(d[i - 2] + dp[i], d[i - 1])\\nprint(d[n])\\n\", \"input()\\na = [int(i) for i in input().split()]\\nmaxa = max(a)\\nc = [0] * (maxa + 1)\\nf = [0] * (maxa + 1)\\nfor i in range(len(a)):\\n\\tc[a[i]] += 1\\nf[1] = c[1]\\nfor i in range(2, maxa + 1):\\n\\tif f[i - 2] + i * c[i] > f[i - 1]:\\n\\t\\tf[i] = f[i - 2] + i * c[i]\\n\\telse:\\n\\t\\tf[i] = f[i - 1]\\nprint(f[maxa])\\n\", \"def solve(d):\\n\\tb = 10 ** 5 + 1\\n\\tcount = [0] * b\\n\\tmini = []\\n\\tfor i in d:\\n\\t\\tif count[i] == 0:\\n\\t\\t\\tmini.append(i)\\n\\t\\tcount[i] += 1\\n\\tfor i in range(len(count)):\\n\\t\\tcount[i] = i * count[i]\\n\\tmaxer = 0\\n\\tdp = [0] * b\\n\\tfor i in range(3, b):\\n\\t\\tcount[i] += max(count[i - 2], count[i - 3])\\n\\treturn max(count)\\n\\ndef main():\\n\\tn = int(input())\\n\\td = input()\\n\\td = [int(i) for i in d.split()]\\n\\tans = solve(d)\\n\\tprint(ans)\\nmain()\\n\", \"A = int(input())\\nB = input()\\nnum = B.split(' ')\\nnumreal = [int(i) for i in num]\\npointdict = {}\\nfor i in numreal:\\n\\tif i not in pointdict:\\n\\t\\tpointdict[i] = 1\\n\\telse:\\n\\t\\tpointdict[i] += 1\\nans = max(pointdict.keys())\\ndp = [0] * (ans + 2)\\nfor i in range(0, ans + 1):\\n\\tif i not in pointdict:\\n\\t\\tpointdict[i] = 0\\ndp[1] = pointdict[1]\\nfor i in range(2, ans + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + pointdict[i] * i)\\nprint(dp[ans])\\n\", \"import sys\\n\\ndef solve():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tcount = [0] * 100009\\n\\tfor val in a:\\n\\t\\tcount[val] += 1\\n\\tres = [0] * 100009\\n\\tfor i in range(100009):\\n\\t\\tres[i] = max(res[i - 2] + count[i] * i, res[i - 1])\\n\\tprint(res[100008])\\nif sys.hexversion == 50594544:\\n\\tsys.stdin = open('test.txt')\\nsolve()\\n\", \"input()\\narr = list(map(int, input().split()))\\ncount = [0] * (max(arr) + 1)\\nfor i in arr:\\n\\tcount[i] += 1\\n(a, b) = (0, count[1])\\nfor i in range(2, len(count)):\\n\\t(a, b) = (b, max(b, a + count[i] * i))\\nprint(b)\\n\", \"n = int(input())\\nli = [0] * 100005\\nfor i in input().split():\\n\\ti = int(i)\\n\\tli[i] = i + li[i]\\npuntos_a = 0\\npuntos_b = li[1]\\nfor i in range(2, 100005):\\n\\t(puntos_a, puntos_b) = (puntos_b, max(puntos_a + li[i], puntos_b))\\nprint(puntos_b)\\n\", \"import collections\\nn = int(input())\\na = list(map(int, input().split()))\\nc = collections.Counter(a)\\no = list(map(list, c.most_common()))\\no.sort(key=lambda x: x[0])\\no.insert(0, [0, 0])\\nD = [[0] * 2 for i in range(n + 1)]\\nfor i in range(1, len(o)):\\n\\tD[i][0] = max(D[i - 1][0], D[i - 1][1])\\n\\tif o[i][0] - o[i - 1][0] == 1:\\n\\t\\tD[i][1] = D[i - 1][0] + o[i][0] * o[i][1]\\n\\telse:\\n\\t\\tD[i][1] = max(D[i - 1][0], D[i - 1][1]) + o[i][0] * o[i][1]\\nprint(max(D[len(o) - 1][0], D[len(o) - 1][1]))\\n\", \"from sys import stdin, stdout\\nimport heapq\\nimport cProfile\\nfrom collections import Counter, defaultdict, deque\\nfrom functools import reduce\\nimport math\\n\\ndef get_int():\\n\\treturn int(stdin.readline().strip())\\n\\ndef get_tuple():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef get_list():\\n\\treturn list(map(int, stdin.readline().split()))\\n\\ndef sub(st):\\n\\tr = 0\\n\\tfor (i, val) in enumerate(st):\\n\\t\\tif val == '1':\\n\\t\\t\\tr = i\\n\\treturn r\\n\\ndef solve():\\n\\tn = get_int()\\n\\tls = get_list()\\n\\tfreq_dic = Counter(ls)\\n\\tn = max(ls)\\n\\tdp = [0, freq_dic[1]] + [0] * (n - 1)\\n\\tfor i in range(2, n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq_dic[i] * i)\\n\\tprint(dp[-1])\\n\\ndef main():\\n\\tsolve()\\nTestCases = False\\nif TestCases:\\n\\tfor i in range(get_int()):\\n\\t\\tmain()\\nelse:\\n\\tmain()\\n\", \"n = int(input())\\na = [0 for i in range(10 ** 5 + 100)]\\nfor num in input().split():\\n\\ta[int(num) - 1] += 1\\nb = [0] * (10 ** 5 + 100)\\nfor i in range(10 ** 5 + 100):\\n\\tpr = b[i - 1] if i > 0 else 0\\n\\tprpr = b[i - 2] if i > 1 else 0\\n\\tb[i] = max(pr, prpr + a[i] * (i + 1))\\nprint(max(b))\\n\", \"n = int(input())\\ns = [int(i) for i in input().split()]\\na = max(s)\\nnum = (a + 1) * [0]\\nfor i in s:\\n\\tnum[i] += 1\\ndp = (a + 1) * [0]\\ndp[1] += num[1]\\nfor i in range(2, a + 1):\\n\\tdp[i] = max([dp[i - 1], dp[i - 2] + num[i] * i])\\nprint(dp[a])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\no = [0] * (max(l) + 1)\\nfor i in l:\\n\\to[i] += i\\nfor i in range(2, len(o)):\\n\\tif o[i] + o[i - 2] > o[i - 1]:\\n\\t\\to[i] = o[i] + o[i - 2]\\n\\telse:\\n\\t\\to[i] = o[i - 1]\\nprint(o[len(o) - 1])\\n\", \"n = int(input())\\ncounter_dict = [0 for i in range(100001)]\\nsequence_s = input().strip().split(' ')\\nsequence = [int(x) for x in sequence_s]\\nfor i in sequence:\\n\\tcounter_dict[i] += 1\\ntotal_score = [0 for i in range(100001)]\\ntotal_score[1] = 1 * counter_dict[1]\\nfor i in range(2, 100001):\\n\\ttotal_score[i] = max(total_score[i - 1], total_score[i - 2] + counter_dict[i] * i)\\nprint(total_score[100000])\\n\", \"from sys import stdin, exit\\nimport collections\\nn = int(stdin.readline())\\nnums = list(map(int, stdin.readline().rstrip().split(' ')))\\nfreq = [0] * 100001\\ndp = [0] * 100001\\nfor num in nums:\\n\\tfreq[num] += 1\\nfor i in range(1, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * freq[i])\\nprint(dp[100000])\\n\", \"lt = [0] * 100001\\ndp = [0] * 100001\\nx = int(input())\\nl = [int(i) for i in input().split()]\\nfor i in range(x):\\n\\tlt[l[i]] += 1\\ndp[1] = lt[1]\\nm = 0\\nfor i in range(100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + lt[i] * i)\\n\\tm = max(dp[i], m)\\nprint(m)\\n\", \"import sys\\nn = int(sys.stdin.readline())\\nnums = list((int(x) for x in sys.stdin.readline().split(' ')))\\n\\ndef max_score(seq, num):\\n\\tmax_val = max(seq)\\n\\ttracker = [0] * (max_val + 1)\\n\\tfor val in seq:\\n\\t\\ttracker[val] += 1\\n\\tscore_one = [0] * (max_val + 1)\\n\\tscore_two = [0] * (max_val + 1)\\n\\tfor i in range(1, max_val + 1):\\n\\t\\tscore_one[i] = score_two[i - 1] + i * tracker[i]\\n\\t\\tscore_two[i] = max(score_one[i - 1], score_two[i - 1])\\n\\treturn max(score_one[-1], score_two[-1])\\nprint(max_score(nums, n))\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\na = Counter(a)\\nna = list(sorted([(b, a[b]) for b in a]))\\n(best_up_to, best_including) = ({}, {})\\npe = -1\\npeb = -1\\nbu = 0\\nfor e in na:\\n\\tcv = e[1] * e[0]\\n\\tif pe <= e[0] - 2:\\n\\t\\tbest_including[e[0]] = cv + best_up_to.get(pe, 0)\\n\\telse:\\n\\t\\tbest_including[e[0]] = cv + best_up_to.get(peb, 0)\\n\\tif best_including[e[0]] > bu:\\n\\t\\tbu = best_including[e[0]]\\n\\tbest_up_to[e[0]] = bu\\n\\t(pe, peb) = (e[0], pe)\\nprint(bu)\\n\", \"a = [0 for i in range(100000 + 1)]\\nn = int(input().strip())\\ninp = [int(i) for i in input().strip().split(' ')]\\nm = max(inp)\\nfor i in inp:\\n\\ta[i] += i\\nfor i in range(2, m + 1):\\n\\ta[i] = max(a[i - 1], a[i - 2] + a[i])\\nprint(a[m])\\n\", \"def f(i, cnt, dp):\\n\\tif dp[i] < 0:\\n\\t\\tif not i:\\n\\t\\t\\tdp[i] = 0\\n\\t\\telif i == 1:\\n\\t\\t\\tdp[i] = cnt[i]\\n\\t\\telse:\\n\\t\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\treturn dp[i]\\n\\nclass CodeforcesTask455ASolution:\\n\\n\\tdef __init__(self):\\n\\t\\tself.result = ''\\n\\t\\tself.n = 0\\n\\t\\tself.sequence = []\\n\\n\\tdef read_input(self):\\n\\t\\tself.n = int(input())\\n\\t\\tself.sequence = [int(x) for x in input().split(' ')]\\n\\n\\tdef process_task(self):\\n\\t\\tcounts = [0 for x in range(1000001)]\\n\\t\\tfor num in self.sequence:\\n\\t\\t\\tcounts[num] += 1\\n\\t\\tdp = [-1 for x in range(1000001)]\\n\\t\\tfor x in range(self.n + 1):\\n\\t\\t\\tf(x, counts, dp)\\n\\t\\tself.result = str(f(self.n, counts, dp))\\n\\t\\tunique = [(counts[i], i) for i in range(1000001) if counts[i]]\\n\\t\\tif len(unique) == 1:\\n\\t\\t\\tself.result = str(unique[0][1] * unique[0][0])\\n\\n\\tdef get_result(self):\\n\\t\\treturn self.result\\nSolution = CodeforcesTask455ASolution()\\nSolution.read_input()\\nSolution.process_task()\\nprint(Solution.get_result())\\n\", \"n = int(input())\\na = sorted([int(x) for x in input().split()])\\noccurrences = {}\\nfor i in a:\\n\\tif i in occurrences:\\n\\t\\toccurrences[i] += 1\\n\\telse:\\n\\t\\toccurrences[i] = 1\\nscores = {i: i * occurrences[i] for i in a}\\nscoresList = [scores.get(i, 0) for i in range(1, 100001)]\\ncumulativeScore = 0\\npreviousCumulativeScore = 0\\nfor i in scoresList:\\n\\tbuffer = cumulativeScore\\n\\tcumulativeScore = max(cumulativeScore, previousCumulativeScore + i)\\n\\tpreviousCumulativeScore = buffer\\nprint(cumulativeScore)\\n\", \"n = int(input())\\na = input().split()\\nfrequency = [0] * 100005\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\n\\tfrequency[a[i]] += 1\\nMAX_VAL = max(a) + 1\\nmaxScore = [-1] * (MAX_VAL + 5)\\ni = MAX_VAL + 1\\nwhile i >= 0:\\n\\tif i >= MAX_VAL:\\n\\t\\tmaxScore[i] = 0\\n\\telse:\\n\\t\\ttakeFirst = frequency[i] * i + maxScore[i + 2]\\n\\t\\tdontTakeFirst = maxScore[i + 1]\\n\\t\\tmaxScore[i] = max(takeFirst, dontTakeFirst)\\n\\ti -= 1\\nprint(maxScore[0])\\n\", \"from sys import stdin, stdout\\nn = int(stdin.readline())\\nlt = [0] + [int(x) for x in stdin.readline().split()]\\ndt = dict()\\nfor x in lt:\\n\\tif x in dt:\\n\\t\\tdt[x] += 1\\n\\telse:\\n\\t\\tdt[x] = 1\\ndp = [0 for _ in range(max(lt) + 1)]\\nif 1 in dt:\\n\\tdp[1] = dt[1]\\nfor i in range(2, max(lt) + 1):\\n\\tif i in dt:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + dt[i] * i)\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1]\\nstdout.write(str(dp[-1]))\\n\", \"from collections import defaultdict as dd\\ncountMap = dd(int)\\nn = int(input())\\nnums = list(map(int, input().split()))\\nfor i in nums:\\n\\tcountMap[i] += 1\\n(max_element, min_element) = (max(nums), min(nums))\\nmemo = [0 for i in range(max_element + 1)]\\nmemo[0] = 0\\nfor i in range(min_element, max_element + 1):\\n\\tif i == 1:\\n\\t\\tmemo[i] = countMap[1]\\n\\tmemo[i] = max(memo[i - 2] + countMap[i] * i, memo[i - 1])\\nprint(memo[max_element])\\n\", \"n = list(map(int, input().strip().split()))\\nl = list(map(int, input().strip().split()))\\ndp = {}\\ncnt = {}\\nmaxVal = 0\\nfor i in l:\\n\\tif maxVal < i:\\n\\t\\tmaxVal = i\\n\\tif i not in cnt:\\n\\t\\tcnt[i] = 1\\n\\telse:\\n\\t\\tcnt[i] += 1\\ndp[0] = 0\\nif 1 in cnt:\\n\\tdp[1] = 1 * cnt[1]\\nelse:\\n\\tdp[1] = 0\\nfor i in range(2, maxVal + 1):\\n\\tif i not in cnt:\\n\\t\\tcnt[i] = 0\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[maxVal])\\n\", \"N = 100005\\nlis = [0] * N\\ndp = [0] * N\\ninput()\\nfor i in map(int, input().split(' ')):\\n\\tlis[i] += 1\\ndp[1] = lis[1]\\nfor i in range(2, N):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * lis[i])\\nprint(dp[N - 1])\\n\", \"N = int(input())\\na = list(map(int, input().split()))\\nn = max(a) + 1\\nfreq = [0] * n\\nfor e in a:\\n\\tfreq[e] += 1\\nres = [0] * n\\nres[0] = 0\\nl = min(a)\\nres[l] = freq[l] * l\\nif max(a) == 1:\\n\\tprint(res[1])\\nelse:\\n\\tfor i in range(2, n):\\n\\t\\tres[i] = max(res[i - 2] + i * freq[i], res[i - 1])\\n\\tprint(res[-1])\\n\", \"n = int(input())\\ncounts = [0] * 100002\\nfor a in map(int, input().split()):\\n\\tcounts[a] += 1\\n(f2, f1) = (0, counts[1])\\nfor i in range(2, 100002):\\n\\t(f2, f1) = (f1, max(f1, i * counts[i] + f2))\\nprint(f1)\\n\", \"import sys\\nn = int(sys.stdin.readline().rstrip())\\ns = list(map(int, sys.stdin.readline().rstrip().split(' ')))\\nN = {}\\nfor i in s:\\n\\tif i in N:\\n\\t\\tN[i] += 1\\n\\telse:\\n\\t\\tN[i] = 1\\nsol = [0] * 100010\\nfor i in range(len(sol)):\\n\\tif i in N:\\n\\t\\tpunt = N[i] * i\\n\\telse:\\n\\t\\tpunt = 0\\n\\tsol[i] = max(sol[i - 2] + punt, sol[i - 1])\\nprint(sol[-1])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nmylist = []\\na.sort()\\nfor i in range(a[-1]):\\n\\tmylist.append(0)\\nfor i in a:\\n\\tmylist[i - 1] = mylist[i - 1] + i\\nif len(mylist) > 1:\\n\\tf = {}\\n\\tfor j in range(1, len(mylist) + 1):\\n\\t\\tf[j] = [0, 0]\\n\\tf[1][1] = mylist[0]\\n\\tf[2][0] = mylist[0]\\n\\tf[2][1] = mylist[1]\\n\\tfor j in range(3, len(mylist) + 1):\\n\\t\\tf[j][0] = max(f[j - 1][0], f[j - 1][1])\\n\\t\\tf[j][1] = max(f[j - 2][0], f[j - 2][1]) + mylist[j - 1]\\n\\tprint(max(f[j][0], f[j][1]))\\nelse:\\n\\tprint(mylist[0])\\n\", \"import queue\\nn = int(input())\\n\\ndef dp(n, countArr, arrDP):\\n\\tif arrDP[n] != -1:\\n\\t\\treturn arrDP[n]\\n\\tarrDP[n] = max(dp(n - 1, countArr, arrDP), dp(n - 2, countArr, arrDP) + countArr[n] * n)\\n\\treturn arrDP[n]\\narr = list(map(int, input().split()))\\ncountArr = [0] * 100001\\nmaxNum = 0\\nfor i in range(len(arr)):\\n\\tmaxNum = max(maxNum, arr[i])\\n\\tcountArr[arr[i]] += 1\\nmaxArr = [-1] * 100001\\nmaxArr[0] = 0\\nmaxArr[1] = countArr[1]\\nfor i in range(maxNum + 1):\\n\\tresult = dp(i, countArr, maxArr)\\nprint(result)\\n\", \"input()\\na = b = 0\\nn = [0] * 100001\\nfor i in map(int, input().split()):\\n\\tn[i] += i\\nfor i in n:\\n\\ta_ = a\\n\\ta = max(a, i + b)\\n\\tb = a_\\nprint(a)\\n\", \"x = int(input())\\nline = list(map(int, input().split()))\\nn = max(line)\\nm = [[0, 0, 0] for i in range(n)]\\nfor i in range(len(line)):\\n\\tm[line[i] - 1][0] += 1\\nm[0][1] = m[0][0]\\nfor i in range(1, n):\\n\\tm[i][1] = m[i - 1][2] + m[i][0] * (i + 1)\\n\\tm[i][2] = max(m[i - 1][1], m[i - 1][2])\\nprint(max(m[n - 1][2], m[n - 1][1]))\\n\", \"def max_points(n, given_sequence):\\n\\tsequence = sorted(given_sequence)\\n\\ttable_size = sequence[-1] + 1\\n\\tseq_count = [0] * table_size\\n\\tfor number in sequence:\\n\\t\\tseq_count[number] += number\\n\\tpoint_history = [0] * len(seq_count)\\n\\tpoint_history[0] = seq_count[0]\\n\\tpoint_history[1] = max(seq_count[0], seq_count[1])\\n\\tfor i in range(2, len(seq_count)):\\n\\t\\tmaxValue = max(point_history[i - 2] + seq_count[i], point_history[i - 1])\\n\\t\\tpoint_history[i] = maxValue\\n\\treturn point_history[-1]\\nn = int(input())\\nsequence_input = input()\\nseqStrList = sequence_input.split()\\nsequence = []\\nfor item in seqStrList:\\n\\tsequence.append(int(item))\\nprint(max_points(n, sequence))\\n\", \"n = int(input())\\nv = [0] * 100007\\nfor i in input().split():\\n\\ti = int(i)\\n\\tv[i] = i + v[i]\\naux = 0\\naux2 = v[1]\\nfor i in range(2, 100007):\\n\\t(aux, aux2) = (aux2, max(aux + v[i], aux2))\\nprint(aux2)\\n\", \"n = int(input())\\nl = [int(x) for x in input().split()]\\nm = max(l)\\nans = [0] + [0] * m\\nfor i in l:\\n\\tans[i] += 1\\nfor i in range(2, m + 1):\\n\\tans[i] = max(ans[i - 1], i * ans[i] + ans[i - 2])\\nprint(ans[-1])\\n\", \"n = int(input())\\nx = [int(i) for i in input().split()]\\nx.sort()\\nc = max(x) + 1\\nz = [0] * c\\nfor i in range(n):\\n\\tz[x[i]] += 1\\nd = [0] * c\\nd[1] = z[1]\\nfor i in range(2, c):\\n\\td[i] = max(d[i - 1], d[i - 2] + z[i] * i)\\nprint(d[c - 1])\\n\", \"import math\\nimport sys\\nimport collections\\n\\ndef getdict(n):\\n\\td = {}\\n\\tif type(n) is list:\\n\\t\\tfor i in n:\\n\\t\\t\\tif i in d:\\n\\t\\t\\t\\td[i] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\td[i] = 1\\n\\telse:\\n\\t\\tfor i in range(n):\\n\\t\\t\\tt = ii()\\n\\t\\t\\tif t in d:\\n\\t\\t\\t\\td[t] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\td[t] = 1\\n\\treturn d\\n\\ndef sieve(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * 2, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\tprime[0] = prime[1] = False\\n\\tr = [p for p in range(n + 1) if prime[p]]\\n\\treturn r\\n\\ndef cdiv(n, k):\\n\\treturn n // k + (n % k != 0)\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(map(int, input().split()))\\n\\ndef lcm(a, b):\\n\\treturn abs(a * b) // math.gcd(a, b)\\n\\ndef prr(a, sep=' '):\\n\\tprint(sep.join(map(str, a)))\\n\\ndef dd():\\n\\treturn collections.defaultdict(int)\\nn = ii()\\nd = li()\\nt = dd()\\ncm = 0\\nfor i in d:\\n\\tcm = max(cm, i)\\n\\tt[i] += 1\\ndp = [0] * (cm + 1)\\ndp[1] = t[1]\\nfor i in range(2, cm + 1):\\n\\tdp[i] = max(i * t[i] + dp[i - 2], dp[i - 1])\\nprint(dp[cm])\\n\", \"from collections import Counter\\nfrom collections import defaultdict as dc\\nimport sys\\nimport math\\nmod = 10 ** 9 + 7\\n\\ndef sinp():\\n\\tp = str(sys.stdin.readline())\\n\\treturn p\\n\\ndef seive(n):\\n\\tp = [0] * (n + 1)\\n\\tfor i in range(2, n):\\n\\t\\tfor j in range(2 * i, n + 1, i):\\n\\t\\t\\tp[i] = 1\\n\\treturn p\\n\\ndef inp():\\n\\tp = int(sys.stdin.readline())\\n\\treturn p\\n\\ndef line():\\n\\tp = list(map(int, sys.stdin.readline().split()))\\n\\treturn p\\n\\ndef read_mat():\\n\\tn = inp()\\n\\ta = []\\n\\tfor i in range(n):\\n\\t\\ta.append(line())\\n\\treturn a\\n\\ndef solve(t):\\n\\tn = inp()\\n\\ta = line()\\n\\tz = max(a)\\n\\tdp = [0] * (z + 4)\\n\\tval = [0] * (z + 4)\\n\\tp = Counter(a)\\n\\tfor i in range(n):\\n\\t\\tval[a[i]] = a[i] * p[a[i]]\\n\\tdp[z] = val[z]\\n\\tfor i in range(z - 1, 0, -1):\\n\\t\\tdp[i] = val[i] + max(dp[i + 2], dp[i + 3])\\n\\tprint(max(dp[1], dp[2]))\\nt = 1\\nfor _ in range(t):\\n\\tsolve(t)\\n\", \"def f(n, cnt):\\n\\tdp = [0] * (n + 1)\\n\\tdp[1] = cnt[1]\\n\\tfor i in range(2, n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\n\\treturn dp[n]\\nn = int(input())\\nar = list(map(int, input().split()))\\ncnt = [0] * 1000000\\nfor a in ar:\\n\\tcnt[a] += 1\\nans = f(100000, cnt)\\nprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nd = [0] * 100005\\nfor i in a:\\n\\td[i] += 1\\ndp = [0] * 100005\\ndp[0] = 0\\ndp[1] = d[1]\\nfor i in range(2, 100002):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * d[i])\\nprint(dp[100000])\\n\", \"t = int(input())\\nl = list(map(int, input().split()))\\ns = [0 for i in range(10 ** 5)]\\nsum1 = s.copy()\\nmax1 = 1\\nfor i in l:\\n\\tif i > max1:\\n\\t\\tmax1 = i\\n\\ts[i - 1] += i\\ns = s[:max1]\\nprev_max = s[0]\\nprev_idx = 0\\ncurr_max = s[0]\\ncurr_idx = 0\\nif curr_max <= s[1]:\\n\\tcurr_max = s[1]\\n\\tcurr_idx = 1\\nfor i in range(2, max1):\\n\\tif i == curr_idx + 1:\\n\\t\\tif prev_max + s[i] > curr_max:\\n\\t\\t\\ttemp = prev_max\\n\\t\\t\\tprev_max = curr_max\\n\\t\\t\\tprev_idx = curr_idx\\n\\t\\t\\tcurr_max = temp + s[i]\\n\\t\\t\\tcurr_idx = i\\n\\telse:\\n\\t\\tprev_max = curr_max\\n\\t\\tprev_idx = curr_idx\\n\\t\\tcurr_max = curr_max + s[i]\\n\\t\\tcurr_idx = i\\nprint(curr_max)\\n\", \"from __future__ import division, print_function\\nimport itertools, os, sys, threading\\nfrom collections import deque, Counter, OrderedDict, defaultdict\\nimport heapq\\nfrom math import ceil, floor, log, sqrt, factorial, pow, pi\\n\\ndef ii():\\n\\treturn int(input())\\n\\ndef si():\\n\\treturn str(input())\\n\\ndef mi():\\n\\treturn map(int, input().split())\\n\\ndef li():\\n\\treturn list(mi())\\nabc = 'abcdefghijklmnopqrstuvwxyz'\\nabd = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\\nmod = 1000000007\\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\\n\\ndef getKey(item):\\n\\treturn item[0]\\n\\ndef sort2(l):\\n\\treturn sorted(l, key=getKey)\\n\\ndef d2(n, m, num):\\n\\treturn [[num for x in range(m)] for y in range(n)]\\n\\ndef isPowerOfTwo(x):\\n\\treturn x and (not x & x - 1)\\n\\ndef decimalToBinary(n):\\n\\treturn bin(n).replace('0b', '')\\n\\ndef ntl(n):\\n\\treturn [int(i) for i in str(n)]\\n\\ndef powerMod(x, y, p):\\n\\tres = 1\\n\\tx %= p\\n\\twhile y > 0:\\n\\t\\tif y & 1:\\n\\t\\t\\tres = res * x % p\\n\\t\\ty = y >> 1\\n\\t\\tx = x * x % p\\n\\treturn res\\n\\ndef gcd(x, y):\\n\\twhile y:\\n\\t\\t(x, y) = (y, x % y)\\n\\treturn x\\ngraph = defaultdict(list)\\nvisited = [0] * 1000000\\ncol = [-1] * 1000000\\n\\ndef dfs(v, c):\\n\\tif visited[v]:\\n\\t\\tif col[v] != c:\\n\\t\\t\\tprint('-1')\\n\\t\\t\\texit()\\n\\t\\treturn\\n\\tcol[v] = c\\n\\tvisited[v] = 1\\n\\tfor i in graph[v]:\\n\\t\\tdfs(i, c ^ 1)\\n\\ndef bfs(d, v):\\n\\tq = []\\n\\tq.append(v)\\n\\tvisited[v] = 1\\n\\twhile len(q) != 0:\\n\\t\\tx = q[0]\\n\\t\\tq.pop(0)\\n\\t\\tfor i in d[x]:\\n\\t\\t\\tif visited[i] != 1:\\n\\t\\t\\t\\tvisited[i] = 1\\n\\t\\t\\t\\tq.append(i)\\n\\t\\tprint(x)\\n\\tprint(l)\\n\\ndef make_graph(e):\\n\\td = {}\\n\\tfor i in range(e):\\n\\t\\t(x, y) = mi()\\n\\t\\tif x not in d.keys():\\n\\t\\t\\td[x] = [y]\\n\\t\\telse:\\n\\t\\t\\td[x].append(y)\\n\\t\\tif y not in d.keys():\\n\\t\\t\\td[y] = [x]\\n\\t\\telse:\\n\\t\\t\\td[y].append(x)\\n\\treturn d\\n\\ndef gr2(n):\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\t(x, y) = mi()\\n\\t\\tif x not in d.keys():\\n\\t\\t\\td[x] = [y]\\n\\t\\telse:\\n\\t\\t\\td[x].append(y)\\n\\treturn d\\n\\ndef connected_components(graph):\\n\\tseen = set()\\n\\n\\tdef dfs(v):\\n\\t\\tvs = set([v])\\n\\t\\tcomponent = []\\n\\t\\twhile vs:\\n\\t\\t\\tv = vs.pop()\\n\\t\\t\\tseen.add(v)\\n\\t\\t\\tvs |= set(graph[v]) - seen\\n\\t\\t\\tcomponent.append(v)\\n\\t\\treturn component\\n\\tans = []\\n\\tfor v in graph:\\n\\t\\tif v not in seen:\\n\\t\\t\\td = dfs(v)\\n\\t\\t\\tans.append(d)\\n\\treturn ans\\nn = ii()\\na = li()\\ncount = [0 for i in range(100007)]\\nfor i in range(n):\\n\\tcount[a[i]] += 1\\ndp = [0 for i in range(100007)]\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, 100007):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[100000])\\n\", \"from collections import Counter\\n\\ndef main():\\n\\tinput()\\n\\tseq = [int(c) for c in input().split()]\\n\\tcnt = Counter(seq)\\n\\tbuffer = [0, cnt[1]]\\n\\tfor i in range(2, 100001):\\n\\t\\tcur = max(buffer[-1], buffer[-2] + i * cnt[i])\\n\\t\\tbuffer.append(cur)\\n\\t\\tbuffer.pop(0)\\n\\tprint(cur)\\nmain()\\n\", \"from collections import *\\nn = int(input())\\nl = [*map(int, input().split())]\\narr = [0] * (10 ** 5 + 1)\\ndic = Counter(l)\\narr[1] = dic.get(1, 0)\\nfor i in range(2, 10 ** 5 + 1):\\n\\tarr[i] = max(arr[i - 1], arr[i - 2] + dic.get(i, 0) * i)\\nprint(arr[-1])\\n\", \"n = int(input())\\nd = [0] * (10 ** 5 + 1)\\nfor x in map(int, input().strip().split()):\\n\\td[x] += x\\nprev = curr = 0\\nfor i in d:\\n\\t(curr, prev) = (max(curr, prev + i), curr)\\nprint(curr)\\n\", \"a = []\\nb = []\\nf = []\\nn = input()\\ns = input().split()\\na = list(s)\\nfor i in range(len(a)):\\n\\ta[i] = int(a[i])\\nfor i in range(0, int(max(a)) + 2):\\n\\tb.append(0)\\n\\tf.append(0)\\nfor i in range(len(a)):\\n\\tb[int(a[i])] += 1\\nfor i in range(len(b)):\\n\\tb[i] = i * b[i]\\nf[1] = b[1]\\nfor i in range(2, len(b) - 1):\\n\\tf[i] = max(f[i - 2] + b[i], f[i - 1])\\nprint(f[-2])\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\narr = [0] * 100001\\nfor i in a:\\n\\tarr[i] = arr[i] + 1\\noneans = 0\\nanstwo = arr[1]\\nans = anstwo\\nfor i in range(2, 100001):\\n\\tans = max(anstwo, oneans + i * arr[i])\\n\\t(oneans, anstwo) = (anstwo, ans)\\nprint(ans)\\n\", \"n = int(input())\\nI = [int(x) for x in input().split()]\\nI.sort()\\nO = []\\ni = 0\\nj = 0\\nstart = True\\nwhile i < n:\\n\\twhile I[i] == I[j]:\\n\\t\\ti += 1\\n\\t\\tif i == n:\\n\\t\\t\\tbreak\\n\\tif start:\\n\\t\\tO.append(I[j] * (i - j))\\n\\t\\tstart = False\\n\\telif I[j] - I[j - 1] > 1:\\n\\t\\tO.append(O[len(O) - 1] + I[j] * (i - j))\\n\\telif len(O) < 2:\\n\\t\\tO.append(max(I[j] * (i - j), O[len(O) - 1]))\\n\\telse:\\n\\t\\tO.append(max(O[len(O) - 2] + I[j] * (i - j), O[len(O) - 1]))\\n\\tj = i\\nprint(O[len(O) - 1])\\n\", \"maxpoints_at_nth_step = []\\n\\ndef solve(a):\\n\\tlast = max(a)\\n\\tb = [0] * (last + 1)\\n\\tmaxpoints_at_nth_step = b[:]\\n\\tfor i in range(len(a)):\\n\\t\\tb[a[i]] += a[i]\\n\\tfor i in range(len(b)):\\n\\t\\tmaxpoints_at_nth_step[i] = max(maxpoints_at_nth_step[i - 1], maxpoints_at_nth_step[i - 2] + b[i])\\n\\tprint(maxpoints_at_nth_step[last])\\ninput()\\na = tuple(map(int, input().split(' ')))\\nsolve(a)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nnum_len = max(a) + 1\\nnums = [0] * num_len\\nfor i in a:\\n\\tnums[i] += 1\\nf = [0] * num_len\\nf[1] = nums[1]\\nfor i in range(2, num_len):\\n\\tf[i] = max(f[i - 1], f[i - 2] + nums[i] * i)\\nprint(f[-1])\\n\", \"n = int(input())\\nl = [int(i) for i in input().split(' ')]\\nd = [0] * 100001\\nfor i in l:\\n\\td[i] += 1\\na = d[1]\\nb = 0\\nfor i in range(2, 100001):\\n\\t(a, b) = (max(a, d[i] * i + b), a)\\nprint(a)\\n\", \"n = int(input())\\ns = input().split(' ')\\nls = []\\nfor i in range(100000):\\n\\tls.append(0)\\nfor i in range(n):\\n\\tind = int(s[i])\\n\\tls[ind - 1] += 1\\np = 0\\nq = 0\\nfor i in range(100000):\\n\\ttmp = q + (i + 1) * ls[i]\\n\\tq = max(p, q)\\n\\tp = tmp\\nprint(max(p, q))\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\nm = max(s)\\nb = [[0, 0, 0] for i in range(m)]\\nfor i in range(n):\\n\\tb[s[i] - 1][0] += 1\\nb[0][1] = b[0][0]\\nb[0][2] = 0\\nfor i in range(1, m):\\n\\tb[i][2] = max(b[i - 1][2], b[i - 1][1])\\n\\tb[i][1] = b[i - 1][2] + b[i][0] * (i + 1)\\nprint(max(b[m - 1][1], b[m - 1][2]))\\n\", \"n = int(input())\\nnumbers = [int(x) for x in input().split()]\\nmaxElement = max(numbers)\\ncounts = [0] * (maxElement + 1)\\npoints = [0] * (maxElement + 1)\\nfor number in numbers:\\n\\tcounts[number] += 1\\npoints[1] = counts[1]\\nfor i in range(2, maxElement + 1):\\n\\tpoints[i] = i * counts[i]\\n\\tfirst = points[i - 2] + points[i]\\n\\tsecond = points[i - 1]\\n\\tpoints[i] = max(first, second)\\nprint(points[maxElement])\\n\", \"n = int(input())\\nli = list(map(int, input().split()))\\ncnt = [0] * 100001\\nfor x in li:\\n\\tcnt[x] += 1\\ndp = [0] * 100001\\ndp[1] = cnt[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[100000])\\n\", \"from collections import Counter\\ninput()\\nc = Counter((int(i) for i in input().split()))\\nyes = no = 0\\nfor i in range(10 ** 5 + 1):\\n\\t(yes, no) = (no + c[i] * i, max(yes, no))\\nprint(max(yes, no))\\n\", \"import sys\\nsys.setrecursionlimit(100000)\\nn = int(input())\\nx = [0] * 100000\\nt = map(int, input().split())\\nfor i in t:\\n\\tx[i - 1] += i\\ndp = [[0] * 100000, [0] * 100000]\\ndp[1][0] = x[0]\\nfor i in range(1, 100000):\\n\\tdp[0][i] = max(dp[0][i - 1], dp[1][i - 1])\\n\\tdp[1][i] = dp[0][i - 1] + x[i]\\nprint(max(dp[0][99999], dp[1][99999]))\\n\", \"seq_len = int(input())\\nseq_elem = [int(i) for i in input().split()]\\nd = max(seq_elem) if max(seq_elem) > seq_len else seq_len\\ncnt = [0] * (d + 1)\\ndp = [0] * (d + 1)\\nfor i in seq_elem:\\n\\tcnt[i] += 1\\ndp[1] = cnt[1]\\nfor i in range(2, d + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[d])\\n\", \"n = int(input())\\nl = list(map(int, input().split(' ')))\\nl.sort()\\nm = [[l[0], 0]]\\nfor j in l:\\n\\tif j == m[-1][0]:\\n\\t\\tm[-1][1] += 1\\n\\telse:\\n\\t\\tm += [[j, 1]]\\ndp = [[0, 0] for _ in range(len(m) + 1)]\\ndp[1][0] = 0\\ndp[1][1] = m[0][0] * m[0][1]\\nfor i in range(2, len(m) + 1):\\n\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\tdp[i][1] = m[i - 1][0] * m[i - 1][1] + max(dp[i - 1][0], dp[i - 1][1] if m[i - 1][0] - m[i - 2][0] != 1 else 0)\\nprint(max(dp[len(m)]))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nS = [0] * 100002\\nfor i in range(n):\\n\\tS[l[i]] = S[l[i]] + l[i]\\ni = 0\\nk = 0\\na = b = 0\\nfor i in S:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"count = [0] * 100001\\ndp = [0] * 100003\\nn = int(input())\\nfor i in map(int, input().split()):\\n\\tcount[i] += 1\\nfor i in range(1, 100001):\\n\\tdp[i] = max(dp[i - 2] + count[i] * i, dp[i - 1])\\nprint(dp[100000])\\n\", \"import math\\nn = int(input())\\nlist1 = [int(i) for i in input().split()]\\nlist1.sort()\\nlist2 = []\\nlist3 = []\\nm = 0\\nfor i in range(0, n, 1):\\n\\tif i == 0:\\n\\t\\tlist2.append(list1[i])\\n\\t\\tlist3.append(1)\\n\\t\\tm = m + 1\\n\\telif list1[i] != list1[i - 1]:\\n\\t\\tlist2.append(list1[i])\\n\\t\\tm = m + 1\\n\\t\\tlist3.append(1)\\n\\telse:\\n\\t\\tlist3[m - 1] = list3[m - 1] + 1\\nt = len(list2)\\nlist4 = [0] * t\\nlist4[0] = list2[0] * list3[0]\\nif t == 1:\\n\\tprint(list2[0] * list3[0])\\nelse:\\n\\tif list2[1] - list2[0] > 1:\\n\\t\\tlist4[1] = list4[0] + list2[1] * list3[1]\\n\\telse:\\n\\t\\tlist4[1] = max(list4[0], list2[1] * list3[1])\\n\\tfor i in range(2, t, 1):\\n\\t\\tif list2[i] - list2[i - 1] > 1:\\n\\t\\t\\tlist4[i] = list2[i] * list3[i] + list4[i - 1]\\n\\t\\telse:\\n\\t\\t\\tlist4[i] = max(list4[i - 1], list4[i - 2] + list2[i] * list3[i])\\n\\tprint(list4[t - 1])\\n\", \"from __future__ import division, print_function\\nimport sys\\nif sys.version_info[0] < 3:\\n\\tfrom __builtin__ import xrange as range\\n\\tfrom future_builtins import ascii, filter, hex, map, oct, zip\\nimport os, sys, bisect, copy\\nfrom collections import defaultdict, Counter, deque\\nif os.path.exists('in.txt'):\\n\\tsys.stdin = open('in.txt', 'r')\\nif os.path.exists('out.txt'):\\n\\tsys.stdout = open('out.txt', 'w')\\n\\ndef input():\\n\\treturn sys.stdin.readline()\\n\\ndef mapi(arg=0):\\n\\treturn map(int if arg == 0 else str, input().split())\\nn = int(input())\\na = [0] + list(mapi())\\nmp = defaultdict(int)\\nmx = max(a)\\nfor i in a:\\n\\tmp[i] += 1\\ndp = [[0] * 2 for i in range(mx + 1)]\\nfor i in range(1, mx + 1):\\n\\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\\n\\tdp[i][1] = dp[i - 1][0] + i * mp[i]\\nprint(max(dp[mx]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\na.append(-1)\\nval = a[0]\\ndp = []\\ncheck = [1]\\nl = 0\\ncount = 1\\nfor i in range(n):\\n\\tif a[i] == a[i + 1]:\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tif val == a[i + 1] - 1:\\n\\t\\t\\tcheck.append(check[l])\\n\\t\\telse:\\n\\t\\t\\tcheck.append(check[l] + 1)\\n\\t\\tval = a[i + 1]\\n\\t\\tdp.append(count * a[i])\\n\\t\\tcount = 1\\n\\t\\tl += 1\\ndel check[l]\\ni = l - 1\\nflag = True\\nwhile i >= 0:\\n\\tif i - 1 >= 0 and i - 2 >= 0 and (check[i] == check[i - 1]) and (check[i - 1] == check[i - 2]):\\n\\t\\tif i - 3 >= 0 and check[i - 2] == check[i - 3]:\\n\\t\\t\\tdp[i - 3] += max(dp[i - 1], dp[i])\\n\\t\\tif flag:\\n\\t\\t\\tdp[i - 2] += dp[i]\\n\\t\\t\\tflag = False\\n\\t\\ti -= 1\\n\\telif i - 1 >= 0 and check[i] == check[i - 1]:\\n\\t\\tif i - 2 >= 0:\\n\\t\\t\\tif i - 3 >= 0 and check[i - 2] == check[i - 3]:\\n\\t\\t\\t\\tdp[i - 3] += max(dp[i - 1], dp[i])\\n\\t\\t\\tdp[i - 2] += max(dp[i - 1], dp[i])\\n\\t\\tflag = True\\n\\t\\ti -= 2\\n\\telif i - 1 >= 0 and check[i] != check[i - 1]:\\n\\t\\tif i - 2 >= 0 and check[i - 1] == check[i - 2]:\\n\\t\\t\\tdp[i - 2] += dp[i]\\n\\t\\tdp[i - 1] += dp[i]\\n\\t\\ti -= 1\\n\\t\\tflag = True\\n\\telse:\\n\\t\\tflag = True\\n\\t\\ti -= 1\\nans = dp[1] if 1 < l and dp[0] < dp[1] else dp[0]\\nprint(ans)\\n\", \"input()\\nl = list(map(int, input().split()))\\nfreq = [0] * 100005\\nfor i in range(len(l)):\\n\\tfreq[l[i]] += 1\\nscoreDP = dict()\\nscoreDP[0] = 0\\nscoreDP[1] = freq[1]\\nfor i in range(2, 100001):\\n\\tscoreDP[i] = max(freq[i] * i + scoreDP[i - 2], scoreDP[i - 1])\\nprint(scoreDP[10 ** 5])\\n\", \"from sys import stdin, stdout\\ncin = stdin.readline\\ncout = stdout.write\\nmp = lambda : list(map(int, cin().split()))\\n(n,) = mp()\\na = mp()\\nl = [0] * (10 ** 5 + 1)\\nfor val in a:\\n\\tl[val] += val\\nd = [0] * (10 ** 5 + 1)\\nd[1] = l[1]\\nfor i in range(0, max(a) + 1):\\n\\td[i] = max(d[i - 1], l[i] + d[i - 2])\\ncout(str(max(d)) + '\\\\n')\\n\", \"def solve(a, n):\\n\\ta = sorted(a)\\n\\tcount = {}\\n\\tfor i in range(n):\\n\\t\\tcount[a[i]] = count.get(a[i], 0) + 1\\n\\ttemp = sorted(list(set(a)))\\n\\tdp = [i for i in temp]\\n\\tdp[0] = count[temp[0]] * temp[0]\\n\\tif len(temp) == 1:\\n\\t\\treturn dp[0]\\n\\tif temp[1] == temp[0] + 1:\\n\\t\\tdp[1] = max(count[temp[1]] * temp[1], dp[0])\\n\\telse:\\n\\t\\tdp[1] = dp[0] + count[temp[1]] * temp[1]\\n\\tfor i in range(2, len(temp)):\\n\\t\\tif temp[i] == temp[i - 1] + 1:\\n\\t\\t\\tdp[i] = max(count[temp[i]] * temp[i] + dp[i - 2], dp[i - 1])\\n\\t\\telse:\\n\\t\\t\\tdp[i] = dp[i - 1] + count[temp[i]] * temp[i]\\n\\treturn dp[-1]\\nn = int(input())\\na = list(map(int, input().split()))\\nprint(solve(a, n))\\n\", \"MAXN = int(100000.0 + 100)\\ncnt = [0] * MAXN\\ndp = [0] * MAXN\\nn = int(input())\\na = list(map(int, input().split()))\\nfor el in a:\\n\\tcnt[el] += 1\\ndp[1] = cnt[1]\\nfor i in range(2, MAXN):\\n\\tdp[i] = max(dp[i - 2] + i * cnt[i], dp[i - 1])\\nprint(max(dp))\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nidx = sorted(list(set(a)))\\ncnt = {}\\nfor x in a:\\n\\tcnt[x] = cnt[x] + 1 if x in cnt else 1\\ndp = [[0, 0] for i in range(len(idx) + 1)]\\nfor i in range(len(idx)):\\n\\tcurrent_score = idx[i] * cnt[idx[i]]\\n\\tdp[i + 1][0] = max(dp[i][0], dp[i][1])\\n\\tdp[i + 1][1] = current_score + dp[i][0]\\n\\tif i == 0 or idx[i] != idx[i - 1] + 1:\\n\\t\\tdp[i + 1][1] = max(dp[i + 1][1], current_score + dp[i][1])\\nprint(max(dp[len(idx)][0], dp[len(idx)][1]))\\n\", \"N = int(input())\\nS = [int(x) for x in input().split()]\\nSS = []\\ncnt = [0] * (10 ** 5 + 1)\\nans = []\\nfor i in range(N):\\n\\tcnt[S[i]] += 1\\nfor i in range(10 ** 5):\\n\\tSS.append(cnt[i + 1] * (i + 1))\\nans.extend([SS[0], max(SS[0], SS[1])])\\nfor i in range(2, 10 ** 5):\\n\\tans.append(max(ans[i - 2] + SS[i], ans[i - 1]))\\nprint(ans[10 ** 5 - 1])\\n\", \"import collections\\nn = int(input())\\nnums = [int(i) for i in input().split()]\\nif not nums:\\n\\tprint(0)\\nelse:\\n\\tcount = collections.Counter(nums)\\n\\tsecond = first = 0\\n\\tfor i in range(1, max(nums) + 1):\\n\\t\\t(second, first) = (first, max(second + count[i] * i, first))\\n\\tprint(first)\\n\", \"from collections import Counter\\nn = int(input().strip())\\na = [int(i) for i in input().strip().split(' ')]\\ncount = Counter(a)\\nnumbers = list(sorted(count.keys()))\\ndp = [0, count[numbers[0]] * numbers[0]]\\nfor i in range(1, len(numbers)):\\n\\tif numbers[i - 1] + 1 == numbers[i]:\\n\\t\\tdp += [max(dp[-1], dp[-2] + count[numbers[i]] * numbers[i])]\\n\\telse:\\n\\t\\tdp += [dp[-1] + count[numbers[i]] * numbers[i]]\\nprint(dp[-1])\\n\", \"max_x = 0\\nn = int(input())\\na = [int(i) for i in input().split()]\\nc = [0] * 100010\\nfor i in range(n):\\n\\tif a[i] > max_x:\\n\\t\\tmax_x = a[i]\\n\\tc[a[i]] += 1\\ndp = [0] * (max_x + 1)\\ndp[1] = c[1]\\nfor i in range(2, max_x + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + c[i] * i)\\nprint(dp[max_x])\\n\", \"import sys\\n\\ndef main():\\n\\tMAX = 100001\\n\\ttab = [0] * MAX\\n\\tu = [0] * MAX\\n\\tn = int(input())\\n\\ta = list(map(int, sys.stdin.readline().split()))\\n\\tfor i in range(n):\\n\\t\\ttab[a[i]] += a[i]\\n\\tu[1] = tab[1]\\n\\tu[2] = max(tab[2], u[1])\\n\\tfor i in range(3, MAX):\\n\\t\\tu[i] = max(u[i - 1], u[i - 2] + tab[i])\\n\\tprint(u[MAX - 1])\\nmain()\\n\", \"from collections import defaultdict\\nn = int(input())\\nl = list(map(int, input().split()))\\nd = {}\\nd = defaultdict(int)\\nmaxi = -99\\nfor i in l:\\n\\td[i] += 1\\n\\tmaxi = max(i, maxi)\\ndp = [0] * 100001\\ndp[1] = d[1]\\nfor i in range(2, 100000 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i] * i)\\nprint(max(dp))\\n\", \"from collections import Counter as C\\n\\ndef eleadj(i):\\n\\tif score.get(elements[i] - 1, -1) == -1:\\n\\t\\treturn True\\n\\treturn False\\n\\ndef eleNotadj(i, j):\\n\\tif j < i - 1:\\n\\t\\treturn j\\n\\tj -= 1\\n\\twhile j >= 0 and score.get(elements[j], -1) == -1:\\n\\t\\tj -= 1\\n\\telse:\\n\\t\\treturn j\\nn = int(input())\\na = list(map(int, input().split()))\\nc = C(a)\\nscore = {i: i * c[i] for i in c}\\nelements = list(score.keys())\\nelements.sort()\\nl = len(elements)\\ndp = [0] * l\\ndp[0] = score[elements[0]]\\nfor i in range(1, l):\\n\\tif eleadj(i) == True:\\n\\t\\tdp[i] = score[elements[i]] + dp[i - 1]\\n\\telse:\\n\\t\\tdp[i] = max(score[elements[i]] + dp[i - 2], dp[i - 1])\\nprint(max(dp))\\n\", \"input()\\nnumlist = [int(x) for x in input().split()]\\nnumlist.sort()\\nsumlist = [0] * 100010\\nfor i in numlist:\\n\\tsumlist[i] += i\\ndp = [0] * 100010\\nfor i in range(100010):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + sumlist[i])\\nprint(dp[-1])\\n\", \"size = int(input())\\nsteps = input().split()\\nitem = 0\\nwhile item < size:\\n\\tsteps[item] = int(steps[item])\\n\\titem += 1\\nmin_steps = min(steps)\\nmax_steps = max(steps)\\nnumber_of_steps = [0] * (max_steps - min_steps + 2)\\nitem = 0\\nwhile item < size:\\n\\tnumber_of_steps[steps[item] - min_steps] += 1\\n\\titem += 1\\nitem = 0\\nwhile item < max_steps - min_steps + 1:\\n\\tnumber_of_steps[item] = number_of_steps[item] * (item + min_steps)\\n\\titem += 1\\ncheck = [number_of_steps[0], max(number_of_steps[0], number_of_steps[1])]\\nitem = 0\\nwhile item < max_steps - min_steps - 1:\\n\\tcheck += [max(check[len(check) - 1], check[len(check) - 2] + number_of_steps[len(check)])]\\n\\titem += 1\\nprint(check[-1])\\n\", \"n = int(input())\\nnums = list(map(int, input().split()))\\nmaxn = 100001\\ncnt = [0] * maxn\\nfor x in nums:\\n\\tcnt[x] += 1\\ndp = [0] * maxn\\ndp[1] = cnt[1]\\nans = 0\\nfor i in range(2, maxn):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\tans = max(dp[i], ans)\\nprint(ans)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nx = [0] * 100001\\ndp = [0]\\nfor i in range(n):\\n\\tx[a[i]] += 1\\ndp.append(x[1])\\nfor i in range(2, 100001):\\n\\tdp.append(max(dp[-1], dp[-2] + x[i] * i))\\nprint(dp[-1])\\n\", \"def boredom(n, lis):\\n\\td = [0] * 100001\\n\\ta = 0\\n\\tb = 0\\n\\tfor x in lis:\\n\\t\\td[x] += x\\n\\tfor i in d:\\n\\t\\t(a, b) = (max(a, i + b), a)\\n\\treturn a\\nn = int(input())\\nlis = list(map(int, input().split()))\\nprint(boredom(n, lis))\\n\", \"_sum = 0\\nn = int(input())\\nmas = list(map(int, input().split()))\\narray = [0] * 100002\\nfor i in range(0, len(mas)):\\n\\tarray[mas[i]] += mas[i]\\nfor i in range(2, 100002):\\n\\tarray[i] = max(array[i - 1], array[i] + array[i - 2])\\nprint(array[i - 1])\\n\", \"n = int(input())\\ndp = [0] * 100010\\nfor x in list(map(int, input().split())):\\n\\tdp[x] += x\\nfor i in range(2, 100002):\\n\\tdp[i] = max(dp[i - 1], dp[i] + dp[i - 2])\\nprint(dp[100001])\\n\", \"n = int(input())\\na = map(int, input().split())\\ncnt = [0] * 100001\\nfor x in a:\\n\\tcnt[x] += 1\\nf = [0] * 100001\\nf[1] = cnt[1]\\nfor i in range(2, 100001):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * cnt[i])\\nprint(f[100000])\\n\", \"n = int(input())\\nA = {}\\nfor a in map(int, input().split()):\\n\\tA[a] = A.get(a, 0) + 1\\ndp = [0]\\nfor a in range(1, 10 ** 5 + 1):\\n\\tdp.append(max(dp[a - 1], a * A.get(a, 0) + dp[a - 2]))\\nprint(dp[-1])\\n\", \"a = int(input())\\nz = list(map(int, input().split()))\\nt = [0 for i in range(0, max(z) + 1)]\\nfor i in range(len(z)):\\n\\tt[z[i]] += 1\\nans = [0, t[1]]\\nfor i in range(2, len(t)):\\n\\tans.append(max(ans[i - 2] + t[i] * i, ans[i - 1]))\\nprint(ans[-1])\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nlost = [0 for _ in range(0, 100001)]\\nfor v in a:\\n\\tlost[v] += 1\\nremoved = [0, lost[1]]\\nfor i in range(2, 100001):\\n\\tremoved.append(max(removed[i - 1], removed[i - 2] + lost[i] * i))\\nprint(removed[-1])\\n\", \"n = int(input())\\nnumber = [int(x) for x in input().split()]\\nd = [0] * 100001\\nfor x in number:\\n\\td[x] += x\\na = b = 0\\nfor i in d:\\n\\t(a, b) = (max(a, i + b), a)\\nprint(a)\\n\", \"def solve(L):\\n\\td = {}\\n\\tfor i in L:\\n\\t\\tif i not in d:\\n\\t\\t\\td[i] = 1\\n\\t\\telse:\\n\\t\\t\\td[i] += 1\\n\\tf = []\\n\\tfor i in d:\\n\\t\\tf.append((i, i * d[i]))\\n\\tf.sort(key=lambda x: x[0])\\n\\tdp = [0, f[0][1]]\\n\\tfor i in range(1, len(f)):\\n\\t\\tif f[i][0] > f[i - 1][0] + 1:\\n\\t\\t\\tdp.append(f[i][1] + dp[i])\\n\\t\\telse:\\n\\t\\t\\tdp.append(max(f[i][1] + dp[i - 1], dp[i]))\\n\\treturn dp[-1]\\nN = int(input())\\nL = list(map(int, input().split(' ')))\\nprint(solve(L))\\n\", \"n = int(input())\\narr = [int(i) for i in input().split()]\\nfrom collections import defaultdict\\ncnt = defaultdict(int)\\nfor i in arr:\\n\\tcnt[i] += 1\\nk = max(arr)\\ndp = [0 for i in range(k + 1)]\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor i in range(2, k + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\nprint(dp[-1])\\n\", \"n = int(input())\\nline = [int(n) for n in input().split()]\\nn = max(line)\\nm = [[0, 0, 0] for i in range(n)]\\nfor i in range(len(line)):\\n\\tm[line[i] - 1][0] += 1\\nm[0][1] = m[0][0]\\nfor i in range(1, n):\\n\\tm[i][1] = m[i - 1][2] + m[i][0] * (i + 1)\\n\\tm[i][2] = max(m[i - 1][1], m[i - 1][2])\\nprint(max(m[n - 1][2], m[n - 1][1]))\\n\", \"n = int(input())\\nmax = 100005\\ncount = []\\na = list(map(int, input().split()))\\ncount = [0] * max\\nfor i in range(n):\\n\\tx = a[i]\\n\\tcount[x] += 1\\ndp = []\\ndp = [0] * max\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, max):\\n\\tx = dp[i - 2] + i * count[i]\\n\\ty = dp[i - 1] > x and dp[i - 1] or x\\n\\tdp[i] = y\\nprint(dp[max - 1])\\n\", \"n = int(input())\\na = map(int, input().split())\\ncounts = [0] * 100001\\nmx = 0\\nfor x in a:\\n\\tcounts[x] += 1\\n\\tmx = max(x, mx)\\nf = [0, counts[1]]\\nfor i in range(2, mx + 1):\\n\\tf.append(max(f[i - 1], i * counts[i] + f[i - 2]))\\nprint(f[mx])\\n\", \"from collections import Counter\\nn = int(input())\\ncount = Counter(map(int, input().split()))\\nm = max(count)\\nf = [0, count[1]]\\nfor i in range(2, m + 1):\\n\\tf.append(max(f[i - 1], f[i - 2] + count[i] * i))\\nprint(f[m])\\n\", \"n = int(input())\\nc = [int(x) for x in input().split(' ')]\\na = [0] * 100000\\nn = 0\\nfor i in c:\\n\\ta[i - 1] += i\\n\\tn = max(n, i)\\ndp = [0] * n\\nif n == 1:\\n\\tprint(a[0])\\nelif n == 2:\\n\\tprint(max(a[0], a[1]))\\nelse:\\n\\tdp[0] = a[0]\\n\\tdp[1] = max(a[0], a[1])\\n\\tfor i in range(2, n):\\n\\t\\tdp[i] = max(a[i] + dp[i - 2], dp[i - 1])\\n\\tprint(dp[-1])\\n\", \"n = int(input())\\ndata = [int(x) for x in input().split()]\\nMAXN = 100000\\ncnt = [0] * (MAXN + 1)\\ndata = sorted(data)\\nfor value in data:\\n\\tcnt[value] += 1\\ndp = [0] * (n + 1)\\nfor k in range(1, n + 1):\\n\\tif k < n and data[k] == data[k - 1]:\\n\\t\\tcontinue\\n\\tvalue1 = data[k - 1]\\n\\tif k - cnt[value1] == 0:\\n\\t\\tdp[k] = value1 * cnt[value1]\\n\\t\\tcontinue\\n\\tvalue2 = data[k - cnt[value1] - 1]\\n\\tif value2 + 1 == value1:\\n\\t\\tdp[k] = dp[k - cnt[value1] - cnt[value2]] + value1 * cnt[value1]\\n\\telse:\\n\\t\\tdp[k] = dp[k - cnt[value1]] + value1 * cnt[value1]\\n\\t\\tcontinue\\n\\tif k - cnt[value1] - cnt[value2] == 0:\\n\\t\\tdp[k] = max(dp[k], value2 * cnt[value2])\\n\\t\\tcontinue\\n\\tvalue3 = data[k - cnt[value1] - cnt[value2] - 1]\\n\\tif value3 + 1 == value2:\\n\\t\\tdp[k] = max(dp[k], dp[k - cnt[value1] - cnt[value2] - cnt[value3]] + value2 * cnt[value2])\\n\\telse:\\n\\t\\tdp[k] = max(dp[k], dp[k - cnt[value1] - cnt[value2]] + value2 * cnt[value2])\\nprint(dp[n])\\n\", \"from sys import stdin\\nn = int(stdin.readline().rstrip())\\nl = list(map(int, stdin.readline().rstrip().split(' ')))\\nd = {}\\nm = 0\\nfor i in range(n):\\n\\tif l[i] > m:\\n\\t\\tm = l[i]\\n\\tx = d.get(l[i], 0)\\n\\tif not x:\\n\\t\\td[l[i]] = 1\\n\\telse:\\n\\t\\td[l[i]] += 1\\nr = [0] * max(m + 1, n + 1)\\nr[1] = d.get(1, 0)\\nres = 0\\nfor i in range(2, max(n + 1, m + 1)):\\n\\tr[i] = max(r[i - 1], r[i - 2] + d.get(i, 0) * i)\\n\\tres = max(res, r[i])\\nprint(res)\\n\", \"__author__ = 'JohnHook'\\nn = int(input())\\na = list(map(int, input().split()))\\nd = {}\\nfor x in a:\\n\\tif x in d:\\n\\t\\td[x] += 1\\n\\telse:\\n\\t\\td[x] = 1\\nk = [0] + sorted(d.keys())\\ndp = [0, d[k[1]] * k[1]]\\nfor i in range(2, len(k)):\\n\\tif k[i] - k[i - 1] > 1:\\n\\t\\tdp.append(dp[i - 1] + d[k[i]] * k[i])\\n\\telse:\\n\\t\\tdp.append(max(dp[i - 1], dp[i - 2] + d[k[i]] * k[i]))\\nprint(max(dp))\\n\", \"def solve():\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\ta.sort()\\n\\tv = []\\n\\tnum = []\\n\\tv.append(a[0])\\n\\tcnt = 1\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] == a[i - 1]:\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tnum.append(cnt)\\n\\t\\t\\tcnt = 1\\n\\t\\t\\tv.append(a[i])\\n\\tnum.append(cnt)\\n\\tf = [0] * n\\n\\tg = [0] * n\\n\\tf[0] = v[0] * num[0]\\n\\tg[0] = 0\\n\\tfor i in range(1, len(v)):\\n\\t\\tif v[i] == v[i - 1] + 1:\\n\\t\\t\\tf[i] = v[i] * num[i] + g[i - 1]\\n\\t\\t\\tg[i] = max(g[i - 1], f[i - 1])\\n\\t\\telse:\\n\\t\\t\\tf[i] = v[i] * num[i] + max(f[i - 1], g[i - 1])\\n\\t\\t\\tg[i] = max(f[i - 1], g[i - 1])\\n\\tprint(max(f[len(v) - 1], g[len(v) - 1]))\\nsolve()\\n\", \"input()\\na = [0] * 100001\\nfor i in [int(x) for x in input().split()]:\\n\\ta[i] += i\\nct1 = 0\\nct2 = 0\\nfor i in a:\\n\\t(ct1, ct2) = (max(ct1, ct2 + i), ct1)\\nprint(ct1)\\n\", \"n = int(input())\\na = [0 for i in range(10 ** 5 + 1)]\\nfor i in input().split():\\n\\ta[int(i)] += int(i)\\nans = [None for i in range(10 ** 5 + 1)]\\nans[0] = a[0]\\nans[1] = max(a[0], a[1])\\nfor i in range(2, 10 ** 5 + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + a[i])\\nprint(ans[-1])\\n\", \"n = int(input())\\nli = list(map(int, input().split(' ')))\\nmaxi = max(li)\\ncnt = [0] * (maxi + 1)\\ndp = [0] * (maxi + 1)\\ni = 0\\nj = 2\\nwhile i < n:\\n\\tcnt[li[i]] += 1\\n\\ti += 1\\ndp[0] = cnt[0]\\ndp[1] = cnt[1]\\nwhile j <= maxi:\\n\\tdp[j] = max(dp[j - 2] + cnt[j] * j, dp[j - 1])\\n\\tj += 1\\nprint(dp[maxi])\\n\", \"import sys\\nimport math\\nimport collections\\nimport operator as op\\nfrom collections import deque\\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2\\nfrom bisect import bisect_right, bisect_left\\nfrom functools import reduce\\nfrom sys import stdin, stdout, setrecursionlimit\\nsetrecursionlimit(2 ** 20)\\n\\ndef factorial(n):\\n\\tif n == 0:\\n\\t\\treturn 1\\n\\treturn n * factorial(n - 1)\\n\\ndef ncr(n, r):\\n\\tr = min(r, n - r)\\n\\tnumer = reduce(op.mul, range(n, n - r, -1), 1)\\n\\tdenom = reduce(op.mul, range(1, r + 1), 1)\\n\\treturn numer // denom\\n\\ndef prime_factors(n):\\n\\ti = 2\\n\\tfactors = []\\n\\twhile i * i <= n:\\n\\t\\tif n % i:\\n\\t\\t\\ti += 1\\n\\t\\telse:\\n\\t\\t\\tn //= i\\n\\t\\t\\tfactors.append(i)\\n\\tif n > 1:\\n\\t\\tfactors.append(n)\\n\\treturn list(factors)\\nMOD = 1000000007\\nPMOD = 998244353\\nN = 10 ** 5\\nT = 1\\nfor _ in range(T):\\n\\tn = int(stdin.readline())\\n\\ta = list(map(int, stdin.readline().rstrip().split()))\\n\\tc = [0] * N\\n\\tfor i in a:\\n\\t\\tc[i - 1] += 1\\n\\tdp = [0] * (N + 1)\\n\\tdp[1] = c[0]\\n\\tfor i in range(2, N + 1):\\n\\t\\tdp[i] = max(dp[i - 1], c[i - 1] * i + dp[i - 2])\\n\\tprint(dp[-1])\\n\", \"n = int(input())\\nvs = [int(x) for x in input().split(' ')]\\nfrom collections import Counter\\nc = Counter(vs)\\nmv = max(vs)\\ns = [0 if i not in c else c[i] * i for i in range(mv + 1)]\\nd = [0 for i in range(mv + 2)]\\nfor i in range(1, mv + 1):\\n\\td[i] = max(s[i] + d[i - 2], d[i - 1])\\nprint(d[mv])\\n\", \"n = int(input())\\nx = [0] * 100000\\nt = map(int, input().split())\\nfor i in t:\\n\\tx[i - 1] += i\\ndp = [0] * 100000\\ndp[0] = x[0]\\ndp[1] = x[1]\\ndp[2] = x[0] + x[2]\\nfor i in range(99997):\\n\\tdp[i + 3] = max(dp[i + 1] + x[i + 3], dp[i] + x[i + 3])\\nprint(max(dp[99999], dp[99998]))\\n\", \"n = int(input())\\nai = list(map(int, input().split()))\\nn2 = 10 ** 5 + 5\\nai2 = [0] * n2\\nai3 = [0] * n2\\nfor i in range(n):\\n\\tai2[ai[i]] += 1\\nfor i in range(n2 - 2):\\n\\tai3[i + 2] = max(ai3[i + 2], ai3[i] + ai2[i] * i)\\n\\tai3[i + 1] = max(ai3[i + 1], ai3[i])\\nprint(max(ai3))\\n\", \"from collections import Counter\\nn = int(input())\\narr = list(map(int, input().split()))\\nc = Counter(arr)\\nnarr = list(sorted(set(arr)))\\ndp = [0]\\nfor i in range(len(narr)):\\n\\tx = narr[i]\\n\\tv = x * c[x]\\n\\tif not i:\\n\\t\\tdp.append(v)\\n\\telif narr[i] == narr[i - 1] + 1:\\n\\t\\tdp.append(max(dp[-2] + v, dp[-1]))\\n\\telse:\\n\\t\\tdp.append(v + dp[-1])\\nprint(dp[-1])\\n\", \"input()\\nd = [0] * 100001\\na = map(int, input().split())\\nfor x in a:\\n\\td[x] += x\\nres = p = q = 0\\nfor i in d:\\n\\tres = i + q\\n\\tres = max(p, res)\\n\\tq = p\\n\\tp = res\\nprint(p)\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\ncount = Counter(a)\\nm = max(a)\\nT = [0 for _ in range(m + 1)]\\nT[1] = count[1]\\nfor i in range(2, m + 1):\\n\\tT[i] = max(T[i - 1], T[i - 2] + i * count[i])\\nprint(T[m])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nct = [0] * 100005\\ndp = [0] * 100005\\nfor x in l:\\n\\tct[x] = ct[x] + 1\\ndp[1] = ct[1]\\nans = 0\\nfor i in range(2, 100005):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + ct[i] * i)\\n\\tans = max(ans, dp[i])\\nprint(ans)\\n\", \"m = int(input())\\nl1 = list(map(int, input().split()))\\nans = [0 for _ in range(100001)]\\nfor i in range(len(l1)):\\n\\tans[l1[i]] += 1\\nr = max(l1)\\nfor i in range(2, r + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * ans[i])\\nprint(ans[r])\\n\", \"n = int(input())\\na = [0] * 100005\\nf0 = [0] * 100005\\nf1 = [0] * 100005\\nfor x in input().split():\\n\\ta[int(x)] += 1\\nf1[1] = a[1]\\nfor i in range(2, 100001):\\n\\tf0[i] = max(f0[i - 1], f1[i - 1])\\n\\tf1[i] = f0[i - 1] + a[i] * i\\nprint(max(f0[100000], f1[100000]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncheck_list = [0] * 100001\\nmark_list = [0] * 100001\\n_max = 0\\nfor i in a:\\n\\tcheck_list[i] += i\\nmark_list[1] = check_list[1]\\ni = 2\\nwhile i < 100001:\\n\\tnum1 = mark_list[i - 2] + check_list[i]\\n\\tnum2 = mark_list[i - 1]\\n\\tmark_list[i] = max(num1, num2)\\n\\ti += 1\\nprint(mark_list[100000])\\n\", \"n = int(input())\\nsequence = [int(k) for k in input().split()]\\nminimum = min(sequence)\\nmaximum = max(sequence)\\nnumbers = (maximum + 1) * [0]\\ndp = (maximum + 1) * [0]\\nfor i in sequence:\\n\\tnumbers[i] += 1\\ndp[0] = [0, 0]\\ndp[1] = [0, numbers[1]]\\nfor i in range(2, maximum + 1):\\n\\tdp[i] = [max(dp[i - 1][0], dp[i - 1][1]), dp[i - 1][0] + i * numbers[i]]\\nhighest = max(dp[maximum][0], dp[maximum][1])\\nprint(highest)\\n\", \"from collections import deque, Counter, OrderedDict\\nfrom heapq import nsmallest, nlargest\\nfrom math import ceil, floor, log, log2, sqrt, gcd, factorial, pow\\n\\ndef binNumber(n, size=4):\\n\\treturn bin(n)[2:].zfill(size)\\n\\ndef iar():\\n\\treturn list(map(int, input().split()))\\n\\ndef ini():\\n\\treturn int(input())\\n\\ndef isp():\\n\\treturn map(int, input().split())\\n\\ndef sti():\\n\\treturn str(input())\\n\\ndef par(a):\\n\\treturn ' '.join(list(map(str, a)))\\n\\nclass pair:\\n\\n\\tdef __init__(self, f, s):\\n\\t\\tself.fi = f\\n\\t\\tself.se = s\\n\\n\\tdef __lt__(self, other):\\n\\t\\treturn (self.fi, self.se) < (other.fi, other.se)\\nn = ini()\\na = iar()\\nif n == 1:\\n\\tprint(a[0])\\n\\tquit()\\nelif n == 2:\\n\\tif a[0] == a[1]:\\n\\t\\tprint(2 * a[0])\\n\\telse:\\n\\t\\tprint(max(a[0], a[1]))\\n\\tquit()\\nc = Counter(a)\\na = list(set(a))\\na.sort()\\nif len(a) == 1:\\n\\tprint(a[0] * c[a[0]])\\n\\tquit()\\ndp = [0] * len(a)\\nk = 1\\ndp[0] = a[0] * c[a[0]]\\nif a[1] == 2:\\n\\tdp[1] = max(2 * c[2], dp[0])\\n\\tk = 2\\nfor i in range(k, len(a)):\\n\\tif c[a[i] - 1] != 0:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i] * c[a[i]])\\n\\telse:\\n\\t\\tdp[i] = a[i] * c[a[i]] + dp[i - 1]\\nprint(dp[len(a) - 1])\\n\", \"number = int(input())\\nstr1 = input()\\nL = str1.split(' ')\\nmaxvalue = 0\\nfor i in range(len(L)):\\n\\tL[i] = int(L[i])\\n\\tmaxvalue = max(maxvalue, L[i])\\nnumberlist = [0] * (maxvalue + 1)\\ndplist = [0] * (maxvalue + 1)\\nfor i in L:\\n\\tnumberlist[i] += 1\\ndplist[1] = numberlist[1]\\nfor i in range(2, maxvalue + 1):\\n\\tdplist[i] = max(dplist[i - 1], dplist[i - 2] + numberlist[i] * i)\\nmaxtotlepoint = 0\\nfor i in dplist:\\n\\tmaxtotlepoint = max(maxtotlepoint, i)\\nprint(maxtotlepoint)\\n\", \"L = []\\nfor i in range(100001):\\n\\tL.append(0)\\nn = int(input())\\nI = list(map(int, input().split()))\\nfor i in range(n):\\n\\tL[I[i]] += 1\\ndp = {}\\ndp = {0: 0, 1: L[1]}\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * L[i])\\nprint(dp[100000])\\n\", \"N = 100001\\na = [0] * N\\ninput()\\nfor i in map(int, input().split(' ')):\\n\\ta[i] += i\\ndp = [0] * N\\nfor i in range(1, N):\\n\\tif i == 1:\\n\\t\\tdp[i] = a[i]\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i])\\nprint(dp[N - 1])\\n\", \"import sys\\nfrom collections import Counter\\nnums = [int(x) for x in sys.stdin.readlines()[1].split()]\\nl = Counter(nums)\\nnums = sorted(l.items(), key=lambda x: x[0])\\ndp = [0] * (len(nums) + 1)\\ndp[0] = 0\\ndp[1] = nums[0][0] * nums[0][1]\\nfor i in range(1, len(nums)):\\n\\tcur = nums[i][0] * nums[i][1]\\n\\tif nums[i][0] - nums[i - 1][0] > 1:\\n\\t\\tdp[i + 1] = max(dp[i - 1], dp[i] + cur, dp[i])\\n\\telse:\\n\\t\\tdp[i + 1] = max(dp[i], dp[i - 1] + cur, dp[i - 1])\\nprint(dp[-1])\\n\", \"N = int(input())\\ncount = dict()\\ncount[1] = 0\\nfor i in input().split():\\n\\tn = int(i)\\n\\tif not count.get(n):\\n\\t\\tcount[n] = 0\\n\\tcount[n] += 1\\nkeys = count.keys()\\ndp = [0] * (max(keys) + 1)\\ndp[1] = count[1]\\nfor i in range(2, max(keys) + 1):\\n\\tif not count.get(i):\\n\\t\\tdp[i] = dp[i - 1]\\n\\t\\tcontinue\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[-1])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\n\\ndef fun(arr):\\n\\td = dict()\\n\\tans = 0\\n\\tn = 1\\n\\tfor i in range(len(arr)):\\n\\t\\tcurr = arr[i]\\n\\t\\tif curr in d:\\n\\t\\t\\td[curr] += curr\\n\\t\\telse:\\n\\t\\t\\td[curr] = curr\\n\\t\\tn = max(n, curr)\\n\\tdp = [0 for i in range(n + 1)]\\n\\tif 1 in d:\\n\\t\\tdp[1] = d[1]\\n\\tfor i in range(2, n + 1):\\n\\t\\tif i not in d:\\n\\t\\t\\tdp[i] = dp[i - 1]\\n\\t\\t\\tcontinue\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i])\\n\\treturn dp[n]\\nprint(fun(arr))\\n\", \"input()\\nseq = [0] * 100001\\nd = list(map(int, input().split()))\\nfor i in d:\\n\\tseq[i] += i\\nans = [0, seq[1]] + [0] * 100000\\nfor i in range(2, max(d) + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + seq[i])\\nprint(ans[max(d)])\\n\", \"def max_points(arr, n):\\n\\tmap_val = {}\\n\\tfor x in arr:\\n\\t\\tif map_val.get(x):\\n\\t\\t\\tmap_val[x] += 1\\n\\t\\telse:\\n\\t\\t\\tmap_val[x] = 1\\n\\tsorted_keys = sorted(map_val.keys())\\n\\tres = [0] * len(sorted_keys)\\n\\tfor (i, _) in enumerate(sorted_keys):\\n\\t\\tif i - 1 >= 0 and sorted_keys[i] == sorted_keys[i - 1] + 1:\\n\\t\\t\\tprev = res[i - 1]\\n\\t\\t\\tprev_prev = res[i - 2] if i >= 2 else 0\\n\\t\\t\\tres[i] = max(sorted_keys[i] * map_val[sorted_keys[i]] + prev_prev, prev)\\n\\t\\telse:\\n\\t\\t\\tres[i] = sorted_keys[i] * map_val[sorted_keys[i]] + res[i - 1]\\n\\treturn res[len(sorted_keys) - 1]\\nN = int(input())\\narr = list(map(int, input().split(' ')))\\nprint(max_points(arr, N))\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\ncount = [0] * 100001\\nfor i in a:\\n\\tcount[i] += 1\\ndp = [0] * 100001\\ndp[1] = count[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\nprint(dp[100000])\\n\", \"n = int(input())\\nscore = [0] * 100001\\nfor i in map(int, input().strip().split(' ')):\\n\\tscore[i] += i\\nst = 0\\nen = 0\\nfor i in score:\\n\\t(st, en) = (max(st, en + i), st)\\nprint(st)\\n\", \"n = int(input())\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\nls = [0 for i in range(10 ** 5 + 1)]\\nfor i in range(n):\\n\\tls[a[i]] += 1\\nf = [0 for i in range(10 ** 5 + 1)]\\nf[1] = ls[1]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * ls[i])\\nprint(f[10 ** 5])\\n\", \"from collections import Counter\\nimport sys\\nn = int(input())\\nseq = [int(x) for x in input().split()]\\ncounts = sorted(Counter(seq).most_common(), key=lambda x: x[0])\\nfor i in range(len(counts)):\\n\\t(num, freq) = counts[i]\\n\\tcounts[i] = (num, num * freq)\\nif len(counts) == 1:\\n\\tprint(counts[0][1])\\n\\tsys.exit()\\nmax_scores = [counts[0][1], max(counts[0][1], counts[1][1]) if counts[0][0] + 1 == counts[1][0] else counts[0][1] + counts[1][1]]\\nfor i in range(2, len(counts)):\\n\\tif counts[i][0] - 1 != counts[i - 1][0]:\\n\\t\\tmax_scores.append(max_scores[-1] + counts[i][1])\\n\\t\\tcontinue\\n\\tif counts[i - 1][0] - 1 != counts[i - 2][0]:\\n\\t\\tmax_scores.append(max_scores[-2] + max(counts[i][1], counts[i - 1][1]))\\n\\t\\tcontinue\\n\\tmax_scores.append(max(max_scores[-1], max_scores[-2] + counts[i][1]))\\nprint(max_scores[-1])\\n\", \"from sys import *\\nn = int(stdin.readline())\\nthings = list(map(int, stdin.readline().split()))\\nscores = [0] * 100002\\ncounts = [0] * 100002\\nfor val in things:\\n\\tcounts[val] += 1\\nscores[1] = counts[1]\\nfor i in range(2, 100002):\\n\\tscores[i] = max(scores[i - 1], scores[i - 2] + counts[i] * i)\\nprint(scores[max(things)])\\n\", \"n = 10 ** 5\\ncount = [0 for _ in range(n + 1)]\\nt = int(input())\\narr = list(map(int, input().split()))\\nfor no in arr:\\n\\tcount[no] += 1\\n(x, y) = (0, count[1])\\nfor no in range(2, n + 1):\\n\\tz = max(y, x + count[no] * no)\\n\\tx = y\\n\\ty = z\\nprint(z)\\n\", \"input()\\ns = list(map(int, input().split()))\\nl = [0] * 100001\\nfor a in s:\\n\\tl[a] += a\\nf = dict()\\nf[0] = 0\\nf[1] = l[1]\\nfor i in range(2, 100001):\\n\\tf[i] = max(f[i - 1], f[i - 2] + l[i])\\nprint(f[100000])\\n\", \"from collections import *\\nn = int(input())\\nl = [int(i) for i in input().split()]\\ncnt = defaultdict(int)\\nfor i in l:\\n\\tcnt[i] += 1\\nans = [0] * (max(l) + 1)\\nans[1] = cnt[1]\\nfor i in range(2, max(l) + 1):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * cnt[i])\\nprint(ans[max(l)])\\n\", \"elem = int(input())\\ndp = list((0 for i in range(0, 100001)))\\nfor i in map(int, input().split()):\\n\\tdp[i] = dp[i] + i\\na = 0\\nb = 0\\nfor x in dp:\\n\\tif x + b > a:\\n\\t\\ttemp = a\\n\\t\\ta = x + b\\n\\t\\tb = temp\\n\\telse:\\n\\t\\tb = a\\nprint(a)\\n\", \"n = int(input())\\ninput_list = input().split()\\nnum = []\\nfor i in range(n):\\n\\tnum.append(int(input_list[i]))\\nnum = sorted(num)\\nnum.append(-1)\\nnew = []\\ncur = num[0]\\nfor i in range(1, n + 1):\\n\\tif num[i] == num[i - 1]:\\n\\t\\tcur = cur + num[i]\\n\\telse:\\n\\t\\tfor j in range(len(new), num[i - 1]):\\n\\t\\t\\tnew.append(0)\\n\\t\\tnew.append(cur)\\n\\t\\tcur = num[i]\\na = [0]\\na.append(new[1])\\nfor i in range(2, len(new)):\\n\\ta.append(max(a[i - 1], a[i - 2] + new[i]))\\nprint(a[len(new) - 1])\\n\", \"def best_way(num_lis):\\n\\t(a, b, c) = (num_lis[0][0] * num_lis[0][1], 0, 0)\\n\\tl = len(num_lis)\\n\\tk = 0\\n\\twhile 2 * k + 1 < l:\\n\\t\\tk += 1\\n\\t\\td = a\\n\\t\\ttry:\\n\\t\\t\\ta = max(a + num_lis[2 * k][0] * num_lis[2 * k][1], b + num_lis[2 * k - 1][0] * num_lis[2 * k - 1][1])\\n\\t\\texcept IndexError:\\n\\t\\t\\tpass\\n\\t\\tb = max(b + num_lis[2 * k - 1][0] * num_lis[2 * k - 1][1], c + num_lis[2 * k - 2][0] * num_lis[2 * k - 2][1])\\n\\t\\tc = d\\n\\tif l % 2 == 1:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn b\\ninput()\\nline = sorted([int(x) for x in input().split()])\\nl_l = len(line)\\nse = sorted(set(line))\\nj = -1\\nlis = []\\nn = 0\\nfor i in se:\\n\\tk = 0\\n\\twhile line[n] == i:\\n\\t\\tk += 1\\n\\t\\tn += 1\\n\\t\\tif n == l_l:\\n\\t\\t\\tbreak\\n\\tif i == j + 1:\\n\\t\\tlis[-1].append((i, k))\\n\\telse:\\n\\t\\tlis.append([(i, k)])\\n\\tj = i\\ns = 0\\nfor num_lis in lis:\\n\\ts += best_way(num_lis)\\nprint(s)\\n\", \"from collections import defaultdict\\ncnt = defaultdict(int)\\nn = int(input())\\na = list(map(int, input().split()))\\nfor x in a:\\n\\tcnt[x] += 1\\nb = sorted(list(set(a)))\\nm = len(b)\\ndp = [0] * (m + 1)\\ndp[1] = b[0] * cnt[b[0]]\\nfor i in range(2, m + 1):\\n\\tif b[i - 1] - 1 == b[i - 2]:\\n\\t\\tdp[i] = max(dp[i - 2] + b[i - 1] * cnt[b[i - 1]], dp[i - 1])\\n\\telse:\\n\\t\\tdp[i] = dp[i - 1] + b[i - 1] * cnt[b[i - 1]]\\nprint(dp[-1])\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nB = [0] * (10 ** 5 + 1)\\nfor t in A:\\n\\tB[t] += 1\\nF = [-1] * (10 ** 5 + 1)\\nF[0] = 0\\nF[1] = B[1]\\nfor t in range(2, 10 ** 5 + 1):\\n\\tF[t] = max(F[t - 1], F[t - 2] + t * B[t])\\nprint(F[10 ** 5])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ntemp = max(a)\\ncount = [0 for _ in range(temp + 1)]\\nnum = []\\nfor i in a:\\n\\tcount[i] += i\\ndp = [0 for _ in range(temp + 2)]\\nfor i in range(1, temp + 2):\\n\\tdp[i] = dp[i - 1]\\n\\tif count[i - 1] > 0:\\n\\t\\tdp[i] = max(dp[i], count[i - 1] + dp[i - 2])\\nprint(dp[temp + 1])\\n\", \"from collections import defaultdict\\ninput()\\nnums = list(map(int, input().split()))\\nmax_num = max(nums)\\ncounts = defaultdict(lambda : 0)\\nfor num in nums:\\n\\tcounts[num] += 1\\nvalues = dict()\\nvalues[0] = 0\\nvalues[1] = counts[1]\\nfor k in range(2, max_num + 1):\\n\\tvalues[k] = max(values[k - 1], values[k - 2] + k * counts[k])\\nprint(values[max_num])\\n\", \"from collections import defaultdict\\nn = int(input())\\nN = 100010\\narr = [int(i) for i in input().split()]\\nDict = defaultdict(int)\\nfor i in arr:\\n\\tDict[i] += 1\\ndp = [0] * N\\nfor i in range(1, N):\\n\\tif i - 2 < 0:\\n\\t\\tdp[i] = i * Dict[i]\\n\\telse:\\n\\t\\tdp[i] = i * Dict[i] + dp[i - 2]\\n\\tdp[i] = max(dp[i], dp[i - 1])\\nprint(dp[-1])\\n\", \"from sys import stdin, stdout\\nn = int(stdin.readline())\\narr = map(int, stdin.readline().split())\\ndi = {}\\nfor i in arr:\\n\\tif i not in di:\\n\\t\\tdi[i] = 0\\n\\tdi[i] += 1\\nnew = sorted(di.keys())\\nk = len(new)\\ninc = [0] * k\\nninc = [0] * k\\ninc[0] = new[0] * di[new[0]]\\nif k > 1:\\n\\tmaxi = max(inc[0], inc[1])\\nelse:\\n\\tmaxi = inc[0]\\nfor i in range(1, len(new)):\\n\\tif new[i] - 1 in di:\\n\\t\\tinc[i] = ninc[i - 1] + new[i] * di[new[i]]\\n\\t\\tninc[i] = max(ninc[i - 1], inc[i - 1])\\n\\telse:\\n\\t\\tinc[i] = max(inc[i - 1], ninc[i - 1]) + new[i] * di[new[i]]\\n\\t\\tninc[i] = max(inc[i - 1], ninc[i - 1])\\n\\tmaxi = max(inc[i], ninc[i], maxi)\\nprint(maxi)\\n\", \"n = int(input())\\narr = input().split()\\narr = list(arr)\\nm = [0] * 100000\\nans = [0] * 100000\\nfor i in range(n):\\n\\tm[int(arr[i]) - 1] += int(arr[i])\\n(ans[0], ans[1], ans[2]) = (m[0], m[1], m[2] + m[0])\\nfor i in range(3, len(ans)):\\n\\tans[i] = max(ans[i - 2], ans[i - 3]) + m[i]\\nprint(max(ans[99998], ans[99999]))\\n\", \"n = int(input())\\narr = [int(i) for i in input().split()]\\nnarr = [0] * 100001\\nfor i in range(n):\\n\\tnarr[arr[i]] += 1\\nans = [0] * 100001\\nans[1] = narr[1]\\nfor i in range(2, 100001):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + narr[i] * i)\\nprint(ans[100000])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ncount = [0] * (max(a) + 1)\\nfor i in a:\\n\\tcount[i] += 1\\nplay = [0] * (max(a) + 1)\\nplay[0] = 0\\nplay[1] = count[1]\\nfor i in range(2, max(a) + 1):\\n\\tplay[i] = play[i - 2] + count[i] * i\\n\\tif play[i] >= play[i - 1]:\\n\\t\\tpass\\n\\telse:\\n\\t\\tplay[i] = play[i - 1]\\nprint(play[max(a)])\\n\", \"import sys\\ninput = sys.stdin.buffer.readline\\n\\ndef solution():\\n\\tcnt = [0] * (10 ** 5 + 1)\\n\\tans = [0] * (10 ** 5 + 1)\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tfor i in range(n):\\n\\t\\tcnt[l[i]] += 1\\n\\tans[1] = cnt[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tans[i] = max(ans[i - 1], ans[i - 2] + i * cnt[i])\\n\\tprint(ans[-1])\\nsolution()\\n\", \"from collections import defaultdict\\nn = int(input())\\narr = list(map(int, input().split()))\\nfreq = defaultdict(int)\\nfor i in arr:\\n\\tfreq[i] += 1\\ndp = [0] * 100011\\ndp[1] = freq[1]\\nm = max(arr)\\nfor i in range(2, m + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\nprint(dp[m])\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\nlmax = max(l)\\na = (lmax + 1) * [0]\\nfor i in range(len(l)):\\n\\ta[l[i]] += 1\\nf = (lmax + 1) * [0]\\nf[0] = 0\\nf[1] = a[1]\\nfor i in range(2, lmax + 1):\\n\\tif f[i - 1] > f[i - 2] + a[i] * i:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + a[i] * i\\nprint(f[lmax])\\n\", \"n = int(input())\\nnums = [int(i) for i in input().split()]\\nans = [0] * max(nums)\\nansw = [0] * max(nums)\\nfor i in nums:\\n\\tans[i - 1] += 1\\nansw[0] = ans[0]\\nansw[1] = max(ans[1] * 2, ans[0])\\nfor i in range(2, len(ans)):\\n\\tansw[i] = max(answ[i - 1], answ[i - 2] + ans[i] * (i + 1))\\nprint(answ[-1])\\n\", \"from collections import defaultdict\\n\\ndef zero():\\n\\treturn 0\\nn = int(input())\\nx = list(map(int, input().split()))\\ndp = defaultdict(zero)\\nmx = 0\\nfor i in range(n):\\n\\tdp[x[i]] += x[i]\\n\\tif x[i] > mx:\\n\\t\\tmx = x[i]\\npoints = list()\\npoints.append(0)\\npoints.append(dp[1])\\nfor i in range(2, mx + 1):\\n\\tf = points[i - 2] + dp[i]\\n\\ts = points[i - 1]\\n\\tpoints.append(f if f > s else s)\\nprint(points[-1])\\n\", \"from sys import stdin, stdout\\nfrom collections import Counter\\nn = int(stdin.readline())\\na = Counter(map(int, stdin.readline().split()))\\ndp = []\\nfor (k, freq) in sorted(a.items()):\\n\\tif not dp:\\n\\t\\tdp += [[0, 0], [k, k * freq]]\\n\\telif dp[-1][0] != k - 1:\\n\\t\\tdp += [[k, k * freq + dp[-1][1]]]\\n\\telse:\\n\\t\\tv = max(dp[-1][1], dp[-2][1] + k * freq)\\n\\t\\tdp += [[k, v]]\\nprint(dp[-1][1])\\n\", \"from sys import stdin\\n_input = stdin.readline\\n(_max, _int, _range) = (max, int, range)\\nfrom collections import Counter\\n\\ndef solution():\\n\\tn = _int(_input())\\n\\tarr = Counter([_int(i) for i in _input().split()])\\n\\tm = _max(arr)\\n\\tz = [0] * (m + 1)\\n\\tfor i in _range(1, m + 1):\\n\\t\\tif i > 2:\\n\\t\\t\\tz[i] = _max(arr[i] * i + z[i - 2], z[i - 1])\\n\\t\\telse:\\n\\t\\t\\tz[i] = _max(arr[i] * i, z[i - 1])\\n\\tprint(z[-1])\\nsolution()\\n\", \"def read_input():\\n\\tn = int(input())\\n\\tfreq = {}\\n\\tline = input().strip().split()\\n\\tfor i in range(n):\\n\\t\\ta = int(line[i])\\n\\t\\tif a in freq:\\n\\t\\t\\tfreq[a] += 1\\n\\t\\telse:\\n\\t\\t\\tfreq[a] = 1\\n\\tprint(points(freq))\\n\\ndef points(freq):\\n\\tsort = sorted(freq)\\n\\tf_2 = 0\\n\\tprevious_index = sort[0]\\n\\tf_1 = freq[previous_index] * previous_index\\n\\tfor i in range(1, len(sort)):\\n\\t\\tf = sort[i]\\n\\t\\tif f > previous_index + 1:\\n\\t\\t\\tf_2 = f_1\\n\\t\\t\\tf_1 = f_1 + f * freq[f]\\n\\t\\telse:\\n\\t\\t\\tprev_f1 = f_1\\n\\t\\t\\tf_1 = max(f_1, f * freq[f] + f_2)\\n\\t\\t\\tf_2 = prev_f1\\n\\t\\tprevious_index = f\\n\\treturn f_1\\nread_input()\\n\", \"input()\\nseq = [int(i) for i in input().split()]\\nmax_n = max(seq)\\nans = [0] * (max_n + 1)\\ncount = [0] * (max_n + 1)\\nfor n in seq:\\n\\tcount[n] += 1\\nans[1] = count[1]\\nfor i in range(2, max_n + 1):\\n\\tans[i] = max(ans[i - 2] + i * count[i], ans[i - 1])\\nprint(ans[-1])\\n\", \"n = int(input())\\na = list(map(int, input().strip().split()))[:n]\\ncount = [0 for i in range(100007)]\\nfor i in range(n):\\n\\tcount[a[i]] += 1\\ndp = [0 for i in range(100007)]\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, 100007):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + count[i] * i)\\nprint(dp[100000])\\n\", \"n = input()\\ns = [0] * 100002\\nfor i in [int(x) for x in input().split()]:\\n\\ts[i] += i\\na = b = 0\\nfor d in s:\\n\\tc = a\\n\\ta = max(c, b)\\n\\tb = c + d\\nprint(a)\\n\", \"n = int(input())\\nx = list(map(int, input().split()))\\nm = max(x) + 1\\nans = [0] * m\\nfor a in x:\\n\\tans[a] += 1\\nfor i in range(2, m):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + ans[i] * i)\\nprint(max(ans))\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nd = {}\\nmaxi = max(a)\\nfor num in a:\\n\\td[num] = d.get(num, 0) + 1\\nr = [0] * (maxi + 1)\\nr[0] = 0\\nr[1] = d.get(1, 0)\\nfor i in range(2, maxi + 1):\\n\\tr[i] = max(r[i - 1], r[i - 2] + d.get(i, 0) * i)\\nprint(r[maxi])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\narr1 = []\\npre = []\\ni = 0\\nm = 0\\nwhile i < n:\\n\\tj = i\\n\\twhile j < n and arr[j] == arr[i]:\\n\\t\\tj += 1\\n\\tarr1.append([arr[i], j - i])\\n\\tif len(arr1) > 1 and arr1[-2][0] < arr1[-1][0] - 1:\\n\\t\\tif len(arr1) > 2 and arr1[-3][0] == arr1[-2][0] - 1:\\n\\t\\t\\tpre.append(max(pre[-1] + arr[i] * (j - i), pre[-2] + arr[i] * (j - i)))\\n\\t\\telse:\\n\\t\\t\\tpre.append(pre[-1] + arr[i] * (j - i))\\n\\telif len(arr1) > 2:\\n\\t\\tif len(arr1) > 3 and arr1[-4][0] == arr1[-3][0] - 1:\\n\\t\\t\\tpre.append(max(pre[-2] + arr[i] * (j - i), pre[-3] + arr[i] * (j - i)))\\n\\t\\telse:\\n\\t\\t\\tpre.append(pre[-2] + arr[i] * (j - i))\\n\\telse:\\n\\t\\tpre.append(arr[i] * (j - i))\\n\\ti = j\\n\\tm = max(m, pre[-1])\\nprint(m)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\ns = [0] * 100005\\nfor i in l:\\n\\ts[i] += i\\ndp = [0] * 100005\\ndp[1] = s[1]\\nfor i in range(100005):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + s[i])\\nprint(dp[100004])\\n\", \"n = int(input())\\nline = input().split()\\nlist0 = [int(i) for i in line]\\nlist2 = [0 for i in range(max(list0))]\\nfor i in range(n):\\n\\tlist2[list0[i] - 1] += list0[i]\\nend = [0 for i in range(len(list2))]\\n(end[0], end[1]) = (list2[0], max(list2[0], list2[1]))\\nfor i in range(1, len(list2) - 1):\\n\\tend[i + 1] = max(end[i], end[i - 1] + list2[i + 1])\\nprint(end[-1])\\n\", \"from collections import Counter\\n\\ndef main():\\n\\tn = int(input())\\n\\tc = Counter(map(int, input().split()))\\n\\tdp = [0] * (10 ** 5 + 1)\\n\\tdp[1] = c[1]\\n\\tfor i in range(2, len(dp)):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\n\\tprint(dp[-1])\\nmain()\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\ndp = [0] * (10 ** 5 + 1)\\ndp[1] = 1\\nhash = {}\\nfor i in range(1, 10 ** 5 + 1):\\n\\thash[i] = 0\\nfor i in range(n):\\n\\thash[l[i]] += 1\\nba = set(l)\\nseti = {}\\nz = sum(l)\\nfor i in range(1, 10 ** 5 + 1):\\n\\tmax1 = hash[i] * i + dp[i - 2]\\n\\tmax2 = dp[i - 1]\\n\\tdp[i] = max(max1, max2)\\nprint(dp[10 ** 5])\\n\", \"n = int(input())\\nh = [0] * 100001\\nF = [0] * 100001\\nl = list(map(int, input().split()))\\nfor i in range(n):\\n\\th[l[i]] += 1\\nF[1] = h[1]\\nfor i in range(100001):\\n\\tF[i] = max(F[i - 1], F[i - 2] + h[i] * i)\\nprint(F[100000])\\n\", \"import math\\nimport collections\\nimport bisect\\nimport heapq\\nimport time\\nimport random\\nimport itertools\\nimport sys\\nN = int(input())\\nA = [int(x) for x in input().split()]\\nsm = collections.defaultdict(int)\\nfor v in A:\\n\\tsm[v] += v\\nMA = max(A)\\ndp = [0] * (MA + 5)\\nfor i in range(1, MA + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + sm[i])\\nprint(dp[MA])\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\ns = [0] * (max(l) + 1)\\nfor j in range(len(l)):\\n\\ts[l[j]] += 1\\nf = [0] * len(s)\\nf[1] = s[1]\\nfor j in range(2, len(s)):\\n\\ta = f[j - 1]\\n\\tb = f[j - 2] + j * s[j]\\n\\tf[j] = max(a, b)\\nprint(f[len(s) - 1])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ncount = {}\\nfor i in range(0, 100001):\\n\\tcount[i] = 0\\nfor i in a:\\n\\tcount[i] += 1\\nans = []\\nans.extend([0, count[1]])\\nfor i in range(2, 100001):\\n\\tans.append(max(ans[i - 1], ans[i - 2] + i * count[i]))\\nprint(ans[100000])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nmx = max(a)\\narr = [0 for _ in range(mx)]\\nfor e in a:\\n\\tarr[e - 1] += e\\nif len(arr) < 3:\\n\\tprint(max(arr))\\nelse:\\n\\tdp = [0 for _ in range(mx)]\\n\\tdp[0] = arr[0]\\n\\tdp[1] = arr[1]\\n\\tdp[2] = arr[2] + dp[0]\\n\\tfor i in range(3, len(arr)):\\n\\t\\tdp[i] = arr[i] + max(dp[i - 2], dp[i - 3])\\n\\tprint(max(dp[-1], dp[-2]))\\n\", \"n = int(input())\\nseq = list(map(int, input().split()))\\nfreq = []\\nmaxVal = max(seq)\\nfor i in range(maxVal):\\n\\tfreq.append(0)\\nfor i in range(n):\\n\\tfreq[seq[i] - 1] += 1\\ndp = [0, freq[0] * 1]\\nfor i in range(2, maxVal + 1):\\n\\tdp.append(max(dp[i - 1], freq[i - 1] * i + dp[i - 2]))\\nprint(dp[maxVal])\\n\", \"input()\\nin_nums = list(map(int, input().split()))\\nnum_count = [0] * (max(in_nums) + 1)\\nfor num in in_nums:\\n\\tnum_count[num] += 1\\nmax_num = max(in_nums)\\ndp = [0] * (max_num + 1)\\ndp[1] = num_count[1]\\nfor i in range(2, max_num + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * num_count[i])\\nprint(dp[max_num])\\n\", \"t = input\\np = print\\nr = range\\nn = int(t())\\na = [0] * 100002\\nfor i in map(int, t().split()):\\n\\ta[i] += 1\\nf = [0, a[1]]\\nfor i in range(2, 100002):\\n\\tf.append(max(f[i - 1], f[i - 2] + a[i] * i))\\nprint(f[100001])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nans = [0 for i in range(100001)]\\nm = [0 for i in range(100004)]\\nfor i in l:\\n\\tm[i] += 1\\nans[1] = m[1]\\nfor i in range(2, 100001):\\n\\tans[i] = max([ans[i - 1], ans[i - 2] + m[i] * i])\\nprint(ans[100000])\\n\", \"mxx = int(200000.0)\\nn = int(input())\\na = list(map(int, input().split()))\\nmaxEle = max(a)\\nfreq = [0] * mxx\\nfor ele in a:\\n\\tfreq[ele] += 1\\ndp = [0] * mxx\\nfor i in range(1, mxx):\\n\\tdp[i] = dp[i - 1]\\n\\tif i >= 2:\\n\\t\\tdp[i] = max(dp[i], dp[i - 2] + freq[i] * i)\\n\\telse:\\n\\t\\tdp[i] = max(dp[i], freq[i] * i)\\nprint(dp[-1])\\n\", \"from collections import Counter\\n\\ndef points(arr, n):\\n\\tc = dict(Counter(arr))\\n\\tdp = [0] * (max(arr) + 1)\\n\\t(dp[0], dp[1]) = (0, c.get(1, 0))\\n\\tfor i in range(2, len(dp)):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + c.get(i, 0) * i)\\n\\treturn dp[-1]\\nn = int(input())\\narr = list(map(int, input().split()))\\nprint(points(arr, n))\\n\", \"input()\\ndp = list((0 for i in range(0, 100001)))\\nfor i in map(int, input().split()):\\n\\tdp[i] += i\\n(temp1, temp2) = (0, 0)\\nfor i in dp:\\n\\t(temp1, temp2) = (max(temp1, temp2 + i), temp1)\\nprint(temp1)\\n\", \"n = int(input())\\na = input()\\nb = a.split()\\nc = {}\\nans = {}\\nfor i in range(n):\\n\\tb[i] = int(b[i])\\nfor l in range(100000):\\n\\tc[l + 1] = 0\\n\\tans[l + 1] = 0\\nfor j in range(1, n + 1):\\n\\tc[b[j - 1]] += 1\\nans[1] = c[1]\\nans[2] = max(c[2] * 2, c[1])\\nfor k in range(3, 100001):\\n\\tans[k] = max(ans[k - 1], ans[k - 2] + k * c[k])\\nprint(ans[100000])\\n\", \"import sys\\nfrom math import log2, floor, ceil, sqrt, gcd\\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\\nri = lambda : sys.stdin.readline().strip()\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef list3d(a, b, c, d):\\n\\treturn [[[d] * c for j in range(b)] for i in range(a)]\\n\\ndef list4d(a, b, c, d, e):\\n\\treturn [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\n\\ndef ceil(x, y=1):\\n\\treturn int(-(-x // y))\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST(N=None):\\n\\treturn list(MAP()) if N is None else [INT() for i in range(N)]\\n\\ndef Yes():\\n\\tprint('Yes')\\n\\ndef No():\\n\\tprint('No')\\n\\ndef YES():\\n\\tprint('YES')\\n\\ndef NO():\\n\\tprint('NO')\\nINF = 10 ** 18\\nMOD = 998244353\\nn = int(ri())\\na = Ri()\\nlis = [0] * (10 ** 5 + 1)\\nfor i in range(len(a)):\\n\\tlis[a[i]] += 1\\ndp = [0] * (10 ** 5 + 1)\\ndp[0] = 0\\ndp[1] = lis[1] * 1\\nfor i in range(1, 10 ** 5 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + lis[i] * i)\\nprint(dp[10 ** 5])\\n\", \"n = int(input())\\nv = [int(i) for i in input().split()]\\nb = [0] * (10 ** 5 + 10)\\nfor x in v:\\n\\tb[x] += 1\\ndp = [0] * (10 ** 5 + 10)\\nr = 0\\nfor i in range(0, 10 ** 5 + 1):\\n\\tdp[i + 1] = max(dp[i + 1], dp[i])\\n\\tif b[i] > 0:\\n\\t\\tdp[i + 2] = max(dp[i + 2], dp[i] + i * b[i])\\nfor x in dp:\\n\\tr = max(r, x)\\nprint(r)\\n\", \"n = int(input())\\nm = [int(x) for x in input().split()]\\nn = sorted(list(set(m)))\\npool = [0] * (n[-1] + 1)\\nfor i in m:\\n\\ttry:\\n\\t\\tpool[i] += 1\\n\\texcept KeyError:\\n\\t\\tpool[i] = 1\\n(i2, i3) = (0, pool[1])\\nfor i in range(2, n[-1] + 1):\\n\\ti1 = i2\\n\\ti2 = i3\\n\\ti3 = max(i2, i1 + i * pool[i])\\nprint(i3)\\n\", \"cnt = [0 for i in range(100001)]\\nn = int(input())\\narr = list(map(int, input().split()))\\nfor i in arr:\\n\\tcnt[i] += 1\\nans = [0, cnt[1]]\\nfor i in range(2, len(cnt)):\\n\\tans.append(max(ans[-1], ans[-2] + cnt[i] * i))\\nprint(max(ans))\\n\", \"from collections import Counter\\nn = int(input())\\na = [int(x) for x in input().split()]\\nh = dict(Counter(a))\\nhn = len(h)\\nks = sorted(h.keys())\\nr = [0, ks[0] * h[ks[0]]]\\nfor i in range(2, hn + 1):\\n\\tif ks[i - 2] + 1 == ks[i - 1]:\\n\\t\\tr.append(max(r[i - 1], r[i - 2] + ks[i - 1] * h[ks[i - 1]]))\\n\\telse:\\n\\t\\tr.append(r[i - 1] + ks[i - 1] * h[ks[i - 1]])\\nprint(r[hn])\\n\", \"number = int(input())\\ntotal = [int(i) for i in input().split()]\\nn = max(total)\\nm = [[0, 0, 0] for i in range(n)]\\nfor i in range(len(total)):\\n\\tm[total[i] - 1][0] += 1\\nm[0][1] = m[0][0]\\nfor i in range(1, n):\\n\\tm[i][1] = m[i - 1][2] + m[i][0] * (i + 1)\\n\\tm[i][2] = max(m[i - 1][1], m[i - 1][2])\\nprint(max(m[n - 1][1], m[n - 1][2]))\\n\", \"nums = int(input())\\nnumList = [int(x) for x in input().split()]\\noccurrences = [0] * 100002\\nfor num in numList:\\n\\toccurrences[num] += 1\\naux = [0, occurrences[1]]\\nfor i in range(2, 100001):\\n\\taux.append(max(aux[-1], aux[-2] + occurrences[i] * i))\\nprint(aux[-1])\\n\", \"n = int(input())\\nl = [int(x) for x in input().split()]\\nc = [0] * 100001\\ndp = [0] * 100001\\nfor x in l:\\n\\tc[x] += 1\\ndp[1] = c[1]\\nans = 0\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + c[i] * i)\\n\\tans = max(dp[i], ans)\\nprint(ans)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nz = [0] * 100002\\nfor i in a:\\n\\tz[i] += 1\\ncount = 0\\nq = [0] * 100003\\ni = 100000\\nwhile i > 0:\\n\\tq[i] = max(i * z[i] + q[i + 2], q[i + 1])\\n\\ti -= 1\\nprint(q[1])\\n\", \"from collections import Counter\\nn = int(input())\\narr = list(map(lambda x: int(x), input().split(' ')))\\nchoices = Counter(arr)\\nnmax = max(arr)\\ndp = [0] * (nmax + 1)\\ndp[0] = 0\\ndp[1] = choices[1]\\nfor i in range(2, nmax + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + choices[i] * i)\\nprint(dp[nmax])\\n\", \"a = int(input())\\nb = input().split(' ')\\nl = [int(i) for i in b]\\nlargest = 0\\ntotal = 0\\nmaxpoints = 0\\nmp = 0\\nfor i in l:\\n\\tif i > largest:\\n\\t\\tlargest = i\\n\\ttotal = total + i\\nfreq = [None] * 200000\\nfor i in range(len(freq)):\\n\\tfreq[i] = 0\\nfor i in l:\\n\\tfreq[i] = freq[i] + 1\\ndp = [None] * 200000\\nfor i in range(len(dp)):\\n\\tdp[i] = 0\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, len(dp)):\\n\\tdp[i] = max(dp[i - 1], freq[i] * i + dp[i - 2])\\nprint(dp[len(dp) - 1])\\n\", \"n = int(input())\\nsequence = [int(x) for x in input().split()]\\nsequence.sort()\\nnumber = [0] * 100001\\nfor i in sequence:\\n\\tnumber[i] = number[i] + 1\\ndp = [0] * 100001\\ndp[1] = number[1]\\noutput = 0\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * number[i])\\n\\toutput = max(dp[i], output)\\nprint(output)\\n\", \"input()\\nrango = [0] * 100001\\nfor x in map(int, input().split()):\\n\\trango[x] = rango[x] + x\\npuntoa = 0\\npuntob = 0\\nfor i in rango:\\n\\t(puntoa, puntob) = (max(puntoa, i + puntob), puntoa)\\nprint(puntoa)\\n\", \"def gendict(arr):\\n\\telement = {}\\n\\tmaxelement = max(arr)\\n\\tfor i in arr:\\n\\t\\tif i in element:\\n\\t\\t\\telement[i] += 1\\n\\t\\telse:\\n\\t\\t\\telement[i] = 1\\n\\tdp = [0, element.get(1, 0)]\\n\\tscore = 0\\n\\tfor i in range(2, maxelement + 1):\\n\\t\\ttemp = max(dp[i - 1], dp[i - 2] + element.get(i, 0) * i)\\n\\t\\tdp.append(temp)\\n\\treturn dp[-1]\\n\\ndef main():\\n\\tn = input()\\n\\tarr = list(map(int, input().rstrip().split()))\\n\\tproc = gendict(arr)\\n\\tprint(proc)\\nmain()\\n\", \"from collections import Counter\\n\\ndef boredom(nums):\\n\\tcount = Counter(nums)\\n\\tmax_num = max(nums)\\n\\tcache = [0, 0]\\n\\tfor i in range(max_num + 1):\\n\\t\\tval = max(cache[1], cache[0] + count[i] * i)\\n\\t\\t(cache[0], cache[1]) = (cache[1], val)\\n\\treturn max(cache)\\nn = int(input().strip())\\nnums = list(map(int, input().strip().split()))\\nprint(boredom(nums))\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\nl = [0] * 100002\\nfor i in s:\\n\\tl[i] += 1\\na = b = 0\\nfor i in range(1, len(l)):\\n\\t(a, b) = (max(a, b + i * l[i]), a)\\nprint(a)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncnt = [0 for i in range(0, 100001)]\\nfor i in a:\\n\\tcnt[i] += 1\\na.sort()\\ndp = [0] * (n + 1)\\ndp[0] = 0\\ndp[1] = a[0] * cnt[a[0]]\\nli = a[0]\\nk = 2\\nj = cnt[a[0]]\\nwhile j < n:\\n\\tif a[j] == a[j - 1] + 1:\\n\\t\\tdp[k] = max(dp[k - 1], dp[k - 2] + a[j] * cnt[a[j]])\\n\\telse:\\n\\t\\tdp[k] = dp[k - 1] + a[j] * cnt[a[j]]\\n\\tj = j + cnt[a[j]]\\n\\tk += 1\\nprint(dp[k - 1])\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\nc = [0] * (max(l) + 1)\\nfor i in l:\\n\\tc[i] += 1\\np = [0] * (max(l) + 1)\\np[0] = 0\\np[1] = c[1]\\nfor i in range(2, max(l) + 1):\\n\\tp[i] = p[i - 2] + c[i] * i\\n\\tif p[i] < p[i - 1]:\\n\\t\\tp[i] = p[i - 1]\\nprint(p[max(l)])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nMAX = 100001\\nd = [0] * MAX\\nc = [0] * MAX\\nfor i in a:\\n\\tc[i] += 1\\nd[1] = c[1]\\nfor i in range(2, MAX):\\n\\td[i] = max(d[i - 2] + i * c[i], d[i - 1])\\nprint(d[-1])\\n\", \"n = int(input())\\nslen = [int(k) for k in input().split()]\\ndata = [0] * 100001\\nfor k in slen:\\n\\tdata[k] += k\\nt = 0\\nb = 0\\no = 0\\nfor k in data:\\n\\tb = max(o, t + k)\\n\\tt = o\\n\\to = b\\nprint(b)\\n\", \"from collections import defaultdict as dd\\nn = int(input())\\nl = list(map(int, input().strip().split(' ')))\\ndp = [0] * 100001\\nfor i in range(n):\\n\\tdp[l[i]] += 1\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * dp[i])\\nprint(dp[100000])\\n\", \"n = int(input())\\nlimit = 100005\\nls = [0] * limit\\nb = list(map(int, input().split()))\\nfor i in range(0, n):\\n\\tls[b[i]] += b[i]\\nfor i in range(2, limit):\\n\\tls[i] = max(ls[i - 1], ls[i - 2] + ls[i])\\nprint(ls[limit - 1])\\n\", \"input()\\n(array, result, number) = ([0] * 100002, 0, 0)\\nfor index in list(map(int, input().split())):\\n\\tarray[index] += index\\nfor index in array:\\n\\t(result, number) = (max(result, number), result + index)\\nprint(result)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na.sort()\\ns = 0\\nq = 0\\nmaxvalue = max(a)\\ncnt = (maxvalue + 1) * [0]\\nfor i in range(n):\\n\\tcnt[a[i]] += 1\\nf = (maxvalue + 1) * [0]\\nf[0] = 0\\nf[1] = cnt[1]\\nfor i in range(2, maxvalue + 1):\\n\\tif f[i - 1] > f[i - 2] + cnt[i] * i:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + cnt[i] * i\\nprint(f[maxvalue])\\n\", \"n = int(input())\\na = sorted([int(e) for e in input().split()])\\ncounts = []\\ni = 0\\nwhile i < len(a):\\n\\tc = 1\\n\\twhile i + c < len(a) and a[i + c] == a[i]:\\n\\t\\tc += 1\\n\\tcounts.append(c)\\n\\ti += c\\na = list(dict.fromkeys(a))\\narr = [0, counts[0] * a[0]]\\nfor i in range(1, len(a)):\\n\\tif a[i - 1] + 1 == a[i]:\\n\\t\\ttmp = arr[i - 1] + counts[i] * a[i]\\n\\t\\tarr.append(max(tmp, arr[i]))\\n\\telse:\\n\\t\\tarr.append(arr[i] + counts[i] * a[i])\\nprint(arr[-1])\\n\", \"a = input()\\nb = list(map(int, input().split()))\\nup = max(b)\\nc = {i: 0 for i in range(up + 1)}\\nfor i in b:\\n\\tc[i] += i\\ncount = 0\\ndp = [0] * (up + 1)\\ndp[1] = c[1]\\nfor i in c:\\n\\tif i >= 2:\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + c[i])\\n\\t\\tcount = max(dp[i], count)\\nprint(count)\\n\", \"n = int(input())\\nmaxnum = 100500\\nnumbers = [0] * maxnum\\npoints = [0] * maxnum\\ninputArray = list(map(int, input().split()))\\nfor i in range(n):\\n\\tnumbers[inputArray[i]] += 1\\nfor i in range(maxnum):\\n\\tpoints[i] = numbers[i] * i\\nfor i in range(maxnum - 3, 0, -1):\\n\\tpoints[i] = max(points[i + 1], points[i] + points[i + 2])\\nprint(points[1])\\n\", \"import os, sys\\nfrom io import IOBase, BytesIO\\npy2 = round(0.5)\\nif py2:\\n\\tfrom future_builtins import ascii, filter, hex, map, oct, zip\\n\\trange = xrange\\nBUFSIZE = 8192\\n\\nclass FastIO(BytesIO):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._file = file\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.writable = 'x' in file.mode or 'w' in file.mode\\n\\t\\tself.write = super(FastIO, self).write if self.writable else None\\n\\n\\tdef _fill(self):\\n\\t\\ts = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\tself.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\\n\\t\\treturn s\\n\\n\\tdef read(self):\\n\\t\\twhile self._fill():\\n\\t\\t\\tpass\\n\\t\\treturn super(FastIO, self).read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\ts = self._fill()\\n\\t\\t\\tself.newlines = s.count(b'\\\\n') + (not s)\\n\\t\\tself.newlines -= 1\\n\\t\\treturn super(FastIO, self).readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.getvalue())\\n\\t\\t\\t(self.truncate(0), self.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tif py2:\\n\\t\\t\\tself.write = self.buffer.write\\n\\t\\t\\tself.read = self.buffer.read\\n\\t\\t\\tself.readline = self.buffer.readline\\n\\t\\telse:\\n\\t\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nimport sys\\n\\nclass ostream:\\n\\n\\tdef __lshift__(self, a):\\n\\t\\tsys.stdout.write(str(a))\\n\\t\\treturn self\\ncout = ostream()\\nendl = '\\\\n'\\nfrom collections import defaultdict\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tfreq = defaultdict(lambda : 0)\\n\\tmx_val = -1\\n\\tfor i in range(len(arr)):\\n\\t\\tfreq[arr[i]] += 1\\n\\t\\tmx_val = max(mx_val, arr[i])\\n\\tmax_n = mx_val\\n\\tdp = [[0] * (max_n + 1) for _ in range(3)]\\n\\tfor i in range(1, mx_val + 1):\\n\\t\\tdp[0][i] = freq[i] * i + dp[1][i - 1]\\n\\t\\tdp[1][i] = max(dp[0][i - 1], dp[1][i - 1])\\n\\tcout << max(dp[0][mx_val], dp[1][mx_val]) << endl\\n\\ndef main():\\n\\tsolve()\\nmain()\\n\", \"n = int(input())\\nArr = list(map(int, input().rstrip().split()))\\nd = [0] * 100001\\nfor i in Arr:\\n\\td[i] = d[i] + 1\\ndp = [0] * 100001\\ndp[0] = d[0]\\ndp[1] = d[1]\\nfor i in range(2, len(dp)):\\n\\tdp[i] = max(dp[i - 2] + i * d[i], dp[i - 1])\\nprint(dp[100000])\\n\", \"def boredom(freq_li, i, n):\\n\\tdp = [-1 for i in range(n + 1)]\\n\\tdp[n - 1] = ((n - 1) * freq_li[n - 1], (n - 1) * freq_li[n - 1])\\n\\tdp[n] = (0, 0)\\n\\tfor k in range(n - 2, -1, -1):\\n\\t\\tif freq_li[k] == 0:\\n\\t\\t\\tdp[k] = dp[k + 1]\\n\\t\\telse:\\n\\t\\t\\tinclusive_k = dp[k + 2][1] + k * freq_li[k]\\n\\t\\t\\toverall = max(inclusive_k, dp[k + 1][1])\\n\\t\\t\\tdp[k] = (inclusive_k, overall)\\n\\treturn dp[0]\\nn = int(input())\\nli = [int(x) for x in input().split()]\\nmaxm = max(li)\\nfreq_li = [0 for i in range(maxm + 1)]\\nfor ele in li:\\n\\tfreq_li[ele] += 1\\nmax_points = boredom(freq_li, 0, maxm + 1)[1]\\nprint(max_points)\\n\", \"n = int(input())\\narr = list(map(int, input().strip().split(' ')))\\nif n == 1:\\n\\tprint(arr[0])\\nelse:\\n\\tarr.sort()\\n\\tar = []\\n\\ti = 0\\n\\twhile i < n:\\n\\t\\tt = arr[i]\\n\\t\\tcnt = 1\\n\\t\\tans = 0\\n\\t\\tfor j in range(i + 1, n):\\n\\t\\t\\tif arr[j] == t:\\n\\t\\t\\t\\tcnt += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans = 1\\n\\t\\t\\t\\tbreak\\n\\t\\tif ans == 1:\\n\\t\\t\\ti = j\\n\\t\\t\\tar.append([t, cnt])\\n\\t\\telse:\\n\\t\\t\\ti = j + 1\\n\\t\\t\\tar.append([t, cnt])\\n\\tans = [[] for i in range(n)]\\n\\tans[0].append(ar[0][0] * ar[0][1])\\n\\tans[0].append(0)\\n\\tl = len(ar)\\n\\tfor i in range(1, l):\\n\\t\\tif ar[i][0] - ar[i - 1][0] == 1:\\n\\t\\t\\tans[i].append(ar[i][0] * ar[i][1] + ans[i - 1][1])\\n\\t\\t\\tans[i].append(max(ans[i - 1][0], ans[i - 1][1]))\\n\\t\\telse:\\n\\t\\t\\tans[i].append(ar[i][0] * ar[i][1] + max(ans[i - 1][0], ans[i - 1][1]))\\n\\t\\t\\tans[i].append(max(ans[i - 1][0], ans[i - 1][1]))\\n\\tprint(max(ans[l - 1][0], ans[l - 1][1]))\\n\", \"from collections import defaultdict\\nn = int(input())\\na = [int(x) for x in input().split()]\\nmx = max(a)\\ndp = [0] * (mx + 1)\\nfor i in range(n):\\n\\tdp[a[i]] += 1\\nans = [0, dp[1]]\\nfor i in range(2, mx + 1):\\n\\tres = max(ans[-1], ans[-2] + i * dp[i])\\n\\tans += [res]\\nprint(ans[-1])\\n\", \"import collections\\n\\ndef solve(xs):\\n\\tcnt = collections.Counter(xs)\\n\\txmax = max(xs)\\n\\tf = collections.defaultdict(int)\\n\\tfor i in range(1, xmax + 1):\\n\\t\\tf[i] = max(f[i - 1], cnt[i] * i + f[i - 2])\\n\\treturn f[xmax]\\n\\ndef main():\\n\\tn = int(input())\\n\\txs = [int(i) for i in input().strip().split()]\\n\\tassert len(xs) == n\\n\\tresult = solve(xs)\\n\\tprint(result)\\nmain()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nm = max(a)\\nsumm = [0] * (m + 1)\\nmaxm = [0] * (m + 1)\\nfor i in range(n):\\n\\tsumm[a[i]] += a[i]\\nmaxm[1] = summ[1]\\nmaxm[2] = max(summ[1], summ[2])\\nfor i in range(3, m + 1):\\n\\tmaxm[i] = max(summ[i] + maxm[i - 2], maxm[i - 1], maxm[i - 3] + summ[i])\\nprint(maxm[-1])\\n\", \"a = [0 for _ in range(int(1000000.0 + 5))]\\nt = int(input().strip())\\nb = list(map(int, input().strip().split()))\\nfor i in b:\\n\\ta[i] += i\\ndp = [0 for _ in range(int(1000000.0 + 1))]\\ndp[1] = a[1]\\nfor i in range(2, int(1000000.0 + 1)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + a[i])\\nprint(dp[int(1000000.0)])\\n\", \"from collections import defaultdict\\nn = int(input())\\narr = [int(x) for x in input().split()]\\nsums = defaultdict(int)\\nfor a in arr:\\n\\tsums[a] += a\\ndim = max(sums.keys()) + 1\\nd = [0] * dim\\nfor i in (1, 2):\\n\\td[i] = sums[i]\\nfor j in range(3, dim):\\n\\td[j] = max(d[j - 2], d[j - 3]) + sums[j]\\nprint(max(d))\\n\", \"from collections import defaultdict as def_dic\\n\\ndef max_points(ar, n):\\n\\t(tem, gst) = (def_dic(int), max(ar))\\n\\tres = [0] * (gst + 1)\\n\\tfor i in ar:\\n\\t\\ttem[i] += 1\\n\\t(res[0], res[1]) = (0, tem[1])\\n\\tfor i in range(2, gst + 1):\\n\\t\\tres[i] = max(res[i - 2] + tem[i] * i, res[i - 1])\\n\\treturn res[-1]\\n(n, ar) = (int(input()), list(map(int, input().split())))\\nprint(max_points(ar, n))\\n\", \"n = int(input())\\na = input().split()\\nfor i in range(n):\\n\\ta[i] = int(a[i])\\na = sorted(a)\\nl = 1\\nnum = [-2]\\nt = [0]\\nmaxi = [0 for x in range(100000)]\\ni = 0\\nwhile i < n:\\n\\tnum.append(a[i])\\n\\tt.append(1)\\n\\ti += 1\\n\\twhile i < n and a[i] == a[i - 1]:\\n\\t\\ti += 1\\n\\t\\tt[l] += 1\\n\\tl += 1\\nmaxi[0] = 0\\nmaxi[1] = num[1] * t[1]\\nfor i in range(1, l):\\n\\td1 = num[i] - num[i - 1]\\n\\tw = num[i] * t[i]\\n\\tif d1 == 1:\\n\\t\\tmaxi[i] = max(maxi[i - 1], maxi[i - 2] + w)\\n\\telse:\\n\\t\\tmaxi[i] = maxi[i - 1] + w\\nprint(maxi[l - 1])\\n\", \"n = int(input())\\ndp = [0] * 100005\\nfor i in map(int, input().split()):\\n\\tdp[i] += i\\nfor i in range(2, 100005):\\n\\tdp[i] = max(dp[i] + dp[i - 2], dp[i - 1])\\nprint(dp[-1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\npoint = {}\\nfor x in a:\\n\\tif x in point:\\n\\t\\tpoint[x] += x\\n\\telse:\\n\\t\\tpoint[x] = x\\ndp0 = 0\\ndp1 = point[1] if 1 in point else 0\\nfor i in range(2, max(point.keys()) + 1):\\n\\tif i in point:\\n\\t\\tdp2 = max(dp0 + point[i], dp1)\\n\\telse:\\n\\t\\tdp2 = dp1\\n\\t(dp0, dp1) = (dp1, dp2)\\nprint(dp2)\\n\", \"n = int(input())\\narr = []\\ncnt = [0] * (10 ** 5 + 2)\\narr = [int(el) for el in input().split()]\\nfor i in range(n):\\n\\tcnt[arr[i]] += 1\\ndp = [0] * (10 ** 5 + 2)\\ndp[1] = 1 * cnt[1]\\nfor i in range(2, 10 ** 5 + 2):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[-1])\\n\", \"n = int(input())\\nfrom collections import Counter\\nl = sorted(Counter([int(i) for i in input().split()]).items())\\nm = [0] * (len(l) + 1)\\nm[1] = l[0][0] * l[0][1]\\nfor i in range(1, len(l)):\\n\\tif l[i][0] == l[i - 1][0] + 1:\\n\\t\\tm[i + 1] = max(l[i][0] * l[i][1] + m[i - 1], m[i])\\n\\telse:\\n\\t\\tm[i + 1] = l[i][0] * l[i][1] + m[i]\\nprint(m[-1])\\n\", \"import sys\\nimport math\\nimport heapq\\nfrom collections import defaultdict, deque\\ninput = sys.stdin.readline\\n\\ndef r():\\n\\treturn int(input())\\n\\ndef rm():\\n\\treturn map(int, input().split())\\n\\ndef rl():\\n\\treturn list(map(int, input().split()))\\nn = r()\\na = rl()\\ncnt = defaultdict(int)\\nfor i in a:\\n\\tcnt[i] += 1\\nnn = max(a) + 1\\nres = [0] * nn\\nres[0] = 0\\nres[1] = cnt[1]\\nfor i in range(2, nn):\\n\\tres[i] = max(res[i - 1], res[i - 2] + cnt[i] * i)\\nprint(res[-1])\\n\", \"I = lambda : list(map(int, input().split()))\\n(n,) = I()\\nl = I()\\nct = [0] * (10 ** 5 + 2)\\ndp = [0] * (max(l) + 2)\\nfor i in l:\\n\\tct[i] += 1\\ndp[1] = ct[1]\\nfor i in range(2, max(l) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * ct[i])\\nprint(dp[-2])\\n\", \"n = int(input())\\nA = input().split()\\nA = [int(i) for i in A]\\nB = [0 for i in range(0, 100001)]\\nC = [0 for i in range(0, 100001)]\\nfor i in range(0, n):\\n\\tB[A[i] - 1] = A[i]\\n\\tC[A[i] - 1] += 1\\nresult = [0 for i in range(0, 100001)]\\nif len(B) == 1:\\n\\tprint(B[0] * C[0])\\nelse:\\n\\tresult[0] = B[0] * C[0]\\n\\tif B[0] * C[0] > B[1] * C[1]:\\n\\t\\tresult[1] = B[0] * C[0]\\n\\telse:\\n\\t\\tresult[1] = B[1] * C[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tresult[i] = max(result[i - 1], result[i - 2] + B[i] * C[i])\\nmaximum = 0\\nfor i in range(0, 100001):\\n\\tif maximum < result[i]:\\n\\t\\tmaximum = result[i]\\nprint(maximum)\\n\", \"import collections\\nn = int(input())\\nline = [int(x) for x in input().split()]\\np_2 = 0\\np_1 = 0\\np = 0\\nd = collections.Counter(line)\\nfor i in range(100001):\\n\\t(p_2, p_1) = (p_1, p)\\n\\tp = max(p_2 + d[i] * i, p_1)\\nprint(p)\\n\", \"import sys\\n\\ndef readInput():\\n\\tnums = int(sys.stdin.readline())\\n\\tnumArray = sys.stdin.readline()\\n\\treturn (nums, numArray.split())\\n\\ndef extendHistogram(num, histogram):\\n\\twhile num + 1 > len(histogram):\\n\\t\\thistogram += len(histogram) * [0]\\n\\ndef makeHistogram(numArray):\\n\\thistogram = 5 * [0]\\n\\tfor num in numArray:\\n\\t\\tnum = int(num)\\n\\t\\tif num + 1 > len(histogram):\\n\\t\\t\\textendHistogram(num, histogram)\\n\\t\\thistogram[num] += 1\\n\\treturn histogram\\n\\ndef main():\\n\\t(length, numArray) = readInput()\\n\\tdp = 5 * [0]\\n\\thistogram = makeHistogram(numArray)\\n\\tdp = len(histogram) * [0]\\n\\tdp[0] = 0\\n\\tdp[1] = histogram[1]\\n\\tfor i in range(2, len(dp)):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * histogram[i])\\n\\tprint(dp[len(dp) - 1])\\nmain()\\n\", \"n = int(input())\\nlist1 = list(map(int, input().split()))\\nMAXN = 100001\\ncount = [0] * MAXN\\nfor x in list1:\\n\\tcount[x] += 1\\ndp = [0] * MAXN\\ndp[1] = count[1]\\nans = 0\\nfor m in range(2, MAXN):\\n\\tdp[m] = max(dp[m - 1], dp[m - 2] + count[m] * m)\\n\\tans = max(dp[m], ans)\\nprint(ans)\\n\", \"cnt = [0] * 100010\\nyuxi = 0\\nuseless_in_py = input()\\nfor i in input().split():\\n\\tv = int(i)\\n\\tcnt[v] += 1\\n\\tyuxi = max(yuxi, v)\\ndp = []\\ndp.append(0)\\ndp.append(cnt[1])\\nfor i in range(2, yuxi + 1):\\n\\tu = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\tdp.append(u)\\nprint(dp[yuxi])\\n\", \"import sys\\nn = int(input())\\nseq = list(map(int, input().split()))\\nfreq = []\\npd = []\\nfor i in range(100001):\\n\\tpd.append([0, 0])\\n\\tfreq.append(0)\\nfor i in seq:\\n\\tfreq[i - 1] += 1\\n\\ndef solve(i, last):\\n\\tif i == 100000:\\n\\t\\treturn 0\\n\\tif pd[i][last] != -1:\\n\\t\\treturn pd[i][last]\\n\\tpega = 0\\n\\tn_pega = solve(i + 1, 0)\\n\\tif not last:\\n\\t\\tpega = freq[i] * (i + 1) + solve(i + 1, 1)\\n\\tpd[i][last] = max(pega, n_pega)\\n\\treturn pd[i][last]\\nfor i in range(99999, -1, -1):\\n\\tpd[i][0] = max(freq[i] * (i + 1) + pd[i + 1][1], pd[i + 1][0])\\n\\tpd[i][1] = pd[i + 1][0]\\nprint(pd[0][0])\\n\", \"import math as mt\\nimport collections as cc\\n\\ndef ncr(n, r):\\n\\timport math as mt\\n\\treturn mt.factorial(n) // (mt.factorial(n - r) * mt.factorial(r))\\nI = lambda : list(map(int, input().split()))\\n(n,) = I()\\nl = I()\\nar = [0] * (10 ** 5 + 1)\\nfor i in l:\\n\\tar[i] += i\\ndp = [0] * (10 ** 5 + 1)\\ndp[0] = 0\\nfor i in range(1, 10 ** 5 + 1):\\n\\tdp[i] = max(ar[i] + dp[i - 2], dp[i - 1])\\nprint(dp[-1])\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\nD = {}\\nfor i in L:\\n\\tif i not in D:\\n\\t\\tD[i] = 0\\n\\tD[i] += 1\\nnum = sorted(list(D.keys()))\\n(a, b, result, j) = (0, L.count(1), L.count(1), 1)\\nfor i in num:\\n\\tif i == 1:\\n\\t\\tcontinue\\n\\tif i - j > 1:\\n\\t\\t(b, a) = (result, result)\\n\\t\\tif b >= a + D[i] * i:\\n\\t\\t\\tresult = b\\n\\t\\t\\ta = b\\n\\t\\t\\tb = result\\n\\t\\telse:\\n\\t\\t\\tresult = a + D[i] * i\\n\\t\\t\\ta = b\\n\\t\\t\\tb = result\\n\\telif b >= a + D[i] * i:\\n\\t\\tresult = b\\n\\t\\ta = b\\n\\t\\tb = result\\n\\telse:\\n\\t\\tresult = a + D[i] * i\\n\\t\\ta = b\\n\\t\\tb = result\\n\\tj = i\\nprint(result)\\n\", \"dp1 = [0]\\ndp2 = [0]\\nnum = []\\nn = int(input())\\nstr = ''\\nstr = input()\\na = [int(x) for x in str.split()]\\nmx = 0\\nfor i in a:\\n\\tif i > mx:\\n\\t\\tmx = i\\nfor i in range(0, mx + 1):\\n\\tnum.append(0)\\nfor i in a:\\n\\tnum[i] = num[i] + 1\\ntemp = 0\\nfor i in range(1, mx + 1):\\n\\tif dp1[i - 1] > dp2[i - 1]:\\n\\t\\ttemp = dp1[i - 1]\\n\\telse:\\n\\t\\ttemp = dp2[i - 1]\\n\\tdp1.append(temp)\\n\\tdp2.append(dp1[i - 1] + i * num[i])\\nif dp1[mx] > dp2[mx]:\\n\\ttemp = dp1[mx]\\nelse:\\n\\ttemp = dp2[mx]\\nprint(temp)\\n\", \"P_f = 10 ** 5\\nV_t = [0 for _ in range(P_f + 1)]\\nE_t = int(input())\\nV_a = list(map(int, input().split()))\\nfor i in V_a:\\n\\tV_t[i] += 1\\n(P_a, P_d) = (0, V_t[1])\\nfor i in range(2, P_f + 1):\\n\\tP_ac = max(P_d, P_a + V_t[i] * i)\\n\\tP_a = P_d\\n\\tP_d = P_ac\\nprint(P_ac)\\n\", \"from collections import Counter as C\\nn = int(input())\\nl = [*map(int, input().split())]\\nc = [(0, 0)] + sorted(C(l).items())\\ndp = {}\\nfor i in range(1, len(c)):\\n\\tdp[i] = max(dp.get(i - 1, 0) + (0 if c[i - 1][0] + 1 == c[i][0] else c[i][0] * c[i][1]), dp.get(i - 2, 0) + c[i][1] * c[i][0])\\nprint(dp[len(c) - 1])\\n\", \"n = int(input())\\nc = list((0 for x in range(100001)))\\nres = list((0 for x in range(100001)))\\nx = input().split()\\nfor i in x:\\n\\tc[int(i)] += 1\\nres[1] = c[1]\\nfor i in range(100001):\\n\\tres[i] = max(res[i - 1], c[i] * i + res[i - 2])\\nprint(res[-1])\\n\", \"import sys\\n\\ndef compress(l):\\n\\tx = l[0]\\n\\tcnt = 1\\n\\tc = []\\n\\tfor i in range(1, len(l)):\\n\\t\\tif l[i] == x:\\n\\t\\t\\tcnt += 1\\n\\t\\telse:\\n\\t\\t\\tc.append((x, cnt))\\n\\t\\t\\tx = l[i]\\n\\t\\t\\tcnt = 1\\n\\tc.append((x, cnt))\\n\\treturn c\\nn = int(sys.stdin.readline())\\na = [int(x) for x in sys.stdin.readline().split()]\\na.sort()\\na = compress(a)\\ndp = [0, a[0][0] * a[0][1]]\\nfor i in range(1, len(a)):\\n\\t(x, c) = a[i]\\n\\tpx = a[i - 1][0]\\n\\tdp.append(max(dp[-1], x * c + (dp[-1] if x > px + 1 else dp[-2])))\\nprint(max(dp))\\n\", \"n = int(input())\\nlib = {}\\nmas = []\\nfor i in input().split():\\n\\tif i in lib:\\n\\t\\tlib[i] += 1\\n\\telse:\\n\\t\\tlib.update({i: 1})\\nfor i in sorted(lib, key=int):\\n\\tif str(int(i) - 1) not in lib and str(int(i) + 1) not in lib:\\n\\t\\tmas += [0, lib[i] * int(i), 0]\\n\\telif str(int(i) - 1) in lib and str(int(i) + 1) in lib:\\n\\t\\tmas += [lib[i] * int(i)]\\n\\telif str(int(i) - 1) in lib:\\n\\t\\tmas += [lib[i] * int(i), 0]\\n\\telse:\\n\\t\\tmas += [0, lib[i] * int(i)]\\nres = [0] * (len(mas) + 1)\\nfor i in range(1, len(mas)):\\n\\tres[i] = max(res[i - 1], res[i - 2] + mas[i])\\nprint(res[-2])\\n\", \"n = int(input())\\ny = list(map(int, input().split()))\\nx = max(y)\\nd = [0] * (x + 1)\\ni = 0\\nwhile i < n:\\n\\td[y[i]] += 1\\n\\ti += 1\\narr = [0, d[1]]\\ni = 2\\nwhile i < x + 1:\\n\\tarr.append(max(arr[-1], arr[-2] + d[i] * i))\\n\\ti += 1\\nprint(arr[-1])\\n\", \"n = int(input())\\nch = input()\\nL = [int(i) for i in ch.split()]\\nx = max(L)\\nnb = 0\\nL1 = [0] * (x + 1)\\nfor i in L:\\n\\tL1[i] += 1\\nfor i in range(x + 1):\\n\\tL1[i] = L1[i] * i\\nL1 = [0, 0] + L1\\nL2 = [0] * (x + 3)\\nfor i in range(3, x + 3):\\n\\tL2[i] = L1[i] + max(L2[i - 2], L2[i - 3])\\nprint(max(L2[-1], L2[-2]))\\n\", \"n = int(input())\\na = list(input().split())\\nd = {}\\nz = 0\\nfor i in a:\\n\\ti = int(i)\\n\\tif i > z:\\n\\t\\tz = i\\n\\td[i] = d.get(i, 0) + 1\\nf0 = 0\\nf1 = d.get(1, 0)\\nif n < 2:\\n\\tprint(int(a[0]))\\nelse:\\n\\tfor i in range(2, z + 1):\\n\\t\\ts = f0 + d.get(i, 0) * i\\n\\t\\tfi = max(f1, s)\\n\\t\\tf0 = f1\\n\\t\\tf1 = fi\\n\\tprint(f1)\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\nr0 = [0] * (10 ** 5 + 5)\\nmax0 = 0\\nfor j in range(1):\\n\\tfor i in s:\\n\\t\\tr0[i] = r0[i] + 1\\n\\t\\tif max0 < i:\\n\\t\\t\\tmax0 = i + 1\\n\\t\\t\\tmax0 = max0 - 1\\nf = list()\\nf.append(0)\\nf.append(r0[1])\\nfor i in range(2, max0 + 1):\\n\\tf.append(max([f[i - 1], f[i - 2] + i * r0[i]]))\\nprint(f[max0])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\np = dict()\\ncount = [0] * (max(a) + 1)\\nfor i in a:\\n\\tcount[i] += 1\\ndp = [0] * (max(a) + 1)\\ndp[0] = 0\\ndp[1] = count[1]\\nfor i in range(2, max(a) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\nprint(dp[max(a)])\\n\", \"a = int(input())\\ncounts = {}\\nfor i in range(10 ** 5 + 1):\\n\\tcounts.update({i: 0})\\nx = list(map(int, input().split()))\\nfor i in x:\\n\\tcounts[i] += 1\\nmx = [counts[0], counts[1]]\\nfor i in range(2, 10 ** 5 + 1):\\n\\tmx.append(max(i * counts[i] + mx[i - 2], mx[i - 1]))\\nprint(mx[-1])\\n\", \"n = int(input())\\ncnt = [0] * 100001\\nd = [0] * 100001\\na = [int(i) for i in input().split()]\\nfor i in a:\\n\\tcnt[i] += 1\\nd[1] = cnt[1]\\nfor i in range(2, 100001):\\n\\td[i] = max(d[i - 1], d[i - 2] + cnt[i] * i)\\nprint(max(d))\\n\", \"from sys import stdin\\nimport math\\nn = int(stdin.readline())\\nnumbers = stdin.readline()\\nnumbers = numbers.split()\\narray = [0 for x in range(100000 + 2)]\\nmaximum = 0\\nminimum = 10000000\\nfor num in numbers:\\n\\tarray[int(num)] += 1\\n\\tif int(num) > maximum:\\n\\t\\tmaximum = int(num)\\n\\tif int(num) < minimum:\\n\\t\\tminimum = int(num)\\nval = 0\\nfor num in range(minimum, maximum + 1):\\n\\tif array[num + 1] == 0 and array[num - 1] == 0:\\n\\t\\tval += num * array[num]\\n\\t\\tarray[num] = 0\\nmaxSum = 0\\nmemo = [0 for x in range(maximum + 1)]\\nmemo[minimum] = array[minimum] * minimum\\nfor i in range(minimum + 1, maximum + 1):\\n\\tmemo[i] = max(memo[i - 1], array[i] * i + memo[i - 2])\\nprint(memo[maximum] + val)\\n\", \"def main():\\n\\tcnt = [0 for _ in range(100005)]\\n\\tdp = cnt[:]\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tfor x in l:\\n\\t\\tcnt[x] += 1\\n\\tdp[1] = cnt[1]\\n\\tans = 0\\n\\tfor i in range(100005):\\n\\t\\tdp[i] = max(dp[i - 1], i * cnt[i] + dp[i - 2])\\n\\t\\tans = max(ans, dp[i])\\n\\tprint(ans)\\nmain()\\n\", \"n = int(input())\\nnums = input().split()\\nvals = [int(nums[i]) for i in range(n)]\\nbig = 0\\nfreq = {}\\nfor i in range(n):\\n\\tnext = vals[i]\\n\\tfreq[next] = freq.get(next, 0) + 1\\n\\tbig = max(next, big)\\nsols = [0, freq.get(1, 0)]\\ni = 2\\nwhile i <= big:\\n\\tsols.append(max(sols[-1], sols[-2] + i * freq.get(i, 0)))\\n\\ti += 1\\nprint(sols[-1])\\n\", \"def main():\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\ts = {}\\n\\tz = max(a)\\n\\tdp = [0] * (z + 1)\\n\\tfor i in range(z):\\n\\t\\ts[i + 1] = 0\\n\\tfor i in a:\\n\\t\\ts[i] += 1\\n\\tdp[1] = s[z] * z\\n\\tfor i in range(2, z + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + s[z - i + 1] * (z - i + 1))\\n\\tprint(dp[-1])\\nmain()\\n\", \"def rr():\\n\\treturn input().rstrip()\\n\\ndef rri():\\n\\treturn int(rr())\\n\\ndef rrl():\\n\\treturn list(map(int, rr().split()))\\n\\ndef rrt():\\n\\treturn tuple(map(int, rr().split()))\\nfrom collections import defaultdict\\n\\ndef mus(d=0):\\n\\treturn defaultdict(defaultdict(d))\\n\\ndef ms(x, y, d=0):\\n\\treturn [[0] * y for i in range(x)]\\n\\ndef ar(x, d=0):\\n\\treturn [d] * x\\n\\ndef ppm(m, n=0, x=0, y=0):\\n\\tprint('\\\\n'.join(('\\\\t'.join((str(m[j][i]) for j in range(y or n))) for i in range(x or n))))\\n\\ndef ppa(a, n):\\n\\tprint('\\\\t'.join(map(str, a[0:n])))\\n\\ndef ppl(a=0, x=[1]):\\n\\tx[0] = a or x[0] + 1\\n\\tprint('-' + '- -' * 14 + '-# ' + str(x[0] - 2) + ' #-' + '- -' * 14 + '-')\\n\\ndef yn(x):\\n\\treturn 'YES' if x else 'NO'\\nfrom itertools import accumulate\\nfrom itertools import groupby\\n\\ndef grp(x):\\n\\treturn ((i, sum((1 for _ in g))) for (i, g) in groupby(x))\\nimport math\\n\\ndef rnar():\\n\\treturn (*rrl(), rrl())\\n\\ndef read():\\n\\treturn rnar()\\n\\ndef solve(n, arr):\\n\\tarr.sort()\\n\\tx = list(grp(arr))\\n\\tam = ar(10 ** 5 + 1)\\n\\tfor (i, num) in x:\\n\\t\\tam[i] = num\\n\\tdp = ar(10 ** 5 + 1)\\n\\tdp[0] = 0\\n\\tdp[1] = am[1]\\n\\tfor i in range(2, 10 ** 5 + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + am[i] * i)\\n\\tans = dp[-1]\\n\\treturn ans\\ntest_count = 1\\nfor _ in range(test_count):\\n\\tinput_data = read()\\n\\tresult = solve(*input_data)\\n\\tprint(result)\\n\", \"def main():\\n\\t(n,) = read()\\n\\tar = read()\\n\\ta = [0] * 100001\\n\\tfor i in ar:\\n\\t\\ta[i] += 1\\n\\tdp = [0] * 100001\\n\\tdp[1] = a[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tdp[i] = max(a[i] * i + dp[i - 2], dp[i - 1])\\n\\tprint(dp[-1])\\n\\ndef read(mode=2):\\n\\tinputs = input().strip()\\n\\tif mode == 0:\\n\\t\\treturn inputs\\n\\tif mode == 1:\\n\\t\\treturn inputs.split()\\n\\tif mode == 2:\\n\\t\\treturn map(int, inputs.split())\\n\\ndef write(s='\\\\n'):\\n\\tif isinstance(s, list):\\n\\t\\ts = ' '.join(map(str, s))\\n\\ts = str(s)\\n\\tprint(s, end='')\\nmain()\\n\", \"n = int(input())\\ndata = list(map(int, input().split()))\\ncounter = [0] * (max(data) + 1)\\nfor i in range(n):\\n\\tcounter[data[i]] += 1\\nans = [0] * (max(data) + 1)\\nans[1] = counter[1]\\nfor i in range(2, len(ans)):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * counter[i])\\nprint(ans[-1])\\n\", \"n = int(input())\\na = list(map(int, input().strip().split()))\\narr = [0] * (10 ** 5 + 1)\\nx = [0, 0]\\ndp = []\\nfor i in range(10 ** 5 + 2):\\n\\tdp.append(x.copy())\\nfor i in a:\\n\\tarr[i] += 1\\nfor i in range(10 ** 5, -1, -1):\\n\\tdp[i][1] = dp[i + 1][0] + arr[i] * i\\n\\tdp[i][0] = max(dp[i + 1][0], dp[i + 1][1])\\nprint(max(dp[0][0], dp[0][1]))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\ntop = max(a) + 1\\nscores = [0] * top\\nfor i in a:\\n\\tscores[i] += i\\nodd = scores[0]\\ni = even = total = 0\\nfor i in range(1, top):\\n\\tif even * (i % 2) + odd * (not i % 2) + scores[i] > odd * (i % 2) + even * (not i % 2):\\n\\t\\teven += scores[i] * (i % 2)\\n\\t\\todd += scores[i] * (not i % 2)\\n\\telse:\\n\\t\\ttotal += odd * (i % 2) + even * (not i % 2)\\n\\t\\teven = odd = 0\\nprint(total + odd * (not i % 2) + even * (i % 2))\\n\", \"from collections import defaultdict\\nn = int(input())\\na = list(map(int, input().split()))\\nd = defaultdict(lambda : 0)\\nfor i in a:\\n\\td[i] += 1\\ndp = [-1 for i in range(100001)]\\ndp[0] = 0\\ndp[1] = d[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i] * i)\\nprint(dp[100000])\\n\", \"def backtrack(score, hashmap, list1):\\n\\tglobal res\\n\\tif dp[score][sum(hashmap)] == 1:\\n\\t\\treturn score\\n\\telse:\\n\\t\\tdp[score][sum(hashmap)] = 1\\n\\t\\tprint(score)\\n\\tif sum(hashmap) == 0:\\n\\t\\tif score >= res:\\n\\t\\t\\tres = score\\n\\t\\treturn score\\n\\tfor a in range(0, len(hashmap)):\\n\\t\\tif hashmap[a] != 0:\\n\\t\\t\\torig = a\\n\\t\\t\\torig_l = hashmap[a - 1]\\n\\t\\t\\torig_r = hashmap[a + 1]\\n\\t\\t\\thashmap[a] -= 1\\n\\t\\t\\thashmap[a - 1] = 0\\n\\t\\t\\thashmap[a + 1] = 0\\n\\t\\t\\tscore += orig\\n\\t\\t\\tbacktrack(score, hashmap, list1)\\n\\t\\t\\thashmap[a] += 1\\n\\t\\t\\thashmap[a - 1] = orig_l\\n\\t\\t\\thashmap[a + 1] = orig_r\\n\\t\\t\\tscore -= orig\\narg = int(input())\\nlist1 = list(map(int, input().strip().split()))\\nhashmap = [0 for a in range(0, 10 ** 5 + 2)]\\nfor a in range(0, arg):\\n\\thashmap[list1[a]] += 1\\nres = 0\\ndp = [0, hashmap[1]]\\nfor a in range(2, 10 ** 5 + 1):\\n\\tdp.append(max(dp[a - 1], hashmap[a] * a + dp[a - 2]))\\nprint(dp[10 ** 5])\\n\", \"def main():\\n\\tfrom sys import stdin, stdout\\n\\timport collections\\n\\tn = int(stdin.readline())\\n\\ttup = tuple(map(int, stdin.readline().split()))\\n\\tmaxim = max(tup)\\n\\tcnt = collections.Counter(tup)\\n\\tf = [0, cnt[1]]\\n\\tfor i in range(2, maxim + 1):\\n\\t\\tf.append(max(f[i - 1], f[i - 2] + cnt[i] * i))\\n\\tstdout.write(str(f[maxim]))\\nmain()\\n\", \"n = int(input())\\na = [-228] + sorted(list(map(int, input().split())))\\nb = [-228]\\ncnt = [0] * (10 ** 5 + 1)\\nfor i in range(1, n + 1):\\n\\tcnt[a[i]] += 1\\nfor i in range(1, n + 1):\\n\\tif a[i] != a[i - 1]:\\n\\t\\tb += [a[i]]\\na = b\\nn = len(a) - 1\\ndp = [0] * (n + 1)\\ndp[0] = 0\\ndp[1] = a[1] * cnt[a[1]]\\nfor i in range(2, n + 1):\\n\\tadd = a[i] * cnt[a[i]]\\n\\tdp[i] = dp[i - 1]\\n\\tif a[i - 1] == a[i] - 1:\\n\\t\\tdp[i] = max(dp[i], dp[i - 2] + add)\\n\\telse:\\n\\t\\tdp[i] = max(dp[i], dp[i - 1] + add)\\nprint(dp[n])\\n\", \"n = int(input())\\nline = [int(i) for i in input().split()]\\nm = max(line)\\nfq = [0] * (m + 1)\\nfor i in range(n):\\n\\tfq[line[i]] += 1\\nf = [0] * (m + 1)\\nf[0] = 0\\nf[1] = fq[1]\\nfor i in range(2, m + 1):\\n\\tif f[i - 1] >= f[i - 2] + i * fq[i]:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + i * fq[i]\\nprint(f[max(line)])\\n\", \"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\\nsys.setrecursionlimit(10 ** 7)\\ninf = 10 ** 20\\neps = 1.0 / 10 ** 10\\nmod = 10 ** 9 + 7\\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\\n\\ndef LI():\\n\\treturn [int(x) for x in sys.stdin.readline().split()]\\n\\ndef LI_():\\n\\treturn [int(x) - 1 for x in sys.stdin.readline().split()]\\n\\ndef LF():\\n\\treturn [float(x) for x in sys.stdin.readline().split()]\\n\\ndef LS():\\n\\treturn sys.stdin.readline().split()\\n\\ndef I():\\n\\treturn int(sys.stdin.readline())\\n\\ndef F():\\n\\treturn float(sys.stdin.readline())\\n\\ndef S():\\n\\treturn input()\\n\\ndef pf(s):\\n\\treturn print(s, flush=True)\\n\\ndef main():\\n\\tn = I()\\n\\ta = LI()\\n\\tc = collections.Counter(a)\\n\\tt = u = 0\\n\\td = -200\\n\\tfor k in sorted(c.keys()):\\n\\t\\tif d == k - 1:\\n\\t\\t\\t(t, u) = (max(t, u + c[k] * k), t)\\n\\t\\telse:\\n\\t\\t\\t(t, u) = (t + c[k] * k, t)\\n\\t\\td = k\\n\\treturn max(t, u)\\nprint(main())\\n\", \"N = int(input())\\nA = list(map(int, input().split()))\\nif len(set(A)) == 1:\\n\\tprint(A[0] * N)\\nelse:\\n\\td = {}\\n\\tfor a in A:\\n\\t\\tr = d.get(a, 0)\\n\\t\\td[a] = r + 1\\n\\tf = [0 for i in range(N + 1)]\\n\\tf[1] = d.get(1, 0)\\n\\tfor i in range(2, N + 1):\\n\\t\\tf[i] = max(f[i - 1], f[i - 2] + d.get(i, 0) * i)\\n\\tprint(f[N])\\n\", \"input()\\ndp = [0] * 100002\\nfor i in list(map(int, input().split())):\\n\\tdp[i] += i\\n(a, b) = (0, 0)\\nfor i in dp:\\n\\t(a, b) = (max(a, b), a + i)\\nprint(a)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\ncount = [0 for i in range(0, 100001)]\\nfor x in arr:\\n\\tcount[x] += 1\\nf = [0 for i in range(0, 100001)]\\nfor i in range(1, 100001):\\n\\tf[i] = i * count[i]\\n\\tif i - 2 >= 0:\\n\\t\\tf[i] += f[i - 2]\\n\\tif f[i - 1] > f[i]:\\n\\t\\tf[i] = f[i - 1]\\nprint(f[100000])\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\nb = Counter(a)\\nc = max(a)\\ndp = [0] * (c + 1)\\ndp[1] = b[1]\\nfor i in range(2, c + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * b[i])\\nprint(dp[c])\\n\", \"input()\\na = sorted([int(x) for x in input().split()])\\ni = 0\\n(nums, scores) = ([], [])\\nwhile i < len(a):\\n\\tj = i + 1\\n\\twhile j < len(a) and a[i] == a[j]:\\n\\t\\tj += 1\\n\\tnums.append(a[i])\\n\\tscores.append(a[i] * (j - i))\\n\\ti = j\\n(a, b) = (scores[0], 0)\\nfor i in range(1, len(nums)):\\n\\tif nums[i] == nums[i - 1] + 1:\\n\\t\\t(a, b) = (b + scores[i], max(a, b))\\n\\telse:\\n\\t\\t(a, b) = (max(a, b) + scores[i], max(a, b))\\nprint(max(a, b))\\n\", \"n = int(input())\\na = [0] * 100010\\ns = [0] * 100010\\nfor i in map(int, input().split()):\\n\\ta[i] += 1\\ns[1] = a[1]\\ns[2] = max(a[2] * 2, s[1])\\nfor i in range(3, 100001):\\n\\ts[i] = max(a[i] * i + s[i - 2], s[i - 1])\\nprint(s[10 ** 5])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\na = [0] * (max(arr) + 10)\\nfor i in arr:\\n\\ta[i] += 1\\nfor i in range(2, max(arr) + 1):\\n\\ta[i] = max(a[i - 1], a[i - 2] + a[i] * i)\\n\\tmx = a[i]\\nprint(mx)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\np = [0] * (max(l) + 2)\\nfor i in l:\\n\\tp[i] += i\\n(z, x) = (0, 0)\\nfor i in range(1, len(p) - 1):\\n\\t(z, x) = (x, max(x, z + p[i]))\\nprint(x)\\n\", \"from collections import defaultdict\\na = int(input())\\nb = list(map(int, input().split()))\\nset_b = set(b)\\nfreq = defaultdict(lambda : 0, {})\\nm = max(set_b)\\ndp = [0] * (m + 1)\\nfor x in b:\\n\\tfreq[x] += 1\\nfor i in range(1, len(dp)):\\n\\tif i == 1:\\n\\t\\tdp[i] = max(dp[i - 1], freq[i] * i)\\n\\telse:\\n\\t\\tdp[i] = max(dp[i - 1], freq[i] * i + dp[i - 2])\\nprint(dp[m])\\n\", \"from collections import defaultdict\\n_ = input()\\nnumbers = [int(i) for i in input().split(' ')]\\ncount = defaultdict(int)\\nfor number in numbers:\\n\\tcount[number] += 1\\narray = []\\nfor (key, value) in count.items():\\n\\tarray.append((key, value))\\narray = sorted(array, key=lambda pair: pair[0])\\nf = [0] * len(array)\\nfor i in range(len(array)):\\n\\tpr = i - 1\\n\\twhile pr >= 0 and array[pr][0] + 1 == array[i][0]:\\n\\t\\tpr -= 1\\n\\tif pr < 0:\\n\\t\\tf[i] = array[i][0] * array[i][1]\\n\\telse:\\n\\t\\tf[i] = f[pr] + array[i][0] * array[i][1]\\n\\tif i != 0:\\n\\t\\tf[i] = max(f[i], f[i - 1])\\nprint(f[-1])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nm = max(l) + 1\\na = [0] * m\\ndp = [0] * m\\nfor q in l:\\n\\ta[q] += 1\\ndp[1] = a[1]\\nfor q in range(2, m):\\n\\tdp[q] = max(dp[q - 1], dp[q - 2] + a[q] * q)\\nprint(max(dp))\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\ns = min(l)\\nr = max(l)\\nm = [0] * (r - s + 1)\\nf = [0] * (r + 1)\\nfor i in range(n):\\n\\tt = l[i]\\n\\tm[t - s] = m[t - s] + 1\\nf[s] = m[0] * s\\nfor i in range(s + 1, r + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + m[i - s] * i)\\nprint(f[r])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = [0] * 100002\\nmx = max(a)\\nmn = min(a)\\nfor i in range(n):\\n\\tb[a[i]] += 1\\nfor i in range(mn, mx + 1):\\n\\tb[i] *= i\\nfor i in range(mn, mx + 1):\\n\\tb[i] = max(b[i] + b[i - 2], b[i - 1])\\nprint(b[mx])\\n\", \"aints = int(input())\\nnums = list(map(int, input().split(' ')))\\ncompute = [0] * 100001\\nfor i in nums:\\n\\tcompute[i] += 1\\nanswer = [0, compute[1]] + [-1] * 100000\\nfor i in range(2, 100001):\\n\\tanswer[i] = max(compute[i] * i + answer[i - 2], answer[i - 1])\\nprint(answer[-2])\\n\", \"len = int(input())\\nnlist = list(map(int, input().split()))\\nnset = set(nlist)\\nA = [0] * 100002\\nfor i in nlist:\\n\\tA[i] += 1\\nL = [0] * 100002\\nL[0] = 0\\nL[1] = nlist.count(1)\\nans = 0\\nfor i in range(2, 100002):\\n\\tL[i] = max(L[i - 1], L[i - 2] + i * A[i])\\n\\tans = max(ans, L[i])\\nprint(ans)\\n\", \"n = int(input())\\na = map(int, input().split())\\nlimit = int(10 ** 5 + 1)\\ncnt = [0 for i in range(0, limit)]\\nfor num in a:\\n\\tcnt[num] = cnt[num] + 1\\ndp = [0] * limit\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor i in range(2, limit):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[limit - 1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nd = [0] * (max(a) + 1)\\nfor el in a:\\n\\td[el] += el\\nfor i in range(2, len(d)):\\n\\td[i] = max(d[i - 1], d[i - 2] + d[i])\\n\\ti += 1\\nprint(d[-1])\\n\", \"def answer(n, A):\\n\\tif n == 1:\\n\\t\\treturn A[0]\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\tif A[i] in d:\\n\\t\\t\\td[A[i]] += A[i]\\n\\t\\telse:\\n\\t\\t\\td[A[i]] = A[i]\\n\\tn = max(d.keys())\\n\\tdp = [0] * (n + 1)\\n\\tif 1 in d:\\n\\t\\tdp[1] = d[1]\\n\\tfor i in range(2, n + 1):\\n\\t\\tif i in d:\\n\\t\\t\\tdp[i] = max(dp[i - 2] + d[i], dp[i - 1])\\n\\t\\telse:\\n\\t\\t\\tdp[i] = max(dp[i - 2], dp[i - 1])\\n\\treturn dp[n]\\nn = int(input())\\narr = list(map(int, input().split()))\\nprint(answer(n, arr))\\n\", \"import sys\\nMAXN = 100005\\nn = 0\\na = [0] * MAXN\\nf = [0] * MAXN\\nmax_a = 0\\n\\ndef read():\\n\\tglobal n, max_a\\n\\tn = int(input())\\n\\ttemp = [int(x) for x in input().split(' ')]\\n\\tfor i in range(n):\\n\\t\\tx = temp[i]\\n\\t\\ta[x] += x\\n\\t\\tmax_a = max(max_a, x)\\n\\ndef solve():\\n\\tglobal n, max_a\\n\\tret = 0\\n\\tfor i in range(1, max_a + 1):\\n\\t\\tif a[i - 1] == 0 and a[i + 1] == 0:\\n\\t\\t\\tret += a[i]\\n\\t\\t\\ta[i] = 0\\n\\tf[1] = a[1]\\n\\tf[2] = max(a[1], a[2])\\n\\tfor i in range(3, max_a + 1):\\n\\t\\tf[i] = max(f[i - 1], a[i] + f[i - 2])\\n\\tret += f[max_a]\\n\\tprint(ret)\\nread()\\nsolve()\\n\", \"n = int(input())\\nt = list(map(int, input().split()))\\ns = [0] * 100001\\nfor i in t:\\n\\ts[i] += 1\\na = b = 0\\nfor i in range(100001):\\n\\t(a, b) = (max(a, b), a + s[i] * i)\\nprint(max(a, b))\\n\", \"n = int(input())\\nlista = [int(x) for x in input().split()]\\nlista.sort()\\ndict1 = dict.fromkeys([x for x in range(10 ** 5 + 1)], 0)\\nfor i in range(n):\\n\\tx = lista[i]\\n\\tdict1[x] = dict1[x] + x\\nm = 0\\nfor i in range(2, lista[-1] + 1):\\n\\tdict1[i] = max(dict1[i] + dict1[i - 2], dict1[i - 1])\\n\\tm = max(m, dict1[i])\\nprint(m)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\ncc = max(a)\\ncnt = (cc + 1) * [0]\\ndp = (cc + 1) * [0]\\nfor x in a:\\n\\tcnt[x] += 1\\ndp[0] = 0\\ndp[1] = cnt[1]\\nfor y in range(2, cc + 1):\\n\\tdp[y] = max(dp[y - 1], dp[y - 2] + cnt[y] * y)\\nprint(dp[cc])\\n\", \"def func(nums):\\n\\tif nums == []:\\n\\t\\treturn 0\\n\\tarr = [0 for i in range(100001)]\\n\\tdp = [0 for i in range(100001)]\\n\\tfor i in nums:\\n\\t\\tarr[i] += 1\\n\\tans = 0\\n\\tif arr[1] != 0:\\n\\t\\tdp[1] = arr[1]\\n\\t\\tans = arr[1]\\n\\tfor i in range(2, max(nums) + 1):\\n\\t\\tif arr[i] != 0:\\n\\t\\t\\tif arr[i - 1] == 0:\\n\\t\\t\\t\\tdp[i] = max(dp[i - 1], dp[i - 2]) + arr[i] * i\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp[i] = max(dp[i - 1], arr[i] * i + dp[i - 2])\\n\\t\\telse:\\n\\t\\t\\tdp[i] = dp[i - 1]\\n\\t\\tans = max(dp[i], ans)\\n\\treturn ans\\nn = int(input())\\nnums = [int(i) for i in input().split()]\\nprint(func(nums))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nMAX = 10 ** 5 + 1\\ncnt = [0] * MAX\\nfor i in l:\\n\\tcnt[i] += i\\nprev = pprev = 0\\nfor i in cnt:\\n\\t(prev, pprev) = (max(prev, pprev + i), prev)\\nprint(prev)\\n\", \"def f(n):\\n\\tdp = [0] * 100001\\n\\tcnt = [0] * 100001\\n\\tfor i in a:\\n\\t\\tcnt[i] += 1\\n\\tdp[0] = 0\\n\\tdp[1] = cnt[1]\\n\\tfor i in range(2, 100001):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\treturn dp[100000]\\nn = int(input())\\na = list(map(int, input().split()))\\nprint(f(n))\\n\", \"from collections import Counter\\nn = int(input())\\nl = list(map(int, input().split()))\\nd = Counter(l)\\ndp = [0 for x in range(100001)]\\ndp[1] = d[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + d[i] * i)\\nprint(max(dp))\\n\", \"n = int(input())\\nli = list(map(int, input().split()))\\nli1 = [0] * 100001\\nfor i in li:\\n\\tli1[i] += 1\\nres = [0] * 100001\\nres[0] = 0\\nres[1] = li1[1]\\nfor i in range(2, 100001):\\n\\tres[i] = max(res[i - 1], res[i - 2] + li1[i] * i)\\nprint(res[-1])\\n\", \"import math\\nfrom collections import Counter\\nfrom collections import defaultdict\\nn = int(input())\\nsequence = [int(x) for x in input().split()]\\nfreqTable = Counter(sequence)\\nprev = 0\\ncurr = 0\\nfor i in range(max(sequence) + 1):\\n\\t(curr, prev) = (max(i * freqTable[i] + prev, curr), curr)\\nprint(curr)\\n\", \"a = [0 for i in range(100010)]\\nf = [0 for i in range(100010)]\\nans = 0\\nn = int(input())\\nL = input().split()\\nfor i in range(n):\\n\\ta[int(L[i])] += 1\\nfor i in range(1, 100001):\\n\\tf[i] = f[i - 2] + i * a[i]\\n\\tans = max(ans, f[i])\\n\\tf[i] = max(f[i], f[i - 1])\\nprint(ans)\\nexit(0)\\n\", \"import math as mt\\nimport sys, string, bisect\\ninput = sys.stdin.readline\\nimport random\\nfrom collections import deque, defaultdict\\nL = lambda : list(map(int, input().split()))\\nLs = lambda : list(input().split())\\nM = lambda : map(int, input().split())\\nI = lambda : int(input())\\nd = defaultdict(int)\\nn = I()\\nl = L()\\nfor i in l:\\n\\td[i] += 1\\ndp = [0, d[1]]\\nfor i in range(2, max(l) + 1):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + d[i] * i))\\nprint(dp[-1])\\n\", \"n = int(input())\\narr = [0 for i in range(100007)]\\ntable = [0 for i in range(100007)]\\ntemp = list(map(int, input().split()))\\nfor i in temp:\\n\\tarr[i] += 1\\ntable[0] = 0\\ntable[1] = arr[1]\\nfor i in range(2, 100001):\\n\\ttable[i] = max(table[i - 1], table[i - 2] + i * arr[i])\\nprint(table[100000])\\n\", \"import math\\nimport operator as op\\nfrom functools import reduce\\nfrom fractions import Fraction as frac\\n\\ndef tos(A):\\n\\treturn list(set(A))\\nn = int(input())\\nA = list(map(int, input().rstrip().split()))\\ncnt = [0 for i in range(100000 + 1)]\\nfor i in range(n):\\n\\tcnt[A[i]] += 1\\nf = [0, cnt[1]]\\nfor i in range(2, 100000 + 1):\\n\\tf.append(max(f[i - 1], f[i - 2] + cnt[i] * i))\\nprint(f[100000])\\n\", \"n = int(input())\\nArr = list(map(int, input().split()))\\nfreq = [0] * 100001\\nfor i in Arr:\\n\\tfreq[i] += 1\\ndp = [0] * 100001\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 2] + i * freq[i], dp[i - 1])\\nprint(dp[100000])\\n\", \"n = int(input())\\nAs = [int(x) for x in input().split()]\\ndp = [0] * (10 ** 5 + 7)\\nmx = -1\\nfor i in range(n):\\n\\tmx = max(As[i], mx)\\n\\tdp[As[i]] += 1\\nfor i in range(2, mx + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * dp[i])\\nprint(dp[mx])\\n\", \"from collections import Counter\\nn = int(input())\\nlst = [int(i) for i in input().split()]\\ncounts = [0] * (10 ** 5 + 2)\\ndic = Counter(lst)\\nfor key in dic.keys():\\n\\tcounts[key] = dic[key]\\nf_minus = counts[1]\\nf_minus_minus = 0\\nfor i in range(2, 10 ** 5 + 2):\\n\\tf_cur = max(f_minus, f_minus_minus + counts[i] * i)\\n\\tf_minus_minus = f_minus\\n\\tf_minus = f_cur\\nprint(f_cur)\\n\", \"n = int(input())\\na = [int(i) for i in input().split(' ')]\\ni = 0\\nmaxnum = max(a)\\nminnum = min(a)\\nnum = []\\nwhile i < maxnum + 1:\\n\\tnum.append(0)\\n\\ti = i + 1\\ni = 0\\nwhile i < len(a):\\n\\tnum[a[i]] = num[a[i]] + 1\\n\\ti = i + 1\\ng0 = 0\\ng1 = 0\\nf0 = g0\\nf1 = g1\\nfor i in range(minnum, maxnum + 1):\\n\\tg0 = max(f0, f1)\\n\\tg1 = f0 + num[i] * i\\n\\tf0 = g0\\n\\tf1 = g1\\nprint(max(f0, f1))\\n\", \"input()\\ns = [0] * 100001\\nfor i in [int(a) for a in input().split()]:\\n\\ts[i] += i\\nfor i in range(2, 100001):\\n\\ts[i] = max(s[i - 1], s[i - 2] + s[i])\\nprint(s[-1])\\n\", \"n = input()\\nmy_list = input()\\n\\ndef prepare_data(my_list):\\n\\tmy_list = list(map(int, my_list.split()))\\n\\tmax_num = max(my_list)\\n\\tscores = [0] * (max_num + 1)\\n\\tfor num in my_list:\\n\\t\\tscores[num] += num\\n\\treturn scores[1:]\\n\\ndef count_score(scores):\\n\\tf = [0] * len(scores)\\n\\tfor i in range(len(scores)):\\n\\t\\tpr = i - 1\\n\\t\\twhile pr >= 0 and pr + 1 == i:\\n\\t\\t\\tpr -= 1\\n\\t\\tif pr == -1:\\n\\t\\t\\tf[i] = scores[i]\\n\\t\\telse:\\n\\t\\t\\tf[i] = f[pr] + scores[i]\\n\\t\\tif i != 0:\\n\\t\\t\\tf[i] = max(f[i], f[i - 1])\\n\\tresult_score = f[-1]\\n\\treturn result_score\\nprint(count_score(prepare_data(my_list)))\\n\", \"n = int(input())\\narray = list(map(int, input().strip().split()))\\nb = max(array)\\nbrr = [0] * 10000001\\nfor j in array:\\n\\tbrr[j] += j\\ncrr = [0] * 10000001\\ncrr[0] = 0\\ncrr[1] = brr[1]\\nfor i in range(2, b + 1):\\n\\tcrr[i] = max(crr[i - 1], crr[i - 2] + brr[i])\\nprint(max(crr))\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nc1 = [0] * (max(arr) + 1)\\nm = max(arr)\\nfor i in arr:\\n\\tc1[i] += 1\\nres = [-1] * (m + 1)\\nres[0] = 0\\nres[1] = c1[1]\\nfor i in range(2, m + 1):\\n\\tres[i] = max(res[i - 2] + c1[i] * i, res[i - 1])\\nprint(res[m])\\n\", \"import functools\\nimport logging\\nimport os\\nimport sys\\nimport time\\nfrom typing import List\\nlogger = logging.getLogger()\\nreader = sys.stdin\\nis_judge = os.getenv('DEBUGGING') is None\\n\\ndef timeit(func):\\n\\n\\t@functools.wraps(func)\\n\\tdef timed(*args, **kwargs):\\n\\t\\tif is_judge:\\n\\t\\t\\trv = func(*args, **kwargs)\\n\\t\\telse:\\n\\t\\t\\tts = time.time()\\n\\t\\t\\trv = func(*args, **kwargs)\\n\\t\\t\\tte = time.time()\\n\\t\\t\\tlogger.debug('performance %r %2.2fms', func.__name__, (te - ts) * 1000)\\n\\t\\treturn rv\\n\\treturn timed\\n\\ndef read_ints():\\n\\treturn [int(v) for v in reader.readline().strip().split(' ')]\\n\\ndef main():\\n\\tn = read_ints()[0]\\n\\ta = read_ints()\\n\\ta = sorted(a)\\n\\tlogger.debug(a)\\n\\tscores = []\\n\\tfor v in a:\\n\\t\\tif not scores or scores[-1][0] != v:\\n\\t\\t\\tscores.append([v, v])\\n\\t\\telse:\\n\\t\\t\\tscores[-1][1] += v\\n\\tlogger.debug(scores)\\n\\tres = [0] * len(scores)\\n\\tfor i in range(len(scores)):\\n\\t\\tif i == 0:\\n\\t\\t\\tres[0] = scores[0][1]\\n\\t\\telif i == 1:\\n\\t\\t\\tif scores[0][0] != scores[1][0] - 1:\\n\\t\\t\\t\\tres[1] = res[0] + scores[1][1]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tres[1] = max(res[0], scores[1][1])\\n\\t\\telif scores[i - 1][0] != scores[i][0] - 1:\\n\\t\\t\\tres[i] = res[i - 1] + scores[i][1]\\n\\t\\telse:\\n\\t\\t\\tres[i] = max(res[i - 1], res[i - 2] + scores[i][1])\\n\\tlogger.debug(res)\\n\\tprint(res[-1])\\n\\ndef setup():\\n\\tglobal logger, reader\\n\\tif is_judge:\\n\\t\\tlogger.setLevel(logging.WARNING)\\n\\telse:\\n\\t\\thandler = logging.StreamHandler(sys.stdout)\\n\\t\\thandler.setLevel(logging.DEBUG)\\n\\t\\tformatter = logging.Formatter('{asctime}s - {message}', style='{')\\n\\t\\thandler.setFormatter(formatter)\\n\\t\\tlogger.addHandler(handler)\\n\\t\\tlogger.setLevel(logging.DEBUG)\\n\\t\\treader = open('input.txt')\\nsetup()\\ntry:\\n\\tmain()\\nexcept KeyboardInterrupt:\\n\\tlogger.debug('KeyboardInterrupt')\\nexcept IOError as e:\\n\\tlogger.error(f'I/O error({e.errno}): {e.strerror}')\\n\", \"n = int(input())\\nmas = [0] * (10 ** 5 + 1)\\na = [0] * (10 ** 5 + 1)\\nfor val in input().split():\\n\\tval = int(val)\\n\\tmas[val] += val\\na[0] = 0\\na[1] = mas[1]\\nfor i in range(2, len(mas)):\\n\\ta[i] = max(a[i - 1], a[i - 2] + mas[i])\\nprint(a[len(a) - 1])\\n\", \"n = int(input())\\na = tuple(map(int, input().split()))\\ndp = [0] * 4\\ntong = [0] * 100001\\nmark = s = 0\\nflag = False\\nfor i in a:\\n\\ttong[i] += 1\\nfor i in range(1, 100001):\\n\\tif tong[i] == 0:\\n\\t\\tflag = True\\n\\t\\tcontinue\\n\\tif flag:\\n\\t\\tflag = False\\n\\t\\tdp[0] = dp[1] = max(dp[2], dp[3])\\n\\t\\tdp[2] = 0\\n\\t\\tdp[3] = dp[0] + tong[i] * i\\n\\telse:\\n\\t\\t(dp[0], dp[1], dp[2]) = (dp[1], dp[2], dp[3])\\n\\t\\tdp[3] = tong[i] * i + max(dp[0], dp[1])\\nprint(max(dp[2], dp[3]))\\n\", \"MAX_N = 100003\\ninp = [0] * MAX_N\\ndp = [0] * MAX_N\\nn = int(input())\\nfor i in map(int, input().split()):\\n\\tinp[i] += 1\\nfor i in range(1, MAX_N):\\n\\tif inp[i] == 0:\\n\\t\\tdp[i] = dp[i - 1]\\n\\t\\tcontinue\\n\\tdp[i] = max(dp[i - 1], i * inp[i] + dp[i - 2])\\nprint(dp[-1])\\n\", \"A = [0] * 100001\\ninput()\\nfor i in map(int, input().split()):\\n\\tA[i] += i\\n(m1, m2) = (0, 0)\\nfor i in A:\\n\\t(m1, m2) = (max(m1, i + m2), m1)\\nprint(m1)\\n\", \"import sys\\nimport math\\nn = int(input())\\na = [int(e) for e in input().split()]\\nm = max(a)\\nv = [0] * (m + 1)\\nf = [0] * (m + 1)\\nfor e in a:\\n\\tv[e] = v[e] + 1\\nf[1] = v[1]\\nfor i in range(2, m + 1):\\n\\tf[i] = max(f[i - 1], v[i] * i + f[i - 2])\\nprint(f[m])\\n\", \"n = int(input())\\nl = [int(x) for x in input().split()]\\nlst = [0] * (max(l) + 1)\\nfor i in l:\\n\\tlst[i] += i\\nf = [0] * (max(l) + 1)\\nf[1] = lst[1]\\nfor i in range(1, max(l) + 1):\\n\\tif f[i - 1] > lst[i] + f[i - 2]:\\n\\t\\tf[i] = f[i - 1]\\n\\telse:\\n\\t\\tf[i] = f[i - 2] + lst[i]\\nprint(f[max(l)])\\n\", \"judge = True\\nif judge:\\n\\tfrom sys import stdin, stdout\\nelse:\\n\\tstdin = open('input.txt', 'r')\\n\\tstdout = open('output.txt', 'w')\\nn = int(stdin.readline())\\nx = [int(t) for t in stdin.readline().split()]\\nx.sort()\\na = b = m = 0\\nk = kprev = 0\\nfor i in range(n):\\n\\tif x[i] != k:\\n\\t\\tif k - kprev < 2:\\n\\t\\t\\tc = max(b, a + m * k)\\n\\t\\telse:\\n\\t\\t\\tc = b + m * k\\n\\t\\ta = b\\n\\t\\tb = c\\n\\t\\tm = 1\\n\\t\\tkprev = k\\n\\t\\tk = x[i]\\n\\telse:\\n\\t\\tm += 1\\nif k - kprev < 2:\\n\\tc = max(b, a + m * k)\\nelse:\\n\\tc = b + m * k\\nstdout.write(str(c))\\nstdin.close()\\nstdout.close()\\n\", \"n = int(input())\\narr1 = [int(x) for x in input().split()]\\nfreq = [0] * (100000 + 1)\\nfor i in range(len(arr1)):\\n\\tfreq[arr1[i]] += 1\\ndp = [0] * (100000 + 1)\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, 100000 + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * freq[i])\\nprint(dp[100000], flush=True)\\n\", \"n = int(input())\\ncnt = [0] * 100005\\ndp = [0] * 100005\\na = list(map(int, input().split()))\\nfor e in a:\\n\\tcnt[e] += 1\\ndp[0] = 0\\ndp[1] = cnt[1]\\nlargest = max(cnt)\\nfor i in range(2, len(cnt)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(max(dp))\\n\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nnew = []\\nm = max(a)\\nj = 0\\nfor i in range(m + 1):\\n\\tnew.append(0)\\n\\twhile a[j] == i:\\n\\t\\tnew[-1] += a[j]\\n\\t\\tj += 1\\n\\t\\tif j == n:\\n\\t\\t\\tbreak\\ncal = [False for x in range(m + 1)]\\nms = [0] * (m + 1)\\nstack = [1]\\nwhile stack:\\n\\ti = stack[-1]\\n\\tif i == m - 2:\\n\\t\\tms[i] = max(new[i] + new[i + 2], new[i + 1])\\n\\t\\tstack.pop()\\n\\t\\tcal[i] = True\\n\\telif i == m - 1:\\n\\t\\tms[i] = max(new[i], new[i + 1])\\n\\t\\tstack.pop()\\n\\t\\tcal[i] = True\\n\\telif i == m:\\n\\t\\tcal[i] = True\\n\\t\\tstack.pop()\\n\\t\\tms[i] = new[i]\\n\\telse:\\n\\t\\tif cal[i + 2] == True and cal[i + 3] == True:\\n\\t\\t\\tms[i] = max(ms[i + 2] + new[i], ms[i + 3] + new[i + 1])\\n\\t\\t\\tcal[i] = True\\n\\t\\t\\tstack.pop()\\n\\t\\tif cal[i + 3] == False:\\n\\t\\t\\tstack.append(i + 3)\\n\\t\\tif cal[i + 2] == False:\\n\\t\\t\\tstack.append(i + 2)\\nprint(ms[1])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nb = l.copy()\\nb.sort()\\nmin1 = min(l)\\nmax1 = max(l)\\nl1 = [0] * (max1 + 1)\\ni = 0\\ncount1 = 1\\nwhile i < len(b) - 1:\\n\\tif b[i] == b[i + 1]:\\n\\t\\tcount1 = count1 + 1\\n\\telse:\\n\\t\\tl1[b[i]] = count1\\n\\t\\tcount1 = 1\\n\\ti = i + 1\\nl1[b[i]] = count1\\ndp = [0] * (max1 + 1)\\nif max1 == 0:\\n\\tdp[0] = 0\\n\\tprint(0)\\nelif max1 == 1:\\n\\tdp[1] = 1 * l1[1]\\n\\tprint(dp[1])\\nelse:\\n\\tdp[0] = 0\\n\\tdp[1] = 1 * l1[1]\\n\\ti = 2\\n\\tfor i in range(2, len(dp)):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * l1[i])\\n\\tprint(dp[len(dp) - 1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ndp = [0] * (max(a) + 1)\\nif len(a) == 1:\\n\\tprint(a[0])\\nelse:\\n\\tfor i in a:\\n\\t\\tdp[i] += 1\\n\\tf = [0, dp[0]]\\n\\tfor u in range(1, len(dp)):\\n\\t\\tf.append(max(f[-1], f[-2] + dp[u] * u))\\n\\tprint(f[-1])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nb = [0] * 100001\\nfor i in a:\\n\\tb[i] += i\\ns1 = b[0]\\ns2 = b[1]\\nfor i in range(2, 100001):\\n\\tt = max(s1 + b[i], s2)\\n\\ts1 = s2\\n\\ts2 = t\\nprint(s2)\\n\", \"from collections import Counter\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = Counter(map(int, input().split()))\\n\\tres = [0] * len(a)\\n\\t_i = 0\\n\\tfor (j, (i, cnt)) in enumerate(sorted(a.items(), reverse=True)):\\n\\t\\tif i == _i - 1:\\n\\t\\t\\tres[j] = max(res[j - 1], res[j - 2] + i * a[i])\\n\\t\\telse:\\n\\t\\t\\tres[j] = res[j - 1] + i * a[i]\\n\\t\\t_i = i\\n\\tprint(res[-1])\\nmain()\\n\", \"N = int(input())\\nA = list(map(int, input().split()))\\ndic = {}\\nfor i in A:\\n\\tif i in dic:\\n\\t\\tdic[i] += 1\\n\\telse:\\n\\t\\tdic[i] = 1\\ndp = [0 for i in range(100001)]\\ndp[1] = dic.get(1, 0)\\nfor i in range(2, max(A) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + dic.get(i, 0) * i)\\nprint(dp[max(A)])\\n\", \"n = int(input())\\nq = [int(x) for x in input().split()]\\nkol = [0 for x in range(100500)]\\nfor x in q:\\n\\tkol[x] += x\\ndp = [0 for x in range(100500)]\\ndp[1] = kol[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + kol[i])\\nprint(dp[100000])\\n\", \"input()\\na = [0] * 123456\\nd = [0] * 123456\\nfor x in map(int, input().split()):\\n\\ta[x] += 1\\nd[1] = a[1]\\nfor i in range(2, 123456):\\n\\td[i] = max(d[i - 1], d[i - 2] + a[i] * i)\\nprint(d[123455])\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl1 = [0] * 100001\\nfor x in l:\\n\\tl1[x - 1] += 1\\nma = l1[0]\\nl1[1] = max(l1[1] * 2, ma)\\nma = max(ma, l1[1])\\nfor i in range(2, 100001):\\n\\tl1[i] = max(l1[i - 2] + (i + 1) * l1[i], l1[i - 1])\\n\\tma = max(ma, l1[i])\\nprint(ma)\\n\", \"from collections import Counter\\nn = int(input())\\nnumbers = Counter((int(x) for x in input().split()))\\nmax_points_memory = {}\\nmax_points_memory[0] = 0\\nmax_points_memory[1] = numbers[1]\\nmax_number = max(numbers.keys())\\nfor i in range(2, max_number + 1):\\n\\tmax_points_memory[i] = max(max_points_memory[i - 1], max_points_memory[i - 2] + i * numbers[i])\\nprint(max_points_memory[max_number])\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\na.sort()\\nd = {}\\nb = [0 * i for i in range(100005)]\\nans = [0 * i for i in range(100005)]\\nfor x in a:\\n\\tb[x] += 1\\nans[0] = 0\\nans[1] = b[1]\\nfor i in range(2, 100001):\\n\\tans[i] = max(ans[i - 1], ans[i - 2] + i * b[i])\\nprint(ans[100000])\\n\", \"while True:\\n\\ttry:\\n\\t\\tn = int(input())\\n\\t\\tline = [int(i) for i in input().split()]\\n\\t\\tl = 100001 * [0]\\n\\t\\tfor i in line:\\n\\t\\t\\tl[i] += i\\n\\t\\tx = max(line)\\n\\t\\tdp = [0] * len(l)\\n\\t\\tdp[1] = l[1]\\n\\t\\tfor i in range(2, len(l)):\\n\\t\\t\\tdp[i] = max(dp[i - 2] + l[i], dp[i - 1])\\n\\t\\tprint(dp[len(l) - 1])\\n\\texcept EOFError:\\n\\t\\tbreak\\n\", \"MOD = 10 ** 9 + 7\\nI = lambda : list(map(int, input().split()))\\n(n,) = I()\\nl = I()\\na = [0] * 100001\\nfor i in l:\\n\\ta[i] += 1\\nf = [0] * 100001\\nf[1] = a[1]\\nfor i in range(2, 100001):\\n\\tf[i] = max(f[i - 1], f[i - 2] + a[i] * i)\\nprint(f[100000])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nd = [0] * 100002\\nfor aa in a:\\n\\td[aa] += 1\\ndp = [0, 0, 0]\\nfor i in range(1, 100002):\\n\\tpoints = d[i] * i\\n\\tdp.append(points + max(dp[-2], dp[-3]))\\nsol = max(dp)\\nprint(sol)\\n\", \"n = input()\\nt = [0] * 100002\\nfor i in map(int, input().split()):\\n\\tt[i] += i\\na = b = 0\\nfor r in t:\\n\\t(a, b) = (max(a, b), a + r)\\nprint(a)\\n\", \"n = int(input())\\nN = int(100000.0) + 5\\nfreq = {}\\ndp = {}\\nfor i in range(N + 1):\\n\\tdp[i] = 0\\n\\tfreq[i] = 0\\nfor i in input().strip().split():\\n\\tfreq[int(i)] += 1\\ndp[0] = 0\\ndp[1] = freq[1]\\nfor i in range(2, N + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\nprint(dp[N])\\n\", \"log = lambda *x: print(*x)\\n\\ndef cin(*fn, def_fn=str):\\n\\t(i, r) = (0, [])\\n\\tfor c in input().split(' '):\\n\\t\\tr += [(fn[i] if len(fn) > i else fn[0])(c)]\\n\\t\\ti += 1\\n\\treturn r\\n\\ndef max_score(a, n):\\n\\tfreq = [0] * (n + 1)\\n\\tfor v in a:\\n\\t\\tfreq[v] += 1\\n\\tdp = [0] * (n + 1)\\n\\t(dp[0], dp[1]) = (0, freq[1])\\n\\tfor i in range(2, n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\\n\\treturn dp[n]\\n(n,) = cin(int)\\na = cin(int)\\nlog(max_score(a, 100005))\\n\", \"import collections\\n\\ndef getdict(ele, D):\\n\\tif ele in D:\\n\\t\\treturn D[ele]\\n\\telse:\\n\\t\\treturn 0\\nN = int(input())\\nA = list(map(int, input().split(' ')))\\ncnt = collections.Counter(A)\\nDP = []\\nDP.append(0)\\nDP.append(getdict(1, cnt))\\nfor i in range(2, max(A) + 1):\\n\\tDP.append(max(DP[i - 2] + getdict(i, cnt) * i, DP[i - 1]))\\nprint(DP[max(A)])\\n\", \"n = int(input())\\nA = map(int, input().split())\\ndec = [0] * 10 ** 5\\nfor el in A:\\n\\tdec[el - 1] += 1\\nd = [0] * 10 ** 5\\nd[0] = dec[0]\\nd[1] = max(dec[0], dec[1] * 2)\\nfor i in range(2, len(dec)):\\n\\td[i] = max(d[i - 1], d[i - 2] + dec[i] * (i + 1))\\nprint(d[-1])\\n\", \"from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\nb = [0] * (10 ** 5 + 1)\\nfor i in a:\\n\\tb[i] += 1\\nb[2] = 2 * b[2]\\nb[3] = b[1] + 3 * b[3]\\np = 0\\nfor i in range(4, 10 ** 5 + 1):\\n\\tb[i] = max(b[i - 2], b[i - 3]) + i * b[i]\\n\\tp = max(p, b[i])\\nprint(p)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\ncnt = [0 for i in range(100005)]\\ndp = [-1 for i in range(100005)]\\n\\ndef funn(n):\\n\\tglobal dp, cnt\\n\\tif dp[n] != -1:\\n\\t\\treturn dp[n]\\n\\tdp[n - 1] = fun(n - 1)\\n\\tdp[n - 2] = fun(n - 2)\\n\\treturn max(dp[n - 1], dp[n - 2] + cnt[n] * n)\\n\\ndef fun(n):\\n\\tglobal cnt, dp\\n\\tfor i in range(2, n + 1):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + cnt[i] * i)\\n\\treturn dp[n]\\ndp[0] = 0\\nmx = 0\\nfor i in l:\\n\\tcnt[i] += 1\\n\\tif i > mx:\\n\\t\\tmx = i\\ndp[1] = cnt[1]\\nprint(fun(mx))\\n\", \"n = int(input())\\na = [int(k) for k in input().split()]\\nm = max(a)\\nnum = [0] * (m + 1)\\nfor i in a:\\n\\tnum[i] += 1\\nbest = [0] * (m + 1)\\nbest[1] = num[1]\\nfor i in range(2, m + 1):\\n\\tbest[i] = max(best[i - 1], best[i - 2] + i * num[i])\\nprint(best[m])\\n\", \"from collections import defaultdict\\nn = int(input())\\ncnt = defaultdict(lambda : 0, dict())\\nfor i in [int(i) for i in input().split()]:\\n\\tcnt[i] += 1\\ndp = [0] * 100100\\nif 1 in cnt.keys():\\n\\tdp[1] = cnt[1]\\nfor i in range(2, 100010):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * cnt[i])\\nprint(dp[100002])\\n\", \"def calculaPontos(i):\\n\\tif i == 0:\\n\\t\\treturn counter[0]\\n\\tif i == 1:\\n\\t\\treturn counter[1]\\n\\telse:\\n\\t\\treturn max(calculaPontos(i - 1), calculaPontos(i - 2) + counter[i] * i)\\nn = int(input())\\nnumbers = input().split()\\nlim = 1000001\\ncounter = [0] * lim\\nfor e in numbers:\\n\\te = int(e)\\n\\tcounter[e] += 1\\ndp = []\\ndp.append(counter[0])\\ndp.append(counter[1])\\nfor i in range(2, lim, 1):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + counter[i] * i))\\npontos = dp[lim - 1]\\nprint(pontos)\\n\", \"mx = 0\\nn = int(input())\\nA = [0] * 100002\\nfor el in map(int, input().split(' ')):\\n\\tA[el] += el\\n\\tif el > mx:\\n\\t\\tmx = el\\nres = 0\\nsums = [0, 0]\\nfor i in range(1, mx + 1):\\n\\tsums[i % 2] += A[i]\\n\\tif sums[(i - 1) % 2] >= sums[i % 2]:\\n\\t\\tres += sums[(i - 1) % 2]\\n\\t\\tsums[(i - 1) % 2] = sums[i % 2] = 0\\nres += sums[0] if sums[0] > sums[1] else sums[1]\\nprint(res)\\n\", \"from collections import defaultdict\\n_ = input('')\\nnums = list(map(int, input('').split(' ')))\\ndp = defaultdict(int)\\nfor i in nums:\\n\\tdp[i] += i\\ndp[0] = 0\\nfor i in range(2, max(nums) + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + dp[i])\\nprint(dp[max(nums)])\\n\", \"from sys import stdin, stdout\\nfrom collections import Counter\\nn = int(stdin.readline())\\narr = list(map(int, stdin.readline().split()))\\ncount = Counter(arr)\\nmatrix = [[0 for i in range(2)] for i in range(max(arr) + 1)]\\narr = [0] * len(matrix)\\nfor i in count:\\n\\tarr[i] = count[i] * i\\nfor i in range(1, len(matrix)):\\n\\tmatrix[i][0] = max(matrix[i - 1][0], matrix[i - 1][1])\\n\\tmatrix[i][1] = matrix[i - 1][0] + arr[i]\\nres = matrix[-1]\\nstdout.write(str(max(res[0], res[1])) + '\\\\n')\\n\", \"n = int(input())\\nsize = int(10 ** 5)\\n(arr, dp) = ([0] * (size + 1), [0] * (size + 1))\\ntemp = [int(i) for i in input().split()]\\nfor i in temp:\\n\\tarr[i] += 1\\n(dp[1], dp[2]) = (arr[1], max(arr[1], 2 * arr[2]))\\nfor i in range(3, size + 1):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * arr[i])\\nprint(dp[size])\\n\", \"n = int(input())\\nlst = list(map(int, input().split()))\\nlst.sort()\\nw = [0] * 100005\\nfor i in lst:\\n\\tw[i] += 1\\nres = [0] * 100005\\nres[1] = w[1]\\nfor i in range(2, 100005):\\n\\tres[i] = max(res[i - 1], res[i - 2] + w[i] * i)\\nprint(max(*res))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = [0] * (100000 + 1)\\nans = 0\\nfor ele in a:\\n\\tb[ele] += 1\\nf = [0] * (100000 + 1)\\nf[1] = b[1]\\nfor i in range(2, 100000 + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * b[i])\\nprint(f[100000])\\n\", \"n = int(input())\\na = []\\neven = 0\\nodd = 0\\nmp = {}\\nx = []\\nx = list(map(int, input().strip().split()))\\nfor i in range(n):\\n\\tif x[i] not in mp.keys():\\n\\t\\tmp[x[i]] = 1\\n\\telse:\\n\\t\\tmp[x[i]] += 1\\nans = []\\nans.append(0)\\nn = 100005\\nfor i in range(1, n, 1):\\n\\tif i not in mp.keys():\\n\\t\\tmp[i] = 0\\n\\ttmp = mp[i] * i\\n\\tif i >= 2:\\n\\t\\ttmp += ans[i - 2]\\n\\tans.append(max(ans[i - 1], tmp))\\nprint(ans[n - 1])\\n\", \"import sys\\nimport math\\nfrom collections import defaultdict\\n\\ndef solve(test):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tfreq = defaultdict(int)\\n\\tfor i in range(n):\\n\\t\\tfreq[a[i]] += 1\\n\\tif len(freq) == 1:\\n\\t\\tprint(n * a[0])\\n\\t\\treturn\\n\\tmemo = [0] * (n + 1)\\n\\tmemo[1] = freq[1]\\n\\tfor i in range(2, n + 1):\\n\\t\\tmemo[i] = max(freq[i] * i + memo[i - 2], memo[i - 1])\\n\\tprint(memo[n])\\ntest_cases = 1\\nfor t in range(1, test_cases + 1):\\n\\tsolve(t)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nif len(set(a)) == 1:\\n\\tprint(a[0] * n)\\n\\texit(0)\\ncnt = {}\\ncnt[1] = 0\\nfor i in a:\\n\\tif cnt.get(i) == None:\\n\\t\\tcnt[i] = 0\\n\\tcnt[i] += 1\\ndp = []\\ndp.append(0)\\ndp.append(cnt[1])\\nfor i in range(2, n + 1):\\n\\tif cnt.get(i) == None:\\n\\t\\tcnt[i] = 0\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + cnt[i] * i))\\nprint(dp[n])\\n\", \"n = int(input())\\nnumbers = [int(x) for x in input().split()]\\nlim = 1000001\\ncounter = [0] * lim\\nfor i in numbers:\\n\\tcounter[i] += 1\\ndp = []\\ndp.append(counter[0])\\ndp.append(counter[1])\\nfor i in range(2, lim, 1):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + counter[i] * i))\\npontos = dp[lim - 1]\\nprint(pontos)\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nd = [0 for i in range(100001)]\\nfor x in arr:\\n\\td[x] = d[x] + 1\\ndp = [0 for _ in range(100001)]\\ndp[1] = d[1]\\nfor i in range(2, 100001):\\n\\tdp[i] = max(i * d[i] + dp[i - 2], dp[i - 1])\\nprint(dp[-1])\\n\", \"__author__ = 'Juan Barros'\\n\\ndef solve(n, a):\\n\\ttam = 10 ** 5 + 1\\n\\tvalues = [0 for i in range(tam)]\\n\\tfor element in a:\\n\\t\\tvalues[element] += 1\\n\\tresult = [0, values[1]]\\n\\tfor i in range(2, tam):\\n\\t\\tsoma = values[i] * i\\n\\t\\tresult.append(max(soma + result[i - 2], result[i - 1]))\\n\\treturn result[-1]\\nn = int(input())\\na = [int(element) for element in input().split(' ')]\\nprint(solve(n, a))\\n\", \"import sys\\nimport functools\\nsys.setrecursionlimit(1000)\\nn = int(sys.stdin.readline().strip())\\narr = [int(x) for x in sys.stdin.readline().strip().split()]\\nm = max(arr)\\ntemp = [0] * (m + 1)\\nfor i in arr:\\n\\ttemp[i] += 1\\nf_minus = temp[1]\\nf_minus2 = 0\\nf = f_minus\\nfor i in range(2, m + 1):\\n\\tf = max(f_minus, f_minus2 + temp[i] * i)\\n\\t(f_minus, f_minus2) = (f, f_minus)\\nprint(f)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nCount = [0] * 100001\\nfor i in l:\\n\\tCount[i] += 1\\nans = Count[1]\\nprea = Count[0]\\nfl = 2\\nfor i in Count[2:]:\\n\\tnans = max(ans, prea + i * fl)\\n\\tprea = ans\\n\\tans = nans\\n\\tfl += 1\\nprint(ans)\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\ninarr = [0] * 100001\\nfor i in arr:\\n\\tinarr[i] += 1\\nf = [0] * 100001\\nf[0] = 0\\nf[1] = inarr[1]\\nfor i in range(2, 100001):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * inarr[i])\\nprint(f[100000], end='')\\n\", \"n = int(input())\\ncnt = [0] * int(100000.0 + 1)\\nlisty = input().split()\\nlisty = [int(x) for x in listy]\\nfor x in listy:\\n\\tcnt[x] += 1\\nmemo = [0] * int(100000.0 + 1)\\nmemo[0] = 0\\nmemo[1] = cnt[1]\\nlast = max(listy)\\nfor item in range(2, last + 1):\\n\\tmemo[item] = max(memo[item - 1], memo[item - 2] + item * cnt[item])\\nprint(memo[last])\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nhist = [0 for i in range(max(arr) + 1)]\\nfor i in arr:\\n\\thist[i] += 1\\ndp = [[0, 0] for i in range(max(arr) + 1)]\\nfor i in range(1, max(arr) + 1):\\n\\tdp[i][0] = hist[i] * i + dp[i - 1][1]\\n\\tdp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\\nprint(max(dp[max(arr)][0], dp[max(arr)][1]))\\n\", \"def getInts():\\n\\treturn [int(s) for s in input().split()]\\n\\ndef getInt():\\n\\treturn int(input())\\n\\ndef getStrs():\\n\\treturn [s for s in input().split()]\\n\\ndef getStr():\\n\\treturn input()\\n\\ndef listStr():\\n\\treturn list(input())\\nimport collections as c\\n\\ndef solve():\\n\\tN = getInt()\\n\\tA = getInts()\\n\\tx = c.defaultdict(int)\\n\\tfor a in A:\\n\\t\\tx[a] += 1\\n\\tB = []\\n\\tfor item in x:\\n\\t\\tB.append((item, x[item]))\\n\\tB.sort(reverse=True)\\n\\tdp = []\\n\\t(x0, count0) = B.pop()\\n\\tdp.append(count0 * x0)\\n\\twhile B:\\n\\t\\t(x1, count1) = B.pop()\\n\\t\\tif x1 - x0 > 1:\\n\\t\\t\\tdp.append(dp[-1] + count1 * x1)\\n\\t\\telif len(dp) == 1:\\n\\t\\t\\tdp.append(max(count0 * x0, count1 * x1))\\n\\t\\telse:\\n\\t\\t\\tdp.append(max(dp[-1], dp[-2] + count1 * x1))\\n\\t\\t(x0, count0) = (x1, count1)\\n\\treturn dp[-1]\\nans = solve()\\nprint(ans)\\n\", \"from collections import defaultdict as dd\\nd = dd(lambda : 0)\\na = int(input())\\nl = list(map(int, input().split()))\\nfor i in l:\\n\\td[i] += 1\\nv = [0]\\nfor i in range(1, max(l) + 1):\\n\\tif i == 1:\\n\\t\\tv.append(d[1])\\n\\telse:\\n\\t\\tv.append(max(v[-1], v[-2] + d[i] * i))\\nprint(v[-1])\\n\", \"n = int(input())\\nl_n = list(map(int, input().split()))\\ndp = [0] * 10 ** 6\\nfor n_t in l_n:\\n\\tdp[n_t] += 1\\nfor i in range(2, 10 ** 6):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + dp[i] * i)\\nprint(dp[10 ** 6 - 1])\\n\", \"from collections import Counter\\n_ = input()\\nn = 10 ** 5\\na = Counter(map(int, input().split()))\\ndp = [0, a[1]]\\nfor i in range(2, n + 1):\\n\\tdp.append(max(dp[i - 1], dp[i - 2] + a[i] * i))\\nprint(dp[n])\\n\", \"n = int(input())\\ns = input()\\ns = s.split()\\ns = list(map(int, s))\\nf = [0 for i in range(100005)]\\nf[0] = 0\\ncnt = {}\\nfor i in range(100005):\\n\\tcnt[i] = 0\\nfor i in s:\\n\\tcnt[i] = cnt[i] + 1\\nf[1] = cnt[1]\\nMAX = max(s)\\nfor i in range(2, MAX + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * cnt[i])\\nprint(f[MAX])\\n\", \"n = int(input())\\nnums = list(map(int, input().strip().split()))\\ncount = [0] * 100010\\nfor num in nums:\\n\\tcount[num] += 1\\ndp = [0] * 100010\\ndp[1] = count[1]\\nfor i in range(2, len(count)):\\n\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])\\nprint(dp[100000])\\n\", \"n = int(input())\\nl = [[0 for x in range(2)] for y in range(100000 + 10)]\\np = list(map(int, input().split()))\\na = [0 for i in range(100000 + 10)]\\nfor x in p:\\n\\ta[x] += 1\\nfor i in range(1, 100000 + 1):\\n\\tl[i][0] = max(l[i - 1][1], l[i - 1][0])\\n\\tl[i][1] = l[i - 1][0] + i * a[i]\\nprint(max(l[100000][0], l[100000][1]))\\n\", \"n = int(input())\\nseq = input().split()\\nfor i in range(n):\\n\\tseq[i] = int(seq[i])\\na = min(seq)\\nb = max(seq)\\nnum = [0] * (b - a + 2)\\nfor i in range(n):\\n\\tnum[seq[i] - a] += 1\\nfor i in range(b - a + 1):\\n\\tnum[i] = num[i] * (i + a)\\ncheck = [num[0], max(num[0], num[1])]\\nfor i in range(b - a - 1):\\n\\tcheck += [max(check[len(check) - 1], check[len(check) - 2] + num[len(check)])]\\nprint(check[-1])\\n\", \"input()\\nl = list(map(int, input().split()))\\nans = [0] * (max(l) + 2)\\nfor i in l:\\n\\tans[i] += i\\npre = now = 0\\nfor j in ans:\\n\\t(pre, now) = (max(pre, now), pre + j)\\nprint(pre)\\n\", \"n = int(input())\\nnums = list(map(int, input().split()))\\nm = max(nums)\\nN = [0] * (m + 1)\\nS = [0] * (m + 1)\\nfor i in range(n):\\n\\tN[nums[i]] += nums[i]\\nS[0] = N[0]\\nS[1] = N[1]\\nfor i in range(1, m):\\n\\tS[i + 1] = max(N[i + 1] + S[i - 1], S[i])\\nprint(S[m])\\n\", \"limit = int(100000.0) + 7\\ncnt = [0 for _ in range(limit)]\\ndp = [0 for _ in range(limit)]\\nn = input()\\narr = list(map(int, input().split()))\\nfor i in arr:\\n\\tcnt[i] += 1\\ndp[1] = cnt[1]\\nfor k in range(2, limit):\\n\\tdp[k] = max(dp[k - 1], dp[k - 2] + cnt[k] * k)\\nprint(dp[-1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nrec = {}\\nfor i in a:\\n\\trec[i] = rec.get(i, 0) + 1\\nk = sorted(rec.keys()).copy()\\ndp = [[0, 0] for i in range(len(k))]\\ndp[0][1] = rec[k[0]] * k[0]\\nkLen = len(k)\\nfor i in range(1, kLen):\\n\\tdp[i][0] = max(dp[i - 1])\\n\\tif k[i] - k[i - 1] > 1:\\n\\t\\tdp[i][1] = rec[k[i]] * k[i] + max(dp[i - 1])\\n\\telse:\\n\\t\\tdp[i][1] = rec[k[i]] * k[i] + max(dp[i - 2] if i >= 2 else [0])\\nprint(max(dp[kLen - 1]))\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\ng = [0] * (max(l) + 1)\\nfor i in range(len(l)):\\n\\tg[l[i]] += 1\\nfor i in range(2, len(g)):\\n\\tleft_max = max(g[i - 1], g[i - 2] + g[i] * i)\\n\\tg[i] = left_max\\nprint(g[-1])\\n\", \"import sys\\n\\ndef readInput():\\n\\tnums = int(sys.stdin.readline())\\n\\tnumArray = sys.stdin.readline()\\n\\treturn (nums, numArray.split())\\n\\ndef makeHistogram(numArray, c):\\n\\tfor num in numArray:\\n\\t\\tnum = int(num)\\n\\t\\tc[num] += 1\\n\\treturn c\\n\\ndef main():\\n\\t(length, numArray) = readInput()\\n\\tMAX_N = 100001\\n\\tdp = MAX_N * [0]\\n\\tc = MAX_N * [0]\\n\\tc = makeHistogram(numArray, c)\\n\\tdp[0] = 0\\n\\tdp[1] = c[1]\\n\\tfor i in range(2, MAX_N):\\n\\t\\tdp[i] = max(dp[i - 1], dp[i - 2] + i * c[i])\\n\\tprint(dp[MAX_N - 1])\\nmain()\\n\", \"n = input()\\na = input().split()\\ncnt = []\\nf = []\\nm = 100000\\nfor i in range(m + 1):\\n\\tf.append(0)\\n\\tcnt.append(0)\\nfor i in a:\\n\\tcnt[int(i)] += 1\\nf[0] = 0\\nf[1] = cnt[1]\\nfor i in range(2, m + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + cnt[i] * i)\\nprint(f[m])\\n\", \"n = int(input())\\na = list(map(int, input().split(' ')))\\nfreq = {}\\nfor i in a:\\n\\tif i in freq.keys():\\n\\t\\tfreq[i] += 1\\n\\telse:\\n\\t\\tfreq[i] = 1\\na = set(a)\\na = list(a)\\na.sort()\\narr = [0]\\narr.append(a[0] * freq[a[0]])\\nfor i in range(1, len(a)):\\n\\tif a[i] - 1 == a[i - 1]:\\n\\t\\tarr.append(max(arr[i - 1] + a[i] * freq[a[i]], arr[i]))\\n\\telse:\\n\\t\\tarr.append(arr[i] + a[i] * freq[a[i]])\\nprint(max(arr))\\n\", \"n = int(input())\\ncnt = [0] * 100005\\nf = [0] * 100005\\nmx = 0\\nfor x in input().split():\\n\\tcnt[int(x)] += 1\\n\\tmx = max(mx, int(x))\\nf[1] = cnt[1]\\nfor i in range(2, mx + 1):\\n\\tf[i] = max(f[i - 1], f[i - 2] + i * cnt[i])\\nprint(f[mx])\\n\", \"n = input()\\ns = input().split(' ')\\ndic = {}\\nfor d in s:\\n\\tc = int(d)\\n\\tif c in dic.keys():\\n\\t\\tdic[c] = dic[c] + 1\\n\\telse:\\n\\t\\tdic[c] = 1\\nnumbers = []\\nfor c in dic.keys():\\n\\tnumbers.append((c, dic[c]))\\nnumbers = sorted(numbers, key=lambda d: d[0])\\nf = []\\ng = []\\nfor i in range(len(numbers)):\\n\\tf.append(0)\\n\\tg.append(0)\\nf[0] = numbers[0][0] * numbers[0][1]\\ng[0] = 0\\nfor i in range(1, len(numbers)):\\n\\tif numbers[i][0] == numbers[i - 1][0] + 1:\\n\\t\\tf[i] = g[i - 1] + numbers[i][0] * numbers[i][1]\\n\\t\\tg[i] = max(f[i - 1], g[i - 1])\\n\\telse:\\n\\t\\tf[i] = max(f[i - 1], g[i - 1]) + numbers[i][0] * numbers[i][1]\\n\\t\\tg[i] = max(f[i - 1], g[i - 1])\\nprint(max(f[len(numbers) - 1], g[len(numbers) - 1]))\\n\", \"def brute(arr):\\n\\tposs = []\\n\\tarr.sort(reverse=True)\\n\\n\\tdef dfs(arr, curr, path):\\n\\t\\tif len(arr) == 0:\\n\\t\\t\\tposs.append((curr, path))\\n\\t\\t\\treturn\\n\\t\\tfor (i, num) in enumerate(arr):\\n\\t\\t\\tnewArr = [x for (j, x) in enumerate(arr) if x not in [num - 1, num + 1] and j != i]\\n\\t\\t\\tdfs(newArr, curr + num, path + [(arr, num)])\\n\\tdfs(arr, 0, [])\\n\\t(maxScore, maxPath) = max(poss, key=lambda tup: tup[0])\\n\\treturn maxScore\\nfrom collections import Counter\\n\\ndef soln(arr):\\n\\tctr = Counter(arr)\\n\\tn = len(ctr)\\n\\tks = []\\n\\tfor i in range(10 ** 5, -1, -1):\\n\\t\\tif i in ctr:\\n\\t\\t\\tks.append(i)\\n\\tdp = [[0 for _ in range(2)] for _ in range(n)]\\n\\n\\tdef v(i):\\n\\t\\treturn ks[i] * ctr[ks[i]]\\n\\tfor i in range(n):\\n\\t\\tif i == 0:\\n\\t\\t\\tdp[i][0] = 0\\n\\t\\t\\tdp[i][1] = v(i)\\n\\t\\telse:\\n\\t\\t\\tdp[i][0] = max(dp[i - 1][1], dp[i - 1][0])\\n\\t\\t\\tif ks[i] == ks[i - 1] - 1:\\n\\t\\t\\t\\tdp[i][1] = max(dp[i - 1][0] + v(i), dp[i - 1][1])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp[i][1] = max(dp[i - 1][0] + v(i), dp[i - 1][1] + v(i))\\n\\tresult = max(dp[n - 1][0], dp[n - 1][1])\\n\\treturn result\\n\\ndef main():\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split(' ')]\\n\\tresult = soln(arr)\\n\\tprint(result)\\n\\ndef test():\\n\\timport random\\n\\tarr = list(range(1, 10 ** 5))\\n\\tprint(soln(arr))\\nmain()\\n\", \"big = 10 ** 5\\nn = int(input())\\narr = [int(x) for x in input().split()]\\nfreq = [0] * (big + 1)\\nfor i in arr:\\n\\tfreq[i] += 1\\ndp = {}\\nfor a in range(big + 1):\\n\\tif a == 0:\\n\\t\\tval = 0\\n\\telif a == 1:\\n\\t\\tval = freq[1]\\n\\telse:\\n\\t\\tval = max(dp[a - 1], dp[a - 2] + a * freq[a])\\n\\tdp[a] = val\\nprint(dp[big])\\n\", \"input()\\np = [0] * 100002\\ns = input().split()\\nfor k in s:\\n\\tp[int(k)] += 1\\nfor i in range(1, 100002):\\n\\tp[i] = max(p[i - 1], p[i - 2] + i * p[i])\\nprint(p[-1])\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\ns.sort()\\ndp = [0 for i in range(10 ** 5 + 5)]\\ndp1 = [0 for i in range(10 ** 5 + 5)]\\nd = dict()\\nfor i in s:\\n\\tdp1[i] += i\\ndp[1] = dp1[1]\\nfor i in range(2, len(dp)):\\n\\tdp[i] = max(dp[i - 2] + dp1[i], dp[i - 1])\\nprint(dp[-1])\\n\", \"import sys\\nimport math\\nfrom collections import defaultdict, Counter\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nn = int(input())\\na = list(map(int, input().split()))\\nc = Counter(a)\\ndp = [0] * (10 ** 5 + 2)\\nfor j in range(1, 10 ** 5 + 1):\\n\\tdp[j] = dp[j - 1]\\n\\tif c.get(j) != None:\\n\\t\\tdp[j] = max(dp[j], c[j] * j + dp[j - 2])\\nprint(dp[10 ** 5])\\n\", \"from collections import Counter\\nentrada = int(input())\\nentrada2 = list(map(int, input().split()))\\nf = Counter(entrada2)\\nmemo = {0: 0, 1: f[1]}\\nmaior = max(entrada2)\\nfor i in range(2, maior + 1):\\n\\tmemo[i] = max(memo[i - 1], memo[i - 2] + f[i] * i)\\nprint(memo[maior])\\n\", \"n = int(input())\\na = [int(x) for x in input().split(' ')]\\nc = [0] * (max(a) + 1)\\nfor i in a:\\n\\tc[i] += i\\nd = [0] * (max(a) + 1)\\nfor i in range(1, len(d)):\\n\\td[i] = max(d[i - 1], c[i] + d[i - 2])\\nprint(d[-1])\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"5\\n3 3 4 5 4\\n\", \"10\\n8 9 6 5 6 4 10 9 1 4\\n\", \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 4 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\", \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 7 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\", \"10\\n1 7 1 4 9 10 8 2 9 9\\n\", \"2\\n1 2\\n\\nSAMPLE\", \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 10 1 7 5 8 1 1 5 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\", \"10\\n10 5 8 9 5 6 8 7 2 8\\n\", \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 1 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\", \"5\\n5 3 5 3 4\\n\", \"100\\n2 10 9 1 2 6 7 2 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 5 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\", \"1\\n100000\\n\", \"100\\n5 6 10 7 1 7 10 1 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 2 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\", \"100\\n10 5 8 4 4 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 5 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\\n\", \"10\\n1 1 1 1 1 1 2 3 4 4\\n\", \"100\\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 8 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 2 5 2\\n\", \"100\\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 3 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 9\\n\", \"5\\n4 2 3 2 5\\n\", \"10\\n7 4 5 3 9 1 10 3 4 5\\n\", \"5\\n3 3 8 5 4\\n\", \"10\\n8 9 6 6 6 4 10 9 1 4\\n\", \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\", \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\", \"10\\n1 7 2 4 9 10 8 2 9 9\\n\", \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 14 1 7 5 8 1 1 5 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\", \"10\\n10 8 8 9 5 6 8 7 2 8\\n\", \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\", \"5\\n5 3 5 5 4\\n\", \"100\\n2 10 9 1 2 6 7 3 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 5 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\", \"100\\n5 6 10 7 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 2 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\", \"100\\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 5 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\\n\", \"10\\n1 1 1 1 1 1 2 3 0 4\\n\", \"5\\n8 2 3 2 5\\n\", \"9\\n1 2 1 3 2 4 2 2 3\\n\", \"5\\n3 3 11 5 4\\n\", \"10\\n8 9 6 6 6 4 10 9 1 8\\n\", \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\", \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\", \"10\\n1 7 2 4 9 10 8 3 9 9\\n\", \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 14 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\", \"10\\n10 8 11 9 5 6 8 7 2 8\\n\", \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 2 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\", \"5\\n5 3 3 5 4\\n\", \"100\\n2 10 9 1 2 6 7 3 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\", \"100\\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\\n\", \"10\\n1 1 1 1 1 1 2 3 1 4\\n\", \"100\\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 11\\n\", \"10\\n8 9 6 6 9 4 10 9 1 8\\n\", \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 4 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\", \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 14 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\", \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 14 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 3 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\", \"10\\n10 8 11 9 5 6 8 7 2 1\\n\", \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 18 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 2 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\", \"100\\n2 10 9 1 2 6 7 3 2 15 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\", \"100\\n5 6 10 7 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 12 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\", \"100\\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 11 5 1 5 6 9 4 5 6 5 10 2\\n\", \"10\\n1 1 1 1 1 1 3 3 1 4\\n\", \"100\\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 3 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 11\\n\", \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 4 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 14 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\", \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 24 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 3 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\", \"10\\n10 8 11 9 9 6 8 7 2 1\\n\", \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 18 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 3 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\", \"100\\n2 10 9 1 2 6 7 3 2 15 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 2 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\", \"100\\n5 6 10 10 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 12 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\", \"100\\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 2 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 3 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 11\\n\", \"5\\n10 2 3 1 9\\n\", \"10\\n7 9 6 6 17 4 10 9 1 8\\n\", \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 24 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 2 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 3 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\", \"10\\n10 8 11 9 9 6 8 7 0 1\\n\", \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 18 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 3 9 3 2 5 6 2 3 10 1 5 3 6 10 4 10 8\\n\", \"100\\n5 6 10 10 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 11 4 3 7 7 10 6 9 5 5 6 5 3 9 12 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\", \"100\\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 2 5 2\\n\", \"100\\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 9\\n\", \"100\\n5 6 10 7 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\", \"100\\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 4 5 2\\n\", \"5\\n8 2 3 1 5\\n\", \"9\\n1 2 1 3 2 4 1 2 3\\n\", \"5\\n2 3 11 5 4\\n\", \"10\\n2 7 2 4 9 10 8 3 9 9\\n\", \"5\\n5 3 3 4 4\\n\", \"100\\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 0 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 4 5 2\\n\", \"5\\n8 2 3 1 9\\n\", \"9\\n2 2 1 3 2 4 1 2 3\\n\", \"5\\n2 1 11 5 4\\n\", \"10\\n7 9 6 6 9 4 10 9 1 8\\n\", \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 1 6 4 10 9 1 4 1 7 1 4 9 10 4 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\", \"10\\n2 7 2 4 9 10 8 5 9 9\\n\", \"100\\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 2 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 11 5 1 5 6 9 4 5 6 5 10 2\\n\", \"10\\n2 1 1 1 1 1 3 3 1 4\\n\", \"100\\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 0 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 4 2 8 8 4 5 6 9 2 3 2 4 5 2\\n\", \"9\\n4 2 1 3 2 4 1 2 3\\n\", \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 1 5 8 9 6 1 6 4 10 9 1 4 1 7 1 4 9 10 4 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\", \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 4 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 14 7 4 10 2 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\", \"10\\n2 7 2 4 9 10 8 6 9 9\\n\", \"100\\n2 10 9 1 2 6 7 3 2 15 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 17 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 2 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\", \"100\\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 2 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 4 4 2 2 8 5 10 1 8 11 5 1 5 6 9 4 5 6 5 10 2\\n\", \"9\\n1 2 1 3 2 2 2 2 3\\n\", \"3\\n1 2 3\\n\", \"2\\n1 2\\n\"], \"outputs\": [\"11\\n\", \"39\\n\", \"296\\n\", \"328\\n\", \"40\\n\", \"2\\n\", \"313\\n\", \"46\\n\", \"380\\n\", \"16\\n\", \"312\\n\", \"100000\\n\", \"324\\n\", \"265\\n\", \"14\\n\", \"287\\n\", \"298\\n\", \"9\\n\", \"34\\n\", \"19\\n\", \"45\\n\", \"300\\n\", \"328\\n\", \"42\\n\", \"317\\n\", \"50\\n\", \"379\\n\", \"18\\n\", \"310\\n\", \"323\\n\", \"265\\n\", \"10\\n\", \"17\\n\", \"12\\n\", \"22\\n\", \"49\\n\", \"307\\n\", \"326\\n\", \"40\\n\", \"313\\n\", \"43\\n\", \"374\\n\", \"16\\n\", \"320\\n\", \"270\\n\", \"11\\n\", \"302\\n\", \"44\\n\", \"303\\n\", \"340\\n\", \"309\\n\", \"35\\n\", \"392\\n\", \"327\\n\", \"335\\n\", \"262\\n\", \"13\\n\", \"298\\n\", \"336\\n\", \"319\\n\", \"38\\n\", \"395\\n\", \"329\\n\", \"338\\n\", \"295\\n\", \"14\\n\", \"52\\n\", \"316\\n\", \"37\\n\", \"398\\n\", \"331\\n\", \"300\\n\", \"300\\n\", \"323\\n\", \"300\\n\", \"17\\n\", \"10\\n\", \"19\\n\", \"42\\n\", \"11\\n\", \"300\\n\", \"13\\n\", \"12\\n\", \"18\\n\", \"44\\n\", \"303\\n\", \"43\\n\", \"262\\n\", \"12\\n\", \"300\\n\", \"14\\n\", \"295\\n\", \"338\\n\", \"42\\n\", \"336\\n\", \"262\\n\", \"10\\n\", \"4\\n\", \"2\\n\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['dp']",
    "name": null,
    "source": "codeforces",
    "tags": "['Dynamic programming']",
    "skill_types": "['Dynamic programming']",
    "url": "https://codeforces.com/problemset/problem/456/C",
    "Expected Auxiliary Space": null,
    "time_limit": "1.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "Many computer strategy games require building cities, recruiting army, conquering tribes, collecting resources. Sometimes it leads to interesting problems. \n\nLet's suppose that your task is to build a square city. The world map uses the Cartesian coordinates. The sides of the city should be parallel to coordinate axes. The map contains mines with valuable resources, located at some points with integer coordinates. The sizes of mines are relatively small, i.e. they can be treated as points. The city should be built in such a way that all the mines are inside or on the border of the city square. \n\nBuilding a city takes large amount of money depending on the size of the city, so you have to build the city with the minimum area. Given the positions of the mines find the minimum possible area of the city.\n\n\n-----Input-----\n\nThe first line of the input contains number n — the number of mines on the map (2 ≤ n ≤ 1000). Each of the next n lines contains a pair of integers x_{i} and y_{i} — the coordinates of the corresponding mine ( - 10^9 ≤ x_{i}, y_{i} ≤ 10^9). All points are pairwise distinct.\n\n\n-----Output-----\n\nPrint the minimum area of the city that can cover all the mines with valuable resources.\n\n\n-----Examples-----\nInput\n2\n0 0\n2 2\n\nOutput\n4\n\nInput\n2\n0 0\n0 3\n\nOutput\n9",
    "solutions": "[\"n = int(input())\\nlis = []\\nfor i in range(n):\\n\\tlis.append(input().split())\\nfor i in range(n):\\n\\tfor j in range(2):\\n\\t\\tlis[i][j] = int(lis[i][j])\\nlis0 = []\\nlis1 = []\\nfor i in range(n):\\n\\tlis0.append(lis[i][0])\\n\\tlis1.append(lis[i][1])\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tm = max(max(lis0) - min(lis0), max(lis1) - min(lis1))\\n\\tprint(m ** 2)\\n\", \"from sys import *\\ninp = lambda : stdin.readline()\\nm = 10000000000.0\\n\\ndef main():\\n\\tn = int(inp())\\n\\t(px, nx, py, ny) = (-m, m, -m, m)\\n\\tfor i in range(n):\\n\\t\\t(a, b) = map(int, inp().split())\\n\\t\\t(px, nx, py, ny) = (max(px, a), min(nx, a), max(py, b), min(ny, b))\\n\\tprint(max(px - nx, py - ny) ** 2)\\nmain()\\n\", \"n = int(input())\\n(minx, miny, maxx, maxy) = (1000000000, 10000000000, -10000000000, -1000000000)\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tminx = min(minx, x)\\n\\tminy = min(miny, y)\\n\\tmaxx = max(maxx, x)\\n\\tmaxy = max(maxy, y)\\nsidex = maxx - minx\\nsidey = maxy - miny\\nans = max(sidex, sidey)\\nprint(ans * ans)\\n\", \"def shag(x, y, xmin, ymin):\\n\\t(a, b) = list(map(int, input().split()))\\n\\tx = max(a, x)\\n\\ty = max(b, y)\\n\\txmin = min(a, xmin)\\n\\tymin = min(b, ymin)\\n\\treturn (x, y, xmin, ymin)\\nk = int(input())\\n(x, y) = list(map(int, input().split()))\\nxmin = x\\nymin = y\\nfor i in range(1, k, 1):\\n\\t(x, y, xmin, ymin) = shag(x, y, xmin, ymin)\\nprint(pow(max(x - xmin, y - ymin), 2))\\n\", \"def main():\\n\\tn = int(input())\\n\\tmines = []\\n\\t(minx, miny, maxx, maxy) = (1000000000.0, 11000000000.0, -1000000000.0, -1000000000.0)\\n\\tfor _ in range(n):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\tminx = min(minx, x)\\n\\t\\tmaxx = max(maxx, x)\\n\\t\\tminy = min(miny, y)\\n\\t\\tmaxy = max(maxy, y)\\n\\tsidex = maxx - minx\\n\\tsidey = maxy - miny\\n\\tres = max(sidex, sidey) ** 2\\n\\tprint(res)\\nmain()\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor i in range(n):\\n\\t(a, b) = list(map(int, input().split()))\\n\\tx.append(a)\\n\\ty.append(b)\\nx.sort()\\ny.sort()\\nprint(max(x[-1] - x[0], y[-1] - y[0]) ** 2)\\n\", \"import sys\\ncasos = int(input())\\nminx = 1000000001\\nminy = 1000000001\\nmaxx = -1000000001\\nmaxy = -1000000001\\nfor i in range(casos):\\n\\tline = input()\\n\\tv = [int(x) for x in line.split()]\\n\\tminx = min(minx, v[0])\\n\\tminy = min(miny, v[1])\\n\\tmaxx = max(maxx, v[0])\\n\\tmaxy = max(maxy, v[1])\\nresp = max(maxx - minx, maxy - miny)\\nprint(resp * resp)\\n\", \"n = int(input())\\nmina = 10000000000.0\\nmaxa = -10000000000.0\\nminb = 10000000000.0\\nmaxb = -10000000000.0\\nfor _ in range(n):\\n\\t(a, b) = map(int, input().split())\\n\\tmina = min(mina, a)\\n\\tmaxa = max(maxa, a)\\n\\tminb = min(minb, b)\\n\\tmaxb = max(maxb, b)\\nresult = max(abs(maxa - mina), abs(maxb - minb))\\nprint(result * result)\\n\", \"for i in range(int(input())):\\n\\t(x, y) = map(int, input().split())\\n\\tif not i:\\n\\t\\ta = b = x\\n\\t\\tu = v = y\\n\\t(a, b) = (min(a, x), max(b, x))\\n\\t(u, v) = (min(u, y), max(v, y))\\nprint(max(b - a, v - u) ** 2)\\n\", \"n = int(input())\\nmaxx = maxy = -10 ** 10\\nminx = miny = 10 ** 10\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tif x > maxx:\\n\\t\\tmaxx = x\\n\\tif y > maxy:\\n\\t\\tmaxy = y\\n\\tif y < miny:\\n\\t\\tminy = y\\n\\tif x < minx:\\n\\t\\tminx = x\\nprint(max(maxx - minx, maxy - miny) ** 2)\\n\", \"(a, b) = ([], [])\\nfor _ in range(int(input())):\\n\\tl = list(map(int, input().split()))\\n\\ta.append(l[0])\\n\\tb.append(l[1])\\nprint(max(max(a) - min(a), max(b) - min(b)) ** 2)\\n\", \"ps = map(lambda _: tuple(map(int, str.split(input()))), range(int(input())))\\nlx = rx = ty = by = None\\nfoo = lambda v, cv, f: cv if v is None else f(v, cv)\\nfor (x, y) in ps:\\n\\tlx = foo(lx, x, min)\\n\\trx = foo(rx, x, max)\\n\\tby = foo(by, y, min)\\n\\tty = foo(ty, y, max)\\nprint(max(abs(lx - rx), abs(by - ty)) ** 2)\\n\", \"n = int(input())\\n(x1, y1) = map(int, input().split())\\n(x2, y2) = (x1, y1)\\nfor i in range(n - 1):\\n\\t(x, y) = map(int, input().split())\\n\\t(x1, x2) = (min(x1, x), max(x2, x))\\n\\t(y1, y2) = (min(y1, y), max(y2, y))\\nprint(max(x2 - x1, y2 - y1) ** 2)\\n\", \"n = int(input())\\n(N, M) = (10000000000, -10000000000)\\n(lx, rx, dy, uy) = (N, M, N, M)\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tlx = min(lx, x)\\n\\trx = max(rx, x)\\n\\tdy = min(dy, y)\\n\\tuy = max(uy, y)\\nt = max(rx - lx, uy - dy)\\nprint(t * t)\\n\", \"a1 = []\\na2 = []\\nx = int(input())\\nfor i in range(x):\\n\\t(a, b) = map(int, input().split(' '))\\n\\ta1.append(a)\\n\\ta2.append(b)\\nprint(max(max(a1) - min(a1), max(a2) - min(a2)) ** 2)\\n\", \"n = int(input())\\nminX = 1000000005\\nminY = minX\\nmaxX = -1000000005\\nmaxY = maxX\\nfor i in range(n):\\n\\t(t, t2) = map(int, input().split())\\n\\tminY = min(minY, t2)\\n\\tmaxY = max(maxY, t2)\\n\\tminX = min(minX, t)\\n\\tmaxX = max(maxX, t)\\nprint(max(maxX - minX, maxY - minY) ** 2)\\n\", \"n = int(input())\\na = d = 10 ** 10\\nb = c = -1 * 10 ** 10\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\ta = min(a, x)\\n\\tb = max(b, x)\\n\\tc = max(c, y)\\n\\td = min(d, y)\\nprint(max((b - a) ** 2, (c - d) ** 2))\\n\", \"n = int(input())\\nmin_x = 10 ** 9 + 1\\nmin_y = 10 ** 9 + 1\\nmax_x = -10 ** 9 - 1\\nmax_y = -10 ** 9 - 1\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tif x > max_x:\\n\\t\\tmax_x = x\\n\\tif x < min_x:\\n\\t\\tmin_x = x\\n\\tif y > max_y:\\n\\t\\tmax_y = y\\n\\tif y < min_y:\\n\\t\\tmin_y = y\\nprint(max(max_x - min_x, max_y - min_y) ** 2)\\n\", \"n = int(input())\\nmax_r = 0\\n(x, y) = map(int, input().split())\\nminX = x\\nmaxX = x\\nminY = y\\nmaxY = y\\nfor i in range(n - 1):\\n\\t(x, y) = map(int, input().split())\\n\\tminX = min(minX, x)\\n\\tmaxX = max(maxX, x)\\n\\tminY = min(minY, y)\\n\\tmaxY = max(maxY, y)\\nprint(max(maxX - minX, maxY - minY) ** 2)\\n\", \"n = int(input())\\n(dx, dy) = (0, 0)\\npoints = set()\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tfor (a, b) in points:\\n\\t\\tdx = max(dx, abs(x - a))\\n\\t\\tdy = max(dy, abs(y - b))\\n\\tpoints.add((x, y))\\nprint(max(dx, dy) ** 2)\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor i in range(n):\\n\\t(a, b) = list(map(int, input().rstrip().split()))\\n\\tx += [a]\\n\\ty += [b]\\nx1 = max(x) - min(x)\\ny1 = max(y) - min(y)\\ns = max(x1, y1)\\nprint(s * s)\\n\", \"n = int(input())\\nX = []\\nY = []\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tX.append(x)\\n\\tY.append(y)\\nX.sort()\\nY.sort()\\ns = max(X[n - 1] - X[0], Y[n - 1] - Y[0])\\nprint(s * s)\\n\", \"from fractions import gcd\\nfrom sys import stdin\\nlines = list([_f for _f in stdin.read().split('\\\\n') if _f])\\n\\ndef parseline(line):\\n\\treturn list(map(int, line.split()))\\nlines = list(map(parseline, lines))\\n(n,) = lines[0]\\nINF = 10 ** 9 + 1\\nmaxx = -INF\\nmaxy = -INF\\nminx = INF\\nminy = INF\\nfor (xi, yi) in lines[1:n + 1]:\\n\\tmaxx = max(maxx, xi)\\n\\tminx = min(minx, xi)\\n\\tmaxy = max(maxy, yi)\\n\\tminy = min(miny, yi)\\nprint(max(maxx - minx, maxy - miny) ** 2)\\n\", \"n = int(input())\\n(x, y) = ([], [])\\nfor i in range(n):\\n\\t(x1, y1) = input().split()\\n\\tx.append(int(x1))\\n\\ty.append(int(y1))\\nmaxx = max(x) - min(x)\\nmaxy = max(y) - min(y)\\nif maxy > maxx:\\n\\tprint(maxy * maxy)\\nelse:\\n\\tprint(maxx * maxx)\\n\", \"(x, y) = zip(*[map(int, input().split()) for i in range(int(input()))])\\nprint(max((max(i) - min(i) for i in [x, y])) ** 2)\\n\", \"n = int(input())\\nxa = []\\nya = []\\nfor _ in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\txa.append(x)\\n\\tya.append(y)\\nprint(max(max(xa) - min(xa), max(ya) - min(ya)) ** 2)\\n\", \"n = int(input())\\n(min_x, min_y) = (10 ** 10, 10 ** 10)\\n(max_x, max_y) = (-10 ** 10, -10 ** 10)\\nfor i in range(n):\\n\\tcoord = list(map(int, input().split()))\\n\\tif coord[0] < min_x:\\n\\t\\tmin_x = coord[0]\\n\\tif coord[0] > max_x:\\n\\t\\tmax_x = coord[0]\\n\\tif coord[1] < min_y:\\n\\t\\tmin_y = coord[1]\\n\\tif coord[1] > max_y:\\n\\t\\tmax_y = coord[1]\\nprint(max(max_x - min_x, max_y - min_y) ** 2)\\n\", \"n = int(input())\\n(l, r) = (10 ** 9, -10 ** 9)\\n(b, t) = (10 ** 9, -10 ** 9)\\nfor i in range(n):\\n\\t(x, y) = [int(x) for x in input().split()]\\n\\tl = min(x, l)\\n\\tr = max(x, r)\\n\\tb = min(y, b)\\n\\tt = max(y, t)\\nprint(max(r - l, t - b) ** 2)\\n\", \"import time, math, bisect, sys\\nfrom sys import stdin, stdout\\nfrom collections import deque\\nfrom fractions import Fraction\\nfrom collections import Counter\\npi = 3.141592653589793\\n\\ndef II():\\n\\treturn int(stdin.readline())\\n\\ndef IO():\\n\\treturn stdin.readline()\\n\\ndef IP():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef L():\\n\\treturn list(map(int, stdin.readline().split()))\\n\\ndef P(x):\\n\\treturn stdout.write(str(x) + '\\\\n')\\n\\ndef PI(x, y):\\n\\treturn stdout.write(str(x) + ' ' + str(y) + '\\\\n')\\n\\ndef lcm(a, b):\\n\\treturn a * b // gcd(a, b)\\n\\ndef gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\telif b == 0:\\n\\t\\treturn a\\n\\tif a > b:\\n\\t\\treturn gcd(a % b, b)\\n\\telse:\\n\\t\\treturn gcd(a, b % a)\\n\\ndef readTree():\\n\\tv = int(input())\\n\\tadj = [set() for i in range(v + 1)]\\n\\tfor i in range(v - 1):\\n\\t\\t(u1, u2) = In()\\n\\t\\tadj[u1].add(u2)\\n\\t\\tadj[u2].add(u1)\\n\\treturn (adj, v)\\n\\ndef bfs(adj, v):\\n\\tvisited = [False] * (v + 1)\\n\\tq = deque()\\n\\twhile q:\\n\\t\\tpass\\n\\ndef sieve():\\n\\tli = [True] * 1000001\\n\\t(li[0], li[1]) = (False, False)\\n\\tfor i in range(2, len(li), 1):\\n\\t\\tif li[i] == True:\\n\\t\\t\\tfor j in range(i * i, len(li), i):\\n\\t\\t\\t\\tli[j] = False\\n\\tprime = []\\n\\tfor i in range(1000001):\\n\\t\\tif li[i] == True:\\n\\t\\t\\tprime.append(i)\\n\\treturn prime\\n\\ndef setBit(n):\\n\\tcount = 0\\n\\twhile n != 0:\\n\\t\\tn = n & n - 1\\n\\t\\tcount += 1\\n\\treturn count\\n\\ndef solve():\\n\\tn = II()\\n\\tli = []\\n\\tfor i in range(n):\\n\\t\\tli.append(L())\\n\\tl1 = sorted(li, key=lambda x: x[0])\\n\\tl2 = sorted(li, key=lambda x: x[1])\\n\\tleft = abs(l1[0][0] - l1[-1][0])\\n\\tright = abs(l2[0][1] - l2[-1][1])\\n\\tprint(max(left, right) ** 2)\\nsolve()\\n\", \"n = int(input(''))\\na = []\\nb = []\\nfor i in range(n):\\n\\t(x, y) = input('').split()\\n\\ta.append(int(x))\\n\\tb.append(int(y))\\nmax = 0\\nfor i in range(n):\\n\\tfor j in range(i + 1, n):\\n\\t\\tif (a[i] - a[j]) ** 2 > max:\\n\\t\\t\\tmax = (a[i] - a[j]) ** 2\\n\\t\\t\\td = {'a': max}\\n\\t\\tif (b[i] - b[j]) ** 2 > max:\\n\\t\\t\\tmax = (b[i] - b[j]) ** 2\\n\\t\\t\\td = {'a': max}\\nprint(d['a'])\\n\", \"n = int(input())\\n(min_x, min_y, max_x, max_y) = (10 ** 9, 10 ** 9, -10 ** 9, -10 ** 9)\\nfor _ in range(n):\\n\\t(x, y) = (int(num) for num in input().split(' '))\\n\\t(min_x, min_y) = (min(x, min_x), min(y, min_y))\\n\\t(max_x, max_y) = (max(x, max_x), max(y, max_y))\\nprint(max(max_x - min_x, max_y - min_y) ** 2)\\n\", \"n = int(input())\\n(xpos, ypos) = ([], [])\\nfor x in range(n):\\n\\tstring = input()\\n\\tnumbers = string.split()\\n\\txpos.append(int(numbers[0]))\\n\\typos.append(int(numbers[1]))\\nprint(max(max(xpos) - min(xpos), max(ypos) - min(ypos)) ** 2)\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor i in range(n):\\n\\t(p, q) = list(map(int, input().split()))\\n\\tx.append(p)\\n\\ty.append(q)\\ndx = max(x) - min(x)\\ndy = max(y) - min(y)\\nprint(max(dx, dy) ** 2)\\n\", \"from __future__ import division, print_function\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\n\\ndef main():\\n\\tpass\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nn = int(input().rstrip())\\nmin_x = 10 ** 9 + 7\\nmax_x = -1 * (10 ** 9 + 7)\\nmin_y = 10 ** 9 + 7\\nmax_y = -1 * (10 ** 9 + 7)\\nfor _ in range(n):\\n\\t(x, y) = list(map(int, input().rstrip().split()))\\n\\tmin_x = min(min_x, x)\\n\\tmax_x = max(max_x, x)\\n\\tmin_y = min(min_y, y)\\n\\tmax_y = max(max_y, y)\\nm1 = max(max_x - min_x, max_y - min_y)\\nprint(m1 ** 2)\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor i in range(n):\\n\\t(x1, y1) = input().split()\\n\\tx1 = int(x1)\\n\\ty1 = int(y1)\\n\\tx.append(x1)\\n\\ty.append(y1)\\nmx = max(x)\\nmnx = min(x)\\nmy = max(y)\\nmny = min(y)\\nd1 = abs(mx - mnx)\\nd2 = abs(my - mny)\\nd3 = max(d1, d2)\\nprint(d3 * d3)\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor i in range(n):\\n\\t(xi, yi) = [int(i) for i in input().split()]\\n\\tx.append(xi)\\n\\ty.append(yi)\\na = max(max(y) - min(y), max(x) - min(x))\\nprint(a * a)\\n\", \"n = int(input())\\n(xl, yl) = map(int, input().split())\\n(xr, yr) = map(int, input().split())\\nif xl > xr:\\n\\t(xl, xr) = (xr, xl)\\nif yl > yr:\\n\\t(yl, yr) = (yr, yl)\\nfor i in range(n - 2):\\n\\t(x, y) = map(int, input().split())\\n\\txl = min(xl, x)\\n\\txr = max(xr, x)\\n\\tyl = min(yl, y)\\n\\tyr = max(yr, y)\\nprint(max(yr - yl, xr - xl) ** 2)\\n\", \"n = input()\\nn = int(n)\\nm = [input().split() for i in range(n)]\\nm0 = [int(m[i][0]) for i in range(n)]\\nm1 = [int(m[i][1]) for i in range(n)]\\nans = max(max(m0) - min(m0), max(m1) - min(m1))\\nprint(ans * ans)\\n\", \"n = int(input())\\nINF = 99 ** 9\\nx_l = INF\\nx_h = -INF\\ny_l = INF\\ny_h = -INF\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tx_l = min(x, x_l)\\n\\tx_h = max(x, x_h)\\n\\ty_l = min(y, y_l)\\n\\ty_h = max(y, y_h)\\nxx = x_h - x_l\\nyy = y_h - y_l\\nprint(max(xx, yy) ** 2)\\n\", \"import sys\\nimport math\\nn = int(sys.stdin.readline())\\nxmin = ymin = 1000000001\\nxmax = ymax = -1000000001\\nfor i in range(n):\\n\\t(x, y) = [int(x) for x in sys.stdin.readline().split()]\\n\\tif x > xmax:\\n\\t\\txmax = x\\n\\tif y > ymax:\\n\\t\\tymax = y\\n\\tif x < xmin:\\n\\t\\txmin = x\\n\\tif y < ymin:\\n\\t\\tymin = y\\nt = max(int(math.fabs(xmax - xmin)), int(math.fabs(ymax - ymin)))\\nprint(t ** 2)\\n\", \"number_of_mines = int(input())\\nx_coords = []\\ny_coords = []\\nfor _ in range(number_of_mines):\\n\\t(x, y) = (int(value) for value in input().split())\\n\\tx_coords.append(x)\\n\\ty_coords.append(y)\\nprint(max(abs(max(x_coords) - min(x_coords)), abs(max(y_coords) - min(y_coords))) ** 2)\\n\", \"n = int(input())\\ntmp = [int(i) for i in input().split()]\\nleft = tmp[0]\\nright = tmp[0]\\nup = tmp[1]\\ndown = tmp[1]\\nfor i in range(1, n):\\n\\ttmp = [int(i) for i in input().split()]\\n\\tif left > tmp[0]:\\n\\t\\tleft = tmp[0]\\n\\tif right < tmp[0]:\\n\\t\\tright = tmp[0]\\n\\tif up < tmp[1]:\\n\\t\\tup = tmp[1]\\n\\tif down > tmp[1]:\\n\\t\\tdown = tmp[1]\\nprint(pow(max(right - left, up - down), 2))\\n\", \"n = int(input())\\na = []\\nb = []\\nfor i in range(n):\\n\\t(x, y) = list(map(int, input().split()))\\n\\ta.append(x)\\n\\tb.append(y)\\ns = max(a) - min(a)\\nt = max(b) - min(b)\\nif s > t:\\n\\tprint(s * s)\\nelse:\\n\\tprint(t * t)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef I():\\n\\treturn input().strip()\\n\\ndef II():\\n\\treturn int(input().strip())\\n\\ndef LI():\\n\\treturn [*map(int, input().strip().split())]\\nimport copy, string, math, time, functools, random, fractions\\nfrom heapq import heappush, heappop, heapify\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import deque, defaultdict, Counter, OrderedDict\\nfrom operator import itemgetter\\nimport itertools\\nfor _ in range(1):\\n\\tn = II()\\n\\tz = 0\\n\\tl1 = []\\n\\tl2 = []\\n\\tfor i in range(n):\\n\\t\\t(x, y) = LI()\\n\\t\\tl1.append(x)\\n\\t\\tl2.append(y)\\n\\tprint(max(max(l1) - min(l1), max(l2) - min(l2)) ** 2)\\n\", \"n = int(input())\\n(X1, Y1, X2, Y2) = (10 ** 9 * 2, 10 ** 9 * 2, -10 ** 9 * 2, -10 ** 9 * 2)\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\t(X1, Y1, X2, Y2) = (min(X1, x), min(Y1, y), max(X2, x), max(Y2, y))\\nprint(max(X2 - X1, Y2 - Y1) ** 2)\\n\", \"import sys\\nsys.setrecursionlimit(10 ** 5 + 1)\\ninf = int(10 ** 20)\\nmax_val = inf\\nmin_val = -inf\\nRW = lambda : sys.stdin.readline().strip()\\nRI = lambda : int(RW())\\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\\nnb_mines = RI()\\n(x_coord, y_coord) = ([], [])\\nfor _ in range(nb_mines):\\n\\t(x, y) = RMI()\\n\\tx_coord.append(x)\\n\\ty_coord.append(y)\\ncandidate_x = max(x_coord) - min(x_coord)\\ncandidate_y = max(y_coord) - min(y_coord)\\nsides = max(candidate_x, candidate_y)\\nprint(sides ** 2)\\n\", \"n = int(input())\\n(l, r, u, d) = (int(10000000000.0), -int(10000000000.0), -int(10000000000.0), int(10000000000.0))\\nfor i in ' ' * n:\\n\\t(x, y) = map(int, input().split())\\n\\tl = min(l, y)\\n\\tr = max(y, r)\\n\\tu = max(u, x)\\n\\td = min(d, x)\\nprint(max((r - l) ** 2, (u - d) ** 2))\\n\", \"n = int(input())\\n(l, r, u, d) = (10 ** 10, -10 ** 10, 10 ** 10, -10 ** 10)\\nfor i in range(n):\\n\\t(a, b) = map(int, input().split())\\n\\tl = min(a, l)\\n\\tr = max(a, r)\\n\\tu = min(u, b)\\n\\td = max(d, b)\\nprint(max(d - u, r - l) ** 2)\\n\", \"n = int(input())\\nmx = 10000000000\\nmy = 10000000000\\nvx = -10000000000\\nvy = -10000000000\\nfor i in range(n):\\n\\t(a, b) = map(int, input().split())\\n\\tmx = min(mx, a)\\n\\tvx = max(vx, a)\\n\\tmy = min(my, b)\\n\\tvy = max(vy, b)\\nprint(max(vx - mx, vy - my) * max(vx - mx, vy - my))\\n\", \"import sys\\nn = int(sys.stdin.readline())\\nmx = -1234567890\\nmy = -1234567890\\nnx = 1234567890\\nny = 1234567890\\nfor i in range(n):\\n\\t(x, y) = map(int, sys.stdin.readline().split())\\n\\tmx = max(mx, x)\\n\\tmy = max(my, y)\\n\\tnx = min(nx, x)\\n\\tny = min(ny, y)\\nprint(max(mx - nx, my - ny) ** 2)\\n\", \"def splIn():\\n\\treturn list(map(int, input().split()))\\n\\ndef zz1dif(z, z2):\\n\\tif z >= 0:\\n\\t\\treturn z2 - z\\n\\telif z2 <= 0:\\n\\t\\treturn abs(z) - abs(z2)\\n\\telse:\\n\\t\\treturn abs(z) + abs(z2)\\nn = int(input())\\nfirstxy = splIn()\\nxmin = firstxy[0]\\nxmax = firstxy[0]\\nymin = firstxy[1]\\nymax = firstxy[1]\\nfor i in range(n - 1):\\n\\txy = splIn()\\n\\tif xy[0] > xmax:\\n\\t\\txmax = xy[0]\\n\\tif xy[0] < xmin:\\n\\t\\txmin = xy[0]\\n\\tif xy[1] > ymax:\\n\\t\\tymax = xy[1]\\n\\tif xy[1] < ymin:\\n\\t\\tymin = xy[1]\\nz1 = zz1dif(xmin, xmax)\\nz2 = zz1dif(ymin, ymax)\\nmaxSize = max(z1, z2)\\nresult = maxSize * maxSize\\nprint(result)\\n\", \"def STR():\\n\\treturn list(input())\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef MAP2():\\n\\treturn map(float, input().split())\\n\\ndef LIST():\\n\\treturn list(map(int, input().split()))\\n\\ndef STRING():\\n\\treturn input()\\nimport string\\nimport sys\\nfrom heapq import heappop, heappush\\nfrom bisect import *\\nfrom collections import deque, Counter, defaultdict\\nfrom math import *\\nfrom itertools import permutations, accumulate\\ndx = [-1, 1, 0, 0]\\ndy = [0, 0, 1, -1]\\nn = INT()\\nl1 = []\\nl2 = []\\nfor i in range(n):\\n\\t(x, y) = MAP()\\n\\tl1.append(x)\\n\\tl2.append(y)\\nminx = min(l1)\\nminy = min(l2)\\nmaxx = max(l1)\\nmaxy = max(l2)\\nk = max(maxx - minx, maxy - miny)\\nprint(k ** 2)\\n\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef intArr():\\n\\treturn map(int, input().split())\\n\\ndef In():\\n\\treturn int(input())\\n\\ndef main():\\n\\tn = In()\\n\\tx = [0] * n\\n\\ty = [0] * n\\n\\tfor i in range(n):\\n\\t\\t(x[i], y[i]) = intArr()\\n\\tprint(pow(max(max(x) - min(x), max(y) - min(y)), 2))\\nmain()\\n\", \"n = int(input())\\n(x, y) = input().split(' ')\\n(x, y) = (int(x), int(y))\\nmin_y = y\\nmax_y = y\\nmin_x = x\\nmax_x = x\\nfor x in range(n - 1):\\n\\t(x, y) = input().split(' ')\\n\\t(x, y) = (int(x), int(y))\\n\\tif x > max_x:\\n\\t\\tmax_x = x\\n\\tif x < min_x:\\n\\t\\tmin_x = x\\n\\tif y > max_y:\\n\\t\\tmax_y = y\\n\\tif y < min_y:\\n\\t\\tmin_y = y\\nprint(max(max_y - min_y, max_x - min_x) ** 2)\\n\", \"import array\\n\\ndef solution():\\n\\tsize = int(input())\\n\\tintervals = array_to_int(input().split(' '))\\n\\tminx = intervals[0]\\n\\tmaxx = intervals[0]\\n\\tminy = intervals[1]\\n\\tmaxy = intervals[1]\\n\\tfor i in range(size - 1):\\n\\t\\tintervals = array_to_int(input().split(' '))\\n\\t\\tif intervals[0] > maxx:\\n\\t\\t\\tmaxx = intervals[0]\\n\\t\\telif intervals[0] < minx:\\n\\t\\t\\tminx = intervals[0]\\n\\t\\tif intervals[1] > maxy:\\n\\t\\t\\tmaxy = intervals[1]\\n\\t\\telif intervals[1] < miny:\\n\\t\\t\\tminy = intervals[1]\\n\\ta = maxx - minx\\n\\tb = maxy - miny\\n\\tif a == 0:\\n\\t\\tprint(b ** 2)\\n\\telif b == 0:\\n\\t\\tprint(a ** 2)\\n\\telse:\\n\\t\\tif a > b:\\n\\t\\t\\tb = a\\n\\t\\telif b > a:\\n\\t\\t\\ta = b\\n\\t\\tprint(a * b)\\n\\ndef count_of_one(number):\\n\\tresult = 0\\n\\twhile number:\\n\\t\\tresult += number % 2\\n\\t\\tnumber //= 2\\n\\treturn result\\n\\ndef to_mixed_frac(first, second):\\n\\twhile True:\\n\\t\\tfor i in range(2, first + 1):\\n\\t\\t\\tif first % i == 0 and second % i == 0:\\n\\t\\t\\t\\tfirst //= i\\n\\t\\t\\t\\tsecond //= i\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\treturn str(first) + '/' + str(second)\\n\\ndef array_to_int(array):\\n\\tfor i in range(len(array)):\\n\\t\\tarray[i] = int(array[i])\\n\\treturn array\\n\\ndef join0(array):\\n\\tresult = ''\\n\\tfor i in array:\\n\\t\\tresult += str(i)\\n\\treturn result\\n\\ndef replace(string, new_ch, index):\\n\\tnew_str = ''\\n\\tfor i in range(len(string)):\\n\\t\\tif i == index:\\n\\t\\t\\tnew_str += new_ch\\n\\t\\telse:\\n\\t\\t\\tnew_str += string[i]\\n\\treturn new_str\\nsolution()\\n\", \"(a, b) = ([], [])\\nfor i in range(int(input())):\\n\\t(x, y) = input().split()\\n\\ta.append(int(x))\\n\\tb.append(int(y))\\nprint(max(max(a) - min(a), max(b) - min(b)) ** 2)\\n\", \"a = int(input())\\n(l, r, u, d) = (int(10000000000.0), -int(10000000000.0), -int(10000000000.0), int(10000000000.0))\\nfor _ in ' ' * a:\\n\\t(x, y) = map(int, input().split())\\n\\tl = min(l, y)\\n\\tr = max(y, r)\\n\\tu = max(u, x)\\n\\td = min(d, x)\\nprint(max((r - l) ** 2, (u - d) ** 2))\\n\", \"mode = 'filee'\\nif mode == 'file':\\n\\tf = open('test.txt', 'r')\\ng = []\\nh = []\\nif mode == 'file':\\n\\tn = int(f.readline())\\nelse:\\n\\tn = int(input())\\nfor z in range(n):\\n\\tif mode == 'file':\\n\\t\\t[x, y] = [int(x) for x in f.readline().split()]\\n\\telse:\\n\\t\\t[x, y] = [int(x) for x in input().split()]\\n\\tg.append(x)\\n\\th.append(y)\\nprint(max(max(g) - min(g), max(h) - min(h)) ** 2)\\nif mode == 'file':\\n\\tf.close()\\n\", \"a = int(input(''))\\nXlistOfCoordinates = []\\nYlistOfCoordinates = []\\nfor value in range(a):\\n\\ty = input('').split(' ')\\n\\tXlistOfCoordinates.append(int(y[0]))\\n\\tYlistOfCoordinates.append(int(y[1]))\\nprint(max(max(XlistOfCoordinates) - min(XlistOfCoordinates), max(YlistOfCoordinates) - min(YlistOfCoordinates)) ** 2)\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor _ in range(n):\\n\\t(a, b) = map(int, input().split())\\n\\tx.append(a)\\n\\ty.append(b)\\nx.sort()\\ny.sort()\\ncnt = max(x[-1] - x[0], y[-1] - y[0])\\nprint(cnt * cnt)\\n\", \"def main():\\n\\tn = int(input())\\n\\t(xs, ys) = ([], [])\\n\\tfor _ in range(n):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\txs.append(x)\\n\\t\\tys.append(y)\\n\\tprint(max(max(xs) - min(xs), max(ys) - min(ys)) ** 2)\\nmain()\\n\", \"def main():\\n\\tn = int(input())\\n\\t(lx, ly) = ([], [])\\n\\tfor _ in range(n):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\tlx.append(x)\\n\\t\\tly.append(y)\\n\\tprint(max((max(l) - min(l) for l in (lx, ly))) ** 2)\\nmain()\\n\", \"max_x = max_y = 0\\nmin_x = min_y = 10 ** 9\\nxs = []\\nys = []\\nfor i in range(int(input())):\\n\\t(x, y) = map(int, input().split())\\n\\txs.append(x)\\n\\tys.append(y)\\nprint(max(max(xs) - min(xs), max(ys) - min(ys)) ** 2)\\n\", \"def solve(ps):\\n\\treturn max(max(ps, key=lambda x: x[0])[0] - min(ps, key=lambda x: x[0])[0], max(ps, key=lambda x: x[1])[1] - min(ps, key=lambda x: x[1])[1]) ** 2\\nn = int(input())\\nps = [list(map(int, input().split())) for i in range(n)]\\nprint(solve(ps))\\n\", \"n = int(input())\\nX = []\\nY = []\\nfor i in range(n):\\n\\t(x, y) = input().split()\\n\\tX.append(int(x))\\n\\tY.append(int(y))\\nmaxx = max(X)\\nmaxy = max(Y)\\nminx = min(X)\\nminy = min(Y)\\nx1 = abs(maxx - minx)\\ny1 = abs(maxy - miny)\\nprint(max(x1, y1) ** 2)\\n\", \"from copy import copy\\nn = int(input())\\nox = []\\noy = []\\nxmax = -10000000000000000000\\nxmin = 10 ** 10\\nymax = -1000000000000000000\\nymin = 10 ** 10\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tif x > xmax:\\n\\t\\txmax = copy(x)\\n\\tif x < xmin:\\n\\t\\txmin = copy(x)\\n\\tif y > ymax:\\n\\t\\tymax = copy(y)\\n\\tif y < ymin:\\n\\t\\tymin = copy(y)\\ndx = xmax - xmin\\ndy = ymax - ymin\\na = max(dy, dx)\\nprint(a ** 2)\\n\", \"from __future__ import division, print_function\\nfrom io import BytesIO, IOBase\\nimport os, sys, math, heapq, copy\\nfrom collections import defaultdict, deque\\nfrom bisect import bisect_left, bisect_right\\nfrom functools import cmp_to_key\\nfrom itertools import permutations, combinations, combinations_with_replacement\\nif sys.version_info[0] < 3:\\n\\tfrom __builtin__ import xrange as range\\n\\tfrom future_builtins import ascii, filter, hex, map, oct, zip\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n\\ndef print(*args, **kwargs):\\n\\t(sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\\n\\tat_start = True\\n\\tfor x in args:\\n\\t\\tif not at_start:\\n\\t\\t\\tfile.write(sep)\\n\\t\\tfile.write(str(x))\\n\\t\\tat_start = False\\n\\tfile.write(kwargs.pop('end', '\\\\n'))\\n\\tif kwargs.pop('flush', False):\\n\\t\\tfile.flush()\\nif sys.version_info[0] < 3:\\n\\t(sys.stdin, sys.stdout) = (FastIO(sys.stdin), FastIO(sys.stdout))\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmod = 1000000007\\n\\ndef get_int():\\n\\treturn int(sys.stdin.readline().strip())\\n\\ndef get_str():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef get_float():\\n\\treturn float(sys.stdin.readline().strip())\\n\\ndef get_ints():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef get_strs():\\n\\treturn map(str, sys.stdin.readline().strip().split())\\n\\ndef get_floats():\\n\\treturn map(float, sys.stdin.readline().strip().split())\\n\\ndef list_ints():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef list_strs():\\n\\treturn list(map(str, sys.stdin.readline().strip().split()))\\n\\ndef list_floats():\\n\\treturn list(map(float, sys.stdin.readline().strip().split()))\\nn = get_int()\\nsr = sc = math.inf\\ner = ec = -math.inf\\nfor i in range(n):\\n\\t(x, y) = get_ints()\\n\\tsr = min(sr, x)\\n\\tsc = min(sc, y)\\n\\ter = max(er, x)\\n\\tec = max(ec, y)\\nlength = max(er - sr, ec - sc)\\nprint(length * length)\\n\", \"def main():\\n\\tcount = int(input())\\n\\t(x1, y1) = map(int, input().split())\\n\\t(x2, y2) = (x1, y1)\\n\\tfor i in range(count - 1):\\n\\t\\t(x, y) = map(int, input().split())\\n\\t\\tx1 = min(x1, x)\\n\\t\\tx2 = max(x2, x)\\n\\t\\ty1 = min(y1, y)\\n\\t\\ty2 = max(y2, y)\\n\\tdx = abs(x1 - x2)\\n\\tdy = abs(y1 - y2)\\n\\tdm = max(dx, dy)\\n\\treturn dm ** 2\\nprint(main())\\n\", \"n = int(input())\\n(px, py) = ([], [])\\nfor i in range(n):\\n\\t(x, y) = list(map(int, input().split()))\\n\\tpx.append(x)\\n\\tpy.append(y)\\nprint(max(max(px) - min(px), max(py) - min(py)) ** 2)\\n\", \"n = int(input())\\nminX = 10 ** 10\\nmaxX = -10 ** 10\\nminY = 10 ** 10\\nmaxY = -10 ** 10\\nfor i in range(n):\\n\\tmine = list(map(int, input().split()))\\n\\tminX = min(mine[0], minX)\\n\\tmaxX = max(mine[0], maxX)\\n\\tminY = min(mine[1], minY)\\n\\tmaxY = max(mine[1], maxY)\\nprint(max(maxX - minX, maxY - minY) ** 2)\\n\", \"n = int(input())\\nxx = []\\nyy = []\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\txx.append(x)\\n\\tyy.append(y)\\ndx = max(xx) - min(xx)\\ndy = max(yy) - min(yy)\\nprint(max(dx, dy) ** 2)\\n\", \"minx = 10 ** 10\\nmaxx = -10 ** 10\\nminy = 10 ** 10\\nmaxy = -10 ** 10\\nn = int(input())\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tminx = min(minx, x)\\n\\tmaxx = max(maxx, x)\\n\\tminy = min(miny, y)\\n\\tmaxy = max(maxy, y)\\na = max(maxx - minx, maxy - miny)\\nprint(a * a)\\n\", \"n = int(input())\\nx = [0] * n\\ny = [0] * n\\nfor i in range(n):\\n\\t(x[i], y[i]) = map(int, input().split())\\nx.sort()\\ny.sort()\\nres = max(x[-1] - x[0], y[-1] - y[0]) ** 2\\nprint(res)\\n\", \"def precious(lst1, lst2):\\n\\t(l1, l2) = (sorted(lst1), sorted(lst2))\\n\\treturn max(l1[len(l1) - 1] - l1[0], l2[len(lst2) - 1] - l2[0]) * max(l1[len(l1) - 1] - l1[0], l2[len(lst2) - 1] - l2[0])\\nn = int(input())\\n(a, b) = (list(), list())\\nfor i in range(n):\\n\\t(s, t) = [int(j) for j in input().split()]\\n\\ta.append(s)\\n\\tb.append(t)\\nprint(precious(a, b))\\n\", \"n = int(input())\\n(x, y) = ([], [])\\nfor j in range(n):\\n\\t(xj, yj) = [int(j) for j in input().split()]\\n\\tx.append(xj)\\n\\ty.append(yj)\\nx_min = x[0]\\ny_min = y[0]\\nx_max = x[0]\\ny_max = y[0]\\nfor j in range(1, n):\\n\\tx_min = min(x_min, x[j])\\n\\ty_min = min(y_min, y[j])\\n\\tx_max = max(x_max, x[j])\\n\\ty_max = max(y_max, y[j])\\nl = x_max - x_min\\nr = y_max - y_min\\nprint(max(l, r) ** 2)\\n\", \"n = int(input())\\n(pointx, pointy) = ([], [])\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tpointx.append(x)\\n\\tpointy.append(y)\\nans = max(max(pointx) - min(pointx), max(pointy) - min(pointy))\\nprint(ans * ans)\\n\", \"n = int(input())\\np = []\\ns = []\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tp.append(x)\\n\\ts.append(y)\\np.sort()\\ns.sort()\\np = p[-1] - p[0]\\ns = s[-1] - s[0]\\nprint(max(p, s) ** 2)\\n\", \"import traceback\\nimport math\\nfrom collections import defaultdict\\nfrom functools import lru_cache\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef geti():\\n\\treturn int(input())\\n\\ndef gets():\\n\\treturn input()\\n\\ndef getil():\\n\\treturn list(map(int, input().split()))\\n\\ndef getsl():\\n\\treturn input().split()\\n\\ndef get2d(nrows, ncols, n=0):\\n\\treturn [[n] * ncols for r in range(nrows)]\\ninf = float('inf')\\nmod = 10 ** 9 + 7\\n\\ndef main():\\n\\tN = geti()\\n\\t(a, b) = ([], [])\\n\\tfor _ in range(N):\\n\\t\\t(x, y) = getil()\\n\\t\\ta.append(x)\\n\\t\\tb.append(y)\\n\\tlx = max(a) - min(a)\\n\\tly = max(b) - min(b)\\n\\treturn max(lx, ly) ** 2\\ntry:\\n\\tans = main()\\n\\tprint(ans)\\nexcept Exception as e:\\n\\ttraceback.print_exc()\\n\", \"n = int(input())\\nX = []\\nY = []\\nfor i in range(n):\\n\\t(x, y) = [int(s) for s in input().split()]\\n\\tX.append(x)\\n\\tY.append(y)\\nheight = max(Y) - min(Y)\\nwidth = max(X) - min(X)\\nprint(max(height, width) ** 2)\\n\", \"n = int(input())\\n(x, y) = map(int, input().split())\\nxmin = x\\nxmax = x\\nymin = y\\nymax = y\\nfor i in range(n - 1):\\n\\t(x, y) = map(int, input().split())\\n\\txmin = min(xmin, x)\\n\\txmax = max(xmax, x)\\n\\tymin = min(ymin, y)\\n\\tymax = max(ymax, y)\\nprint(max(ymax - ymin, xmax - xmin) ** 2)\\n\", \"a = int(input())\\n(x, y) = map(int, input().split())\\nminx = x\\nmaxx = x\\nminy = y\\nmaxy = y\\nfor i in range(a - 1):\\n\\t(x, y) = map(int, input().split())\\n\\tminx = min(minx, x)\\n\\tmaxx = max(maxx, x)\\n\\tminy = min(miny, y)\\n\\tmaxy = max(maxy, y)\\nprint(max(maxx - minx, maxy - miny) ** 2)\\n\", \"mx = -10 ** 10\\nmix = 10 ** 10\\nmy = mx\\nmiy = mix\\nfor _ in range(int(input())):\\n\\t(a, b) = map(int, input().split())\\n\\tmx = max(mx, a)\\n\\tmix = min(mix, a)\\n\\tmy = max(my, b)\\n\\tmiy = min(miy, b)\\nans = max(mx - mix, my - miy)\\nprint(ans * ans)\\n\", \"n = int(input())\\npaling_kanan = -1000000000\\npaling_kiri = 1000000000\\npaling_atas = -1000000000\\npaling_bawah = 1000000000\\nsisi_x = 0\\nsisi_y = 0\\nsisi_kota = 1\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tpaling_kiri = min(paling_kiri, x)\\n\\tpaling_kanan = max(paling_kanan, x)\\n\\tpaling_atas = max(paling_atas, y)\\n\\tpaling_bawah = min(paling_bawah, y)\\n\\tsisi_x = paling_kanan - paling_kiri\\n\\tsisi_y = paling_atas - paling_bawah\\nif sisi_x >= sisi_y:\\n\\tsisi_kota = sisi_x\\nelse:\\n\\tsisi_kota = sisi_y\\nluas_minimal = sisi_kota ** 2\\nprint(luas_minimal)\\n\", \"lim = 10 ** 9\\nn = int(input())\\n(lx, rx, dy, uy) = (lim, -lim, lim, -lim)\\nfor _ in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\tlx = min(lx, x)\\n\\trx = max(rx, x)\\n\\tdy = min(dy, y)\\n\\tuy = max(uy, y)\\nprint(max(uy - dy, rx - lx) ** 2)\\n\", \"n = int(input())\\nxs = []\\nys = []\\nfor i in range(n):\\n\\t(x, y) = map(int, input().split())\\n\\txs.append(x)\\n\\tys.append(y)\\nprint(max(max(xs) - min(xs), max(ys) - min(ys)) ** 2)\\n\", \"n = int(input())\\nl = []\\nmix = 1000000000\\nmiy = 1000000000\\nmax = -1000000000\\nmay = -1000000000\\nfor i in range(n):\\n\\tl.append(list(map(int, input().split())))\\n\\tif l[i][0] < mix:\\n\\t\\tmix = l[i][0]\\n\\tif l[i][0] > max:\\n\\t\\tmax = l[i][0]\\n\\tif l[i][1] < miy:\\n\\t\\tmiy = l[i][1]\\n\\tif l[i][1] > may:\\n\\t\\tmay = l[i][1]\\nif abs(max - mix) > abs(may - miy):\\n\\tprint((max - mix) ** 2)\\nelse:\\n\\tprint((may - miy) ** 2)\\n\", \"n = int(input())\\nx = []\\ny = []\\nfor i in range(n):\\n\\t(p, q) = map(int, input().split())\\n\\tx += [p]\\n\\ty += [q]\\nl = max(x) - min(x)\\nw = max(y) - min(y)\\nprint(max(l, w) ** 2)\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"2\\n0 0\\n2 2\\n\", \"2\\n0 0\\n0 3\\n\", \"2\\n0 1\\n1 0\\n\", \"3\\n2 2\\n1 1\\n3 3\\n\", \"3\\n3 1\\n1 3\\n2 2\\n\", \"3\\n0 1\\n1 0\\n2 2\\n\", \"2\\n-1000000000 -1000000000\\n1000000000 1000000000\\n\", \"2\\n1000000000 -1000000000\\n-1000000000 1000000000\\n\", \"5\\n-851545463 -208880322\\n-154983867 -781305244\\n293363100 785256340\\n833468900 -593065920\\n-920692803 -637662144\\n\", \"10\\n-260530833 169589238\\n-681955770 -35391010\\n223450511 24504262\\n479795061 -26191863\\n-291344265 21153856\\n714700263 -328447419\\n-858655942 161086142\\n-270884153 462537328\\n-501424901 977460517\\n115284904 -151626824\\n\", \"10\\n917139470 819990899\\n-69828590 691215072\\n-846815289 112372447\\n560780737 -890423729\\n243241705 284240970\\n-47397355 -263709479\\n759162072 709456353\\n-330469400 -597545533\\n436509256 728506920\\n133368867 668789238\\n\", \"10\\n-200157522 -824574736\\n299208799 -287211553\\n-160170880 148363130\\n103709327 245344406\\n482860382 547328085\\n895537733 -545816336\\n671947380 910981768\\n-43209851 585461399\\n-573679087 427675821\\n151452830 27262384\\n\", \"2\\n-2 -2\\n-3 -3\\n\", \"2\\n-1000 -1000\\n-1100 -1100\\n\", \"2\\n-5 -5\\n-4 -4\\n\", \"2\\n-10 0\\n-9 0\\n\", \"2\\n-10 -10\\n-20 -20\\n\", \"2\\n-1000000 -1000000\\n-100 -100\\n\", \"2\\n100000000 100000000\\n200000000 200000000\\n\", \"2\\n-10 10\\n-2 3\\n\", \"2\\n-999999999 -999999999\\n-999999991 -999999991\\n\", \"2\\n-1000 -1000\\n-999 -999\\n\", \"2\\n-3 0\\n-5 0\\n\", \"2\\n999999999 999999999\\n999999991 999999991\\n\", \"2\\n100000012 100000012\\n100000012 100000013\\n\", \"2\\n-10 0\\n-9 0\\n\", \"3\\n2 2\\n1 1\\n3 3\\n\", \"10\\n-200157522 -824574736\\n299208799 -287211553\\n-160170880 148363130\\n103709327 245344406\\n482860382 547328085\\n895537733 -545816336\\n671947380 910981768\\n-43209851 585461399\\n-573679087 427675821\\n151452830 27262384\\n\", \"2\\n999999999 999999999\\n999999991 999999991\\n\", \"2\\n-10 -10\\n-20 -20\\n\", \"3\\n3 1\\n1 3\\n2 2\\n\", \"2\\n-1000000 -1000000\\n-100 -100\\n\", \"10\\n-260530833 169589238\\n-681955770 -35391010\\n223450511 24504262\\n479795061 -26191863\\n-291344265 21153856\\n714700263 -328447419\\n-858655942 161086142\\n-270884153 462537328\\n-501424901 977460517\\n115284904 -151626824\\n\", \"2\\n-10 10\\n-2 3\\n\", \"2\\n100000000 100000000\\n200000000 200000000\\n\", \"2\\n-3 0\\n-5 0\\n\", \"3\\n0 1\\n1 0\\n2 2\\n\", \"2\\n100000012 100000012\\n100000012 100000013\\n\", \"2\\n-999999999 -999999999\\n-999999991 -999999991\\n\", \"10\\n917139470 819990899\\n-69828590 691215072\\n-846815289 112372447\\n560780737 -890423729\\n243241705 284240970\\n-47397355 -263709479\\n759162072 709456353\\n-330469400 -597545533\\n436509256 728506920\\n133368867 668789238\\n\", \"2\\n-5 -5\\n-4 -4\\n\", \"2\\n1000000000 -1000000000\\n-1000000000 1000000000\\n\", \"2\\n0 1\\n1 0\\n\", \"2\\n-2 -2\\n-3 -3\\n\", \"2\\n-1000 -1000\\n-1100 -1100\\n\", \"5\\n-851545463 -208880322\\n-154983867 -781305244\\n293363100 785256340\\n833468900 -593065920\\n-920692803 -637662144\\n\", \"2\\n-1000 -1000\\n-999 -999\\n\", \"2\\n-1000000000 -1000000000\\n1000000000 1000000000\\n\", \"2\\n-10 -1\\n-9 0\\n\", \"3\\n2 0\\n1 1\\n3 3\\n\", \"10\\n-200157522 -824574736\\n299208799 -287211553\\n-160170880 148363130\\n103709327 245344406\\n482860382 547328085\\n895537733 -545816336\\n671947380 910981768\\n-43209851 739825929\\n-573679087 427675821\\n151452830 27262384\\n\", \"2\\n994662029 999999999\\n999999991 999999991\\n\", \"2\\n-20 -10\\n-20 -20\\n\", \"3\\n3 1\\n1 5\\n2 2\\n\", \"2\\n-1000000 -834066\\n-100 -100\\n\", \"10\\n-260530833 169589238\\n-681955770 -35391010\\n223450511 24504262\\n479795061 -26191863\\n-291344265 21153856\\n714700263 -328447419\\n-858655942 161086142\\n-28022052 462537328\\n-501424901 977460517\\n115284904 -151626824\\n\", \"2\\n-10 10\\n-1 3\\n\", \"2\\n100000000 100000000\\n200000000 373795199\\n\", \"2\\n-3 0\\n-5 1\\n\", \"2\\n100000012 41383818\\n100000012 100000013\\n\", \"2\\n-999999999 -1207754096\\n-999999991 -999999991\\n\", \"10\\n917139470 819990899\\n-69828590 691215072\\n-846815289 112372447\\n560780737 -890423729\\n243241705 88988104\\n-47397355 -263709479\\n759162072 709456353\\n-330469400 -597545533\\n436509256 728506920\\n133368867 668789238\\n\", \"2\\n1000000000 -1000000000\\n-547109091 1000000000\\n\", \"2\\n-1560 -1000\\n-1100 -1100\\n\", \"5\\n-851545463 -208880322\\n-250057695 -781305244\\n293363100 785256340\\n833468900 -593065920\\n-920692803 -637662144\\n\", \"2\\n-1000 -1000\\n-1722 -999\\n\", \"2\\n994662029 999999999\\n999999991 391167147\\n\", \"2\\n-1000000 -834066\\n-70 -100\\n\", \"2\\n-10 15\\n-1 3\\n\", \"2\\n100000000 100000000\\n200000000 746413624\\n\", \"2\\n183102467 41383818\\n100000012 100000013\\n\", \"2\\n-1560 -1000\\n-1100 -1745\\n\", \"2\\n-1000 -1000\\n-136 -999\\n\", \"2\\n0 0\\n2 8\\n\", \"2\\n994662029 999999999\\n999999991 132263377\\n\", \"3\\n3 1\\n1 6\\n1 2\\n\", \"2\\n-1000000 -834066\\n-6 -100\\n\", \"2\\n100000000 100000100\\n200000000 746413624\\n\", \"2\\n183102467 41383818\\n100000012 131351911\\n\", \"2\\n1000100000 -1000000000\\n-547109091 1000100000\\n\", \"2\\n-1560 -404\\n-1100 -1745\\n\", \"2\\n0 0\\n2 11\\n\", \"2\\n994662029 1458353701\\n999999991 132263377\\n\", \"2\\n-1000000 -1009972\\n-6 -100\\n\", \"2\\n-13 28\\n-1 3\\n\", \"2\\n183102467 23606262\\n100000012 131351911\\n\", \"2\\n1000100000 -1000000000\\n-547109091 1000100100\\n\", \"2\\n0 0\\n2 14\\n\", \"2\\n-2 -1\\n-9 0\\n\", \"2\\n994662029 1458353701\\n999999991 62826881\\n\", \"2\\n-20 -19\\n-20 0\\n\", \"2\\n-1000000 -1177481\\n-6 -100\\n\", \"2\\n-13 28\\n-1 6\\n\", \"2\\n-524 -404\\n-1100 -89\\n\", \"2\\n-1000 -373\\n-232 -231\\n\", \"3\\n0 1\\n1 0\\n1 2\\n\", \"2\\n-5 -5\\n-1 -4\\n\", \"2\\n0 1\\n1 -1\\n\", \"2\\n-4 -2\\n-3 -3\\n\", \"2\\n0 0\\n2 4\\n\", \"2\\n0 0\\n0 1\\n\", \"2\\n-5 -1\\n-9 0\\n\", \"3\\n2 1\\n1 1\\n3 3\\n\", \"10\\n-200157522 -824574736\\n230410207 -287211553\\n-160170880 148363130\\n103709327 245344406\\n482860382 547328085\\n895537733 -545816336\\n671947380 910981768\\n-43209851 739825929\\n-573679087 427675821\\n151452830 27262384\\n\", \"2\\n-20 -10\\n-20 -1\\n\", \"3\\n3 1\\n1 5\\n1 2\\n\", \"10\\n-260530833 169589238\\n-681955770 -35391010\\n119880722 24504262\\n479795061 -26191863\\n-291344265 21153856\\n714700263 -328447419\\n-858655942 161086142\\n-28022052 462537328\\n-501424901 977460517\\n115284904 -151626824\\n\", \"2\\n-3 -1\\n-5 1\\n\", \"3\\n0 0\\n1 0\\n1 2\\n\", \"2\\n-1 -5\\n-1 -4\\n\", \"2\\n1000100000 -1000000000\\n-547109091 1000000000\\n\", \"2\\n0 1\\n0 -1\\n\", \"2\\n-7 -2\\n-3 -3\\n\", \"5\\n-851545463 -208880322\\n-263476052 -781305244\\n293363100 785256340\\n833468900 -593065920\\n-920692803 -637662144\\n\", \"2\\n-7 -1\\n-9 0\\n\", \"3\\n2 1\\n1 1\\n3 1\\n\", \"10\\n-200157522 -824574736\\n230410207 -287211553\\n-160170880 148363130\\n103709327 245344406\\n482860382 547328085\\n895537733 -545816336\\n671947380 910981768\\n-43209851 739825929\\n-619784527 427675821\\n151452830 27262384\\n\", \"2\\n-20 -10\\n-20 -2\\n\", \"10\\n-260530833 169589238\\n-681955770 -35391010\\n119880722 37346119\\n479795061 -26191863\\n-291344265 21153856\\n714700263 -328447419\\n-858655942 161086142\\n-28022052 462537328\\n-501424901 977460517\\n115284904 -151626824\\n\", \"2\\n-13 15\\n-1 3\\n\", \"2\\n-3 -1\\n-6 1\\n\", \"3\\n0 0\\n1 -1\\n1 2\\n\", \"2\\n-2 -5\\n-1 -4\\n\", \"2\\n-1 1\\n0 -1\\n\", \"2\\n-7 -3\\n-3 -3\\n\", \"5\\n-851545463 -208880322\\n-263476052 -109224731\\n293363100 785256340\\n833468900 -593065920\\n-920692803 -637662144\\n\", \"2\\n-1000 -1000\\n-136 -231\\n\", \"2\\n-4 -1\\n-9 0\\n\", \"3\\n2 1\\n1 1\\n3 2\\n\", \"10\\n-200157522 -824574736\\n230410207 -287211553\\n-160170880 148363130\\n103709327 245344406\\n482860382 547328085\\n895537733 -611642977\\n671947380 910981768\\n-43209851 739825929\\n-619784527 427675821\\n151452830 27262384\\n\", \"2\\n-20 -10\\n-20 0\\n\", \"3\\n3 1\\n1 9\\n1 2\\n\", \"2\\n100000000 100000100\\n176004199 746413624\\n\", \"2\\n-3 0\\n-6 1\\n\", \"3\\n0 0\\n1 -1\\n2 2\\n\", \"2\\n-2 -5\\n-1 -8\\n\", \"2\\n-1 1\\n0 -2\\n\", \"2\\n-14 -3\\n-3 -3\\n\", \"2\\n-524 -404\\n-1100 -1745\\n\", \"5\\n-851545463 -208880322\\n-263476052 -109224731\\n70747652 785256340\\n833468900 -593065920\\n-920692803 -637662144\\n\", \"2\\n-1000 -373\\n-136 -231\\n\", \"3\\n2 1\\n1 2\\n3 2\\n\", \"10\\n-200157522 -824574736\\n230410207 -287211553\\n-160170880 148363130\\n103709327 387733865\\n482860382 547328085\\n895537733 -611642977\\n671947380 910981768\\n-43209851 739825929\\n-619784527 427675821\\n151452830 27262384\\n\", \"3\\n3 0\\n1 9\\n1 2\\n\", \"2\\n100000100 100000100\\n176004199 746413624\\n\", \"2\\n-3 -1\\n-6 2\\n\", \"3\\n0 0\\n1 -2\\n2 2\\n\", \"2\\n183102467 23606262\\n127183426 131351911\\n\", \"2\\n0 0\\n2 2\\n\", \"2\\n0 0\\n0 3\\n\"], \"outputs\": [\"4\\n\", \"9\\n\", \"1\\n\", \"4\\n\", \"4\\n\", \"4\\n\", \"4000000000000000000\\n\", \"4000000000000000000\\n\", \"3077083280271860209\\n\", \"2475449747812002025\\n\", \"3111536391798748081\\n\", \"3012156378576702016\\n\", \"1\\n\", \"10000\\n\", \"1\\n\", \"1\\n\", \"100\\n\", \"999800010000\\n\", \"10000000000000000\\n\", \"64\\n\", \"64\\n\", \"1\\n\", \"4\\n\", \"64\\n\", \"1\\n\", \"1\\n\", \"4\\n\", \"3012156378576702016\\n\", \"64\\n\", \"100\\n\", \"4\\n\", \"999800010000\\n\", \"2475449747812002025\\n\", \"64\\n\", \"10000000000000000\\n\", \"4\\n\", \"4\\n\", \"1\\n\", \"64\\n\", \"3111536391798748081\\n\", \"1\\n\", \"4000000000000000000\\n\", \"1\\n\", \"1\\n\", \"10000\\n\", \"3077083280271860209\\n\", \"1\\n\", \"4000000000000000000\\n\", \"1\\n\", \"9\\n\", \"3012156378576702016\\n\", \"28493838313444\\n\", \"100\\n\", \"16\\n\", \"999800010000\\n\", \"2475449747812002025\\n\", \"81\\n\", \"74963810995449601\\n\", \"4\\n\", \"3435858316278025\\n\", \"43161768144351025\\n\", \"3111536391798748081\\n\", \"4000000000000000000\\n\", \"211600\\n\", \"3077083280271860209\\n\", \"521284\\n\", \"370677441674453904\\n\", \"999860004900\\n\", \"144\\n\", \"417850573292813376\\n\", \"6906018027027025\\n\", \"555025\\n\", \"746496\\n\", \"64\\n\", \"752966845159970884\\n\", \"25\\n\", \"999988000036\\n\", \"417850444010098576\\n\", \"8094257758056649\\n\", \"4000400010000000000\\n\", \"1798281\\n\", \"121\\n\", \"1758515547406424976\\n\", \"1019841456384\\n\", \"625\\n\", \"11609124878431201\\n\", \"4000400410020010000\\n\", \"196\\n\", \"49\\n\", \"1947495105339312400\\n\", \"361\\n\", \"1386226019161\\n\", \"484\\n\", \"331776\\n\", \"589824\\n\", \"4\\n\", \"16\\n\", \"4\\n\", \"1\\n\", \"16\\n\", \"1\\n\", \"16\\n\", \"4\\n\", \"3012156378576702016\\n\", \"81\\n\", \"16\\n\", \"2475449747812002025\\n\", \"4\\n\", \"4\\n\", \"1\\n\", \"4000000000000000000\\n\", \"4\\n\", \"16\\n\", \"3077083280271860209\\n\", \"4\\n\", \"4\\n\", \"3012156378576702016\\n\", \"64\\n\", \"2475449747812002025\\n\", \"144\\n\", \"9\\n\", \"9\\n\", \"1\\n\", \"4\\n\", \"16\\n\", \"3077083280271860209\\n\", \"746496\\n\", \"25\\n\", \"4\\n\", \"3012156378576702016\\n\", \"100\\n\", \"64\\n\", \"417850444010098576\\n\", \"9\\n\", \"9\\n\", \"9\\n\", \"9\\n\", \"121\\n\", \"1798281\\n\", \"3077083280271860209\\n\", \"746496\\n\", \"4\\n\", \"3012156378576702016\\n\", \"81\\n\", \"417850444010098576\\n\", \"9\\n\", \"16\\n\", \"11609124878431201\\n\", \"4\\n\", \"9\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['brute force', 'greedy']",
    "name": null,
    "source": "codeforces",
    "tags": "['Complete search', 'Greedy algorithms']",
    "skill_types": "['Complete search', 'Greedy algorithms']",
    "url": "https://codeforces.com/problemset/problem/485/B",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": "2019-12-31",
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "You have an array $a$ of length $n$. For every positive integer $x$ you are going to perform the following operation during the $x$-th second:\n\n  Select some distinct indices $i_{1}, i_{2}, \\ldots, i_{k}$ which are between $1$ and $n$ inclusive, and add $2^{x-1}$ to each corresponding position of $a$. Formally, $a_{i_{j}} := a_{i_{j}} + 2^{x-1}$ for $j = 1, 2, \\ldots, k$. Note that you are allowed to not select any indices at all. \n\nYou have to make $a$ nondecreasing as fast as possible. Find the smallest number $T$ such that you can make the array nondecreasing after at most $T$ seconds.\n\nArray $a$ is nondecreasing if and only if $a_{1} \\le a_{2} \\le \\ldots \\le a_{n}$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases.\n\nThe first line of each test case contains single integer $n$ ($1 \\le n \\le 10^{5}$) — the length of array $a$. It is guaranteed that the sum of values of $n$ over all test cases in the input does not exceed $10^{5}$.\n\nThe second line of each test case contains $n$ integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($-10^{9} \\le a_{i} \\le 10^{9}$).\n\n\n-----Output-----\n\nFor each test case, print the minimum number of seconds in which you can make $a$ nondecreasing.\n\n\n-----Example-----\nInput\n3\n4\n1 7 6 5\n5\n1 2 3 4 5\n2\n0 -4\n\nOutput\n2\n0\n3\n\n\n\n-----Note-----\n\nIn the first test case, if you select indices $3, 4$ at the $1$-st second and $4$ at the $2$-nd second, then $a$ will become $[1, 7, 7, 8]$. There are some other possible ways to make $a$ nondecreasing in $2$ seconds, but you can't do it faster.\n\nIn the second test case, $a$ is already nondecreasing, so answer is $0$.\n\nIn the third test case, if you do nothing at first $2$ seconds and select index $2$ at the $3$-rd second, $a$ will become $[0, 0]$.",
    "solutions": "[\"import sys\\nimport math\\n\\ndef answer(n, a):\\n\\tcurr_step = 0\\n\\tif n == 1:\\n\\t\\treturn 0\\n\\tmx = a[0]\\n\\tmxd = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] > mx:\\n\\t\\t\\tmx = a[i]\\n\\t\\td = mx - a[i]\\n\\t\\tif d > mxd:\\n\\t\\t\\tnsf0 = math.floor(math.log2(d)) + 1\\n\\t\\t\\tmxd = 2 ** nsf0 - 1\\n\\treturn int(math.log2(mxd + 1))\\n\\ndef main():\\n\\tt = int(sys.stdin.readline())\\n\\twhile t:\\n\\t\\tn = int(sys.stdin.readline())\\n\\t\\ta = tuple(map(int, sys.stdin.readline().split()))\\n\\t\\tprint(answer(n, a))\\n\\t\\tt -= 1\\n\\treturn\\nmain()\\n\", \"m = int(input())\\nfor j in range(m):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmax_ = a[0]\\n\\tmaxdif = 0\\n\\tfor x in a:\\n\\t\\tif max_ - x > maxdif:\\n\\t\\t\\tmaxdif = max_ - x\\n\\t\\tif x > max_:\\n\\t\\t\\tmax_ = x\\n\\ti = 0\\n\\twhile maxdif > 0:\\n\\t\\tmaxdif //= 2\\n\\t\\ti += 1\\n\\tprint(i)\\n\", \"import math\\nelem = int(input())\\nfor i in range(elem):\\n\\tnum = int(input())\\n\\tar = []\\n\\tfor i in input().split(' '):\\n\\t\\tar.append(int(i))\\n\\tcurr = 0\\n\\tfor i in range(len(ar) - 1):\\n\\t\\tif ar[i] > ar[i + 1]:\\n\\t\\t\\ttemp = ar[i] - ar[i + 1]\\n\\t\\t\\tar[i + 1] = ar[i]\\n\\t\\t\\tcurr = max(curr, temp)\\n\\tprint(math.ceil(math.log(curr + 1, 2)))\\n\", \"import math\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmaxi = a[0]\\n\\tfin = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] > maxi:\\n\\t\\t\\tmaxi = a[i]\\n\\t\\telif maxi - a[i] > fin:\\n\\t\\t\\tfin = maxi - a[i]\\n\\tif fin <= 2:\\n\\t\\tprint(fin)\\n\\telse:\\n\\t\\tprint(int(math.log(fin, 2)) + 1)\\n\", \"from math import log2\\nt = int(input())\\nfor _ in range(0, t):\\n\\tn = int(input())\\n\\taa = [int(i) for i in input().split()]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif aa[i - 1] > aa[i]:\\n\\t\\t\\tans = max(ans, int(log2(aa[i - 1] - aa[i])) + 1)\\n\\t\\t\\taa[i] = aa[i - 1]\\n\\tprint(ans)\\n\", \"import math\\n\\ndef helper(diff):\\n\\ttime = math.ceil(math.log2(diff + 1))\\n\\treturn time\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tres = 0\\n\\tfor i in range(1, n):\\n\\t\\tif arr[i - 1] > arr[i]:\\n\\t\\t\\tx = helper(arr[i - 1] - arr[i])\\n\\t\\t\\tres = max(res, x)\\n\\t\\t\\tarr[i] = arr[i - 1]\\n\\tprint(res)\\n\", \"import math\\n\\ndef solve(x):\\n\\treturn math.floor(math.log2(x))\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split(' ')))\\n\\ttime = -1\\n\\tfor i in range(1, n):\\n\\t\\tif arr[i] < arr[i - 1]:\\n\\t\\t\\tx = arr[i - 1] - arr[i]\\n\\t\\t\\tarr[i] = arr[i - 1]\\n\\t\\t\\tcnt = solve(x)\\n\\t\\t\\tif cnt > time:\\n\\t\\t\\t\\ttime = cnt\\n\\tprint(time + 1)\\n\", \"from collections import Counter\\nfrom math import *\\nimport sys\\nimport bisect as bs\\nfrom math import *\\nmod = 1000000007\\n\\ndef check(n):\\n\\tc = 0\\n\\twhile n > 0:\\n\\t\\tn = n - (1 << c)\\n\\t\\tc += 1\\n\\treturn c\\n\\ndef pro(arr):\\n\\tn = len(arr)\\n\\tmaxi = arr[0]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif maxi <= arr[i]:\\n\\t\\t\\tmaxi = max(maxi, arr[i])\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\treq = maxi - arr[i]\\n\\t\\t\\tach = check(req)\\n\\t\\t\\tans = max(ans, ach)\\n\\tprint(ans)\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tpro(arr)\\n\", \"def solve(lst):\\n\\tif len(lst) == 1:\\n\\t\\treturn -1\\n\\tmaximum = lst[0]\\n\\tmaximum_abs = 0\\n\\tflag = True\\n\\tfor i in range(len(lst) - 1):\\n\\t\\tif lst[i] > lst[i + 1]:\\n\\t\\t\\tflag = False\\n\\t\\tif maximum < lst[i]:\\n\\t\\t\\tmaximum = lst[i]\\n\\t\\tif maximum_abs < abs(maximum - lst[i]):\\n\\t\\t\\tmaximum_abs = abs(maximum - lst[i])\\n\\ti = len(lst) - 1\\n\\tif maximum < lst[i]:\\n\\t\\tmaximum = lst[i]\\n\\tif maximum_abs < abs(maximum - lst[i]):\\n\\t\\tmaximum_abs = abs(maximum - lst[i])\\n\\tif flag:\\n\\t\\treturn -1\\n\\treturn maximum_abs\\n\\ndef find_answer(num):\\n\\tanswer = 0\\n\\twhile num != 0:\\n\\t\\tnum = num // 2\\n\\t\\tanswer += 1\\n\\treturn answer\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tif solve(a) == -1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(find_answer(solve(a)))\\n\", \"def solve(arr):\\n\\tdiff = 0\\n\\tstart = arr[0]\\n\\ti = 1\\n\\twhile i < len(arr):\\n\\t\\tif arr[i] > start:\\n\\t\\t\\tstart = arr[i]\\n\\t\\telse:\\n\\t\\t\\tdiff = max(diff, start - arr[i])\\n\\t\\ti += 1\\n\\tif diff == 0:\\n\\t\\treturn 0\\n\\treturn len(format(diff, 'b'))\\nt = int(input())\\nans = []\\nfor s in range(t):\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tans.append(solve(arr))\\nfor it in ans:\\n\\tprint(it)\\n\", \"def solve():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tc = a[0]\\n\\tg = 0\\n\\tfor x in a:\\n\\t\\tif c < x:\\n\\t\\t\\tc = x\\n\\t\\telse:\\n\\t\\t\\tg = max(g, c - x)\\n\\treturn g.bit_length()\\nt = int(input())\\nfor _ in range(t):\\n\\tprint(solve())\\n\", \"I = input\\nfor _ in range(int(I())):\\n\\tI()\\n\\tm = -1000000000.0\\n\\tl = 0\\n\\tfor x in map(int, I().split()):\\n\\t\\tm = max(m, x)\\n\\t\\tl = max(l, m - x)\\n\\tprint(l and len(f'{l:b}'))\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\nt = inp()\\nfor c in range(0, t):\\n\\ta = inp()\\n\\tla = inlt()\\n\\tld = []\\n\\tm = -1000000000000\\n\\tfor d in range(0, a):\\n\\t\\tm = max(m, la[d])\\n\\t\\tld.append(la[d] - m)\\n\\tif min(ld) == 0:\\n\\t\\tprint('0')\\n\\telse:\\n\\t\\tprint(str(math.ceil(math.log2(abs(min(ld)) + 1))))\\n\", \"from math import log2, sqrt\\nR = lambda : map(int, input().split(' '))\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\tarr = R()\\n\\t\\tmax_diff = 0\\n\\t\\tprev = next(arr)\\n\\t\\tmax_num = prev\\n\\t\\tfor i in arr:\\n\\t\\t\\tif max_num < i:\\n\\t\\t\\t\\tmax_num = i\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmax_diff = max(max_diff, max_num - i)\\n\\t\\tif max_diff == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(len(bin(max_diff)) - 2)\\nmain()\\n\", \"import sys\\nimport math as m\\n\\ndef calculateT(argList):\\n\\tvalue = argList[0]\\n\\tmaxValue = 0\\n\\tfor i in range(1, len(argList)):\\n\\t\\tmaxValue = max(maxValue, value - argList[i])\\n\\t\\tvalue = max(value, argList[i])\\n\\tif maxValue == 0:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\treturn int(m.log(maxValue, 2)) + 1\\n\\ndef main():\\n\\tcounter = 0\\n\\tt = 0\\n\\tn = 0\\n\\ta = []\\n\\tfor input in sys.stdin:\\n\\t\\tcounter += 1\\n\\t\\tif counter == 1:\\n\\t\\t\\tt = int(input)\\n\\t\\telif counter % 2 == 0:\\n\\t\\t\\tn = int(input)\\n\\t\\telse:\\n\\t\\t\\ta = [int(m) for m in input.split()]\\n\\t\\t\\tprint(calculateT(a))\\nmain()\\n\", \"for i in range(int(input())):\\n\\tinput()\\n\\tmax_num = float('-inf')\\n\\tmax_diff = 0\\n\\tfor j in map(int, input().split()):\\n\\t\\tif j > max_num:\\n\\t\\t\\tmax_num = j\\n\\t\\telse:\\n\\t\\t\\tmax_diff = max(max_diff, max_num - j)\\n\\tif max_diff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(bin(max_diff)) - 2)\\n\", \"from math import *\\nfrom bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom collections import Counter as ctr\\nfrom collections import deque as dq\\nfrom array import array\\nfrom re import search\\nli = lambda : list(map(int, input().split()))\\narr = lambda a: array('i', a)\\nbi = lambda n: bin(n).replace('0b', '')\\nyn = lambda f: print('NYOE S'[f::2])\\nsbstr = lambda a, s: search('.*'.join(a), s)\\n\\ndef solve():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\ta = li()\\n\\t\\ts = 0\\n\\t\\tm = a[0]\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif a[i] < m:\\n\\t\\t\\t\\tsr = m - a[i]\\n\\t\\t\\t\\ta[i] = m\\n\\t\\t\\t\\tif sr > 2 ** s - 1:\\n\\t\\t\\t\\t\\ts = ceil(log(sr + 1, 2))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tm = a[i]\\n\\t\\tprint(s)\\nsolve()\\n\", \"import math\\n\\ndef poweredAddition(n, arr):\\n\\tused = [-1]\\n\\tdiffs = []\\n\\tans = 0\\n\\tfor i in range(1, len(arr)):\\n\\t\\tif arr[i] < arr[i - 1]:\\n\\t\\t\\tans = max(ans, int(1 + math.log2(arr[i - 1] - arr[i])))\\n\\t\\t\\tarr[i] = arr[i - 1]\\n\\treturn ans\\nnumCases = int(input())\\ncases = []\\nfor i in range(numCases):\\n\\tn = int(input())\\n\\tvals = [int(x) for x in input().split(' ')]\\n\\tcases.append([n, vals])\\nfor k in cases:\\n\\tanswer = poweredAddition(k[0], k[1])\\n\\tprint(answer)\\n\", \"import math\\nt = int(input())\\nwhile t:\\n\\tn = int(input())\\n\\tlst = input().split()\\n\\tprev = int(lst[0])\\n\\tmaxdiff = 0\\n\\tfor i in range(1, n):\\n\\t\\tcurr = int(lst[i])\\n\\t\\tmaxdiff = max(maxdiff, prev - curr)\\n\\t\\tprev = max(prev, curr)\\n\\tif maxdiff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(int(math.log2(maxdiff)) + 1)\\n\\tt = t - 1\\n\", \"import math\\nimport bisect\\n\\ndef printf(str):\\n\\tprint(str, end=' ')\\ntest_case = int(input())\\nt = 0\\nwhile t < test_case:\\n\\tt += 1\\n\\tn = int(input())\\n\\tipt = input().split()\\n\\ta = list(map(int, ipt))\\n\\tmx = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tx = a[i - 1] - a[i]\\n\\t\\t\\tx = int(math.floor(math.log2(x))) + 1\\n\\t\\t\\ta[i] = a[i - 1]\\n\\t\\t\\tmx = max(mx, x)\\n\\tprint(mx)\\n\", \"def f(L):\\n\\tmaxm = 0\\n\\tn = len(L)\\n\\tfor i in range(n - 1):\\n\\t\\tif L[i + 1] < L[i]:\\n\\t\\t\\tmaxm = max(maxm, L[i] - L[i + 1])\\n\\t\\t\\tL[i + 1] = L[i]\\n\\tif maxm == 0:\\n\\t\\treturn 0\\n\\treturn len(bin(maxm)) - 2\\nn = int(input())\\nfor i in range(n):\\n\\tm = int(input())\\n\\tL = list(map(int, input().split()))\\n\\tprint(f(L))\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tlst = list(map(int, input().split()))\\n\\ts = 0\\n\\tm = lst[0]\\n\\tfor i in range(1, n):\\n\\t\\tif lst[i] < m:\\n\\t\\t\\ts = max(s, abs(m - lst[i]))\\n\\t\\telse:\\n\\t\\t\\tm = lst[i]\\n\\tif s != 0:\\n\\t\\tb = math.ceil(math.log(s + 1, 2))\\n\\t\\tprint(b)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"z = int(input())\\nwhile z:\\n\\tz -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().strip().split(' ')))\\n\\tt = 0\\n\\tlast = a[0]\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] >= last:\\n\\t\\t\\tlast = a[i]\\n\\t\\telse:\\n\\t\\t\\td = last - a[i]\\n\\t\\t\\tx = len(bin(d)[2:])\\n\\t\\t\\tif x > t:\\n\\t\\t\\t\\tt = x\\n\\tprint(t)\\n\", \"import math\\nT = int(input())\\nfor t in range(T):\\n\\tn = int(input())\\n\\ta = [int(e) for e in input().split()]\\n\\tm = a[0]\\n\\tdiff = 0\\n\\tfor i in range(1, len(a)):\\n\\t\\tif m - a[i] > diff:\\n\\t\\t\\tdiff = m - a[i]\\n\\t\\tif a[i] > m:\\n\\t\\t\\tm = a[i]\\n\\tif diff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(int(math.log2(diff)) + 1)\\n\", \"tests = int(input())\\nfor t in range(tests):\\n\\tans = 0\\n\\tn = int(input())\\n\\tnum_arr = list(map(int, input().split(' ')))\\n\\tfor i in range(n - 1):\\n\\t\\tdiff = num_arr[i + 1] - num_arr[i]\\n\\t\\tif diff >= 0:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tdiff = -diff\\n\\t\\t\\tnum_arr[i + 1] = num_arr[i]\\n\\t\\t\\tans = max(ans, diff.bit_length())\\n\\tprint(ans)\\n\", \"n = int(input())\\nimport math\\nfor i in range(n):\\n\\tm = int(input())\\n\\tl = [int(x) for x in input().split()]\\n\\ta = [-10 ** 9]\\n\\tfor i in range(m):\\n\\t\\ta += [max(a[i], l[i])]\\n\\tt = 0\\n\\tfor i in range(m):\\n\\t\\tif l[i] < a[i + 1]:\\n\\t\\t\\tk = -int(-math.log(a[i + 1] - l[i] + 1, 2) // 1)\\n\\t\\t\\tt = max(t, k)\\n\\tprint(t)\\n\", \"import sys\\ninput = sys.stdin.readline\\npo = [1]\\nfor i in range(40):\\n\\tpo += [po[-1] * 2]\\nfor i in range(1, 40):\\n\\tpo[i] += po[i - 1]\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tpre = [arr[0]]\\n\\tx = [0]\\n\\tfor i in arr:\\n\\t\\tif pre[-1] > i:\\n\\t\\t\\tpre += [pre[-1]]\\n\\t\\telse:\\n\\t\\t\\tpre += [i]\\n\\t\\tx += [pre[-1] - i]\\n\\tmaxi = max(x)\\n\\tfor i in range(40):\\n\\t\\tif po[i] >= maxi:\\n\\t\\t\\tans = i\\n\\t\\t\\tbreak\\n\\tif maxi == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(ans + 1)\\n\", \"import os\\nimport sys\\nimport math\\nfrom io import BytesIO, IOBase\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n\\ndef gcd(a, b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn gcd(b, a % b)\\n\\ndef lcm(a, b):\\n\\treturn a * b // gcd(a, b)\\n\\ndef ncr(n, r):\\n\\treturn math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\\n\\ndef npr(n, r):\\n\\treturn math.factorial(n) // math.factorial(n - r)\\n\\ndef seive(n):\\n\\tprimes = [True] * (n + 1)\\n\\tans = []\\n\\tfor i in range(2, n):\\n\\t\\tif not primes[i]:\\n\\t\\t\\tcontinue\\n\\t\\tj = 2 * i\\n\\t\\twhile j <= n:\\n\\t\\t\\tprimes[j] = False\\n\\t\\t\\tj += i\\n\\tfor p in range(2, n + 1):\\n\\t\\tif primes[p]:\\n\\t\\t\\tans += [p]\\n\\treturn ans\\n\\ndef factors(n):\\n\\tfactors = []\\n\\tx = 1\\n\\twhile x * x <= n:\\n\\t\\tif n % x == 0:\\n\\t\\t\\tif n // x == x:\\n\\t\\t\\t\\tfactors.append(x)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfactors.append(x)\\n\\t\\t\\t\\tfactors.append(n // x)\\n\\t\\tx += 1\\n\\treturn factors\\n\\ndef block(x):\\n\\ti = 0\\n\\tans = 0\\n\\twhile x > 0:\\n\\t\\tif x % 2:\\n\\t\\t\\tans = i\\n\\t\\ti += 1\\n\\t\\tx //= 2\\n\\treturn ans + 1\\n\\ndef main():\\n\\ttry:\\n\\t\\tfor _ in range(inp()):\\n\\t\\t\\tn = inp()\\n\\t\\t\\ta = inlt()\\n\\t\\t\\tans = 0\\n\\t\\t\\tfor i in range(1, n):\\n\\t\\t\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\t\\t\\tdiff = a[i - 1] - a[i]\\n\\t\\t\\t\\t\\tans = max(ans, block(diff))\\n\\t\\t\\t\\t\\ta[i] = a[i - 1]\\n\\t\\t\\tprint(ans)\\n\\texcept Exception as e:\\n\\t\\tprint(e)\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"import time\\nimport heapq\\nimport sys\\nfrom collections import *\\nfrom heapq import *\\nimport math\\nimport bisect\\nfrom itertools import *\\nmod = 10 ** 9 + 7\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ttemp = [0 for i in range(n)]\\n\\tfor i in range(1, n):\\n\\t\\tif l[i] < l[i - 1]:\\n\\t\\t\\ttemp.append(l[i - 1] - l[i])\\n\\t\\t\\tl[i] = l[i - 1]\\n\\tif max(temp) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(math.floor(math.log2(max(temp))) + 1)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tx = a[0]\\n\\td = 0\\n\\tfor y in a:\\n\\t\\td = max(d, x - y)\\n\\t\\tx = max(x, y)\\n\\tv = 0\\n\\twhile d:\\n\\t\\tv += 1\\n\\t\\td //= 2\\n\\tprint(v)\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmaxx = 0\\n\\tfor j in range(1, n):\\n\\t\\tif l[j] >= l[j - 1]:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tdiff = l[j - 1] - l[j]\\n\\t\\t\\tcurr = int(math.log(diff, 2)) + 1\\n\\t\\t\\tl[j] = l[j - 1]\\n\\t\\t\\tif curr > maxx:\\n\\t\\t\\t\\tmaxx = curr\\n\\tprint(maxx)\\n\", \"import sys\\nsys.setrecursionlimit(10 ** 6)\\nint1 = lambda x: int(x) - 1\\np2D = lambda x: print(*x, sep='\\\\n')\\n\\ndef II():\\n\\treturn int(sys.stdin.readline())\\n\\ndef MI():\\n\\treturn map(int, sys.stdin.readline().split())\\n\\ndef LI():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef LLI(rows_number):\\n\\treturn [LI() for _ in range(rows_number)]\\n\\ndef SI():\\n\\treturn sys.stdin.readline()[:-1]\\n\\ndef main():\\n\\tfor _ in range(II()):\\n\\t\\tinf = 10 ** 9 + 7\\n\\t\\tn = II()\\n\\t\\taa = LI()\\n\\t\\tmx = -inf\\n\\t\\tmxd = -inf\\n\\t\\tfor (i, a) in enumerate(aa):\\n\\t\\t\\td = mx - a\\n\\t\\t\\tif d > mxd:\\n\\t\\t\\t\\tmxd = d\\n\\t\\t\\tif a > mx:\\n\\t\\t\\t\\tmx = a\\n\\t\\tif mxd > 0:\\n\\t\\t\\tprint(mxd.bit_length())\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\nmain()\\n\", \"for t in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tm = a[0]\\n\\tv = 0\\n\\tfor i in a:\\n\\t\\tv = max(v, m - i)\\n\\t\\tm = max(m, i)\\n\\tif v == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tp = 1\\n\\t\\tc = 0\\n\\t\\twhile p <= v:\\n\\t\\t\\tp *= 2\\n\\t\\t\\tc += 1\\n\\t\\tprint(c)\\n\", \"from math import log2\\n\\ndef solve(n, arr):\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif arr[i] < arr[i - 1]:\\n\\t\\t\\tans = max(ans, int(log2(arr[i - 1] - arr[i])) + 1)\\n\\t\\t\\tarr[i] = arr[i - 1]\\n\\treturn ans\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tprint(solve(n, arr))\\n\", \"from math import ceil, log2\\nfor q in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tres = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\ttmp = bin(a[i - 1] - a[i])[2:]\\n\\t\\t\\tres = max(res, len(tmp) - tmp.index('1'))\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(res)\\n\", \"from math import log2\\nfor i in range(int(input())):\\n\\tarr_len = int(input())\\n\\tnums = [int(g) for g in input().split()]\\n\\tx = 0\\n\\tfor i in range(1, arr_len):\\n\\t\\tif nums[i] < nums[i - 1]:\\n\\t\\t\\tx = max(x, int(log2(nums[i - 1] - nums[i])) + 1)\\n\\t\\t\\tnums[i] = nums[i - 1]\\n\\tprint(x)\\n\", \"import math\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tdiff = -1\\n\\tvar = arr[0]\\n\\ti = 1\\n\\twhile i < n:\\n\\t\\twhile i < n and arr[i] < var:\\n\\t\\t\\tnew_d = var - arr[i]\\n\\t\\t\\tif diff < new_d:\\n\\t\\t\\t\\tdiff = new_d\\n\\t\\t\\ti += 1\\n\\t\\tif i == n:\\n\\t\\t\\tbreak\\n\\t\\tvar = arr[i]\\n\\t\\ti += 1\\n\\tif diff == -1:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tans = math.floor(math.log2(diff)) + 1\\n\\tprint(ans)\\n\", \"import math\\ntest = int(input())\\nfor t in range(test):\\n\\tn = int(input())\\n\\tL = list(map(int, input().split()))\\n\\tdiff = 0\\n\\tfor x in range(n - 1):\\n\\t\\tif L[x] <= L[x + 1]:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\td = L[x] - L[x + 1]\\n\\t\\t\\tif d >= diff:\\n\\t\\t\\t\\tdiff = d\\n\\t\\t\\tL[x + 1] = L[x]\\n\\tif diff == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\ttill = 0\\n\\twhile diff >= 2 ** till:\\n\\t\\ttill += 1\\n\\ttill = int(math.log(diff, 2))\\n\\tprint(till + 1)\\n\", \"t = int(input())\\nfor tc in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\n\\tdef p2(x):\\n\\t\\tfor k in range(1, 100):\\n\\t\\t\\tif 2 ** (k - 1) > x:\\n\\t\\t\\t\\treturn k - 1\\n\\tsol = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tx = a[i - 1] - a[i]\\n\\t\\t\\tsol = max(sol, p2(x))\\n\\t\\t\\ta[i] += x\\n\\tprint(sol)\\n\", \"import math\\nfor ad in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tm = 0\\n\\ti = 0\\n\\twhile i < n - 1:\\n\\t\\tt = float('inf')\\n\\t\\tif l[i + 1] < l[i]:\\n\\t\\t\\tfor j in range(i + 1, n):\\n\\t\\t\\t\\tif l[j] > l[i]:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tt = min(l[j], t)\\n\\t\\t\\tm = max(m, l[i] - t)\\n\\t\\t\\ti = j - 1\\n\\t\\ti += 1\\n\\tprint(math.ceil(math.log(m + 1, 2)))\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmax_diff = -10 ** 9\\n\\tmx = -10 ** 9\\n\\tfor i in a:\\n\\t\\tmx = max(mx, i)\\n\\t\\tmax_diff = max(max_diff, mx - i)\\n\\tprint(int(math.log(max_diff + 1, 2) + 0.999999999))\\n\", \"t = int(input())\\nfor _ in range(0, t):\\n\\tn = int(input())\\n\\tArray = [i for i in map(int, input().split())]\\n\\tif len(Array) == 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tMIN = Array[n - 1]\\n\\t\\tindex = n - 2\\n\\t\\tk = Array[index]\\n\\t\\tdiff = k - MIN\\n\\t\\tfor j in range(0, n - 2):\\n\\t\\t\\tMIN = min(MIN, k)\\n\\t\\t\\tindex -= 1\\n\\t\\t\\tk = Array[index]\\n\\t\\t\\tdiff = (k - MIN, diff)[diff > k - MIN]\\n\\t\\tl = 0\\n\\t\\twhile 2 ** l - 1 < diff:\\n\\t\\t\\tl += 1\\n\\t\\tprint(l)\\n\", \"from math import *\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmax_diff = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tmax_diff = max(max_diff, a[i - 1] - a[i])\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tif max_diff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(ceil(log2(max_diff + 1)))\\n\", \"(i, tmp) = (1, 1)\\nx = [1]\\nwhile tmp < 1000000000:\\n\\ttmp *= 2\\n\\tx.append(x[i - 1] + tmp)\\n\\ti += 1\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\tif n > 1:\\n\\t\\tmax_diff = 0\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif a[i - 1] > a[i]:\\n\\t\\t\\t\\tmax_diff = max(max_diff, a[i - 1] - a[i])\\n\\t\\t\\t\\ta[i] = a[i - 1]\\n\\t\\tif max_diff > 0:\\n\\t\\t\\tans = next((idx for (idx, y) in enumerate(x) if y >= max_diff)) + 1\\n\\tprint(ans)\\n\", \"from math import ceil, log2\\n\\ndef pow2(diff):\\n\\treturn ceil(log2(diff))\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tvals = [int(i) for i in input().split(' ')]\\n\\tmx = -1\\n\\tfor i in range(n - 1):\\n\\t\\tif vals[i] > vals[i + 1]:\\n\\t\\t\\tk = pow2(vals[i] - vals[i + 1])\\n\\t\\t\\tif vals[i + 1] + (1 << k) - 1 >= vals[i]:\\n\\t\\t\\t\\tk -= 1\\n\\t\\t\\tvals[i + 1] = vals[i]\\n\\t\\t\\tmx = max(mx, k + 1)\\n\\tprint(max(mx, 0))\\n\", \"import math\\nt = int(input())\\nwhile t:\\n\\tt = t - 1\\n\\tn = int(input())\\n\\ta = input().split()\\n\\tarr = list()\\n\\tfor i in a:\\n\\t\\tarr.append(int(i))\\n\\tmx = arr[0]\\n\\tmx_diff = 0\\n\\tfor i in range(1, n, 1):\\n\\t\\tif arr[i] > mx:\\n\\t\\t\\tmx = arr[i]\\n\\t\\tif mx - arr[i] > mx_diff:\\n\\t\\t\\tmx_diff = mx - arr[i]\\n\\tif mx_diff > 0:\\n\\t\\tprint(int(math.log(mx_diff, 2)) + 1)\\n\\telse:\\n\\t\\tprint('0')\\n\", \"import math\\n\\ndef run():\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tdiff = a[i - 1] - a[i]\\n\\t\\t\\tans = max(ans, math.floor(math.log2(diff)) + 1)\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(ans)\\nt = int(input())\\nfor i in range(t):\\n\\trun()\\n\", \"import sys\\nimport math\\n\\ndef func(d):\\n\\treturn math.ceil(math.log2(d + 1))\\n\\ndef process(A):\\n\\ts = 0\\n\\tm = A[0]\\n\\tfor i in range(1, len(A)):\\n\\t\\tif A[i] > m:\\n\\t\\t\\tm = A[i]\\n\\t\\telif A[i] < m:\\n\\t\\t\\ts1 = func(m - A[i])\\n\\t\\t\\ts = max(s, s1)\\n\\tprint(s)\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n\\ndef f(a, n):\\n\\treturn True\\n\\ndef is_permutation(arr):\\n\\tfor e in range(1, len(arr) + 1):\\n\\t\\tif e not in arr:\\n\\t\\t\\treturn False\\n\\treturn True\\nt = inp()\\nfor i in range(t):\\n\\tn = inp()\\n\\tA = inlt()\\n\\tprocess(A)\\n\", \"import re\\n\\ndef go():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tma = min(a)\\n\\ta = [aa - ma for aa in a]\\n\\tcur = 0\\n\\tmx = 0\\n\\tfor aa in a:\\n\\t\\tif aa < cur:\\n\\t\\t\\tdif = cur - aa\\n\\t\\t\\tx = dif.bit_length() - 1\\n\\t\\t\\taa += 1 << x\\n\\t\\t\\tmx = max(mx, x + 1)\\n\\t\\tcur = max(cur, aa)\\n\\treturn mx\\nt = int(input())\\nans = []\\nfor _ in range(t):\\n\\tans.append(str(go()))\\nprint('\\\\n'.join(ans))\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tt = 0\\n\\tpeak = -10 ** 9\\n\\tfor i in a:\\n\\t\\tif i > peak:\\n\\t\\t\\tpeak = i\\n\\t\\telse:\\n\\t\\t\\tt = max(t, (peak - i).bit_length())\\n\\tprint(t)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = a.copy()\\n\\tfor i in range(n - 1):\\n\\t\\tif b[i] > b[i + 1]:\\n\\t\\t\\tb[i + 1] = b[i]\\n\\ts = max([b[i] - a[i] for i in range(n)])\\n\\tprint(len(bin(s)) - 2 if s != 0 else 0)\\n\", \"t = int(input())\\nfor e in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ts = 0\\n\\tfor i in range(len(a) - 1):\\n\\t\\tif a[i] > a[i + 1]:\\n\\t\\t\\ts = max(s, a[i] - a[i + 1])\\n\\t\\t\\ta[i + 1] = a[i]\\n\\tif s == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tk = 0\\n\\t\\tn = 1\\n\\t\\tz = 0\\n\\t\\twhile k != 1:\\n\\t\\t\\tz += 2 ** (n - 1)\\n\\t\\t\\tif z < s:\\n\\t\\t\\t\\tn += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tk = 1\\n\\t\\tprint(n)\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tx = list(map(int, input().split()))\\n\\tcnt = 0\\n\\tfor j in range(n - 1):\\n\\t\\tif x[j] > x[j + 1]:\\n\\t\\t\\tp = int(math.log2(x[j] - x[j + 1]))\\n\\t\\t\\tp = p + 1\\n\\t\\t\\tx[j + 1] = x[j]\\n\\t\\t\\tif p > cnt:\\n\\t\\t\\t\\tcnt = p\\n\\tprint(cnt)\\n\", \"from sys import *\\nt = int(stdin.readline())\\nimport math\\nfor _ in range(t):\\n\\tmxd = 0\\n\\tmx = 0\\n\\tn = int(stdin.readline())\\n\\ta = list(map(int, stdin.readline().split(' ')))\\n\\tfor i in range(1, n, 1):\\n\\t\\td = a[i] - a[i - 1]\\n\\t\\tif d >= 0:\\n\\t\\t\\tcontinue\\n\\t\\tif -d < mxd:\\n\\t\\t\\ta[i] = a[i - 1]\\n\\t\\t\\tcontinue\\n\\t\\tl = int(math.log(-d, 2)) + 1\\n\\t\\tmx = l\\n\\t\\tmxd = 2 ** l\\n\\t\\ta[i] = a[i - 1]\\n\\tprint(mx)\\n\", \"import math\\n\\ndef solveAll():\\n\\tnbCases = int(input())\\n\\tfor _ in range(nbCases):\\n\\t\\tcase = readCase()\\n\\t\\tprint(solve(case))\\n\\ndef readCase():\\n\\tinput()\\n\\treturn [int(x) for x in input().split()]\\n\\ndef solve(nums):\\n\\tcurrentMax = -math.inf\\n\\tlargestGap = -math.inf\\n\\tfor num in nums:\\n\\t\\tlargestGap = max(largestGap, currentMax - num)\\n\\t\\tcurrentMax = max(currentMax, num)\\n\\tif largestGap <= 0:\\n\\t\\treturn 0\\n\\treturn len(format(largestGap, 'b'))\\nsolveAll()\\n\", \"def powered(n, x):\\n\\tcur = x[0]\\n\\tdif = 0\\n\\tfor v in x:\\n\\t\\tif v > cur:\\n\\t\\t\\tcur = v\\n\\t\\telse:\\n\\t\\t\\tdif = max(dif, cur - v)\\n\\tres = 0\\n\\twhile dif:\\n\\t\\tres += 1\\n\\t\\tdif //= 2\\n\\treturn res\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tx = list(map(int, input().split()))\\n\\tprint(powered(n, x))\\n\", \"import sys, re, math\\nfrom collections import deque, defaultdict, Counter, OrderedDict\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\\nfrom heapq import heappush, heappop, heapify, nlargest, nsmallest\\n\\ndef STR():\\n\\treturn list(input())\\n\\ndef INT():\\n\\treturn int(input())\\n\\ndef MAP():\\n\\treturn map(int, input().split())\\n\\ndef LIST():\\n\\treturn list(map(int, input().split()))\\n\\ndef list2d(a, b, c):\\n\\treturn [[c] * b for i in range(a)]\\n\\ndef sortListWithIndex(listOfTuples, idx):\\n\\treturn sorted(listOfTuples, key=lambda x: x[idx])\\n\\ndef sortDictWithVal(passedDic):\\n\\ttemp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))\\n\\ttoret = {}\\n\\tfor tup in temp:\\n\\t\\ttoret[tup[0]] = tup[1]\\n\\treturn toret\\n\\ndef sortDictWithKey(passedDic):\\n\\treturn dict(OrderedDict(sorted(passedDic.items())))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\nt = INT()\\nwhile t != 0:\\n\\tn = INT()\\n\\ta = LIST()\\n\\ttoadd = -INF\\n\\tmx = -INF\\n\\tfor el in a:\\n\\t\\tmx = max(mx, el)\\n\\t\\ttoadd = max(toadd, mx - el)\\n\\tprint(ceil(math.log(toadd + 1, 2)))\\n\\tt -= 1\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tz = 1\\n\\tn = int(input())\\n\\tarr = list(map(int, input().rstrip().split(' ')))\\n\\tcurMax = -9999999999\\n\\tmaxIncrease = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] > curMax:\\n\\t\\t\\tcurMax = arr[i]\\n\\t\\telse:\\n\\t\\t\\tdiff = curMax - arr[i]\\n\\t\\t\\tif diff > maxIncrease:\\n\\t\\t\\t\\tmaxIncrease = diff\\n\\tgeneratedSum = 0\\n\\tx = 0\\n\\tpow2 = 1\\n\\twhile generatedSum < maxIncrease:\\n\\t\\tx += 1\\n\\t\\tgeneratedSum += pow2\\n\\t\\tpow2 = pow2 << 1\\n\\tprint(x)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tbig = a[0]\\n\\tmaxi = 0\\n\\tfor x in a:\\n\\t\\tif x > big:\\n\\t\\t\\tbig = x\\n\\t\\telif big - x > maxi:\\n\\t\\t\\tmaxi = big - x\\n\\tsoln = 0\\n\\twhile maxi > 0:\\n\\t\\tmaxi //= 2\\n\\t\\tsoln += 1\\n\\tprint(soln)\\n\", \"from math import log, ceil\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(lambda x: int(x), input().split()))\\n\\tmaximum = a[0]\\n\\tmax_x = 0\\n\\tfor i in range(0, len(a)):\\n\\t\\tif a[i] < maximum:\\n\\t\\t\\ttemp = int(ceil(log(maximum - a[i] + 1, 2)))\\n\\t\\t\\tif temp > max_x:\\n\\t\\t\\t\\tmax_x = temp\\n\\t\\telse:\\n\\t\\t\\tmaximum = a[i]\\n\\tprint(max_x)\\n\", \"t = int(input())\\nimport math\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().strip().split()))[:n]\\n\\tdiff = 0\\n\\tmaxx = -float('inf')\\n\\tsec = 0\\n\\tfor i in range(n):\\n\\t\\tif arr[i] < maxx:\\n\\t\\t\\tdiff = max(diff, maxx - arr[i])\\n\\t\\tmaxx = max(maxx, arr[i])\\n\\tif diff == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tif diff != 0:\\n\\t\\tsec = int(math.log2(diff))\\n\\tif 1 << sec + 1 <= diff:\\n\\t\\tsec += 1\\n\\tsec += 1\\n\\tprint(sec)\\n\", \"import math\\nt = int(input())\\nans = 0\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split(' ')))\\n\\tm = a[0]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tm = max(m, a[i])\\n\\t\\tif a[i] < m:\\n\\t\\t\\td = m - a[i]\\n\\t\\t\\tans = max(ans, int(math.log2(d)) + 1)\\n\\tprint(ans)\\n\", \"import sys\\nfrom collections import defaultdict, deque\\nfrom math import sqrt\\n\\ndef input():\\n\\treturn sys.stdin.readline()[:-1]\\n\\ndef solve():\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tdif = 0\\n\\tmx = a[0]\\n\\tfor i in range(0, n):\\n\\t\\tmx = max(mx, a[i])\\n\\t\\tdif = max(dif, mx - a[i])\\n\\tx = [x for x in bin(dif)[2:]]\\n\\tif '1' not in x:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(x))\\nt = int(input())\\nfor _ in range(t):\\n\\tsolve()\\n\", \"t = int(input())\\nfor k in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\ttmp = a[i - 1] - a[i]\\n\\t\\tif tmp > 0:\\n\\t\\t\\tans = max(ans, len(bin(tmp)) - 2)\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(ans)\\n\", \"def min_2(n):\\n\\tif n == 0:\\n\\t\\treturn 0\\n\\tans = 1\\n\\tx = 1\\n\\twhile n > x:\\n\\t\\tn -= x\\n\\t\\tans += 1\\n\\t\\tx *= 2\\n\\treturn ans\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ttemp = -10 ** 9\\n\\tmax_d = 0\\n\\tfor i in range(len(a)):\\n\\t\\tif a[i] == temp:\\n\\t\\t\\tpass\\n\\t\\telif temp < a[i]:\\n\\t\\t\\ttemp = a[i]\\n\\t\\telse:\\n\\t\\t\\tmax_d = max(max_d, temp - a[i])\\n\\tprint(min_2(max_d))\\n\", \"import math\\nt = int(input())\\n\\ndef solve(n, a):\\n\\tt = 0\\n\\td = -float('inf')\\n\\tfor i in range(0, len(a)):\\n\\t\\td = max(a[i], d)\\n\\t\\tif d - a[i] > 0:\\n\\t\\t\\tj = 0\\n\\t\\t\\tnow = d - a[i]\\n\\t\\t\\twhile now > 0:\\n\\t\\t\\t\\tnow >>= 1\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\tt = max(j, t)\\n\\treturn t\\nfor _ in range(0, t):\\n\\tl = input()\\n\\tarr = list(map(int, input().split()))\\n\\tseconds = solve(l, arr)\\n\\tprint(seconds)\\n\", \"import math\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nfrom typing import Text\\nfrom collections import *\\nfrom math import *\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef powered(n, x):\\n\\tcur = x[0]\\n\\tdif = 0\\n\\tfor v in x:\\n\\t\\tif v > cur:\\n\\t\\t\\tcur = v\\n\\t\\telse:\\n\\t\\t\\tdif = max(dif, cur - v)\\n\\tres = 0\\n\\twhile dif:\\n\\t\\tres += 1\\n\\t\\tdif //= 2\\n\\treturn res\\n\\ndef main():\\n\\tt = int(input())\\n\\twhile t > 0:\\n\\t\\tt -= 1\\n\\t\\tn = int(input())\\n\\t\\tarr = list(map(int, input().split()))\\n\\t\\tprint(powered(n, arr))\\n\\texit(0)\\nmain()\\n\", \"import sys\\nimport math\\n\\ndef solve(A):\\n\\tmax_so_far = -2 ** 32\\n\\tmin_diff = 0\\n\\tfor i in range(len(A)):\\n\\t\\tif A[i] < max_so_far:\\n\\t\\t\\tmin_diff = max(min_diff, max_so_far - A[i])\\n\\t\\telse:\\n\\t\\t\\tmax_so_far = A[i]\\n\\treturn int(math.log(min_diff, 2)) + 1 if min_diff != 0 else 0\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tA = [int(x) for x in sys.stdin.readline().split(' ')]\\n\\tprint(solve(A))\\n\", \"import math\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tT = 0\\n\\tprev = a[0]\\n\\tfor i in range(1, n):\\n\\t\\tdiff = a[i] - prev\\n\\t\\tif diff >= 0:\\n\\t\\t\\tprev = a[i]\\n\\t\\telse:\\n\\t\\t\\tT = max(T, int(1 + math.log2(-diff)))\\n\\tprint(T)\\n\", \"def susanoo(x):\\n\\tret = 0\\n\\twhile x:\\n\\t\\tret += 1\\n\\t\\tx //= 2\\n\\treturn ret\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\td = a[i - 1] - a[i]\\n\\t\\t\\tans = max(ans, susanoo(d))\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor tests in range(t):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tMAX = -1 << 30\\n\\tANS = 0\\n\\tfor a in A:\\n\\t\\tMAX = max(MAX, a)\\n\\t\\tif a < MAX:\\n\\t\\t\\tANS = max(ANS, MAX - a)\\n\\tif ANS == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tfor i in range(1, 100):\\n\\t\\tif (1 << i) - 1 >= ANS:\\n\\t\\t\\tprint(i)\\n\\t\\t\\tbreak\\n\", \"import sys\\nreadline = sys.stdin.readline\\nT = int(readline())\\nAns = [None] * T\\nfor qu in range(T):\\n\\tN = int(readline())\\n\\tA = list(map(int, readline().split()))\\n\\tA = [10 ** 9 + a for a in A]\\n\\tctr = A[0]\\n\\tans = 0\\n\\tfor i in range(1, N):\\n\\t\\ta = A[i]\\n\\t\\tif a >= ctr:\\n\\t\\t\\tctr = a\\n\\t\\t\\tcontinue\\n\\t\\txx = 0 if ans == 0 else (1 << ans) - 1\\n\\t\\tif ctr - a <= xx:\\n\\t\\t\\tcontinue\\n\\t\\ta += xx\\n\\t\\twhile ctr > a:\\n\\t\\t\\ta += 1 << ans\\n\\t\\t\\tans += 1\\n\\tAns[qu] = ans\\nprint('\\\\n'.join(map(str, Ans)))\\n\", \"import random, math\\nfrom copy import deepcopy as dc\\nfrom bisect import bisect_left, bisect_right\\n\\ndef solution(li):\\n\\tmaxi_till = li[0]\\n\\tfin = 0\\n\\tfor i in range(len(li)):\\n\\t\\tif li[i] >= maxi_till:\\n\\t\\t\\tmaxi_till = li[i] + 1 - 1\\n\\t\\telse:\\n\\t\\t\\tdiff = int(math.log(maxi_till - li[i], 2))\\n\\t\\t\\tfin = max(fin, diff + 1)\\n\\treturn int(fin)\\n\\ndef input_test():\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\tli = list(map(int, input().strip().split(' ')))\\n\\t\\tout = solution(li)\\n\\t\\tprint(out)\\n\\ndef test():\\n\\tpass\\ninput_test()\\n\", \"T = int(input())\\nfor test in range(T):\\n\\tN = int(input())\\n\\tvec = list(map(int, input().split()))\\n\\tdiff = []\\n\\tmxm = vec[0]\\n\\tfor i in range(N - 1):\\n\\t\\tdiff.append(mxm - vec[i + 1])\\n\\t\\tmxm = max(mxm, vec[i + 1])\\n\\tTmin = 0\\n\\tfor d in diff:\\n\\t\\tT = 1\\n\\t\\tif d <= 0:\\n\\t\\t\\tcontinue\\n\\t\\twhile 2 ** (T - 1) <= d:\\n\\t\\t\\tT += 1\\n\\t\\tT -= 1\\n\\t\\tTmin = max(T, Tmin)\\n\\tprint(Tmin)\\n\", \"def maxi(a):\\n\\tind = 0\\n\\tmax = -10 ** 9\\n\\tfor u in range(0, len(a)):\\n\\t\\tif a[u] > max:\\n\\t\\t\\tmax = a[u]\\n\\t\\t\\tind = u\\n\\treturn ind\\nt = int(input())\\nfor k in range(0, t):\\n\\tn = int(input())\\n\\ta = input().split(' ')\\n\\tb = []\\n\\tfor i in range(0, n):\\n\\t\\ta[i] = int(a[i])\\n\\tfor i in range(0, n - 1):\\n\\t\\tb.append(a[i] - a[i + 1])\\n\\t\\tif i > 0 and b[i - 1] > 0:\\n\\t\\t\\tb[i] += b[i - 1]\\n\\tp = 0\\n\\tind = maxi(b)\\n\\twhile len(b) > 0 and b[ind] > 0:\\n\\t\\tb[ind] -= 2 ** p\\n\\t\\tp += 1\\n\\tprint(p)\\n\", \"t = int(input())\\nimport math\\nfor i in range(t):\\n\\tn = int(input())\\n\\tlis = list(map(int, input().split()))\\n\\tma = lis[0]\\n\\tans = []\\n\\tfor j in range(1, len(lis)):\\n\\t\\tif lis[j] < ma:\\n\\t\\t\\tans.append(ma - lis[j])\\n\\t\\telse:\\n\\t\\t\\tma = lis[j]\\n\\tif len(ans) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(math.ceil(math.log(max(ans) + 1, 2)))\\n\", \"import math\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\ta = arr[0]\\n\\tT = 0\\n\\tfor j in range(1, n):\\n\\t\\tif a < arr[j]:\\n\\t\\t\\ta = arr[j]\\n\\t\\telse:\\n\\t\\t\\tT = max(T, a - arr[j])\\n\\tans = math.log2(T + 1)\\n\\tif ans > int(ans):\\n\\t\\tans = int(ans) + 1\\n\\telse:\\n\\t\\tans = int(ans)\\n\\tprint(ans)\\n\", \"import sys\\n\\ndef main():\\n\\tres = ''\\n\\tinput = sys.stdin.readline\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tsub_res = 0\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\t\\tk = len(bin(a[i - 1] - a[i])) - 2\\n\\t\\t\\t\\tif k > sub_res:\\n\\t\\t\\t\\t\\tsub_res = k\\n\\t\\t\\t\\ta[i] = a[i - 1]\\n\\t\\tres += str(sub_res) + '\\\\n'\\n\\tprint(res)\\nmain()\\n\", \"import math\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tmax1 = 0\\n\\tfor i in range(1, len(l)):\\n\\t\\tif l[i] < l[i - 1]:\\n\\t\\t\\tmax1 = max(max1, int(math.log(l[i - 1] - l[i], 2) + 1))\\n\\t\\t\\tl[i] = l[i - 1]\\n\\tprint(max1)\\n\", \"def solve():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\td = 0\\n\\tmx = a[0]\\n\\tfor i in range(1, n):\\n\\t\\tif mx - a[i] > d:\\n\\t\\t\\td = mx - a[i]\\n\\t\\tif a[i] > mx:\\n\\t\\t\\tmx = a[i]\\n\\tans = 0\\n\\tc = 0\\n\\tp = 1\\n\\twhile c < d:\\n\\t\\tc += p\\n\\t\\tp *= 2\\n\\t\\tans += 1\\n\\treturn ans\\nt = int(input())\\nfor i in range(t):\\n\\tprint(solve())\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tx = 0\\n\\tfor i in range(n - 1):\\n\\t\\tdx = a[i + 1] - a[i]\\n\\t\\tif dx >= 0:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\ta[i + 1] = a[i]\\n\\t\\t\\ty = 1\\n\\t\\t\\tcy = 0\\n\\t\\t\\twhile y <= -dx:\\n\\t\\t\\t\\ty *= 2\\n\\t\\t\\t\\tcy += 1\\n\\t\\t\\tx = max(x, cy)\\n\\tprint(x)\\n\", \"import math\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ty = 0\\n\\tm = a[0]\\n\\tfor i in range(1, n):\\n\\t\\tm = max(m, a[i])\\n\\t\\ty = max(y, m - a[i])\\n\\tx = 0\\n\\twhile 2 ** x <= y:\\n\\t\\tx += 1\\n\\tprint(x)\\n\", \"test_cases = int(input())\\nsecond = []\\nfor i in range(int(test_cases)):\\n\\tlength = input()\\n\\tarray = [int(idx) for idx in input().split(' ')]\\n\\tsec = 0\\n\\tidx = 0\\n\\tfor i in range(int(length) - 1):\\n\\t\\tif array[i] > array[i + 1]:\\n\\t\\t\\tdiff = array[i] - array[i + 1]\\n\\t\\t\\tarray[i + 1] += diff\\n\\t\\t\\tp = 0\\n\\t\\t\\twhile diff:\\n\\t\\t\\t\\tdiff = diff // 2\\n\\t\\t\\t\\tp += 1\\n\\t\\t\\tsec = max(sec, p)\\n\\tsecond.append(sec)\\nfor idx in second:\\n\\tprint(idx)\\n\", \"def solve(num):\\n\\tans = 0\\n\\tbinary = bin(num)[2:]\\n\\tl = len(binary)\\n\\tfor i in range(l):\\n\\t\\tif binary[i] == '1':\\n\\t\\t\\treturn l - i\\n\\treturn 0\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tdata = list(map(int, input().split()))\\n\\tm = data[0]\\n\\tans = 0\\n\\tfor i in range(1, len(data)):\\n\\t\\tif data[i] < m:\\n\\t\\t\\tdiff = m - data[i]\\n\\t\\t\\ta = solve(diff)\\n\\t\\t\\tif a > ans:\\n\\t\\t\\t\\tans = a\\n\\t\\telse:\\n\\t\\t\\tm = data[i]\\n\\tprint(ans)\\n\", \"def next_pow(num):\\n\\tb = bin(num)[2:]\\n\\tif b.count('1') == 1:\\n\\t\\treturn len(b) - 1\\n\\telse:\\n\\t\\treturn len(b) - 1\\n\\ndef main():\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tscore = 0\\n\\tm = arr[0]\\n\\tfor i in range(1, n):\\n\\t\\td = arr[i] - m\\n\\t\\tif d < 0:\\n\\t\\t\\tk = next_pow(abs(d))\\n\\t\\t\\tif k + 1 > score:\\n\\t\\t\\t\\tscore = k + 1\\n\\t\\tif arr[i] > m:\\n\\t\\t\\tm = arr[i]\\n\\treturn score\\nfor _ in range(int(input())):\\n\\tprint(main())\\n\", \"t = int(input())\\nfor m in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tleft = 0\\n\\tright = 0\\n\\tmaxdif = 0\\n\\tdif = 0\\n\\twhile right < n:\\n\\t\\tif arr[left] >= arr[right]:\\n\\t\\t\\tdif = arr[left] - arr[right]\\n\\t\\t\\tif dif > maxdif:\\n\\t\\t\\t\\tmaxdif = dif\\n\\t\\telse:\\n\\t\\t\\tleft = right\\n\\t\\tright += 1\\n\\tcount = 0\\n\\twhile maxdif != 0:\\n\\t\\tcount += 1\\n\\t\\tmaxdif = maxdif // 2\\n\\tprint(count)\\n\", \"from bisect import bisect_left\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nfrom collections import Counter, defaultdict\\nfrom collections import deque\\nfrom functools import cmp_to_key\\nimport math\\n\\ndef sin():\\n\\treturn input()\\n\\ndef ain():\\n\\treturn list(map(int, sin().split()))\\n\\ndef sain():\\n\\treturn input().split()\\n\\ndef iin():\\n\\treturn int(sin())\\nMAX = float('inf')\\nMIN = float('-inf')\\nMOD = 1000000007\\n\\ndef sieve(n):\\n\\tprime = [True for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p * p <= n:\\n\\t\\tif prime[p] == True:\\n\\t\\t\\tfor i in range(p * p, n + 1, p):\\n\\t\\t\\t\\tprime[i] = False\\n\\t\\tp += 1\\n\\ts = set()\\n\\tfor p in range(2, n + 1):\\n\\t\\tif prime[p]:\\n\\t\\t\\ts.add(p)\\n\\treturn s\\n\\ndef readTree(n, m):\\n\\tadj = [deque([]) for _ in range(n + 1)]\\n\\tfor _ in range(m):\\n\\t\\t(u, v) = ain()\\n\\t\\tadj[u].append(v)\\n\\t\\tadj[v].append(u)\\n\\treturn adj\\n\\ndef solve(c1, c2, maxi1, maxi2):\\n\\tfor i in range(1, maxi1 + 1):\\n\\t\\tif i not in c1:\\n\\t\\t\\treturn False\\n\\tfor i in range(1, maxi2 + 1):\\n\\t\\tif i not in c2:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef main():\\n\\tfor _ in range(iin()):\\n\\t\\tn = iin()\\n\\t\\tl = ain()\\n\\t\\tx = l[0]\\n\\t\\tans = 0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tans = max(x - l[i], ans)\\n\\t\\t\\tx = max(x, l[i])\\n\\t\\tif ans == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tp = math.log(ans, 2)\\n\\t\\t\\tif p % 2 == 0:\\n\\t\\t\\t\\tprint(int(p + 1))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(int(p + 1))\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\nif os.getcwd() == 'D:\\\\\\\\code':\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nelse:\\n\\t(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\n\\tinput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\nmain()\\n\", \"import math as M\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tA = list((int(i) for i in input().split()))\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif A[i - 1] > A[i]:\\n\\t\\t\\td = A[i - 1] - A[i]\\n\\t\\t\\tx = int(M.log2(d) + 1)\\n\\t\\t\\tans = max(ans, x)\\n\\t\\t\\tA[i] = A[i - 1]\\n\\tprint(ans)\\n\", \"from math import log\\nfrom math import ceil\\nT = int(input())\\nls = [0] * T\\nfor t in range(T):\\n\\tinput()\\n\\tls[t] = [int(i) for i in input().split(' ')]\\n\\ndef mins(l):\\n\\tl0 = []\\n\\tm = l[-1]\\n\\tfor i in range(len(l) - 1, -1, -1):\\n\\t\\tif l[i] < m:\\n\\t\\t\\tm = l[i]\\n\\t\\tl0.append(m)\\n\\treturn l0\\n\\ndef ans(l):\\n\\tn = mins(l)\\n\\tm = 0\\n\\tfor i in range(len(n)):\\n\\t\\tx = l[i] - n[len(n) - 1 - i]\\n\\t\\tif x > m:\\n\\t\\t\\tm = x\\n\\treturn ceil(log(1 + m, 2))\\nfor t in range(T):\\n\\tprint(ans(ls[t]))\\n\", \"import sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 6)\\n\\ndef in_int():\\n\\treturn int(input())\\n\\ndef in_list():\\n\\treturn list(map(int, input().split()))\\n\\ndef in_str():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef in_ints():\\n\\treturn map(int, input().split())\\nt = in_int()\\nimport math\\nfrom operator import itemgetter\\nfor tt in range(t):\\n\\tn = in_int()\\n\\ta = in_list()\\n\\tpre = a[0]\\n\\tmx = 0\\n\\tfor xx in a[1:]:\\n\\t\\tpre = max(pre, xx)\\n\\t\\tmx = max(mx, pre - xx)\\n\\tif mx == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\txx = mx\\n\\t\\tp = 1\\n\\t\\twhile xx > 0:\\n\\t\\t\\tp = xx & -xx\\n\\t\\t\\txx -= p\\n\\t\\tp = math.log2(p)\\n\\t\\tprint(int(p) + 1)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmdiff = 0\\n\\tmnum = a[0]\\n\\tfor i in range(n):\\n\\t\\tif mnum < a[i]:\\n\\t\\t\\tmnum = a[i]\\n\\t\\telse:\\n\\t\\t\\tmdiff = max(mdiff, mnum - a[i])\\n\\tif mdiff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(len(bin(mdiff)) - 2)\\n\", \"import math\\nimport sys\\n\\ndef diff_test(set, k):\\n\\tfor i in range(k):\\n\\t\\tincreased_one = False\\n\\t\\tcurmax = set[0]\\n\\t\\tfor j in range(len(set)):\\n\\t\\t\\tif j == 0:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif set[j] < curmax:\\n\\t\\t\\t\\tincreased_one = True\\n\\t\\t\\t\\td = curmax - set[j]\\n\\t\\t\\t\\tif d & 1 << i:\\n\\t\\t\\t\\t\\tset[j] = set[j] + 2 ** i\\n\\t\\t\\tif set[j] > curmax:\\n\\t\\t\\t\\tcurmax = set[j]\\n\\t\\tif increased_one == False:\\n\\t\\t\\tprint(f'SRINI:did not increase anything in this cycle : i: {i} k: {k} BAD set:')\\n\\t\\tprint(f'SRINI:diff_test: i{i}: set : {set}')\\n\\tfor j in range(len(set)):\\n\\t\\tif j == 0:\\n\\t\\t\\tcontinue\\n\\t\\tif set[j] < set[j - 1]:\\n\\t\\t\\tprint(f'SRINI: BAD sequence: in set {set} TEST FAILED')\\n\\t\\t\\tsys.exit(1)\\n\\ndef find_powered_addition(set):\\n\\tdiff = []\\n\\tmaxi = set[0]\\n\\tmin = maxi\\n\\tfor i in set:\\n\\t\\tif i > maxi:\\n\\t\\t\\tdiff.append(maxi - min)\\n\\t\\t\\tmaxi = i\\n\\t\\t\\tmin = i\\n\\t\\tif i < min:\\n\\t\\t\\tmin = i\\n\\tdiff.append(maxi - min)\\n\\tmax_diff = max(diff)\\n\\tk = 0\\n\\twhile max_diff > 0:\\n\\t\\tmax_diff = max_diff - 2 ** k\\n\\t\\tk = k + 1\\n\\tprint(f'{k}')\\ntotal_sets = int(input())\\nnset = []\\nset = []\\nfor i in range(total_sets):\\n\\tnelements = int(input())\\n\\tnset.append(nelements)\\n\\telements = input()\\n\\tel_list = []\\n\\tfor el in elements.split():\\n\\t\\tel_list.append(int(el))\\n\\tset.append(el_list)\\nfor i in range(len(set)):\\n\\tfind_powered_addition(set[i])\\n\", \"import math\\nt = int(input())\\nwhile t > 0:\\n\\tn = int(input())\\n\\tarr = list(map(int, input().strip().split()))\\n\\tmaxi = int(-2000000000.0)\\n\\tval = 0\\n\\ttwo_val = 1\\n\\tfor i in range(len(arr)):\\n\\t\\tmaxi = max(maxi, arr[i])\\n\\t\\tval = max(val, maxi - arr[i])\\n\\tstep = 0\\n\\twhile two_val - 1 < val:\\n\\t\\ttwo_val = two_val * 2\\n\\t\\tstep += 1\\n\\tprint(step)\\n\\tt -= 1\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tm = a[0]\\n\\tp = 0\\n\\tfor i in range(1, n):\\n\\t\\tm = max(m, a[i])\\n\\t\\tp = max(p, m - a[i])\\n\\tc = 0\\n\\twhile 2 ** c <= p:\\n\\t\\tc += 1\\n\\tprint(c)\\n\", \"def getInts():\\n\\treturn [int(s) for s in input().split()]\\n\\ndef getInt():\\n\\treturn int(input())\\n\\ndef getStrs():\\n\\treturn [s for s in input().split()]\\n\\ndef getStr():\\n\\treturn input()\\n\\ndef listStr():\\n\\treturn list(input())\\n\\ndef solve():\\n\\tN = getInt()\\n\\tA = getInts()\\n\\tif N == 1:\\n\\t\\treturn 0\\n\\tans = 0\\n\\tcurr_max = A[0]\\n\\tmax_move = 0\\n\\tfor j in range(1, N):\\n\\t\\tmax_move = max(curr_max - A[j], max_move)\\n\\t\\tcurr_max = max(A[j], curr_max)\\n\\tx = 0\\n\\tans = 0\\n\\ttwo_pow = 0\\n\\twhile x < max_move:\\n\\t\\tx += 2 ** two_pow\\n\\t\\tans += 1\\n\\t\\ttwo_pow += 1\\n\\treturn ans\\ntwo_pows = [2 ** j - 1 for j in range(1, 33)]\\nT = getInt()\\nfor t in range(T):\\n\\tans = solve()\\n\\tprint(ans)\\n\", \"import sys\\nimport math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, sys.stdin.readline().split()))\\n\\tlst = [0] * n\\n\\tcurr_max = arr[0]\\n\\tfor i in range(len(arr)):\\n\\t\\tif arr[i] < curr_max:\\n\\t\\t\\tlst[i] = curr_max - arr[i]\\n\\t\\tcurr_max = max(curr_max, arr[i])\\n\\ts = max(lst)\\n\\tprint(int(math.log(s, 2)) + 1 if s else 0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [int(e) for e in input().split()]\\n\\tmax_a = a[0]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < max_a:\\n\\t\\t\\tdelta = max_a - a[i]\\n\\t\\t\\tc = 0\\n\\t\\t\\twhile delta > 0:\\n\\t\\t\\t\\tdelta = delta // 2\\n\\t\\t\\t\\tc = c + 1\\n\\t\\t\\tif c > ans:\\n\\t\\t\\t\\tans = c\\n\\t\\telse:\\n\\t\\t\\tmax_a = a[i]\\n\\tprint(ans)\\n\", \"for _ in ' ' * int(input()):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmaxd = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tmaxd = max(maxd, abs(a[i] - a[i - 1]))\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tc = 0\\n\\twhile maxd:\\n\\t\\tc += 1\\n\\t\\tmaxd >>= 1\\n\\tprint(c)\\n\", \"import sys\\nimport math\\n\\ndef num_steps(d):\\n\\tans = 0\\n\\twhile 2 ** ans - 1 < d:\\n\\t\\tans += 1\\n\\treturn ans\\n\\ndef solve_test_case(f):\\n\\tn = int(f.readline())\\n\\ts = f.readline().strip()\\n\\ta = [int(x) for x in s.split(' ')]\\n\\tans = 0\\n\\tmaxs = a[0]\\n\\tfor x in a:\\n\\t\\tmaxs = max(x, maxs)\\n\\t\\tans = max(ans, num_steps(maxs - x))\\n\\tprint(ans)\\n\\ndef solve():\\n\\tf = sys.stdin\\n\\ttc = int(f.readline())\\n\\tfor t in range(tc):\\n\\t\\tsolve_test_case(f)\\nsolve()\\n\", \"from functools import reduce\\nimport os\\nimport sys\\nfrom collections import *\\nfrom math import *\\nfrom bisect import *\\nfrom heapq import *\\nfrom io import BytesIO, IOBase\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef value():\\n\\treturn tuple(map(int, input().split()))\\n\\ndef arr():\\n\\treturn [int(i) for i in input().split()]\\n\\ndef sarr():\\n\\treturn [int(i) for i in input()]\\n\\ndef starr():\\n\\treturn [str(x) for x in input().split()]\\n\\ndef inn():\\n\\treturn int(input())\\n\\ndef svalue():\\n\\treturn tuple(map(str, input().split()))\\n\\ndef parr():\\n\\treturn [value() for i in range(n)]\\nmo = 1000000007\\ninf = 1e+18\\ndiv = 998244353\\nst = defaultdict(int)\\nval = 1\\nfor i in range(1, 101):\\n\\tst[i] = val\\n\\tval *= 2\\nfor _ in range(inn()):\\n\\tn = inn()\\n\\ta = arr()\\n\\tlast = -inf\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tsec = 1\\n\\t\\t\\twhile a[i] < a[i - 1]:\\n\\t\\t\\t\\ta[i] += st[sec]\\n\\t\\t\\t\\tsec += 1\\n\\t\\t\\tans = max(ans, sec - 1)\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(ans)\\n\", \"t = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tinput()\\n\\ta = list(map(int, input().split()))\\n\\t(x, m, d) = (0, -1000000000.0, 0)\\n\\tfor i in a:\\n\\t\\tm = max(m, i)\\n\\t\\td = max(d, m - i)\\n\\twhile d:\\n\\t\\td //= 2\\n\\t\\tx += 1\\n\\tprint(x)\\n\", \"import sys\\n\\ndef get(num):\\n\\tcount = 0\\n\\twhile num > 0:\\n\\t\\tnum //= 2\\n\\t\\tcount += 1\\n\\treturn count\\nt = int(sys.stdin.readline())\\nfor _ in range(t):\\n\\tn = int(sys.stdin.readline())\\n\\tarr = list(map(int, sys.stdin.readline().split()))\\n\\tnax = arr[0]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tnax = max(nax, arr[i])\\n\\t\\tif arr[i] == nax:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tans = max(ans, get(nax - arr[i]))\\n\\tprint(ans)\\n\", \"testCases = int(input())\\nfor i1 in range(testCases):\\n\\tx = int(input())\\n\\tseq = list(map(int, input().split()))\\n\\treq = [0]\\n\\tadd_req = set([0])\\n\\tfor i2 in range(1, x, 1):\\n\\t\\ttemp = seq[i2 - 1] - seq[i2]\\n\\t\\tif temp > 0:\\n\\t\\t\\tseq[i2] = seq[i2 - 1]\\n\\t\\t\\ty = '{0:b}'.format(temp)\\n\\t\\t\\tadd_req.add(len(y))\\n\\tprint(max(add_req))\\n\", \"def highest_set_bit(n):\\n\\tl = 0\\n\\twhile n > 0:\\n\\t\\tn = n >> 1\\n\\t\\tl += 1\\n\\treturn l\\nt = int(input())\\nwhile t:\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ttime = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i - 1] > a[i]:\\n\\t\\t\\tdif = a[i - 1] - a[i]\\n\\t\\t\\ttime = max(time, highest_set_bit(dif))\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(time)\\n\\tt -= 1\\n\", \"import sys\\nimport math\\nimport bisect\\nfrom sys import stdin, stdout\\nfrom math import gcd, floor, sqrt, log2, ceil\\nfrom collections import defaultdict\\nfrom bisect import bisect_left as bl, bisect_right as br\\nfrom collections import Counter\\nip = lambda : int(stdin.readline())\\ninp = lambda : map(int, stdin.readline().split())\\nips = lambda : stdin.readline().rstrip()\\nt = ip()\\nfor _ in range(t):\\n\\tn = ip()\\n\\tarr = list(inp())\\n\\tx = arr[0]\\n\\tm = 0\\n\\tfor i in range(1, n):\\n\\t\\ty = arr[i]\\n\\t\\tif y < x:\\n\\t\\t\\tm = max(m, x - y)\\n\\t\\tx = max(x, y)\\n\\tans = ceil(log2(m + 1))\\n\\tprint(ans)\\n\", \"import math\\n\\ndef info(diff):\\n\\tnthSec = int(math.ceil(math.log(diff + 1, 2)))\\n\\tsum_nth = 2 ** nthSec - 1\\n\\treturn (nthSec, sum_nth)\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tlis = list(map(int, input().split()))\\n\\t(res, nthSec) = (0, 0)\\n\\tfor i in range(n - 1):\\n\\t\\tif lis[i] > lis[i + 1]:\\n\\t\\t\\tdiff = lis[i] - lis[i + 1]\\n\\t\\t\\tif diff > res:\\n\\t\\t\\t\\t(nthSec, res) = info(lis[i] - lis[i + 1])\\n\\t\\t\\tlis[i + 1] = lis[i]\\n\\tprint(nthSec)\\n\", \"import math\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tlis = list(map(int, input().split()))\\n\\tcmax = lis[0]\\n\\tmaxi = 0\\n\\tfor i in lis:\\n\\t\\tif i > cmax:\\n\\t\\t\\tcmax = i\\n\\t\\tmaxi = max(maxi, cmax - i)\\n\\tif maxi == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(int(math.log2(maxi)) + 1)\\n\", \"T = int(input())\\nfor t in range(T):\\n\\tN = int(input())\\n\\tA = [int(_) for _ in input().split()]\\n\\tmax_so_far = A[0]\\n\\tanswer = 0\\n\\tfor i in range(1, N):\\n\\t\\tel = A[i]\\n\\t\\tmax_so_far = max(max_so_far, el)\\n\\t\\tanswer = max(answer, (max_so_far - el).bit_length())\\n\\tprint(answer)\\n\", \"T = int(input())\\nimport math\\nfor t in range(T):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmax_diff = 0\\n\\tlast = a[0]\\n\\tfor i in range(1, len(a)):\\n\\t\\tif a[i] < last:\\n\\t\\t\\tdiff = last - a[i]\\n\\t\\t\\tmax_diff = max(diff, max_diff)\\n\\t\\telse:\\n\\t\\t\\tlast = a[i]\\n\\tif max_diff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tres = int(math.log2(max_diff)) + 1\\n\\t\\tprint(res)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tlst = [int(i) for i in input().split()]\\n\\tmax1 = lst[0]\\n\\tmax2 = 0\\n\\tfor i in range(1, n):\\n\\t\\tif max1 <= lst[i]:\\n\\t\\t\\tmax1 = lst[i]\\n\\t\\telif max2 < max1 - lst[i]:\\n\\t\\t\\tmax2 = max1 - lst[i]\\n\\tnd = 0\\n\\twhile max2 > 0:\\n\\t\\tnd += 1\\n\\t\\tmax2 = max2 - 2 ** (nd - 1)\\n\\tprint(nd)\\n\", \"import math\\nt = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tnl = []\\n\\tmaxi = l[0]\\n\\tfor i in range(0, n):\\n\\t\\tif maxi < l[i]:\\n\\t\\t\\tmaxi = l[i]\\n\\t\\tnl.append(maxi - l[i])\\n\\tk = max(nl)\\n\\tif k > 0:\\n\\t\\tprint(int(math.log2(k)) + 1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tl1 = list(map(int, input().split()))\\n\\tanswer = 0\\n\\tmax_so_far = l1[0]\\n\\tfor i in range(1, n):\\n\\t\\tif l1[i] >= max_so_far:\\n\\t\\t\\tmax_so_far = l1[i]\\n\\t\\telse:\\n\\t\\t\\tanswer = max(answer, (max_so_far - l1[i]).bit_length())\\n\\tprint(answer)\\n\", \"import heapq\\nimport sys\\nfrom math import *\\nimport threading\\nfrom heapq import *\\nfrom itertools import count\\nfrom pprint import pprint\\nfrom collections import defaultdict\\nfrom heapq import heapify, heappop, heappush\\nsys.setrecursionlimit(300000)\\nmod = 10 ** 9 + 7\\ninf = 10 ** 15\\ndecision = ['NO', 'YES']\\nyes = 'YES'\\nno = 'NO'\\nimport os\\nfrom io import BytesIO, IOBase\\nBUFSIZE = 8192\\n\\nclass FastIO(IOBase):\\n\\tnewlines = 0\\n\\n\\tdef __init__(self, file):\\n\\t\\tself._fd = file.fileno()\\n\\t\\tself.buffer = BytesIO()\\n\\t\\tself.writable = 'x' in file.mode or 'r' not in file.mode\\n\\t\\tself.write = self.buffer.write if self.writable else None\\n\\n\\tdef read(self):\\n\\t\\twhile True:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tif not b:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines = 0\\n\\t\\treturn self.buffer.read()\\n\\n\\tdef readline(self):\\n\\t\\twhile self.newlines == 0:\\n\\t\\t\\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n\\t\\t\\tself.newlines = b.count(b'\\\\n') + (not b)\\n\\t\\t\\tptr = self.buffer.tell()\\n\\t\\t\\t(self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\\n\\t\\tself.newlines -= 1\\n\\t\\treturn self.buffer.readline()\\n\\n\\tdef flush(self):\\n\\t\\tif self.writable:\\n\\t\\t\\tos.write(self._fd, self.buffer.getvalue())\\n\\t\\t\\t(self.buffer.truncate(0), self.buffer.seek(0))\\n\\nclass IOWrapper(IOBase):\\n\\n\\tdef __init__(self, file):\\n\\t\\tself.buffer = FastIO(file)\\n\\t\\tself.flush = self.buffer.flush\\n\\t\\tself.writable = self.buffer.writable\\n\\t\\tself.write = lambda s: self.buffer.write(s.encode('ascii'))\\n\\t\\tself.read = lambda : self.buffer.read().decode('ascii')\\n\\t\\tself.readline = lambda : self.buffer.readline().decode('ascii')\\n(sys.stdin, sys.stdout) = (IOWrapper(sys.stdin), IOWrapper(sys.stdout))\\ninput = lambda : sys.stdin.readline().rstrip('\\\\r\\\\n')\\n\\ndef npr(n, r):\\n\\treturn factorial(n) % mod // (factorial(n - r) % mod) if n >= r else 0\\n\\ndef ncr(n, r):\\n\\treturn factorial(n) % mod // (factorial(r) % mod * (factorial(n - r) % mod)) if n >= r else 0\\n\\ndef lower_bound(li, num):\\n\\tanswer = -1\\n\\tstart = 0\\n\\tend = len(li) - 1\\n\\twhile start <= end:\\n\\t\\tmiddle = (end + start) // 2\\n\\t\\tif li[middle] >= num:\\n\\t\\t\\tanswer = middle\\n\\t\\t\\tend = middle - 1\\n\\t\\telse:\\n\\t\\t\\tstart = middle + 1\\n\\treturn answer\\n\\ndef upper_bound(li, num):\\n\\tanswer = -1\\n\\tstart = 0\\n\\tend = len(li) - 1\\n\\twhile start <= end:\\n\\t\\tmiddle = (end + start) // 2\\n\\t\\tif li[middle] <= num:\\n\\t\\t\\tanswer = middle\\n\\t\\t\\tstart = middle + 1\\n\\t\\telse:\\n\\t\\t\\tend = middle - 1\\n\\treturn answer\\n\\ndef abs(x):\\n\\treturn x if x >= 0 else -x\\n\\ndef binary_search(li, val):\\n\\tans = -1\\n\\tlb = 0\\n\\tub = len(li) - 1\\n\\twhile lb <= ub:\\n\\t\\tmid = (lb + ub) // 2\\n\\t\\tif li[mid] > val:\\n\\t\\t\\tub = mid - 1\\n\\t\\telif val > li[mid]:\\n\\t\\t\\tlb = mid + 1\\n\\t\\telse:\\n\\t\\t\\tans = mid\\n\\t\\t\\tbreak\\n\\treturn ans\\n\\ndef kadane(x):\\n\\tsum_so_far = 0\\n\\tcurrent_sum = 0\\n\\tfor i in x:\\n\\t\\tcurrent_sum += i\\n\\t\\tif current_sum < 0:\\n\\t\\t\\tcurrent_sum = 0\\n\\t\\telse:\\n\\t\\t\\tsum_so_far = max(sum_so_far, current_sum)\\n\\treturn sum_so_far\\n\\ndef pref(li):\\n\\tpref_sum = [0]\\n\\tfor i in li:\\n\\t\\tpref_sum.append(pref_sum[-1] + i)\\n\\treturn pref_sum\\n\\ndef SieveOfEratosthenes(n):\\n\\tprime = [{1, i} for i in range(n + 1)]\\n\\tp = 2\\n\\twhile p <= n:\\n\\t\\tfor i in range(p * 2, n + 1, p):\\n\\t\\t\\tprime[i].add(p)\\n\\t\\tp += 1\\n\\treturn prime\\n\\ndef primefactors(n):\\n\\tfactors = []\\n\\twhile n % 2 == 0:\\n\\t\\tfactors.append(2)\\n\\t\\tn //= 2\\n\\tfor i in range(3, int(sqrt(n)) + 1, 2):\\n\\t\\twhile n % i == 0:\\n\\t\\t\\tfactors.append(i)\\n\\t\\t\\tn //= i\\n\\tif n > 2:\\n\\t\\tfactors.append(n)\\n\\treturn factors\\n\\ndef prod(li):\\n\\tans = 1\\n\\tfor i in li:\\n\\t\\tans *= i\\n\\treturn ans\\n\\ndef sumk(a, b):\\n\\tprint('called for', a, b)\\n\\tans = a * (a + 1) // 2\\n\\tans -= b * (b + 1) // 2\\n\\treturn ans\\n\\ndef sumi(n):\\n\\tans = 0\\n\\tif len(n) > 1:\\n\\t\\tfor x in n:\\n\\t\\t\\tans += int(x)\\n\\t\\treturn ans\\n\\telse:\\n\\t\\treturn int(n)\\n\\ndef checkwin(x, a):\\n\\tif a[0][0] == a[1][1] == a[2][2] == x:\\n\\t\\treturn 1\\n\\tif a[0][2] == a[1][1] == a[2][0] == x:\\n\\t\\treturn 1\\n\\tif len(set(a[0])) == 1 and a[0][0] == x or (len(set(a[1])) == 1 and a[1][0] == x) or (len(set(a[2])) == 1 and a[2][0] == x):\\n\\t\\treturn 1\\n\\tif len(set(a[0][:])) == 1 and a[0][0] == x or (len(set(a[1][:])) == 1 and a[0][1] == x) or (len(set(a[2][:])) == 1 and a[0][0] == x):\\n\\t\\treturn 1\\n\\treturn 0\\nkarmanya = int(input())\\nwhile karmanya != 0:\\n\\tkarmanya -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tdiff = a[i - 1] - a[i]\\n\\t\\tif diff > 0:\\n\\t\\t\\tans = max(ans, floor(log(diff) / log(2)) + 1)\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(ans)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tw = [int(k) for k in input().split()]\\n\\tmx = -10 ** 10\\n\\tres = 0\\n\\tfor j in w:\\n\\t\\tres = max(res, mx - j)\\n\\t\\tmx = max(mx, j)\\n\\tprint(len(bin(res)[2:]) if res > 0 else 0)\\n\", \"from math import log2\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\ti = 1\\n\\ts = 0\\n\\twhile i < len(l):\\n\\t\\tif l[i - 1] > l[i]:\\n\\t\\t\\ts = max(s, l[i - 1] - l[i])\\n\\t\\t\\tl[i] = l[i - 1]\\n\\t\\ti = i + 1\\n\\tif s == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tj = int(log2(s)) + 1\\n\\t\\tprint(j)\\n\", \"import sys\\nimport math\\ninf = int(10000000000.0)\\ninput = sys.stdin.readline\\nt_ = int(input())\\nwhile t_:\\n\\tt_ -= 1\\n\\tn = int(input())\\n\\tlis = list(map(int, input().split()))\\n\\tm = lis[0]\\n\\td = 0\\n\\tfor i in range(n):\\n\\t\\tif lis[i] > m:\\n\\t\\t\\tm = lis[i]\\n\\t\\td = max(d, m - lis[i])\\n\\tm = d\\n\\tif m:\\n\\t\\tprint(int(math.log2(m)) + 1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tm = a[0]\\n\\tb = 0\\n\\tfor x in a:\\n\\t\\tm = max(m, x)\\n\\t\\tb = max(b, m - x)\\n\\ts = 0\\n\\twhile b > 0:\\n\\t\\tb >>= 1\\n\\t\\ts += 1\\n\\tprint(s)\\n\", \"from sys import stdin\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, stdin.readline().split()))\\n\\tprev = l[0]\\n\\tdiff = []\\n\\tfor e in l:\\n\\t\\tif e < prev:\\n\\t\\t\\tdiff.append(prev - e)\\n\\t\\telse:\\n\\t\\t\\tprev = e\\n\\tif len(diff) == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tdiff.sort()\\n\\t\\ta = diff[-1]\\n\\t\\ti = 0\\n\\t\\ts = 0\\n\\t\\twhile a > s:\\n\\t\\t\\ts += 2 ** i\\n\\t\\t\\ti += 1\\n\\t\\tprint(i)\\n\", \"import math\\ninputn = int(input())\\nans = []\\na = []\\nfor i in range(inputn):\\n\\tl = int(input())\\n\\tc = input()\\n\\tal = c.split()\\n\\tm = map(int, al)\\n\\tli = list(m)\\n\\ttm = 0\\n\\tfor j in range(1, l):\\n\\t\\tt = 0\\n\\t\\tif li[j - 1] > li[j]:\\n\\t\\t\\tdiff = li[j - 1] - li[j]\\n\\t\\t\\tn = int(math.log2(diff)) + 1\\n\\t\\t\\tif diff <= pow(2, n) - 1:\\n\\t\\t\\t\\tt = n\\n\\t\\t\\telse:\\n\\t\\t\\t\\tt = n\\n\\t\\t\\tli[j] = li[j - 1]\\n\\t\\tif t > tm:\\n\\t\\t\\ttm = t\\n\\tans.append(tm)\\nfor i in ans:\\n\\tprint(i)\\n\", \"from math import log2\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif l[i - 1] > l[i]:\\n\\t\\t\\tans = max(ans, int(log2(l[i - 1] - l[i])) + 1)\\n\\t\\t\\tl[i] = l[i - 1]\\n\\tprint(ans)\\n\", \"def find_T(n):\\n\\ta = bin(n)\\n\\tm = len(a)\\n\\tfor i in range(m):\\n\\t\\tif a[i] == '1':\\n\\t\\t\\treturn m - i\\n\\ndef find_ans(n):\\n\\ts = list(map(int, input().split()))\\n\\tb = s[0]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif s[i] >= b:\\n\\t\\t\\tb = s[i]\\n\\t\\telse:\\n\\t\\t\\tans = max(ans, find_T(b - s[i]))\\n\\treturn ans\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tprint(find_ans(n))\\n\", \"t = int(input())\\nfor tc in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tsol = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tx = a[i - 1] - a[i]\\n\\t\\t\\tsol = max(sol, len(bin(x)) - 2)\\n\\t\\t\\ta[i] += x\\n\\tprint(sol)\\n\", \"import math\\nT = int(input())\\nfor _ in range(T):\\n\\telements = int(input())\\n\\tarr = input().split()\\n\\tfirst_element = int(arr[0])\\n\\tmax_second = 0\\n\\tcalculations = False\\n\\tfor el in arr[1:]:\\n\\t\\tel = int(el)\\n\\t\\tif el < first_element:\\n\\t\\t\\tcalculations = True\\n\\t\\t\\tdiff = int(math.log2(first_element - el))\\n\\t\\t\\tif diff > max_second:\\n\\t\\t\\t\\tmax_second = diff\\n\\t\\telse:\\n\\t\\t\\tfirst_element = el\\n\\tif calculations:\\n\\t\\tprint(max_second + 1)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"for _ in range(int(input())):\\n\\tsize = int(input())\\n\\t(array, time, check) = (list(map(int, input().split())), -1000000000.0, 0)\\n\\tfor x in array:\\n\\t\\ttime = max(time, x)\\n\\t\\tcheck = max(check, time - x)\\n\\tprint(check and len(f'{check:b}'))\\n\", \"import sys\\nimport math\\nfor _ in range(int(sys.stdin.readline())):\\n\\tn = int(sys.stdin.readline())\\n\\ta = list(map(int, sys.stdin.readline().split()))\\n\\tb = a[0]\\n\\tc = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] > b:\\n\\t\\t\\tb = a[i]\\n\\t\\telif c < b - a[i]:\\n\\t\\t\\tc = b - a[i]\\n\\tif c == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(math.floor(math.log(c, 2)) + 1)\\n\", \"from math import ceil, log2\\nfor x in range(int(input())):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tres = 0\\n\\tcur = 0\\n\\tfor x in range(1, n):\\n\\t\\tif arr[x] < arr[x - 1]:\\n\\t\\t\\tres = max(res, int(log2(arr[x - 1] - arr[x])) + 1)\\n\\t\\t\\tarr[x] = arr[x - 1]\\n\\tprint(res)\\n\", \"for T in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tRet = 0\\n\\tfor i in range(n - 1):\\n\\t\\tif a[i] > a[i + 1]:\\n\\t\\t\\tBin = bin(a[i] - a[i + 1])[2:]\\n\\t\\t\\tRet = max(Ret, len(Bin) - Bin.index('1'))\\n\\t\\t\\ta[i + 1] = a[i]\\n\\tprint(Ret)\\n\", \"import math\\nR1 = lambda : list(map(int, input().split()))\\nR2 = lambda : int(input())\\nt = R2()\\nfor _ in range(int(t)):\\n\\t(n, a) = (R2(), R1())\\n\\tl = a[0]\\n\\tans = -10000000000.0\\n\\tfor i in range(1, n):\\n\\t\\tif l > a[i]:\\n\\t\\t\\tans = max(ans, l - a[i])\\n\\t\\telse:\\n\\t\\t\\tl = a[i]\\n\\tif ans <= 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(int(math.log2(ans)) + 1)\\n\", \"from sys import stdin, stdout\\n\\ndef f(a, n):\\n\\tans = 0\\n\\tm = a[0]\\n\\tfor i in range(1, n):\\n\\t\\tif m > a[i]:\\n\\t\\t\\tx = m - a[i]\\n\\t\\t\\tbi = len(bin(x)) - 2\\n\\t\\t\\tif bi > ans:\\n\\t\\t\\t\\tans = bi\\n\\t\\t\\tif m < a[i]:\\n\\t\\t\\t\\tm = a[i]\\n\\t\\telse:\\n\\t\\t\\tm = a[i]\\n\\tprint(ans)\\nt = int(stdin.readline())\\nfor _ in range(t):\\n\\tn = int(stdin.readline())\\n\\ta = list(map(int, stdin.readline().split()))\\n\\tf(a, n)\\n\", \"T = int(input())\\nfor _ in range(T):\\n\\tN = int(input())\\n\\ta = [int(x) for x in input().split(' ')]\\n\\tprv = int(-1000000000.0)\\n\\tmaxdif = 0\\n\\tfor x in a:\\n\\t\\tif x < prv:\\n\\t\\t\\tmaxdif = max(maxdif, prv - x)\\n\\t\\telse:\\n\\t\\t\\tprv = x\\n\\tans = 0\\n\\twhile maxdif:\\n\\t\\tans += 1\\n\\t\\tmaxdif //= 2\\n\\tprint(ans)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tar = list(map(int, input().split()))\\n\\tx = 0\\n\\tfor i in range(n - 1):\\n\\t\\ty = ar[i + 1] - ar[i]\\n\\t\\tif y < 0:\\n\\t\\t\\tx = max(x, len(bin(-y)) - 2)\\n\\t\\t\\tar[i + 1] = ar[i]\\n\\tprint(x)\\n\", \"import sys\\nq = int(input())\\nans = []\\nfor _ in range(q):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tbig = a[0]\\n\\tneed = 0\\n\\tfor v in a:\\n\\t\\tif v < big:\\n\\t\\t\\tneed = max(need, big - v)\\n\\t\\telse:\\n\\t\\t\\tbig = v\\n\\tcur = 0\\n\\tp = 0\\n\\twhile p < need:\\n\\t\\tcur += 1\\n\\t\\tp *= 2\\n\\t\\tp += 1\\n\\tans.append(cur)\\nprint('\\\\n'.join(map(str, ans)))\\n\", \"for w in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tx = a[0]\\n\\tl = [0] * 33\\n\\tm = -1\\n\\tfor i in range(33):\\n\\t\\tl[i] = pow(2, i)\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] >= a[i - 1]:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tdiff = a[i - 1] - a[i]\\n\\t\\t\\tfor j in range(33):\\n\\t\\t\\t\\tif l[j] >= diff:\\n\\t\\t\\t\\t\\ta[i] = a[i - 1]\\n\\t\\t\\t\\t\\tif l[j] == diff:\\n\\t\\t\\t\\t\\t\\tm = max(m, j)\\n\\t\\t\\t\\t\\telif j > 0:\\n\\t\\t\\t\\t\\t\\tm = max(m, j - 1)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tm = max(m, j)\\n\\t\\t\\t\\t\\tbreak\\n\\tprint(m + 1)\\n\", \"t = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmax_val = a[0]\\n\\tmax_diff = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] > max_val:\\n\\t\\t\\tmax_val = a[i]\\n\\t\\tif max_val - a[i] > max_diff:\\n\\t\\t\\tmax_diff = max_val - a[i]\\n\\ttotal = 0\\n\\tnum = 1\\n\\tcount = 0\\n\\twhile max_diff > total:\\n\\t\\ttotal += num\\n\\t\\tnum *= 2\\n\\t\\tcount += 1\\n\\tprint(count)\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tc = 0\\n\\tfor j in range(1, len(l)):\\n\\t\\tif l[j] - l[j - 1] < 0:\\n\\t\\t\\tc = max(c, int(math.log(l[j - 1] - l[j], 2)) + 1)\\n\\t\\t\\tl[j] = l[j - 1]\\n\\tprint(c)\\n\", \"import math\\nn = input()\\nn = int(n)\\nfor i in range(n):\\n\\tl = int(input())\\n\\tx = input()\\n\\tarr = x.split(' ')\\n\\tminV = -(1 << 32)\\n\\tres = 0\\n\\tfor j in arr:\\n\\t\\tj = int(j)\\n\\t\\tif j < minV:\\n\\t\\t\\tt = math.ceil(math.log2(minV - j + 1))\\n\\t\\t\\tres = max(t, res)\\n\\t\\telse:\\n\\t\\t\\tminV = j\\n\\tprint(res)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tlst = [int(i) for i in input().split()]\\n\\tresult = 0\\n\\tfor i in range(1, n):\\n\\t\\tdiff = lst[i - 1] - lst[i]\\n\\t\\tif diff > 0:\\n\\t\\t\\tresult = max(result, len(bin(diff)) - 2)\\n\\t\\t\\tlst[i] = lst[i - 1]\\n\\tprint(result)\\n\", \"import math\\nn = int(input())\\nfor _ in range(n):\\n\\tm = int(input())\\n\\tlis = [int(x) for x in input().split(' ')]\\n\\tcur_max = lis[0]\\n\\tdiff_max = -10000000000.0\\n\\tfor i in range(1, len(lis)):\\n\\t\\tdiff = cur_max - lis[i]\\n\\t\\tif diff_max < diff:\\n\\t\\t\\tdiff_max = diff\\n\\t\\tif lis[i] > cur_max:\\n\\t\\t\\tcur_max = lis[i]\\n\\tprint(int(math.log2(diff_max) + 1) if diff_max > 0 else 0)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\ta = 0\\n\\tbits = [0 for i in range(36)]\\n\\tans = 0\\n\\tfor i in range(1, n):\\n\\t\\tif A[i] < A[i - 1]:\\n\\t\\t\\ta = A[i - 1] - A[i]\\n\\t\\t\\tA[i] = A[i - 1]\\n\\t\\t\\tj = 0\\n\\t\\t\\twhile a:\\n\\t\\t\\t\\ta = a // 2\\n\\t\\t\\t\\tj += 1\\n\\t\\t\\tans = max(ans, j)\\n\\tprint(ans)\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tA = list(map(int, input().split()))\\n\\tB = []\\n\\tfor i in range(1, n):\\n\\t\\tif A[i] < A[i - 1]:\\n\\t\\t\\tB.append(A[i - 1] - A[i])\\n\\t\\t\\tA[i] = A[i - 1]\\n\\tif len(B):\\n\\t\\tans = math.log(max(B), 2)\\n\\t\\tif math.floor(ans) == ans:\\n\\t\\t\\tans += 1\\n\\t\\tans = math.ceil(ans)\\n\\t\\tprint(ans)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"from math import log2\\nT = int(input())\\nfor t in range(T):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tmaxGap = 0\\n\\tmaxVal = -1000000000\\n\\tfor i in range(n):\\n\\t\\tmaxVal = max(maxVal, a[i])\\n\\t\\tmaxGap = max(maxGap, maxVal - a[i])\\n\\tif maxGap == 0:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tprint(int(log2(maxGap)) + 1)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nout = []\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tbig = l[0]\\n\\tneed = 0\\n\\tfor v in l:\\n\\t\\tif v < big:\\n\\t\\t\\tneed = max(need, big - v)\\n\\t\\telse:\\n\\t\\t\\tbig = v\\n\\tcurr = 0\\n\\tp = 0\\n\\twhile p < need:\\n\\t\\tcurr += 1\\n\\t\\tp *= 2\\n\\t\\tp += 1\\n\\tout.append(curr)\\nprint('\\\\n'.join(map(str, out)))\\n\", \"import sys\\nfrom math import sqrt, floor\\nfrom collections import deque, Counter\\ninp = sys.stdin.readline\\nread = lambda : list(map(int, inp().split()))\\n\\ndef a():\\n\\tans = ''\\n\\tfor _ in range(int(inp())):\\n\\t\\tans += inp()\\n\\tprint(ans)\\n\\ndef b():\\n\\tans = ''\\n\\tfor _ in range(int(inp())):\\n\\t\\tn = int(inp())\\n\\t\\tarr = deque(sorted(read()))\\n\\t\\tarr2 = deque()\\n\\t\\tfor i in range(n // 2):\\n\\t\\t\\tarr2.appendleft(arr.pop())\\n\\t\\t\\tarr2.appendleft(arr.popleft())\\n\\t\\tif arr:\\n\\t\\t\\tarr2.appendleft(arr.pop())\\n\\t\\tprint(*arr2)\\n\\ndef c():\\n\\tans = ''\\n\\tfor _ in range(int(inp())):\\n\\t\\tn = int(inp())\\n\\t\\tarr = read()\\n\\t\\tmi = 0\\n\\t\\tprev = arr[0]\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tcurr = arr[i]\\n\\t\\t\\tif curr < prev:\\n\\t\\t\\t\\tmi = max(mi, len(bin(prev - curr)[2:]))\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprev = curr\\n\\t\\tans += str(mi) + '\\\\n'\\n\\tprint(ans)\\nc()\\n\", \"t = int(input())\\nwhile t:\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ttime = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i - 1] > a[i]:\\n\\t\\t\\tdif = a[i - 1] - a[i]\\n\\t\\t\\tti = 0\\n\\t\\t\\ts = 1\\n\\t\\t\\twhile a[i - 1] > a[i]:\\n\\t\\t\\t\\ta[i] += s\\n\\t\\t\\t\\tti += 1\\n\\t\\t\\t\\ts *= 2\\n\\t\\t\\ttime = max(ti, time)\\n\\t\\t\\ta[i] = a[i - 1]\\n\\tprint(time)\\n\\tt -= 1\\n\", \"def to_list(s):\\n\\treturn list(map(lambda x: int(x), s.split(' ')))\\n\\ndef get_x(n, powers):\\n\\tk = 0\\n\\tpower = powers[k]\\n\\twhile n >= power:\\n\\t\\tk += 1\\n\\t\\tpower = powers[k]\\n\\treturn k\\n\\ndef solve(a):\\n\\tb = []\\n\\tb.append(a[0])\\n\\tmin_x = 0\\n\\tpowers = [2 ** item for item in range(32)]\\n\\tfor i in range(1, len(a)):\\n\\t\\tif a[i] < b[i - 1]:\\n\\t\\t\\tb.append(b[i - 1])\\n\\t\\t\\tdelta = b[i - 1] - a[i]\\n\\t\\t\\tx = get_x(delta, powers)\\n\\t\\t\\tif x > min_x:\\n\\t\\t\\t\\tmin_x = x\\n\\t\\telse:\\n\\t\\t\\tb.append(a[i])\\n\\treturn min_x\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ta = to_list(input())\\n\\tprint(solve(a))\\n\", \"t = int(input())\\nfor case in range(1, t + 1):\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split(' ')]\\n\\ttick = 0\\n\\tprev = -2000000000.0\\n\\tfor a in arr:\\n\\t\\tif a > prev:\\n\\t\\t\\tprev = a\\n\\t\\telse:\\n\\t\\t\\twhile a + 2 ** tick - 1 < prev:\\n\\t\\t\\t\\ttick += 1\\n\\tprint(tick)\\n\", \"for _ in ' ' * int(input()):\\n\\ta = int(input())\\n\\tb = list(map(int, input().split()))\\n\\ts = j = 0\\n\\tfor i in range(1, a):\\n\\t\\tif b[i - 1] > b[i]:\\n\\t\\t\\ts = max(s, b[i - 1] - b[i])\\n\\t\\t\\tb[i] = b[i - 1]\\n\\twhile s:\\n\\t\\tj += 1\\n\\t\\ts //= 2\\n\\tprint(j)\\n\", \"import math\\n\\ndef solve():\\n\\tn = int(input())\\n\\tarr = [int(x) for x in input().split()]\\n\\tmx = arr[0]\\n\\tmdis = 0\\n\\tfor i in range(1, len(arr)):\\n\\t\\tmdis = max(mdis, mx - arr[i])\\n\\t\\tmx = max(mx, arr[i])\\n\\tif mdis == 0:\\n\\t\\treturn 0\\n\\tfor i in range(0, 60):\\n\\t\\tmdis -= 1 << i\\n\\t\\tif mdis <= 0:\\n\\t\\t\\treturn i + 1\\nT = int(input())\\nwhile T > 0:\\n\\tT -= 1\\n\\tprint(solve())\\n\", \"t = int(input())\\nfor testcase in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tmx = 0\\n\\tfor i in range(1, len(a)):\\n\\t\\tif a[i] >= a[i - 1]:\\n\\t\\t\\tcontinue\\n\\t\\tdiff = a[i - 1] - a[i]\\n\\t\\tmx = max(mx, len(str(bin(diff))) - 2)\\n\\t\\ta[i] = a[i - 1]\\n\\tprint(mx)\\n\", \"from sys import stdin, stderr\\n\\ndef rl():\\n\\treturn [int(w) for w in stdin.readline().split()]\\n(t,) = rl()\\nfor _ in range(t):\\n\\t(n,) = rl()\\n\\ta = rl()\\n\\tm = a[n - 1]\\n\\td = 0\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif a[i] < m:\\n\\t\\t\\tm = a[i]\\n\\t\\telif a[i] > m + d:\\n\\t\\t\\td = a[i] - m\\n\\tr = 0\\n\\tr2 = 1\\n\\twhile r2 <= d:\\n\\t\\tr += 1\\n\\t\\tr2 *= 2\\n\\tprint(r)\\n\", \"t = int(input())\\nfor z in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int, input().split()))\\n\\tm = l[0]\\n\\ts = 0\\n\\tfor i in range(1, n):\\n\\t\\tif l[i] > m:\\n\\t\\t\\tm = l[i]\\n\\t\\telse:\\n\\t\\t\\ts = max(s, -l[i] + m)\\n\\ti = 1\\n\\twhile 2 ** (i - 1) < s:\\n\\t\\ti += 1\\n\\tif 2 ** (i - 1) > s:\\n\\t\\ti -= 1\\n\\tl2 = l[:]\\n\\tl2.sort()\\n\\tif l == l2:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(i)\\n\", \"def msb(num):\\n\\tcnt = 0\\n\\twhile num > 0:\\n\\t\\tnum >>= 1\\n\\t\\tcnt += 1\\n\\treturn cnt\\nt = int(input(''))\\nfor i in range(t):\\n\\tn = int(input(''))\\n\\ta = []\\n\\tcurr_input = input('')\\n\\tfor j in curr_input.split(' '):\\n\\t\\ta.append(int(j))\\n\\tprev = a[0] if len(a) > 0 else 0\\n\\tmax_diff = 0\\n\\tfor num in a[1:]:\\n\\t\\tcurr = 0\\n\\t\\tif num < prev:\\n\\t\\t\\tcurr = prev - num\\n\\t\\tprev = curr + num\\n\\t\\tmax_diff = max(max_diff, curr)\\n\\tprint(msb(max_diff))\\n\", \"import math\\n\\ndef get_max_Gap(arr):\\n\\tmx = arr[0]\\n\\tmx_gap = 0\\n\\tfor i in range(len(arr)):\\n\\t\\tmx_gap = max(mx_gap, mx - arr[i])\\n\\t\\tmx = max(mx, arr[i])\\n\\treturn mx_gap\\n\\ndef solution():\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\tarr = list(map(int, input().split()))\\n\\t\\tmx = get_max_Gap(arr)\\n\\t\\tif mx != 0:\\n\\t\\t\\tres = math.ceil(math.log2(mx + 1))\\n\\t\\t\\tprint(res)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\nimport sys\\nimport threading\\nsys.setrecursionlimit(1 << 30)\\nthreading.stack_size(1 << 27)\\nthread = threading.Thread(target=solution)\\nthread.start()\\nthread.join()\\n\", \"def poweredAddtn(arr):\\n\\tm = arr[0]\\n\\tadd = 0\\n\\tx = 0\\n\\tfor i in arr:\\n\\t\\twhile m > i + add:\\n\\t\\t\\tx += 1\\n\\t\\t\\tadd += 2 ** (x - 1)\\n\\t\\tm = max(m, i)\\n\\tprint(x)\\n\\ndef main():\\n\\tt = int(input())\\n\\tfor i in range(t):\\n\\t\\tinput()\\n\\t\\tarr = list(map(int, input().split()))\\n\\t\\tpoweredAddtn(arr)\\nmain()\\n\", \"import math\\nt = int(input())\\nfor i in range(0, t):\\n\\tcantidad = int(input())\\n\\tnumeros = [int(x) for x in input().split()]\\n\\tprimero = 0\\n\\tcontador = 1\\n\\tpasos = 0\\n\\tlista_menos = []\\n\\tlista_mas = []\\n\\tanterior = numeros[0]\\n\\tdiferencia = 0\\n\\twhile contador < len(numeros):\\n\\t\\tprimero = contador - 1\\n\\t\\tif contador < len(numeros):\\n\\t\\t\\tlista = []\\n\\t\\t\\tif contador == 1:\\n\\t\\t\\t\\tanterior = numeros[0]\\n\\t\\t\\tlista.append(numeros[primero])\\n\\t\\t\\twhile numeros[contador] - numeros[contador - 1] < 0:\\n\\t\\t\\t\\tlista.append(numeros[contador])\\n\\t\\t\\t\\tcontador += 1\\n\\t\\t\\t\\tif contador == len(numeros):\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tresta = lista[0] - lista[-1]\\n\\t\\t\\tif anterior > lista[0]:\\n\\t\\t\\t\\tresta += anterior - lista[0]\\n\\t\\t\\tanterior = lista[-1] + resta\\n\\t\\t\\tif diferencia < resta:\\n\\t\\t\\t\\tdiferencia = resta\\n\\t\\t\\tcontador += 1\\n\\t\\telse:\\n\\t\\t\\tresta = 0\\n\\t\\t\\tif numeros[-2] > numeros[-1]:\\n\\t\\t\\t\\tresta = numeros[-2] - numeros[-1]\\n\\t\\t\\tif diferencia < resta:\\n\\t\\t\\t\\tdiferencia = resta\\n\\t\\t\\tcontador += 1\\n\\twhile 2 ** pasos - 1 < diferencia:\\n\\t\\tpasos += 1\\n\\tprint(pasos)\\n\", \"import sys\\ninput = sys.stdin.readline\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans = 0\\n\\tfor i in range(n - 1):\\n\\t\\tdiff = a[i] - a[i + 1]\\n\\t\\tif diff <= 0:\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tans = max(len(bin(diff)) - 2, ans)\\n\\t\\t\\ta[i + 1] = a[i]\\n\\tprint(ans)\\n\", \"from math import log2 as l, floor as f\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = map(int, input().split())\\n\\tx = 0\\n\\tm = -1e+100\\n\\tfor i in a:\\n\\t\\tm = max(m, i)\\n\\t\\tx = max(x, m - i)\\n\\tif x == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(f(l(x) + 1))\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tif n == 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tmini = 0\\n\\t\\ti = 1\\n\\t\\tmark = 0\\n\\t\\tf = 0\\n\\t\\twhile i < n:\\n\\t\\t\\tif a[i] >= a[i - 1] and f == 0:\\n\\t\\t\\t\\tmark = i\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telif a[i] < a[mark]:\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tlast = i\\n\\t\\t\\t\\td = a[mark] - min(a[mark:last])\\n\\t\\t\\t\\tif d > mini:\\n\\t\\t\\t\\t\\tmini = d\\n\\t\\t\\t\\tf = 0\\n\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tmark = last\\n\\t\\tif mark != n - 1:\\n\\t\\t\\td = a[mark] - min(a[mark:])\\n\\t\\t\\tif d > mini:\\n\\t\\t\\t\\tmini = d\\n\\t\\tif mini != 0:\\n\\t\\t\\tans = len(bin(mini)[2:])\\n\\t\\t\\tprint(ans)\\n\\t\\telse:\\n\\t\\t\\tprint(0)\\n\", \"import math\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tw = list(map(int, input().split()))\\n\\tb = 0\\n\\tfor j in range(n - 1):\\n\\t\\tif w[j] > w[j + 1]:\\n\\t\\t\\tb = max(b, int(math.log2(w[j] - w[j + 1])) + 1)\\n\\t\\t\\tw[j + 1] = w[j]\\n\\tprint(b)\\n\", \"import math\\nlist_ans = []\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tlist1 = list(map(int, input().split()))\\n\\tans = 0\\n\\ta = 0\\n\\tb = list1[-1]\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif list1[i] - b > a:\\n\\t\\t\\ta = list1[i] - b\\n\\t\\telif list1[i] < b:\\n\\t\\t\\tb = list1[i]\\n\\tlist_ans.append(math.ceil(math.log(a + 1, 2)))\\nfor item in list_ans:\\n\\tprint(item)\\n\", \"import math\\n\\ndef solve(arr):\\n\\tres = 0\\n\\tprev_max = arr[0]\\n\\tfor i in arr[1:]:\\n\\t\\tif i < prev_max:\\n\\t\\t\\tres = max(res, math.ceil(math.log(prev_max - i + 1) / math.log(2)))\\n\\t\\tprev_max = max(i, prev_max)\\n\\tprint(res)\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tarr = list(map(int, input().split()))\\n\\tsolve(arr)\\n\", \"import math\\nt = int(input())\\nans = []\\n\\ndef solve(a, n):\\n\\tb = a[:]\\n\\tmaxtime = 0\\n\\ttime = 0\\n\\tfor x in range(1, n):\\n\\t\\tif b[x - 1] > b[x]:\\n\\t\\t\\ttime = math.ceil(math.log(b[x - 1] - b[x] + 1) / math.log(2))\\n\\t\\t\\tmaxtime = max(time, maxtime)\\n\\t\\t\\tb[x] = b[x - 1]\\n\\treturn maxtime\\nfor x in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tans.append(solve(a, n))\\nfor a in ans:\\n\\tprint(a)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tb = []\\n\\tmax = a[0]\\n\\tfor i in range(n):\\n\\t\\tif max < a[i]:\\n\\t\\t\\tmax = a[i]\\n\\t\\tb.append(max)\\n\\tmax = 0\\n\\tfor i in range(n):\\n\\t\\tif max < b[i] - a[i]:\\n\\t\\t\\tmax = b[i] - a[i]\\n\\tprint(0 if max == 0 else len(bin(max)[2:]))\\n\", \"import math\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split(' ')))\\n\\tc = 0\\n\\tfor x in range(1, n):\\n\\t\\tif a[x] < a[x - 1]:\\n\\t\\t\\tc = max(a[x - 1] - a[x], c)\\n\\t\\t\\ta[x] = a[x - 1]\\n\\tif c == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(int(math.log(c, 2)) + 1)\\n\", \"def f(a):\\n\\tmax_val = a[0]\\n\\tdiff = 0\\n\\tsize = len(a)\\n\\tfor i in range(size):\\n\\t\\tif max_val < a[i]:\\n\\t\\t\\tmax_val = a[i]\\n\\t\\tdiff = max(diff, max_val - a[i])\\n\\tif diff == 0:\\n\\t\\treturn 0\\n\\tn = 0\\n\\tb = 1\\n\\twhile b - 1 < diff:\\n\\t\\tb *= 2\\n\\t\\tn += 1\\n\\treturn n\\nm = int(input())\\nres = []\\nfor _ in range(m):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tres.append(f(a))\\nfor s in res:\\n\\tprint(s)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tmaxx = a[0]\\n\\tval = []\\n\\tfor i in a[1:]:\\n\\t\\tif maxx > i:\\n\\t\\t\\tval.append(maxx - i)\\n\\t\\telse:\\n\\t\\t\\tmaxx = i\\n\\tif val:\\n\\t\\tx = max(val)\\n\\t\\ti = 0\\n\\t\\twhile x > 0:\\n\\t\\t\\tx -= 2 ** i\\n\\t\\t\\ti += 1\\n\\t\\tprint(i)\\n\\telse:\\n\\t\\tprint(0)\\n\", \"import sys\\nlines = sys.stdin.readlines()\\nT = int(lines[0].strip())\\nfor t in range(T):\\n\\tn = int(lines[2 * t + 1].strip())\\n\\tnums = list(map(int, lines[2 * t + 2].strip().split(' ')))\\n\\tmaxSec = 0\\n\\ttmpMax = nums[0]\\n\\tfor i in range(1, n):\\n\\t\\tif nums[i] < tmpMax:\\n\\t\\t\\tdiff = bin(tmpMax - nums[i])[2:]\\n\\t\\t\\tmaxSec = max(maxSec, len(diff))\\n\\t\\telse:\\n\\t\\t\\ttmpMax = nums[i]\\n\\tprint(maxSec)\\n\", \"t = int(input())\\nfor test_case in range(t):\\n\\tn = int(input())\\n\\tarray = list(map(int, input().split()))\\n\\tmax_diff = 0\\n\\tmax_val = array[0]\\n\\tfor i in range(1, len(array), 1):\\n\\t\\tif array[i] < max_val:\\n\\t\\t\\tmax_diff = max(max_diff, max_val - array[i])\\n\\t\\telse:\\n\\t\\t\\tmax_val = array[i]\\n\\tcnt = 0\\n\\tif max_diff > 0:\\n\\t\\tj = 1\\n\\t\\tcnt = 1\\n\\t\\twhile max_diff > j:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\tj = j * 2 + 1\\n\\tprint(cnt)\\n\", \"import sys\\nimport math\\nfrom collections import Counter\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ti = 0\\n\\tx = 0\\n\\twhile i < n:\\n\\t\\tcurr = i\\n\\t\\tminLesser = a[i]\\n\\t\\twhile i + 1 < n and a[i + 1] < a[curr]:\\n\\t\\t\\tminLesser = min(a[i + 1], minLesser)\\n\\t\\t\\ti += 1\\n\\t\\tx = max(a[curr] - minLesser, x)\\n\\t\\ti += 1\\n\\tprint(int(math.log2(x)) + 1 if x >= 1 else 0)\\n\", \"import math\\nt = int(input())\\nwhile t > 0:\\n\\tt -= 1\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\tma = a[0]\\n\\tdiff = 0\\n\\tfor i in range(n):\\n\\t\\tma = max(ma, a[i])\\n\\t\\tif ma > a[i]:\\n\\t\\t\\ttemp = ma - a[i]\\n\\t\\t\\tdiff = max(diff, temp)\\n\\td = math.log(diff + 1) / math.log(2)\\n\\tprint(math.ceil(d))\\n\", \"import math\\nfrom sys import stdin, stdout\\nt = int(stdin.readline().strip())\\n\\ndef solve():\\n\\tn = int(stdin.readline().strip())\\n\\tarr = list(map(int, stdin.readline().strip().split()))\\n\\tans = 0\\n\\tnow = arr[0]\\n\\tfor i in range(1, len(arr)):\\n\\t\\tif arr[i] < now:\\n\\t\\t\\tans = max(ans, len(bin(now - arr[i])[2:]))\\n\\t\\telse:\\n\\t\\t\\tnow = arr[i]\\n\\tstdout.writelines(str(ans) + '\\\\n')\\nwhile t:\\n\\tt -= 1\\n\\tsolve()\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = [int(i) for i in input().split()]\\n\\tmax_till_now = arr[0]\\n\\tmax_diff = 0\\n\\tfor i in arr:\\n\\t\\tmax_till_now = max(max_till_now, i)\\n\\t\\tmax_diff = max(max_till_now - i, max_diff)\\n\\tif max_diff == 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tcnt = 0\\n\\t\\twhile max_diff:\\n\\t\\t\\tmax_diff //= 2\\n\\t\\t\\tcnt += 1\\n\\t\\tprint(cnt)\\n\", \"def solve(a):\\n\\tmaxdiff = 0\\n\\tlastmax = a[0]\\n\\tfor ni in range(1, len(a)):\\n\\t\\tif a[ni] > lastmax:\\n\\t\\t\\tlastmax = a[ni]\\n\\t\\telse:\\n\\t\\t\\tmaxdiff = max(maxdiff, lastmax - a[ni])\\n\\tp = 0\\n\\twhile maxdiff > 0:\\n\\t\\tp += 1\\n\\t\\tmaxdiff //= 2\\n\\treturn p\\nt = int(input())\\nans = []\\nfor ti in range(t):\\n\\tn = int(input())\\n\\ta = [int(x) for x in input().split()]\\n\\tans.append(solve(a))\\nfor a in ans:\\n\\tprint(a)\\n\", \"from cmath import sqrt\\nimport math\\nfrom collections import defaultdict, deque, Counter\\nfrom functools import reduce\\nfrom sys import stdin\\ninput = stdin.readline\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [int(i) for i in input().split()]\\n\\tmx = 0\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] < a[i - 1]:\\n\\t\\t\\tt = math.floor(math.log2(a[i - 1] - a[i])) + 1\\n\\t\\t\\ta[i] = a[i - 1]\\n\\t\\t\\tmx = max(mx, t)\\n\\tprint(mx)\\n\", \"def main_function():\\n\\timport sys\\n\\tinput = sys.stdin.readline\\n\\tt = int(input())\\n\\tfor _ in range(t):\\n\\t\\tn = int(input())\\n\\t\\ta = list(map(int, input().split()))\\n\\t\\tcurrent_max_num = a[0]\\n\\t\\tmax_difference = 0\\n\\t\\tfor el in a:\\n\\t\\t\\tif el < current_max_num:\\n\\t\\t\\t\\tmax_difference = max(max_difference, current_max_num - el)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcurrent_max_num = el\\n\\t\\tif max_difference == 0:\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(len(bin(max_difference)) - 2)\\nmain_function()\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3\\n4\\n1 7 6 5\\n5\\n1 2 3 4 5\\n2\\n0 -4\\n\", \"6\\n3\\n1000000000 0 -1000000000\\n1\\n6\\n2\\n-1000000000 1000000000\\n2\\n1000000000 -1000000000\\n2\\n1000000000 1000000000\\n2\\n-1000000000 -1000000000\\n\", \"6\\n3\\n1000000000 0 -1000000000\\n1\\n6\\n2\\n-1000000000 1000000000\\n2\\n1000000000 -1000000000\\n2\\n1000000000 1000000000\\n2\\n-1000000000 -1000000000\\n\", \"6\\n3\\n1000000000 -1 -1000000000\\n1\\n6\\n2\\n-1000000000 1000000000\\n2\\n1000000000 -1000000000\\n2\\n1000000000 1000000000\\n2\\n-1000000000 -1000000000\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 3 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 4 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 1 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 11 6 5\\n5\\n1 4 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 7\\n5\\n1 0 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n0 11 6 5\\n5\\n1 1 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 13 7 5\\n5\\n1 2 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 6 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 3 4 5\\n2\\n0 -1\\n\", \"3\\n4\\n1 7 7 4\\n5\\n1 2 9 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 7\\n5\\n1 0 3 4 5\\n2\\n-1 -8\\n\", \"3\\n4\\n1 7 10 5\\n5\\n1 0 3 4 5\\n2\\n0 -1\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 4 1\\n2\\n-1 -6\\n\", \"3\\n4\\n1 7 7 7\\n5\\n1 0 3 4 5\\n2\\n0 -8\\n\", \"3\\n4\\n1 7 7 4\\n5\\n1 2 9 0 1\\n2\\n-1 0\\n\", \"3\\n4\\n1 7 7 7\\n5\\n1 -1 3 4 5\\n2\\n0 -8\\n\", \"3\\n4\\n1 7 7 8\\n5\\n1 2 9 0 1\\n2\\n-1 0\\n\", \"3\\n4\\n1 7 7 9\\n5\\n1 2 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 9 5\\n5\\n1 2 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 3\\n5\\n1 0 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 8 7 5\\n5\\n1 2 3 4 5\\n2\\n-1 0\\n\", \"3\\n4\\n1 8 7 7\\n5\\n1 0 3 4 5\\n2\\n-1 -8\\n\", \"3\\n4\\n1 7 6 8\\n5\\n0 2 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 8\\n5\\n1 2 9 0 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 17 5\\n5\\n1 0 3 4 6\\n2\\n0 -1\\n\", \"3\\n4\\n1 8 7 8\\n5\\n1 2 9 0 1\\n2\\n-1 0\\n\", \"3\\n4\\n1 4 10 5\\n5\\n1 0 3 4 4\\n2\\n0 0\\n\", \"3\\n4\\n1 7 9 5\\n5\\n1 2 3 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 3 6 5\\n5\\n1 4 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n2 7 13 4\\n5\\n1 2 6 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 13 7 5\\n5\\n1 3 3 4 5\\n2\\n0 0\\n\", \"3\\n4\\n1 8 7 5\\n5\\n1 2 3 6 5\\n2\\n-1 0\\n\", \"3\\n4\\n1 5 10 5\\n5\\n2 0 3 4 5\\n2\\n0 -1\\n\", \"3\\n4\\n1 8 1 8\\n5\\n1 2 9 0 1\\n2\\n-1 0\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 4\\n5\\n1 2 6 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n0 11 6 5\\n5\\n1 4 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 2 3 4 5\\n2\\n1 -4\\n\", \"3\\n4\\n1 8 7 5\\n5\\n1 2 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 4 2\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 3 2 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 6 5\\n5\\n0 2 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 2 7 5\\n5\\n1 2 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 8 7 5\\n5\\n1 2 3 4 6\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 3 2 5\\n2\\n-1 -3\\n\", \"3\\n4\\n1 7 7 4\\n5\\n1 2 9 0 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 2 7 5\\n5\\n1 4 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 10 5\\n5\\n1 0 3 4 6\\n2\\n0 -1\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 4 2\\n2\\n-1 -6\\n\", \"3\\n4\\n1 7 10 5\\n5\\n1 0 3 4 4\\n2\\n0 -1\\n\", \"3\\n4\\n1 4 10 5\\n5\\n1 0 3 4 4\\n2\\n0 -1\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 2 0 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 5 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 4 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n2 7 7 5\\n5\\n1 0 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 1 4 5\\n2\\n-1 -5\\n\", \"3\\n4\\n1 7 4 5\\n5\\n1 2 6 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n2 7 7 4\\n5\\n1 2 6 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 2\\n5\\n1 0 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n0 11 6 6\\n5\\n1 1 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 11 6 5\\n5\\n1 2 3 4 5\\n2\\n1 -4\\n\", \"3\\n4\\n1 13 7 5\\n5\\n1 3 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 3 6 4 2\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 0 2 5\\n2\\n-1 -4\\n\", \"3\\n4\\n1 7 7 4\\n5\\n1 4 9 4 1\\n2\\n-1 -4\\n\", \"3\\n4\\n1 2 7 5\\n5\\n1 3 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 5 10 5\\n5\\n1 0 3 4 5\\n2\\n0 -1\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 4 1\\n2\\n-1 -8\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 0 3 4 5\\n2\\n-1 -3\\n\", \"3\\n4\\n1 7 7 7\\n5\\n1 0 3 4 5\\n2\\n1 -8\\n\", \"3\\n4\\n1 2 7 5\\n5\\n1 0 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 8 2\\n2\\n-1 -6\\n\", \"3\\n4\\n1 10 7 8\\n5\\n1 2 9 0 1\\n2\\n-1 0\\n\", \"3\\n4\\n1 7 7 9\\n5\\n1 -1 3 4 5\\n2\\n0 -8\\n\", \"3\\n4\\n1 7 9 5\\n5\\n1 0 3 4 4\\n2\\n0 -1\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 2 0 4 5\\n2\\n1 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 5 3 1\\n2\\n-1 -4\\n\", \"3\\n4\\n2 7 7 5\\n5\\n1 0 3 4 5\\n2\\n0 -5\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 2 4 5\\n2\\n-1 -5\\n\", \"3\\n4\\n1 7 0 2\\n5\\n1 0 3 4 5\\n2\\n-1 -4\\n\", \"3\\n4\\n0 3 6 6\\n5\\n1 1 3 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 3 6 8 2\\n2\\n-1 -4\\n\", \"3\\n4\\n1 8 7 7\\n5\\n0 0 3 4 5\\n2\\n-1 -8\\n\", \"3\\n4\\n1 2 7 5\\n5\\n1 3 6 4 5\\n2\\n0 -4\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 8 1\\n2\\n-1 -8\\n\", \"3\\n4\\n0 7 7 5\\n5\\n1 0 3 4 5\\n2\\n-1 -3\\n\", \"3\\n4\\n1 7 7 7\\n5\\n1 0 2 4 5\\n2\\n1 -8\\n\", \"3\\n4\\n1 7 7 5\\n5\\n1 2 6 8 2\\n2\\n0 -6\\n\", \"3\\n4\\n1 10 7 8\\n5\\n1 2 9 0 1\\n2\\n-2 0\\n\", \"3\\n4\\n1 7 6 5\\n5\\n1 2 3 4 5\\n2\\n0 -4\\n\"], \"outputs\": [\"2\\n0\\n3\\n\", \"31\\n0\\n0\\n31\\n0\\n0\\n\", \"31\\n0\\n0\\n31\\n0\\n0\\n\", \"31\\n0\\n0\\n31\\n0\\n0\\n\", \"2\\n0\\n3\\n\", \"2\\n0\\n2\\n\", \"2\\n2\\n2\\n\", \"2\\n1\\n3\\n\", \"2\\n1\\n2\\n\", \"2\\n3\\n2\\n\", \"3\\n1\\n3\\n\", \"0\\n1\\n2\\n\", \"3\\n0\\n3\\n\", \"4\\n0\\n3\\n\", \"2\\n2\\n3\\n\", \"2\\n1\\n1\\n\", \"2\\n4\\n2\\n\", \"0\\n1\\n3\\n\", \"3\\n1\\n1\\n\", \"2\\n3\\n3\\n\", \"0\\n1\\n4\\n\", \"2\\n4\\n0\\n\", \"0\\n2\\n4\\n\", \"0\\n4\\n0\\n\", \"0\\n0\\n3\\n\", \"3\\n0\\n2\\n\", \"3\\n1\\n2\\n\", \"2\\n0\\n0\\n\", \"1\\n1\\n3\\n\", \"1\\n0\\n3\\n\", \"0\\n4\\n2\\n\", \"4\\n1\\n1\\n\", \"1\\n4\\n0\\n\", \"3\\n1\\n0\\n\", \"3\\n2\\n2\\n\", \"1\\n1\\n2\\n\", \"4\\n3\\n2\\n\", \"4\\n0\\n0\\n\", \"2\\n1\\n0\\n\", \"3\\n2\\n1\\n\", \"3\\n4\\n0\\n\", \"2\\n1\\n3\\n\", \"2\\n1\\n2\\n\", \"2\\n3\\n2\\n\", \"3\\n1\\n3\\n\", \"2\\n0\\n3\\n\", \"2\\n0\\n2\\n\", \"2\\n3\\n2\\n\", \"2\\n1\\n2\\n\", \"2\\n0\\n3\\n\", \"2\\n0\\n3\\n\", \"2\\n0\\n2\\n\", \"2\\n1\\n2\\n\", \"2\\n4\\n2\\n\", \"2\\n1\\n3\\n\", \"3\\n1\\n1\\n\", \"2\\n3\\n3\\n\", \"3\\n1\\n1\\n\", \"3\\n1\\n1\\n\", \"2\\n2\\n3\\n\", \"2\\n3\\n2\\n\", \"2\\n1\\n2\\n\", \"2\\n1\\n3\\n\", \"2\\n1\\n3\\n\", \"2\\n3\\n2\\n\", \"2\\n3\\n2\\n\", \"3\\n1\\n2\\n\", \"3\\n0\\n3\\n\", \"3\\n0\\n3\\n\", \"4\\n0\\n3\\n\", \"2\\n3\\n2\\n\", \"2\\n1\\n2\\n\", \"2\\n4\\n2\\n\", \"2\\n0\\n3\\n\", \"3\\n1\\n1\\n\", \"2\\n3\\n3\\n\", \"2\\n1\\n2\\n\", \"0\\n1\\n4\\n\", \"2\\n1\\n3\\n\", \"2\\n3\\n3\\n\", \"2\\n4\\n0\\n\", \"0\\n2\\n4\\n\", \"3\\n1\\n1\\n\", \"2\\n2\\n3\\n\", \"2\\n3\\n2\\n\", \"2\\n1\\n3\\n\", \"2\\n0\\n3\\n\", \"3\\n1\\n2\\n\", \"0\\n0\\n3\\n\", \"2\\n3\\n2\\n\", \"1\\n0\\n3\\n\", \"2\\n2\\n3\\n\", \"2\\n3\\n3\\n\", \"2\\n1\\n2\\n\", \"0\\n1\\n4\\n\", \"2\\n3\\n3\\n\", \"2\\n4\\n0\\n\", \"2\\n0\\n3\\n\"]}",
    "difficulty": "MEDIUM",
    "raw_tags": "['greedy', 'math']",
    "name": null,
    "source": "codeforces",
    "tags": "['Mathematics', 'Greedy algorithms']",
    "skill_types": "['Greedy algorithms']",
    "url": "https://codeforces.com/problemset/problem/1338/A",
    "Expected Auxiliary Space": null,
    "time_limit": "1 second",
    "date": "2020-04-12",
    "picture_num": "0",
    "memory_limit": "256 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "```if-not:ruby\nCreate a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.\n```\n```if:ruby\nCreate a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with `nil`s.\n```\n\nExamples:\n\n```python\ninterleave([1, 2, 3], [\"c\", \"d\", \"e\"]) == [1, \"c\", 2, \"d\", 3, \"e\"]\ninterleave([1, 2, 3], [4, 5]) == [1, 4, 2, 5, 3, None]\ninterleave([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\ninterleave([]) == []\n```",
    "solutions": "[\"from itertools import chain, zip_longest\\n\\ndef interleave(*args):\\n\\treturn list(chain.from_iterable(zip_longest(*args)))\\n\", \"def interleave(*args):\\n\\tmax_len = max(map(len, args))\\n\\tinterleaved = []\\n\\tfor i in range(max_len):\\n\\t\\tfor arr in args:\\n\\t\\t\\tif i < len(arr):\\n\\t\\t\\t\\tinterleaved.append(arr[i])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tinterleaved.append(None)\\n\\treturn interleaved\\n\", \"from itertools import chain, zip_longest\\n\\ndef interleave(*args):\\n\\treturn [*chain(*zip_longest(*args))]\\n\", \"interleave = lambda *a: [b[i] if len(b) > i else None for i in range(max((len(i) for i in a))) for b in a]\\n\", \"from itertools import zip_longest\\n\\ndef interleave(*args):\\n\\treturn [y for x in zip_longest(*args) for y in x]\\n\", \"interleave = lambda *a: sum([list(i) for i in __import__('itertools').zip_longest(*a)], [])\\n\", \"from itertools import zip_longest\\n\\ndef interleave(*args):\\n\\treturn [i for _ in zip_longest(*args) for i in _]\\n\", \"def interleave(*args):\\n\\tarr = []\\n\\tfor i in range(max((len(a) for a in args))):\\n\\t\\tfor j in range(len(args)):\\n\\t\\t\\ttry:\\n\\t\\t\\t\\tarr.append(args[j][i])\\n\\t\\t\\texcept:\\n\\t\\t\\t\\tarr.append(None)\\n\\treturn arr\\n\", \"def interleave(*args):\\n\\tn_max = len(max(args, key=len))\\n\\treturn [j[i] if i < len(j) else None for i in range(n_max) for j in args]\\n\"]",
    "starter_code": "def interleave(*args):\n\t",
    "input_output": "{\"fn_name\": \"interleave\", \"inputs\": [[[1, 2, 3], [\"c\", \"d\", \"e\"]], [[1, 2, 3], [4, 5]], [[1, 2], [3, 4, 5]], [[null], [null, null], [null, null, null]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[]]], \"outputs\": [[[1, \"c\", 2, \"d\", 3, \"e\"]], [[1, 4, 2, 5, 3, null]], [[1, 3, 2, 4, null, 5]], [[null, null, null, null, null, null, null, null, null]], [[1, 4, 7, 2, 5, 8, 3, 6, 9]], [[]]]}",
    "difficulty": "EASY",
    "raw_tags": "['Arrays', 'Algorithms']",
    "name": null,
    "source": "codewars",
    "tags": "['Data structures']",
    "skill_types": "['Data structures']",
    "url": "https://www.codewars.com/kata/523d2e964680d1f749000135",
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": null,
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "Read problem statements in [Bengali], [Mandarin Chinese], [Russian], and [Vietnamese] as well.\n\nIt's a lockdown. You’re bored in your house and are playing golf in the hallway. \n\nThe hallway has $N + 2$ tiles numbered from $0$ to $N+1$ from left to right. There is a hole on tile number $x$. You hit the ball standing on tile $0$. When you hit the ball, it bounces at lengths of $k$, i.e. the tiles covered by it are $0, k, 2k, \\ldots$, and so on until the ball passes tile $N+1$.\n\nIf the ball doesn't enter the hole in the first trial, you try again but this time standing on the tile $N+1$. When you hit the ball, it bounces at lengths of $k$, i.e. the tiles covered by it are $(N + 1), (N + 1 - k), (N + 1 - 2k), \\ldots$, and so on until the ball passes tile $0$. \n\nFind if the ball will enter the hole, either in its forward journey or backward journey.\n\nNote: The input and output of this problem are large, so prefer using fast input/output methods.\n\n------ Input ------\n\nThe first line contains an integer $T$, the number of test cases. Then the test cases follow. \nThe only line of each test case contains three integers $N, x, k$. \n\n------ Output ------\nOutput in a single line, the answer, which should be \"YES\" if the ball enters the hole either in the forward or backward journey and \"NO\" if not.\n\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\n\n------ Constraints  ------\n$1 ≤ T ≤ 10^{5}$\n$1 ≤ x, k ≤ N ≤ 10^{9}$\n\n------  Subtasks ------\nSubtask #1 (10 points): $N ≤ 10^{2}$\n\nSubtask #2 (90 points): original constraints\n\n----- Sample Input 1 ------ \n3\n5 4 2\n5 3 2\n5 5 2\n----- Sample Output 1 ------ \nYES\nNO\nNO\n----- explanation 1 ------ \nIn each test case, the tiles covered by the ball for $N = 5$ and $k = 2$ are $\\{0, 2, 4, 6\\}$ in the forward journey and $\\{6, 4, 2, 0\\}$ in the backward journey.\n\nTherefore, the answer for the first test case is \"YES\" since the ball falls in the position of the hole at tile $4$. But the answer for test cases $2$ and $3$ is \"NO\" since the ball does not fall in the position of the hole.",
    "solutions": "[\"for _ in range(int(input())):\\n\\t(n, x, k) = map(int, input().split())\\n\\tif x % k == 0 or x % k == (n + 1) % k:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"for i in range(int(input())):\\n\\t(a, b, c) = map(int, input().split())\\n\\td = (a + 1) % c\\n\\tif b % c == 0 or b % c == d:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"for tc in range(int(input())):\\n\\t(n, x, k) = map(int, input().split())\\n\\tl = x % k\\n\\tr = (n + 1 - x) % k\\n\\tif not l or not r:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"x = int(input())\\ngtr = []\\nfor mvx in range(0, x):\\n\\tp = str(input())\\n\\tasd = p.split(' ')\\n\\tvv = []\\n\\tfor mnv in asd:\\n\\t\\tvv.append(int(mnv))\\n\\tgtr.append(vv)\\nfor jj in gtr:\\n\\tupr = (jj[1] + jj[2]) % jj[2]\\n\\tif upr == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tgte = (jj[0] - jj[1] + 1 + jj[2]) % jj[2]\\n\\t\\tif gte == 0:\\n\\t\\t\\tprint('YES')\\n\\t\\telse:\\n\\t\\t\\tprint('NO')\\n\", \"t = int(input())\\nfor i in range(t):\\n\\t(n, x, k) = list(map(int, input().split()))\\n\\tif x % k == 0 or (n + 1 - x) % k == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"for _ in range(int(input())):\\n\\t(a, b, k) = map(int, input().split())\\n\\tprint('YES' if b % k == 0 or (a + 1 - b) % k == 0 else 'NO')\\n\", \"t = int(input())\\nwhile t != 0:\\n\\t(n, x, k) = map(int, input().split())\\n\\tif x % k == 0 or (x - (n + 1)) % k == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\tt -= 1\\n\", \"for i in range(int(input())):\\n\\t(n, a, k) = map(int, input().split())\\n\\tif a % k == 0 or (n + 1 - a) % k == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"for _ in range(int(input())):\\n\\t(n, x, k) = map(int, input().split())\\n\\tres = 'NO'\\n\\tif x >= k and x % k == 0:\\n\\t\\tres = 'YES'\\n\\telif n + 1 - x >= k and (n + 1 - x) % k == 0:\\n\\t\\tres = 'YES'\\n\\tprint(res)\\n\", \"for tc in range(int(input())):\\n\\t(n, x, k) = map(int, input().split())\\n\\tif x % k == 0:\\n\\t\\tans = 'YES'\\n\\telif (n + 1 - x) % k == 0:\\n\\t\\tans = 'YES'\\n\\telse:\\n\\t\\tans = 'NO'\\n\\tprint(ans)\\n\", \"a = int(input(''))\\nfor i in range(a):\\n\\t(N, x, k) = [int(x) for x in input('').split()]\\n\\tif x % k == 0 or (N + 1 - x) % k == 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"for t in range(int(input())):\\n\\t(N, P, K) = map(int, input().split())\\n\\tn1 = P / K\\n\\tans = 'NO'\\n\\tif n1 == int(n1):\\n\\t\\tans = 'YES'\\n\\telse:\\n\\t\\tn2 = (N + 1 - P) / K\\n\\t\\tif n2 == int(n2):\\n\\t\\t\\tans = 'YES'\\n\\tprint(ans)\\n\", \"T = int(input())\\nfor t in range(T):\\n\\t(N, x, k) = map(int, input().split(' '))\\n\\toffset = N + 1 - (N + 1) // k * k\\n\\tprint('YES' if x % k == 0 or (x - offset) % k == 0 else 'NO')\\n\", \"for t in range(int(input())):\\n\\t(n, x, k) = map(int, input().split())\\n\\tif x % k == 0:\\n\\t\\tprint('YES')\\n\\telif (n + 1 - x) % k == 0 and n + 1 - x != 0:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"import sys\\nmod = 1000000007\\nINF = float('inf')\\n\\ndef st():\\n\\treturn list(sys.stdin.readline().strip())\\n\\ndef intlistinp():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef strlistinp():\\n\\treturn list(map(int, sys.stdin.readline().split()))\\n\\ndef intmapinp():\\n\\treturn map(int, sys.stdin.readline().split())\\n\\ndef strmapinp():\\n\\treturn map(str, sys.stdin.readline().split())\\n\\ndef inp():\\n\\treturn sys.stdin.readline()\\n\\ndef intinp():\\n\\treturn int(sys.stdin.readline())\\n\\ndef println(n):\\n\\treturn sys.stdout.write(str(n) + '\\\\n')\\n\\ndef prints(n):\\n\\treturn sys.stdout.write(str(n) + ' ')\\nfor _ in range(intinp()):\\n\\t(n, x, k) = intmapinp()\\n\\tif x % k == 0 or (n + 1 - x) % k == 0:\\n\\t\\tprintln('YES')\\n\\telse:\\n\\t\\tprintln('NO')\\n\", \"t = int(input())\\nwhile t > 0:\\n\\t(a, b, c) = input().split()\\n\\t(a, b, c) = (int(a), int(b), int(c))\\n\\tsum = (a + 1) % c\\n\\tif b % c == 0 or b % c == sum:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\\tt -= 1\\n\", \"T = int(input())\\nfor tc in range(T):\\n\\t(N, x, k) = list(map(int, input().split(' ')))\\n\\tif x % k == 0 or x % k == (N + 1) % k:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"tests = int(input())\\nfor i in range(tests):\\n\\t(n, x, k) = map(int, input().split())\\n\\tans = 'NO'\\n\\tif x % k == 0:\\n\\t\\tans = 'YES'\\n\\tmod = (n + 1) % k\\n\\tif (x - mod) % k == 0:\\n\\t\\tans = 'YES'\\n\\tprint(ans)\\n\", \"T = int(input())\\nfor i in range(T):\\n\\t(N, X, K) = map(int, input().split())\\n\\tnum = (N + 1) % K\\n\\tif X % K == 0 or X % K == num:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3\\n5 4 2\\n5 3 2\\n5 5 2\"], \"outputs\": [\"YES\\nNO\\nNO\"]}",
    "difficulty": "EASY",
    "raw_tags": "['Mathematics', 'Basic Maths']",
    "name": null,
    "source": "codechef",
    "tags": "['Mathematics']",
    "skill_types": "[]",
    "url": "https://www.codechef.com/problems/LKDNGOLF",
    "Expected Auxiliary Space": null,
    "time_limit": "0.5 seconds",
    "date": "2021-05-04",
    "picture_num": "0",
    "memory_limit": "50000 bytes",
    "Expected Time Complexity": null
  },
  {
    "question": "Vinoth's Birthday may have ended but the celebration is still continuing in MIT. Cakes have an indispensable part in Birthday Celebrations. So, students are ready to eat cakes. Vinoth is fond of cakes. But, he found that one of his cakes is crying and trying to escape.\n\nAs it is a female cake, Vinoth did not want it to WALK away, because, well,it is Vinoth. He asked the cake 'Where are you trying to escape?' . It replied 'To Prayatna OLPC' .He said 'I will ask you a question. Answer it correctly, and then WALK AWAY'. Given x, he asked the cake to find the values of a and b such that pow(a, b) + pow(b, a) =x. It seemed very easy. So, he added an extra condition that (a-b) must be maximized.\n\nNote\n\n    It is guaranteed that a and b always exist and they are integers.\n\n    a,b ≤ x\n\nInput\n\n   The first line contains ite, the number of test cases.\n\n   Then ite line follows, each containing the number x.\n\nOutput\n        Print ite lines, each containing a b.\n\nInput Constraints\n\n  ite ≤ 1000\n\n  1=x ≤ 100\n\nSAMPLE INPUT\n1\n5\n\nSAMPLE OUTPUT\n4 1",
    "solutions": "[]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"100\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\", \"1000\\n70\\n41\\n28\\n74\\n96\\n8\\n75\\n60\\n76\\n100\\n89\\n36\\n79\\n37\\n18\\n56\\n12\\n20\\n66\\n34\\n12\\n98\\n93\\n25\\n51\\n41\\n49\\n51\\n16\\n38\\n35\\n80\\n45\\n35\\n85\\n87\\n58\\n66\\n88\\n71\\n5\\n56\\n38\\n36\\n91\\n17\\n35\\n22\\n20\\n40\\n4\\n77\\n63\\n53\\n61\\n84\\n92\\n33\\n64\\n16\\n15\\n67\\n63\\n9\\n79\\n41\\n91\\n77\\n60\\n91\\n78\\n36\\n30\\n3\\n57\\n58\\n29\\n45\\n75\\n26\\n94\\n70\\n23\\n94\\n54\\n89\\n42\\n87\\n85\\n22\\n90\\n99\\n61\\n31\\n40\\n17\\n98\\n84\\n42\\n63\\n60\\n12\\n52\\n39\\n39\\n7\\n64\\n86\\n3\\n46\\n32\\n38\\n96\\n7\\n3\\n45\\n64\\n34\\n69\\n8\\n72\\n80\\n23\\n34\\n52\\n100\\n7\\n86\\n50\\n33\\n93\\n92\\n58\\n49\\n9\\n56\\n4\\n92\\n49\\n66\\n30\\n69\\n68\\n51\\n57\\n86\\n51\\n9\\n46\\n28\\n53\\n86\\n40\\n85\\n98\\n68\\n33\\n8\\n46\\n34\\n41\\n87\\n43\\n43\\n43\\n13\\n11\\n71\\n49\\n74\\n89\\n18\\n88\\n45\\n99\\n81\\n91\\n50\\n77\\n6\\n52\\n40\\n83\\n81\\n53\\n61\\n20\\n34\\n11\\n78\\n85\\n82\\n14\\n4\\n74\\n94\\n73\\n5\\n82\\n95\\n9\\n58\\n20\\n3\\n66\\n81\\n8\\n9\\n44\\n88\\n91\\n31\\n77\\n40\\n47\\n75\\n94\\n42\\n56\\n17\\n50\\n21\\n45\\n8\\n51\\n9\\n61\\n7\\n62\\n22\\n42\\n37\\n41\\n8\\n76\\n62\\n34\\n70\\n47\\n72\\n63\\n12\\n12\\n83\\n78\\n75\\n95\\n89\\n68\\n17\\n11\\n55\\n21\\n50\\n65\\n49\\n73\\n16\\n73\\n83\\n41\\n9\\n66\\n95\\n2\\n58\\n54\\n46\\n62\\n63\\n94\\n77\\n51\\n67\\n68\\n94\\n53\\n40\\n77\\n49\\n26\\n15\\n21\\n59\\n87\\n61\\n67\\n55\\n12\\n57\\n4\\n41\\n40\\n35\\n81\\n47\\n39\\n10\\n57\\n65\\n18\\n72\\n17\\n75\\n37\\n29\\n15\\n54\\n7\\n25\\n95\\n83\\n52\\n56\\n39\\n20\\n23\\n2\\n57\\n2\\n60\\n2\\n57\\n64\\n72\\n54\\n80\\n27\\n75\\n15\\n46\\n17\\n65\\n81\\n61\\n49\\n16\\n22\\n53\\n72\\n78\\n39\\n50\\n59\\n56\\n97\\n53\\n48\\n74\\n60\\n62\\n99\\n41\\n88\\n72\\n84\\n26\\n62\\n95\\n64\\n50\\n54\\n92\\n50\\n42\\n63\\n95\\n6\\n33\\n2\\n8\\n78\\n73\\n70\\n34\\n43\\n79\\n77\\n15\\n91\\n53\\n53\\n61\\n83\\n54\\n24\\n79\\n73\\n40\\n1\\n21\\n33\\n62\\n68\\n17\\n53\\n51\\n24\\n5\\n2\\n1\\n29\\n64\\n84\\n90\\n30\\n7\\n73\\n75\\n40\\n47\\n74\\n70\\n5\\n27\\n25\\n72\\n19\\n85\\n4\\n43\\n38\\n96\\n4\\n66\\n67\\n88\\n93\\n21\\n54\\n7\\n18\\n60\\n4\\n39\\n92\\n37\\n66\\n44\\n28\\n23\\n96\\n44\\n51\\n30\\n79\\n7\\n6\\n5\\n59\\n67\\n8\\n62\\n98\\n92\\n14\\n50\\n84\\n73\\n25\\n66\\n8\\n19\\n94\\n73\\n50\\n60\\n12\\n59\\n61\\n40\\n43\\n59\\n94\\n48\\n30\\n20\\n86\\n7\\n36\\n64\\n34\\n66\\n67\\n36\\n54\\n3\\n2\\n79\\n66\\n61\\n62\\n52\\n39\\n11\\n47\\n2\\n7\\n61\\n81\\n98\\n19\\n89\\n10\\n29\\n8\\n43\\n30\\n60\\n81\\n99\\n39\\n84\\n54\\n46\\n99\\n11\\n88\\n96\\n12\\n51\\n91\\n95\\n34\\n100\\n16\\n31\\n61\\n48\\n98\\n61\\n31\\n78\\n92\\n69\\n95\\n51\\n52\\n99\\n2\\n1\\n55\\n98\\n60\\n38\\n81\\n24\\n89\\n24\\n2\\n5\\n94\\n92\\n79\\n95\\n7\\n74\\n7\\n19\\n78\\n31\\n78\\n32\\n71\\n35\\n30\\n11\\n30\\n48\\n40\\n83\\n15\\n31\\n61\\n100\\n42\\n21\\n72\\n27\\n36\\n71\\n42\\n8\\n22\\n95\\n2\\n97\\n78\\n70\\n98\\n30\\n25\\n8\\n27\\n23\\n68\\n11\\n92\\n51\\n38\\n2\\n75\\n85\\n15\\n71\\n31\\n42\\n84\\n97\\n92\\n76\\n29\\n12\\n32\\n80\\n57\\n66\\n74\\n63\\n72\\n25\\n95\\n29\\n62\\n92\\n86\\n19\\n52\\n69\\n35\\n77\\n52\\n98\\n47\\n77\\n4\\n76\\n20\\n96\\n48\\n24\\n44\\n37\\n97\\n98\\n4\\n92\\n20\\n88\\n19\\n23\\n95\\n21\\n33\\n16\\n19\\n25\\n61\\n34\\n43\\n93\\n32\\n67\\n7\\n98\\n83\\n63\\n82\\n48\\n58\\n82\\n95\\n48\\n26\\n60\\n33\\n91\\n17\\n56\\n72\\n42\\n94\\n42\\n9\\n85\\n42\\n7\\n24\\n90\\n30\\n94\\n40\\n93\\n86\\n16\\n7\\n95\\n62\\n95\\n98\\n9\\n10\\n52\\n20\\n24\\n36\\n28\\n98\\n41\\n63\\n48\\n53\\n8\\n73\\n65\\n47\\n61\\n47\\n83\\n11\\n76\\n87\\n63\\n17\\n21\\n95\\n36\\n53\\n25\\n40\\n44\\n84\\n64\\n59\\n66\\n47\\n66\\n36\\n76\\n58\\n25\\n23\\n49\\n69\\n77\\n1\\n14\\n56\\n64\\n34\\n28\\n1\\n79\\n64\\n57\\n72\\n94\\n27\\n59\\n42\\n76\\n99\\n53\\n14\\n21\\n50\\n1\\n62\\n49\\n5\\n57\\n66\\n26\\n51\\n10\\n86\\n36\\n38\\n39\\n99\\n8\\n26\\n95\\n98\\n49\\n26\\n58\\n44\\n69\\n77\\n12\\n68\\n36\\n13\\n67\\n91\\n63\\n64\\n66\\n62\\n46\\n36\\n23\\n14\\n20\\n80\\n98\\n16\\n26\\n36\\n45\\n43\\n31\\n54\\n2\\n43\\n93\\n37\\n56\\n66\\n60\\n32\\n25\\n82\\n33\\n97\\n60\\n85\\n73\\n30\\n64\\n99\\n37\\n55\\n76\\n15\\n74\\n96\\n4\\n8\\n14\\n68\\n59\\n63\\n67\\n7\\n27\\n100\\n45\\n42\\n85\\n13\\n70\\n46\\n71\\n50\\n33\\n58\\n88\\n11\\n86\\n80\\n15\\n13\\n17\\n99\\n58\\n74\\n23\\n38\\n62\\n54\\n16\\n58\\n18\\n14\\n33\\n21\\n7\\n66\\n57\\n11\\n21\\n67\\n88\\n35\\n60\\n46\\n84\\n6\\n1\\n60\\n61\\n15\\n35\\n9\\n23\\n10\\n22\\n6\\n80\\n84\\n97\\n29\\n48\\n98\\n23\\n91\\n8\\n35\\n73\\n99\\n34\\n61\\n87\\n40\\n44\\n58\\n35\\n64\\n58\\n30\\n36\\n16\\n75\\n77\\n36\\n78\\n88\\n99\\n34\\n18\\n27\\n100\\n18\\n35\\n10\\n61\\n7\\n8\\n40\\n29\\n19\\n76\\n56\\n23\\n69\\n22\\n41\\n74\\n10\\n66\\n99\\n93\\n49\\n77\\n98\\n55\\n59\\n94\\n62\\n86\\n83\\n77\\n15\\n42\\n40\\n76\\n36\\n69\\n50\\n34\\n70\\n54\\n62\\n76\\n73\\n72\\n91\\n42\\n54\\n96\\n91\\n18\\n84\\n16\\n97\\n98\\n62\\n60\\n50\\n10\\n93\\n89\\n12\\n86\\n42\\n88\\n40\\n23\"], \"outputs\": [\"69 1\\n40 1\\n27 1\\n73 1\\n95 1\\n7 1\\n74 1\\n59 1\\n75 1\\n99 1\\n88 1\\n35 1\\n78 1\\n36 1\\n17 1\\n55 1\\n11 1\\n19 1\\n65 1\\n33 1\\n11 1\\n97 1\\n92 1\\n24 1\\n50 1\\n40 1\\n48 1\\n50 1\\n15 1\\n37 1\\n34 1\\n79 1\\n44 1\\n34 1\\n84 1\\n86 1\\n57 1\\n65 1\\n87 1\\n70 1\\n4 1\\n55 1\\n37 1\\n35 1\\n90 1\\n16 1\\n34 1\\n21 1\\n19 1\\n39 1\\n3 1\\n76 1\\n62 1\\n52 1\\n60 1\\n83 1\\n91 1\\n32 1\\n63 1\\n15 1\\n14 1\\n66 1\\n62 1\\n8 1\\n78 1\\n40 1\\n90 1\\n76 1\\n59 1\\n90 1\\n77 1\\n35 1\\n29 1\\n2 1\\n56 1\\n57 1\\n28 1\\n44 1\\n74 1\\n25 1\\n93 1\\n69 1\\n22 1\\n93 1\\n53 1\\n88 1\\n41 1\\n86 1\\n84 1\\n21 1\\n89 1\\n98 1\\n60 1\\n30 1\\n39 1\\n16 1\\n97 1\\n83 1\\n41 1\\n62 1\\n59 1\\n11 1\\n51 1\\n38 1\\n38 1\\n6 1\\n63 1\\n85 1\\n2 1\\n45 1\\n31 1\\n37 1\\n95 1\\n6 1\\n2 1\\n44 1\\n63 1\\n33 1\\n68 1\\n7 1\\n71 1\\n79 1\\n22 1\\n33 1\\n51 1\\n99 1\\n6 1\\n85 1\\n49 1\\n32 1\\n92 1\\n91 1\\n57 1\\n48 1\\n8 1\\n55 1\\n3 1\\n91 1\\n48 1\\n65 1\\n29 1\\n68 1\\n67 1\\n50 1\\n56 1\\n85 1\\n50 1\\n8 1\\n45 1\\n27 1\\n52 1\\n85 1\\n39 1\\n84 1\\n97 1\\n67 1\\n32 1\\n7 1\\n45 1\\n33 1\\n40 1\\n86 1\\n42 1\\n42 1\\n42 1\\n12 1\\n10 1\\n70 1\\n48 1\\n73 1\\n88 1\\n17 1\\n87 1\\n44 1\\n98 1\\n80 1\\n90 1\\n49 1\\n76 1\\n5 1\\n51 1\\n39 1\\n82 1\\n80 1\\n52 1\\n60 1\\n19 1\\n33 1\\n10 1\\n77 1\\n84 1\\n81 1\\n13 1\\n3 1\\n73 1\\n93 1\\n72 1\\n4 1\\n81 1\\n94 1\\n8 1\\n57 1\\n19 1\\n2 1\\n65 1\\n80 1\\n7 1\\n8 1\\n43 1\\n87 1\\n90 1\\n30 1\\n76 1\\n39 1\\n46 1\\n74 1\\n93 1\\n41 1\\n55 1\\n16 1\\n49 1\\n20 1\\n44 1\\n7 1\\n50 1\\n8 1\\n60 1\\n6 1\\n61 1\\n21 1\\n41 1\\n36 1\\n40 1\\n7 1\\n75 1\\n61 1\\n33 1\\n69 1\\n46 1\\n71 1\\n62 1\\n11 1\\n11 1\\n82 1\\n77 1\\n74 1\\n94 1\\n88 1\\n67 1\\n16 1\\n10 1\\n54 1\\n20 1\\n49 1\\n64 1\\n48 1\\n72 1\\n15 1\\n72 1\\n82 1\\n40 1\\n8 1\\n65 1\\n94 1\\n1 1\\n57 1\\n53 1\\n45 1\\n61 1\\n62 1\\n93 1\\n76 1\\n50 1\\n66 1\\n67 1\\n93 1\\n52 1\\n39 1\\n76 1\\n48 1\\n25 1\\n14 1\\n20 1\\n58 1\\n86 1\\n60 1\\n66 1\\n54 1\\n11 1\\n56 1\\n3 1\\n40 1\\n39 1\\n34 1\\n80 1\\n46 1\\n38 1\\n9 1\\n56 1\\n64 1\\n17 1\\n71 1\\n16 1\\n74 1\\n36 1\\n28 1\\n14 1\\n53 1\\n6 1\\n24 1\\n94 1\\n82 1\\n51 1\\n55 1\\n38 1\\n19 1\\n22 1\\n1 1\\n56 1\\n1 1\\n59 1\\n1 1\\n56 1\\n63 1\\n71 1\\n53 1\\n79 1\\n26 1\\n74 1\\n14 1\\n45 1\\n16 1\\n64 1\\n80 1\\n60 1\\n48 1\\n15 1\\n21 1\\n52 1\\n71 1\\n77 1\\n38 1\\n49 1\\n58 1\\n55 1\\n96 1\\n52 1\\n47 1\\n73 1\\n59 1\\n61 1\\n98 1\\n40 1\\n87 1\\n71 1\\n83 1\\n25 1\\n61 1\\n94 1\\n63 1\\n49 1\\n53 1\\n91 1\\n49 1\\n41 1\\n62 1\\n94 1\\n5 1\\n32 1\\n1 1\\n7 1\\n77 1\\n72 1\\n69 1\\n33 1\\n42 1\\n78 1\\n76 1\\n14 1\\n90 1\\n52 1\\n52 1\\n60 1\\n82 1\\n53 1\\n23 1\\n78 1\\n72 1\\n39 1\\n1 0\\n20 1\\n32 1\\n61 1\\n67 1\\n16 1\\n52 1\\n50 1\\n23 1\\n4 1\\n1 1\\n1 0\\n28 1\\n63 1\\n83 1\\n89 1\\n29 1\\n6 1\\n72 1\\n74 1\\n39 1\\n46 1\\n73 1\\n69 1\\n4 1\\n26 1\\n24 1\\n71 1\\n18 1\\n84 1\\n3 1\\n42 1\\n37 1\\n95 1\\n3 1\\n65 1\\n66 1\\n87 1\\n92 1\\n20 1\\n53 1\\n6 1\\n17 1\\n59 1\\n3 1\\n38 1\\n91 1\\n36 1\\n65 1\\n43 1\\n27 1\\n22 1\\n95 1\\n43 1\\n50 1\\n29 1\\n78 1\\n6 1\\n5 1\\n4 1\\n58 1\\n66 1\\n7 1\\n61 1\\n97 1\\n91 1\\n13 1\\n49 1\\n83 1\\n72 1\\n24 1\\n65 1\\n7 1\\n18 1\\n93 1\\n72 1\\n49 1\\n59 1\\n11 1\\n58 1\\n60 1\\n39 1\\n42 1\\n58 1\\n93 1\\n47 1\\n29 1\\n19 1\\n85 1\\n6 1\\n35 1\\n63 1\\n33 1\\n65 1\\n66 1\\n35 1\\n53 1\\n2 1\\n1 1\\n78 1\\n65 1\\n60 1\\n61 1\\n51 1\\n38 1\\n10 1\\n46 1\\n1 1\\n6 1\\n60 1\\n80 1\\n97 1\\n18 1\\n88 1\\n9 1\\n28 1\\n7 1\\n42 1\\n29 1\\n59 1\\n80 1\\n98 1\\n38 1\\n83 1\\n53 1\\n45 1\\n98 1\\n10 1\\n87 1\\n95 1\\n11 1\\n50 1\\n90 1\\n94 1\\n33 1\\n99 1\\n15 1\\n30 1\\n60 1\\n47 1\\n97 1\\n60 1\\n30 1\\n77 1\\n91 1\\n68 1\\n94 1\\n50 1\\n51 1\\n98 1\\n1 1\\n1 0\\n54 1\\n97 1\\n59 1\\n37 1\\n80 1\\n23 1\\n88 1\\n23 1\\n1 1\\n4 1\\n93 1\\n91 1\\n78 1\\n94 1\\n6 1\\n73 1\\n6 1\\n18 1\\n77 1\\n30 1\\n77 1\\n31 1\\n70 1\\n34 1\\n29 1\\n10 1\\n29 1\\n47 1\\n39 1\\n82 1\\n14 1\\n30 1\\n60 1\\n99 1\\n41 1\\n20 1\\n71 1\\n26 1\\n35 1\\n70 1\\n41 1\\n7 1\\n21 1\\n94 1\\n1 1\\n96 1\\n77 1\\n69 1\\n97 1\\n29 1\\n24 1\\n7 1\\n26 1\\n22 1\\n67 1\\n10 1\\n91 1\\n50 1\\n37 1\\n1 1\\n74 1\\n84 1\\n14 1\\n70 1\\n30 1\\n41 1\\n83 1\\n96 1\\n91 1\\n75 1\\n28 1\\n11 1\\n31 1\\n79 1\\n56 1\\n65 1\\n73 1\\n62 1\\n71 1\\n24 1\\n94 1\\n28 1\\n61 1\\n91 1\\n85 1\\n18 1\\n51 1\\n68 1\\n34 1\\n76 1\\n51 1\\n97 1\\n46 1\\n76 1\\n3 1\\n75 1\\n19 1\\n95 1\\n47 1\\n23 1\\n43 1\\n36 1\\n96 1\\n97 1\\n3 1\\n91 1\\n19 1\\n87 1\\n18 1\\n22 1\\n94 1\\n20 1\\n32 1\\n15 1\\n18 1\\n24 1\\n60 1\\n33 1\\n42 1\\n92 1\\n31 1\\n66 1\\n6 1\\n97 1\\n82 1\\n62 1\\n81 1\\n47 1\\n57 1\\n81 1\\n94 1\\n47 1\\n25 1\\n59 1\\n32 1\\n90 1\\n16 1\\n55 1\\n71 1\\n41 1\\n93 1\\n41 1\\n8 1\\n84 1\\n41 1\\n6 1\\n23 1\\n89 1\\n29 1\\n93 1\\n39 1\\n92 1\\n85 1\\n15 1\\n6 1\\n94 1\\n61 1\\n94 1\\n97 1\\n8 1\\n9 1\\n51 1\\n19 1\\n23 1\\n35 1\\n27 1\\n97 1\\n40 1\\n62 1\\n47 1\\n52 1\\n7 1\\n72 1\\n64 1\\n46 1\\n60 1\\n46 1\\n82 1\\n10 1\\n75 1\\n86 1\\n62 1\\n16 1\\n20 1\\n94 1\\n35 1\\n52 1\\n24 1\\n39 1\\n43 1\\n83 1\\n63 1\\n58 1\\n65 1\\n46 1\\n65 1\\n35 1\\n75 1\\n57 1\\n24 1\\n22 1\\n48 1\\n68 1\\n76 1\\n1 0\\n13 1\\n55 1\\n63 1\\n33 1\\n27 1\\n1 0\\n78 1\\n63 1\\n56 1\\n71 1\\n93 1\\n26 1\\n58 1\\n41 1\\n75 1\\n98 1\\n52 1\\n13 1\\n20 1\\n49 1\\n1 0\\n61 1\\n48 1\\n4 1\\n56 1\\n65 1\\n25 1\\n50 1\\n9 1\\n85 1\\n35 1\\n37 1\\n38 1\\n98 1\\n7 1\\n25 1\\n94 1\\n97 1\\n48 1\\n25 1\\n57 1\\n43 1\\n68 1\\n76 1\\n11 1\\n67 1\\n35 1\\n12 1\\n66 1\\n90 1\\n62 1\\n63 1\\n65 1\\n61 1\\n45 1\\n35 1\\n22 1\\n13 1\\n19 1\\n79 1\\n97 1\\n15 1\\n25 1\\n35 1\\n44 1\\n42 1\\n30 1\\n53 1\\n1 1\\n42 1\\n92 1\\n36 1\\n55 1\\n65 1\\n59 1\\n31 1\\n24 1\\n81 1\\n32 1\\n96 1\\n59 1\\n84 1\\n72 1\\n29 1\\n63 1\\n98 1\\n36 1\\n54 1\\n75 1\\n14 1\\n73 1\\n95 1\\n3 1\\n7 1\\n13 1\\n67 1\\n58 1\\n62 1\\n66 1\\n6 1\\n26 1\\n99 1\\n44 1\\n41 1\\n84 1\\n12 1\\n69 1\\n45 1\\n70 1\\n49 1\\n32 1\\n57 1\\n87 1\\n10 1\\n85 1\\n79 1\\n14 1\\n12 1\\n16 1\\n98 1\\n57 1\\n73 1\\n22 1\\n37 1\\n61 1\\n53 1\\n15 1\\n57 1\\n17 1\\n13 1\\n32 1\\n20 1\\n6 1\\n65 1\\n56 1\\n10 1\\n20 1\\n66 1\\n87 1\\n34 1\\n59 1\\n45 1\\n83 1\\n5 1\\n1 0\\n59 1\\n60 1\\n14 1\\n34 1\\n8 1\\n22 1\\n9 1\\n21 1\\n5 1\\n79 1\\n83 1\\n96 1\\n28 1\\n47 1\\n97 1\\n22 1\\n90 1\\n7 1\\n34 1\\n72 1\\n98 1\\n33 1\\n60 1\\n86 1\\n39 1\\n43 1\\n57 1\\n34 1\\n63 1\\n57 1\\n29 1\\n35 1\\n15 1\\n74 1\\n76 1\\n35 1\\n77 1\\n87 1\\n98 1\\n33 1\\n17 1\\n26 1\\n99 1\\n17 1\\n34 1\\n9 1\\n60 1\\n6 1\\n7 1\\n39 1\\n28 1\\n18 1\\n75 1\\n55 1\\n22 1\\n68 1\\n21 1\\n40 1\\n73 1\\n9 1\\n65 1\\n98 1\\n92 1\\n48 1\\n76 1\\n97 1\\n54 1\\n58 1\\n93 1\\n61 1\\n85 1\\n82 1\\n76 1\\n14 1\\n41 1\\n39 1\\n75 1\\n35 1\\n68 1\\n49 1\\n33 1\\n69 1\\n53 1\\n61 1\\n75 1\\n72 1\\n71 1\\n90 1\\n41 1\\n53 1\\n95 1\\n90 1\\n17 1\\n83 1\\n15 1\\n96 1\\n97 1\\n61 1\\n59 1\\n49 1\\n9 1\\n92 1\\n88 1\\n11 1\\n85 1\\n41 1\\n87 1\\n39 1\\n22 1\", \"1 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n11 1\\n12 1\\n13 1\\n14 1\\n15 1\\n16 1\\n17 1\\n18 1\\n19 1\\n20 1\\n21 1\\n22 1\\n23 1\\n24 1\\n25 1\\n26 1\\n27 1\\n28 1\\n29 1\\n30 1\\n31 1\\n32 1\\n33 1\\n34 1\\n35 1\\n36 1\\n37 1\\n38 1\\n39 1\\n40 1\\n41 1\\n42 1\\n43 1\\n44 1\\n45 1\\n46 1\\n47 1\\n48 1\\n49 1\\n50 1\\n51 1\\n52 1\\n53 1\\n54 1\\n55 1\\n56 1\\n57 1\\n58 1\\n59 1\\n60 1\\n61 1\\n62 1\\n63 1\\n64 1\\n65 1\\n66 1\\n67 1\\n68 1\\n69 1\\n70 1\\n71 1\\n72 1\\n73 1\\n74 1\\n75 1\\n76 1\\n77 1\\n78 1\\n79 1\\n80 1\\n81 1\\n82 1\\n83 1\\n84 1\\n85 1\\n86 1\\n87 1\\n88 1\\n89 1\\n90 1\\n91 1\\n92 1\\n93 1\\n94 1\\n95 1\\n96 1\\n97 1\\n98 1\\n99 1\"]}",
    "difficulty": "UNKNOWN_DIFFICULTY",
    "raw_tags": "[]",
    "name": "the-cakes-walk-3",
    "source": "hackerearth",
    "tags": "[]",
    "skill_types": "[]",
    "url": null,
    "Expected Auxiliary Space": null,
    "time_limit": null,
    "date": null,
    "picture_num": null,
    "memory_limit": null,
    "Expected Time Complexity": null
  },
  {
    "question": "You have a map as a rectangle table. Each cell of the table is either an obstacle, or a treasure with a certain price, or a bomb, or an empty cell. Your initial position is also given to you.\n\nYou can go from one cell of the map to a side-adjacent one. At that, you are not allowed to go beyond the borders of the map, enter the cells with treasures, obstacles and bombs. To pick the treasures, you need to build a closed path (starting and ending in the starting cell). The closed path mustn't contain any cells with bombs inside. Let's assume that the sum of the treasures' values that are located inside the closed path equals v, and besides, you've made k single moves (from one cell to another) while you were going through the path, then such path brings you the profit of v - k rubles.\n\nYour task is to build a closed path that doesn't contain any bombs and brings maximum profit.\n\nNote that the path can have self-intersections. In order to determine if a cell lies inside a path or not, use the following algorithm:\n\n  1. Assume that the table cells are points on the plane (the table cell on the intersection of the i-th column and the j-th row is point (i, j)). And the given path is a closed polyline that goes through these points. \n  2. You need to find out if the point p of the table that is not crossed by the polyline lies inside the polyline. \n  3. Let's draw a ray that starts from point p and does not intersect other points of the table (such ray must exist). \n  4. Let's count the number of segments of the polyline that intersect the painted ray. If this number is odd, we assume that point p (and consequently, the table cell) lie inside the polyline (path). Otherwise, we assume that it lies outside. \n\nInput\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 20) — the sizes of the table. Next n lines each contains m characters — the description of the table. The description means the following:\n\n  * character \"B\" is a cell with a bomb; \n  * character \"S\" is the starting cell, you can assume that it's empty; \n  * digit c (1-8) is treasure with index c; \n  * character \".\" is an empty cell; \n  * character \"#\" is an obstacle. \n\n\n\nAssume that the map has t treasures. Next t lines contain the prices of the treasures. The i-th line contains the price of the treasure with index i, vi ( - 200 ≤ vi ≤ 200). It is guaranteed that the treasures are numbered from 1 to t. It is guaranteed that the map has not more than 8 objects in total. Objects are bombs and treasures. It is guaranteed that the map has exactly one character \"S\".\n\nOutput\n\nPrint a single integer — the maximum possible profit you can get.\n\nExamples\n\nInput\n\n4 4\n....\n.S1.\n....\n....\n10\n\n\nOutput\n\n2\n\n\nInput\n\n7 7\n.......\n.1###2.\n.#...#.\n.#.B.#.\n.3...4.\n..##...\n......S\n100\n100\n100\n100\n\n\nOutput\n\n364\n\n\nInput\n\n7 8\n........\n........\n....1B..\n.S......\n....2...\n3.......\n........\n100\n-100\n100\n\n\nOutput\n\n0\n\n\nInput\n\n1 1\nS\n\n\nOutput\n\n0\n\nNote\n\nIn the first example the answer will look as follows.\n\n<image>\n\nIn the second example the answer will look as follows.\n\n<image>\n\nIn the third example you cannot get profit.\n\nIn the fourth example you cannot get profit as you cannot construct a closed path with more than one cell.",
    "solutions": "[]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"10 10\\n..........\\n...###....\\n.##..#....\\n.......2..\\n...S.B.1..\\n.....B....\\n....B..#..\\n.......#..\\n...B......\\n...#.....#\\n30\\n-5\\n\", \"10 10\\n..###2...#\\n#....#....\\n#........#\\n8.....#.#.\\n..6.#.#...\\n.#....7.#.\\n3###...4..\\n..#...S#.5\\n.......1..\\n.##...####\\n-1\\n72\\n63\\n2\\n40\\n49\\n13\\n42\\n\", \"20 20\\n.............#..#..#\\n.5..................\\n.#........#.#B...#..\\n#.###..B........#.##\\n.............###.1..\\n..#...2.....#....#..\\n....................\\n.........#4..#......\\n#......#....#..#..#.\\n.#.....#.........#.#\\n.........#.#.#......\\n.........#..##......\\n#........#......#.3.\\n.#............#.###.\\n.........#.#.#......\\n##.#....###...#.....\\n....##......#B......\\n...#.....##..#......\\n.#......##.S......#.\\n...#.....#....#...##\\n-23\\n26\\n-10\\n-11\\n30\\n\", \"5 5\\n.3.2.\\n.S...\\n..54.\\n.....\\n..1..\\n14\\n-28\\n-25\\n-10\\n31\\n\", \"12 12\\n......B.....\\n....B...S#..\\n#....#......\\n........#...\\n............\\n....#...B.B.\\n.#.....#..#.\\n..##........\\n...#.......B\\n.##.1....#..\\n#...B......#\\n..##...B....\\n42\\n\", \"20 20\\n.#................#.\\n.#...#####.#..#.##.S\\n5#....#..#.#.#.##..#\\n.#.....##.#.#...#..#\\n......####.##.##.#..\\n##....#....#........\\n..#...#........#...#\\n.#..#.###..#.##.##.#\\n.#4...##........#.#.\\n..#.........#.......\\n....##.#.....#.###..\\n.8..#....#.#........\\n#..#....###....###3#\\n#...#.#.###..##....7\\n...#..........##.#..\\n...6.#.........#....\\n..#.##.##.....#..##.\\n.......#........##1.\\n.#....###......#...#\\n......#....##2#.....\\n16\\n33\\n-14\\n4\\n-5\\n-16\\n66\\n54\\n\", \"20 20\\n...##...#..#...3.#..\\n.......##4#.##.#.##.\\n...#....#....#....#.\\n.##...#.#.##.###.#..\\n.##......5...#....##\\n.#..#.#.#.#.......1.\\n##.##..#.##.#..#...S\\n....#.....#.##......\\n...2...#........#..#\\n..8#....#.##...#.#..\\n.....7.#..#.....#...\\n.#...##......#.#.6..\\n......#...###..#...#\\n....#..#............\\n......#..#.#....#...\\n#....##.#....#......\\n.##.......###.#.##.#\\n..#.....####.#..#...\\n#...#...#..##.....#.\\n.......#.#.#..#.#.#.\\n58\\n83\\n96\\n66\\n69\\n60\\n7\\n10\\n\", \"20 20\\n.....#........#.....\\n...#.2...1..........\\n...........#........\\n..#.................\\n..#............7...#\\n..#...#.............\\n..................#.\\n#...................\\n....................\\n..#.....#.....#.....\\n.S......#......#....\\n....................\\n#.#...45.....8......\\n....................\\n....................\\n.........#........#.\\n.......6...#........\\n....#..#............\\n.#..............3...\\n...........#........\\n69\\n17\\n65\\n58\\n46\\n-14\\n82\\n84\\n\", \"12 12\\n...#........\\n..B....B.#..\\n.......#....\\n.....B......\\n............\\n............\\n...#1.....#.\\nB.4...3..2#.\\n...#..#.....\\n..#..#......\\n......#..S..\\n..........#.\\n-2\\n23\\n15\\n-5\\n\", \"20 20\\n........#...........\\n...#.......#.#.....#\\n....................\\n.#........#.........\\n....................\\n..#....#.3..........\\n.....#..#......#....\\n....#..............1\\n.#.........#.....##.\\n#2..................\\n.............#......\\n..#.................\\n......8..........##.\\n...........7........\\n...................4\\n........#.........5S\\n...........#........\\n.....#...........#..\\n..................6.\\n....................\\n25\\n-21\\n-2\\n27\\n49\\n-23\\n6\\n45\\n\", \"20 20\\n......#..#........#.\\n##..................\\n..#..#.....S......##\\n..##.#.....B..#.#...\\n#....#.......##...#.\\n.........#.....##...\\n.##.#.#......###....\\n###.#..##......#....\\n................#...\\n.#...#...........#.#\\n.#.#.....#........#.\\n..#..###..#..#......\\n.....#..#####..#....\\n.....###.#.....B...B\\n.....2...#...####.#.\\n...1.##.#.4.##...#..\\n##........#.#...##.#\\n....##...#.#.#..#...\\n##....B.#.###....#..\\n...#3.#..#.##.....#.\\n-36\\n81\\n169\\n16\\n\", \"12 12\\n............\\n..#S#..B.#..\\n........##..\\n...#.......#\\n.1..#...B...\\n............\\n............\\n2...B...#...\\n.#........B.\\n.......#....\\n...#..#..#..\\n.3......#.4.\\n13\\n-6\\n3\\n33\\n\", \"10 11\\n1#.7###....\\n###.#####5#\\n#.#.#.####.\\n.###..###..\\n.#3#...#.#.\\n.###4##....\\n##.#..#.2..\\n#..#.##6#..\\n.#.########\\n##.S...###.\\n34\\n57\\n1\\n53\\n-24\\n11\\n-38\\n\", \"10 11\\n62.#.#.1.#.\\n#####..##..\\n..#.##.#.##\\n####.#..#.S\\n7.#.#.#####\\n....##.##.#\\n####.##.#.#\\n.#...##.###\\n..#3....#..\\n.....5.#..4\\n6\\n40\\n-21\\n14\\n19\\n5\\n1\\n\", \"20 20\\n........#.....##..##\\n#....##......#..#...\\n.......#...#.....#..\\n#...##..#.#.#.#.....\\n.........#...5..##..\\n...##...#...#.......\\n..#.#.....##..#.#.#.\\n..##.......##....#..\\n#.....#.....#..###.#\\n..3S.###........#...\\n.#..#....#4......#..\\n.......#.....#.#.#.#\\n#.#....#..#..#.1..#.\\n.#...6........#...#.\\n..#.....#...#.#2..#.\\n...#.#..#......####.\\n...........#...#....\\n##.8.##..###..#....#\\n...7..#.###....#...#\\n..#....#..#.........\\n14\\n-24\\n44\\n65\\n5\\n-25\\n40\\n99\\n\", \"12 12\\n...#........\\n..B.B.......\\n.....#.....#\\n............\\n.......1....\\n......3.....\\n.....2......\\n............\\n...B.4......\\n........B...\\n....#.#.S...\\n............\\n-1\\n2\\n27\\n-7\\n\", \"5 5\\n.B...\\n...S.\\n.#...\\n..1..\\n#.#..\\n2\\n\", \"20 20\\n......##.##....#....\\n.....#........#..##.\\n#..#..#.##....###...\\n.#.......#.........#\\n#.#.#..##.......##..\\n#..##......##......#\\n.....#........##.#4.\\n#...##.#......#.##.#\\n#..B..#....##.#..3..\\n..##..#....#.....#.#\\n.#..#..##........#..\\n..#...#.2.#####.....\\n...#...#..#.........\\n.###....#.#....#....\\n#..#.#..B#...#B.....\\n..#.#.#..##.......#.\\n.......#.#B#.#......\\n..S..#.#............\\n#.......#...#.....1#\\n.#....#.#..#...#.#.#\\n22\\n26\\n11\\n33\\n\", \"20 20\\n..#.......#.........\\n.#..................\\n..#............#....\\n..................#.\\n.......S..#.........\\n.#B.................\\n..........#.........\\n...#.....#.....#....\\n....2#..............\\n..5...............1.\\n...#..#.......#.....\\n#..#................\\n....................\\n...#...........B3...\\n.............#......\\n...4..#........B....\\n#......#..#...##...#\\n....#.............#.\\n.............#.....#\\n.#.......#..........\\n-17\\n-12\\n22\\n28\\n-22\\n\", \"5 5\\n....2\\n.51.S\\n.3..4\\n.....\\n.....\\n-2\\n44\\n-14\\n-22\\n45\\n\", \"20 20\\n....................\\n....................\\n....................\\n....................\\n....................\\n....................\\n....3####...........\\n....#....#..........\\n....#.B..#..........\\n....#....#..........\\n.....###......####2.\\n..............#...#.\\n.....1####....#.B.#.\\n.....#...#....#.....\\n.....#.B.#.....#....\\n.....#..............\\n......###...........\\n....................\\n....................\\n...................S\\n100\\n101\\n102\\n\", \"10 11\\n...........\\n.5.........\\n.7.....#...\\n..6..4#....\\n#.....1....\\n....3......\\n..2....#...\\n#.#......#.\\n.....S.....\\n...........\\n12\\n36\\n-31\\n53\\n-30\\n-30\\n-20\\n\", \"20 20\\n.#..................\\n.##....#...3.....#.B\\n#.###...#..#...B....\\n.....#..#.#.....#...\\n#.....#.#..##..#.1#.\\n.....#.........#....\\n....#.#......#.....#\\n..........#.........\\n...#..#............#\\n.............#.2..#.\\n.#.............#....\\n####.....#.#.#.#...#\\n...#..#........#...#\\n#....#.#..#..###....\\n....#.......B.#..#.B\\n...........#....4..#\\n.#..................\\n..#.#....#...#......\\n..#...#...##..S.....\\n.....#.....#.....#..\\n2\\n-21\\n-23\\n17\\n\", \"10 10\\n..........\\n..1......#\\n.....2.4.#\\n........#.\\n.......S..\\n..........\\n.#...3....\\n..7....6#.\\n..........\\n....8...5.\\n38\\n8\\n74\\n24\\n32\\n50\\n74\\n27\\n\", \"10 11\\n.3.....#...\\n...........\\n....6#.....\\n#..........\\n...#.7.....\\n.S.......5.\\n........4..\\n#...#..2...\\n...........\\n..........1\\n2\\n56\\n45\\n-34\\n29\\n26\\n-17\\n\", \"20 20\\n..............#.....\\n............#.#.....\\n#......#.#.....#....\\n...#..........6#....\\n....................\\n...#...#..#........#\\n.............#.#.#..\\n...#7.........#...#.\\n..........#...#.....\\n........2...........\\n#....#..##.#....##.#\\n#.#.....#.#....#....\\n#..........#..#.#...\\n.#....1..........#..\\n..#.................\\n#.....###.#.....#.#.\\n#....3.....#........\\n...#4..#.#.S.#..5...\\n.....#.......8..#.#.\\n.........#.......#..\\n9\\n97\\n1\\n3\\n7\\n-42\\n-10\\n59\\n\", \"20 20\\n....................\\n#...................\\n..#.................\\n........2...........\\n.8..................\\n.....4......#..S....\\n....................\\n....................\\n...6.........5......\\n....................\\n.........#..........\\n.................1..\\n....................\\n....................\\n...3.......#........\\n....................\\n....................\\n..................7.\\n....................\\n....#...............\\n16\\n-45\\n7\\n49\\n54\\n45\\n-18\\n-41\\n\", \"20 10\\n...#....5.\\n..2##.....\\n.......##.\\n.......#..\\n...S##..#.\\n.#....7...\\n....#.#...\\n..#.##.#..\\n..###.#...\\n....6#....\\n##4#31...#\\n..#......#\\n#..##..##.\\n.#.###..#.\\n..###....#\\n....#.#...\\n##.8...#..\\n.###.#.#.#\\n.........#\\n...#..#...\\n-21\\n40\\n47\\n130\\n55\\n155\\n0\\n32\\n\", \"20 20\\n....................\\n....................\\n....................\\n...........4###.....\\n...........#...#....\\n...........#.B.#....\\n....3####..#...#....\\n....#....#.#..#.....\\n....#.B..#.#.#......\\n....#....#..........\\n.....###......####2.\\n..............#...#.\\n.....1####....#.B.#.\\n.....#...#....#.....\\n.....#.B.#.....#....\\n.....#..............\\n......###...........\\n....................\\n....................\\n...................S\\n100\\n101\\n102\\n103\\n\", \"20 20\\n....#......#S.####2#\\n#........#....##..#.\\n.....#...#.######...\\n.#.#..##.#..##.#...#\\n.......#..#....#.#.#\\n..##........###.##.#\\n##.##.#.#....###.###\\n###3#..#.#....##7#..\\n##.......#......#...\\n#..#...4....#...###.\\n#####.##...#.##.#.#.\\n###.#......####.##..\\n.#.#.#..###...#.#..#\\n#...#.....6...###..#\\n.###.##.##.##......#\\n.#..#..#.#...###..#.\\n..#......##....#....\\n..5#.#....#.##.#...#\\n..#....#..########.#\\n##8.##1#..#....#..##\\n24\\n55\\n6\\n69\\n18\\n18\\n-8\\n69\\n\", \"20 20\\n....................\\n....................\\n....................\\n....................\\n....................\\n.........6..........\\n..........5.........\\n...................8\\n....................\\n....................\\n...............7....\\n....................\\n....3...............\\n..............4.....\\n2...................\\n....................\\n....1...............\\n....................\\n....................\\nS...................\\n1\\n200\\n30\\n20\\n34\\n-2\\n15\\n100\\n\", \"10 11\\n...#...##.#\\n........##.\\n5.#..#.S.#.\\n#..........\\n.....#..#.7\\n6...4......\\n#..3###2.#.\\n.#...##.##.\\n.#.#...1...\\n.....#.#...\\n-34\\n38\\n1\\n-8\\n58\\n50\\n50\\n\", \"20 20\\n.........#..........\\n4...#...............\\n.#8.......#.....S...\\n........#.....#.....\\n.#.##....#....3...#.\\n...........#........\\n..............#..#..\\n.....6.#........#...\\n.............#.....#\\n#........#.....#..#.\\n....###.#......#....\\n..#.................\\n#.#........#.###.#..\\n....#.............1.\\n.###............#...\\n...............#...#\\n.........#.#.....5..\\n.......#.#..7...2.#.\\n..........#...#.....\\n.....#..............\\n128\\n91\\n116\\n-39\\n-29\\n-39\\n85\\n171\\n\", \"20 20\\n.#.##.##...#.####...\\n.#.#.......#......#.\\n#.#...#.....#......#\\n.##.8.##.#....##..##\\n##..#..#.#.#....#.##\\n##.#.#####.#.#.#...#\\n.....4.###...###.#.#\\n##.####.##.#.#...#..\\n.#..#.##..#.#..#....\\n..#.#.##...##..#....\\n#..##..#..#.....#.##\\n...#.##....#####...#\\n...6#5..#....#......\\n###...#.#.#..##.....\\n#..#....##.##.###..#\\n..#.##...##..#######\\n.#.##.2#.3.....#..##\\n#....#.#7#.##.#....S\\n##.#.......#...#.#..\\n..##.####1.#####.#..\\n16\\n67\\n-19\\n15\\n35\\n55\\n30\\n-23\\n\", \"20 20\\n##.#......##.###..#.\\n#..#................\\n#.............#2....\\n#.............##..#.\\n...##.....##........\\n#....#..............\\n......###.B...##.##.\\n....#.##........#.#.\\n...##..#.#..B..##.#.\\n...#........#.##.#..\\n......#........#....\\n....#..#.#......##.#\\n...#........#.#..#..\\n.....##.#..#..#.###.\\n#..S....###.#...#...\\n....##..#.#..3..#.#.\\n.........1.......#..\\n......#...B......#.#\\n.....4..##.#.....##.\\n.B#...#.............\\n38\\n-3\\n37\\n-27\\n\", \"10 11\\n.#.1....#..\\n#.........#\\n4..##..5..#\\n6.##......#\\n.3...#.7...\\n....#......\\n##...#.....\\n..#S.#.##.#\\n.#......#..\\n#.....#.2#.\\n34\\n41\\n47\\n-7\\n19\\n36\\n47\\n\", \"10 11\\n###..#..##7\\n..#.#.4#.##\\n......5...#\\n.#.1#......\\n.#.#.......\\n.#....#.#..\\n##.######62\\n##...#3....\\n.#.#..#..##\\nS....##..#.\\n-6\\n-23\\n-15\\n12\\n40\\n-3\\n30\\n\", \"10 11\\n...........\\n...........\\n.#..B......\\n....B.1....\\n...S.#.....\\n....B......\\n....B..#...\\n.......#...\\n....B......\\n...#.....#.\\n30\\n\", \"20 20\\n#................#..\\n................#.#.\\n.....##...#.3.7#.#..\\n......S..#.#........\\n....4##.#.....1..#..\\n#..#...#.#..........\\n..##........##.#....\\n.2#...##....##....##\\n##.5..#..#.#..#.#..#\\n..#.##...#......#...\\n.......#...#......##\\n..............##.#.#\\n.6..##.#........#.#.\\n.#..#.#.#........#..\\n......#.#..........#\\n.#.#....#........#..\\n..#...........8.##..\\n...........#...#..#.\\n.#..........#...#...\\n#..#..#.#....###....\\n-28\\n86\\n19\\n56\\n-43\\n11\\n21\\n-21\\n\", \"12 12\\n............\\n......B.....\\n........1...\\n............\\n.......4....\\n..B#..S.....\\n............\\n............\\n.2...#......\\n.....B......\\nB..........#\\n.......3....\\n5\\n-5\\n33\\n-9\\n\", \"20 20\\n..#..##..##......#..\\n...#..#..#..##......\\n....S...#...#....#..\\n#.#.....###...#...##\\n##.....##...#..#####\\n.#..#...........6#..\\n....#...8.#..#......\\n.#..5#.#......#.#...\\n#...........3.#.#...\\n.##.....##.........#\\n...##.#....#.##.#...\\n...............####.\\n.#.........#...#...2\\n#.#.#..#.#.#.#......\\n#.#.1...............\\n.#....4#......##..#.\\n.#....#.......#...#.\\n#........##......#.#\\n#..###..7#....#..#.#\\n#...#......#......#.\\n-22\\n-65\\n-29\\n71\\n128\\n-75\\n180\\n154\\n\", \"20 20\\n................#.B.\\n....................\\n..#..........B......\\n....................\\n....#...............\\n....................\\n....................\\n....................\\n....................\\n....................\\n........S.........4.\\n..2.................\\n............1.......\\n....................\\n....................\\n....................\\n....................\\n....B........B......\\n................3...\\n....................\\n-22\\n-22\\n17\\n-14\\n\", \"12 12\\n............\\n...........B\\n..B.........\\n............\\n....B.......\\n............\\n......B.....\\n#...........\\n........B#S.\\n#..#..#.....\\n..B......1..\\n.B..........\\n40\\n\", \"20 20\\n....................\\n....................\\n.............6......\\n#........5..........\\n....................\\n....................\\n....................\\n......3.............\\n.......1............\\n...............#....\\n.............4......\\n....................\\n....................\\n....................\\n....................\\n....7...............\\n......2...8.........\\n...S................\\n....................\\n....................\\n33\\n55\\n19\\n29\\n29\\n44\\n31\\n-7\\n\", \"20 20\\n..#.....#..#........\\n....##.##..#..#.#...\\n....#.#...#..#.#.#..\\n.#.........#........\\n........#.#.#.#..#.#\\n.....#...6..........\\n.#.#.#....5.....#...\\n.#..#.##...#....##.8\\n...##.#......#.....#\\n.#.##.......#.....#.\\n..#......##....7.#.#\\n....#...#...#...#.#.\\n..#.3...............\\n...##.#.#.....4#...#\\n2...................\\n.##....#......#.....\\n##..1..........#....\\n......##....##....##\\n..#............#..#.\\nS.................#.\\n30\\n80\\n70\\n60\\n34\\n-22\\n15\\n100\\n\", \"10 11\\n.....##.##.\\n#.#.#.S..#.\\n....#....##\\n.3.##.2.7..\\n.#..#....4#\\n#.####..#.#\\n...#....5.#\\n.6.##...#.#\\n..##..#..##\\n.#1##..#.##\\n38\\n-37\\n-2\\n-27\\n29\\n47\\n-14\\n\", \"10 10\\n.##2#...#.\\n##.6..#..1\\n#..S...74.\\n##.......#\\n#..5#8.#..\\n...##.3###\\n.........#\\n.##.###.#.\\n#..#.#.##.\\n#......###\\n-4\\n64\\n10\\n-4\\n42\\n65\\n6\\n0\\n\", \"4 4\\n....\\n.S1.\\n...#\\n....\\n10\\n\", \"5 5\\n.....\\n.S1..\\n.2...\\n...#.\\n.....\\n10\\n5\\n\", \"5 5\\n..2.1\\n....S\\n...4.\\n.....\\n..35.\\n-16\\n31\\n-40\\n27\\n-25\\n\", \"12 12\\n............\\n.B...B......\\n....#......B\\n.......#.B..\\n.#..........\\n........#.#.\\n............\\n............\\n............\\n............\\nS.B...1..B..\\n......B.....\\n-8\\n\", \"8 8\\n..#.B#..\\n..1.4...\\n...3...#\\n.B..B#..\\n#..B2...\\n#S......\\n.#.#..#.\\n.......#\\n49\\n-8\\n-4\\n28\\n\", \"20 20\\n..4..#.....#.3#.##..\\n##.......#..........\\n.#........#..#......\\n.#........#..S...6#.\\n..#.#72...........#.\\n..........##.####.##\\n......#.............\\n###.#......#.#......\\n##.....#.##..#...##.\\n..##...#..........#.\\n...8#...#....##...#.\\n...#..#.....#.....#.\\n.#...#..#..#.....#.#\\n.#.##.......##.##...\\n.###....#.#....#.#..\\n#.....#......#..5..#\\n.1..#.....#.#.#...#.\\n.#............#.#...\\n....#...#.....##.#.#\\n#.#....#.....#......\\n4\\n62\\n87\\n30\\n90\\n79\\n91\\n28\\n\", \"20 20\\n....#.#.........#...\\n..##.#.......#.#....\\n..#......##.#.#...#.\\n.S##..#.....##...#..\\n.#...#.......#B#....\\n#...#......#...##...\\n...#..........B.#.#.\\n...........3.#...##.\\n............#...B#..\\n..#..#...#.....1....\\n.....#......#.......\\n...#...#...##..#.#..\\n##........#.........\\n.#....#......#...#..\\n#.#..#..#...#....2..\\n.##..........#...#..\\n..#...........4.....\\n....#.##.....#..#.B.\\n#...#..###.#.#....##\\n............#.......\\n47\\n-28\\n8\\n-24\\n\", \"20 20\\n...#........##......\\n......#......#...#..\\n##..................\\n......6....#........\\n..#.................\\n.7........##.....#..\\n....5.....#....#....\\n.#........#.......#.\\n.............#......\\n....................\\n.#...............8..\\n..#.........4..#....\\n....#.........#.....\\n...........#....S...\\n.........#..........\\n........#.........#.\\n..................##\\n.##.....#.#3..1....2\\n.....#....#...#..#..\\n..........#.........\\n13\\n96\\n50\\n87\\n36\\n-20\\n22\\n50\\n\", \"12 12\\n..#.....B...\\n.#..........\\n..#.........\\n..#.B.......\\nB..#S#...#.#\\n............\\n..B##.#.1#..\\n...#B#...#..\\n.....B..#...\\n.....##.....\\n..B.....#.#.\\n..##.#...#.#\\n35\\n\", \"20 20\\n.....#..#....#....#.\\n.#.....#........###.\\n............B#....#.\\n..#........#.#.#....\\n#......#..#.........\\n.#.......#.........#\\n#.....##.#.#..#.....\\n#....#.#...2#..S...B\\n.........#....#.....\\n.......#....#..B#...\\n#....##..#.....#..#.\\n.........#...#...#..\\n.......##....#...3..\\n.#...........#.#..B.\\n.....14.#.....#..###\\n....#.....#.#...##..\\n........##.......#..\\n#..#...........#....\\n.....#...#..#.##....\\n................##..\\n-3\\n33\\n7\\n18\\n\", \"12 12\\n...#...##...\\n....#.B.....\\n...........#\\n###.....B..#\\n...#...B....\\n......S##..#\\n#..#..#.....\\n...##.#.#..#\\n.#...B..B##B\\n.#..#.....B.\\n#....#...1..\\n.....#.....#\\n26\\n\", \"20 20\\n.#.......#..#.#....#\\n...#........#.#..#..\\n#.##....##.#.....#3.\\n.#..#.#....#......##\\n..###......#.....#..\\n..#..#..1#.6........\\n..###...#.....#...##\\n.......#..##...#....\\n........#...#..##...\\n.###..#.....2..#....\\n#.....#.#.###...#...\\n.....#.#.###........\\n....#.#...#.........\\n.......##...4.#.....\\n..#8.............#..\\n#..#...#...S#.......\\n.........#.#........\\n....7##......#.##...\\n#.............#.#...\\n#...#.5.#...........\\n63\\n94\\n82\\n96\\n44\\n38\\n79\\n16\\n\", \"20 20\\n.##..#.#.#...#..#...\\n.S.#.....#...#...##.\\n.#......#...#......#\\n........#...........\\n.............#.#..#.\\n.#..2.#1...#...#..#.\\n......#.6....#7.#..#\\n.#....#....#...#...#\\n..........#.......#.\\n......#....#..#.....\\n.#.........#.3#.##8.\\n.#.###..........#..#\\n##...##.........###.\\n..#...#...#.#.....#.\\n....#.#.4.#....#....\\n.5##......#.....#..#\\n..#........##....#.#\\n#.#.#.#...#......#..\\n......#.............\\n..#.....#......#..#.\\n75\\n39\\n54\\n77\\n19\\n20\\n9\\n69\\n\", \"8 8\\n#.#....#\\n....1...\\n..#.....\\n..#..S#.\\n.2......\\n...4..3.\\n...#.BB.\\n.#.B..#B\\n6\\n41\\n49\\n30\\n\", \"10 11\\n........S..\\n...........\\n5........1.\\n.7#........\\n...64.#....\\n...........\\n..........#\\n.2.........\\n.....3.....\\n...........\\n-9\\n33\\n9\\n-20\\n12\\n10\\n-29\\n\", \"20 20\\n....................\\n....................\\n....................\\n....................\\n.......3............\\n....................\\n.......B............\\n....................\\n.......1............\\n....................\\n...SB..B............\\n....................\\n.......2............\\n....................\\n.......B............\\n....................\\n.......4............\\n....................\\n....................\\n....................\\n50\\n50\\n50\\n50\\n\", \"20 20\\n.............#......\\n.#..........#......#\\n.B.#.S..45........##\\n......#.......#.#...\\n.....#...#..#.......\\n.....##.............\\n..B.###.......#.....\\n....#....#....#.....\\n.....#..............\\n#.......#...........\\n......#.......#.....\\n....#..#............\\n..#.....#.#.#.......\\n.#.....##.##..#.....\\n..##........3.......\\n#.....2#..1#........\\n#.#...#..#.........#\\n................#..#\\n...............#..B.\\n##...#..............\\n-13\\n45\\n14\\n47\\n-27\\n\", \"5 5\\n.....\\n..S..\\n5.2..\\n3.4..\\n.1...\\n-4\\n7\\n-11\\n29\\n-37\\n\", \"10 11\\n##....##2#.\\n##...#.###.\\n...#.......\\n...#.#.#.#.\\n.#.###..#5.\\n#..#S#.#...\\n#3#.7##.###\\n#.#.####.#.\\n#.###.64#1.\\n.#.#..#.##.\\n-33\\n52\\n-4\\n-32\\n-3\\n29\\n-27\\n\", \"5 5\\n....3\\n.....\\n1....\\n.524.\\nS....\\n36\\n22\\n12\\n-23\\n-19\\n\", \"20 20\\n....B......#........\\n......#..#..........\\n.....#B.#......#.#..\\n....................\\n#..#.#....#.#..#....\\n#...................\\n..#.........#.......\\n..#.#...............\\n...1..B.............\\n...#...........#..3#\\n......#.............\\n.....4...#....#.....\\n...................#\\n.....#..............\\n......#.......5...#.\\n........#.#.#.#.#...\\n...#.S..............\\n....................\\n.........#....2.....\\n.........#...#......\\n13\\n-14\\n24\\n23\\n18\\n\", \"12 12\\n............\\n.....3......\\n####.BB.....\\n.....#......\\n..#...B.2...\\n4...#.B....#\\n...#..#.....\\n.....#1#S...\\n.#..#.......\\n.....##....#\\n............\\n............\\n9\\n30\\n18\\n35\\n\", \"10 11\\n#......#..4\\n#.#..##....\\n##.....##.#\\n#1..#....##\\n..#.#.#.#.#\\n##..#6.#.##\\n#7#...2..#5\\n..#.#.#....\\n.#..S.#3.#.\\n..###.##.##\\n-33\\n-39\\n58\\n20\\n33\\n54\\n-25\\n\", \"10 11\\n##.#.###.#.\\n.1###.#.5##\\n##.....#.##\\n#.#.#######\\n#4#7##.##.#\\n.###.###.#.\\n..#S.#.####\\n..2###.####\\n.....##..6#\\n.3##..###..\\n50\\n-21\\n-6\\n5\\n29\\n56\\n42\\n\", \"20 20\\n....#......#.......#\\n..##.#......##....##\\n.#....##....#B.3...#\\n.2..#........#.#..#.\\n.......#.#..#......S\\n..#...#........#....\\n....#.#....#4..5...#\\n.#.......#..#...#.#.\\n.#.#...##.#...##..#.\\n..B..#...#...##.#...\\n....#.......#.#....#\\n.#..#.........#...#.\\n..#.....#.#.#...#...\\n..........##.#...#..\\n.##.......1..#....##\\n#..#...#...#...#....\\n..B.#..#.........##.\\n..#..#.#.#.##....#..\\n......##.#........#.\\n.#........#....#....\\n-21\\n37\\n38\\n-21\\n-12\\n\", \"20 20\\n.#.##....#....##....\\n#.###....#....##..#.\\n..............#...##\\n#..........#.#.1..##\\n..#.....##..#.##..#.\\n#.#...#.#......##.#.\\n...##..#.#...#......\\n#...##...#..#..#..#.\\n#S#...#..#.#...#.#3#\\n.....#...#...#......\\n..........#..4#..B2.\\n#...##..#.#.##.....#\\n.....#...#.##.#...#.\\n.###....#.#.........\\n.#.#..###..##.....#.\\n...##.#...#..##....#\\n.5.....##B...#.#.##.\\n...#....#.#...#.###.\\n#.#......#..#..B....\\n###.#.#.....##...#..\\n44\\n12\\n23\\n7\\n33\\n\", \"20 20\\n....#..#.....#......\\n..............###...\\n.#...........#......\\n..#..#..#...........\\n......1.......##....\\n............2....#..\\n....#......##.......\\n.....#..#.....B.....\\nB.......#.#...#.....\\n..#.....#......#....\\n.#.4.......#........\\n.....#..#...#.......\\n#..#...........#....\\n....#...............\\n.....#...........#..\\n....#.....#.#..5....\\n#..#................\\n#............3......\\n........##...#.#....\\n...............BS.##\\n14\\n-26\\n-8\\n-10\\n-1\\n\", \"20 20\\n...#....#........#..\\n.#B##.#...#......#..\\n..#...##..#.#..##.#.\\n#...#.#...#..B..#.#.\\n.....#.#.##.#.#.....\\n.#.#.##....###.....#\\n...##...#...#.#...#.\\n#......##....##.....\\n#.#..#...#1.#.#B#..#\\n..#........#..##....\\n....#...#...##B.#.#.\\n#..#.#..##.#..3.####\\n....##.......#..##S.\\n.........#.....4#.#.\\n.2.........#......#.\\n.#...#.#.....#..##.#\\n..#....#...#.....##.\\n#..##....#..#..#..#.\\n#.#...##..#.##.#..#.\\n..................#.\\n37\\n-30\\n-17\\n10\\n\", \"20 20\\n##.###.#.#..#.#..#..\\n#..........#.#..#...\\n..#.#.#.....#.#####.\\n.###..........#.#.#.\\n....#...#.........#.\\n.#.#....#.##.7...##.\\n..#..S....#....#.##.\\n..#...5#.#...#.#.###\\n.....###.#...##.#...\\n.##..####.#..###.#..\\n#....#..#...1.#..#..\\n##..#..............#\\n..........#..#..#.#.\\n#....3....#.#....#..\\n..#.6.#..#.#..##..##\\n...#.......#...#..#.\\n.....###.8#...#..#..\\n....##.4#....#......\\n#2.##.#.#...#..#####\\n........#...##...#..\\n16\\n-31\\n44\\n44\\n-10\\n76\\n-48\\n30\\n\", \"8 8\\n...#.#..\\n.....1..\\n..#3..##\\n.S#....#\\n.BB..#..\\n....B#..\\n...2.4..\\n.....#B.\\n44\\n16\\n30\\n0\\n\", \"10 10\\n..........\\n...6##....\\n.##..#....\\n.....2....\\n...S......\\n..........\\n.3..B1.#..\\n.......#..\\n.5.B...4..\\n...#.....#\\n100\\n10\\n14\\n11\\n20\\n50\\n\", \"8 8\\n..#.....\\n...#....\\n.4....1#\\n..3.....\\n#B....B.\\n......B.\\n.#..B.2.\\n##.S#...\\n36\\n9\\n10\\n-6\\n\", \"10 11\\n.#.3.#.....\\n.........1.\\n.......5#..\\n#..#..##...\\n...#.....4.\\n2..........\\n....6....7.\\n......#....\\n.........#.\\n...S.......\\n49\\n-37\\n58\\n-17\\n33\\n9\\n-17\\n\", \"20 20\\n.....#.........#....\\n..#..##...##........\\n..........#.#.#.#...\\n.#.............#....\\n..............#.....\\nS#......8..#..#.....\\n..........###....#..\\n....#....#...##...##\\n....#......#.#......\\n#..#.6..#...........\\n...#.........3...#..\\n.......#........#...\\n...............#....\\n.....#..21.....#...#\\n#...........#....#.#\\n........4.....#...7.\\n..#..........#......\\n#................#5.\\n.##.......#.........\\n...#...#..........#.\\n79\\n-16\\n28\\n-16\\n92\\n61\\n60\\n-38\\n\", \"8 8\\n..#.#...\\n.2..B..#\\n.B.S....\\n.B#...1.\\n#......B\\n......4.\\n#.3#.##.\\n.#.#...#\\n34\\n24\\n5\\n29\\n\", \"20 20\\n......#.............\\n.##.................\\n...........#.#.##..#\\n.#..................\\n.#.#................\\n............#......#\\n....................\\n.B.#................\\n.B.....#1..B.#.#..2.\\n....................\\n..#S................\\n..........3....#....\\n......4......#....##\\n...#..#.#.....#.#...\\n..........#.........\\n#..B............#...\\n#...................\\n...#.......#........\\n#..............##...\\n.................#..\\n27\\n22\\n20\\n27\\n\", \"8 8\\nB......S\\n...B..2.\\n...B4.3.\\n........\\n........\\n.1......\\n........\\n...B....\\n26\\n-6\\n15\\n45\\n\", \"20 20\\n....###.......#.#...\\n.....##......#.#....\\n##.##........##.....\\n.#..........#....#..\\n#......#..#.....##..\\n##.#......#...#.....\\n5.#.#..##.......2...\\n#....###..#.....#...\\n....#.#....#......#.\\n.#....#......#....#.\\n...S#......#........\\n3...#..#.##.6#..#..#\\n.......##.7....##...\\n#...#...#.##..#..#8#\\n........###..#......\\n....#..#....#...#...\\n#.#..#..#.......4...\\n#.#..#.......#...1..\\n.#...#.#..#.###.##..\\n#....##.......##....\\n55\\n-12\\n-18\\n46\\n43\\n78\\n52\\n82\\n\", \"10 10\\n.#........\\n..#...#...\\n#....7..S.\\n..8...#...\\n.4..#.....\\n.#3.......\\n.2..#.....\\n.##.....5.\\n..1##.#6..\\n......#..#\\n58\\n30\\n47\\n73\\n-18\\n-16\\n25\\n63\\n\", \"20 20\\n...#.......#..#.#.#.\\n......#.#.#.##.#....\\n.....#..#...........\\n#..##.....#.#.......\\n....#.............#.\\n...#.....##...##...#\\n...#..............#.\\n.#..#..........##2.#\\n.....#....##........\\n..............#....#\\n#....#.##....#..#...\\n......7#...##.#.....\\n#....#6......#...#..\\n#.##.##....#....#5..\\n.....#.#..#..###....\\n..#.S.3..#..#....1##\\n..#..##..#.......#..\\n.#......4.##.....#..\\n#.##.#.#..#.8.......\\n..#.##....#...#..#.#\\n44\\n-43\\n10\\n94\\n30\\n40\\n-45\\n-13\\n\", \"10 11\\n...........\\n...........\\n.#.B.......\\n......1....\\n....SB.....\\n....B......\\n...B...#...\\n.......#...\\n....B......\\n...#.....#.\\n30\\n\", \"5 5\\n.....\\n.3..5\\n..14.\\n.....\\n..S2.\\n-24\\n-38\\n-3\\n48\\n2\\n\", \"10 11\\n...........\\n.....#.#..#\\n...#.4#....\\n##.1.......\\n#....3.##.#\\n..6....#...\\n#.##...#.S.\\n.#......#7.\\n....5.#2...\\n...#.......\\n9\\n28\\n56\\n-14\\n32\\n-12\\n15\\n\", \"20 20\\n......#...##........\\n......#..#.#.##.##.#\\n.....##.##.#.##.###.\\n.#...#.#.##...#....#\\n...3#.#.#..#..4..#..\\n...#.........##..#..\\n.....#.##..#........\\n.......#..#.#....#..\\n......#.##......#.#.\\n#..#...#....###.S...\\n....#...........##..\\n.....#.#..#.....#...\\n#..#....#..##.#...5#\\n.##......#.#..#.#..#\\n.....#....#.....#7.#\\n..#......#...###.#..\\n...##...2#.1#..#.#..\\n.###...........#...#\\n..#..##...#8........\\n.....#.#.....6..###.\\n-13\\n40\\n37\\n36\\n52\\n62\\n52\\n-22\\n\", \"10 10\\n...#...#..\\n...1...#..\\n.#..3..#..\\n..#5.7..#.\\n.4#...##..\\n....#.#...\\n..##.#...6\\n.S.......#\\n#........#\\n2#.#B.....\\n12\\n30\\n57\\n37\\n80\\n14\\n5\\n\", \"5 5\\n32...\\n.5.S1\\n.....\\n..4..\\n.....\\n11\\n57\\n19\\n-17\\n-13\\n\", \"10 11\\n..#...#.#.#\\n#..##.#####\\n7#.#5.#####\\n..##.##.###\\n#.3##.##...\\n###.#.##1.#\\n.#....#..##\\n.###.######\\n##42.#S#..#\\n...####.#.6\\n-31\\n30\\n-6\\n-12\\n-30\\n1\\n55\\n\", \"20 20\\n........#......#....\\n..6..#..............\\n.2..#1.........S#...\\n....................\\n..............#...#.\\n..............#.....\\n...#......#......#..\\n................3.#.\\n...................#\\n....#..........#....\\n..#......#..........\\n#.............#...#.\\n.............8......\\n.............#...#..\\n....................\\n..4.....#...#..#....\\n.#..............#...\\n...............#..7.\\n.......#..5..##.....\\n.........#.....#....\\n-19\\n-32\\n13\\n7\\n52\\n60\\n-9\\n77\\n\", \"5 5\\n.....\\n..4..\\n3..1.\\n.5...\\n2S...\\n-8\\n29\\n31\\n6\\n35\\n\", \"20 10\\n..........\\n........S.\\n........#.\\n......B...\\n..3.......\\n.....B1...\\n....#.....\\n..........\\n..........\\n..........\\n..........\\n.B.....B..\\n.....2....\\n....#.....\\n..........\\n..........\\n.....#....\\n..#.......\\n..........\\n........B.\\n-20\\n-2\\n143\\n\", \"20 20\\n.#.######..##.#.....\\n.......#....##...##.\\n.#......#7.....#....\\n##..#..#6........#..\\n..#.##.##..#..##...#\\n##............##....\\n.....#..#........#.#\\n.#............#..#..\\n.#.#..##..#.#...#2..\\n..................#.\\n.....#1.###......#..\\n....#..#...#.#....##\\n..#.#...##...##..4#.\\n..##.#####.##.#.###.\\n#...##.3....#.#..##.\\n..##.......##..#..##\\n........#..#8...###.\\n........#..#.#5.....\\n#.####.....#.#.#...#\\n.S...#...###.#.#..#.\\n98\\n96\\n52\\n-35\\n-79\\n47\\n80\\n-49\\n\", \"20 20\\nB.......##..#.#.....\\n.....#.#....2....#.#\\n#...##...##..##...#.\\n.#........1......##.\\n.......#.##.......##\\n.#B.#...#..#...#....\\n#..#.#.......##.#..#\\n...#..#.###........#\\n..S....#.#.#.#......\\n.....#..##....#.#.#.\\n#B#..#..............\\n.#3..4#.#.##........\\n#####.#.............\\n......###........###\\n.#........#....#...#\\n.........#..#..#....\\n##..#......###.#...#\\n..#.#..###.....#####\\n#.#....#.......#...#\\n..#...#B#.###.#...#.\\n35\\n-17\\n0\\n-2\\n\", \"10 11\\n###.#4.#.#.\\n#.....#.#.#\\n.#..#####..\\n#.#..#6.##.\\n#..23##..##\\n##..##....#\\n#..##....7.\\n#.###.#.#.#\\n#.S##5#..#1\\n###.#..##..\\n4\\n15\\n30\\n-18\\n-30\\n38\\n40\\n\", \"12 12\\n...........#\\n.#..#...B.#.\\n1...........\\n3........#..\\n.....B......\\n#.........#B\\n....B2......\\n.#.....#....\\n............\\n4S.........#\\n...##.#...#.\\n.....##..#..\\n37\\n39\\n1\\n32\\n\", \"10 10\\n...#...S##\\n#B#.....1.\\n.......#..\\n3#.B..#...\\n.........B\\n......4..#\\n......B...\\n.....2....\\n..........\\n........#.\\n36\\n40\\n16\\n-8\\n\", \"10 11\\n..#.##.1...\\n##.#..##6#.\\n..#.#..#..4\\n.....S.#.#.\\n#####.#.##.\\n7#####.5###\\n#3..##.....\\n#..#.#...2.\\n.###...##.#\\n.#....#.#.#\\n-18\\n1\\n-8\\n-7\\n-27\\n13\\n15\\n\", \"10 11\\n..##.#..#.1\\n##.##..#...\\n..###.#..#.\\n#...5#.3.##\\n##6#.#...#.\\nS.##4#...##\\n###.#......\\n.#..#..#...\\n..#..#7.###\\n#.....#.2..\\n11\\n5\\n59\\n19\\n1\\n-23\\n-11\\n\", \"20 20\\n......##.#....#.....\\n.................#..\\n##....#........#...#\\n.......#....1.......\\nB#...........##..#..\\n##....##............\\n........#..#....#.#.\\n...##.#.5.#.#.#...#.\\n..#...#..#..........\\n................#.#.\\n#.......#..##.##..#.\\n.#.....#...#S...##..\\n....#...............\\n...#.##..#....#..3..\\n..#.................\\n#....#..2...B..#....\\n........#.###.....##\\n.#.......##.....4.##\\n.....#.#B.......#..#\\n###..#......#.......\\n2\\n-9\\n-21\\n-29\\n2\\n\", \"10 11\\n...........\\n...........\\n.#.B.......\\n......1#...\\n...........\\n....B......\\n...B...#...\\n.......#.2.\\n....B......\\n...#.....#S\\n50\\n-1\\n\", \"12 12\\n..B....#..#.\\n.#..#......B\\n............\\n.B..#....#.#\\nB.....#.....\\n##....#....B\\n....#.#...#.\\n.......#...#\\n.#.......#.#\\n#.#..1.##S.#\\n..#...#.....\\nB....B....#.\\n-3\\n\", \"10 10\\n..........\\n...5##....\\n.##..#....\\n.....2....\\n...S.B....\\n..........\\n.3..B1.#..\\n.......#..\\n...B...4..\\n...#.....#\\n100\\n10\\n14\\n11\\n20\\n\", \"20 20\\n#..#...B#..........#\\n.#.##..#...#..##...B\\n#....#...........#..\\n..#..........#..#..#\\n....#1.....#....#...\\n...#.#####.#.#...##.\\n#........#..#..#.#..\\n.........#.##..#.B.#\\n............S...#...\\n.....##...#.....#...\\n.#.#..##..#......#..\\n..4.###........#.#..\\n.....3..#..#......B.\\n.#.......#....#.....\\n...##..#...#.#....#.\\n#......#............\\n.......2...##.......\\n.............##.....\\n....#...............\\n#.#....#.#..#......#\\n-5\\n-26\\n39\\n42\\n\", \"20 20\\n#...4....#..#...#...\\n..#.....#..#.......#\\n##.##.##.###.#....5.\\n####...#.#.#.....#..\\n......#.#.#...#.....\\n#...#.###..#....#...\\n..#..#......#...#...\\n#.....#.....#.####..\\n...6..#.2....##.....\\n#.####.#......1#..#.\\n..#.#...#..#..#.##..\\n#....#.....#..#.....\\n##..##.#............\\n......###.....###..3\\n.#.#.......7..#.#..#\\n..###.#..8........#.\\n#.##...........##...\\n#..#....#.#.##...#.S\\n#.............#.....\\n.#........###......#\\n57\\n28\\n-26\\n69\\n58\\n-13\\n54\\n45\\n\", \"8 8\\n.#......\\nS..#.B.#\\n.B..21B#\\n......#.\\n...#3B..\\n#....#..\\n.4...##.\\n...#...#\\n46\\n17\\n26\\n0\\n\", \"20 20\\n.###.......#...##...\\n...S....#.....##.#.#\\n#....#.....#........\\n...#...##.#......#..\\n.....##.#.##...#....\\n...........#2.......\\n........#......##...\\n.......7....##..#.##\\n..#...#.......#..#..\\n..#.#....4#..#...5#.\\n..#....#3#.......##.\\n...........##..#...#\\n.......#...#........\\n............#.#.....\\n...#........8....#..\\n............#.#...#.\\n.#......#6......#...\\n.##.........#..#..1.\\n.....###...#.....#..\\n#.#......##.....#.#.\\n49\\n43\\n83\\n0\\n-26\\n5\\n36\\n53\\n\", \"10 11\\n#....1#....\\n.#.5.#.3S#.\\n###.##...##\\n###.#......\\n.#.#..#.#..\\n#..2.#.####\\n...#..#7##.\\n#4.##..#.6.\\n.#......#..\\n...#..##...\\n55\\n-13\\n44\\n46\\n22\\n-26\\n56\\n\", \"12 12\\n..#.B#......\\n##...#...#..\\n.....#.#.1#.\\n.....#.#B...\\nB.....S.....\\n#..........#\\n.#......B...\\n...#.##.#...\\n..#.....#...\\n....#.......\\n........B...\\n..B.##....B.\\n4\\n\", \"8 8\\nB.......\\n.#1S...B\\nB....B..\\n....#.#.\\n.#......\\n...4....\\n#.2##3..\\n........\\n32\\n24\\n-8\\n37\\n\", \"12 12\\n.#..........\\n#...B.......\\n#...#.......\\n............\\nB...........\\n.3..#B...#..\\n..2#.#......\\n#......#4...\\n...BS.#.....\\n......#.....\\n...........1\\n............\\n-4\\n-6\\n6\\n10\\n\", \"20 20\\n....#.#..#........##\\n.##.....3..#..#.....\\n.......#.#.....2.#..\\n.#...#.#......##...#\\n##..##....#4#.###5#.\\n#....#..#.#.#...##..\\n..#....#..#.#...#..#\\n.S..#......1......#.\\n.##...#...#........B\\n...#.##....#.#.....#\\n.....#..#.###.......\\n.#....#.#....#.#....\\n.B#...#.####.......#\\n.#......####........\\n...####.###....#....\\n###.#.............##\\n.##..##...#..#......\\n..#.#####....#....B.\\n...#...........#.##.\\n..##......#...##.#..\\n43\\n33\\n44\\n2\\n-1\\n\", \"10 10\\n..........\\n..........\\n..........\\n.....2....\\n...S...B..\\n..........\\n.3..B1.#..\\n.......#..\\n.5.....4..\\n...#.....#\\n100\\n10\\n14\\n11\\n20\\n\", \"12 12\\n............\\n.....##.1..#\\n.......B...#\\n......#...#.\\n.B.....S....\\n....B.......\\n....B.......\\n.........#..\\nB..........#\\n............\\nB......B..#.\\n.....#......\\n13\\n\", \"12 12\\n............\\n............\\n..B........B\\n............\\n.........2..\\n...4........\\n....3....B..\\n..1B........\\n............\\n.S..........\\n............\\n............\\n16\\n-3\\n18\\n23\\n\", \"20 20\\n.#....#...###..##...\\n#...#..####.#.#...#.\\n.#.#...###.##.......\\n##....#.##...##...##\\n...#.##........#4..#\\n....###.....##...#.#\\n..#.#..#.##..###....\\n.........8....#.....\\n.##..#..#.####..#.#.\\n.##.#......##..##...\\n..####..#..#...#...5\\n...#....#..##.....##\\n.#.....#....7....#.#\\n#S....###...###..##.\\n#..#.#.#..#6..##.#..\\n2..........#..##..#1\\n..#...###....####..#\\n........#.#3...##...\\n##.####...#...#.#...\\n.......#....#.#.....\\n-16\\n93\\n-23\\n7\\n12\\n85\\n51\\n10\\n\", \"12 12\\n4.........#.\\n...........#\\n..S.......B.\\n..........#.\\n.....#.#....\\n.....B...#..\\n............\\n....#......#\\n............\\n.....3..B...\\n....B....1..\\n...2........\\n20\\n30\\n29\\n17\\n\", \"5 5\\n3..5.\\n..1..\\n.2...\\nS....\\n.4...\\n13\\n52\\n31\\n-37\\n-1\\n\", \"12 12\\n...B...B...#\\n.S..........\\n..###.#.##.#\\n.#.##..B....\\n.##.1.......\\n.......#...#\\n#..#..B#..##\\n...#.....#..\\n.....#......\\n..B.#...#B..\\n#B#..#.#....\\n...#.....#.#\\n38\\n\", \"12 12\\n...........#\\n.#B.......#B\\n.....#......\\n....#.......\\n....#.....B.\\n......#.....\\n.1.SB#......\\n..#..#......\\n...........B\\n...BB.......\\n.#.....#....\\n....#.......\\n31\\n\", \"20 20\\n.##.#.............#.\\n.........B.....#....\\n....................\\n..#.#...........##.#\\n....#.........#...S.\\n....................\\n.#..........#.....#.\\n.....#..#......#...#\\n...........#....4...\\n....#......#........\\n.....#..B#.........#\\n.#....#....3#......#\\n#.......#...........\\n......#......#.....#\\n.......#.#..##......\\n..#...5#....#...#...\\n..........#....#.#..\\n.....2..............\\n#........1....#.....\\n..............B.....\\n39\\n-1\\n49\\n46\\n-3\\n\", \"20 20\\n..........#.....1...\\n...........#.#......\\n........#.......S.#.\\n.....2.....#...#.3..\\n...#......4.........\\n..6.................\\n...........#.....8..\\n................#...\\n....................\\n....................\\n....................\\n......#.............\\n....................\\n..5.................\\n7................#..\\n....................\\n..............#.....\\n..........#.........\\n....................\\n.....#.........#....\\n57\\n4\\n49\\n22\\n32\\n-7\\n-2\\n57\\n\", \"12 12\\n.....#......\\n.....##B...#\\n.........3..\\n......#.....\\n...........#\\n.....B.....S\\n...#2.......\\n...........1\\n............\\n..........4.\\n............\\n...B.....B..\\n25\\n9\\n-3\\n4\\n\", \"20 20\\n#..#.....#.#.#......\\n...#...##.7.........\\n........#..#.......#\\n.......#.....#.....#\\n.......#......#.....\\n..#.........#......#\\n...#.#..#.#...#....#\\n...##....6...#...1..\\n.............#.....S\\n.......5.....#......\\n......#........#.#..\\n.....#..#..#...#....\\n..#......#.##.......\\n.#..................\\n#...................\\n.....#.#....8...3...\\n#....4#..#..........\\n....#.....##.....#.#\\n##2..........#......\\n#.#..#..#......#....\\n86\\n-14\\n65\\n54\\n27\\n53\\n33\\n63\\n\", \"10 10\\n....#.....\\n....#.#8..\\n6#.#..##.#\\n.#.7..4#.S\\n.#......#.\\n..#..2....\\n1......#.#\\n..3.#.....\\n......5...\\n.#.##...#.\\n8\\n12\\n-10\\n17\\n49\\n-7\\n33\\n32\\n\", \"20 20\\n.........S.5....4...\\n....................\\n....................\\n....................\\n....................\\n.........6..........\\n....................\\n....................\\n...............2....\\n....................\\n....................\\n..........7.........\\n....................\\n....................\\n....................\\n........3...........\\n....................\\n.........1..........\\n.....8..............\\n....................\\n-58\\n165\\n57\\n14\\n91\\n153\\n-30\\n122\\n\", \"10 11\\n.....#1..##\\n..#3..#S#.#\\n........#..\\n..##...7...\\n....#.#.#..\\n.#...#.#.65\\n.#...##.#2.\\n......#..##\\n#.4.......#\\n.#...#.#...\\n0\\n-36\\n1\\n56\\n57\\n-31\\n-16\\n\", \"20 20\\n#..#....#.#....###..\\n#.....#.....##....##\\n#.###........##.....\\n#..####.#.##...#.#..\\n.##....#.....#5...#.\\n.....#####1.###.#..#\\n#.###...#..##.6.....\\n#4.#.#.....8..#.####\\n##.#....#.....3#.##.\\n#..##........##.....\\n.#.#..####2......#..\\n.#.#......##.##.#...\\n#....##.#.###..#...#\\n.#.#.##.#..##.#.#...\\n....#.##..#..#.##.##\\n.#.......7###....#.#\\n..##.##....#.##....#\\n####....#...#..#.#..\\n#.#.#.#.##.....###.#\\n####........###.#S#.\\n0\\n78\\n27\\n78\\n-25\\n47\\n-19\\n84\\n\", \"10 10\\n..###2...#\\n#....#....\\n#........#\\n8.....#.#.\\n..6.#.#...\\n.#....7.#.\\n3###...4..\\n..#...S#.5\\n.......1..\\n.##...####\\n-1\\n72\\n63\\n2\\n40\\n49\\n13\\n3\\n\", \"20 20\\n...##...#..#...3.#..\\n.......##4#.##.#.##.\\n...#....#....#....#.\\n.##...#.#.##.###.#..\\n.##......5...#....##\\n.#..#.#.#.#.......1.\\n##.##..#.##.#..#...S\\n....#.....#.##......\\n...2...#........#..#\\n..8#....#.##...#.#..\\n.....7.#..#.....#...\\n.#...##......#.#.6..\\n......#...###..#...#\\n....#..#............\\n......#..#.#....#...\\n#....##.#....#......\\n.##.......###.#.##.#\\n..#.....####.#..#...\\n#...#...#..##.....#.\\n.......#.#.#..#.#.#.\\n58\\n83\\n96\\n66\\n94\\n60\\n7\\n10\\n\", \"20 20\\n........#.....##..##\\n#....##......#..#...\\n.......#...#.....#..\\n#...##..#.#.#.#.....\\n.........#...5..##..\\n...##...#...#.......\\n..#.#.....##..#.#.#.\\n..##.......##....#..\\n#.....#.....#..###.#\\n..3S.###........#...\\n.#..#....#4......#..\\n.......#.....#.#.#.#\\n#.#....#..#..#.1..#.\\n.#...6........#...#.\\n..#.....#...#.#2..#.\\n...#.#..#......####.\\n...........#...#....\\n##.8.##..###..#....#\\n...7..#.###....#...#\\n..#....#..#.........\\n14\\n-24\\n44\\n5\\n5\\n-25\\n40\\n99\\n\", \"10 11\\n.3.....#...\\n...........\\n....6#.....\\n#..........\\n...#.7.....\\n.S.......5.\\n........4..\\n#...#..2...\\n...........\\n..........1\\n2\\n60\\n45\\n-34\\n29\\n26\\n-17\\n\", \"20 20\\n..............#.....\\n............#.#.....\\n#......#.#.....#....\\n...#..........6#....\\n....................\\n...#...#..#........#\\n.............#.#.#..\\n...#7.........#...#.\\n..........#...#.....\\n........2...........\\n#....#..##.#....##.#\\n#.#.....#.#....#....\\n#..........#..#.#...\\n.#....1..........#..\\n..#.................\\n#.....###.#.....#.#.\\n#....3.....#........\\n...#4..#.#.S.#..5...\\n.....#.......8..#.#.\\n.........#.......#..\\n9\\n97\\n1\\n3\\n7\\n-42\\n-10\\n37\\n\", \"20 20\\n....................\\n#...................\\n..#.................\\n........2...........\\n.8..................\\n.....4......#..S....\\n....................\\n....................\\n...6.........5......\\n....................\\n.........#..........\\n.................1..\\n....................\\n....................\\n...3.......#........\\n....................\\n....................\\n..................7.\\n....................\\n....#...............\\n16\\n-45\\n13\\n49\\n54\\n45\\n-18\\n-41\\n\", \"20 20\\n....................\\n....................\\n....................\\n...........4###.....\\n...........#...#....\\n...........#.B.#....\\n....3####..#...#....\\n....#....#.#..#.....\\n....#.B..#.#.#......\\n....#....#..........\\n.....###......####2.\\n..............#...#.\\n.....1####....#.B.#.\\n.....#...#....#.....\\n.....#.B.#.....#....\\n.....#..............\\n......###...........\\n....................\\n....................\\n...................S\\n101\\n101\\n102\\n103\\n\", \"20 20\\n....................\\n....................\\n....................\\n....................\\n....................\\n.........6..........\\n..........5.........\\n...................8\\n....................\\n....................\\n...............7....\\n....................\\n....3...............\\n..............4.....\\n2...................\\n....................\\n....1...............\\n....................\\n....................\\nS...................\\n1\\n200\\n30\\n26\\n34\\n-2\\n15\\n100\\n\", \"20 20\\n..#..##..##......#..\\n...#..#..#..##......\\n....S...#...#....#..\\n#.#.....###...#...##\\n##.....##...#..#####\\n.#..#...........6#..\\n....#...8.#..#......\\n.#..5#.#......#.#...\\n#...........3.#.#...\\n.##.....##.........#\\n...##.#....#.##.#...\\n...............####.\\n.#.........#...#...2\\n#.#.#..#.#.#.#......\\n#.#.1...............\\n.#....4#......##..#.\\n.#....#.......#...#.\\n#........##......#.#\\n#..###..7#....#..#.#\\n#...#......#......#.\\n-22\\n-65\\n-29\\n105\\n128\\n-75\\n180\\n154\\n\", \"12 12\\n............\\n......B.....\\n..B.........\\n............\\n....B.......\\n............\\n......B.....\\n#...........\\n........B#S.\\n#..#..#.....\\n..B......1..\\n.B..........\\n40\\n\", \"20 20\\n....................\\n....................\\n.............6......\\n#........5..........\\n....................\\n....................\\n....................\\n......3.............\\n.......1............\\n...............#....\\n.............4......\\n....................\\n....................\\n....................\\n....................\\n....7...............\\n......2...8.........\\n...S................\\n....................\\n....................\\n33\\n55\\n19\\n29\\n29\\n82\\n31\\n-7\\n\", \"5 5\\n..2.1\\n....S\\n...4.\\n.....\\n..35.\\n-16\\n31\\n-40\\n27\\n-31\\n\", \"20 20\\n..4..#.....#.3#.##..\\n##.......#..........\\n.#........#..#......\\n.#........#..S...6#.\\n..#.#72...........#.\\n..........##.####.##\\n......#.............\\n###.#......#.#......\\n##.....#.##..#...##.\\n..##...#..........#.\\n...8#...#....##...#.\\n...#........#..#..#.\\n.#...#..#..#.....#.#\\n.#.##.......##.##...\\n.###....#.#....#.#..\\n#.....#......#..5..#\\n.1..#.....#.#.#...#.\\n.#............#.#...\\n....#...#.....##.#.#\\n#.#....#.....#......\\n4\\n62\\n87\\n30\\n90\\n79\\n91\\n28\\n\", \"20 20\\n......##........#...\\n......#......#...#..\\n##..................\\n......6....#........\\n..#.................\\n.7........##.....#..\\n....5.....#....#....\\n.#........#.......#.\\n.............#......\\n....................\\n.#...............8..\\n..#.........4..#....\\n....#.........#.....\\n...........#....S...\\n.........#..........\\n........#.........#.\\n..................##\\n.##.....#.#3..1....2\\n.....#....#...#..#..\\n..........#.........\\n13\\n96\\n50\\n87\\n36\\n-20\\n22\\n50\\n\", \"20 20\\n.....#..#....#....#.\\n.#.....#........###.\\n............B#....#.\\n..#........#.#.#....\\n#......#..#.........\\n.#.......#.........#\\n#.....##.#.#..#.....\\n#....#.#...2#..S...B\\n.........#....#.....\\n.......#....#..B#...\\n#....##..#.....#..#.\\n.........#...#...#..\\n.......##....#...3..\\n.#...........#.#..B.\\n.....14.#.....#..###\\n....#.....#.#...##..\\n........##.......#..\\n#..#...........#....\\n....##.#..#...#.....\\n................##..\\n-3\\n33\\n7\\n18\\n\", \"10 11\\n........S..\\n...........\\n5........1.\\n.7#........\\n...64.#....\\n...........\\n..........#\\n.2.........\\n.....3.....\\n...........\\n-2\\n33\\n9\\n-20\\n12\\n10\\n-29\\n\", \"20 20\\n.............#......\\n.#..........#......#\\n.B.#.S..45........##\\n......#.......#.#...\\n.....#...#..#.......\\n.....##.............\\n..B.###.......#.....\\n....#....#....#.....\\n.....#..............\\n#.......#...........\\n......#.......#.....\\n....#..#............\\n..#.....#.#.#.......\\n.#.....##.##..#.....\\n.......3........##..\\n#.....2#..1#........\\n#.#...#..#.........#\\n................#..#\\n...............#..B.\\n##...#..............\\n-13\\n45\\n14\\n47\\n-27\\n\", \"20 20\\n....B......#........\\n......#..#..........\\n.....#B.#......#.#..\\n....................\\n#..#.#....#.#..#....\\n#...................\\n..#.........#.......\\n..#.#...............\\n...1..B.............\\n...#...........#..3#\\n......#.............\\n.....4...#....#.....\\n...................#\\n.....#..............\\n......#.......5...#.\\n........#.#.#.#.#...\\n...#.S..............\\n....................\\n.........#....2.....\\n.........#...#......\\n13\\n-2\\n24\\n23\\n18\\n\", \"12 12\\n............\\n.....3......\\n.....BB.####\\n.....#......\\n..#...B.2...\\n4...#.B....#\\n...#..#.....\\n.....#1#S...\\n.#..#.......\\n.....##....#\\n............\\n............\\n9\\n30\\n18\\n35\\n\", \"20 20\\n.#.##....#....##....\\n#.###....#....##..#.\\n..............#...##\\n#..........#.#.1..##\\n..#.....##..#.##..#.\\n#.#...#.#......##.#.\\n...##..#.#...#......\\n#...##...#..#..#..#.\\n#S#...#..#.#...#.#3#\\n......#...#...#.....\\n..........#..4#..B2.\\n#...##..#.#.##.....#\\n.....#...#.##.#...#.\\n.###....#.#.........\\n.#.#..###..##.....#.\\n...##.#...#..##....#\\n.5.....##B...#.#.##.\\n...#....#.#...#.###.\\n#.#......#..#..B....\\n###.#.#.....##...#..\\n44\\n12\\n23\\n7\\n33\\n\", \"20 20\\n.#................#.\\n.#...#####.#..#.##.S\\n5#....#..#.#.#.##..#\\n.#.....##.#.#...#..#\\n......####.##.##.#..\\n##....#....#........\\n#...#........#...#..\\n.#..#.###..#.##.##.#\\n.#4...##........#.#.\\n..#.........#.......\\n....##.#.....#.###..\\n.8..#....#.#........\\n#..#....###....###3#\\n#...#.#.###..##....7\\n...#..........##.#..\\n...6.#.........#....\\n..#.##.##.....#..##.\\n.......#........##1.\\n.#....###......#...#\\n......#....##2#.....\\n16\\n33\\n-14\\n4\\n-5\\n-16\\n66\\n54\\n\", \"20 20\\n......#..#........#.\\n##..................\\n..#..#.....S......##\\n..##.#.....B..#.#...\\n#....#.......##...#.\\n.........#.....##...\\n.##.#.#......###....\\n###.#..#.......#.#..\\n................#...\\n.#...#...........#.#\\n.#.#.....#........#.\\n..#..###..#..#......\\n.....#..#####..#....\\n.....###.#.....B...B\\n.....2...#...####.#.\\n...1.##.#.4.##...#..\\n##........#.#...##.#\\n....##...#.#.#..#...\\n##....B.#.###....#..\\n...#3.#..#.##.....#.\\n-36\\n81\\n169\\n16\\n\", \"12 12\\n............\\n..#S#..B.#..\\n........##..\\n...#.......#\\n.1..#...B...\\n............\\n............\\n2...B...#...\\n.#........B.\\n.......#....\\n...#..#..#..\\n.3......#.4.\\n13\\n-3\\n3\\n33\\n\", \"10 11\\n1#.7###....\\n###.#####5#\\n#.#.#.####.\\n.###..###..\\n.#3#...#.#.\\n.###4##....\\n##.#..#.2..\\n#..#.##6#..\\n.#.########\\n##.S...###.\\n34\\n112\\n1\\n53\\n-24\\n11\\n-38\\n\", \"10 11\\n62.#.#.1.#.\\n#####..##..\\n..#.##.#.##\\n####.#..#.S\\n#####.#.#.7\\n....##.##.#\\n####.##.#.#\\n.#...##.###\\n..#3....#..\\n.....5.#..4\\n6\\n40\\n-21\\n14\\n19\\n5\\n1\\n\", \"12 12\\n...#........\\n..B.B.......\\n.....#.....#\\n............\\n.......1....\\n......3.....\\n.....2......\\n............\\n...B.4......\\n........B...\\n....#.#.S...\\n............\\n-1\\n2\\n15\\n-7\\n\", \"20 20\\n......##.##....#....\\n.....#........#..##.\\n#..#..#.##....###...\\n.#.......#.........#\\n#.#.#..##.......##..\\n#..##......##......#\\n.....#........##.#4.\\n#...##.#......#.##.#\\n#..B..#....##.#..3..\\n..##..#....#.....#.#\\n.#..#..##........#..\\n..#...#.2.#####.....\\n.........#..#...#...\\n.###....#.#....#....\\n#..#.#..B#...#B.....\\n..#.#.#..##.......#.\\n.......#.#B#.#......\\n..S..#.#............\\n#.......#...#.....1#\\n.#....#.#..#...#.#.#\\n22\\n26\\n11\\n33\\n\", \"10 11\\n###..#..##7\\n..#.#.4#.##\\n......5...#\\n.#.1#......\\n.#.#.......\\n.#....#.#..\\n##.######62\\n##...#3....\\n.#.#..#.#.#\\nS....##..#.\\n-6\\n-23\\n-15\\n12\\n40\\n-3\\n30\\n\", \"20 20\\n#................#..\\n................#.#.\\n.....##...#.3.7#.#..\\n......S..#.#........\\n....4##.#.....1..#..\\n#..#...#.#..........\\n..##........##.#....\\n.2#...##....##....##\\n##.5..#..#.#..#.#..#\\n...#......#...##.#..\\n.......#...#......##\\n..............##.#.#\\n.6..##.#........#.#.\\n.#..#.#.#........#..\\n......#.#..........#\\n.#.#....#........#..\\n..#...........8.##..\\n...........#...#..#.\\n.#..........#...#...\\n#..#..#.#....###....\\n-28\\n86\\n19\\n56\\n-43\\n11\\n21\\n-21\\n\", \"12 12\\n............\\n......B.....\\n........1...\\n............\\n.......4....\\n.....S..#B..\\n............\\n............\\n.2...#......\\n.....B......\\nB..........#\\n.......3....\\n5\\n-5\\n33\\n-9\\n\", \"10 11\\n.....##.##.\\n#.#.#.S..#.\\n....#....##\\n.3.##.2.7..\\n.#..#....4#\\n#.####..#.#\\n...#....5.#\\n.6.##...#.#\\n..##..#..##\\n.#1##..#.##\\n38\\n-37\\n-2\\n-54\\n29\\n47\\n-14\\n\", \"10 10\\n.##2#...#.\\n##.6..#..1\\n#..S...74.\\n##.......#\\n#..5#8.#..\\n...##.3###\\n.........#\\n.##.###.#.\\n#..#.#.##.\\n#......###\\n-4\\n64\\n10\\n-4\\n1\\n65\\n6\\n0\\n\", \"4 4\\n....\\n.S1.\\n...#\\n....\\n6\\n\", \"8 8\\n..#.B#..\\n..1.4...\\n...3...#\\n.B..B#..\\n#..B2...\\n#S......\\n.#.#..#.\\n.......#\\n49\\n-8\\n-4\\n44\\n\", \"20 20\\n....#.#.........#...\\n..##.#.......#.#....\\n..#......##.#.#...#.\\n.S##..#.....##...#..\\n.#...#.......#B#....\\n#...#......#....#.#.\\n...#..........B.#.#.\\n...........3.#...##.\\n............#...B#..\\n..#..#...#.....1....\\n.....#......#.......\\n...#...#...##..#.#..\\n##........#.........\\n.#....#......#...#..\\n#.#..#..#...#....2..\\n.##..........#...#..\\n..#...........4.....\\n....#.##.....#..#.B.\\n#...#..###.#.#....##\\n............#.......\\n47\\n-28\\n8\\n-24\\n\", \"20 20\\n.##..#.#.#...#..#...\\n.S.#.....#...#...##.\\n.#......#...#......#\\n........#...........\\n.............#.#..#.\\n.#..2.#1...#...#..#.\\n......#.6....#7.#..#\\n.#....#....#...#...#\\n..........#.......#.\\n......#....#..#.....\\n.#.........#.3#.##8.\\n.#.###..........#..#\\n##...##.........###.\\n..#...#...#.#.....#.\\n....#.#.4.#....#....\\n.5##......#.....#..#\\n..#........##....#.#\\n#.#.#.#...#......#..\\n......#.............\\n..#.....#......#..#.\\n75\\n39\\n54\\n133\\n19\\n20\\n9\\n69\\n\", \"10 11\\n##....##2#.\\n##...#.###.\\n...#.......\\n.#.#.#.#...\\n.#.###..#5.\\n#..#S#.#...\\n#3#.7##.###\\n#.#.####.#.\\n#.###.64#1.\\n.#.#..#.##.\\n-33\\n52\\n-4\\n-32\\n-3\\n29\\n-27\\n\", \"5 5\\n....3\\n.....\\n1....\\n.524.\\nS....\\n36\\n22\\n12\\n-28\\n-19\\n\", \"20 20\\n....#..#.....#......\\n..............###...\\n.#...........#......\\n..#..#..#...........\\n......1.......##....\\n............2....#..\\n....#......##.......\\n.....#..#.....B.....\\nB.......#.#...#.....\\n..#.....#......#....\\n.#.4.......#........\\n.....#..#...#.......\\n....#...........#..#\\n....#...............\\n.....#...........#..\\n....#.....#.#..5....\\n#..#................\\n#............3......\\n........##...#.#....\\n...............BS.##\\n14\\n-26\\n-8\\n-10\\n-1\\n\", \"8 8\\n...#.#..\\n.....1..\\n..#3..##\\n.S#....#\\n.BB..#..\\n....B#..\\n...2.4..\\n.....#B.\\n36\\n16\\n30\\n0\\n\", \"7 7\\n.......\\n.1###2.\\n.#...#.\\n.#.B.#.\\n.3...4.\\n..##...\\n......S\\n100\\n100\\n100\\n100\\n\", \"7 8\\n........\\n........\\n....1B..\\n.S......\\n....2...\\n3.......\\n........\\n100\\n-100\\n100\\n\", \"1 1\\nS\\n\", \"4 4\\n....\\n.S1.\\n....\\n....\\n10\\n\"], \"outputs\": [\"7\\n\", \"0\\n\", \"0\\n\", \"11\\n\", \"0\\n\", \"0\\n\", \"96\\n\", \"334\\n\", \"12\\n\", \"11\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"75\\n\", \"4\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"15\\n\", \"201\\n\", \"69\\n\", \"0\\n\", \"210\\n\", \"41\\n\", \"125\\n\", \"117\\n\", \"0\\n\", \"274\\n\", \"29\\n\", \"36\\n\", \"0\\n\", \"335\\n\", \"0\\n\", \"0\\n\", \"42\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"483\\n\", \"0\\n\", \"30\\n\", \"186\\n\", \"106\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"3\\n\", \"19\\n\", \"0\\n\", \"0\\n\", \"127\\n\", \"0\\n\", \"140\\n\", \"13\\n\", \"17\\n\", \"0\\n\", \"296\\n\", \"219\\n\", \"27\\n\", \"8\\n\", \"148\\n\", \"19\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"5\\n\", \"18\\n\", \"0\\n\", \"0\\n\", \"22\\n\", \"9\\n\", \"0\\n\", \"0\\n\", \"84\\n\", \"0\\n\", \"64\\n\", \"0\\n\", \"59\\n\", \"180\\n\", \"0\\n\", \"46\\n\", \"9\\n\", \"90\\n\", \"262\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"76\\n\", \"51\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"45\\n\", \"0\\n\", \"121\\n\", \"108\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"26\\n\", \"0\\n\", \"2\\n\", \"47\\n\", \"67\\n\", \"0\\n\", \"162\\n\", \"0\\n\", \"0\\n\", \"31\\n\", \"0\\n\", \"0\\n\", \"18\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"20\\n\", \"19\\n\", \"84\\n\", \"100\\n\", \"0\\n\", \"288\\n\", \"82\\n\", \"435\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"96\\n\", \"32\\n\", \"45\\n\", \"103\\n\", \"123\\n\", \"275\\n\", \"42\\n\", \"517\\n\", \"30\\n\", \"224\\n\", \"19\\n\", \"127\\n\", \"140\\n\", \"17\\n\", \"8\\n\", \"33\\n\", \"5\\n\", \"18\\n\", \"9\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"275\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"0\\n\", \"364\\n\", \"0\\n\", \"0\\n\", \"2\\n\"]}",
    "difficulty": "VERY_HARD",
    "raw_tags": "['bitmasks', 'shortest paths']",
    "name": null,
    "source": "codeforces",
    "tags": "['Bit manipulation', 'Shortest paths']",
    "skill_types": "['Bit manipulation']",
    "url": "https://codeforces.com/problemset/problem/375/C",
    "Expected Auxiliary Space": null,
    "time_limit": "1.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  },
  {
    "question": "The Little Elephant enjoys recursive functions.\n\nThis time he enjoys the sorting function. Let a is a permutation of an integers from 1 to n, inclusive, and ai denotes the i-th element of the permutation. The Little Elephant's recursive function f(x), that sorts the first x permutation's elements, works as follows:\n\n  * If x = 1, exit the function. \n  * Otherwise, call f(x - 1), and then make swap(ax - 1, ax) (swap the x-th and (x - 1)-th elements of a). \n\n\n\nThe Little Elephant's teacher believes that this function does not work correctly. But that-be do not get an F, the Little Elephant wants to show the performance of its function. Help him, find a permutation of numbers from 1 to n, such that after performing the Little Elephant's function (that is call f(n)), the permutation will be sorted in ascending order.\n\nInput\n\nA single line contains integer n (1 ≤ n ≤ 1000) — the size of permutation.\n\nOutput\n\nIn a single line print n distinct integers from 1 to n — the required permutation. Numbers in a line should be separated by spaces.\n\nIt is guaranteed that the answer exists.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1 \n\nInput\n\n2\n\n\nOutput\n\n2 1",
    "solutions": "[\"n = int(input())\\nl = list(range(1, n + 1))\\nl = sorted(l)\\nl.insert(0, l[-1])\\nl.pop()\\nprint(*l)\\n\", \"n = int(input())\\nprint(' '.join([str(n) if x == 0 else str(x) for x in range(0, n)]))\\n\", \"n = int(input())\\nprint(' '.join((str(x) for x in [n] + [a for a in range(1, n)])))\\n\", \"def main():\\n\\tn = int(input())\\n\\tdata = list(range(1, n + 1))\\n\\tdata.sort()\\n\\tdata.pop()\\n\\tdata.insert(0, n)\\n\\tfor j in data:\\n\\t\\tprint(j, end=' ')\\nmain()\\n\", \"import sys\\nfrom os import path\\nif path.exists('input.txt'):\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nn = int(input())\\nsys.stdout.write(str(n) + ' ')\\nfor i in range(1, n):\\n\\tsys.stdout.write(str(i) + ' ')\\n\", \"n = int(input())\\nprint(n, *[i for i in range(1, n)])\\n\", \"a = int(input())\\nprint(a)\\nfor i in range(1, a):\\n\\tprint(i)\\n\", \"n = int(input())\\nprint(n, end=' ')\\nprint(*range(1, n))\\n\", \"n = int(input())\\nA = [n]\\nfor i in range(1, n):\\n\\tA.append(i)\\nfor i in A:\\n\\tprint(i, end=' ')\\n\", \"n = int(input())\\na = [i for i in range(1, n)]\\na.insert(0, n)\\nprint(*a[0:n])\\n\", \"x = int(input())\\nprint(x, end=' ')\\nfor i in range(1, x):\\n\\tprint(i, end=' ')\\n\", \"n = int(input())\\nl = []\\nfor i in range(1, n + 1, 1):\\n\\tl.sort()\\n\\tl = [i] + l\\nfor i in l:\\n\\tprint(i, end=' ')\\nprint()\\n\", \"d = int(input())\\nprint(d)\\nfor i in range(1, d):\\n\\tprint(i)\\n\", \"def swap(a, b):\\n\\ttemp = a\\n\\ta = b\\n\\tb = temp\\n\\treturn (a, b)\\n\\ndef main():\\n\\tn = int(input())\\n\\tif n == 1:\\n\\t\\tprint(n)\\n\\telse:\\n\\t\\tsequence = [str(x) for x in range(1, n + 1)]\\n\\t\\ti = n - 1\\n\\t\\twhile i > 0:\\n\\t\\t\\t(sequence[i], sequence[i - 1]) = swap(sequence[i], sequence[i - 1])\\n\\t\\t\\ti -= 1\\n\\t\\tsequence = ' '.join(sequence)\\n\\t\\tprint(sequence)\\nmain()\\n\", \"s = int(input())\\nprint(s, end=' ')\\nfor i in range(1, s):\\n\\tprint(i, end=' ')\\n\", \"n = int(input())\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n - 1):\\n\\t\\tprint(i, end=' ')\\n\\tprint(n - 1)\\n\", \"a = int(input())\\nb = []\\nfor i in range(1, a):\\n\\tb.append(str(i))\\nprint(a, *b)\\n\", \"n = int(input())\\na = []\\nfor i in range(1, n + 1):\\n\\ta.append(i)\\nb = [a[-1]] + a[:-1]\\nprint(' '.join(map(str, b)))\\n\", \"n = int(input())\\nl = [n] + [i for i in range(1, n)]\\nprint(' '.join(map(str, l)))\\n\", \"l = [int(i) for i in range(1, int(input()) + 1)]\\np = [l[-1]] + l[:-1]\\nprint(*p)\\n\", \"n = int(input())\\nprint(n, end=' ')\\nfor _ in range(1, n):\\n\\tprint(_, end=' ')\\n\", \"n = int(input())\\na = str(n)\\nfor i in range(n - 1):\\n\\ta += ' ' + str(i + 1)\\nprint(a)\\n\", \"n = int(input())\\nr = []\\nr.append(n)\\nfor i in range(1, n):\\n\\tr.append(i)\\nprint(*r)\\n\", \"N = int(input())\\nprint(1 if N == 1 else N, *[i for i in range(1, N)])\\n\", \"n = int(input())\\na = [n] + list(range(1, n))\\nprint(*a)\\n\", \"n = int(input())\\nlst = [str(n)] + [str(i) for i in range(1, n)]\\nprint(' '.join(lst))\\n\", \"a = int(input())\\nprint(a, end=' ')\\nif a > 1:\\n\\tprint(' '.join(map(str, range(1, a))))\\n\", \"import sys, os, io, time, copy\\nif os.path.exists('input.txt'):\\n\\tsys.stdin = open('input.txt', 'r')\\n\\tsys.stdout = open('output.txt', 'w')\\nimport math\\n\\ndef main():\\n\\tn = int(input())\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\n\\tprint('')\\nmain()\\n\", \"n = int(input())\\na = [i for i in range(1, n + 1)]\\nres = a[-1:] + a[:-1]\\nprint(' '.join(map(str, res)))\\n\", \"n = int(input())\\nperm = [i for i in range(1, n + 1)]\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tans = [perm[-1]] + perm[0:n - 1]\\n\\tans = [str(i) for i in ans]\\n\\tprint(' '.join(ans))\\n\", \"n = int(input())\\narr = []\\narr.append(n)\\nfor i in range(1, n):\\n\\tarr.append(i)\\nfor i in range(n):\\n\\tprint(arr[i], end=' ')\\n\", \"def my_fun(n):\\n\\ta = [n]\\n\\tfor i in range(1, n):\\n\\t\\ta.append(i)\\n\\treturn a\\nprint(*my_fun(int(input())))\\n\", \"def LittleElephantAndFunction(n):\\n\\tresult = str(n)\\n\\ti = 1\\n\\twhile i < n:\\n\\t\\tresult += ' '\\n\\t\\tresult += str(i)\\n\\t\\ti += 1\\n\\treturn result\\nn = int(input())\\nprint(LittleElephantAndFunction(n))\\n\", \"n = int(input())\\ns = str(n) + ' ' + ' '.join(list(map(str, list(range(1, n)))))\\nprint(s)\\n\", \"n = int(input())\\narr = [x for x in range(1, n)]\\narr.insert(0, n)\\nprint(*arr)\\n\", \"n = int(input())\\na = [str(i) for i in range(1, n + 1)]\\nwhile n != 1:\\n\\ttemp = a[n - 1]\\n\\ta[n - 1] = a[n - 2]\\n\\ta[n - 2] = temp\\n\\tn -= 1\\nprint(' '.join(a))\\n\", \"n = int(input())\\nprint(n, end=' ')\\nfor i in range(0, n - 1):\\n\\tprint(i + 1, sep=' ')\\n\", \"N = int(input())\\nprint(N, *[i for i in range(1, N)])\\n\", \"n = int(input())\\nprint(n, ' '.join(map(str, range(1, n))))\\n\", \"from sys import *\\ninp = lambda : stdin.readline()\\n\\ndef main():\\n\\tn = int(inp())\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\nmain()\\n\", \"try:\\n\\tn = int(input())\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\nexcept EOFError:\\n\\tpass\\n\", \"def f(l, n):\\n\\tif n == 0:\\n\\t\\treturn\\n\\tf(l, n - 1)\\n\\t(l[n - 1], l[n]) = (l[n], l[n - 1])\\n\\treturn\\nn = int(input())\\nl = list(range(1, n + 1))\\nf(l, n - 1)\\ns = list(range(1, n + 1))\\nfor (i, x) in enumerate(l, 1):\\n\\ts[x - 1] = i\\nprint(*s, end=' ')\\n\", \"def readln():\\n\\treturn tuple(map(int, input().split()))\\n(n,) = readln()\\nprint(*tuple([n] + list(range(1, n))))\\n\", \"from sys import stdin, stdout\\nimport math\\nfrom itertools import permutations, combinations\\nfrom collections import defaultdict\\nfrom bisect import bisect_left\\nfrom bisect import bisect_right\\nfrom collections import deque\\n\\ndef L():\\n\\treturn list(map(int, stdin.readline().split()))\\n\\ndef In():\\n\\treturn map(int, stdin.readline().split())\\n\\ndef I():\\n\\treturn int(stdin.readline())\\nP = 1000000007\\nn = I()\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\n\", \"import sys\\nn = int(input())\\nsys.stdout.write(str(n) + ' ')\\nfor i in range(1, n):\\n\\tsys.stdout.write(str(i) + ' ')\\n\", \"n = int(input())\\nl = [int(i) for i in range(1, n + 1)]\\nprint(l[-1], *l[0:-1])\\n\", \"a = int(input())\\nb = list(range(1, a + 1))\\nx = b[a - 1]\\nprint(x, end=' ')\\ndel b[a - 1]\\nprint(*b)\\n\", \"n = int(input())\\ns = str(n) + ' '\\nfor i in range(1, n):\\n\\ts = s + str(i) + ' '\\nprint(s)\\n\", \"n = int(input())\\np = [n] + list(range(1, n))\\nfor x in p:\\n\\tprint(x, end=' ')\\n\", \"n = int(input())\\nprint(' '.join([str(c) for c in [n] + list(range(1, n))]))\\n\", \"n = int(input())\\nl = [n]\\nfor i in range(1, n):\\n\\tl.append(i)\\nprint(*l)\\n\", \"def main():\\n\\tn = int(input())\\n\\tif n == 1:\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\tA = [n]\\n\\t\\tB = [x for x in range(1, n)]\\n\\t\\tC = A + B\\n\\t\\tprint(*C)\\nmain()\\n\", \"def f(x):\\n\\tprint(x, end=' ')\\n\\tprint(*[x for x in range(1, x)])\\nf(int(input()))\\n\", \"import sys\\nimport math\\nn = int(sys.stdin.readline())\\na = []\\na.append(str(n))\\nfor i in range(1, n):\\n\\ta.append(str(i))\\nprint(' '.join(a))\\n\", \"n = int(input())\\nans = [n]\\nfor i in range(1, n):\\n\\tans.append(i)\\nprint(*ans)\\n\", \"def calc(s):\\n\\ta = [*range(1, s + 1)]\\n\\n\\tdef rec(x):\\n\\t\\tif x == 0:\\n\\t\\t\\treturn\\n\\t\\trec(x - 1)\\n\\t\\t(a[x - 1], a[x]) = (a[x], a[x - 1])\\n\\tend = a.pop(-1)\\n\\ta = [end] + a\\n\\treturn ' '.join([str(x) for x in a])\\ns = int(input())\\nprint(calc(s))\\n\", \"N = int(input())\\nprint(N, *range(1, N))\\n\", \"i = int(input())\\nres = str(i)\\nfor j in range(1, i):\\n\\tres = res + ' ' + str(j)\\nprint(res)\\n\", \"n = int(input())\\nfor x in range(n):\\n\\tif x == 0:\\n\\t\\tprint(n, end=' ')\\n\\telse:\\n\\t\\tprint(x, end=' ')\\n\", \"from collections import defaultdict\\n\\ndef solve():\\n\\tn = int(input())\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\n\\tprint()\\nsolve()\\n\", \"N = int(input())\\nans = [N]\\nfor i in range(1, N):\\n\\tans.append(i)\\nprint(*ans)\\n\", \"import sys\\nn = int(input())\\nres = list(range(1, n))\\nres.insert(0, n)\\nprint(' '.join(map(str, res)))\\n\", \"t = int(input())\\nprint(t, end=' ')\\nfor x in range(1, t):\\n\\tprint(x, end=' ')\\n\", \"def fun(x):\\n\\tprint(x, end=' ')\\n\\tfor i in range(1, x):\\n\\t\\tprint(i, end=' ')\\nx = int(input())\\nif x > 1:\\n\\tfun(x)\\nelse:\\n\\tprint(1)\\n\", \"z = int(input())\\nprint(z, *(i for i in range(1, z)))\\n\", \"def fun(a, x):\\n\\tif x == 1:\\n\\t\\treturn a\\n\\telse:\\n\\t\\tfun(a, x - 1)\\n\\t\\t(a[x], a[x - 1]) = (a[x - 1], a[x])\\nn = int(input())\\na = [i for i in range(0, n)]\\na.insert(1, n)\\nfor i in range(1, n + 1):\\n\\tprint(a[i], end=' ')\\n\", \"def main():\\n\\tn = int(input())\\n\\tresult = [str(n)] + [str(i) for i in range(1, n)]\\n\\tprint(' '.join(result))\\nmain()\\n\", \"def solution():\\n\\tn = int(input())\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\n\\treturn\\nsolution()\\n\", \"n = int(input())\\na = list(range(1, n))\\nprint(n, end=' ')\\nprint(*a, sep=' ')\\n\", \"def main(i):\\n\\tif i == 1:\\n\\t\\treturn 1\\n\\ts = [i] + list(range(1, i))\\n\\treturn ' '.join(map(str, s))\\nprint(main(int(input())))\\n\", \"n = int(input())\\nif n == 1:\\n\\tprint(1)\\n\\texit()\\nprint(*[n] + list(range(1, n)))\\n\", \"n = int(input())\\na = [i for i in range(1, n)]\\nif n > 1:\\n\\ta = [n] + a\\n\\tprint(*a)\\nelse:\\n\\tprint(1)\\n\", \"n = int(input())\\na = [i for i in range(1, n + 1)]\\nfor i in range(n - 1, 0, -1):\\n\\ttemp = a[i]\\n\\ta[i] = a[i - 1]\\n\\ta[i - 1] = temp\\nprint(*a)\\n\", \"x = int(input())\\n\\ndef solve(x):\\n\\tif x == 1:\\n\\t\\tprint(1)\\n\\telif x == 2:\\n\\t\\tprint('2 1')\\n\\telse:\\n\\t\\ty = [z for z in range(1, x)]\\n\\t\\tprint(x, *y)\\nsolve(x)\\n\", \"a = int(input())\\nstring = str(a)\\nstring += ' '\\nfor i in range(1, a):\\n\\tstring += str(i)\\n\\tstring += ' '\\nprint(string.strip())\\n\", \"n = int(input())\\nans = [n] + list(range(1, n))\\nprint(*ans)\\n\", \"n = int(input())\\nres = [n] + [x for x in range(1, n)]\\nprint(*res)\\n\", \"n = int(input())\\nif n == 1:\\n\\tprint(1)\\nif n >= 2:\\n\\tprint(str(n) + ' ' + ' '.join([str(i + 1) for i in range(n - 1)]))\\n\", \"n = int(input())\\nprint(n, ' '.join(list((str(i) for i in range(1, n)))))\\n\", \"n = int(input())\\nX = [i + 1 for i in range(n)]\\nfor i in range(n - 1, 0, -1):\\n\\t(X[i], X[i - 1]) = (X[i - 1], X[i])\\nfor x in X:\\n\\tprint(x, end=' ')\\n\", \"import sys\\nn = int(sys.stdin.readline())\\nanswer = [str((i + n - 1) % n + 1) for i in range(n)]\\nsys.stdout.write(' '.join(answer))\\n\", \"def main():\\n\\tfrom sys import stdin, stdout\\n\\tn = int(stdin.readline())\\n\\tarr = [x for x in range(1, n + 1)]\\n\\tarr = [arr[-1]] + arr[:n - 1]\\n\\tfor x in arr:\\n\\t\\tstdout.write(str(x) + ' ')\\nmain()\\n\", \"n = int(input())\\nnums = [int(x) for x in range(n + 1)]\\nprint(nums[n], end=' ')\\nfor i in range(1, n):\\n\\tprint(nums[i], end=' ')\\n\", \"n = int(input())\\nprint(n, *range(1, n), sep=' ')\\n\", \"import sys\\n\\ndef input():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef iinput():\\n\\treturn int(input())\\n\\ndef rinput():\\n\\treturn map(int, sys.stdin.readline().strip().split())\\n\\ndef get_list():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\nn = iinput()\\na = [n]\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tfor i in range(1, n):\\n\\t\\ta.append(i)\\n\\tprint(*a)\\n\", \"N = int(input())\\nprint(N, end=' ')\\nfor i in range(1, N - 1):\\n\\tprint(i, end=' ')\\nif N != 1:\\n\\tprint(N - 1)\\n2\\n\", \"n = int(input())\\narray = [i for i in range(1, n + 1)]\\n\\ndef calc(arr: list, x: int):\\n\\tglobal n\\n\\tif x == n - 1:\\n\\t\\treturn\\n\\telse:\\n\\t\\tcalc(arr, x + 1)\\n\\t\\t(arr[x], arr[x + 1]) = (arr[x + 1], arr[x])\\ncalc(array, 0)\\nprint(*array)\\n\", \"n = int(input())\\nif n == 1:\\n\\tprint('1')\\nelse:\\n\\tarray = [x for x in range(1, n)]\\n\\tarray = [n] + array\\n\\tprint(*array)\\n\", \"n = int(input())\\nprint(' '.join([str((it - 1) % n + 1) for it in range(n)]))\\n\", \"def main():\\n\\tn = int(input())\\n\\tl = list(range(n))\\n\\tl[0] = n\\n\\tprint(*l)\\nmain()\\n\", \"n = int(input())\\nx = [n]\\nfor i in range(1, n):\\n\\tx.append(i)\\nfor i in x:\\n\\tprint(i, end=' ')\\n\", \"n = int(input())\\na = [i + 1 for i in range(n)]\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tprint(str(n) + ' ' + ' '.join((str(x) for x in a[:-1])))\\n\", \"import sys\\nn = int(input())\\nans = list(range(2, n + 1))\\nans.append(1)\\nfor i in range(n):\\n\\tans[i] += n - 2\\n\\tans[i] %= n\\n\\tif ans[i] == 0:\\n\\t\\tans[i] = n\\nprint(*ans)\\n\", \"n = int(input())\\nfrom itertools import permutations as pem\\nList = [str(x) for x in range(1, n)]\\na = ' '.join(List)\\nprint(n, a)\\n\", \"n = int(input())\\n\\ndef func(arr, n):\\n\\tif n == 0:\\n\\t\\treturn\\n\\tfunc(arr, n - 1)\\n\\t(arr[n], arr[n - 1]) = (arr[n - 1], arr[n])\\nprint(n, *list(range(1, n)))\\n\", \"num = int(input())\\nfinal = [num]\\nfor i in range(1, num):\\n\\tfinal.append(i)\\nfor i in range(0, len(final)):\\n\\tfinal[i] = str(final[i])\\nfstring = ' '.join(final)\\nprint(fstring)\\n\", \"n = int(input())\\nres = [i for i in range(1, n + 1)]\\ni = n - 1\\nwhile i != 0:\\n\\t(res[i], res[i - 1]) = (res[i - 1], res[i])\\n\\ti -= 1\\nprint(*res)\\n\", \"n = int(input())\\nnumbers = [x for x in range(1, n)]\\nnumbers.insert(0, n)\\nprint(' '.join(map(str, numbers)))\\n\", \"a = int(input())\\nprint(a, end=' ')\\nfor j in range(1, a):\\n\\tprint(j, end=' ')\\n\", \"__author__ = 'Esfandiar'\\nn = int(input())\\nprint(n, *range(1, n))\\n\", \"def elephant(n):\\n\\tans = []\\n\\tans.append(n)\\n\\tfor i in range(1, n):\\n\\t\\tans.append(i)\\n\\treturn ans\\nn = int(input())\\nprint(*elephant(n))\\n\", \"a = input()\\nc = int(a)\\nprint(a)\\ni = 1\\nwhile i < c:\\n\\tprint(i)\\n\\ti = i + 1\\n\", \"import sys\\nn = int(input())\\nif n == 1:\\n\\tprint(1)\\nelif n == 2:\\n\\tprint(2, 1)\\nelse:\\n\\ta = [n, 1]\\n\\tfor i in range(2, n):\\n\\t\\ta.append(i)\\n\\tprint(*a)\\n\", \"n = int(input())\\ni = 1\\nj = 0\\na = []\\na.append(n)\\nfor i in range(1, n):\\n\\ta.append(i)\\nprint(*a)\\n\", \"n = int(input())\\nres = []\\nfor i in range(1, n):\\n\\tres.append(i)\\nres.insert(0, n)\\nfor ele in res:\\n\\tprint(ele, end=' ')\\n\", \"x = int(input())\\nprint(x, end=' ')\\nfor n in range(1, x):\\n\\tprint(n, end=' ')\\n\", \"n = int(input())\\nstring = str(n) + ' ' + ' '.join([str(x) for x in range(1, n)])\\nprint(string)\\n\", \"import sys\\nn = int(input())\\nprint(n, end=' ')\\nfor i in range(1, n):\\n\\tprint(i, end=' ')\\n\", \"n = int(input())\\nsequence = [str(n)]\\nfor i in range(1, n):\\n\\tsequence.append(str(i))\\nsequence = ' '.join(sequence)\\nprint(sequence)\\n\", \"__copyright__ = ''\\n__author__ = 'Son-Huy TRAN'\\n__email__ = 'sonhuytran@gmail.com'\\n__doc__ = ''\\n__version__ = '1.0'\\n\\ndef main() -> int:\\n\\tn = int(input())\\n\\tresult = [str(n)] + [str(i) for i in range(1, n)]\\n\\tprint(' '.join(result))\\n\\treturn 0\\nexit(main())\\n\", \"def f(l):\\n\\treturn [n] + list(range(1, n))\\nn = int(input())\\nprint(*f(n))\\n\", \"n = int(input())\\nl = []\\nsr = []\\nfor i in range(1, n + 1):\\n\\tl.append(i)\\n\\tif i == n:\\n\\t\\tsr = sorted(l)\\n\\t\\tsr.insert(0, n)\\n\\t\\tdel sr[-1]\\nprint(*sr)\\n\", \"n = int(input())\\nans = [str(n)] + [str(i) for i in range(1, n)]\\nprint(' '.join(ans))\\n\", \"n = int(input())\\nz = []\\nz.append(n)\\nfor i in range(1, n):\\n\\tz.append(i)\\nfor i in z:\\n\\tprint(i)\\n\", \"x = int(input())\\nif x == 1:\\n\\tprint(x)\\nelse:\\n\\tl = []\\n\\tfor i in range(1, x + 1):\\n\\t\\tl.append(str(i))\\n\\tl2 = []\\n\\tl2.append(l[-1])\\n\\tl.pop(len(l) - 1)\\n\\tfor i in l:\\n\\t\\tl2.append(i)\\n\\tfor j in l2:\\n\\t\\tprint(j, end=' ')\\n\", \"a = [int(i) for i in range(1, int(input()) + 1)]\\nprint(max(a), *a[0:len(a) - 1])\\n\", \"n = int(input())\\nl_x = [n] + [i + 1 for i in range(n - 1)]\\nprint(' '.join((str(x) for x in l_x)))\\n\", \"def Ele(n):\\n\\tif n == 1:\\n\\t\\tprint('1')\\n\\t\\treturn\\n\\telse:\\n\\t\\tprint(n, end=' ')\\n\\t\\tfor i in range(1, n):\\n\\t\\t\\tprint(i, end=' ')\\nEle(int(input()))\\n\", \"n = int(input())\\na = []\\na.append(n)\\ni = 1\\nwhile i < n:\\n\\ta.append(i)\\n\\ti += 1\\nprint(*a, sep=' ')\\n\", \"def solve(n):\\n\\tif n <= 2:\\n\\t\\treturn reversed(range(1, n + 1))\\n\\treturn [n] + list(range(1, n))\\n\\ndef main():\\n\\tn = int(input())\\n\\tprint(*solve(n))\\nmain()\\n\", \"y = int(input())\\nlst = list(range(1, y + 1))\\nlst.pop(y - 1)\\nlst.insert(0, y)\\nfor elem in lst:\\n\\tprint(elem, ' ', end='')\\n\", \"n = int(input())\\na = []\\na.append(n)\\nfor i in range(1, n):\\n\\ta.append(i)\\nprint(*a)\\n\", \"n = int(input())\\nout = []\\nout.append(n)\\nfor i in range(1, n):\\n\\tout.append(i)\\nfor i in out:\\n\\tprint(i, end=' ')\\n\", \"s = str(input())\\nanswer = []\\nfor i in range(int(s)):\\n\\tanswer.append(i + 1)\\nif len(answer) == 1:\\n\\tprint(answer[0])\\nelse:\\n\\tk = str(answer[int(s) - 1]) + ' '\\n\\tfor i in range(len(answer) - 1):\\n\\t\\tk += str(answer[i])\\n\\t\\tk += ' '\\n\\tprint(k)\\n\", \"n = int(input())\\nprint(n, end='')\\nif n == 1:\\n\\tprint()\\nelse:\\n\\tprint(end=' ')\\nprint(*range(1, n), sep=' ')\\n\", \"n = int(input())\\nx = [n]\\na = [i for i in range(1, n)]\\nx.extend(a)\\nprint(*x)\\n\", \"n = int(input())\\na = list(range(1, n + 1))\\nfor i in range(n - 1):\\n\\t(a[i], a[-1]) = (a[-1], a[i])\\nprint(*a)\\n\", \"from sys import stdin\\nn = int(stdin.readline().rstrip('\\\\n'))\\nif n == 1:\\n\\tprint('1')\\nelse:\\n\\tprint(n, end=' ')\\n\\tfor i in range(1, n):\\n\\t\\tprint(i, end=' ')\\n\\tprint('')\\n\", \"a = int(input())\\nl = [i + 1 for i in range(a)]\\ns = str(l[-1])\\nfor i in range(a - 1):\\n\\ts = s + ' ' + str(l[i])\\nprint(s)\\n\", \"n = int(input())\\nA = [i for i in range(1, n + 1)]\\nB = [0] * len(A)\\nB[0] = A[-1]\\nprint(B[0], end=' ')\\nfor j in range(len(A) - 1):\\n\\tprint(A[j], end=' ')\\n\", \"def mycode():\\n\\tn = input()\\n\\tif n == '1':\\n\\t\\tprint(1)\\n\\t\\treturn\\n\\tanswer = n + ' '\\n\\tfor i in range(1, int(n)):\\n\\t\\tanswer += str(i) + ' '\\n\\tprint(answer)\\nmycode()\\n\", \"from collections import deque\\nn = int(input())\\nl = deque()\\nfor i in range(1, n):\\n\\tl.append(i)\\nl.appendleft(n)\\nprint(*l)\\n\", \"n = int(input())\\nl = []\\nfor i in range(1, n + 1):\\n\\tif i == 1:\\n\\t\\tl.append(n)\\n\\telse:\\n\\t\\tl.append(i - 1)\\nfor j in range(len(l)):\\n\\tprint(l[j], end=' ')\\n\", \"n = int(input())\\nlst = []\\nfor i in range(1, n + 1):\\n\\tlst.append(i)\\nlst.reverse()\\nprint(lst[0], end=' ')\\nfor j in lst[1:][::-1]:\\n\\tprint(j, end=' ')\\n\", \"n = int(input())\\nans = [i for i in range(n)]\\nans[0] += n\\nprint(' '.join(map(str, ans)))\\n\", \"a = int(input())\\nb = [i for i in range(1, a + 1)]\\nc = b.pop()\\nb = [c] + b\\nans = ''\\nfor i in b:\\n\\tans = ans + str(i) + ' '\\nprint(ans)\\n\", \"x = int(input())\\nperm = [str(x), *(str(i) for i in range(1, x))]\\nprint(' '.join(perm))\\n\", \"from collections import deque\\nn = int(input())\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tr = list(range(1, n + 1))\\n\\tm = deque(r)\\n\\tm.rotate(1)\\n\\tprint(*m)\\n\", \"a = int(input())\\nl = []\\ni = 1\\nwhile i <= a:\\n\\tl.append(str(i))\\n\\ti += 1\\ni = a - 1\\nwhile i > 0:\\n\\t(l[i], l[i - 1]) = (l[i - 1], l[i])\\n\\ti -= 1\\nprint(' '.join(l))\\n\", \"import sys\\nimport math\\nimport bisect\\nimport itertools\\nimport random\\nimport re\\n\\ndef main():\\n\\tn = int(input())\\n\\tA = [0] * n\\n\\tfor i in range(n):\\n\\t\\tA[i] = i + 1\\n\\tfor i in range(n - 1, 0, -1):\\n\\t\\tA = sorted(A[:i + 1]) + A[i + 1:]\\n\\t\\t(A[i], A[i - 1]) = (A[i - 1], A[i])\\n\\tprint(' '.join(list((str(a) for a in A))))\\nmain()\\n\", \"from sys import stdin\\nn = int(stdin.readline())\\nar = [i for i in range(n, 0, -1)]\\nprint(*ar[:1] + sorted(ar[1:]))\\n\", \"n = int(input())\\narr = list(range(1, n))\\nprint(n, *arr)\\n\", \"def gint():\\n\\treturn int(input())\\n\\ndef gint_arr():\\n\\treturn list(map(int, input().split()))\\n\\ndef gfloat():\\n\\treturn float(input())\\n\\ndef gfloat_arr():\\n\\treturn list(map(float, input().split()))\\n\\ndef pair_int():\\n\\treturn map(int, input().split())\\nINF = 1 << 31\\ndx = [-1, 0, 1, 0]\\ndy = [0, 1, 0, -1]\\nn = gint()\\nprint(n, *range(1, n))\\n\", \"a = int(input())\\nprint(' '.join(map(str, [a] + [x for x in range(1, a)])))\\n\", \"n = int(input())\\nif n <= 2:\\n\\ta = [i for i in range(1, n + 1)]\\n\\ta.sort(reverse=True)\\n\\tprint(*a)\\nelse:\\n\\ta = [i for i in range(1, n)]\\n\\ta.insert(0, n)\\n\\tprint(*a)\\n\", \"import re\\nimport sys\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom collections import Counter, defaultdict, deque\\nfrom copy import deepcopy\\nfrom decimal import Decimal\\nfrom itertools import accumulate, combinations, combinations_with_replacement, groupby, permutations, product\\nfrom math import acos, asin, atan, ceil, cos, degrees, factorial, gcd, hypot, log2, pi, radians, sin, sqrt, tan\\nfrom operator import itemgetter, mul\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlist():\\n\\treturn list(map(int, input().split()))\\n\\ndef instr():\\n\\ts = input()\\n\\treturn list(s[:len(s)])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\n\\ndef def_value():\\n\\treturn False\\nn = inp()\\nprint(n, end=' ')\\nfor i in range(1, n):\\n\\tprint(i, end=' ')\\n\"]",
    "starter_code": "",
    "input_output": "{\"inputs\": [\"1000\\n\", \"683\\n\", \"998\\n\", \"195\\n\", \"811\\n\", \"419\\n\", \"6\\n\", \"67\\n\", \"875\\n\", \"25\\n\", \"999\\n\", \"101\\n\", \"7\\n\", \"971\\n\", \"683\\n\", \"875\\n\", \"4\\n\", \"5\\n\", \"971\\n\", \"291\\n\", \"101\\n\", \"24\\n\", \"998\\n\", \"779\\n\", \"779\\n\", \"3\\n\", \"907\\n\", \"99\\n\", \"21\\n\", \"997\\n\", \"23\\n\", \"291\\n\", \"900\\n\", \"195\\n\", \"1000\\n\", \"997\\n\", \"900\\n\", \"811\\n\", \"907\\n\", \"99\\n\", \"419\\n\", \"999\\n\", \"22\\n\", \"154\\n\", \"232\\n\", \"954\\n\", \"43\\n\", \"8\\n\", \"41\\n\", \"001\\n\", \"10\\n\", \"165\\n\", \"11\\n\", \"9\\n\", \"100\\n\", \"111\\n\", \"13\\n\", \"844\\n\", \"29\\n\", \"398\\n\", \"18\\n\", \"95\\n\", \"543\\n\", \"15\\n\", \"391\\n\", \"155\\n\", \"1001\\n\", \"496\\n\", \"302\\n\", \"243\\n\", \"27\\n\", \"17\\n\", \"216\\n\", \"230\\n\", \"12\\n\", \"73\\n\", \"16\\n\", \"110\\n\", \"14\\n\", \"632\\n\", \"36\\n\", \"42\\n\", \"750\\n\", \"234\\n\", \"981\\n\", \"583\\n\", \"120\\n\", \"49\\n\", \"26\\n\", \"298\\n\", \"174\\n\", \"48\\n\", \"78\\n\", \"128\\n\", \"612\\n\", \"59\\n\", \"53\\n\", \"39\\n\", \"106\\n\", \"84\\n\", \"31\\n\", \"278\\n\", \"33\\n\", \"103\\n\", \"58\\n\", \"19\\n\", \"203\\n\", \"28\\n\", \"45\\n\", \"20\\n\", \"290\\n\", \"52\\n\", \"69\\n\", \"152\\n\", \"40\\n\", \"96\\n\", \"125\\n\", \"157\\n\", \"60\\n\", \"299\\n\", \"54\\n\", \"593\\n\", \"63\\n\", \"417\\n\", \"642\\n\", \"886\\n\", \"011\\n\", \"0001\\n\", \"010\\n\", \"0011\\n\", \"0010\\n\", \"0100\\n\", \"1\\n\", \"2\\n\"], \"outputs\": [\"1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999\\n\", \"683 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682\\n\", \"998 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997\\n\", \"195 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194\\n\", \"811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810\\n\", \"419 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418\\n\", \"6 1 2 3 4 5\\n\", \"67 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\\n\", \"875 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874\\n\", \"25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\\n\", \"999 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998\\n\", \"101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n\", \"7 1 2 3 4 5 6\\n\", \"971 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970\\n\", \"683 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682\\n\", \"875 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874\\n\", \"4 1 2 3\\n\", \"5 1 2 3 4\\n\", \"971 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970\\n\", \"291 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290\\n\", \"101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n\", \"24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\\n\", \"998 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997\\n\", \"779 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778\\n\", \"779 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778\\n\", \"3 1 2\\n\", \"907 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906\\n\", \"99 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98\\n\", \"21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\n\", \"997 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996\\n\", \"23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\\n\", \"291 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290\\n\", \"900 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899\\n\", \"195 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194\\n\", \"1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999\\n\", \"997 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996\\n\", \"900 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899\\n\", \"811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810\\n\", \"907 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906\\n\", \"99 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98\\n\", \"419 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418\\n\", \"999 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998\\n\", \"22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\\n\", \"154 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 \", \"232 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 \", \"954 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 \", \"43 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \", \"8 1 2 3 4 5 6 7 \", \"41 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \", \"1\\n\", \"10 1 2 3 4 5 6 7 8 9 \", \"165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 \", \"11 1 2 3 4 5 6 7 8 9 10 \", \"9 1 2 3 4 5 6 7 8 \", \"100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 \", \"111 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 \", \"13 1 2 3 4 5 6 7 8 9 10 11 12 \", \"844 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 \", \"29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \", \"398 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 \", \"18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \", \"95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 \", \"543 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 \", \"15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \", \"391 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 \", \"155 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 \", \"1001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 \", \"496 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 \", \"302 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 \", \"243 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 \", \"27 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \", \"17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \", \"216 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 \", \"230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 \", \"12 1 2 3 4 5 6 7 8 9 10 11 \", \"73 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 \", \"16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \", \"110 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 \", \"14 1 2 3 4 5 6 7 8 9 10 11 12 13 \", \"632 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 \", \"36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \", \"42 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \", \"750 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 \", \"234 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 \", \"981 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 \", \"583 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 \", \"120 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 \", \"49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \", \"26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \", \"298 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 \", \"174 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 \", \"48 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \", \"78 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 \", \"128 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 \", \"612 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 \", \"59 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 \", \"53 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \", \"39 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \", \"106 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 \", \"84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 \", \"31 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \", \"278 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 \", \"33 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \", \"103 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 \", \"58 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \", \"19 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \", \"203 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 \", \"28 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \", \"45 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \", \"20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \", \"290 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 \", \"52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \", \"69 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \", \"152 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 \", \"40 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \", \"96 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 \", \"125 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 \", \"157 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 \", \"60 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \", \"299 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 \", \"54 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \", \"593 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 \", \"63 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 \", \"417 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 \", \"642 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 \", \"886 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 \", \"11 1 2 3 4 5 6 7 8 9 10 \", \"1\\n\", \"10 1 2 3 4 5 6 7 8 9 \", \"11 1 2 3 4 5 6 7 8 9 10 \", \"10 1 2 3 4 5 6 7 8 9 \", \"100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 \", \"1\\n\", \"2 1\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['math', 'implementation']",
    "name": null,
    "source": "codeforces",
    "tags": "['Mathematics', 'Implementation']",
    "skill_types": "[]",
    "url": "https://codeforces.com/problemset/problem/221/A",
    "Expected Auxiliary Space": null,
    "time_limit": "2.0 seconds",
    "date": null,
    "picture_num": null,
    "memory_limit": "256.0 megabytes",
    "Expected Time Complexity": null
  }
]